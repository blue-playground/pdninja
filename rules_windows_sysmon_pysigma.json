[
    {
        "title": "HackTool - EfsPotato Named Pipe Creation",
        "id": "637f689e-b4a5-4a86-be0e-0100a0a33ba2",
        "status": "test",
        "description": "Detects the pattern of a pipe name as used by the hack tool EfsPotato",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & (PipeName.str.contains(r'\\\\pipe\\\\', case=False) | PipeName.str.contains(r'\\\\pipe\\\\srvsvc', case=False)) & ~ (PipeName.str.contains(r'\\\\CtxShare', case=False) | PipeName.str.contains(r'\\\\pipe\\\\', case=False))"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Koh Default Named Pipe",
        "id": "0adc67e0-a68f-4ffd-9c43-28905aad5d6a",
        "status": "test",
        "description": "Detects creation of default named pipes used by the Koh tool",
        "tags": [
            "attack.privilege-escalation",
            "attack.credential-access",
            "attack.t1528",
            "attack.t1134.001"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & (PipeName.str.contains(r'\\\\imposecost', case=False) | PipeName.str.contains(r'\\\\imposingcost', case=False))"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PsExec Tool Execution From Suspicious Locations - PipeName",
        "id": "41504465-5e3a-4a5b-a5b4-2a0baadd4463",
        "status": "test",
        "description": "Detects PsExec default pipe creation where the image executed is located in a suspicious location. Which could indicate that the tool is being used in an attack",
        "tags": [
            "attack.execution",
            "attack.t1569.002",
            "attack.s0029"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & PipeName=='\\\\PSEXESVC' & (Image.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\Desktop\\\\', case=False) | Image.str.contains(r'\\\\Downloads\\\\', case=False))"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - PAExec Default Named Pipe",
        "id": "f6451de4-df0a-41fa-8d72-b39f54a08db5",
        "status": "test",
        "description": "Detects PAExec default named pipe",
        "tags": [
            "attack.execution",
            "attack.t1569.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & PipeName.str.contains(r'\\\\PAExec', case=False)"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Credential Dumping Tools Named Pipe Created",
        "id": "961d0ba2-3eea-4303-a930-2cf78bbfcc5e",
        "status": "test",
        "description": "Detects well-known credential dumping tools execution via specific named pipe creation",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001",
            "attack.t1003.002",
            "attack.t1003.004",
            "attack.t1003.005"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & (PipeName.str.contains(r'\\\\cachedump', case=False) | PipeName.str.contains(r'\\\\lsadump', case=False) | PipeName.str.contains(r'\\\\wceservicepipe', case=False))"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Alternate PowerShell Hosts Pipe",
        "id": "58cb02d5-78ce-4692-b3e1-dce850aae41a",
        "status": "test",
        "description": "Detects alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & PipeName.str.contains(r'\\\\PSHost', case=False) & ~ (Image.str.contains(r':\\\\Program Files\\\\PowerShell\\\\7-preview\\\\pwsh.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\system32\\\\dsac.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\system32\\\\inetsrv\\\\w3wp.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\sdiagnhost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\system32\\\\ServerManager.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\system32\\\\wbem\\\\wmiprvse.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\wsmprovhost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe', case=False) | Image is null) & ~ ((Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\', case=False)) & Image.str.contains(r'\\\\Microsoft SQL Server\\\\', case=False) & Image.str.contains(r'\\\\Tools\\\\Binn\\\\SQLPS.exe', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\AzureConnectedMachineAgent\\\\GCArcService', case=False) & Image.str.contains(r'\\\\GC\\\\gc_worker.exe', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Citrix\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\Exchange Server\\\\', case=False))"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - DiagTrackEoP Default Named Pipe",
        "id": "1f7025a6-e747-4130-aac4-961eb47015f1",
        "status": "test",
        "description": "Detects creation of default named pipe used by the DiagTrackEoP POC, a tool that abuses \"SeImpersonate\" privilege.",
        "tags": [
            "attack.privilege-escalation"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & PipeName.str.contains(r'thisispipe', case=False)"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - RemCom Default Named Pipe",
        "id": "d36f87ea-c403-44d2-aa79-1a0ac7c24456",
        "status": "test",
        "description": "Detects default RemCom pipe creation",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002",
            "attack.execution",
            "attack.t1569.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & PipeName.str.contains(r'\\\\RemCom', case=False)"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CobaltStrike Named Pipe Pattern Regex",
        "id": "0e7163d4-9e19-4fa7-9be6-000c61aad77a",
        "status": "test",
        "description": "Detects the creation of a named pipe matching a pattern used by CobaltStrike Malleable C2 profiles",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & (PipeName.str.contains(r'\\\\\\\\mojo\\\\.5688\\\\.8052\\\\.(?:183894939787088877|35780273329370473)[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\wkssvc_?[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\ntsvcs[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\DserNamePipe[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\SearchTextHarvester[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\mypipe-(?:f|h)[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\windows\\\\.update\\\\.manager[0-9a-f]{2,3}') | PipeName.str.contains(r'\\\\\\\\ntsvcs_[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\scerpc_?[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\PGMessagePipe[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\MsFteWds[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\f4c3[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\fullduplex_[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\msrpc_[0-9a-f]{4}') | PipeName.str.contains(r'\\\\\\\\win\\\\\\\\msrpc_[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\f53f[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\rpc_[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\spoolss_[0-9a-f]{2}') | PipeName.str.contains(r'\\\\\\\\Winsock2\\\\\\\\CatalogChangeListener-[0-9a-f]{3}-0,'))"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New PowerShell Instance Created",
        "id": "ac7102b4-9e1e-4802-9b4f-17c5524c015c",
        "status": "test",
        "description": "Detects the execution of PowerShell via the creation of a named pipe starting with PSHost",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "informational",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & PipeName.str.contains(r'\\\\PSHost', case=False)"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CobaltStrike Named Pipe Patterns",
        "id": "85adeb13-4fc9-4e68-8a4a-c7cb2c336eb7",
        "status": "test",
        "description": "Detects the creation of a named pipe with a pattern found in CobaltStrike malleable C2 profiles",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055",
            "stp.1k"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & (PipeName.str.contains(r'\\\\DserNamePipe', case=False) | PipeName.str.contains(r'\\\\f4c3', case=False) | PipeName.str.contains(r'\\\\f53f', case=False) | PipeName.str.contains(r'\\\\fullduplex_', case=False) | PipeName.str.contains(r'\\\\mojo.5688.8052.183894939787088877', case=False) | PipeName.str.contains(r'\\\\mojo.5688.8052.35780273329370473', case=False) | PipeName.str.contains(r'\\\\MsFteWds', case=False) | PipeName.str.contains(r'\\\\msrpc_', case=False) | PipeName.str.contains(r'\\\\mypipe-f', case=False) | PipeName.str.contains(r'\\\\mypipe-h', case=False) | PipeName.str.contains(r'\\\\ntsvcs', case=False) | PipeName.str.contains(r'\\\\PGMessagePipe', case=False) | PipeName.str.contains(r'\\\\rpc_', case=False) | PipeName.str.contains(r'\\\\scerpc', case=False) | PipeName.str.contains(r'\\\\SearchTextHarvester', case=False) | PipeName.str.contains(r'\\\\spoolss', case=False) | PipeName.str.contains(r'\\\\win_svc', case=False) | PipeName.str.contains(r'\\\\win\\\\msrpc_', case=False) | PipeName.str.contains(r'\\\\windows.update.manager', case=False) | PipeName.str.contains(r'\\\\wkssvc', case=False) | PipeName==['\\\\demoagent_11', '\\\\demoagent_22'] | PipeName.str.contains(r'\\\\Winsock2\\\\CatalogChangeListener-', case=False) & PipeName.str.contains(r'-0,', case=False)) & ~ (PipeName==['\\\\wkssvc', '\\\\spoolss', '\\\\scerpc', '\\\\ntsvcs', '\\\\SearchTextHarvester', '\\\\PGMessagePipe', '\\\\MsFteWds']) & ~ ((Image.str.contains(r':\\\\Program Files\\\\Websense\\\\', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Websense\\\\', case=False)) & (PipeName.str.contains(r'\\\\DserNamePipeR', case=False) | PipeName.str.contains(r'\\\\DserNamePipeW', case=False)))"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CobaltStrike Named Pipe",
        "id": "d5601f8c-b26f-4ab0-9035-69e11a8d4ad2",
        "status": "test",
        "description": "Detects the creation of a named pipe as used by CobaltStrike",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & (PipeName.str.contains(r'\\\\MSSE-', case=False) & PipeName.str.contains(r'-server', case=False) | PipeName.str.contains(r'\\\\postex_', case=False) | PipeName.str.contains(r'\\\\status_', case=False) | PipeName.str.contains(r'\\\\msagent_', case=False) | PipeName.str.contains(r'\\\\mojo_', case=False) | PipeName.str.contains(r'\\\\interprocess_', case=False) | PipeName.str.contains(r'\\\\samr_', case=False) | PipeName.str.contains(r'\\\\netlogon_', case=False) | PipeName.str.contains(r'\\\\srvsvc_', case=False) | PipeName.str.contains(r'\\\\lsarpc_', case=False) | PipeName.str.contains(r'\\\\wkssvc_', case=False))"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - CSExec Default Named Pipe",
        "id": "f318b911-ea88-43f4-9281-0de23ede628e",
        "status": "test",
        "description": "Detects default CSExec pipe creation",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002",
            "attack.execution",
            "attack.t1569.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & PipeName.str.contains(r'\\\\csexecsvc', case=False)"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WMI Event Consumer Created Named Pipe",
        "id": "493fb4ab-cdcc-4c4f-818c-0e363bd1e4bb",
        "status": "test",
        "description": "Detects the WMI Event Consumer service scrcons.exe creating a named pipe",
        "tags": [
            "attack.t1047",
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & Image.str.contains(r'\\\\scrcons.exe', case=False)"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - CoercedPotato Named Pipe Creation",
        "id": "4d0083b3-580b-40da-9bba-626c19fe4033",
        "status": "test",
        "description": "Detects the pattern of a pipe name as used by the hack tool CoercedPotato",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & PipeName.str.contains(r'\\\\coerced\\\\', case=False)"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Malicious Named Pipe Created",
        "id": "fe3ac066-98bb-432a-b1e7-a5229cb39d4a",
        "status": "test",
        "description": "Detects the creation of a named pipe seen used by known APTs or malware.",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & (PipeName=='\\\\46a676ab7f179e511e30dd2dc41bd388' | PipeName=='\\\\583da945-62af-10e8-4902-a8f205c72b2e' | PipeName=='\\\\6e7645c4-32c5-4fe3-aabf-e94c2f4370e7' | PipeName=='\\\\9f81f59bc58452127884ce513865ed20' | PipeName=='\\\\adschemerpc' | PipeName=='\\\\ahexec' | PipeName=='\\\\AnonymousPipe' | PipeName=='\\\\bc31a7' | PipeName=='\\\\bc367' | PipeName=='\\\\bizkaz' | PipeName=='\\\\csexecsvc' | PipeName=='\\\\dce_3d' | PipeName=='\\\\e710f28d59aa529d6792ca6ff0ca1b34' | PipeName=='\\\\gruntsvc' | PipeName=='\\\\isapi_dg' | PipeName=='\\\\isapi_dg2' | PipeName=='\\\\isapi_http' | PipeName=='\\\\jaccdpqnvbrrxlaf' | PipeName=='\\\\lsassw' | PipeName=='\\\\NamePipe_MoreWindows' | PipeName=='\\\\pcheap_reuse' | PipeName.str.contains(r'\\\\Posh', case=False) | PipeName=='\\\\rpchlp_3' | PipeName=='\\\\sdlrpc' | PipeName=='\\\\svcctl' | PipeName=='\\\\testPipe' | PipeName=='\\\\winsession')"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ADFS Database Named Pipe Connection By Uncommon Tool",
        "id": "1ea13e8c-03ea-409b-877d-ce5c3d2c1cb3",
        "status": "test",
        "description": "Detects suspicious local connections via a named pipe to the AD FS configuration database (Windows Internal Database).\nUsed to access information such as the AD FS configuration settings which contains sensitive information used to sign SAML tokens.\n",
        "tags": [
            "attack.collection",
            "attack.t1005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[17, 18]) & PipeName=='\\\\MICROSOFT##WID\\\\tsql\\\\query' & ~ (Image.str.contains(r':\\\\Windows\\\\System32\\\\mmc.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\system32\\\\svchost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\wsmprovhost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\mmc.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\wsmprovhost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\WID\\\\Binn\\\\sqlwriter.exe', case=False) | Image.str.contains(r'\\\\AzureADConnect.exe', case=False) | Image.str.contains(r'\\\\Microsoft.Identity.Health.Adfs.PshSurrogate.exe', case=False) | Image.str.contains(r'\\\\Microsoft.IdentityServer.ServiceHost.exe', case=False) | Image.str.contains(r'\\\\Microsoft.Tri.Sensor.exe', case=False) | Image.str.contains(r'\\\\sqlservr.exe', case=False) | Image.str.contains(r'\\\\tssdis.exe', case=False))"
        ],
        "logsource": {
            "category": "pipe_created",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Process Hollowing Activity",
        "id": "c4b890e5-8d8c-4496-8c66-c805753817cd",
        "status": "test",
        "description": "Detects when a memory process image does not match the disk image, indicative of process hollowing.",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055.012"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==25 & Type=='Image is replaced' & ~ (Image.str.contains(r':\\\\Program Files (x86)', case=False) | Image.str.contains(r':\\\\Program Files\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\wbem\\\\WMIADAP.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\wbem\\\\WMIADAP.exe', case=False)) & ~ (Image.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\Opera\\\\', case=False) & Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\WindowsApps\\\\MicrosoftEdge.exe', case=False))"
        ],
        "logsource": {
            "category": "process_tampering",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Scripting in a WMI Consumer",
        "id": "fe21810c-2a8c-478f-8dd3-5a287fb2a0e0",
        "status": "test",
        "description": "Detects suspicious commands that are related to scripting/powershell in WMI Event Consumers",
        "tags": [
            "attack.execution",
            "attack.t1059.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[19, 20, 21]) & (Destination.str.contains(r'new-object', case=False) & Destination.str.contains(r'net.webclient', case=False) & Destination.str.contains(r'.downloadstring', case=False) | Destination.str.contains(r'new-object', case=False) & Destination.str.contains(r'net.webclient', case=False) & Destination.str.contains(r'.downloadfile', case=False) | Destination.str.contains(r' iex(', case=False) | Destination.str.contains(r' -nop ', case=False) | Destination.str.contains(r' -noprofile ', case=False) | Destination.str.contains(r' -decode ', case=False) | Destination.str.contains(r' -enc ', case=False) | Destination.str.contains(r'WScript.Shell', case=False) | Destination.str.contains(r'System.Security.Cryptography.FromBase64Transform', case=False))"
        ],
        "logsource": {
            "category": "wmi_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Encoded Scripts in a WMI Consumer",
        "id": "83844185-1c5b-45bc-bcf3-b5bf3084ca5b",
        "status": "test",
        "description": "Detects suspicious encoded payloads in WMI Event Consumers",
        "tags": [
            "attack.execution",
            "attack.t1047",
            "attack.persistence",
            "attack.t1546.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[19, 20, 21]) & (Destination.str.contains(r'V3JpdGVQcm9jZXNzTWVtb3J5', case=False) | Destination.str.contains(r'dyaXRlUHJvY2Vzc01lbW9ye', case=False) | Destination.str.contains(r'Xcml0ZVByb2Nlc3NNZW1vcn', case=False) | Destination.str.contains(r'VGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZG', case=False) | Destination.str.contains(r'RoaXMgcHJvZ3JhbSBjYW5ub3QgYmUgcnVuIGluIERPUyBtb2Rl', case=False) | Destination.str.contains(r'UaGlzIHByb2dyYW0gY2Fubm90IGJlIHJ1biBpbiBET1MgbW9kZ', case=False) | Destination.str.contains(r'VGhpcyBwcm9ncmFtIG11c3QgYmUgcnVuIHVuZGVyIFdpbjMy', case=False) | Destination.str.contains(r'RoaXMgcHJvZ3JhbSBtdXN0IGJlIHJ1biB1bmRlciBXaW4zM', case=False) | Destination.str.contains(r'UaGlzIHByb2dyYW0gbXVzdCBiZSBydW4gdW5kZXIgV2luMz', case=False))"
        ],
        "logsource": {
            "category": "wmi_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WMI Event Subscription",
        "id": "0f06a3a5-6a09-413f-8743-e6cf35561297",
        "status": "test",
        "description": "Detects creation of WMI event subscription persistence method",
        "tags": [
            "attack.persistence",
            "attack.t1546.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[19, 20, 21]) & (EventID==[19, 20, 21])"
        ],
        "logsource": {
            "category": "wmi_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Credential Dumping Activity By Python Based Tool",
        "id": "f8be3e82-46a3-4e4e-ada5-8e538ae8b9c9",
        "status": "stable",
        "description": "Detects LSASS process access for potential credential dumping by a Python-like tool such as LaZagne or Pypykatz.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001",
            "attack.s0349"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & TargetImage.str.contains(r'\\\\lsass.exe', case=False) & CallTrace.str.contains(r'_ctypes.pyd+', case=False) & CallTrace.str.contains(r':\\\\Windows\\\\System32\\\\KERNELBASE.dll+', case=False) & CallTrace.str.contains(r':\\\\Windows\\\\SYSTEM32\\\\ntdll.dll+', case=False) & (CallTrace.str.contains(r'python27.dll+', case=False) | CallTrace.str.contains(r'*python3*.dll+*')) & GrantedAccess=='0x1FFFFF'"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Lsass Memory Dump via Comsvcs DLL",
        "id": "a49fa4d5-11db-418c-8473-1e014a8dd462",
        "status": "test",
        "description": "Detects adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & TargetImage.str.contains(r'\\\\lsass.exe', case=False) & SourceImage.str.contains(r'\\\\rundll32.exe', case=False) & CallTrace.str.contains(r'comsvcs.dll', case=False)"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Credential Dumping Attempt Via Svchost",
        "id": "174afcfa-6e40-4ae9-af64-496546389294",
        "status": "test",
        "description": "Detects when a process tries to access the memory of svchost to potentially dump credentials.",
        "tags": [
            "attack.t1548"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & TargetImage.str.contains(r'\\\\svchost.exe', case=False) & GrantedAccess=='0x143a' & ~ (SourceImage.str.contains(r'\\\\services.exe', case=False) | SourceImage.str.contains(r'\\\\msiexec.exe', case=False))"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Function Call From Undocumented COM Interface EditionUpgradeManager",
        "id": "fb3722e4-1a06-46b6-b772-253e2e7db933",
        "status": "test",
        "description": "Detects function calls from the EditionUpgradeManager COM interface. Which is an interface that is not used by standard executables.",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & CallTrace.str.contains(r'editionupgrademanagerobj.dll', case=False)"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - CobaltStrike BOF Injection Pattern",
        "id": "09706624-b7f6-455d-9d02-adee024cee1d",
        "status": "test",
        "description": "Detects a typical pattern of a CobaltStrike BOF which inject into other processes",
        "tags": [
            "attack.execution",
            "attack.t1106",
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & CallTrace.str.contains(r'^C:\\\\\\\\Windows\\\\\\\\SYSTEM32\\\\\\\\ntdll\\\\.dll\\\\+[a-z0-9]{4,6}\\\\|C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\KERNELBASE\\\\.dll\\\\+[a-z0-9]{4,6}\\\\|UNKNOWN\\\\([A-Z0-9]{16}\\\\)$') & (GrantedAccess==['0x1028', '0x1fffff'])"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - LittleCorporal Generated Maldoc Injection",
        "id": "7bdde3bf-2a42-4c39-aa31-a92b3e17afac",
        "status": "test",
        "description": "Detects the process injection of a LittleCorporal generated Maldoc.",
        "tags": [
            "attack.execution",
            "attack.t1204.002",
            "attack.t1055.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & SourceImage.str.contains(r'\\\\winword.exe', case=False) & CallTrace.str.contains(r':\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\v2.', case=False) & CallTrace.str.contains(r'UNKNOWN', case=False)"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Credential Dumping Attempt Via WerFault",
        "id": "e5b33f7d-eb93-48b6-9851-09e1e610b6d7",
        "status": "test",
        "description": "Detects process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001",
            "attack.s0002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & SourceImage.str.contains(r'\\\\WerFault.exe', case=False) & TargetImage.str.contains(r'\\\\lsass.exe', case=False) & GrantedAccess=='0x1FFFFF'"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SysmonEnte Execution",
        "id": "d29ada0f-af45-4f27-8f32-f7b77c3dbc4e",
        "status": "test",
        "description": "Detects the use of SysmonEnte, a tool to attack the integrity of Sysmon",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & ((TargetImage.str.contains(r':\\\\Windows\\\\Sysmon.exe', case=False) | TargetImage.str.contains(r':\\\\Windows\\\\Sysmon64.exe', case=False)) & GrantedAccess=='0x1400' & ~ (SourceImage.str.contains(r':\\\\Program Files (x86)\\\\', case=False) | SourceImage.str.contains(r':\\\\Program Files\\\\', case=False) | SourceImage.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | SourceImage.str.contains(r':\\\\Windows\\\\SysWOW64\\\\', case=False) | SourceImage.str.contains(r':\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False) & SourceImage.str.contains(r'\\\\MsMpEng.exe', case=False)) | CallTrace=='Ente')"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CMSTP Execution Process Access",
        "id": "3b4b232a-af90-427c-a22f-30b0c0837b95",
        "status": "stable",
        "description": "Detects various indicators of Microsoft Connection Manager Profile Installer execution",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.003",
            "attack.execution",
            "attack.t1559.001",
            "attack.g0069",
            "attack.g0080",
            "car.2019-04-001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & CallTrace.str.contains(r'cmlua.dll', case=False)"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - HandleKatz Duplicating LSASS Handle",
        "id": "b1bd3a59-c1fd-4860-9f40-4dd161a7d1f5",
        "status": "test",
        "description": "Detects HandleKatz opening LSASS to duplicate its handle to later dump the memory without opening any new handles",
        "tags": [
            "attack.execution",
            "attack.t1106",
            "attack.defense-evasion",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & TargetImage.str.contains(r'\\\\lsass.exe', case=False) & GrantedAccess=='0x1440' & CallTrace.str.contains(r'C:\\\\Windows\\\\System32\\\\ntdll.dll+', case=False) & CallTrace.str.contains(r'|UNKNOWN(', case=False) & CallTrace.str.contains(r')', case=False)"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious LSASS Access Via MalSecLogon",
        "id": "472159c5-31b9-4f56-b794-b766faa8b0a7",
        "status": "test",
        "description": "Detects suspicious access to LSASS handle via a call trace to \"seclogon.dll\" with a suspicious access right.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & TargetImage.str.contains(r'\\\\lsass.exe', case=False) & SourceImage.str.contains(r'\\\\svchost.exe', case=False) & GrantedAccess=='0x14c0' & CallTrace.str.contains(r'seclogon.dll', case=False)"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Generic Process Access",
        "id": "d0d2f720-d14f-448d-8242-51ff396a334e",
        "status": "test",
        "description": "Detects process access requests from hacktool processes based on their default image name",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001",
            "attack.s0002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & (SourceImage.str.contains(r'\\\\Akagi.exe', case=False) | SourceImage.str.contains(r'\\\\Akagi64.exe', case=False) | SourceImage.str.contains(r'\\\\atexec_windows.exe', case=False) | SourceImage.str.contains(r'\\\\Certify.exe', case=False) | SourceImage.str.contains(r'\\\\Certipy.exe', case=False) | SourceImage.str.contains(r'\\\\CoercedPotato.exe', case=False) | SourceImage.str.contains(r'\\\\crackmapexec.exe', case=False) | SourceImage.str.contains(r'\\\\CreateMiniDump.exe', case=False) | SourceImage.str.contains(r'\\\\dcomexec_windows.exe', case=False) | SourceImage.str.contains(r'\\\\dpapi_windows.exe', case=False) | SourceImage.str.contains(r'\\\\findDelegation_windows.exe', case=False) | SourceImage.str.contains(r'\\\\GetADUsers_windows.exe', case=False) | SourceImage.str.contains(r'\\\\GetNPUsers_windows.exe', case=False) | SourceImage.str.contains(r'\\\\getPac_windows.exe', case=False) | SourceImage.str.contains(r'\\\\getST_windows.exe', case=False) | SourceImage.str.contains(r'\\\\getTGT_windows.exe', case=False) | SourceImage.str.contains(r'\\\\GetUserSPNs_windows.exe', case=False) | SourceImage.str.contains(r'\\\\gmer.exe', case=False) | SourceImage.str.contains(r'\\\\hashcat.exe', case=False) | SourceImage.str.contains(r'\\\\htran.exe', case=False) | SourceImage.str.contains(r'\\\\ifmap_windows.exe', case=False) | SourceImage.str.contains(r'\\\\impersonate.exe', case=False) | SourceImage.str.contains(r'\\\\Inveigh.exe', case=False) | SourceImage.str.contains(r'\\\\LocalPotato.exe', case=False) | SourceImage.str.contains(r'\\\\mimikatz_windows.exe', case=False) | SourceImage.str.contains(r'\\\\mimikatz.exe', case=False) | SourceImage.str.contains(r'\\\\netview_windows.exe', case=False) | SourceImage.str.contains(r'\\\\nmapAnswerMachine_windows.exe', case=False) | SourceImage.str.contains(r'\\\\opdump_windows.exe', case=False) | SourceImage.str.contains(r'\\\\PasswordDump.exe', case=False) | SourceImage.str.contains(r'\\\\Potato.exe', case=False) | SourceImage.str.contains(r'\\\\PowerTool.exe', case=False) | SourceImage.str.contains(r'\\\\PowerTool64.exe', case=False) | SourceImage.str.contains(r'\\\\psexec_windows.exe', case=False) | SourceImage.str.contains(r'\\\\PurpleSharp.exe', case=False) | SourceImage.str.contains(r'\\\\pypykatz.exe', case=False) | SourceImage.str.contains(r'\\\\QuarksPwDump.exe', case=False) | SourceImage.str.contains(r'\\\\rdp_check_windows.exe', case=False) | SourceImage.str.contains(r'\\\\Rubeus.exe', case=False) | SourceImage.str.contains(r'\\\\SafetyKatz.exe', case=False) | SourceImage.str.contains(r'\\\\sambaPipe_windows.exe', case=False) | SourceImage.str.contains(r'\\\\SelectMyParent.exe', case=False) | SourceImage.str.contains(r'\\\\SharpChisel.exe', case=False) | SourceImage.str.contains(r'\\\\SharPersist.exe', case=False) | SourceImage.str.contains(r'\\\\SharpEvtMute.exe', case=False) | SourceImage.str.contains(r'\\\\SharpImpersonation.exe', case=False) | SourceImage.str.contains(r'\\\\SharpLDAPmonitor.exe', case=False) | SourceImage.str.contains(r'\\\\SharpLdapWhoami.exe', case=False) | SourceImage.str.contains(r'\\\\SharpUp.exe', case=False) | SourceImage.str.contains(r'\\\\SharpView.exe', case=False) | SourceImage.str.contains(r'\\\\smbclient_windows.exe', case=False) | SourceImage.str.contains(r'\\\\smbserver_windows.exe', case=False) | SourceImage.str.contains(r'\\\\sniff_windows.exe', case=False) | SourceImage.str.contains(r'\\\\sniffer_windows.exe', case=False) | SourceImage.str.contains(r'\\\\split_windows.exe', case=False) | SourceImage.str.contains(r'\\\\SpoolSample.exe', case=False) | SourceImage.str.contains(r'\\\\Stracciatella.exe', case=False) | SourceImage.str.contains(r'\\\\SysmonEOP.exe', case=False) | SourceImage.str.contains(r'\\\\temp\\\\rot.exe', case=False) | SourceImage.str.contains(r'\\\\ticketer_windows.exe', case=False) | SourceImage.str.contains(r'\\\\TruffleSnout.exe', case=False) | SourceImage.str.contains(r'\\\\winPEASany_ofs.exe', case=False) | SourceImage.str.contains(r'\\\\winPEASany.exe', case=False) | SourceImage.str.contains(r'\\\\winPEASx64_ofs.exe', case=False) | SourceImage.str.contains(r'\\\\winPEASx64.exe', case=False) | SourceImage.str.contains(r'\\\\winPEASx86_ofs.exe', case=False) | SourceImage.str.contains(r'\\\\winPEASx86.exe', case=False) | SourceImage.str.contains(r'\\\\xordump.exe', case=False) | SourceImage.str.contains(r'\\\\goldenPac', case=False) | SourceImage.str.contains(r'\\\\just_dce_', case=False) | SourceImage.str.contains(r'\\\\karmaSMB', case=False) | SourceImage.str.contains(r'\\\\kintercept', case=False) | SourceImage.str.contains(r'\\\\LocalPotato', case=False) | SourceImage.str.contains(r'\\\\ntlmrelayx', case=False) | SourceImage.str.contains(r'\\\\rpcdump', case=False) | SourceImage.str.contains(r'\\\\samrdump', case=False) | SourceImage.str.contains(r'\\\\secretsdump', case=False) | SourceImage.str.contains(r'\\\\smbexec', case=False) | SourceImage.str.contains(r'\\\\smbrelayx', case=False) | SourceImage.str.contains(r'\\\\wmiexec', case=False) | SourceImage.str.contains(r'\\\\wmipersist', case=False) | SourceImage.str.contains(r'HotPotato', case=False) | SourceImage.str.contains(r'Juicy Potato', case=False) | SourceImage.str.contains(r'JuicyPotato', case=False) | SourceImage.str.contains(r'PetitPotam', case=False) | SourceImage.str.contains(r'RottenPotato', case=False))"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using WOW64 Logger DLL Hijack",
        "id": "4f6c43e2-f989-4ea5-bcd8-843b49a0317c",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using a WoW64 logger DLL hijack (UACMe 30)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & SourceImage.str.contains(r':\\\\Windows\\\\SysWOW64\\\\', case=False) & GrantedAccess=='0x1fffff' & CallTrace.str.contains(r'UNKNOWN(0000000000000000)|UNKNOWN(0000000000000000)|', case=False)"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LSASS Memory Access by Tool With Dump Keyword In Name",
        "id": "9bd012ee-0dff-44d7-84a0-aa698cfd87a3",
        "status": "test",
        "description": "Detects LSASS process access requests from a source process with the \"dump\" keyword in its image name.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001",
            "attack.s0002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & TargetImage.str.contains(r'\\\\lsass.exe', case=False) & SourceImage.str.contains(r'dump', case=False) & (GrantedAccess.str.contains(r'10', case=False) | GrantedAccess.str.contains(r'30', case=False) | GrantedAccess.str.contains(r'50', case=False) | GrantedAccess.str.contains(r'70', case=False) | GrantedAccess.str.contains(r'90', case=False) | GrantedAccess.str.contains(r'B0', case=False) | GrantedAccess.str.contains(r'D0', case=False) | GrantedAccess.str.contains(r'F0', case=False) | GrantedAccess.str.contains(r'18', case=False) | GrantedAccess.str.contains(r'38', case=False) | GrantedAccess.str.contains(r'58', case=False) | GrantedAccess.str.contains(r'78', case=False) | GrantedAccess.str.contains(r'98', case=False) | GrantedAccess.str.contains(r'B8', case=False) | GrantedAccess.str.contains(r'D8', case=False) | GrantedAccess.str.contains(r'F8', case=False) | GrantedAccess.str.contains(r'1A', case=False) | GrantedAccess.str.contains(r'3A', case=False) | GrantedAccess.str.contains(r'5A', case=False) | GrantedAccess.str.contains(r'7A', case=False) | GrantedAccess.str.contains(r'9A', case=False) | GrantedAccess.str.contains(r'BA', case=False) | GrantedAccess.str.contains(r'DA', case=False) | GrantedAccess.str.contains(r'FA', case=False) | GrantedAccess.str.contains(r'0x14C2', case=False) | GrantedAccess.str.contains(r'FF', case=False))"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Credential Dumping Activity Via LSASS",
        "id": "5ef9853e-4d0e-4a70-846f-a9ca37d876da",
        "status": "test",
        "description": "Detects process access requests to the LSASS process with specific call trace calls and access masks.\nThis behaviour is expressed by many credential dumping tools such as Mimikatz, NanoDump, Invoke-Mimikatz, Procdump and even the Taskmgr dumping feature.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001",
            "attack.s0002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & TargetImage.str.contains(r'\\\\lsass.exe', case=False) & (GrantedAccess.str.contains(r'0x1038', case=False) | GrantedAccess.str.contains(r'0x1438', case=False) | GrantedAccess.str.contains(r'0x143a', case=False) | GrantedAccess.str.contains(r'0x1fffff', case=False)) & (CallTrace.str.contains(r'dbgcore.dll', case=False) | CallTrace.str.contains(r'dbghelp.dll', case=False) | CallTrace.str.contains(r'kernel32.dll', case=False) | CallTrace.str.contains(r'kernelbase.dll', case=False) | CallTrace.str.contains(r'ntdll.dll', case=False)) & ~ (SourceUser.str.contains(r'AUTHORI', case=False) | SourceUser.str.contains(r'AUTORI', case=False)) & ~ (CallTrace.str.contains(r':\\\\Windows\\\\Temp\\\\asgard2-agent\\\\', case=False) & CallTrace.str.contains(r'\\\\thor\\\\thor64.exe+', case=False) & CallTrace.str.contains(r'|UNKNOWN(', case=False) & GrantedAccess=='0x103800' | SourceImage.str.contains(r':\\\\Windows\\\\Sysmon64.exe', case=False))"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious GrantedAccess Flags On LSASS",
        "id": "a18dd26b-6450-46de-8c91-9659150cf088",
        "status": "test",
        "description": "Detects process access requests to LSASS process with potentially suspicious access flags",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001",
            "attack.s0002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & TargetImage.str.contains(r'\\\\lsass.exe', case=False) & (GrantedAccess.str.contains(r'30', case=False) | GrantedAccess.str.contains(r'50', case=False) | GrantedAccess.str.contains(r'70', case=False) | GrantedAccess.str.contains(r'90', case=False) | GrantedAccess.str.contains(r'B0', case=False) | GrantedAccess.str.contains(r'D0', case=False) | GrantedAccess.str.contains(r'F0', case=False) | GrantedAccess.str.contains(r'18', case=False) | GrantedAccess.str.contains(r'38', case=False) | GrantedAccess.str.contains(r'58', case=False) | GrantedAccess.str.contains(r'78', case=False) | GrantedAccess.str.contains(r'98', case=False) | GrantedAccess.str.contains(r'B8', case=False) | GrantedAccess.str.contains(r'D8', case=False) | GrantedAccess.str.contains(r'F8', case=False) | GrantedAccess.str.contains(r'1A', case=False) | GrantedAccess.str.contains(r'3A', case=False) | GrantedAccess.str.contains(r'5A', case=False) | GrantedAccess.str.contains(r'7A', case=False) | GrantedAccess.str.contains(r'9A', case=False) | GrantedAccess.str.contains(r'BA', case=False) | GrantedAccess.str.contains(r'DA', case=False) | GrantedAccess.str.contains(r'FA', case=False) | GrantedAccess.str.contains(r'0x14C2', case=False) | GrantedAccess.str.contains(r'0x100000', case=False) | GrantedAccess.str.contains(r'0x1418', case=False) | GrantedAccess.str.contains(r'0x1438', case=False) | GrantedAccess.str.contains(r'0x143a', case=False) | GrantedAccess.str.contains(r'0x1f0fff', case=False) | GrantedAccess.str.contains(r'0x1f1fff', case=False) | GrantedAccess.str.contains(r'0x1f2fff', case=False) | GrantedAccess.str.contains(r'0x1f3fff', case=False) | GrantedAccess.str.contains(r'0x40', case=False)) & ~ (SourceImage.str.contains(r':\\\\Program Files (x86)\\\\', case=False) | SourceImage.str.contains(r':\\\\Program Files\\\\', case=False) | SourceImage.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | SourceImage.str.contains(r':\\\\Windows\\\\SysWOW64\\\\', case=False) | SourceImage.str.contains(r':\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\', case=False) & SourceImage.str.contains(r'\\\\MsMpEng.exe', case=False) | CallTrace.str.contains(r'*|*:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Definition Updates\\\\{*') & CallTrace.str.contains(r'}\\\\mpengine.dll+', case=False) & GrantedAccess=='0x1418' | CallTrace.str.contains(r'|c:\\\\program files\\\\windows defender\\\\mprtp.dll', case=False) | CallTrace.str.contains(r'|c:\\\\program files\\\\windows defender\\\\MpClient.dll', case=False) | SourceImage.str.contains(r'\\\\explorer.exe', case=False) & GrantedAccess=='0x401') & ~ (SourceImage.str.contains(r':\\\\ProgramData\\\\MALWAREBYTES\\\\MBAMSERVICE\\\\ctlrupdate\\\\mbupdatr.exe', case=False) | SourceImage.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\Code.exe', case=False) | SourceImage.str.contains(r':\\\\ProgramData\\\\VMware\\\\VMware Tools\\\\', case=False) & SourceImage.str.contains(r'\\\\vmtoolsd.exe', case=False) | (SourceImage.str.contains(r'\\\\PROCEXP64.EXE', case=False) | SourceImage.str.contains(r'\\\\PROCEXP.EXE', case=False)) & GrantedAccess=='0x40' | SourceImage.str.contains(r'\\\\MBAMInstallerService.exe', case=False) & GrantedAccess=='0x40' | (SourceImage.str.contains(r'\\\\aurora-agent-64.exe', case=False) | SourceImage.str.contains(r'\\\\aurora-agent.exe', case=False) | SourceImage.str.contains(r'\\\\thor.exe', case=False) | SourceImage.str.contains(r'\\\\thor64.exe', case=False)) & GrantedAccess=='0x40' | (SourceImage.str.contains(r'\\\\handle.exe', case=False) | SourceImage.str.contains(r'\\\\handle64.exe', case=False)) & GrantedAccess=='0x40' | SourceImage.str.contains(r'\\\\AppData\\\\Local\\\\WebEx\\\\WebexHost.exe', case=False) & GrantedAccess=='0x401' | SourceImage.str.contains(r'\\\\SteamLibrary\\\\steamapps\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Process Access Rights For Target Image",
        "id": "a24e5861-c6ca-4fde-a93c-ba9256feddf0",
        "status": "experimental",
        "description": "Detects process access request to uncommon target images with a \"PROCESS_ALL_ACCESS\" access mask.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055.011"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & (TargetImage.str.contains(r'\\\\calc.exe', case=False) | TargetImage.str.contains(r'\\\\calculator.exe', case=False) | TargetImage.str.contains(r'\\\\mspaint.exe', case=False) | TargetImage.str.contains(r'\\\\notepad.exe', case=False) | TargetImage.str.contains(r'\\\\ping.exe', case=False) | TargetImage.str.contains(r'\\\\wordpad.exe', case=False) | TargetImage.str.contains(r'\\\\write.exe', case=False)) & GrantedAccess=='0x1FFFFF'"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Direct Syscall of NtOpenProcess",
        "id": "3f3f3506-1895-401b-9cc3-e86b16e630d0",
        "status": "test",
        "description": "Detects potential calls to NtOpenProcess directly from NTDLL.",
        "tags": [
            "attack.execution",
            "attack.t1106"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & CallTrace.str.contains(r'UNKNOWN', case=False) & ~ (TargetImage.str.contains(r'vcredist_x64.exe', case=False) & SourceImage.str.contains(r'vcredist_x64.exe', case=False) | (SourceImage.str.contains(r':\\\\Program Files (x86)\\\\', case=False) | SourceImage.str.contains(r':\\\\Program Files\\\\', case=False) | SourceImage.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | SourceImage.str.contains(r':\\\\Windows\\\\SysWOW64\\\\', case=False) | SourceImage.str.contains(r':\\\\Windows\\\\WinSxS\\\\', case=False)) & (TargetImage.str.contains(r':\\\\Program Files (x86)\\\\', case=False) | TargetImage.str.contains(r':\\\\Program Files\\\\', case=False) | TargetImage.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | TargetImage.str.contains(r':\\\\Windows\\\\SysWOW64\\\\', case=False) | TargetImage.str.contains(r':\\\\Windows\\\\WinSxS\\\\', case=False)) | Provider_Name=='Microsoft-Windows-Kernel-Audit-API-Calls') & ~ (TargetImage.str.contains(r':\\\\Windows\\\\system32\\\\systeminfo.exe', case=False) & SourceImage.str.contains(r'setup64.exe', case=False) | SourceImage.str.contains(r':\\\\Windows\\\\Explorer.EXE', case=False) & TargetImage.str.contains(r':\\\\Program Files\\\\Cylance\\\\Desktop\\\\CylanceUI.exe', case=False) | SourceImage.str.contains(r'AmazonSSMAgentSetup.exe', case=False) & TargetImage.str.contains(r'AmazonSSMAgentSetup.exe', case=False) | SourceImage.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\Code.exe', case=False) & TargetImage.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\Code.exe', case=False) | TargetImage.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\current\\\\Teams.exe', case=False) & SourceImage.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\current\\\\Teams.exe', case=False) | TargetImage.str.contains(r'\\\\AppData\\\\Local\\\\Discord\\\\', case=False) & TargetImage.str.contains(r'\\\\Discord.exe', case=False) | SourceImage.str.contains(r'\\\\AppData\\\\Local\\\\yammerdesktop\\\\app-', case=False) & SourceImage.str.contains(r'\\\\Yammer.exe', case=False) & TargetImage.str.contains(r'\\\\AppData\\\\Local\\\\yammerdesktop\\\\app-', case=False) & TargetImage.str.contains(r'\\\\Yammer.exe', case=False) & GrantedAccess=='0x1000' | TargetImage.str.contains(r'\\\\Evernote\\\\Evernote.exe', case=False) | SourceImage.str.contains(r':\\\\Program Files\\\\Adobe\\\\Acrobat DC\\\\Acrobat\\\\', case=False) & SourceImage.str.contains(r'\\\\AcroCEF.exe', case=False) & TargetImage.str.contains(r':\\\\Program Files\\\\Adobe\\\\Acrobat DC\\\\Acrobat\\\\', case=False) & TargetImage.str.contains(r'\\\\AcroCEF.exe', case=False))"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote LSASS Process Access Through Windows Remote Management",
        "id": "aa35a627-33fb-4d04-a165-d33b4afca3e8",
        "status": "stable",
        "description": "Detects remote access to the LSASS process via WinRM. This could be a sign of credential dumping from tools like mimikatz.",
        "tags": [
            "attack.credential-access",
            "attack.execution",
            "attack.t1003.001",
            "attack.t1059.001",
            "attack.lateral-movement",
            "attack.t1021.006",
            "attack.s0002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & TargetImage.str.contains(r'\\\\lsass.exe', case=False) & SourceImage.str.contains(r':\\\\Windows\\\\system32\\\\wsmprovhost.exe', case=False) & ~ GrantedAccess=='0x80000000'"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Svchost Process Access",
        "id": "166e9c50-8cd9-44af-815d-d1f0c0e90dde",
        "status": "test",
        "description": "Detects suspicious access to the \"svchost\" process such as that used by Invoke-Phantom to kill the thread of the Windows event logging service.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & TargetImage.str.contains(r':\\\\Windows\\\\System32\\\\svchost.exe', case=False) & GrantedAccess=='0x1F3FFF' & CallTrace.str.contains(r'UNKNOWN', case=False) & ~ (SourceImage.str.contains(r':\\\\Program Files\\\\Microsoft Visual Studio\\\\', case=False) & SourceImage.str.contains(r'\\\\MSBuild\\\\Current\\\\Bin\\\\MSBuild.exe', case=False) & (CallTrace.str.contains(r'Microsoft.Build.ni.dll', case=False) | CallTrace.str.contains(r'System.ni.dll', case=False)))"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LSASS Access From Potentially White-Listed Processes",
        "id": "4be8b654-0c01-4c9d-a10c-6b28467fc651",
        "status": "test",
        "description": "Detects a possible process memory dump that uses a white-listed filename like TrolleyExpress.exe as a way to dump the LSASS process memory without Microsoft Defender interference\n",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001",
            "attack.s0002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==10 & TargetImage.str.contains(r'\\\\lsass.exe', case=False) & (SourceImage.str.contains(r'\\\\TrolleyExpress.exe', case=False) | SourceImage.str.contains(r'\\\\ProcessDump.exe', case=False) | SourceImage.str.contains(r'\\\\dump64.exe', case=False)) & (GrantedAccess.str.contains(r'10', case=False) | GrantedAccess.str.contains(r'30', case=False) | GrantedAccess.str.contains(r'50', case=False) | GrantedAccess.str.contains(r'70', case=False) | GrantedAccess.str.contains(r'90', case=False) | GrantedAccess.str.contains(r'B0', case=False) | GrantedAccess.str.contains(r'D0', case=False) | GrantedAccess.str.contains(r'F0', case=False) | GrantedAccess.str.contains(r'18', case=False) | GrantedAccess.str.contains(r'38', case=False) | GrantedAccess.str.contains(r'58', case=False) | GrantedAccess.str.contains(r'78', case=False) | GrantedAccess.str.contains(r'98', case=False) | GrantedAccess.str.contains(r'B8', case=False) | GrantedAccess.str.contains(r'D8', case=False) | GrantedAccess.str.contains(r'F8', case=False) | GrantedAccess.str.contains(r'1A', case=False) | GrantedAccess.str.contains(r'3A', case=False) | GrantedAccess.str.contains(r'5A', case=False) | GrantedAccess.str.contains(r'7A', case=False) | GrantedAccess.str.contains(r'9A', case=False) | GrantedAccess.str.contains(r'BA', case=False) | GrantedAccess.str.contains(r'DA', case=False) | GrantedAccess.str.contains(r'FA', case=False) | GrantedAccess.str.contains(r'0x14C2', case=False) | GrantedAccess.str.contains(r'FF', case=False))"
        ],
        "logsource": {
            "category": "process_access",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential SmadHook.DLL Sideloading",
        "id": "24b6cf51-6122-469e-861a-22974e9c1e5b",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"SmadHook.dll\", a DLL used by SmadAV antivirus",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\SmadHook32c.dll', case=False) | ImageLoaded.str.contains(r'\\\\SmadHook64c.dll', case=False)) & ~ ((Image==['C:\\\\Program Files (x86)\\\\SMADAV\\\\SmadavProtect32.exe', 'C:\\\\Program Files (x86)\\\\SMADAV\\\\SmadavProtect64.exe', 'C:\\\\Program Files\\\\SMADAV\\\\SmadavProtect32.exe', 'C:\\\\Program Files\\\\SMADAV\\\\SmadavProtect64.exe']) & (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\SMADAV\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\SMADAV\\\\', case=False)))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WMI ActiveScriptEventConsumers Activity Via Scrcons.EXE DLL Load",
        "id": "b439f47d-ef52-4b29-9a2f-57d8a96cb6b8",
        "status": "test",
        "description": "Detects signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indicates WMI ActiveScriptEventConsumers EventConsumers activity.",
        "tags": [
            "attack.lateral-movement",
            "attack.privilege-escalation",
            "attack.persistence",
            "attack.t1546.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\scrcons.exe', case=False) & (ImageLoaded.str.contains(r'\\\\vbscript.dll', case=False) | ImageLoaded.str.contains(r'\\\\wbemdisp.dll', case=False) | ImageLoaded.str.contains(r'\\\\wshom.ocx', case=False) | ImageLoaded.str.contains(r'\\\\scrrun.dll', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential RjvPlatform.DLL Sideloading From Default Location",
        "id": "259dda31-b7a3-444f-b7d8-17f96e8a7d0d",
        "status": "test",
        "description": "Detects loading of \"RjvPlatform.dll\" by the \"SystemResetPlatform.exe\" binary which can be abused as a method of DLL side loading since the \"$SysReset\" directory isn't created by default.",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image=='C:\\\\Windows\\\\System32\\\\SystemResetPlatform\\\\SystemResetPlatform.exe' & ImageLoaded=='C:\\\\$SysReset\\\\Framework\\\\Stack\\\\RjvPlatform.dll'"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Active Directory Kerberos DLL Loaded Via Office Application",
        "id": "7417e29e-c2e7-4cf6-a2e8-767228c64837",
        "status": "test",
        "description": "Detects Kerberos DLL being loaded by an Office Product",
        "tags": [
            "attack.execution",
            "attack.t1204.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\mspub.exe', case=False) | Image.str.contains(r'\\\\onenote.exe', case=False) | Image.str.contains(r'\\\\onenoteim.exe', case=False) | Image.str.contains(r'\\\\outlook.exe', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) | Image.str.contains(r'\\\\winword.exe', case=False)) & ImageLoaded.str.contains(r'\\\\kerberos.dll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Volume Shadow Copy Vsstrace.dll Load",
        "id": "48bfd177-7cf2-412b-ad77-baf923489e82",
        "status": "test",
        "description": "Detects the image load of VSS DLL by uncommon executables",
        "tags": [
            "attack.defense-evasion",
            "attack.impact",
            "attack.t1490"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\vsstrace.dll', case=False) & ~ (Image==['C:\\\\Windows\\\\explorer.exe', 'C:\\\\Windows\\\\ImmersiveControlPanel\\\\SystemSettings.exe'] | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\Temp\\\\{', case=False) | Image.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False) | Image.str.contains(r'C:\\\\ProgramData\\\\Package Cache\\\\{', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Core DLL Loaded By Non PowerShell Process",
        "id": "092bc4b9-3d1d-43b4-a6b4-8c8acd83522f",
        "status": "test",
        "description": "Detects loading of essential DLLs used by PowerShell by non-PowerShell process.\nDetects behavior similar to meterpreter's \"load powershell\" extension.\n",
        "tags": [
            "attack.t1059.001",
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (Description=='System.Management.Automation' | OriginalFileName=='System.Management.Automation.dll' | ImageLoaded.str.contains(r'\\\\System.Management.Automation.dll', case=False) | ImageLoaded.str.contains(r'\\\\System.Management.Automation.ni.dll', case=False)) & ~ (Image.str.contains(r':\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\dsac.exe', case=False) | Image.str.contains(r':\\\\WINDOWS\\\\System32\\\\RemoteFXvGPUDisablement.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\runscripthelper.exe', case=False) | Image.str.contains(r':\\\\WINDOWS\\\\System32\\\\sdiagnhost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\ServerManager.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\SyncAppvPublishingServer.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\winrshost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\wsmprovhost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\winrshost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\wsmprovhost.exe', case=False) | (Image.str.contains(r':\\\\Windows\\\\Microsoft.NET\\\\Framework\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\', case=False)) & Image.str.contains(r'\\\\mscorsvw.exe', case=False)) & ~ ((Image.str.contains(r':\\\\Program Files (x86)\\\\Microsoft SQL Server Management Studio', case=False) | Image.str.contains(r':\\\\Program Files\\\\Microsoft SQL Server Management Studio', case=False)) & Image.str.contains(r'\\\\IDE\\\\Ssms.exe', case=False) | (Image.str.contains(r':\\\\Program Files (x86)\\\\Microsoft SQL Server\\\\', case=False) | Image.str.contains(r':\\\\Program Files\\\\Microsoft SQL Server\\\\', case=False)) & Image.str.contains(r'\\\\Tools\\\\Binn\\\\SQLPS.exe', case=False) | Image.str.contains(r'\\\\Citrix\\\\ConfigSync\\\\ConfigSyncRun.exe', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\', case=False) | Image.str.contains(r':\\\\Program Files\\\\Microsoft Visual Studio\\\\', case=False) | Image.str.contains(r':\\\\ProgramData\\\\chocolatey\\\\choco.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\Temp\\\\asgard2-agent\\\\', case=False) & (Image.str.contains(r'\\\\thor64.exe', case=False) | Image.str.contains(r'\\\\thor.exe', case=False)) | Image is null)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PCRE.NET Package Image Load",
        "id": "84b0a8f3-680b-4096-a45b-e9a89221727c",
        "status": "test",
        "description": "Detects processes loading modules related to PCRE.NET package",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\ba9ea7344a4a5f591d6e5dc32a13494b\\\\', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Amsi.DLL Loaded Via LOLBIN Process",
        "id": "6ec86d9e-912e-4726-91a2-209359b999b9",
        "status": "test",
        "description": "Detects loading of \"Amsi.dll\" by a living of the land process. This could be an indication of a \"PowerShell without PowerShell\" attack",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\amsi.dll', case=False) & (Image.str.contains(r'\\\\ExtExport.exe', case=False) | Image.str.contains(r'\\\\odbcconf.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "VBA DLL Loaded Via Office Application",
        "id": "e6ce8457-68b1-485b-9bdd-3c2b5d679aa9",
        "status": "test",
        "description": "Detects VB DLL's loaded by an office application. Which could indicate the presence of VBA Macros.",
        "tags": [
            "attack.execution",
            "attack.t1204.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\mspub.exe', case=False) | Image.str.contains(r'\\\\onenote.exe', case=False) | Image.str.contains(r'\\\\onenoteim.exe', case=False) | Image.str.contains(r'\\\\outlook.exe', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) | Image.str.contains(r'\\\\winword.exe', case=False)) & (ImageLoaded.str.contains(r'\\\\VBE7.DLL', case=False) | ImageLoaded.str.contains(r'\\\\VBEUI.DLL', case=False) | ImageLoaded.str.contains(r'\\\\VBE7INTL.DLL', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SharpEvtMute DLL Load",
        "id": "49329257-089d-46e6-af37-4afce4290685",
        "status": "test",
        "description": "Detects the load of EvtMuteHook.dll, a key component of SharpEvtHook, a tool that tampers with the Windows event logs",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Hashes.str.contains(r'IMPHASH=330768A4F172E10ACB6287B87289D83B', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Unsigned Mfdetours.DLL Sideloading",
        "id": "948a0953-f287-4806-bbcb-3b2e396df89f",
        "status": "test",
        "description": "Detects DLL sideloading of unsigned \"mfdetours.dll\". Executing \"mftrace.exe\" can be abused to attach to an arbitrary process and force load any DLL named \"mfdetours.dll\" from the current directory of execution.",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\mfdetours.dll', case=False) & ~ (ImageLoaded.str.contains(r':\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\bin\\\\', case=False) & SignatureStatus=='Valid')"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Microsoft VBA For Outlook Addin Loaded Via Outlook",
        "id": "9a0b8719-cd3c-4f0a-90de-765a4cb3f5ed",
        "status": "test",
        "description": "Detects outlvba (Microsoft VBA for Outlook Addin) DLL being loaded by the outlook process",
        "tags": [
            "attack.execution",
            "attack.t1204.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\outlook.exe', case=False) & ImageLoaded.str.contains(r'\\\\outlvba.dll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Mfdetours.DLL Sideloading",
        "id": "d2605a99-2218-4894-8fd3-2afb7946514d",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"mfdetours.dll\". While using \"mftrace.exe\" it can be abused to attach to an arbitrary process and force load any DLL named \"mfdetours.dll\" from the current directory of execution.",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\mfdetours.dll', case=False) & ~ ImageLoaded.str.contains(r':\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\bin\\\\', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Unsigned Thor Scanner Execution",
        "id": "ea5c131b-380d-49f9-aeb3-920694da4d4b",
        "status": "stable",
        "description": "Detects loading and execution of an unsigned thor scanner binary.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (Image.str.contains(r'\\\\thor.exe', case=False) | Image.str.contains(r'\\\\thor64.exe', case=False)) & (ImageLoaded.str.contains(r'\\\\thor.exe', case=False) | ImageLoaded.str.contains(r'\\\\thor64.exe', case=False)) & ~ (Signed=='true' & SignatureStatus=='valid' & Signature=='Nextron Systems GmbH')"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Wazuh Security Platform DLL Sideloading",
        "id": "db77ce78-7e28-4188-9337-cf30e2b3ba9f",
        "status": "test",
        "description": "Detects potential DLL side loading of DLLs that are part of the Wazuh security platform",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\libwazuhshared.dll', case=False) | ImageLoaded.str.contains(r'\\\\libwinpthread-1.dll', case=False)) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False)) & ~ ((ImageLoaded.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | ImageLoaded.str.contains(r'\\\\ProgramData\\\\', case=False)) & ImageLoaded.str.contains(r'\\\\mingw64\\\\bin\\\\libwinpthread-1.dll', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential ShellDispatch.DLL Sideloading",
        "id": "844f8eb2-610b-42c8-89a4-47596e089663",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"ShellDispatch.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\ShellDispatch.dll', case=False) & ~ (ImageLoaded.str.contains(r':\\\\Users\\\\', case=False) & ImageLoaded.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | ImageLoaded.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Via comctl32.dll",
        "id": "6360757a-d460-456c-8b13-74cf0e60cceb",
        "status": "test",
        "description": "Detects potential DLL sideloading using comctl32.dll to obtain system privileges",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'C:\\\\Windows\\\\System32\\\\logonUI.exe.local\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\System32\\\\werFault.exe.local\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\System32\\\\consent.exe.local\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\System32\\\\narrator.exe.local\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\windows\\\\system32\\\\wermgr.exe.local\\\\', case=False)) & ImageLoaded.str.contains(r'\\\\comctl32.dll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Via VMware Xfer",
        "id": "9313dc13-d04c-46d8-af4a-a930cc55d93b",
        "status": "test",
        "description": "Detects loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\VMwareXferlogs.exe', case=False) & ImageLoaded.str.contains(r'\\\\glib-2.0.dll', case=False) & ~ ImageLoaded.str.contains(r'C:\\\\Program Files\\\\VMware\\\\', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SILENTTRINITY Stager DLL Load",
        "id": "75c505b1-711d-4f68-a357-8c3fe37dbf2d",
        "status": "test",
        "description": "Detects SILENTTRINITY stager dll loading activity",
        "tags": [
            "attack.command-and-control",
            "attack.t1071"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Description.str.contains(r'st2stager', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Active Directory Parsing DLL Loaded Via Office Application",
        "id": "a2a3b925-7bb0-433b-b508-db9003263cc4",
        "status": "test",
        "description": "Detects DSParse DLL being loaded by an Office Product",
        "tags": [
            "attack.execution",
            "attack.t1204.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\mspub.exe', case=False) | Image.str.contains(r'\\\\onenote.exe', case=False) | Image.str.contains(r'\\\\onenoteim.exe', case=False) | Image.str.contains(r'\\\\outlook.exe', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) | Image.str.contains(r'\\\\winword.exe', case=False)) & ImageLoaded.str.contains(r'\\\\dsparse.dll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious WSMAN Provider Image Loads",
        "id": "ad1f4bb9-8dfb-4765-adb6-2a7cfb6c0f94",
        "status": "test",
        "description": "Detects signs of potential use of the WSMAN provider from uncommon processes locally and remote execution.",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.lateral-movement",
            "attack.t1021.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\WsmSvc.dll', case=False) | ImageLoaded.str.contains(r'\\\\WsmAuto.dll', case=False) | ImageLoaded.str.contains(r'\\\\Microsoft.WSMan.Management.ni.dll', case=False) | OriginalFileName==['WsmSvc.dll', 'WSMANAUTOMATION.DLL', 'Microsoft.WSMan.Management.dll'] | Image.str.contains(r'\\\\svchost.exe', case=False) & OriginalFileName=='WsmWmiPl.dll') & ~ (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\sdiagnhost.exe', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\services.exe', case=False) | CommandLine.str.contains(r'svchost.exe -k netsvcs -p -s BITS', case=False) | CommandLine.str.contains(r'svchost.exe -k GraphicsPerfSvcGroup -s GraphicsPerfSvc', case=False) | CommandLine.str.contains(r'svchost.exe -k NetworkService -p -s Wecsvc', case=False) | CommandLine.str.contains(r'svchost.exe -k netsvcs', case=False) | (Image.str.contains(r'C:\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\v', case=False) | Image.str.contains(r'C:\\\\Windows\\\\Microsoft.NET\\\\Framework\\\\v', case=False)) & Image.str.contains(r'\\\\mscorsvw.exe', case=False) | Image==['C:\\\\Windows\\\\System32\\\\Configure-SMRemoting.exe', 'C:\\\\Windows\\\\System32\\\\ServerManager.exe'] | Image.str.contains(r'C:\\\\Windows\\\\Temp\\\\asgard2-agent\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Citrix\\\\', case=False) | Image.str.contains(r'\\\\powershell_ise.exe', case=False) | Image.str.contains(r'C:\\\\$WINDOWS.~BT\\\\Sources\\\\', case=False)) & ~ (Image.str.contains(r'\\\\svchost.exe', case=False) & CommandLine is null)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Load Of RstrtMgr.DLL By A Suspicious Process",
        "id": "b48492dc-c5ef-4572-8dff-32bc241c15c8",
        "status": "test",
        "description": "Detects the load of RstrtMgr DLL (Restart Manager) by a suspicious process.\nThis library has been used during ransomware campaigns to kill processes that would prevent file encryption by locking them (e.g. Conti ransomware, Cactus ransomware). It has also recently been seen used by the BiBi wiper for Windows.\nIt could also be used for anti-analysis purposes by shut downing specific processes.\n",
        "tags": [
            "attack.impact",
            "attack.defense-evasion",
            "attack.t1486",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\RstrtMgr.dll', case=False) | OriginalFileName=='RstrtMgr.dll') & (Image.str.contains(r':\\\\Perflogs\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\Temporary Internet', case=False) | Image.str.contains(r':\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\Favorites\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\Favourites\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\Contacts\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Of DbgModel.DLL",
        "id": "fef394cd-f44d-4040-9b18-95d92fe278c0",
        "status": "experimental",
        "description": "Detects potential DLL sideloading of \"DbgModel.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\dbgmodel.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False)) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\Microsoft.WinDbg_', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Windows Kits\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Windows Kits\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DCOM InternetExplorer.Application DLL Hijack - Image Load",
        "id": "f354eba5-623b-450f-b073-0b5b2773b6aa",
        "status": "test",
        "description": "Detects potential DLL hijack of \"iertutil.dll\" found in the DCOM InternetExplorer.Application Class",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002",
            "attack.t1021.003"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\Internet Explorer\\\\iexplore.exe', case=False) & ImageLoaded.str.contains(r'\\\\Internet Explorer\\\\iertutil.dll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Of Non-Existent DLLs From System Folders",
        "id": "6b98b92b-4f00-4f62-b4fe-4d1920215771",
        "status": "test",
        "description": "Detects DLL sideloading of system DLLs that are not present on the system by default (at least not in system directories).\nUsually this technique is used to achieve UAC bypass or privilege escalation.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r':\\\\Windows\\\\System32\\\\TSMSISrv.dll', case=False) | ImageLoaded.str.contains(r':\\\\Windows\\\\System32\\\\TSVIPSrv.dll', case=False) | ImageLoaded.str.contains(r':\\\\Windows\\\\System32\\\\wbem\\\\wbemcomn.dll', case=False) | ImageLoaded.str.contains(r':\\\\Windows\\\\System32\\\\WLBSCTRL.dll', case=False) | ImageLoaded.str.contains(r':\\\\Windows\\\\System32\\\\wow64log.dll', case=False) | ImageLoaded.str.contains(r':\\\\Windows\\\\System32\\\\WptsExtensions.dll', case=False)) & ~ (Signed=='true' & SignatureStatus=='Valid' & Signature=='Microsoft Windows')"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Unsigned DLL Loaded by Windows Utility",
        "id": "b5de0c9a-6f19-43e0-af4e-55ad01f550af",
        "status": "test",
        "description": "Detects windows utilities loading an unsigned or untrusted DLL.\nAdversaries often abuse those programs to proxy execution of malicious code.\n",
        "tags": [
            "attack.t1218.011",
            "attack.t1218.010",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (Image.str.contains(r'\\\\InstallUtil.exe', case=False) | Image.str.contains(r'\\\\RegAsm.exe', case=False) | Image.str.contains(r'\\\\RegSvcs.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False)) & ~ (Signed=='true' | SignatureStatus==['errorChaining', 'errorCode_endpoint', 'errorExpired', 'trusted'] | Signed is null | Signed==['', '-'] | SignatureStatus is null | SignatureStatus==['', '-'])"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Microsoft Excel Add-In Loaded From Uncommon Location",
        "id": "af4c4609-5755-42fe-8075-4effb49f5d44",
        "status": "test",
        "description": "Detects Microsoft Excel loading an Add-In (.xll) file from an uncommon location",
        "tags": [
            "attack.execution",
            "attack.t1204.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\excel.exe', case=False) & (ImageLoaded.str.contains(r'\\\\Desktop\\\\', case=False) | ImageLoaded.str.contains(r'\\\\Downloads\\\\', case=False) | ImageLoaded.str.contains(r'\\\\Perflogs\\\\', case=False) | ImageLoaded.str.contains(r'\\\\Temp\\\\', case=False) | ImageLoaded.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | ImageLoaded.str.contains(r'\\\\Windows\\\\Tasks\\\\', case=False)) & ImageLoaded.str.contains(r'.xll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "GAC DLL Loaded Via Office Applications",
        "id": "90217a70-13fc-48e4-b3db-0d836c5824ac",
        "status": "test",
        "description": "Detects any GAC DLL being loaded by an Office Product",
        "tags": [
            "attack.execution",
            "attack.t1204.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\mspub.exe', case=False) | Image.str.contains(r'\\\\onenote.exe', case=False) | Image.str.contains(r'\\\\onenoteim.exe', case=False) | Image.str.contains(r'\\\\outlook.exe', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) | Image.str.contains(r'\\\\winword.exe', case=False)) & ImageLoaded.str.contains(r'C:\\\\Windows\\\\Microsoft.NET\\\\assembly\\\\GAC_MSIL', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential 7za.DLL Sideloading",
        "id": "4f6edb78-5c21-42ab-a558-fd2a6fc1fd57",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"7za.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\7za.dll', case=False) & ~ ((Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\', case=False)) & (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\', case=False)))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Fax Service DLL Search Order Hijack",
        "id": "828af599-4c53-4ed2-ba4a-a9f835c434ea",
        "status": "test",
        "description": "The Fax service attempts to load ualapi.dll, which is non-existent. An attacker can then (side)load their own malicious DLL using this service.",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\fxssvc.exe', case=False) & ImageLoaded.str.contains(r'ualapi.dll', case=False) & ~ ImageLoaded.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "System Control Panel Item Loaded From Uncommon Location",
        "id": "2b140a5c-dc02-4bb8-b6b1-8bdb45714cde",
        "status": "test",
        "description": "Detects image load events of system control panel items (.cpl) from uncommon or non-system locations which might be the result of sideloading.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\hdwwiz.cpl', case=False) | ImageLoaded.str.contains(r'\\\\appwiz.cpl', case=False)) & ~ (ImageLoaded.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | ImageLoaded.str.contains(r':\\\\Windows\\\\SysWOW64\\\\', case=False) | ImageLoaded.str.contains(r':\\\\Windows\\\\WinSxS\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Unsigned Module Loaded by ClickOnce Application",
        "id": "060d5ad4-3153-47bb-8382-43e5e29eda92",
        "status": "test",
        "description": "Detects unsigned module load by ClickOnce application.",
        "tags": [
            "attack.persistence",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\AppData\\\\Local\\\\Apps\\\\2.0\\\\', case=False) & (Signed=='false' | SignatureStatus=='Expired')"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Aruba Network Service Potential DLL Sideloading",
        "id": "90ae0469-0cee-4509-b67f-e5efcef040f7",
        "status": "test",
        "description": "Detects potential DLL sideloading activity via the Aruba Networks Virtual Intranet Access \"arubanetsvc.exe\" process using DLL Search Order Hijacking",
        "tags": [
            "attack.privilege-escalation",
            "attack.persistence",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\arubanetsvc.exe', case=False) & (ImageLoaded.str.contains(r'\\\\wtsapi32.dll', case=False) | ImageLoaded.str.contains(r'\\\\msvcr100.dll', case=False) | ImageLoaded.str.contains(r'\\\\msvcp100.dll', case=False) | ImageLoaded.str.contains(r'\\\\dbghelp.dll', case=False) | ImageLoaded.str.contains(r'\\\\dbgcore.dll', case=False) | ImageLoaded.str.contains(r'\\\\wininet.dll', case=False) | ImageLoaded.str.contains(r'\\\\iphlpapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\version.dll', case=False) | ImageLoaded.str.contains(r'\\\\cryptsp.dll', case=False) | ImageLoaded.str.contains(r'\\\\cryptbase.dll', case=False) | ImageLoaded.str.contains(r'\\\\wldp.dll', case=False) | ImageLoaded.str.contains(r'\\\\profapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\sspicli.dll', case=False) | ImageLoaded.str.contains(r'\\\\winsta.dll', case=False) | ImageLoaded.str.contains(r'\\\\dpapi.dll', case=False)) & ~ (ImageLoaded.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential SolidPDFCreator.DLL Sideloading",
        "id": "a2edbce1-95c8-4291-8676-0d45146862b3",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"SolidPDFCreator.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\SolidPDFCreator.dll', case=False) & ~ (Image.str.contains(r'\\\\SolidPDFCreator.exe', case=False) & (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\SolidDocuments\\\\SolidPDFCreator\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\SolidDocuments\\\\SolidPDFCreator\\\\', case=False)))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DotNET Assembly DLL Loaded Via Office Application",
        "id": "ff0f2b05-09db-4095-b96d-1b75ca24894a",
        "status": "test",
        "description": "Detects any assembly DLL being loaded by an Office Product",
        "tags": [
            "attack.execution",
            "attack.t1204.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\mspub.exe', case=False) | Image.str.contains(r'\\\\onenote.exe', case=False) | Image.str.contains(r'\\\\onenoteim.exe', case=False) | Image.str.contains(r'\\\\outlook.exe', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) | Image.str.contains(r'\\\\winword.exe', case=False)) & ImageLoaded.str.contains(r'C:\\\\Windows\\\\assembly\\\\', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Of MsCorSvc.DLL",
        "id": "cdb15e19-c2d0-432a-928e-e49c8c60dcf2",
        "status": "experimental",
        "description": "Detects potential DLL sideloading of \"mscorsvc.dll\".",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\mscorsvc.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Windows\\\\Microsoft.NET\\\\Framework\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential RjvPlatform.DLL Sideloading From Non-Default Location",
        "id": "0e0bc253-07ed-43f1-816d-e1b220fe8971",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"RjvPlatform.dll\" by \"SystemResetPlatform.exe\" located in a non-default location.",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\RjvPlatform.dll', case=False) & Image=='\\\\SystemResetPlatform.exe' & ~ Image.str.contains(r'C:\\\\Windows\\\\System32\\\\SystemResetPlatform\\\\', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Using Coregen.exe",
        "id": "0fa66f66-e3f6-4a9c-93f8-4f2610b00171",
        "status": "test",
        "description": "Detect usage of the \"coregen.exe\" (Microsoft CoreCLR Native Image Generator) binary to sideload arbitrary DLLs.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1055"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\coregen.exe', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft Silverlight\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Microsoft Silverlight\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Of Libcurl.DLL Via GUP.EXE",
        "id": "e49b5745-1064-4ac1-9a2e-f687bc2dd37e",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\gup.exe', case=False) & ImageLoaded.str.contains(r'\\\\libcurl.dll', case=False) & ~ Image.str.contains(r'\\\\Notepad++\\\\updater\\\\GUP.exe', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential CCleanerReactivator.DLL Sideloading",
        "id": "3735d5ac-d770-4da0-99ff-156b180bc600",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"CCleanerReactivator.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\CCleanerReactivator.dll', case=False) & ~ ((Image.str.contains(r'C:\\\\Program Files\\\\CCleaner\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\CCleaner\\\\', case=False)) & Image.str.contains(r'\\\\CCleanerReactivator.exe', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Wmiprvse Wbemcomn DLL Hijack",
        "id": "7707a579-e0d8-4886-a853-ce47e4575aaa",
        "status": "test",
        "description": "Detects a threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario.",
        "tags": [
            "attack.execution",
            "attack.t1047",
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\wmiprvse.exe', case=False) & ImageLoaded.str.contains(r'\\\\wbem\\\\wbemcomn.dll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Unsigned Dbghelp/Dbgcore DLL Loaded",
        "id": "bdc64095-d59a-42a2-8588-71fd9c9d9abc",
        "status": "test",
        "description": "Detects the load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes.\nTools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API found in dbghelp.dll or dbgcore.dll.\nAs an example, SilentTrynity C2 Framework has a module that leverages this API to dump the contents of Lsass.exe and transfer it over the network back to the attacker's machine.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\dbghelp.dll', case=False) | ImageLoaded.str.contains(r'\\\\dbgcore.dll', case=False)) & Signed=='false'"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Of DBGHELP.DLL",
        "id": "6414b5cd-b19d-447e-bb5e-9f03940b5784",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"dbghelp.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\dbghelp.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SoftwareDistribution\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SystemTemp\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False)) & ~ (ImageLoaded.str.contains(r'\\\\Anaconda3\\\\Lib\\\\site-packages\\\\vtrace\\\\platforms\\\\windll\\\\amd64\\\\dbghelp.dll', case=False) | ImageLoaded.str.contains(r'\\\\Anaconda3\\\\Lib\\\\site-packages\\\\vtrace\\\\platforms\\\\windll\\\\i386\\\\dbghelp.dll', case=False) | ImageLoaded.str.contains(r'\\\\Epic Games\\\\Launcher\\\\Engine\\\\Binaries\\\\ThirdParty\\\\DbgHelp\\\\dbghelp.dll', case=False) | ImageLoaded.str.contains(r'\\\\Epic Games\\\\MagicLegends\\\\x86\\\\dbghelp.dll', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DLL Load By System Process From Suspicious Locations",
        "id": "9e9a9002-56c4-40fd-9eff-e4b09bfa5f6c",
        "status": "test",
        "description": "Detects when a system process (i.e. located in system32, syswow64, etc.) loads a DLL from a suspicious location or a location with permissive permissions such as \"C:\\Users\\Public\"",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'C:\\\\Windows\\\\', case=False) & (ImageLoaded.str.contains(r'C:\\\\Users\\\\Public\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\PerfLogs\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Libvlc.DLL Sideloading",
        "id": "bf9808c4-d24f-44a2-8398-b65227d406b6",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\"",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\libvlc.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\VideoLAN\\\\VLC\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\VideoLAN\\\\VLC\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential RoboForm.DLL Sideloading",
        "id": "f64c9b2d-b0ad-481d-9d03-7fc75020892a",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"roboform.dll\", a DLL used by RoboForm Password Manager",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\roboform.dll', case=False) | ImageLoaded.str.contains(r'\\\\roboform-x64.dll', case=False)) & ~ ((Image.str.contains(r' C:\\\\Program Files (x86)\\\\Siber Systems\\\\AI RoboForm\\\\', case=False) | Image.str.contains(r' C:\\\\Program Files\\\\Siber Systems\\\\AI RoboForm\\\\', case=False)) & (Image.str.contains(r'\\\\robotaskbaricon.exe', case=False) | Image.str.contains(r'\\\\robotaskbaricon-x64.exe', case=False)))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CredUI.DLL Loaded By Uncommon Process",
        "id": "9ae01559-cf7e-4f8e-8e14-4c290a1b4784",
        "status": "test",
        "description": "Detects loading of \"credui.dll\" and related DLLs by an uncommon process. Attackers might leverage this DLL for potential use of \"CredUIPromptForCredentials\" or \"CredUnPackAuthenticationBufferW\".",
        "tags": [
            "attack.credential-access",
            "attack.collection",
            "attack.t1056.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\credui.dll', case=False) | ImageLoaded.str.contains(r'\\\\wincredui.dll', case=False) | OriginalFileName==['credui.dll', 'wincredui.dll']) & ~ (Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | Image==['C:\\\\Windows\\\\explorer.exe', 'C:\\\\Windows\\\\ImmersiveControlPanel\\\\SystemSettings.exe', 'C:\\\\Windows\\\\regedit.exe']) & ~ (Image.str.contains(r'\\\\opera_autoupdate.exe', case=False) | Image.str.contains(r'\\\\procexp64.exe', case=False) | Image.str.contains(r'\\\\procexp.exe', case=False) | Image.str.contains(r'C:\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\', case=False) & Image.str.contains(r'\\\\Teams.exe', case=False) | Image.str.contains(r'C:\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Mpclient.DLL Sideloading",
        "id": "418dc89a-9808-4b87-b1d7-e5ae0cb6effc",
        "status": "test",
        "description": "Detects potential sideloading of \"mpclient.dll\" by Windows Defender processes (\"MpCmdRun\" and \"NisSrv\") from their non-default directory.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\mpclient.dll', case=False) & (Image.str.contains(r'\\\\MpCmdRun.exe', case=False) | Image.str.contains(r'\\\\NisSrv.exe', case=False)) & ~ (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Windows Defender\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft Security Client\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Windows Defender\\\\', case=False) | Image.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Renamed Comsvcs DLL Loaded By Rundll32",
        "id": "8cde342c-ba48-4b74-b615-172c330f2e93",
        "status": "test",
        "description": "Detects rundll32 loading a renamed comsvcs.dll to dump process memory",
        "tags": [
            "attack.credential-access",
            "attack.defense-evasion",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\rundll32.exe', case=False) & (Hashes.str.contains(r'IMPHASH=eed93054cb555f3de70eaa9787f32ebb', case=False) | Hashes.str.contains(r'IMPHASH=5e0dbdec1fce52daae251a110b4f309d', case=False) | Hashes.str.contains(r'IMPHASH=eadbccbb324829acb5f2bbe87e5549a8', case=False) | Hashes.str.contains(r'IMPHASH=407ca0f7b523319d758a40d7c0193699', case=False) | Hashes.str.contains(r'IMPHASH=281d618f4e6271e527e6386ea6f748de', case=False)) & ~ ImageLoaded.str.contains(r'\\\\comsvcs.dll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass With Fake DLL",
        "id": "a5ea83a7-05a5-44c1-be2e-addccbbd8c03",
        "status": "test",
        "description": "Attempts to load dismcore.dll after dropping it",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\dism.exe', case=False) & ImageLoaded.str.contains(r'\\\\dismcore.dll', case=False) & ~ ImageLoaded=='C:\\\\Windows\\\\System32\\\\Dism\\\\dismcore.dll'"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Vivaldi_elf.DLL Sideloading",
        "id": "2092cacb-d77b-4f98-ab0d-32b32f99a054",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"vivaldi_elf.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\vivaldi_elf.dll', case=False) & ~ (Image.str.contains(r'\\\\Vivaldi\\\\Application\\\\vivaldi.exe', case=False) & ImageLoaded.str.contains(r'\\\\Vivaldi\\\\Application\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Time Travel Debugging Utility Usage - Image",
        "id": "e76c8240-d68f-4773-8880-5c6f63595aaf",
        "status": "test",
        "description": "Detects usage of Time Travel Debugging Utility. Adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe.",
        "tags": [
            "attack.defense-evasion",
            "attack.credential-access",
            "attack.t1218",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\ttdrecord.dll', case=False) | ImageLoaded.str.contains(r'\\\\ttdwriter.dll', case=False) | ImageLoaded.str.contains(r'\\\\ttdloader.dll', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Antivirus Software DLL Sideloading",
        "id": "552b6b65-df37-4d3e-a258-f2fc4771ae54",
        "status": "test",
        "description": "Detects potential DLL sideloading of DLLs that are part of antivirus software suchas McAfee, Symantec...etc",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\log.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Bitdefender Antivirus Free\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Bitdefender Antivirus Free\\\\', case=False) | Image=='C:\\\\Program Files\\\\Dell\\\\SARemediation\\\\audit\\\\TelemetryUtility.exe' & (ImageLoaded==['C:\\\\Program Files\\\\Dell\\\\SARemediation\\\\plugin\\\\log.dll', 'C:\\\\Program Files\\\\Dell\\\\SARemediation\\\\audit\\\\log.dll']) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Canon\\\\MyPrinter\\\\', case=False)) | ImageLoaded.str.contains(r'\\\\qrt.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\F-Secure\\\\Anti-Virus\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\F-Secure\\\\Anti-Virus\\\\', case=False)) | (ImageLoaded.str.contains(r'\\\\ashldres.dll', case=False) | ImageLoaded.str.contains(r'\\\\lockdown.dll', case=False) | ImageLoaded.str.contains(r'\\\\vsodscpl.dll', case=False)) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\McAfee\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\McAfee\\\\', case=False)) | ImageLoaded.str.contains(r'\\\\vftrace.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\CyberArk\\\\Endpoint Privilege Manager\\\\Agent\\\\x32\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\CyberArk\\\\Endpoint Privilege Manager\\\\Agent\\\\x32\\\\', case=False)) | ImageLoaded.str.contains(r'\\\\wsc.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\program Files\\\\AVAST Software\\\\Avast\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\program Files (x86)\\\\AVAST Software\\\\Avast\\\\', case=False)) | ImageLoaded.str.contains(r'\\\\tmdbglog.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\program Files\\\\Trend Micro\\\\Titanium\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\program Files (x86)\\\\Trend Micro\\\\Titanium\\\\', case=False)) | ImageLoaded.str.contains(r'\\\\DLPPREM32.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\program Files\\\\ESET', case=False) | ImageLoaded.str.contains(r'C:\\\\program Files (x86)\\\\ESET', case=False)))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote DLL Load Via Rundll32.EXE",
        "id": "f40017b3-cb2e-4335-ab5d-3babf679c1de",
        "status": "test",
        "description": "Detects a remote DLL load event via \"rundll32.exe\".",
        "tags": [
            "attack.execution",
            "attack.t1204.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\rundll32.exe', case=False) & ImageLoaded.str.contains(r'\\\\\\\\', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Via ClassicExplorer32.dll",
        "id": "caa02837-f659-466f-bca6-48bde2826ab4",
        "status": "test",
        "description": "Detects potential DLL sideloading using ClassicExplorer32.dll from the Classic Shell software",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\ClassicExplorer32.dll', case=False) & ~ ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Classic Shell\\\\', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Edputil.DLL Sideloading",
        "id": "e4903324-1a10-4ed3-981b-f6fe3be3a2c2",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"edputil.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\edputil.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | ImageLoaded.str.contains(r'C\\\\Windows\\\\WinSxS\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "VMMap Unsigned Dbghelp.DLL Potential Sideloading",
        "id": "273a8dd8-3742-4302-bcc7-7df5a80fe425",
        "status": "test",
        "description": "Detects potential DLL sideloading of an unsigned dbghelp.dll by the Sysinternals VMMap.",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'C:\\\\Debuggers\\\\dbghelp.dll', case=False) & (Image.str.contains(r'\\\\vmmap.exe', case=False) | Image.str.contains(r'\\\\vmmap64.exe', case=False)) & ~ Signed=='true'"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential System DLL Sideloading From Non System Locations",
        "id": "4fc0deee-0057-4998-ab31-d24e46e0aba4",
        "status": "experimental",
        "description": "Detects DLL sideloading of DLLs usually located in system locations (System32, SysWOW64, etc.).",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\aclui.dll', case=False) | ImageLoaded.str.contains(r'\\\\activeds.dll', case=False) | ImageLoaded.str.contains(r'\\\\adsldpc.dll', case=False) | ImageLoaded.str.contains(r'\\\\aepic.dll', case=False) | ImageLoaded.str.contains(r'\\\\apphelp.dll', case=False) | ImageLoaded.str.contains(r'\\\\applicationframe.dll', case=False) | ImageLoaded.str.contains(r'\\\\appvpolicy.dll', case=False) | ImageLoaded.str.contains(r'\\\\appxalluserstore.dll', case=False) | ImageLoaded.str.contains(r'\\\\appxdeploymentclient.dll', case=False) | ImageLoaded.str.contains(r'\\\\archiveint.dll', case=False) | ImageLoaded.str.contains(r'\\\\atl.dll', case=False) | ImageLoaded.str.contains(r'\\\\audioses.dll', case=False) | ImageLoaded.str.contains(r'\\\\auditpolcore.dll', case=False) | ImageLoaded.str.contains(r'\\\\authfwcfg.dll', case=False) | ImageLoaded.str.contains(r'\\\\authz.dll', case=False) | ImageLoaded.str.contains(r'\\\\avrt.dll', case=False) | ImageLoaded.str.contains(r'\\\\batmeter.dll', case=False) | ImageLoaded.str.contains(r'\\\\bcd.dll', case=False) | ImageLoaded.str.contains(r'\\\\bcp47langs.dll', case=False) | ImageLoaded.str.contains(r'\\\\bcp47mrm.dll', case=False) | ImageLoaded.str.contains(r'\\\\bcrypt.dll', case=False) | ImageLoaded.str.contains(r'\\\\bderepair.dll', case=False) | ImageLoaded.str.contains(r'\\\\bootmenuux.dll', case=False) | ImageLoaded.str.contains(r'\\\\bootux.dll', case=False) | ImageLoaded.str.contains(r'\\\\cabinet.dll', case=False) | ImageLoaded.str.contains(r'\\\\cabview.dll', case=False) | ImageLoaded.str.contains(r'\\\\certcli.dll', case=False) | ImageLoaded.str.contains(r'\\\\certenroll.dll', case=False) | ImageLoaded.str.contains(r'\\\\cfgmgr32.dll', case=False) | ImageLoaded.str.contains(r'\\\\cldapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\clipc.dll', case=False) | ImageLoaded.str.contains(r'\\\\clusapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\cmpbk32.dll', case=False) | ImageLoaded.str.contains(r'\\\\cmutil.dll', case=False) | ImageLoaded.str.contains(r'\\\\coloradapterclient.dll', case=False) | ImageLoaded.str.contains(r'\\\\colorui.dll', case=False) | ImageLoaded.str.contains(r'\\\\comdlg32.dll', case=False) | ImageLoaded.str.contains(r'\\\\configmanager2.dll', case=False) | ImageLoaded.str.contains(r'\\\\connect.dll', case=False) | ImageLoaded.str.contains(r'\\\\coredplus.dll', case=False) | ImageLoaded.str.contains(r'\\\\coremessaging.dll', case=False) | ImageLoaded.str.contains(r'\\\\coreuicomponents.dll', case=False) | ImageLoaded.str.contains(r'\\\\credui.dll', case=False) | ImageLoaded.str.contains(r'\\\\cryptbase.dll', case=False) | ImageLoaded.str.contains(r'\\\\cryptdll.dll', case=False) | ImageLoaded.str.contains(r'\\\\cryptsp.dll', case=False) | ImageLoaded.str.contains(r'\\\\cryptui.dll', case=False) | ImageLoaded.str.contains(r'\\\\cryptxml.dll', case=False) | ImageLoaded.str.contains(r'\\\\cscapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\cscobj.dll', case=False) | ImageLoaded.str.contains(r'\\\\cscui.dll', case=False) | ImageLoaded.str.contains(r'\\\\d2d1.dll', case=False) | ImageLoaded.str.contains(r'\\\\d3d10_1.dll', case=False) | ImageLoaded.str.contains(r'\\\\d3d10_1core.dll', case=False) | ImageLoaded.str.contains(r'\\\\d3d10.dll', case=False) | ImageLoaded.str.contains(r'\\\\d3d10core.dll', case=False) | ImageLoaded.str.contains(r'\\\\d3d10warp.dll', case=False) | ImageLoaded.str.contains(r'\\\\d3d11.dll', case=False) | ImageLoaded.str.contains(r'\\\\d3d12.dll', case=False) | ImageLoaded.str.contains(r'\\\\d3d9.dll', case=False) | ImageLoaded.str.contains(r'\\\\d3dx9_43.dll', case=False) | ImageLoaded.str.contains(r'\\\\dataexchange.dll', case=False) | ImageLoaded.str.contains(r'\\\\davclnt.dll', case=False) | ImageLoaded.str.contains(r'\\\\dcntel.dll', case=False) | ImageLoaded.str.contains(r'\\\\dcomp.dll', case=False) | ImageLoaded.str.contains(r'\\\\defragproxy.dll', case=False) | ImageLoaded.str.contains(r'\\\\desktopshellext.dll', case=False) | ImageLoaded.str.contains(r'\\\\deviceassociation.dll', case=False) | ImageLoaded.str.contains(r'\\\\devicecredential.dll', case=False) | ImageLoaded.str.contains(r'\\\\devicepairing.dll', case=False) | ImageLoaded.str.contains(r'\\\\devobj.dll', case=False) | ImageLoaded.str.contains(r'\\\\devrtl.dll', case=False) | ImageLoaded.str.contains(r'\\\\dhcpcmonitor.dll', case=False) | ImageLoaded.str.contains(r'\\\\dhcpcsvc.dll', case=False) | ImageLoaded.str.contains(r'\\\\dhcpcsvc6.dll', case=False) | ImageLoaded.str.contains(r'\\\\directmanipulation.dll', case=False) | ImageLoaded.str.contains(r'\\\\dismapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\dismcore.dll', case=False) | ImageLoaded.str.contains(r'\\\\dmcfgutils.dll', case=False) | ImageLoaded.str.contains(r'\\\\dmcmnutils.dll', case=False) | ImageLoaded.str.contains(r'\\\\dmcommandlineutils.dll', case=False) | ImageLoaded.str.contains(r'\\\\dmenrollengine.dll', case=False) | ImageLoaded.str.contains(r'\\\\dmenterprisediagnostics.dll', case=False) | ImageLoaded.str.contains(r'\\\\dmiso8601utils.dll', case=False) | ImageLoaded.str.contains(r'\\\\dmoleaututils.dll', case=False) | ImageLoaded.str.contains(r'\\\\dmprocessxmlfiltered.dll', case=False) | ImageLoaded.str.contains(r'\\\\dmpushproxy.dll', case=False) | ImageLoaded.str.contains(r'\\\\dmxmlhelputils.dll', case=False) | ImageLoaded.str.contains(r'\\\\dnsapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\dot3api.dll', case=False) | ImageLoaded.str.contains(r'\\\\dot3cfg.dll', case=False) | ImageLoaded.str.contains(r'\\\\dpx.dll', case=False) | ImageLoaded.str.contains(r'\\\\drprov.dll', case=False) | ImageLoaded.str.contains(r'\\\\drvstore.dll', case=False) | ImageLoaded.str.contains(r'\\\\dsclient.dll', case=False) | ImageLoaded.str.contains(r'\\\\dsparse.dll', case=False) | ImageLoaded.str.contains(r'\\\\dsprop.dll', case=False) | ImageLoaded.str.contains(r'\\\\dsreg.dll', case=False) | ImageLoaded.str.contains(r'\\\\dsrole.dll', case=False) | ImageLoaded.str.contains(r'\\\\dui70.dll', case=False) | ImageLoaded.str.contains(r'\\\\duser.dll', case=False) | ImageLoaded.str.contains(r'\\\\dusmapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\dwmapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\dwmcore.dll', case=False) | ImageLoaded.str.contains(r'\\\\dwrite.dll', case=False) | ImageLoaded.str.contains(r'\\\\dxcore.dll', case=False) | ImageLoaded.str.contains(r'\\\\dxgi.dll', case=False) | ImageLoaded.str.contains(r'\\\\dxva2.dll', case=False) | ImageLoaded.str.contains(r'\\\\dynamoapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\eappcfg.dll', case=False) | ImageLoaded.str.contains(r'\\\\eappprxy.dll', case=False) | ImageLoaded.str.contains(r'\\\\edgeiso.dll', case=False) | ImageLoaded.str.contains(r'\\\\edputil.dll', case=False) | ImageLoaded.str.contains(r'\\\\efsadu.dll', case=False) | ImageLoaded.str.contains(r'\\\\efsutil.dll', case=False) | ImageLoaded.str.contains(r'\\\\esent.dll', case=False) | ImageLoaded.str.contains(r'\\\\execmodelproxy.dll', case=False) | ImageLoaded.str.contains(r'\\\\explorerframe.dll', case=False) | ImageLoaded.str.contains(r'\\\\fastprox.dll', case=False) | ImageLoaded.str.contains(r'\\\\faultrep.dll', case=False) | ImageLoaded.str.contains(r'\\\\fddevquery.dll', case=False) | ImageLoaded.str.contains(r'\\\\feclient.dll', case=False) | ImageLoaded.str.contains(r'\\\\fhcfg.dll', case=False) | ImageLoaded.str.contains(r'\\\\fhsvcctl.dll', case=False) | ImageLoaded.str.contains(r'\\\\firewallapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\flightsettings.dll', case=False) | ImageLoaded.str.contains(r'\\\\fltlib.dll', case=False) | ImageLoaded.str.contains(r'\\\\framedynos.dll', case=False) | ImageLoaded.str.contains(r'\\\\fveapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\fveskybackup.dll', case=False) | ImageLoaded.str.contains(r'\\\\fvewiz.dll', case=False) | ImageLoaded.str.contains(r'\\\\fwbase.dll', case=False) | ImageLoaded.str.contains(r'\\\\fwcfg.dll', case=False) | ImageLoaded.str.contains(r'\\\\fwpolicyiomgr.dll', case=False) | ImageLoaded.str.contains(r'\\\\fwpuclnt.dll', case=False) | ImageLoaded.str.contains(r'\\\\fxsapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\fxsst.dll', case=False) | ImageLoaded.str.contains(r'\\\\fxstiff.dll', case=False) | ImageLoaded.str.contains(r'\\\\getuname.dll', case=False) | ImageLoaded.str.contains(r'\\\\gpapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\hid.dll', case=False) | ImageLoaded.str.contains(r'\\\\hnetmon.dll', case=False) | ImageLoaded.str.contains(r'\\\\httpapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\icmp.dll', case=False) | ImageLoaded.str.contains(r'\\\\idstore.dll', case=False) | ImageLoaded.str.contains(r'\\\\ieadvpack.dll', case=False) | ImageLoaded.str.contains(r'\\\\iedkcs32.dll', case=False) | ImageLoaded.str.contains(r'\\\\iernonce.dll', case=False) | ImageLoaded.str.contains(r'\\\\iertutil.dll', case=False) | ImageLoaded.str.contains(r'\\\\ifmon.dll', case=False) | ImageLoaded.str.contains(r'\\\\ifsutil.dll', case=False) | ImageLoaded.str.contains(r'\\\\inproclogger.dll', case=False) | ImageLoaded.str.contains(r'\\\\iphlpapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\iri.dll', case=False) | ImageLoaded.str.contains(r'\\\\iscsidsc.dll', case=False) | ImageLoaded.str.contains(r'\\\\iscsium.dll', case=False) | ImageLoaded.str.contains(r'\\\\isv.exe_rsaenh.dll', case=False) | ImageLoaded.str.contains(r'\\\\iumbase.dll', case=False) | ImageLoaded.str.contains(r'\\\\iumsdk.dll', case=False) | ImageLoaded.str.contains(r'\\\\joinutil.dll', case=False) | ImageLoaded.str.contains(r'\\\\kdstub.dll', case=False) | ImageLoaded.str.contains(r'\\\\ksuser.dll', case=False) | ImageLoaded.str.contains(r'\\\\ktmw32.dll', case=False) | ImageLoaded.str.contains(r'\\\\licensemanagerapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\licensingdiagspp.dll', case=False) | ImageLoaded.str.contains(r'\\\\linkinfo.dll', case=False) | ImageLoaded.str.contains(r'\\\\loadperf.dll', case=False) | ImageLoaded.str.contains(r'\\\\lockhostingframework.dll', case=False) | ImageLoaded.str.contains(r'\\\\logoncli.dll', case=False) | ImageLoaded.str.contains(r'\\\\logoncontroller.dll', case=False) | ImageLoaded.str.contains(r'\\\\lpksetupproxyserv.dll', case=False) | ImageLoaded.str.contains(r'\\\\lrwizdll.dll', case=False) | ImageLoaded.str.contains(r'\\\\magnification.dll', case=False) | ImageLoaded.str.contains(r'\\\\maintenanceui.dll', case=False) | ImageLoaded.str.contains(r'\\\\mapistub.dll', case=False) | ImageLoaded.str.contains(r'\\\\mbaexmlparser.dll', case=False) | ImageLoaded.str.contains(r'\\\\mdmdiagnostics.dll', case=False) | ImageLoaded.str.contains(r'\\\\mfc42u.dll', case=False) | ImageLoaded.str.contains(r'\\\\mfcore.dll', case=False) | ImageLoaded.str.contains(r'\\\\mfplat.dll', case=False) | ImageLoaded.str.contains(r'\\\\mi.dll', case=False) | ImageLoaded.str.contains(r'\\\\midimap.dll', case=False) | ImageLoaded.str.contains(r'\\\\mintdh.dll', case=False) | ImageLoaded.str.contains(r'\\\\miutils.dll', case=False) | ImageLoaded.str.contains(r'\\\\mlang.dll', case=False) | ImageLoaded.str.contains(r'\\\\mmdevapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\mobilenetworking.dll', case=False) | ImageLoaded.str.contains(r'\\\\mpr.dll', case=False) | ImageLoaded.str.contains(r'\\\\mprapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\mrmcorer.dll', case=False) | ImageLoaded.str.contains(r'\\\\msacm32.dll', case=False) | ImageLoaded.str.contains(r'\\\\mscms.dll', case=False) | ImageLoaded.str.contains(r'\\\\mscoree.dll', case=False) | ImageLoaded.str.contains(r'\\\\msctf.dll', case=False) | ImageLoaded.str.contains(r'\\\\msctfmonitor.dll', case=False) | ImageLoaded.str.contains(r'\\\\msdrm.dll', case=False) | ImageLoaded.str.contains(r'\\\\msdtctm.dll', case=False) | ImageLoaded.str.contains(r'\\\\msftedit.dll', case=False) | ImageLoaded.str.contains(r'\\\\msi.dll', case=False) | ImageLoaded.str.contains(r'\\\\msiso.dll', case=False) | ImageLoaded.str.contains(r'\\\\msutb.dll', case=False) | ImageLoaded.str.contains(r'\\\\msvcp110_win.dll', case=False) | ImageLoaded.str.contains(r'\\\\mswb7.dll', case=False) | ImageLoaded.str.contains(r'\\\\mswsock.dll', case=False) | ImageLoaded.str.contains(r'\\\\msxml3.dll', case=False) | ImageLoaded.str.contains(r'\\\\mtxclu.dll', case=False) | ImageLoaded.str.contains(r'\\\\napinsp.dll', case=False) | ImageLoaded.str.contains(r'\\\\ncrypt.dll', case=False) | ImageLoaded.str.contains(r'\\\\ndfapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\netapi32.dll', case=False) | ImageLoaded.str.contains(r'\\\\netid.dll', case=False) | ImageLoaded.str.contains(r'\\\\netiohlp.dll', case=False) | ImageLoaded.str.contains(r'\\\\netjoin.dll', case=False) | ImageLoaded.str.contains(r'\\\\netplwiz.dll', case=False) | ImageLoaded.str.contains(r'\\\\netprofm.dll', case=False) | ImageLoaded.str.contains(r'\\\\netprovfw.dll', case=False) | ImageLoaded.str.contains(r'\\\\netsetupapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\netshell.dll', case=False) | ImageLoaded.str.contains(r'\\\\nettrace.dll', case=False) | ImageLoaded.str.contains(r'\\\\netutils.dll', case=False) | ImageLoaded.str.contains(r'\\\\networkexplorer.dll', case=False) | ImageLoaded.str.contains(r'\\\\newdev.dll', case=False) | ImageLoaded.str.contains(r'\\\\ninput.dll', case=False) | ImageLoaded.str.contains(r'\\\\nlaapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\nlansp_c.dll', case=False) | ImageLoaded.str.contains(r'\\\\npmproxy.dll', case=False) | ImageLoaded.str.contains(r'\\\\nshhttp.dll', case=False) | ImageLoaded.str.contains(r'\\\\nshipsec.dll', case=False) | ImageLoaded.str.contains(r'\\\\nshwfp.dll', case=False) | ImageLoaded.str.contains(r'\\\\ntdsapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\ntlanman.dll', case=False) | ImageLoaded.str.contains(r'\\\\ntlmshared.dll', case=False) | ImageLoaded.str.contains(r'\\\\ntmarta.dll', case=False) | ImageLoaded.str.contains(r'\\\\ntshrui.dll', case=False) | ImageLoaded.str.contains(r'\\\\oleacc.dll', case=False) | ImageLoaded.str.contains(r'\\\\omadmapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\onex.dll', case=False) | ImageLoaded.str.contains(r'\\\\opcservices.dll', case=False) | ImageLoaded.str.contains(r'\\\\osbaseln.dll', case=False) | ImageLoaded.str.contains(r'\\\\osksupport.dll', case=False) | ImageLoaded.str.contains(r'\\\\osuninst.dll', case=False) | ImageLoaded.str.contains(r'\\\\p2p.dll', case=False) | ImageLoaded.str.contains(r'\\\\p2pnetsh.dll', case=False) | ImageLoaded.str.contains(r'\\\\p9np.dll', case=False) | ImageLoaded.str.contains(r'\\\\pcaui.dll', case=False) | ImageLoaded.str.contains(r'\\\\pdh.dll', case=False) | ImageLoaded.str.contains(r'\\\\peerdistsh.dll', case=False) | ImageLoaded.str.contains(r'\\\\pkeyhelper.dll', case=False) | ImageLoaded.str.contains(r'\\\\pla.dll', case=False) | ImageLoaded.str.contains(r'\\\\playsndsrv.dll', case=False) | ImageLoaded.str.contains(r'\\\\pnrpnsp.dll', case=False) | ImageLoaded.str.contains(r'\\\\policymanager.dll', case=False) | ImageLoaded.str.contains(r'\\\\polstore.dll', case=False) | ImageLoaded.str.contains(r'\\\\powrprof.dll', case=False) | ImageLoaded.str.contains(r'\\\\printui.dll', case=False) | ImageLoaded.str.contains(r'\\\\prntvpt.dll', case=False) | ImageLoaded.str.contains(r'\\\\profapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\propsys.dll', case=False) | ImageLoaded.str.contains(r'\\\\proximitycommon.dll', case=False) | ImageLoaded.str.contains(r'\\\\proximityservicepal.dll', case=False) | ImageLoaded.str.contains(r'\\\\prvdmofcomp.dll', case=False) | ImageLoaded.str.contains(r'\\\\puiapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\radcui.dll', case=False) | ImageLoaded.str.contains(r'\\\\rasapi32.dll', case=False) | ImageLoaded.str.contains(r'\\\\rasdlg.dll', case=False) | ImageLoaded.str.contains(r'\\\\rasgcw.dll', case=False) | ImageLoaded.str.contains(r'\\\\rasman.dll', case=False) | ImageLoaded.str.contains(r'\\\\rasmontr.dll', case=False) | ImageLoaded.str.contains(r'\\\\reagent.dll', case=False) | ImageLoaded.str.contains(r'\\\\regapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\reseteng.dll', case=False) | ImageLoaded.str.contains(r'\\\\resetengine.dll', case=False) | ImageLoaded.str.contains(r'\\\\resutils.dll', case=False) | ImageLoaded.str.contains(r'\\\\rmclient.dll', case=False) | ImageLoaded.str.contains(r'\\\\rpcnsh.dll', case=False) | ImageLoaded.str.contains(r'\\\\rsaenh.dll', case=False) | ImageLoaded.str.contains(r'\\\\rtutils.dll', case=False) | ImageLoaded.str.contains(r'\\\\rtworkq.dll', case=False) | ImageLoaded.str.contains(r'\\\\samcli.dll', case=False) | ImageLoaded.str.contains(r'\\\\samlib.dll', case=False) | ImageLoaded.str.contains(r'\\\\sapi_onecore.dll', case=False) | ImageLoaded.str.contains(r'\\\\sas.dll', case=False) | ImageLoaded.str.contains(r'\\\\scansetting.dll', case=False) | ImageLoaded.str.contains(r'\\\\scecli.dll', case=False) | ImageLoaded.str.contains(r'\\\\schedcli.dll', case=False) | ImageLoaded.str.contains(r'\\\\secur32.dll', case=False) | ImageLoaded.str.contains(r'\\\\security.dll', case=False) | ImageLoaded.str.contains(r'\\\\sensapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\shell32.dll', case=False) | ImageLoaded.str.contains(r'\\\\shfolder.dll', case=False) | ImageLoaded.str.contains(r'\\\\slc.dll', case=False) | ImageLoaded.str.contains(r'\\\\snmpapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\spectrumsyncclient.dll', case=False) | ImageLoaded.str.contains(r'\\\\spp.dll', case=False) | ImageLoaded.str.contains(r'\\\\sppc.dll', case=False) | ImageLoaded.str.contains(r'\\\\sppcext.dll', case=False) | ImageLoaded.str.contains(r'\\\\srclient.dll', case=False) | ImageLoaded.str.contains(r'\\\\srcore.dll', case=False) | ImageLoaded.str.contains(r'\\\\srmtrace.dll', case=False) | ImageLoaded.str.contains(r'\\\\srpapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\srvcli.dll', case=False) | ImageLoaded.str.contains(r'\\\\ssp_isv.exe_rsaenh.dll', case=False) | ImageLoaded.str.contains(r'\\\\ssp.exe_rsaenh.dll', case=False) | ImageLoaded.str.contains(r'\\\\sspicli.dll', case=False) | ImageLoaded.str.contains(r'\\\\ssshim.dll', case=False) | ImageLoaded.str.contains(r'\\\\staterepository.core.dll', case=False) | ImageLoaded.str.contains(r'\\\\structuredquery.dll', case=False) | ImageLoaded.str.contains(r'\\\\sxshared.dll', case=False) | ImageLoaded.str.contains(r'\\\\systemsettingsthresholdadminflowui.dll', case=False) | ImageLoaded.str.contains(r'\\\\tapi32.dll', case=False) | ImageLoaded.str.contains(r'\\\\tbs.dll', case=False) | ImageLoaded.str.contains(r'\\\\tdh.dll', case=False) | ImageLoaded.str.contains(r'\\\\textshaping.dll', case=False) | ImageLoaded.str.contains(r'\\\\timesync.dll', case=False) | ImageLoaded.str.contains(r'\\\\tpmcoreprovisioning.dll', case=False) | ImageLoaded.str.contains(r'\\\\tquery.dll', case=False) | ImageLoaded.str.contains(r'\\\\tsworkspace.dll', case=False) | ImageLoaded.str.contains(r'\\\\ttdrecord.dll', case=False) | ImageLoaded.str.contains(r'\\\\twext.dll', case=False) | ImageLoaded.str.contains(r'\\\\twinapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\twinui.appcore.dll', case=False) | ImageLoaded.str.contains(r'\\\\uianimation.dll', case=False) | ImageLoaded.str.contains(r'\\\\uiautomationcore.dll', case=False) | ImageLoaded.str.contains(r'\\\\uireng.dll', case=False) | ImageLoaded.str.contains(r'\\\\uiribbon.dll', case=False) | ImageLoaded.str.contains(r'\\\\umpdc.dll', case=False) | ImageLoaded.str.contains(r'\\\\unattend.dll', case=False) | ImageLoaded.str.contains(r'\\\\updatepolicy.dll', case=False) | ImageLoaded.str.contains(r'\\\\upshared.dll', case=False) | ImageLoaded.str.contains(r'\\\\urlmon.dll', case=False) | ImageLoaded.str.contains(r'\\\\userenv.dll', case=False) | ImageLoaded.str.contains(r'\\\\utildll.dll', case=False) | ImageLoaded.str.contains(r'\\\\uxinit.dll', case=False) | ImageLoaded.str.contains(r'\\\\uxtheme.dll', case=False) | ImageLoaded.str.contains(r'\\\\vaultcli.dll', case=False) | ImageLoaded.str.contains(r'\\\\vdsutil.dll', case=False) | ImageLoaded.str.contains(r'\\\\version.dll', case=False) | ImageLoaded.str.contains(r'\\\\virtdisk.dll', case=False) | ImageLoaded.str.contains(r'\\\\vssapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\vsstrace.dll', case=False) | ImageLoaded.str.contains(r'\\\\wbemprox.dll', case=False) | ImageLoaded.str.contains(r'\\\\wbemsvc.dll', case=False) | ImageLoaded.str.contains(r'\\\\wcmapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\wcnnetsh.dll', case=False) | ImageLoaded.str.contains(r'\\\\wdi.dll', case=False) | ImageLoaded.str.contains(r'\\\\wdscore.dll', case=False) | ImageLoaded.str.contains(r'\\\\webservices.dll', case=False) | ImageLoaded.str.contains(r'\\\\wecapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\wer.dll', case=False) | ImageLoaded.str.contains(r'\\\\wevtapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\whhelper.dll', case=False) | ImageLoaded.str.contains(r'\\\\wimgapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\winbio.dll', case=False) | ImageLoaded.str.contains(r'\\\\winbrand.dll', case=False) | ImageLoaded.str.contains(r'\\\\windows.storage.dll', case=False) | ImageLoaded.str.contains(r'\\\\windows.storage.search.dll', case=False) | ImageLoaded.str.contains(r'\\\\windows.ui.immersive.dll', case=False) | ImageLoaded.str.contains(r'\\\\windowscodecs.dll', case=False) | ImageLoaded.str.contains(r'\\\\windowscodecsext.dll', case=False) | ImageLoaded.str.contains(r'\\\\windowsudk.shellcommon.dll', case=False) | ImageLoaded.str.contains(r'\\\\winhttp.dll', case=False) | ImageLoaded.str.contains(r'\\\\wininet.dll', case=False) | ImageLoaded.str.contains(r'\\\\winipsec.dll', case=False) | ImageLoaded.str.contains(r'\\\\winmde.dll', case=False) | ImageLoaded.str.contains(r'\\\\winmm.dll', case=False) | ImageLoaded.str.contains(r'\\\\winnsi.dll', case=False) | ImageLoaded.str.contains(r'\\\\winrnr.dll', case=False) | ImageLoaded.str.contains(r'\\\\winscard.dll', case=False) | ImageLoaded.str.contains(r'\\\\winsqlite3.dll', case=False) | ImageLoaded.str.contains(r'\\\\winsta.dll', case=False) | ImageLoaded.str.contains(r'\\\\winsync.dll', case=False) | ImageLoaded.str.contains(r'\\\\wkscli.dll', case=False) | ImageLoaded.str.contains(r'\\\\wlanapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\wlancfg.dll', case=False) | ImageLoaded.str.contains(r'\\\\wldp.dll', case=False) | ImageLoaded.str.contains(r'\\\\wlidprov.dll', case=False) | ImageLoaded.str.contains(r'\\\\wmiclnt.dll', case=False) | ImageLoaded.str.contains(r'\\\\wmidcom.dll', case=False) | ImageLoaded.str.contains(r'\\\\wmiutils.dll', case=False) | ImageLoaded.str.contains(r'\\\\wmpdui.dll', case=False) | ImageLoaded.str.contains(r'\\\\wmsgapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\wofutil.dll', case=False) | ImageLoaded.str.contains(r'\\\\wpdshext.dll', case=False) | ImageLoaded.str.contains(r'\\\\wscapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\wsdapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\wshbth.dll', case=False) | ImageLoaded.str.contains(r'\\\\wshelper.dll', case=False) | ImageLoaded.str.contains(r'\\\\wsmsvc.dll', case=False) | ImageLoaded.str.contains(r'\\\\wtsapi32.dll', case=False) | ImageLoaded.str.contains(r'\\\\wwancfg.dll', case=False) | ImageLoaded.str.contains(r'\\\\wwapi.dll', case=False) | ImageLoaded.str.contains(r'\\\\xmllite.dll', case=False) | ImageLoaded.str.contains(r'\\\\xolehlp.dll', case=False) | ImageLoaded.str.contains(r'\\\\xpsservices.dll', case=False) | ImageLoaded.str.contains(r'\\\\xwizards.dll', case=False) | ImageLoaded.str.contains(r'\\\\xwtpw32.dll', case=False) | ImageLoaded.str.contains(r'\\\\amsi.dll', case=False) | ImageLoaded.str.contains(r'\\\\appraiser.dll', case=False) | ImageLoaded.str.contains(r'\\\\COMRES.DLL', case=False) | ImageLoaded.str.contains(r'\\\\cryptnet.dll', case=False) | ImageLoaded.str.contains(r'\\\\DispBroker.dll', case=False) | ImageLoaded.str.contains(r'\\\\dsound.dll', case=False) | ImageLoaded.str.contains(r'\\\\dxilconv.dll', case=False) | ImageLoaded.str.contains(r'\\\\FxsCompose.dll', case=False) | ImageLoaded.str.contains(r'\\\\FXSRESM.DLL', case=False) | ImageLoaded.str.contains(r'\\\\msdtcVSp1res.dll', case=False) | ImageLoaded.str.contains(r'\\\\PrintIsolationProxy.dll', case=False) | ImageLoaded.str.contains(r'\\\\rdpendp.dll', case=False) | ImageLoaded.str.contains(r'\\\\rpchttp.dll', case=False) | ImageLoaded.str.contains(r'\\\\storageusage.dll', case=False) | ImageLoaded.str.contains(r'\\\\utcutil.dll', case=False) | ImageLoaded.str.contains(r'\\\\WfsR.dll', case=False) | ImageLoaded.str.contains(r'\\\\igd10iumd64.dll', case=False) | ImageLoaded.str.contains(r'\\\\igd12umd64.dll', case=False) | ImageLoaded.str.contains(r'\\\\igdumdim64.dll', case=False) | ImageLoaded.str.contains(r'\\\\igdusc64.dll', case=False) | ImageLoaded.str.contains(r'\\\\TSMSISrv.dll', case=False) | ImageLoaded.str.contains(r'\\\\TSVIPSrv.dll', case=False) | ImageLoaded.str.contains(r'\\\\wbemcomn.dll', case=False) | ImageLoaded.str.contains(r'\\\\WLBSCTRL.dll', case=False) | ImageLoaded.str.contains(r'\\\\wow64log.dll', case=False) | ImageLoaded.str.contains(r'\\\\WptsExtensions.dll', case=False)) & ~ (ImageLoaded.str.contains(r'C:\\\\$WINDOWS.~BT\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\$WinREAgent\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SoftwareDistribution\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SystemTemp\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\Microsoft.NET\\\\', case=False) & ImageLoaded.str.contains(r'\\\\cscui.dll', case=False) | ImageLoaded.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False) & ImageLoaded.str.contains(r'\\\\version.dll', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\Microsoft.DirectXRuntime_', case=False) & ImageLoaded.str.contains(r'\\\\d3dx9_43.dll', case=False)) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\Exchange Server\\\\', case=False) & ImageLoaded.str.contains(r'\\\\mswb7.dll', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Arsenal-Image-Mounter-', case=False) & (ImageLoaded.str.contains(r'\\\\mi.dll', case=False) | ImageLoaded.str.contains(r'\\\\miutils.dl', case=False)) | Image=='C:\\\\Program Files\\\\Common Files\\\\microsoft shared\\\\ClickToRun\\\\OfficeClickToRun.exe' & ImageLoaded=='C:\\\\Program Files\\\\Common Files\\\\microsoft shared\\\\ClickToRun\\\\AppVPolicy.dll' | ImageLoaded.str.contains(r'C:\\\\Packages\\\\Plugins\\\\Microsoft.GuestConfiguration.ConfigurationforWindows\\\\', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\DellInc.DellSupportAssistforPCs', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\backgroundTaskHost.exe', case=False)) & ImageLoaded.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\DellInc.DellSupportAssistforPCs', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\DellInc.DellSupportAssistforPCs', case=False) & Image.str.contains(r'\\\\wldp.dll', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\CheckPoint\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\CheckPoint\\\\', case=False)) & Image.str.contains(r'\\\\SmartConsole.exe', case=False) & (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\CheckPoint\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\CheckPoint\\\\', case=False)) & ImageLoaded.str.contains(r'\\\\PolicyManager.dll', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Azure Browser SSO Abuse",
        "id": "50f852e6-af22-4c78-9ede-42ef36aa3453",
        "status": "test",
        "description": "Detects abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser.\nAn attacker can use this to authenticate to Azure AD in a browser as that user.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.002"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded=='C:\\\\Windows\\\\System32\\\\MicrosoftAccountTokenProvider.dll' & ~ ((Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False)) & Image.str.contains(r'\\\\BackgroundTaskHost.exe', case=False)) & ~ ((Image.str.contains(r'C:\\\\Program Files\\\\Microsoft Visual Studio\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\', case=False)) & Image.str.contains(r'\\\\IDE\\\\devenv.exe', case=False) | Image==['C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe', 'C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe'] | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\', case=False) | Image.str.contains(r'\\\\WindowsApps\\\\MicrosoftEdge.exe', case=False) | Image==['C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe', 'C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe'] | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeCore\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\EdgeCore\\\\', case=False)) & (Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False)) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\OneDrive.exe', case=False) | Image is null)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "VMGuestLib DLL Sideload",
        "id": "70e8e9b4-6a93-4cb7-8cde-da69502e7aff",
        "status": "test",
        "description": "Detects DLL sideloading of VMGuestLib.dll by the WmiApSrv service.",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\VMware\\\\VMware Tools\\\\vmStatsProvider\\\\win32', case=False) & ImageLoaded.str.contains(r'\\\\vmGuestLib.dll', case=False) & Image.str.contains(r'\\\\Windows\\\\System32\\\\wbem\\\\WmiApSrv.exe', case=False) & ~ Signed=='true'"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Volume Shadow Copy Vssapi.dll Load",
        "id": "37774c23-25a1-4adb-bb6d-8bb9fd59c0f8",
        "status": "test",
        "description": "Detects the image load of VSS DLL by uncommon executables",
        "tags": [
            "attack.defense-evasion",
            "attack.impact",
            "attack.t1490"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\vssapi.dll', case=False) & ~ (Image==['C:\\\\Windows\\\\explorer.exe', 'C:\\\\Windows\\\\ImmersiveControlPanel\\\\SystemSettings.exe'] | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\Temp\\\\{', case=False) | Image.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r'C:\\\\ProgramData\\\\Package Cache\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Iviewers.DLL Sideloading",
        "id": "4c21b805-4dd7-469f-b47d-7383a8fcb437",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"iviewers.dll\" (OLE/COM Object Interface Viewer)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\iviewers.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Windows Kits\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Windows Kits\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using Iscsicpl - ImageLoad",
        "id": "9ed5959a-c43c-4c59-84e3-d28628429456",
        "status": "test",
        "description": "Detects the \"iscsicpl.exe\" UAC bypass technique that leverages a DLL Search Order hijacking technique to load a custom DLL's from temp or a any user controlled location in the users %PATH%",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image=='C:\\\\Windows\\\\SysWOW64\\\\iscsicpl.exe' & ImageLoaded.str.contains(r'\\\\iscsiexe.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Windows\\\\', case=False) & ImageLoaded.str.contains(r'iscsiexe.dll', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Rcdll.DLL Sideloading",
        "id": "6e78b74f-c762-4800-82ad-f66787f10c8a",
        "status": "test",
        "description": "Detects potential DLL sideloading of rcdll.dll",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\rcdll.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Windows Kits\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Spooler Service Suspicious Binary Load",
        "id": "02fb90de-c321-4e63-a6b9-25f4b03dfd14",
        "status": "test",
        "description": "Detect DLL Load from Spooler Service backup folder",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574",
            "cve.2021-1675",
            "cve.2021-34527"
        ],
        "level": "informational",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\spoolsv.exe', case=False) & (ImageLoaded.str.contains(r'\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\x64\\\\3\\\\', case=False) | ImageLoaded.str.contains(r'\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\x64\\\\4\\\\', case=False)) & ImageLoaded.str.contains(r'.dll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Python DLL SideLoading",
        "id": "d36f7c12-14a3-4d48-b6b8-774b9c66f44d",
        "status": "experimental",
        "description": "Detects potential DLL sideloading of Python DLL files.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\python39.dll', case=False) | ImageLoaded.str.contains(r'\\\\python310.dll', case=False) | ImageLoaded.str.contains(r'\\\\python311.dll', case=False) | ImageLoaded.str.contains(r'\\\\python312.dll', case=False)) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Python3', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Python3', case=False) | ImageLoaded.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python3', case=False) | Product=='Python' & Signed=='true' & Description=='Python' & Company=='Python Software Foundation') & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Microsoft Visual Studio\\\\', case=False) | ImageLoaded.str.contains(r'\\\\cpython\\\\externals\\\\', case=False) | ImageLoaded.str.contains(r'\\\\cpython\\\\PCbuild\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DotNet CLR DLL Loaded By Scripting Applications",
        "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
        "status": "test",
        "description": "Detects .NET CLR DLLs being loaded by scripting applications such as wscript or cscript. This could be an indication of potential suspicious execution.",
        "tags": [
            "attack.execution",
            "attack.privilege-escalation",
            "attack.t1055"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (Image.str.contains(r'\\\\cmstp.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\msxsl.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False)) & (ImageLoaded.str.contains(r'\\\\clr.dll', case=False) | ImageLoaded.str.contains(r'\\\\mscoree.dll', case=False) | ImageLoaded.str.contains(r'\\\\mscorlib.dll', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DLL Loaded From Suspicious Location Via Cmspt.EXE",
        "id": "75e508f7-932d-4ebc-af77-269237a84ce1",
        "status": "test",
        "description": "Detects cmstp loading \"dll\" or \"ocx\" files from suspicious locations",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\cmstp.exe', case=False) & (ImageLoaded.str.contains(r'\\\\PerfLogs\\\\', case=False) | ImageLoaded.str.contains(r'\\\\ProgramData\\\\', case=False) | ImageLoaded.str.contains(r'\\\\Users\\\\', case=False) | ImageLoaded.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Temp\\\\', case=False)) & (ImageLoaded.str.contains(r'.dll', case=False) | ImageLoaded.str.contains(r'.ocx', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential CCleanerDU.DLL Sideloading",
        "id": "1fbc0671-5596-4e17-8682-f020a0b995dc",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"CCleanerDU.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\CCleanerDU.dll', case=False) & ~ ((Image.str.contains(r'C:\\\\Program Files\\\\CCleaner\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\CCleaner\\\\', case=False)) & (Image.str.contains(r'\\\\CCleaner.exe', case=False) | Image.str.contains(r'\\\\CCleaner64.exe', case=False)))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WMI Persistence - Command Line Event Consumer",
        "id": "05936ce2-ee05-4dae-9d03-9a391cf2d2c6",
        "status": "test",
        "description": "Detects WMI command line event consumers",
        "tags": [
            "attack.t1546.003",
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image=='C:\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE.exe' & ImageLoaded.str.contains(r'\\\\wbemcons.dll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Microsoft Office DLL Sideload",
        "id": "829a3bdf-34da-4051-9cf4-8ed221a8ae4f",
        "status": "test",
        "description": "Detects DLL sideloading of DLLs that are part of Microsoft Office from non standard location",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\outllib.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Microsoft Office\\\\OFFICE', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft Office\\\\OFFICE', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Microsoft Office\\\\Root\\\\OFFICE', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft Office\\\\Root\\\\OFFICE', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Of KeyScramblerIE.DLL Via KeyScrambler.EXE",
        "id": "d2451be2-b582-4e15-8701-4196ac180260",
        "status": "test",
        "description": "Detects potential DLL side loading of \"KeyScramblerIE.dll\" by \"KeyScrambler.exe\".\nVarious threat actors and malware have been found side loading a masqueraded \"KeyScramblerIE.dll\" through \"KeyScrambler.exe\".\n",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (Image.str.contains(r'\\\\KeyScrambler.exe', case=False) | Image.str.contains(r'\\\\KeyScramblerLogon.exe', case=False)) & ImageLoaded.str.contains(r'\\\\KeyScramblerIE.dll', case=False) & ~ ((Image.str.contains(r'C:\\\\Program Files (x86)\\\\KeyScrambler\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\KeyScrambler\\\\', case=False)) & (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\KeyScrambler\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\KeyScrambler\\\\', case=False)) | Signature=='QFX Software Corporation' & SignatureStatus=='Valid')"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Goopdate.DLL Sideloading",
        "id": "b6188d2f-b3c4-4d2c-a17d-9706e0851af0",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"goopdate.dll\", a DLL used by googleupdate.exe",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\goopdate.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\', case=False)) & ~ (Image.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\GUM', case=False) & Image.str.contains(r'.tmp\\\\Dropbox', case=False) & ImageLoaded.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\GUM', case=False) & ImageLoaded.str.contains(r'.tmp\\\\goopdate.dll', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Load Of RstrtMgr.DLL By An Uncommon Process",
        "id": "3669afd2-9891-4534-a626-e5cf03810a61",
        "status": "test",
        "description": "Detects the load of RstrtMgr DLL (Restart Manager) by an uncommon process.\nThis library has been used during ransomware campaigns to kill processes that would prevent file encryption by locking them (e.g. Conti ransomware, Cactus ransomware). It has also recently been seen used by the BiBi wiper for Windows.\nIt could also be used for anti-analysis purposes by shut downing specific processes.\n",
        "tags": [
            "attack.impact",
            "attack.defense-evasion",
            "attack.t1486",
            "attack.t1562.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\RstrtMgr.dll', case=False) | OriginalFileName=='RstrtMgr.dll') & ~ (Image.str.contains(r':\\\\$WINDOWS.~BT\\\\', case=False) | Image.str.contains(r':\\\\$WinREAgent\\\\', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r':\\\\Program Files\\\\', case=False) | Image.str.contains(r':\\\\ProgramData\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\explorer.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SoftwareDistribution\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\SysNative\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\WinSxS\\\\', case=False) | Image.str.contains(r':\\\\WUDownloadCache\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\is-', case=False) & Image.str.contains(r'.tmp\\\\', case=False) & Image.str.contains(r'.tmp', case=False) | Image.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WMIC Loading Scripting Libraries",
        "id": "06ce37c2-61ab-4f05-9ff5-b1a96d18ae32",
        "status": "test",
        "description": "Detects threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc).",
        "tags": [
            "attack.defense-evasion",
            "attack.t1220"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\wmic.exe', case=False) & (ImageLoaded.str.contains(r'\\\\jscript.dll', case=False) | ImageLoaded.str.contains(r'\\\\vbscript.dll', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Core DLL Loaded Via Office Application",
        "id": "bb2ba6fb-95d4-4a25-89fc-30bb736c021a",
        "status": "test",
        "description": "Detects PowerShell core DLL being loaded by an Office Product",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\mspub.exe', case=False) | Image.str.contains(r'\\\\outlook.exe', case=False) | Image.str.contains(r'\\\\onenote.exe', case=False) | Image.str.contains(r'\\\\onenoteim.exe', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) | Image.str.contains(r'\\\\winword.exe', case=False)) & (ImageLoaded.str.contains(r'\\\\System.Management.Automation.Dll', case=False) | ImageLoaded.str.contains(r'\\\\System.Management.Automation.ni.Dll', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential EACore.DLL Sideloading",
        "id": "edd3ddc3-386f-4ba5-9ada-4376b2cfa7b5",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"EACore.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\EACore.dll', case=False) & ~ (Image.str.contains(r'C:\\\\Program Files\\\\Electronic Arts\\\\EA Desktop\\\\', case=False) & Image.str.contains(r'\\\\EACoreServer.exe', case=False) & ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Electronic Arts\\\\EA Desktop\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Of MpSvc.DLL",
        "id": "5ba243e5-8165-4cf7-8c69-e1d3669654c1",
        "status": "experimental",
        "description": "Detects potential DLL sideloading of \"MpSvc.dll\".",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\MpSvc.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Windows Defender\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential WWlib.DLL Sideloading",
        "id": "e2e01011-5910-4267-9c3b-4149ed5479cf",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"wwlib.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\wwlib.dll', case=False) & ~ ((Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft Office\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft Office\\\\', case=False)) & Image.str.contains(r'\\\\winword.exe', case=False) & (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft Office\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Microsoft Office\\\\', case=False)))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential appverifUI.DLL Sideloading",
        "id": "ee6cea48-c5b6-4304-a332-10fc6446f484",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"appverifUI.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\appverifUI.dll', case=False) & ~ ((Image==['C:\\\\Windows\\\\SysWOW64\\\\appverif.exe', 'C:\\\\Windows\\\\System32\\\\appverif.exe']) & (ImageLoaded.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False)))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Via JsSchHlp",
        "id": "68654bf0-4412-43d5-bfe8-5eaa393cd939",
        "status": "test",
        "description": "Detects potential DLL sideloading using JUSTSYSTEMS Japanese word processor",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\JSESPR.dll', case=False) & ~ ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Justsystem\\\\JsSchHlp\\\\', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Waveedit.DLL Sideloading",
        "id": "71b31e99-9ad0-47d4-aeb5-c0ca3928eeeb",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software.",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\waveedit.dll', case=False) & ~ ((Image==['C:\\\\Program Files (x86)\\\\Nero\\\\Nero Apps\\\\Nero WaveEditor\\\\waveedit.exe', 'C:\\\\Program Files\\\\Nero\\\\Nero Apps\\\\Nero WaveEditor\\\\waveedit.exe']) & (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Nero\\\\Nero Apps\\\\Nero WaveEditor\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Nero\\\\Nero Apps\\\\Nero WaveEditor\\\\', case=False)))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Unsigned Image Loaded Into LSASS Process",
        "id": "857c8db3-c89b-42fb-882b-f681c7cf4da2",
        "status": "test",
        "description": "Loading unsigned image (DLL, EXE) into LSASS process",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\lsass.exe', case=False) & Signed=='false'"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Abusable DLL Potential Sideloading From Suspicious Location",
        "id": "799a5f48-0ac1-4e0f-9152-71d137d48c2a",
        "status": "test",
        "description": "Detects potential DLL sideloading of DLLs that are known to be abused from suspicious locations",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\coreclr.dll', case=False) | ImageLoaded.str.contains(r'\\\\facesdk.dll', case=False) | ImageLoaded.str.contains(r'\\\\HPCustPartUI.dll', case=False) | ImageLoaded.str.contains(r'\\\\libcef.dll', case=False) | ImageLoaded.str.contains(r'\\\\ZIPDLL.dll', case=False)) & (ImageLoaded.str.contains(r':\\\\Perflogs\\\\', case=False) | ImageLoaded.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | ImageLoaded.str.contains(r'\\\\Temporary Internet', case=False) | ImageLoaded.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | ImageLoaded.str.contains(r':\\\\Users\\\\', case=False) & ImageLoaded.str.contains(r'\\\\Favorites\\\\', case=False) | ImageLoaded.str.contains(r':\\\\Users\\\\', case=False) & ImageLoaded.str.contains(r'\\\\Favourites\\\\', case=False) | ImageLoaded.str.contains(r':\\\\Users\\\\', case=False) & ImageLoaded.str.contains(r'\\\\Contacts\\\\', case=False) | ImageLoaded.str.contains(r':\\\\Users\\\\', case=False) & ImageLoaded.str.contains(r'\\\\Pictures\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Diagnostic Library Sdiageng.DLL Loaded By Msdt.EXE",
        "id": "ec8c4047-fad9-416a-8c81-0f479353d7f6",
        "status": "test",
        "description": "Detects both of CVE-2022-30190 (Follina) and DogWalk vulnerabilities exploiting msdt.exe binary to load the \"sdiageng.dll\" library",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202",
            "cve.2022-30190"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Image.str.contains(r'\\\\msdt.exe', case=False) & ImageLoaded.str.contains(r'\\\\sdiageng.dll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Volume Shadow Copy VSS_PS.dll Load",
        "id": "333cdbe8-27bb-4246-bf82-b41a0dca4b70",
        "status": "test",
        "description": "Detects the image load of vss_ps.dll by uncommon executables",
        "tags": [
            "attack.defense-evasion",
            "attack.impact",
            "attack.t1490"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\vss_ps.dll', case=False) & ~ (Image.str.contains(r'C:\\\\Windows\\\\', case=False) & (Image.str.contains(r'\\\\clussvc.exe', case=False) | Image.str.contains(r'\\\\dismhost.exe', case=False) | Image.str.contains(r'\\\\dllhost.exe', case=False) | Image.str.contains(r'\\\\inetsrv\\\\appcmd.exe', case=False) | Image.str.contains(r'\\\\inetsrv\\\\iissetup.exe', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\searchindexer.exe', case=False) | Image.str.contains(r'\\\\srtasks.exe', case=False) | Image.str.contains(r'\\\\svchost.exe', case=False) | Image.str.contains(r'\\\\System32\\\\SystemPropertiesAdvanced.exe', case=False) | Image.str.contains(r'\\\\taskhostw.exe', case=False) | Image.str.contains(r'\\\\thor.exe', case=False) | Image.str.contains(r'\\\\thor64.exe', case=False) | Image.str.contains(r'\\\\tiworker.exe', case=False) | Image.str.contains(r'\\\\vssvc.exe', case=False) | Image.str.contains(r'\\\\WmiPrvSE.exe', case=False) | Image.str.contains(r'\\\\wsmprovhost.exe', case=False)) | Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | CommandLine.str.contains(r'C:\\\\$WinREAgent\\\\Scratch\\\\', case=False) & CommandLine.str.contains(r'\\\\dismhost.exe {', case=False) | Image is null)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CLR DLL Loaded Via Office Applications",
        "id": "d13c43f0-f66b-4279-8b2c-5912077c1780",
        "status": "test",
        "description": "Detects CLR DLL being loaded by an Office Product",
        "tags": [
            "attack.execution",
            "attack.t1204.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\mspub.exe', case=False) | Image.str.contains(r'\\\\outlook.exe', case=False) | Image.str.contains(r'\\\\onenote.exe', case=False) | Image.str.contains(r'\\\\onenoteim.exe', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) | Image.str.contains(r'\\\\winword.exe', case=False)) & ImageLoaded.str.contains(r'\\\\clr.dll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Python Image Load By Non-Python Process",
        "id": "cbb56d62-4060-40f7-9466-d8aaf3123f83",
        "status": "test",
        "description": "Detects the image load of \"Python Core\" by a non-Python process. This might be indicative of a Python script bundled with Py2Exe.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & Description=='Python Core' & ~ (Image.str.contains(r'Python', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r'C:\\\\ProgramData\\\\Anaconda3\\\\', case=False)) & ~ Image is null"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Clfs.SYS Loaded By Process Located In a Potential Suspicious Location",
        "id": "fb4e2211-6d08-426b-8e6f-0d4a161e3b1d",
        "status": "experimental",
        "description": "Detects Clfs.sys being loaded by a process running from a potentially suspicious location. Clfs.sys is loaded as part of many CVEs exploits that targets Common Log File.",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\clfs.sys', case=False) & (Image.str.contains(r':\\\\Perflogs\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\Temporary Internet', case=False) | Image.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\Favorites\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\Favourites\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\Contacts\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\Pictures\\\\', case=False))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential AVKkid.DLL Sideloading",
        "id": "952ed57c-8f99-453d-aee0-53a49c22f95d",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"AVKkid.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\AVKkid.dll', case=False) & ~ ((Image.str.contains(r'C:\\\\Program Files (x86)\\\\G DATA\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\G DATA\\\\', case=False)) & Image.str.contains(r'\\\\AVKKid.exe', case=False) & (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\G DATA\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\G DATA\\\\', case=False)))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Third Party Software DLL Sideloading",
        "id": "f9df325d-d7bc-4a32-8a1a-2cc61dcefc63",
        "status": "test",
        "description": "Detects DLL sideloading of DLLs that are part of third party software (zoom, discord....etc)",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & (ImageLoaded.str.contains(r'\\\\commfunc.dll', case=False) & ~ (ImageLoaded.str.contains(r'\\\\AppData\\\\local\\\\Google\\\\Chrome\\\\Application\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Lenovo\\\\Communications Utility\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Lenovo\\\\Communications Utility\\\\', case=False)) | ImageLoaded.str.contains(r'\\\\tosbtkbd.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Toshiba\\\\Bluetooth Toshiba Stack\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Toshiba\\\\Bluetooth Toshiba Stack\\\\', case=False)))"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DLL Sideloading Of ShellChromeAPI.DLL",
        "id": "ee4c5d06-3abc-48cc-8885-77f1c20f4451",
        "status": "test",
        "description": "Detects processes loading the non-existent DLL \"ShellChromeAPI\". One known example is the \"DeviceEnroller\" binary in combination with the \"PhoneDeepLink\" flag tries to load this DLL.\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\ShellChromeAPI.dll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Of DBGCORE.DLL",
        "id": "9ca2bf31-0570-44d8-a543-534c47c33ed7",
        "status": "test",
        "description": "Detects DLL sideloading of \"dbgcore.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\dbgcore.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SoftwareDistribution\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SystemTemp\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False)) & ~ ImageLoaded.str.contains(r'\\\\Steam\\\\bin\\\\cef\\\\cef.win7x64\\\\dbgcore.dll', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Chrome Frame Helper DLL Sideloading",
        "id": "72ca7c75-bf85-45cd-aca7-255d360e423c",
        "status": "test",
        "description": "Detects potential DLL sideloading of \"chrome_frame_helper.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'\\\\chrome_frame_helper.dll', case=False) & ~ (ImageLoaded.str.contains(r'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\', case=False) | ImageLoaded.str.contains(r'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\', case=False)) & ~ ImageLoaded.str.contains(r'\\\\AppData\\\\local\\\\Google\\\\Chrome\\\\Application\\\\', case=False)"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "VMMap Signed Dbghelp.DLL Potential Sideloading",
        "id": "98ffaed4-aec2-4e04-9b07-31492fe68b3d",
        "status": "test",
        "description": "Detects potential DLL sideloading of a signed dbghelp.dll by the Sysinternals VMMap.",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==7 & ImageLoaded.str.contains(r'C:\\\\Debuggers\\\\dbghelp.dll', case=False) & (Image.str.contains(r'\\\\vmmap.exe', case=False) | Image.str.contains(r'\\\\vmmap64.exe', case=False)) & Signed=='true'"
        ],
        "logsource": {
            "category": "image_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Defense Evasion Via Raw Disk Access By Uncommon Tools",
        "id": "db809f10-56ce-4420-8c86-d6a7d793c79c",
        "status": "test",
        "description": "Detects raw disk access using uncommon tools or tools that are located in suspicious locations (heavy filtering is required), which could indicate possible defense evasion attempts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1006"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==9 & ~ (Device.str.contains(r'floppy', case=False) | Image.str.contains(r':\\\\$WINDOWS.~BT\\\\', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r':\\\\Program Files\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\CCM\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\explorer.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\servicing\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\SoftwareDistribution\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\SystemApps\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\uus\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\WinSxS\\\\', case=False) | Image==['Registry', 'System'] | Image.str.contains(r':\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False) & Image.str.contains(r'\\\\MsMpEng.exe', case=False) | Image.str.contains(r':\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\AppData\\\\', case=False) & Image.str.contains(r'\\\\Microsoft\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) & (Image.str.contains(r'\\\\Executables\\\\SSDUpdate.exe', case=False) | Image.str.contains(r'\\\\HostMetadata\\\\NVMEHostmetadata.exe', case=False)) | Image is null | Image.str.contains(r':\\\\Windows\\\\ImmersiveControlPanel\\\\SystemSettings.exe', case=False)) & ~ (Image.str.contains(r'\\\\AppData\\\\Local\\\\GitHubDesktop\\\\app-', case=False) & Image.str.contains(r'\\\\resources\\\\app\\\\git\\\\mingw64\\\\bin\\\\git.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\Temp\\\\asgard2-agent\\\\', case=False) & Image.str.contains(r'\\\\thor.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Keybase\\\\upd.exe', case=False))"
        ],
        "logsource": {
            "category": "raw_access_thread",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Thread Created In Shell Application",
        "id": "a9d4d3fa-8fc0-41bc-80b1-30b9fda79d6f",
        "status": "experimental",
        "description": "Detects remote thread creation in command shell applications, such as \"Cmd.EXE\" and \"PowerShell.EXE\".\nIt is a common technique used by malware, such as IcedID, to inject malicious code and execute it within legitimate processes.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1055"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==8 & (TargetImage.str.contains(r'\\\\cmd.exe', case=False) | TargetImage.str.contains(r'\\\\powershell.exe', case=False) | TargetImage.str.contains(r'\\\\pwsh.exe', case=False))"
        ],
        "logsource": {
            "category": "create_remote_thread",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Thread Created In KeePass.EXE",
        "id": "77564cc2-7382-438b-a7f6-395c2ae53b9a",
        "status": "test",
        "description": "Detects remote thread creation in \"KeePass.exe\" which could indicates potential password dumping activity",
        "tags": [
            "attack.credential-access",
            "attack.t1555.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==8 & TargetImage.str.contains(r'\\\\KeePass.exe', case=False)"
        ],
        "logsource": {
            "category": "create_remote_thread",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Thread Creation In Mstsc.Exe From Suspicious Location",
        "id": "c0aac16a-b1e7-4330-bab0-3c27bb4987c7",
        "status": "test",
        "description": "Detects remote thread creation in the \"mstsc.exe\" process by a process located in a potentially suspicious location.\nThis technique is often used by attackers in order to hook some APIs used by DLLs loaded by \"mstsc.exe\" during RDP authentications in order to steal credentials.\n",
        "tags": [
            "attack.credential-access"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==8 & TargetImage.str.contains(r'\\\\mstsc.exe', case=False) & (SourceImage.str.contains(r':\\\\Temp\\\\', case=False) | SourceImage.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | SourceImage.str.contains(r':\\\\Windows\\\\PerfLogs\\\\', case=False) | SourceImage.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False) | SourceImage.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | SourceImage.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "create_remote_thread",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Potential CobaltStrike Process Injection",
        "id": "6309645e-122d-4c5b-bb2b-22e4f9c2fa42",
        "status": "test",
        "description": "Detects a potential remote threat creation with certain characteristics which are typical for Cobalt Strike beacons",
        "tags": [
            "attack.defense-evasion",
            "attack.t1055.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==8 & (StartAddress.str.contains(r'0B80', case=False) | StartAddress.str.contains(r'0C7C', case=False) | StartAddress.str.contains(r'0C88', case=False))"
        ],
        "logsource": {
            "category": "create_remote_thread",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Thread Creation Ttdinject.exe Proxy",
        "id": "c15e99a3-c474-48ab-b9a7-84549a7a9d16",
        "status": "test",
        "description": "Detects a remote thread creation of Ttdinject.exe used as proxy",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==8 & SourceImage.str.contains(r'\\\\ttdinject.exe', case=False)"
        ],
        "logsource": {
            "category": "create_remote_thread",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - CACTUSTORCH Remote Thread Creation",
        "id": "2e4e488a-6164-4811-9ea1-f960c7359c40",
        "status": "test",
        "description": "Detects remote thread creation from CACTUSTORCH as described in references.",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1055.012",
            "attack.t1059.005",
            "attack.t1059.007",
            "attack.t1218.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==8 & (SourceImage.str.contains(r'\\\\System32\\\\cscript.exe', case=False) | SourceImage.str.contains(r'\\\\System32\\\\wscript.exe', case=False) | SourceImage.str.contains(r'\\\\System32\\\\mshta.exe', case=False) | SourceImage.str.contains(r'\\\\winword.exe', case=False) | SourceImage.str.contains(r'\\\\excel.exe', case=False)) & TargetImage.str.contains(r'\\\\SysWOW64\\\\', case=False) & StartModule is null"
        ],
        "logsource": {
            "category": "create_remote_thread",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Thread Creation Via PowerShell In Uncommon Target",
        "id": "99b97608-3e21-4bfe-8217-2a127c396a0e",
        "status": "test",
        "description": "Detects the creation of a remote thread from a Powershell process in an uncommon target process",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218.011",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==8 & (SourceImage.str.contains(r'\\\\powershell.exe', case=False) | SourceImage.str.contains(r'\\\\pwsh.exe', case=False)) & (TargetImage.str.contains(r'\\\\rundll32.exe', case=False) | TargetImage.str.contains(r'\\\\regsvr32.exe', case=False))"
        ],
        "logsource": {
            "category": "create_remote_thread",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Password Dumper Remote Thread in LSASS",
        "id": "f239b326-2f41-4d6b-9dfa-c846a60ef505",
        "status": "stable",
        "description": "Detects password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage.\nThe process in field Process is the malicious program. A single execution can lead to hundreds of events.\n",
        "tags": [
            "attack.credential-access",
            "attack.s0005",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==8 & TargetImage.str.contains(r'\\\\lsass.exe', case=False) & StartModule==''"
        ],
        "logsource": {
            "category": "create_remote_thread",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Credential Dumping Attempt Via PowerShell Remote Thread",
        "id": "fb656378-f909-47c1-8747-278bf09f4f4f",
        "status": "test",
        "description": "Detects remote thread creation by PowerShell processes into \"lsass.exe\"",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==8 & (SourceImage.str.contains(r'\\\\powershell.exe', case=False) | SourceImage.str.contains(r'\\\\pwsh.exe', case=False)) & TargetImage.str.contains(r'\\\\lsass.exe', case=False)"
        ],
        "logsource": {
            "category": "create_remote_thread",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Thread Creation In Uncommon Target Image",
        "id": "a1a144b7-5c9b-4853-a559-2172be8d4a03",
        "status": "experimental",
        "description": "Detects uncommon target processes for remote thread creation",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==8 & (TargetImage.str.contains(r'\\\\calc.exe', case=False) | TargetImage.str.contains(r'\\\\calculator.exe', case=False) | TargetImage.str.contains(r'\\\\mspaint.exe', case=False) | TargetImage.str.contains(r'\\\\notepad.exe', case=False) | TargetImage.str.contains(r'\\\\ping.exe', case=False) | TargetImage.str.contains(r'\\\\sethc.exe', case=False) | TargetImage.str.contains(r'\\\\spoolsv.exe', case=False) | TargetImage.str.contains(r'\\\\wordpad.exe', case=False) | TargetImage.str.contains(r'\\\\write.exe', case=False)) & ~ SourceImage=='C:\\\\Windows\\\\System32\\\\csrss.exe' & ~ (StartFunction=='EtwpNotificationThread' | SourceImage.str.contains(r'unknown process', case=False) | SourceImage=='C:\\\\Program Files\\\\VMware\\\\VMware Tools\\\\vmtoolsd.exe' & StartFunction=='GetCommandLineW' & (TargetImage==['C:\\\\Windows\\\\System32\\\\notepad.exe', 'C:\\\\Windows\\\\System32\\\\spoolsv.exe']) | SourceImage=='C:\\\\Program Files\\\\Xerox\\\\XeroxPrintExperience\\\\CommonFiles\\\\XeroxPrintJobEventManagerService.exe' & StartFunction=='LoadLibraryW' & TargetImage=='C:\\\\Windows\\\\System32\\\\spoolsv.exe')"
        ],
        "logsource": {
            "category": "create_remote_thread",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Thread Creation By Uncommon Source Image",
        "id": "66d31e5f-52d6-40a4-9615-002d3789a119",
        "status": "experimental",
        "description": "Detects uncommon processes creating remote threads.",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1055"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==8 & (SourceImage.str.contains(r'\\\\explorer.exe', case=False) | SourceImage.str.contains(r'\\\\iexplore.exe', case=False) | SourceImage.str.contains(r'\\\\msiexec.exe', case=False) | SourceImage.str.contains(r'\\\\powerpnt.exe', case=False) | SourceImage.str.contains(r'\\\\schtasks.exe', case=False) | SourceImage.str.contains(r'\\\\winlogon.exe', case=False)) & ~ (SourceImage=='C:\\\\Windows\\\\System32\\\\winlogon.exe' & (TargetImage==['C:\\\\Windows\\\\System32\\\\services.exe', 'C:\\\\Windows\\\\System32\\\\wininit.exe', 'C:\\\\Windows\\\\System32\\\\csrss.exe', 'C:\\\\Windows\\\\System32\\\\LogonUI.exe']) | SourceImage=='C:\\\\Windows\\\\System32\\\\winlogon.exe' & TargetParentProcessId==4 | (SourceImage==['C:\\\\Windows\\\\System32\\\\schtasks.exe', 'C:\\\\Windows\\\\SysWOW64\\\\schtasks.exe']) & TargetImage=='C:\\\\Windows\\\\System32\\\\conhost.exe' | SourceImage=='C:\\\\Windows\\\\explorer.exe' & (TargetImage.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | TargetImage.str.contains(r'C:\\\\Program Files\\\\', case=False) | TargetImage.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | TargetImage.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False)) | TargetImage=='System' | SourceImage.str.contains(r'\\\\msiexec.exe', case=False) & (TargetImage.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | TargetImage.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | TargetImage.str.contains(r'C:\\\\Program Files\\\\', case=False)) | TargetImage is null | TargetImage=='') & ~ (SourceImage=='C:\\\\Program Files\\\\internet explorer\\\\iexplore.exe' & SourceCommandLine.str.contains(r'https://', case=False) & SourceCommandLine.str.contains(r'.checkpoint.com/documents/', case=False) & SourceCommandLine.str.contains(r'SmartConsole_OLH/', case=False) & SourceCommandLine.str.contains(r'default.htm#cshid=', case=False) | SourceImage=='C:\\\\Program Files\\\\internet explorer\\\\iexplore.exe' & (SourceParentImage.str.contains(r'C:\\\\Program Files\\\\', case=False) | SourceParentImage.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False)) & SourceParentImage.str.contains(r'\\\\CheckPoint\\\\SmartConsole\\\\', case=False) & SourceParentImage.str.contains(r'\\\\SmartConsole.exe', case=False) | SourceImage.str.contains(r'\\\\Microsoft Office\\\\', case=False) & SourceImage.str.contains(r'\\\\POWERPNT.EXE', case=False) & TargetImage=='C:\\\\Windows\\\\System32\\\\csrss.exe')"
        ],
        "logsource": {
            "category": "create_remote_thread",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Rare Remote Thread Creation By Uncommon Source Image",
        "id": "02d1d718-dd13-41af-989d-ea85c7fab93f",
        "status": "experimental",
        "description": "Detects uncommon processes creating remote threads.",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1055"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==8 & (SourceImage.str.contains(r'\\\\bash.exe', case=False) | SourceImage.str.contains(r'\\\\cscript.exe', case=False) | SourceImage.str.contains(r'\\\\cvtres.exe', case=False) | SourceImage.str.contains(r'\\\\defrag.exe', case=False) | SourceImage.str.contains(r'\\\\dialer.exe', case=False) | SourceImage.str.contains(r'\\\\dnx.exe', case=False) | SourceImage.str.contains(r'\\\\esentutl.exe', case=False) | SourceImage.str.contains(r'\\\\excel.exe', case=False) | SourceImage.str.contains(r'\\\\expand.exe', case=False) | SourceImage.str.contains(r'\\\\find.exe', case=False) | SourceImage.str.contains(r'\\\\findstr.exe', case=False) | SourceImage.str.contains(r'\\\\forfiles.exe', case=False) | SourceImage.str.contains(r'\\\\gpupdate.exe', case=False) | SourceImage.str.contains(r'\\\\hh.exe', case=False) | SourceImage.str.contains(r'\\\\installutil.exe', case=False) | SourceImage.str.contains(r'\\\\lync.exe', case=False) | SourceImage.str.contains(r'\\\\makecab.exe', case=False) | SourceImage.str.contains(r'\\\\mDNSResponder.exe', case=False) | SourceImage.str.contains(r'\\\\monitoringhost.exe', case=False) | SourceImage.str.contains(r'\\\\msbuild.exe', case=False) | SourceImage.str.contains(r'\\\\mshta.exe', case=False) | SourceImage.str.contains(r'\\\\mspaint.exe', case=False) | SourceImage.str.contains(r'\\\\outlook.exe', case=False) | SourceImage.str.contains(r'\\\\ping.exe', case=False) | SourceImage.str.contains(r'\\\\provtool.exe', case=False) | SourceImage.str.contains(r'\\\\python.exe', case=False) | SourceImage.str.contains(r'\\\\regsvr32.exe', case=False) | SourceImage.str.contains(r'\\\\robocopy.exe', case=False) | SourceImage.str.contains(r'\\\\runonce.exe', case=False) | SourceImage.str.contains(r'\\\\sapcimc.exe', case=False) | SourceImage.str.contains(r'\\\\smartscreen.exe', case=False) | SourceImage.str.contains(r'\\\\spoolsv.exe', case=False) | SourceImage.str.contains(r'\\\\tstheme.exe', case=False) | SourceImage.str.contains(r'\\\\userinit.exe', case=False) | SourceImage.str.contains(r'\\\\vssadmin.exe', case=False) | SourceImage.str.contains(r'\\\\vssvc.exe', case=False) | SourceImage.str.contains(r'\\\\w3wp.exe', case=False) | SourceImage.str.contains(r'\\\\winscp.exe', case=False) | SourceImage.str.contains(r'\\\\winword.exe', case=False) | SourceImage.str.contains(r'\\\\wmic.exe', case=False) | SourceImage.str.contains(r'\\\\wscript.exe', case=False))"
        ],
        "logsource": {
            "category": "create_remote_thread",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "QuickAssist Execution",
        "id": "e20b5b14-ce93-4230-88af-981983ef6e74",
        "status": "experimental",
        "description": "Detects the execution of Microsoft Quick Assist tool \"QuickAssist.exe\". This utility can be used by attackers to gain remote access.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\QuickAssist.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Powershell Token Obfuscation - Process Creation",
        "id": "deb9b646-a508-44ee-b7c9-d8965921c6b6",
        "status": "test",
        "description": "Detects TOKEN OBFUSCATION technique from Invoke-Obfuscation",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027.009"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\\\\w+`(\\\\w+|-|.)`[\\\\w+|\\\\s]') | CommandLine.str.contains(r'\"(\\\\{\\\\d\\\\})+\"\\\\s*-f') | CommandLine.str.contains(r'(?i)\\\\$\\\\{`?e`?n`?v`?:`?p`?a`?t`?h`?\\\\}')) & ~ CommandLine.str.contains(r'${env:path}', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Windows Defender Tampering Via Wmic.EXE",
        "id": "51cbac1e-eee3-4a90-b1b7-358efb81fa0a",
        "status": "test",
        "description": "Detects potential tampering with Windows Defender settings such as adding exclusion using wmic",
        "tags": [
            "attack.credential-access",
            "attack.t1546.008"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='wmic.exe' | Image.str.contains(r'\\\\WMIC.exe', case=False)) & CommandLine.str.contains(r'/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Greedy Compression Using Rar.EXE",
        "id": "afe52666-401e-4a02-b4ff-5d128990b8cb",
        "status": "test",
        "description": "Detects RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rar.exe', case=False) | Description=='Command line RAR' | CommandLine.str.contains(r'.exe a ', case=False) | CommandLine.str.contains(r' a -m', case=False)) & CommandLine.str.contains(r' -hp', case=False) & CommandLine.str.contains(r' -r ', case=False) & (CommandLine.str.contains(r'* *:\\\\\\*.*') | CommandLine.str.contains(r'* *:\\\\\\\\\\*.*') | CommandLine.str.contains(r'* *:\\\\$Recycle.bin\\\\*') | CommandLine.str.contains(r'* *:\\\\PerfLogs\\\\*') | CommandLine.str.contains(r'* *:\\\\Temp*') | CommandLine.str.contains(r'* *:\\\\Users\\\\Public\\\\*') | CommandLine.str.contains(r'* *:\\\\Windows\\\\*') | CommandLine.str.contains(r' %public%', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Wmiexec Default Powershell Command",
        "id": "022eaba8-f0bf-4dd9-9217-4604b0bb3bb0",
        "status": "test",
        "description": "Detects the execution of PowerShell with a specific flag sequence that is used by the Wmiexec script",
        "tags": [
            "attack.defense-evasion",
            "attack.lateral-movement"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'-NoP -NoL -sta -NonI -W Hidden -Exec Bypass -Enc', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using ChangePK and SLUI",
        "id": "503d581c-7df0-4bbe-b9be-5840c0ecc1fc",
        "status": "test",
        "description": "Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\changepk.exe', case=False) & ParentImage.str.contains(r'\\\\slui.exe', case=False) & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential PsExec Remote Execution",
        "id": "ea011323-7045-460b-b2d7-0f7442ea6b38",
        "status": "test",
        "description": "Detects potential psexec command that initiate execution on a remote systems via common commandline flags used by the utility",
        "tags": [
            "attack.resource-development",
            "attack.t1587.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'accepteula', case=False) & CommandLine.str.contains(r' -u ', case=False) & CommandLine.str.contains(r' -p ', case=False) & CommandLine.str.contains(r' \\\\\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sysmon Discovery Via Default Driver Altitude Using Findstr.EXE",
        "id": "37db85d1-b089-490a-a59a-c7b6f984f480",
        "status": "test",
        "description": "Detects usage of \"findstr\" with the argument \"385201\". Which could indicate potential discovery of an installed Sysinternals Sysmon service using the default driver altitude (even if the name is changed).",
        "tags": [
            "attack.discovery",
            "attack.t1518.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\find.exe', case=False) | Image.str.contains(r'\\\\findstr.exe', case=False) | OriginalFileName==['FIND.EXE', 'FINDSTR.EXE']) & CommandLine.str.contains(r' 385201', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Arbitrary Command Execution Using Msdt.EXE",
        "id": "258fc8ce-8352-443a-9120-8a11e4857fa5",
        "status": "test",
        "description": "Detects processes leveraging the \"ms-msdt\" handler or the \"msdt.exe\" binary to execute arbitrary commands as seen in the follina (CVE-2022-30190) vulnerability",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\msdt.exe', case=False) | OriginalFileName=='msdt.exe') & (CommandLine.str.contains(r'IT_BrowseForFile=', case=False) | CommandLine.str.contains(r' PCWDiagnostic', case=False) & (CommandLine.str.contains(r' -af ', case=False) | CommandLine.str.contains(r' /af ', case=False) | CommandLine.str.contains(r' \u2013af ', case=False) | CommandLine.str.contains(r' \u2014af ', case=False) | CommandLine.str.contains(r' \u2015af ', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Ping Hex IP",
        "id": "1a0d4aba-7668-4365-9ce4-6d79ab088dfd",
        "status": "test",
        "description": "Detects a ping command that uses a hex encoded IP address",
        "tags": [
            "attack.defense-evasion",
            "attack.t1140",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\ping.exe', case=False) & CommandLine.str.contains(r'0x', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Process Creation Using Sysnative Folder",
        "id": "3c1b5fb0-c72f-45ba-abd1-4d4c353144ab",
        "status": "test",
        "description": "Detects process creation events that use the Sysnative folder (common for CobaltStrike spawns)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r':\\\\Windows\\\\Sysnative\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Sysnative\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Explorer Process Tree Break",
        "id": "949f1ffb-6e85-4f00-ae1e-c3c5b190d605",
        "status": "test",
        "description": "Detects a command line process that uses explorer.exe to launch arbitrary commands or binaries,\nwhich is similar to cmd.exe /c, only it breaks the process tree and makes its parent a new instance of explorer spawning from \"svchost\"\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'/factory,{75dff2b7-6936-4c06-a8bb-676a7b00b24b}', case=False) | (CommandLine.str.contains(r'explorer.exe', case=False)) & (CommandLine.str.contains(r' -root,', case=False) | CommandLine.str.contains(r' /root,', case=False) | CommandLine.str.contains(r' \u2013root,', case=False) | CommandLine.str.contains(r' \u2014root,', case=False) | CommandLine.str.contains(r' \u2015root,', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Shell32 DLL Execution in Suspicious Directory",
        "id": "32b96012-7892-429e-b26c-ac2bf46066ff",
        "status": "test",
        "description": "Detects shell32.dll executing a DLL in a suspicious directory",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & CommandLine.str.contains(r'shell32.dll', case=False) & CommandLine.str.contains(r'Control_RunDLL', case=False) & (CommandLine.str.contains(r'%AppData%', case=False) | CommandLine.str.contains(r'%LocalAppData%', case=False) | CommandLine.str.contains(r'%Temp%', case=False) | CommandLine.str.contains(r'%tmp%', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\', case=False) | CommandLine.str.contains(r'\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Child Process Created as System",
        "id": "590a5f4c-6c8c-4f10-8307-89afe9453a9d",
        "status": "test",
        "description": "Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE accounts",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1134.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentUser.str.contains(r'AUTHORI', case=False) | ParentUser.str.contains(r'AUTORI', case=False)) & (ParentUser.str.contains(r'\\\\NETWORK SERVICE', case=False) | ParentUser.str.contains(r'\\\\LOCAL SERVICE', case=False)) & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False)) & (User.str.contains(r'\\\\SYSTEM', case=False) | User.str.contains(r'\\\\Syst\u00e8me', case=False) | User.str.contains(r'\\\\\u0421\u0418\u0421\u0422\u0415\u041c\u0410', case=False)) & (IntegrityLevel==['System', 'S-1-16-16384']) & ~ (Image.str.contains(r'\\\\rundll32.exe', case=False) & CommandLine.str.contains(r'DavSetCookie', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Child Process Of BgInfo.EXE",
        "id": "811f459f-9231-45d4-959a-0266c6311987",
        "status": "test",
        "description": "Detects suspicious child processes of \"BgInfo.exe\" which could be a sign of potential abuse of the binary to proxy execution via external VBScript",
        "tags": [
            "attack.execution",
            "attack.t1059.005",
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1202"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\bginfo.exe', case=False) | ParentImage.str.contains(r'\\\\bginfo64.exe', case=False)) & (Image.str.contains(r'\\\\calc.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\notepad.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r':\\\\Temp\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | Image.str.contains(r':\\\\PerfLogs\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Compress Data and Lock With Password for Exfiltration With WINZIP",
        "id": "e2e80da2-8c66-4e00-ae3c-2eebd29f6b6d",
        "status": "test",
        "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities",
        "tags": [
            "attack.collection",
            "attack.t1560.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'winzip.exe', case=False) | CommandLine.str.contains(r'winzip64.exe', case=False)) & CommandLine.str.contains(r'-s\"', case=False) & (CommandLine.str.contains(r' -min ', case=False) | CommandLine.str.contains(r' -a ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use of TTDInject.exe",
        "id": "b27077d6-23e6-45d2-81a0-e2b356eea5fd",
        "status": "test",
        "description": "Detects the executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'ttdinject.exe', case=False) | OriginalFileName=='TTDInject.EXE')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Download Pattern",
        "id": "3b6ab547-8ec2-4991-b9d2-2b06702a48d7",
        "status": "test",
        "description": "Detects a Powershell process that contains download commands in its command line string",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & CommandLine.str.contains(r'new-object', case=False) & CommandLine.str.contains(r'net.webclient).', case=False) & CommandLine.str.contains(r'download', case=False) & (CommandLine.str.contains(r'string(', case=False) | CommandLine.str.contains(r'file(', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Conhost Spawned By Uncommon Parent Process",
        "id": "cbb9e3d1-2386-4e59-912e-62f1484f7a89",
        "status": "test",
        "description": "Detects when the Console Window Host (conhost.exe) process is spawned by an uncommon parent process, which could be indicative of potential code injection activity.",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\conhost.exe', case=False) & (ParentImage.str.contains(r'\\\\explorer.exe', case=False) | ParentImage.str.contains(r'\\\\lsass.exe', case=False) | ParentImage.str.contains(r'\\\\regsvr32.exe', case=False) | ParentImage.str.contains(r'\\\\rundll32.exe', case=False) | ParentImage.str.contains(r'\\\\services.exe', case=False) | ParentImage.str.contains(r'\\\\smss.exe', case=False) | ParentImage.str.contains(r'\\\\spoolsv.exe', case=False) | ParentImage.str.contains(r'\\\\svchost.exe', case=False) | ParentImage.str.contains(r'\\\\userinit.exe', case=False) | ParentImage.str.contains(r'\\\\wininit.exe', case=False) | ParentImage.str.contains(r'\\\\winlogon.exe', case=False)) & ~ (ParentCommandLine.str.contains(r'-k apphost -s AppHostSvc', case=False) | ParentCommandLine.str.contains(r'-k imgsvc', case=False) | ParentCommandLine.str.contains(r'-k localService -p -s RemoteRegistry', case=False) | ParentCommandLine.str.contains(r'-k LocalSystemNetworkRestricted -p -s NgcSvc', case=False) | ParentCommandLine.str.contains(r'-k NetSvcs -p -s NcaSvc', case=False) | ParentCommandLine.str.contains(r'-k netsvcs -p -s NetSetupSvc', case=False) | ParentCommandLine.str.contains(r'-k netsvcs -p -s wlidsvc', case=False) | ParentCommandLine.str.contains(r'-k NetworkService -p -s DoSvc', case=False) | ParentCommandLine.str.contains(r'-k wsappx -p -s AppXSvc', case=False) | ParentCommandLine.str.contains(r'-k wsappx -p -s ClipSVC', case=False)) & ~ (ParentCommandLine.str.contains(r'C:\\\\Program Files (x86)\\\\Dropbox\\\\Client\\\\', case=False) | ParentCommandLine.str.contains(r'C:\\\\Program Files\\\\Dropbox\\\\Client\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Msxsl.EXE Execution",
        "id": "9e50a8b3-dd05-4eb8-9153-bdb6b79d50b0",
        "status": "test",
        "description": "Detects the execution of the MSXSL utility. This can be used to execute Extensible Stylesheet Language (XSL) files. These files are commonly used to describe the processing and rendering of data within XML files.\nAdversaries can abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1220"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\msxsl.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Execution of Powershell with Base64",
        "id": "fb843269-508c-4b76-8b8d-88679db22ce7",
        "status": "test",
        "description": "Commandline to launch powershell with a base64 payload",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & (CommandLine.str.contains(r' -e ', case=False) | CommandLine.str.contains(r' -en ', case=False) | CommandLine.str.contains(r' -enc ', case=False) | CommandLine.str.contains(r' -enco', case=False) | CommandLine.str.contains(r' -ec ', case=False)) & ~ (CommandLine.str.contains(r' -Encoding ', case=False) | ParentImage.str.contains(r'C:\\\\Packages\\\\Plugins\\\\Microsoft.GuestConfiguration.ConfigurationforWindows\\\\', case=False) | ParentImage.str.contains(r'\\\\gc_worker.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Pypykatz Credentials Dumping Activity",
        "id": "a29808fd-ef50-49ff-9c7a-59a9b040b404",
        "status": "test",
        "description": "Detects the usage of \"pypykatz\" to obtain stored credentials. Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database through Windows registry where the SAM database is stored",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\pypykatz.exe', case=False) | Image.str.contains(r'\\\\python.exe', case=False)) & CommandLine.str.contains(r'live', case=False) & CommandLine.str.contains(r'registry', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Devtoolslauncher.exe Executes Specified Binary",
        "id": "cc268ac1-42d9-40fd-9ed3-8c4e1a5b87e6",
        "status": "test",
        "description": "The Devtoolslauncher.exe executes other binary",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\devtoolslauncher.exe', case=False) & CommandLine.str.contains(r'LaunchForDeploy', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Veeam Backup Database Suspicious Query",
        "id": "696bfb54-227e-4602-ac5b-30d9d2053312",
        "status": "test",
        "description": "Detects potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information.",
        "tags": [
            "attack.collection",
            "attack.t1005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\sqlcmd.exe', case=False) & CommandLine.str.contains(r'VeeamBackup', case=False) & CommandLine.str.contains(r'From ', case=False) & (CommandLine.str.contains(r'BackupRepositories', case=False) | CommandLine.str.contains(r'Backups', case=False) | CommandLine.str.contains(r'Credentials', case=False) | CommandLine.str.contains(r'HostCreds', case=False) | CommandLine.str.contains(r'SmbFileShares', case=False) | CommandLine.str.contains(r'Ssh_creds', case=False) | CommandLine.str.contains(r'VSphereInfo', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Driver/DLL Installation Via Odbcconf.EXE",
        "id": "cb0fe7c5-f3a3-484d-aa25-d350a7912729",
        "status": "test",
        "description": "Detects execution of \"odbcconf\" with the \"INSTALLDRIVER\" action where the driver doesn't contain a \".dll\" extension. This is often used as a defense evasion method.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.008"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\odbcconf.exe', case=False) | OriginalFileName=='odbcconf.exe') & CommandLine.str.contains(r'INSTALLDRIVER ', case=False) & ~ CommandLine.str.contains(r'.dll', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using IEInstal - Process",
        "id": "80fc36aa-945e-4181-89f2-2f907ab6775d",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using IEInstal.exe (UACMe 64)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288']) & ParentImage.str.contains(r'\\\\ieinstal.exe', case=False) & Image.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) & Image.str.contains(r'consent.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Provisioning Registry Key Abuse For Binary Proxy Execution",
        "id": "2a4b3e61-9d22-4e4a-b60f-6e8f0cde6f25",
        "status": "test",
        "description": "Detects potential abuse of the provisioning registry key for indirect command execution through \"Provlaunch.exe\".",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'SOFTWARE\\\\Microsoft\\\\Provisioning\\\\Commands\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Visual Studio NodejsTools PressAnyKey Arbitrary Binary Execution",
        "id": "a20391f8-76fb-437b-abc0-dba2df1952c6",
        "status": "test",
        "description": "Detects child processes of Microsoft.NodejsTools.PressAnyKey.exe that can be used to execute any other binary",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\Microsoft.NodejsTools.PressAnyKey.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential RDP Session Hijacking Activity",
        "id": "224f140f-3553-4cd1-af78-13d81bf9f7cc",
        "status": "test",
        "description": "Detects potential RDP Session Hijacking activity on Windows systems",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\tscon.exe', case=False) | OriginalFileName=='tscon.exe') & (IntegrityLevel==['System', 'S-1-16-16384'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Child Process Of SQL Server",
        "id": "869b9ca7-9ea2-4a5a-8325-e80e62f75445",
        "status": "test",
        "description": "Detects suspicious child processes of the SQLServer process. This could indicate potential RCE or SQL Injection.",
        "tags": [
            "attack.t1505.003",
            "attack.t1190",
            "attack.initial-access",
            "attack.persistence",
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\sqlservr.exe', case=False) & (Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\bitsadmin.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\netstat.exe', case=False) | Image.str.contains(r'\\\\nltest.exe', case=False) | Image.str.contains(r'\\\\ping.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\sh.exe', case=False) | Image.str.contains(r'\\\\systeminfo.exe', case=False) | Image.str.contains(r'\\\\tasklist.exe', case=False) | Image.str.contains(r'\\\\wsl.exe', case=False)) & ~ (ParentImage.str.contains(r'C:\\\\Program Files\\\\Microsoft SQL Server\\\\', case=False) & ParentImage.str.contains(r'DATEV_DBENGINE\\\\MSSQL\\\\Binn\\\\sqlservr.exe', case=False) & Image=='C:\\\\Windows\\\\System32\\\\cmd.exe' & CommandLine.str.contains(r'\"C:\\\\Windows\\\\system32\\\\cmd.exe\" ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Stop Windows Service Via PowerShell Stop-Service",
        "id": "c49c5062-0966-4170-9efd-9968c913a6cf",
        "status": "test",
        "description": "Detects the stopping of a Windows service via the PowerShell Cmdlet \"Stop-Service\"",
        "tags": [
            "attack.impact",
            "attack.t1489"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName==['PowerShell.EXE', 'pwsh.dll'] | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & CommandLine.str.contains(r'Stop-Service ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Download and Execution Cradles",
        "id": "85b0b087-eddf-4a2b-b033-d771fa2b9775",
        "status": "test",
        "description": "Detects PowerShell download and execution cradles.",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'.DownloadString(', case=False) | CommandLine.str.contains(r'.DownloadFile(', case=False) | CommandLine.str.contains(r'Invoke-WebRequest ', case=False) | CommandLine.str.contains(r'iwr ', case=False)) & (CommandLine.str.contains(r';iex $', case=False) | CommandLine.str.contains(r'| IEX', case=False) | CommandLine.str.contains(r'|IEX ', case=False) | CommandLine.str.contains(r'I`E`X', case=False) | CommandLine.str.contains(r'I`EX', case=False) | CommandLine.str.contains(r'IE`X', case=False) | CommandLine.str.contains(r'iex ', case=False) | CommandLine.str.contains(r'IEX (', case=False) | CommandLine.str.contains(r'IEX(', case=False) | CommandLine.str.contains(r'Invoke-Expression', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Code Execution via Pcwutl.dll",
        "id": "9386d78a-7207-4048-9c9f-a93a7c2d1c05",
        "status": "test",
        "description": "Detects launch of executable by calling the LaunchApplication function from pcwutl.dll library.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & CommandLine.str.contains(r'pcwutl', case=False) & CommandLine.str.contains(r'LaunchApplication', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Windows Service Tampering",
        "id": "ce72ef99-22f1-43d4-8695-419dcb5d9330",
        "status": "test",
        "description": "Detects the usage of binaries such as 'net', 'sc' or 'powershell' in order to stop, pause, disable or delete critical or important Windows services such as AV, Backup, etc. As seen being used in some ransomware scripts\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1489",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName==['net.exe', 'net1.exe', 'PowerShell.EXE', 'psservice.exe', 'pwsh.dll', 'sc.exe'] | Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\PsService.exe', case=False) | Image.str.contains(r'\\\\PsService64.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\sc.exe', case=False)) & (CommandLine.str.contains(r' delete ', case=False) | CommandLine.str.contains(r' pause ', case=False) | CommandLine.str.contains(r' stop ', case=False) | CommandLine.str.contains(r'Stop-Service ', case=False) | CommandLine.str.contains(r'Remove-Service ', case=False) | CommandLine.str.contains(r'config', case=False) & CommandLine.str.contains(r'start=disabled', case=False)) & (CommandLine.str.contains(r'143Svc', case=False) | CommandLine.str.contains(r'Acronis VSS Provider', case=False) | CommandLine.str.contains(r'AcronisAgent', case=False) | CommandLine.str.contains(r'AcrSch2Svc', case=False) | CommandLine.str.contains(r'AdobeARMservice', case=False) | CommandLine.str.contains(r'AHS Service', case=False) | CommandLine.str.contains(r'Antivirus', case=False) | CommandLine.str.contains(r'Apache4', case=False) | CommandLine.str.contains(r'ARSM', case=False) | CommandLine.str.contains(r'aswBcc', case=False) | CommandLine.str.contains(r'AteraAgent', case=False) | CommandLine.str.contains(r'Avast Business Console Client Antivirus Service', case=False) | CommandLine.str.contains(r'avast! Antivirus', case=False) | CommandLine.str.contains(r'AVG Antivirus', case=False) | CommandLine.str.contains(r'avgAdminClient', case=False) | CommandLine.str.contains(r'AvgAdminServer', case=False) | CommandLine.str.contains(r'AVP1', case=False) | CommandLine.str.contains(r'BackupExec', case=False) | CommandLine.str.contains(r'bedbg', case=False) | CommandLine.str.contains(r'BITS', case=False) | CommandLine.str.contains(r'BrokerInfrastructure', case=False) | CommandLine.str.contains(r'CASLicenceServer', case=False) | CommandLine.str.contains(r'CASWebServer', case=False) | CommandLine.str.contains(r'Client Agent 7.60', case=False) | CommandLine.str.contains(r'Core Browsing Protection', case=False) | CommandLine.str.contains(r'Core Mail Protection', case=False) | CommandLine.str.contains(r'Core Scanning Server', case=False) | CommandLine.str.contains(r'DCAgent', case=False) | CommandLine.str.contains(r'dwmrcs', case=False) | CommandLine.str.contains(r'EhttpSr', case=False) | CommandLine.str.contains(r'ekrn', case=False) | CommandLine.str.contains(r'Enterprise Client Service', case=False) | CommandLine.str.contains(r'epag', case=False) | CommandLine.str.contains(r'EPIntegrationService', case=False) | CommandLine.str.contains(r'EPProtectedService', case=False) | CommandLine.str.contains(r'EPRedline', case=False) | CommandLine.str.contains(r'EPSecurityService', case=False) | CommandLine.str.contains(r'EPUpdateService', case=False) | CommandLine.str.contains(r'EraserSvc11710', case=False) | CommandLine.str.contains(r'EsgShKernel', case=False) | CommandLine.str.contains(r'ESHASRV', case=False) | CommandLine.str.contains(r'FA_Scheduler', case=False) | CommandLine.str.contains(r'FirebirdGuardianDefaultInstance', case=False) | CommandLine.str.contains(r'FirebirdServerDefaultInstance', case=False) | CommandLine.str.contains(r'FontCache3.0.0.0', case=False) | CommandLine.str.contains(r'HealthTLService', case=False) | CommandLine.str.contains(r'hmpalertsvc', case=False) | CommandLine.str.contains(r'HMS', case=False) | CommandLine.str.contains(r'HostControllerService', case=False) | CommandLine.str.contains(r'hvdsvc', case=False) | CommandLine.str.contains(r'IAStorDataMgrSvc', case=False) | CommandLine.str.contains(r'IBMHPS', case=False) | CommandLine.str.contains(r'ibmspsvc', case=False) | CommandLine.str.contains(r'IISAdmin', case=False) | CommandLine.str.contains(r'IMANSVC', case=False) | CommandLine.str.contains(r'IMAP4Svc', case=False) | CommandLine.str.contains(r'instance2', case=False) | CommandLine.str.contains(r'KAVFS', case=False) | CommandLine.str.contains(r'KAVFSGT', case=False) | CommandLine.str.contains(r'kavfsslp', case=False) | CommandLine.str.contains(r'KeyIso', case=False) | CommandLine.str.contains(r'klbackupdisk', case=False) | CommandLine.str.contains(r'klbackupflt', case=False) | CommandLine.str.contains(r'klflt', case=False) | CommandLine.str.contains(r'klhk', case=False) | CommandLine.str.contains(r'KLIF', case=False) | CommandLine.str.contains(r'klim6', case=False) | CommandLine.str.contains(r'klkbdflt', case=False) | CommandLine.str.contains(r'klmouflt', case=False) | CommandLine.str.contains(r'klnagent', case=False) | CommandLine.str.contains(r'klpd', case=False) | CommandLine.str.contains(r'kltap', case=False) | CommandLine.str.contains(r'KSDE1.0.0', case=False) | CommandLine.str.contains(r'LogProcessorService', case=False) | CommandLine.str.contains(r'M8EndpointAgent', case=False) | CommandLine.str.contains(r'macmnsvc', case=False) | CommandLine.str.contains(r'masvc', case=False) | CommandLine.str.contains(r'MBAMService', case=False) | CommandLine.str.contains(r'MBCloudEA', case=False) | CommandLine.str.contains(r'MBEndpointAgent', case=False) | CommandLine.str.contains(r'McAfeeDLPAgentService', case=False) | CommandLine.str.contains(r'McAfeeEngineService', case=False) | CommandLine.str.contains(r'MCAFEEEVENTPARSERSRV', case=False) | CommandLine.str.contains(r'McAfeeFramework', case=False) | CommandLine.str.contains(r'MCAFEETOMCATSRV530', case=False) | CommandLine.str.contains(r'McShield', case=False) | CommandLine.str.contains(r'McTaskManager', case=False) | CommandLine.str.contains(r'mfefire', case=False) | CommandLine.str.contains(r'mfemms', case=False) | CommandLine.str.contains(r'mfevto', case=False) | CommandLine.str.contains(r'mfevtp', case=False) | CommandLine.str.contains(r'mfewc', case=False) | CommandLine.str.contains(r'MMS', case=False) | CommandLine.str.contains(r'mozyprobackup', case=False) | CommandLine.str.contains(r'mpssvc', case=False) | CommandLine.str.contains(r'MSComplianceAudit', case=False) | CommandLine.str.contains(r'MSDTC', case=False) | CommandLine.str.contains(r'MsDtsServer', case=False) | CommandLine.str.contains(r'MSExchange', case=False) | CommandLine.str.contains(r'msftesq1SPROO', case=False) | CommandLine.str.contains(r'msftesql$PROD', case=False) | CommandLine.str.contains(r'msftesql$SQLEXPRESS', case=False) | CommandLine.str.contains(r'MSOLAP$SQL_2008', case=False) | CommandLine.str.contains(r'MSOLAP$SYSTEM_BGC', case=False) | CommandLine.str.contains(r'MSOLAP$TPS', case=False) | CommandLine.str.contains(r'MSOLAP$TPSAMA', case=False) | CommandLine.str.contains(r'MSOLAPSTPS', case=False) | CommandLine.str.contains(r'MSOLAPSTPSAMA', case=False) | CommandLine.str.contains(r'mssecflt', case=False) | CommandLine.str.contains(r'MSSQ!I.SPROFXENGAGEMEHT', case=False) | CommandLine.str.contains(r'MSSQ0SHAREPOINT', case=False) | CommandLine.str.contains(r'MSSQ0SOPHOS', case=False) | CommandLine.str.contains(r'MSSQL', case=False) | CommandLine.str.contains(r'MSSQLFDLauncher$', case=False) | CommandLine.str.contains(r'MySQL', case=False) | CommandLine.str.contains(r'NanoServiceMain', case=False) | CommandLine.str.contains(r'NetMsmqActivator', case=False) | CommandLine.str.contains(r'NetPipeActivator', case=False) | CommandLine.str.contains(r'netprofm', case=False) | CommandLine.str.contains(r'NetTcpActivator', case=False) | CommandLine.str.contains(r'NetTcpPortSharing', case=False) | CommandLine.str.contains(r'ntrtscan', case=False) | CommandLine.str.contains(r'nvspwmi', case=False) | CommandLine.str.contains(r'ofcservice', case=False) | CommandLine.str.contains(r'Online Protection System', case=False) | CommandLine.str.contains(r'OracleClientCache80', case=False) | CommandLine.str.contains(r'OracleDBConsole', case=False) | CommandLine.str.contains(r'OracleMTSRecoveryService', case=False) | CommandLine.str.contains(r'OracleOraDb11g_home1', case=False) | CommandLine.str.contains(r'OracleService', case=False) | CommandLine.str.contains(r'OracleVssWriter', case=False) | CommandLine.str.contains(r'osppsvc', case=False) | CommandLine.str.contains(r'PandaAetherAgent', case=False) | CommandLine.str.contains(r'PccNTUpd', case=False) | CommandLine.str.contains(r'PDVFSService', case=False) | CommandLine.str.contains(r'POP3Svc', case=False) | CommandLine.str.contains(r'postgresql-x64-9.4', case=False) | CommandLine.str.contains(r'POVFSService', case=False) | CommandLine.str.contains(r'PSUAService', case=False) | CommandLine.str.contains(r'Quick Update Service', case=False) | CommandLine.str.contains(r'RepairService', case=False) | CommandLine.str.contains(r'ReportServer', case=False) | CommandLine.str.contains(r'ReportServer$', case=False) | CommandLine.str.contains(r'RESvc', case=False) | CommandLine.str.contains(r'RpcEptMapper', case=False) | CommandLine.str.contains(r'sacsvr', case=False) | CommandLine.str.contains(r'SamSs', case=False) | CommandLine.str.contains(r'SAVAdminService', case=False) | CommandLine.str.contains(r'SAVService', case=False) | CommandLine.str.contains(r'ScSecSvc', case=False) | CommandLine.str.contains(r'SDRSVC', case=False) | CommandLine.str.contains(r'SearchExchangeTracing', case=False) | CommandLine.str.contains(r'sense', case=False) | CommandLine.str.contains(r'SentinelAgent', case=False) | CommandLine.str.contains(r'SentinelHelperService', case=False) | CommandLine.str.contains(r'SepMasterService', case=False) | CommandLine.str.contains(r'ShMonitor', case=False) | CommandLine.str.contains(r'Smcinst', case=False) | CommandLine.str.contains(r'SmcService', case=False) | CommandLine.str.contains(r'SMTPSvc', case=False) | CommandLine.str.contains(r'SNAC', case=False) | CommandLine.str.contains(r'SntpService', case=False) | CommandLine.str.contains(r'Sophos', case=False) | CommandLine.str.contains(r'SQ1SafeOLRService', case=False) | CommandLine.str.contains(r'SQL Backups', case=False) | CommandLine.str.contains(r'SQL Server', case=False) | CommandLine.str.contains(r'SQLAgent', case=False) | CommandLine.str.contains(r'SQLANYs_Sage_FAS_Fixed_Assets', case=False) | CommandLine.str.contains(r'SQLBrowser', case=False) | CommandLine.str.contains(r'SQLsafe', case=False) | CommandLine.str.contains(r'SQLSERVERAGENT', case=False) | CommandLine.str.contains(r'SQLTELEMETRY', case=False) | CommandLine.str.contains(r'SQLWriter', case=False) | CommandLine.str.contains(r'SSISTELEMETRY130', case=False) | CommandLine.str.contains(r'SstpSvc', case=False) | CommandLine.str.contains(r'storflt', case=False) | CommandLine.str.contains(r'svcGenericHost', case=False) | CommandLine.str.contains(r'swc_service', case=False) | CommandLine.str.contains(r'swi_filter', case=False) | CommandLine.str.contains(r'swi_service', case=False) | CommandLine.str.contains(r'swi_update', case=False) | CommandLine.str.contains(r'Symantec', case=False) | CommandLine.str.contains(r'sysmon', case=False) | CommandLine.str.contains(r'TeamViewer', case=False) | CommandLine.str.contains(r'Telemetryserver', case=False) | CommandLine.str.contains(r'ThreatLockerService', case=False) | CommandLine.str.contains(r'TMBMServer', case=False) | CommandLine.str.contains(r'TmCCSF', case=False) | CommandLine.str.contains(r'TmFilter', case=False) | CommandLine.str.contains(r'TMiCRCScanService', case=False) | CommandLine.str.contains(r'tmlisten', case=False) | CommandLine.str.contains(r'TMLWCSService', case=False) | CommandLine.str.contains(r'TmPfw', case=False) | CommandLine.str.contains(r'TmPreFilter', case=False) | CommandLine.str.contains(r'TmProxy', case=False) | CommandLine.str.contains(r'TMSmartRelayService', case=False) | CommandLine.str.contains(r'tmusa', case=False) | CommandLine.str.contains(r'Tomcat', case=False) | CommandLine.str.contains(r'Trend Micro Deep Security Manager', case=False) | CommandLine.str.contains(r'TrueKey', case=False) | CommandLine.str.contains(r'UFNet', case=False) | CommandLine.str.contains(r'UI0Detect', case=False) | CommandLine.str.contains(r'UniFi', case=False) | CommandLine.str.contains(r'UTODetect', case=False) | CommandLine.str.contains(r'vds', case=False) | CommandLine.str.contains(r'Veeam', case=False) | CommandLine.str.contains(r'VeeamDeploySvc', case=False) | CommandLine.str.contains(r'Veritas System Recovery', case=False) | CommandLine.str.contains(r'vmic', case=False) | CommandLine.str.contains(r'VMTools', case=False) | CommandLine.str.contains(r'vmvss', case=False) | CommandLine.str.contains(r'VSApiNt', case=False) | CommandLine.str.contains(r'VSS', case=False) | CommandLine.str.contains(r'W3Svc', case=False) | CommandLine.str.contains(r'wbengine', case=False) | CommandLine.str.contains(r'WdNisSvc', case=False) | CommandLine.str.contains(r'WeanClOudSve', case=False) | CommandLine.str.contains(r'Weems JY', case=False) | CommandLine.str.contains(r'WinDefend', case=False) | CommandLine.str.contains(r'wmms', case=False) | CommandLine.str.contains(r'wozyprobackup', case=False) | CommandLine.str.contains(r'WPFFontCache_v0400', case=False) | CommandLine.str.contains(r'WRSVC', case=False) | CommandLine.str.contains(r'wsbexchange', case=False) | CommandLine.str.contains(r'WSearch', case=False) | CommandLine.str.contains(r'wscsvc', case=False) | CommandLine.str.contains(r'Zoolz 2 Service', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Add Windows Capability Via PowerShell Cmdlet",
        "id": "b36d01a3-ddaf-4804-be18-18a6247adfcd",
        "status": "test",
        "description": "Detects usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities. Notable capabilities could be \"OpenSSH\" and others.",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & CommandLine.str.contains(r'Add-WindowsCapability', case=False) & CommandLine.str.contains(r'OpenSSH.', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Php Inline Command Execution",
        "id": "d81871ef-5738-47ab-9797-7a9c90cd4bfb",
        "status": "test",
        "description": "Detects execution of php using the \"-r\" flag. This is could be used as a way to launch a reverse shell or execute live php code.",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\php.exe', case=False) | OriginalFileName=='php.exe') & CommandLine.str.contains(r' -r', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Koadic Execution",
        "id": "5cddf373-ef00-4112-ad72-960ac29bac34",
        "status": "test",
        "description": "Detects command line parameters used by Koadic hack tool",
        "tags": [
            "attack.execution",
            "attack.t1059.003",
            "attack.t1059.005",
            "attack.t1059.007"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & CommandLine.str.contains(r'/q', case=False) & CommandLine.str.contains(r'/c', case=False) & CommandLine.str.contains(r'chcp', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Internet Hosted WebDav Share Mount Via Net.EXE",
        "id": "7e6237fe-3ddb-438f-9381-9bf9de5af8d0",
        "status": "test",
        "description": "Detects when an internet hosted webdav share is mounted using the \"net.exe\" utility",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | OriginalFileName==['net.exe', 'net1.exe']) & CommandLine.str.contains(r' use ', case=False) & CommandLine.str.contains(r' http', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Defense Evasion Activity Via Emoji Usage In CommandLine - 1",
        "id": "4a30ac0c-b9d6-4e01-b71a-5f851bbf4259",
        "status": "test",
        "description": "Detects the usage of emojis in the command line, this could be a sign of potential defense evasion activity.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\ud83d\ude00', case=False) | CommandLine.str.contains(r'\ud83d\ude03', case=False) | CommandLine.str.contains(r'\ud83d\ude04', case=False) | CommandLine.str.contains(r'\ud83d\ude01', case=False) | CommandLine.str.contains(r'\ud83d\ude06', case=False) | CommandLine.str.contains(r'\ud83d\ude05', case=False) | CommandLine.str.contains(r'\ud83d\ude02', case=False) | CommandLine.str.contains(r'\ud83e\udd23', case=False) | CommandLine.str.contains(r'\ud83e\udd72', case=False) | CommandLine.str.contains(r'\ud83e\udd79', case=False) | CommandLine.str.contains(r'\u263a\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude0a', case=False) | CommandLine.str.contains(r'\ud83d\ude07', case=False) | CommandLine.str.contains(r'\ud83d\ude42', case=False) | CommandLine.str.contains(r'\ud83d\ude43', case=False) | CommandLine.str.contains(r'\ud83d\ude09', case=False) | CommandLine.str.contains(r'\ud83d\ude0c', case=False) | CommandLine.str.contains(r'\ud83d\ude0d', case=False) | CommandLine.str.contains(r'\ud83e\udd70', case=False) | CommandLine.str.contains(r'\ud83d\ude18', case=False) | CommandLine.str.contains(r'\ud83d\ude17', case=False) | CommandLine.str.contains(r'\ud83d\ude19', case=False) | CommandLine.str.contains(r'\ud83d\ude1a', case=False) | CommandLine.str.contains(r'\ud83d\ude0b', case=False) | CommandLine.str.contains(r'\ud83d\ude1b', case=False) | CommandLine.str.contains(r'\ud83d\ude1d', case=False) | CommandLine.str.contains(r'\ud83d\ude1c', case=False) | CommandLine.str.contains(r'\ud83e\udd2a', case=False) | CommandLine.str.contains(r'\ud83e\udd28', case=False) | CommandLine.str.contains(r'\ud83e\uddd0', case=False) | CommandLine.str.contains(r'\ud83e\udd13', case=False) | CommandLine.str.contains(r'\ud83d\ude0e', case=False) | CommandLine.str.contains(r'\ud83e\udd78', case=False) | CommandLine.str.contains(r'\ud83e\udd29', case=False) | CommandLine.str.contains(r'\ud83e\udd73', case=False) | CommandLine.str.contains(r'\ud83d\ude0f', case=False) | CommandLine.str.contains(r'\ud83d\ude12', case=False) | CommandLine.str.contains(r'\ud83d\ude1e', case=False) | CommandLine.str.contains(r'\ud83d\ude14', case=False) | CommandLine.str.contains(r'\ud83d\ude1f', case=False) | CommandLine.str.contains(r'\ud83d\ude15', case=False) | CommandLine.str.contains(r'\ud83d\ude41', case=False) | CommandLine.str.contains(r'\u2639\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude23', case=False) | CommandLine.str.contains(r'\ud83d\ude16', case=False) | CommandLine.str.contains(r'\ud83d\ude2b', case=False) | CommandLine.str.contains(r'\ud83d\ude29', case=False) | CommandLine.str.contains(r'\ud83e\udd7a', case=False) | CommandLine.str.contains(r'\ud83d\ude22', case=False) | CommandLine.str.contains(r'\ud83d\ude2d', case=False) | CommandLine.str.contains(r'\ud83d\ude2e\u200d\ud83d\udca8', case=False) | CommandLine.str.contains(r'\ud83d\ude24', case=False) | CommandLine.str.contains(r'\ud83d\ude20', case=False) | CommandLine.str.contains(r'\ud83d\ude21', case=False) | CommandLine.str.contains(r'\ud83e\udd2c', case=False) | CommandLine.str.contains(r'\ud83e\udd2f', case=False) | CommandLine.str.contains(r'\ud83d\ude33', case=False) | CommandLine.str.contains(r'\ud83e\udd75', case=False) | CommandLine.str.contains(r'\ud83e\udd76', case=False) | CommandLine.str.contains(r'\ud83d\ude31', case=False) | CommandLine.str.contains(r'\ud83d\ude28', case=False) | CommandLine.str.contains(r'\ud83d\ude30', case=False) | CommandLine.str.contains(r'\ud83d\ude25', case=False) | CommandLine.str.contains(r'\ud83d\ude13', case=False) | CommandLine.str.contains(r'\ud83e\udee3', case=False) | CommandLine.str.contains(r'\ud83e\udd17', case=False) | CommandLine.str.contains(r'\ud83e\udee1', case=False) | CommandLine.str.contains(r'\ud83e\udd14', case=False) | CommandLine.str.contains(r'\ud83e\udee2', case=False) | CommandLine.str.contains(r'\ud83e\udd2d', case=False) | CommandLine.str.contains(r'\ud83e\udd2b', case=False) | CommandLine.str.contains(r'\ud83e\udd25', case=False) | CommandLine.str.contains(r'\ud83d\ude36', case=False) | CommandLine.str.contains(r'\ud83d\ude36\u200d\ud83c\udf2b\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude10', case=False) | CommandLine.str.contains(r'\ud83d\ude11', case=False) | CommandLine.str.contains(r'\ud83d\ude2c', case=False) | CommandLine.str.contains(r'\ud83e\udee0', case=False) | CommandLine.str.contains(r'\ud83d\ude44', case=False) | CommandLine.str.contains(r'\ud83d\ude2f', case=False) | CommandLine.str.contains(r'\ud83d\ude26', case=False) | CommandLine.str.contains(r'\ud83d\ude27', case=False) | CommandLine.str.contains(r'\ud83d\ude2e', case=False) | CommandLine.str.contains(r'\ud83d\ude32', case=False) | CommandLine.str.contains(r'\ud83e\udd71', case=False) | CommandLine.str.contains(r'\ud83d\ude34', case=False) | CommandLine.str.contains(r'\ud83e\udd24', case=False) | CommandLine.str.contains(r'\ud83d\ude2a', case=False) | CommandLine.str.contains(r'\ud83d\ude35', case=False) | CommandLine.str.contains(r'\ud83d\ude35\u200d\ud83d\udcab', case=False) | CommandLine.str.contains(r'\ud83e\udee5', case=False) | CommandLine.str.contains(r'\ud83e\udd10', case=False) | CommandLine.str.contains(r'\ud83e\udd74', case=False) | CommandLine.str.contains(r'\ud83e\udd22', case=False) | CommandLine.str.contains(r'\ud83e\udd2e', case=False) | CommandLine.str.contains(r'\ud83e\udd27', case=False) | CommandLine.str.contains(r'\ud83d\ude37', case=False) | CommandLine.str.contains(r'\ud83e\udd12', case=False) | CommandLine.str.contains(r'\ud83e\udd15', case=False) | CommandLine.str.contains(r'\ud83e\udd11', case=False) | CommandLine.str.contains(r'\ud83e\udd20', case=False) | CommandLine.str.contains(r'\ud83d\ude08', case=False) | CommandLine.str.contains(r'\ud83d\udc7f', case=False) | CommandLine.str.contains(r'\ud83d\udc79', case=False) | CommandLine.str.contains(r'\ud83d\udc7a', case=False) | CommandLine.str.contains(r'\ud83e\udd21', case=False) | CommandLine.str.contains(r'\ud83d\udca9', case=False) | CommandLine.str.contains(r'\ud83d\udc7b', case=False) | CommandLine.str.contains(r'\ud83d\udc80', case=False) | CommandLine.str.contains(r'\u2620\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc7d', case=False) | CommandLine.str.contains(r'\ud83d\udc7e', case=False) | CommandLine.str.contains(r'\ud83e\udd16', case=False) | CommandLine.str.contains(r'\ud83c\udf83', case=False) | CommandLine.str.contains(r'\ud83d\ude3a', case=False) | CommandLine.str.contains(r'\ud83d\ude38', case=False) | CommandLine.str.contains(r'\ud83d\ude39', case=False) | CommandLine.str.contains(r'\ud83d\ude3b', case=False) | CommandLine.str.contains(r'\ud83d\ude3c', case=False) | CommandLine.str.contains(r'\ud83d\ude3d', case=False) | CommandLine.str.contains(r'\ud83d\ude40', case=False) | CommandLine.str.contains(r'\ud83d\ude3f', case=False) | CommandLine.str.contains(r'\ud83d\ude3e', case=False) | CommandLine.str.contains(r'\ud83d\udc4b', case=False) | CommandLine.str.contains(r'\ud83e\udd1a', case=False) | CommandLine.str.contains(r'\ud83d\udd90', case=False) | CommandLine.str.contains(r'\u270b', case=False) | CommandLine.str.contains(r'\ud83d\udd96', case=False) | CommandLine.str.contains(r'\ud83d\udc4c', case=False) | CommandLine.str.contains(r'\ud83e\udd0c', case=False) | CommandLine.str.contains(r'\ud83e\udd0f', case=False) | CommandLine.str.contains(r'\u270c\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd1e', case=False) | CommandLine.str.contains(r'\ud83e\udef0', case=False) | CommandLine.str.contains(r'\ud83e\udd1f', case=False) | CommandLine.str.contains(r'\ud83e\udd18', case=False) | CommandLine.str.contains(r'\ud83e\udd19', case=False) | CommandLine.str.contains(r'\ud83e\udef5', case=False) | CommandLine.str.contains(r'\ud83e\udef1', case=False) | CommandLine.str.contains(r'\ud83e\udef2', case=False) | CommandLine.str.contains(r'\ud83e\udef3', case=False) | CommandLine.str.contains(r'\ud83e\udef4', case=False) | CommandLine.str.contains(r'\ud83d\udc48', case=False) | CommandLine.str.contains(r'\ud83d\udc49', case=False) | CommandLine.str.contains(r'\ud83d\udc46', case=False) | CommandLine.str.contains(r'\ud83d\udd95', case=False) | CommandLine.str.contains(r'\ud83d\udc47', case=False) | CommandLine.str.contains(r'\u261d\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc4d', case=False) | CommandLine.str.contains(r'\ud83d\udc4e', case=False) | CommandLine.str.contains(r'\u270a', case=False) | CommandLine.str.contains(r'\ud83d\udc4a', case=False) | CommandLine.str.contains(r'\ud83e\udd1b', case=False) | CommandLine.str.contains(r'\ud83e\udd1c', case=False) | CommandLine.str.contains(r'\ud83d\udc4f', case=False) | CommandLine.str.contains(r'\ud83e\udef6', case=False) | CommandLine.str.contains(r'\ud83d\ude4c', case=False) | CommandLine.str.contains(r'\ud83d\udc50', case=False) | CommandLine.str.contains(r'\ud83e\udd32', case=False) | CommandLine.str.contains(r'\ud83e\udd1d', case=False) | CommandLine.str.contains(r'\ud83d\ude4f', case=False) | CommandLine.str.contains(r'\u270d\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udcaa', case=False) | CommandLine.str.contains(r'\ud83e\uddbe', case=False) | CommandLine.str.contains(r'\ud83e\uddb5', case=False) | CommandLine.str.contains(r'\ud83e\uddbf', case=False) | CommandLine.str.contains(r'\ud83e\uddb6', case=False) | CommandLine.str.contains(r'\ud83d\udc63', case=False) | CommandLine.str.contains(r'\ud83d\udc42', case=False) | CommandLine.str.contains(r'\ud83e\uddbb', case=False) | CommandLine.str.contains(r'\ud83d\udc43', case=False) | CommandLine.str.contains(r'\ud83e\udec0', case=False) | CommandLine.str.contains(r'\ud83e\udec1', case=False) | CommandLine.str.contains(r'\ud83e\udde0', case=False) | CommandLine.str.contains(r'\ud83e\uddb7', case=False) | CommandLine.str.contains(r'\ud83e\uddb4', case=False) | CommandLine.str.contains(r'\ud83d\udc40', case=False) | CommandLine.str.contains(r'\ud83d\udc41', case=False) | CommandLine.str.contains(r'\ud83d\udc45', case=False) | CommandLine.str.contains(r'\ud83d\udc44', case=False) | CommandLine.str.contains(r'\ud83e\udee6', case=False) | CommandLine.str.contains(r'\ud83d\udc8b', case=False) | CommandLine.str.contains(r'\ud83e\ude78', case=False) | CommandLine.str.contains(r'\ud83d\udc76', case=False) | CommandLine.str.contains(r'\ud83d\udc67', case=False) | CommandLine.str.contains(r'\ud83e\uddd2', case=False) | CommandLine.str.contains(r'\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc69', case=False) | CommandLine.str.contains(r'\ud83e\uddd1', case=False) | CommandLine.str.contains(r'\ud83d\udc68', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83d\udc71\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc71', case=False) | CommandLine.str.contains(r'\ud83d\udc71\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc75', case=False) | CommandLine.str.contains(r'\ud83e\uddd3', case=False) | CommandLine.str.contains(r'\ud83d\udc74', case=False) | CommandLine.str.contains(r'\ud83d\udc72', case=False) | CommandLine.str.contains(r'\ud83d\udc73\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc73', case=False) | CommandLine.str.contains(r'\ud83d\udc73\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd5', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc6e', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc77\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc77', case=False) | CommandLine.str.contains(r'\ud83d\udc77\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc82\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc82', case=False) | CommandLine.str.contains(r'\ud83d\udc82\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ufe0f\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ufe0f\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc70\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc70', case=False) | CommandLine.str.contains(r'\ud83d\udc70\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd35\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd35', case=False) | CommandLine.str.contains(r'\ud83e\udd35\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc78', case=False) | CommandLine.str.contains(r'\ud83e\udec5', case=False) | CommandLine.str.contains(r'\ud83e\udd34', case=False) | CommandLine.str.contains(r'\ud83e\udd77', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb8', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb9', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd36', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83c\udf84', case=False) | CommandLine.str.contains(r'\ud83c\udf85', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd9', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddd', case=False) | CommandLine.str.contains(r'\ud83e\udddd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddb', case=False) | CommandLine.str.contains(r'\ud83e\udddb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddf\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddf', case=False) | CommandLine.str.contains(r'\ud83e\udddf\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddde\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddde', case=False) | CommandLine.str.contains(r'\ud83e\uddde\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddc', case=False) | CommandLine.str.contains(r'\ud83e\udddc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddda\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddda', case=False) | CommandLine.str.contains(r'\ud83e\uddda\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcc', case=False) | CommandLine.str.contains(r'\ud83d\udc7c', case=False) | CommandLine.str.contains(r'\ud83e\udd30', case=False) | CommandLine.str.contains(r'\ud83e\udec4', case=False) | CommandLine.str.contains(r'\ud83e\udec3', case=False) | CommandLine.str.contains(r'\ud83e\udd31', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83d\ude47\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude47', case=False) | CommandLine.str.contains(r'\ud83d\ude47\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc81\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc81', case=False) | CommandLine.str.contains(r'\ud83d\udc81\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude45\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude45', case=False) | CommandLine.str.contains(r'\ud83d\ude45\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude46\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude46', case=False) | CommandLine.str.contains(r'\ud83d\ude46\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4b', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcf', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd26\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd26', case=False) | CommandLine.str.contains(r'\ud83e\udd26\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd37\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd37', case=False) | CommandLine.str.contains(r'\ud83e\udd37\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4e', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4d', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc87\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc87', case=False) | CommandLine.str.contains(r'\ud83d\udc87\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc86\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc86', case=False) | CommandLine.str.contains(r'\ud83d\udc86\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd6', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc85', case=False) | CommandLine.str.contains(r'\ud83d\udc83', case=False) | CommandLine.str.contains(r'\ud83d\udd7a', case=False) | CommandLine.str.contains(r'\ud83d\udc6f\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc6f', case=False) | CommandLine.str.contains(r'\ud83d\udc6f\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd74', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb6', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83e\uddce\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddce', case=False) | CommandLine.str.contains(r'\ud83e\uddce\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc3', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcd', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc6d', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1', case=False) | CommandLine.str.contains(r'\ud83d\udc6c', case=False) | CommandLine.str.contains(r'\ud83d\udc6b', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69', case=False) | CommandLine.str.contains(r'\ud83d\udc91', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc68', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69', case=False) | CommandLine.str.contains(r'\ud83d\udc8f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68', case=False) | CommandLine.str.contains(r'\ud83d\udc6a', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc67', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udc67', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66', case=False) | CommandLine.str.contains(r'\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67', case=False) | CommandLine.str.contains(r'\ud83d\udde3', case=False) | CommandLine.str.contains(r'\ud83d\udc64', case=False) | CommandLine.str.contains(r'\ud83d\udc65', case=False) | CommandLine.str.contains(r'\ud83e\udec2', case=False) | CommandLine.str.contains(r'\ud83e\uddf3', case=False) | CommandLine.str.contains(r'\ud83c\udf02', case=False) | CommandLine.str.contains(r'\u2602\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddf5', case=False) | CommandLine.str.contains(r'\ud83e\udea1', case=False) | CommandLine.str.contains(r'\ud83e\udea2', case=False) | CommandLine.str.contains(r'\ud83e\uddf6', case=False) | CommandLine.str.contains(r'\ud83d\udc53', case=False) | CommandLine.str.contains(r'\ud83d\udd76', case=False) | CommandLine.str.contains(r'\ud83e\udd7d', case=False) | CommandLine.str.contains(r'\ud83e\udd7c', case=False) | CommandLine.str.contains(r'\ud83e\uddba', case=False) | CommandLine.str.contains(r'\ud83d\udc54', case=False) | CommandLine.str.contains(r'\ud83d\udc55', case=False) | CommandLine.str.contains(r'\ud83d\udc56', case=False) | CommandLine.str.contains(r'\ud83e\udde3', case=False) | CommandLine.str.contains(r'\ud83e\udde4', case=False) | CommandLine.str.contains(r'\ud83e\udde5', case=False) | CommandLine.str.contains(r'\ud83e\udde6', case=False) | CommandLine.str.contains(r'\ud83d\udc57', case=False) | CommandLine.str.contains(r'\ud83d\udc58', case=False) | CommandLine.str.contains(r'\ud83e\udd7b', case=False) | CommandLine.str.contains(r'\ud83e\ude74', case=False) | CommandLine.str.contains(r'\ud83e\ude71', case=False) | CommandLine.str.contains(r'\ud83e\ude72', case=False) | CommandLine.str.contains(r'\ud83e\ude73', case=False) | CommandLine.str.contains(r'\ud83d\udc59', case=False) | CommandLine.str.contains(r'\ud83d\udc5a', case=False) | CommandLine.str.contains(r'\ud83d\udc5b', case=False) | CommandLine.str.contains(r'\ud83d\udc5c', case=False) | CommandLine.str.contains(r'\ud83d\udc5d', case=False) | CommandLine.str.contains(r'\ud83c\udf92', case=False) | CommandLine.str.contains(r'\ud83d\udc5e', case=False) | CommandLine.str.contains(r'\ud83d\udc5f', case=False) | CommandLine.str.contains(r'\ud83e\udd7e', case=False) | CommandLine.str.contains(r'\ud83e\udd7f', case=False) | CommandLine.str.contains(r'\ud83d\udc60', case=False) | CommandLine.str.contains(r'\ud83d\udc61', case=False) | CommandLine.str.contains(r'\ud83e\ude70', case=False) | CommandLine.str.contains(r'\ud83d\udc62', case=False) | CommandLine.str.contains(r'\ud83d\udc51', case=False) | CommandLine.str.contains(r'\ud83d\udc52', case=False) | CommandLine.str.contains(r'\ud83c\udfa9', case=False) | CommandLine.str.contains(r'\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83e\udde2', case=False) | CommandLine.str.contains(r'\u26d1', case=False) | CommandLine.str.contains(r'\ud83e\ude96', case=False) | CommandLine.str.contains(r'\ud83d\udc84', case=False) | CommandLine.str.contains(r'\ud83d\udc8d', case=False) | CommandLine.str.contains(r'\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83d\udc4b\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd1a\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udd90\ud83c\udffb', case=False) | CommandLine.str.contains(r'\u270b\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udd96\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc4c\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd0c\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd0f\ud83c\udffb', case=False) | CommandLine.str.contains(r'\u270c\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd1e\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef0\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd1f\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd18\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd19\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef5\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef2\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef3\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef4\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc48\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc49\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc46\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udd95\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc47\ud83c\udffb', case=False) | CommandLine.str.contains(r'\u261d\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc4d\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc4e\ud83c\udffb', case=False) | CommandLine.str.contains(r'\u270a\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc4a\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd1b\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd1c\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc4f\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef6\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\ude4c\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc50\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd32\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\ude4f\ud83c\udffb', case=False) | CommandLine.str.contains(r'\u270d\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udcaa\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddb5\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddb6\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc42\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddbb\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc43\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc76\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc67\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd2\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc66\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc75\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd3\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc74\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc72\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd5\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc78\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udec5\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd34\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd77\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd36\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf84', case=False) | CommandLine.str.contains(r'\ud83c\udf85\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc7c\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd30\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udec4\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udec3\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd31\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc83\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udd7a\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udd74\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc6d\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc6c\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc6b\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc7\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83c\udfc2\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udffb', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udec0\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udecc\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc4b\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd1a\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udd90\ud83c\udffc', case=False) | CommandLine.str.contains(r'\u270b\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udd96\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc4c\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd0c\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd0f\ud83c\udffc', case=False) | CommandLine.str.contains(r'\u270c\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd1e\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef0\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd1f\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd18\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd19\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef5\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef2\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef3\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef4\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc48\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc49\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc46\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udd95\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc47\ud83c\udffc', case=False) | CommandLine.str.contains(r'\u261d\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc4d\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc4e\ud83c\udffc', case=False) | CommandLine.str.contains(r'\u270a\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc4a\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd1b\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd1c\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc4f\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef6\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\ude4c\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc50\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd32\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\ude4f\ud83c\udffc', case=False) | CommandLine.str.contains(r'\u270d\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udcaa\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddb5\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddb6\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc42\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddbb\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc43\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc76\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc67\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd2\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc66\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc75\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd3\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc74\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc72\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd5\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc78\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udec5\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd34\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd77\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd36\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83c\udf84', case=False) | CommandLine.str.contains(r'\ud83c\udf85\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc7c\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd30\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udec4\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udec3\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd31\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udffc\u200d\u2640\ufe0f', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Mstsc.EXE Execution From Uncommon Parent",
        "id": "ff3b6b39-e765-42f9-bb2c-ea6761e0e0f6",
        "status": "test",
        "description": "Detects potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.",
        "tags": [
            "attack.lateral-movement"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\brave.exe', case=False) | ParentImage.str.contains(r'\\\\CCleanerBrowser.exe', case=False) | ParentImage.str.contains(r'\\\\chrome.exe', case=False) | ParentImage.str.contains(r'\\\\chromium.exe', case=False) | ParentImage.str.contains(r'\\\\firefox.exe', case=False) | ParentImage.str.contains(r'\\\\iexplore.exe', case=False) | ParentImage.str.contains(r'\\\\microsoftedge.exe', case=False) | ParentImage.str.contains(r'\\\\msedge.exe', case=False) | ParentImage.str.contains(r'\\\\opera.exe', case=False) | ParentImage.str.contains(r'\\\\vivaldi.exe', case=False) | ParentImage.str.contains(r'\\\\whale.exe', case=False) | ParentImage.str.contains(r'\\\\outlook.exe', case=False)) & (Image.str.contains(r'\\\\mstsc.exe', case=False) | OriginalFileName=='mstsc.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Download Via Bitsadmin To A Suspicious Target Folder",
        "id": "2ddef153-167b-4e89-86b6-757a9e65dcac",
        "status": "test",
        "description": "Detects usage of bitsadmin downloading a file to a suspicious target folder",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1197",
            "attack.s0190",
            "attack.t1036.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\bitsadmin.exe', case=False) | OriginalFileName=='bitsadmin.exe') & (CommandLine.str.contains(r' /transfer ', case=False) | CommandLine.str.contains(r' /create ', case=False) | CommandLine.str.contains(r' /addfile ', case=False)) & (CommandLine.str.contains(r':\\\\Perflogs', case=False) | CommandLine.str.contains(r':\\\\ProgramData\\\\', case=False) | CommandLine.str.contains(r':\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False) | CommandLine.str.contains(r'\\\\Desktop\\\\', case=False) | CommandLine.str.contains(r'%ProgramData%', case=False) | CommandLine.str.contains(r'%public%', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ImagingDevices Unusual Parent/Child Processes",
        "id": "f11f2808-adb4-46c0-802a-8660db50fa99",
        "status": "test",
        "description": "Detects unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity",
        "tags": [
            "attack.defense-evasion",
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((ParentImage.str.contains(r'\\\\WmiPrvSE.exe', case=False) | ParentImage.str.contains(r'\\\\svchost.exe', case=False) | ParentImage.str.contains(r'\\\\dllhost.exe', case=False)) & Image.str.contains(r'\\\\ImagingDevices.exe', case=False) | ParentImage.str.contains(r'\\\\ImagingDevices.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Application Whitelisting Bypass via Dnx.EXE",
        "id": "81ebd28b-9607-4478-bf06-974ed9d53ed7",
        "status": "test",
        "description": "Detects the execution of Dnx.EXE. The Dnx utility allows for the execution of C# code.\nAttackers might abuse this in order to bypass application whitelisting.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1027.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\dnx.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Suspicious Mofcomp Execution",
        "id": "1dd05363-104e-4b4a-b963-196a534b03a1",
        "status": "test",
        "description": "Detects execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the commandline.\nThe \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.\nAttackers abuse this utility to install malicious MOF scripts\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\mofcomp.exe', case=False) | OriginalFileName=='mofcomp.exe') & (ParentImage.str.contains(r'\\\\cmd.exe', case=False) | ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False) | ParentImage.str.contains(r'\\\\wsl.exe', case=False) | ParentImage.str.contains(r'\\\\wscript.exe', case=False) | ParentImage.str.contains(r'\\\\cscript.exe', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'\\\\WINDOWS\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'%temp%', case=False) | CommandLine.str.contains(r'%tmp%', case=False) | CommandLine.str.contains(r'%appdata%', case=False)) & ~ (ParentImage=='C:\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE.exe' & CommandLine.str.contains(r'C:\\\\Windows\\\\TEMP\\\\', case=False) & CommandLine.str.contains(r'.mof', case=False)) & ~ (CommandLine.str.contains(r'C:\\\\Windows\\\\TEMP\\\\', case=False) & CommandLine.str.contains(r'.mof', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Cookies Session Hijacking",
        "id": "5a6e1e16-07de-48d8-8aae-faa766c05e88",
        "status": "test",
        "description": "Detects execution of \"curl.exe\" with the \"-c\" flag in order to save cookie data.",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\curl.exe', case=False) | OriginalFileName=='curl.exe') & (CommandLine.str.contains(r'\\\\s-c\\\\s') | CommandLine.str.contains(r'--cookie-jar', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Import LDAP Data Interchange Format File Via Ldifde.EXE",
        "id": "6f535e01-ca1f-40be-ab8d-45b19c0c8b7f",
        "status": "test",
        "description": "Detects the execution of \"Ldifde.exe\" with the import flag \"-i\". The can be abused to include HTTP-based arguments which will allow the arbitrary download of files from a remote server.\n",
        "tags": [
            "attack.command-and-control",
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ldifde.exe', case=False) | OriginalFileName=='ldifde.exe') & CommandLine.str.contains(r'-i', case=False) & CommandLine.str.contains(r'-f', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Change PowerShell Policies to an Insecure Level",
        "id": "87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180",
        "status": "test",
        "description": "Detects changing the PowerShell script execution policy to a potentially insecure level using the \"-ExecutionPolicy\" flag.",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName==['PowerShell.EXE', 'pwsh.dll'] | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & (CommandLine.str.contains(r'-executionpolicy ', case=False) | CommandLine.str.contains(r' -ep ', case=False) | CommandLine.str.contains(r' -exec ', case=False)) & (CommandLine.str.contains(r'Bypass', case=False) | CommandLine.str.contains(r'Unrestricted', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Configuration And Service Reconnaissance Via Reg.EXE",
        "id": "970007b7-ce32-49d0-a4a4-fbef016950bd",
        "status": "test",
        "description": "Detects the usage of \"reg.exe\" in order to query reconnaissance information from the registry. Adversaries may interact with the Windows registry to gather information about credentials, the system, configuration, and installed software.",
        "tags": [
            "attack.discovery",
            "attack.t1012",
            "attack.t1007"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\reg.exe', case=False) | OriginalFileName=='reg.exe') & CommandLine.str.contains(r'query', case=False) & (CommandLine.str.contains(r'currentVersion\\\\windows', case=False) | CommandLine.str.contains(r'winlogon\\\\', case=False) | CommandLine.str.contains(r'currentVersion\\\\shellServiceObjectDelayLoad', case=False) | CommandLine.str.contains(r'currentVersion\\\\run', case=False) | CommandLine.str.contains(r'currentVersion\\\\policies\\\\explorer\\\\run', case=False) | CommandLine.str.contains(r'currentcontrolset\\\\services', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Csc.EXE Execution Form Potentially Suspicious Parent",
        "id": "b730a276-6b63-41b8-bcf8-55930c8fc6ee",
        "status": "test",
        "description": "Detects a potentially suspicious parent of \"csc.exe\", which could be a sign of payload delivery.",
        "tags": [
            "attack.execution",
            "attack.t1059.005",
            "attack.t1059.007",
            "attack.defense-evasion",
            "attack.t1218.005",
            "attack.t1027.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\csc.exe', case=False) | OriginalFileName=='csc.exe') & (ParentImage.str.contains(r'\\\\cscript.exe', case=False) | ParentImage.str.contains(r'\\\\excel.exe', case=False) | ParentImage.str.contains(r'\\\\mshta.exe', case=False) | ParentImage.str.contains(r'\\\\onenote.exe', case=False) | ParentImage.str.contains(r'\\\\outlook.exe', case=False) | ParentImage.str.contains(r'\\\\powerpnt.exe', case=False) | ParentImage.str.contains(r'\\\\winword.exe', case=False) | ParentImage.str.contains(r'\\\\wscript.exe', case=False) | (ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False)) & (ParentCommandLine.str.contains(r'-Encoded ', case=False) | ParentCommandLine.str.contains(r'FromBase64String', case=False)) | ParentCommandLine.str.contains(r'([Pp]rogram[Dd]ata|%([Ll]ocal)?[Aa]pp[Dd]ata%|\\\\\\\\[Aa]pp[Dd]ata\\\\\\\\([Ll]ocal([Ll]ow)?|[Rr]oaming))\\\\\\\\[^\\\\\\\\]{1,256}$') | ParentCommandLine.str.contains(r':\\\\PerfLogs\\\\', case=False) | ParentCommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | ParentCommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | ParentCommandLine.str.contains(r'\\\\Temporary Internet', case=False) | ParentCommandLine.str.contains(r':\\\\Users\\\\', case=False) & ParentCommandLine.str.contains(r'\\\\Favorites\\\\', case=False) | ParentCommandLine.str.contains(r':\\\\Users\\\\', case=False) & ParentCommandLine.str.contains(r'\\\\Favourites\\\\', case=False) | ParentCommandLine.str.contains(r':\\\\Users\\\\', case=False) & ParentCommandLine.str.contains(r'\\\\Contacts\\\\', case=False) | ParentCommandLine.str.contains(r':\\\\Users\\\\', case=False) & ParentCommandLine.str.contains(r'\\\\Pictures\\\\', case=False)) & ~ (ParentImage.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | ParentImage.str.contains(r'C:\\\\Program Files\\\\', case=False) | ParentImage=='C:\\\\Windows\\\\System32\\\\sdiagnhost.exe' | ParentImage=='C:\\\\Windows\\\\System32\\\\inetsrv\\\\w3wp.exe') & ~ (ParentImage=='C:\\\\ProgramData\\\\chocolatey\\\\choco.exe' | ParentCommandLine.str.contains(r'\\\\ProgramData\\\\Microsoft\\\\Windows Defender Advanced Threat Protection', case=False) | ParentCommandLine.str.contains(r'JwB7ACIAZgBhAGkAbABlAGQAIgA6AHQAcgB1AGUALAAiAG0AcwBnACIAOgAiAEEAbgBzAGkAYgBsAGUAIAByAGUAcQB1AGkAcgBlAHMAIABQAG8AdwBlAHIAUwBoAGUAbABsACAAdgAzAC4AMAAgAG8AcgAgAG4AZQB3AGUAcgAiAH0AJw', case=False) | ParentCommandLine.str.contains(r'cAewAiAGYAYQBpAGwAZQBkACIAOgB0AHIAdQBlACwAIgBtAHMAZwAiADoAIgBBAG4AcwBpAGIAbABlACAAcgBlAHEAdQBpAHIAZQBzACAAUABvAHcAZQByAFMAaABlAGwAbAAgAHYAMwAuADAAIABvAHIAIABuAGUAdwBlAHIAIgB9ACcA', case=False) | ParentCommandLine.str.contains(r'nAHsAIgBmAGEAaQBsAGUAZAAiADoAdAByAHUAZQAsACIAbQBzAGcAIgA6ACIAQQBuAHMAaQBiAGwAZQAgAHIAZQBxAHUAaQByAGUAcwAgAFAAbwB3AGUAcgBTAGgAZQBsAGwAIAB2ADMALgAwACAAbwByACAAbgBlAHcAZQByACIAfQAnA', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SharPersist Execution",
        "id": "26488ad0-f9fd-4536-876f-52fea846a2e4",
        "status": "test",
        "description": "Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms",
        "tags": [
            "attack.persistence",
            "attack.t1053"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SharPersist.exe', case=False) | Product=='SharPersist' | CommandLine.str.contains(r' -t schtask -c ', case=False) | CommandLine.str.contains(r' -t startupfolder -c ', case=False) | CommandLine.str.contains(r' -t reg -c ', case=False) & CommandLine.str.contains(r' -m add', case=False) | CommandLine.str.contains(r' -t service -c ', case=False) & CommandLine.str.contains(r' -m add', case=False) | CommandLine.str.contains(r' -t schtask -c ', case=False) & CommandLine.str.contains(r' -m add', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Non Interactive PowerShell Process Spawned",
        "id": "f4bbd493-b796-416e-bbf2-121235348529",
        "status": "test",
        "description": "Detects non-interactive PowerShell activity by looking at the \"powershell\" process with a non-user GUI process such as \"explorer.exe\" as a parent.",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & ~ (ParentImage.str.contains(r':\\\\Windows\\\\explorer.exe', case=False) | ParentImage.str.contains(r':\\\\Windows\\\\System32\\\\CompatTelRunner.exe', case=False) | ParentImage.str.contains(r':\\\\Windows\\\\SysWOW64\\\\explorer.exe', case=False) | ParentImage==':\\\\$WINDOWS.~BT\\\\Sources\\\\SetupHost.exe') & ~ (ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\Code.exe', case=False) & ParentCommandLine.str.contains(r' --ms-enable-electron-run-as-node ', case=False) | ParentImage.str.contains(r':\\\\Program Files\\\\WindowsApps\\\\Microsoft.WindowsTerminal_', case=False) & ParentImage.str.contains(r'\\\\WindowsTerminal.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Memory Dumping Activity Via LiveKD",
        "id": "a85f7765-698a-4088-afa0-ecfbf8d01fa4",
        "status": "test",
        "description": "Detects execution of LiveKD based on PE metadata or image name",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\livekd.exe', case=False) | Image.str.contains(r'\\\\livekd64.exe', case=False) | OriginalFileName=='livekd.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL File Download Via PowerShell Invoke-WebRequest",
        "id": "0f0450f3-8b47-441e-a31b-15a91dc243e2",
        "status": "test",
        "description": "Detects potential DLL files being downloaded using the PowerShell Invoke-WebRequest cmdlet",
        "tags": [
            "attack.command-and-control",
            "attack.execution",
            "attack.t1059.001",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'Invoke-WebRequest ', case=False) | CommandLine.str.contains(r'IWR ', case=False)) & CommandLine.str.contains(r'http', case=False) & CommandLine.str.contains(r'OutFile', case=False) & CommandLine.str.contains(r'.dll', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Download From File Sharing Domain Via Wget.EXE",
        "id": "a0d7e4d2-bede-4141-8896-bc6e237e977c",
        "status": "experimental",
        "description": "Detects potentially suspicious file downloads from file sharing domains using wget.exe",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wget.exe', case=False) | OriginalFileName=='wget.exe') & (CommandLine.str.contains(r'.githubusercontent.com', case=False) | CommandLine.str.contains(r'anonfiles.com', case=False) | CommandLine.str.contains(r'cdn.discordapp.com', case=False) | CommandLine.str.contains(r'ddns.net', case=False) | CommandLine.str.contains(r'dl.dropboxusercontent.com', case=False) | CommandLine.str.contains(r'ghostbin.co', case=False) | CommandLine.str.contains(r'glitch.me', case=False) | CommandLine.str.contains(r'gofile.io', case=False) | CommandLine.str.contains(r'hastebin.com', case=False) | CommandLine.str.contains(r'mediafire.com', case=False) | CommandLine.str.contains(r'mega.nz', case=False) | CommandLine.str.contains(r'onrender.com', case=False) | CommandLine.str.contains(r'pages.dev', case=False) | CommandLine.str.contains(r'paste.ee', case=False) | CommandLine.str.contains(r'pastebin.com', case=False) | CommandLine.str.contains(r'pastebin.pl', case=False) | CommandLine.str.contains(r'pastetext.net', case=False) | CommandLine.str.contains(r'pixeldrain.com', case=False) | CommandLine.str.contains(r'privatlab.com', case=False) | CommandLine.str.contains(r'privatlab.net', case=False) | CommandLine.str.contains(r'send.exploit.in', case=False) | CommandLine.str.contains(r'sendspace.com', case=False) | CommandLine.str.contains(r'storage.googleapis.com', case=False) | CommandLine.str.contains(r'storjshare.io', case=False) | CommandLine.str.contains(r'supabase.co', case=False) | CommandLine.str.contains(r'temp.sh', case=False) | CommandLine.str.contains(r'transfer.sh', case=False) | CommandLine.str.contains(r'trycloudflare.com', case=False) | CommandLine.str.contains(r'ufile.io', case=False) | CommandLine.str.contains(r'w3spaces.com', case=False) | CommandLine.str.contains(r'workers.dev', case=False)) & CommandLine.str.contains(r'http', case=False) & (CommandLine.str.contains(r'\\\\s-O\\\\s') | CommandLine.str.contains(r'--output-document', case=False)) & (CommandLine.str.contains(r'.ps1', case=False) | CommandLine.str.contains(r'.ps1\\'', case=False) | CommandLine.str.contains(r'.ps1\"', case=False) | CommandLine.str.contains(r'.dat', case=False) | CommandLine.str.contains(r'.dat\\'', case=False) | CommandLine.str.contains(r'.dat\"', case=False) | CommandLine.str.contains(r'.msi', case=False) | CommandLine.str.contains(r'.msi\\'', case=False) | CommandLine.str.contains(r'.msi\"', case=False) | CommandLine.str.contains(r'.bat', case=False) | CommandLine.str.contains(r'.bat\\'', case=False) | CommandLine.str.contains(r'.bat\"', case=False) | CommandLine.str.contains(r'.exe', case=False) | CommandLine.str.contains(r'.exe\\'', case=False) | CommandLine.str.contains(r'.exe\"', case=False) | CommandLine.str.contains(r'.vbs', case=False) | CommandLine.str.contains(r'.vbs\\'', case=False) | CommandLine.str.contains(r'.vbs\"', case=False) | CommandLine.str.contains(r'.vbe', case=False) | CommandLine.str.contains(r'.vbe\\'', case=False) | CommandLine.str.contains(r'.vbe\"', case=False) | CommandLine.str.contains(r'.hta', case=False) | CommandLine.str.contains(r'.hta\\'', case=False) | CommandLine.str.contains(r'.hta\"', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.dll\\'', case=False) | CommandLine.str.contains(r'.dll\"', case=False) | CommandLine.str.contains(r'.psm1', case=False) | CommandLine.str.contains(r'.psm1\\'', case=False) | CommandLine.str.contains(r'.psm1\"', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Download Using Notepad++ GUP Utility",
        "id": "44143844-0631-49ab-97a0-96387d6b2d7c",
        "status": "test",
        "description": "Detects execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files.",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\GUP.exe', case=False) | OriginalFileName=='gup.exe') & CommandLine.str.contains(r' -unzipTo ', case=False) & CommandLine.str.contains(r'http', case=False) & ~ ParentImage.str.contains(r'\\\\notepad++.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Base64 Encoded WMI Classes",
        "id": "1816994b-42e1-4fb1-afd2-134d88184f71",
        "status": "test",
        "description": "Detects calls to base64 encoded WMI class such as \"Win32_ShadowCopy\", \"Win32_ScheduledJob\", etc.",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r'VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQ', case=False) | CommandLine.str.contains(r'cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkA', case=False) | CommandLine.str.contains(r'XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5A', case=False) | CommandLine.str.contains(r'V2luMzJfU2hhZG93Y29we', case=False) | CommandLine.str.contains(r'dpbjMyX1NoYWRvd2NvcH', case=False) | CommandLine.str.contains(r'XaW4zMl9TaGFkb3djb3B5', case=False) | CommandLine.str.contains(r'VwBpAG4AMwAyAF8AUwBjAGgAZQBkAHUAbABlAGQASgBvAGIA', case=False) | CommandLine.str.contains(r'cAaQBuADMAMgBfAFMAYwBoAGUAZAB1AGwAZQBkAEoAbwBiA', case=False) | CommandLine.str.contains(r'XAGkAbgAzADIAXwBTAGMAaABlAGQAdQBsAGUAZABKAG8AYg', case=False) | CommandLine.str.contains(r'V2luMzJfU2NoZWR1bGVkSm9i', case=False) | CommandLine.str.contains(r'dpbjMyX1NjaGVkdWxlZEpvY', case=False) | CommandLine.str.contains(r'XaW4zMl9TY2hlZHVsZWRKb2', case=False) | CommandLine.str.contains(r'VwBpAG4AMwAyAF8AUAByAG8AYwBlAHMAcw', case=False) | CommandLine.str.contains(r'cAaQBuADMAMgBfAFAAcgBvAGMAZQBzAHMA', case=False) | CommandLine.str.contains(r'XAGkAbgAzADIAXwBQAHIAbwBjAGUAcwBzA', case=False) | CommandLine.str.contains(r'V2luMzJfUHJvY2Vzc', case=False) | CommandLine.str.contains(r'dpbjMyX1Byb2Nlc3', case=False) | CommandLine.str.contains(r'XaW4zMl9Qcm9jZXNz', case=False) | CommandLine.str.contains(r'VwBpAG4AMwAyAF8AVQBzAGUAcgBBAGMAYwBvAHUAbgB0A', case=False) | CommandLine.str.contains(r'cAaQBuADMAMgBfAFUAcwBlAHIAQQBjAGMAbwB1AG4AdA', case=False) | CommandLine.str.contains(r'XAGkAbgAzADIAXwBVAHMAZQByAEEAYwBjAG8AdQBuAHQA', case=False) | CommandLine.str.contains(r'V2luMzJfVXNlckFjY291bn', case=False) | CommandLine.str.contains(r'dpbjMyX1VzZXJBY2NvdW50', case=False) | CommandLine.str.contains(r'XaW4zMl9Vc2VyQWNjb3Vud', case=False) | CommandLine.str.contains(r'VwBpAG4AMwAyAF8ATABvAGcAZwBlAGQATwBuAFUAcwBlAHIA', case=False) | CommandLine.str.contains(r'cAaQBuADMAMgBfAEwAbwBnAGcAZQBkAE8AbgBVAHMAZQByA', case=False) | CommandLine.str.contains(r'XAGkAbgAzADIAXwBMAG8AZwBnAGUAZABPAG4AVQBzAGUAcg', case=False) | CommandLine.str.contains(r'V2luMzJfTG9nZ2VkT25Vc2Vy', case=False) | CommandLine.str.contains(r'dpbjMyX0xvZ2dlZE9uVXNlc', case=False) | CommandLine.str.contains(r'XaW4zMl9Mb2dnZWRPblVzZX', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Using SettingSyncHost.exe as LOLBin",
        "id": "b2ddd389-f676-4ac4-845a-e00781a48e5f",
        "status": "test",
        "description": "Detects using SettingSyncHost.exe to run hijacked binary",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1574.008"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ~ (Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False)) & ParentCommandLine.str.contains(r'cmd.exe /c', case=False) & ParentCommandLine.str.contains(r'RoamDiag.cmd', case=False) & ParentCommandLine.str.contains(r'-outputpath', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Taskmgr as LOCAL_SYSTEM",
        "id": "9fff585c-c33e-4a86-b3cd-39312079a65f",
        "status": "test",
        "description": "Detects the creation of taskmgr.exe process in context of LOCAL_SYSTEM",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False)) & Image.str.contains(r'\\\\taskmgr.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Allow Service Access Using Security Descriptor Tampering Via Sc.EXE",
        "id": "6c8fbee5-dee8-49bc-851d-c3142d02aa47",
        "status": "test",
        "description": "Detects suspicious DACL modifications to allow access to a service from a suspicious trustee. This can be used to override access restrictions set by previous ACLs.",
        "tags": [
            "attack.persistence",
            "attack.t1543.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\sc.exe', case=False) | OriginalFileName=='sc.exe') & CommandLine.str.contains(r'sdset', case=False) & CommandLine.str.contains(r'A;', case=False) & (CommandLine.str.contains(r';IU', case=False) | CommandLine.str.contains(r';SU', case=False) | CommandLine.str.contains(r';BA', case=False) | CommandLine.str.contains(r';SY', case=False) | CommandLine.str.contains(r';WD', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious PowerShell Parent Process",
        "id": "754ed792-634f-40ae-b3bc-e0448d33f695",
        "status": "test",
        "description": "Detects a suspicious or uncommon parent processes of PowerShell",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'tomcat', case=False) | ParentImage.str.contains(r'\\\\amigo.exe', case=False) | ParentImage.str.contains(r'\\\\browser.exe', case=False) | ParentImage.str.contains(r'\\\\chrome.exe', case=False) | ParentImage.str.contains(r'\\\\firefox.exe', case=False) | ParentImage.str.contains(r'\\\\httpd.exe', case=False) | ParentImage.str.contains(r'\\\\iexplore.exe', case=False) | ParentImage.str.contains(r'\\\\jbosssvc.exe', case=False) | ParentImage.str.contains(r'\\\\microsoftedge.exe', case=False) | ParentImage.str.contains(r'\\\\microsoftedgecp.exe', case=False) | ParentImage.str.contains(r'\\\\MicrosoftEdgeSH.exe', case=False) | ParentImage.str.contains(r'\\\\mshta.exe', case=False) | ParentImage.str.contains(r'\\\\nginx.exe', case=False) | ParentImage.str.contains(r'\\\\outlook.exe', case=False) | ParentImage.str.contains(r'\\\\php-cgi.exe', case=False) | ParentImage.str.contains(r'\\\\regsvr32.exe', case=False) | ParentImage.str.contains(r'\\\\rundll32.exe', case=False) | ParentImage.str.contains(r'\\\\safari.exe', case=False) | ParentImage.str.contains(r'\\\\services.exe', case=False) | ParentImage.str.contains(r'\\\\sqlagent.exe', case=False) | ParentImage.str.contains(r'\\\\sqlserver.exe', case=False) | ParentImage.str.contains(r'\\\\sqlservr.exe', case=False) | ParentImage.str.contains(r'\\\\vivaldi.exe', case=False) | ParentImage.str.contains(r'\\\\w3wp.exe', case=False)) & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | CommandLine.str.contains(r'/c powershell', case=False) | CommandLine.str.contains(r'/c pwsh', case=False) | Description=='Windows PowerShell' | Product=='PowerShell Core 6' | OriginalFileName==['PowerShell.EXE', 'pwsh.dll'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Link.EXE Parent Process",
        "id": "6e968eb1-5f05-4dac-94e9-fd0c5cb49fd6",
        "status": "test",
        "description": "Detects an uncommon parent process of \"LINK.EXE\".\nLink.EXE in Microsoft incremental linker. Its a utility usually bundled with Visual Studio installation.\nMultiple utilities often found in the same folder (editbin.exe, dumpbin.exe, lib.exe, etc) have a hardcode call to the \"LINK.EXE\" binary without checking its validity.\nThis would allow an attacker to sideload any binary with the name \"link.exe\" if one of the aforementioned tools get executed from a different location.\nBy filtering the known locations of such utilities we can spot uncommon parent process of LINK.EXE that might be suspicious or malicious.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\link.exe', case=False) & CommandLine.str.contains(r'LINK /', case=False) & ~ ((ParentImage.str.contains(r'C:\\\\Program Files\\\\Microsoft Visual Studio\\\\', case=False) | ParentImage.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\', case=False)) & (ParentImage.str.contains(r'\\\\VC\\\\bin\\\\', case=False) | ParentImage.str.contains(r'\\\\VC\\\\Tools\\\\', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Xwizard.EXE Execution From Non-Default Location",
        "id": "193d5ccd-6f59-40c6-b5b0-8e32d5ddd3d1",
        "status": "test",
        "description": "Detects the execution of Xwizard tool from a non-default directory.\nWhen executed from a non-default directory, this utility can be abused in order to side load a custom version of \"xwizards.dll\".\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\xwizard.exe', case=False) | OriginalFileName=='xwizard.exe') & ~ (Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - NetSupport Execution From Unusual Location",
        "id": "37e8d358-6408-4853-82f4-98333fca7014",
        "status": "test",
        "description": "Detects execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\\Program Files')",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\client32.exe', case=False) | Product.str.contains(r'NetSupport Remote Control', case=False) | OriginalFileName.str.contains(r'client32.exe', case=False) | Hashes.str.contains(r'IMPHASH=a9d50692e95b79723f3e76fcf70d023e', case=False)) & ~ (Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Cab File Extraction Via Wusa.EXE From Potentially Suspicious Paths",
        "id": "c74c0390-3e20-41fd-a69a-128f0275a5ea",
        "status": "test",
        "description": "Detects the execution of the \"wusa.exe\" (Windows Update Standalone Installer) utility to extract \".cab\" files using the \"/extract\" argument from potentially suspicious paths.\n",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\wusa.exe', case=False) & CommandLine.str.contains(r'/extract:', case=False) & (CommandLine.str.contains(r':\\\\PerfLogs\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Appdata\\\\Local\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote CHM File Download/Execution Via HH.EXE",
        "id": "f57c58b3-ee69-4ef5-9041-455bf39aaa89",
        "status": "test",
        "description": "Detects the usage of \"hh.exe\" to execute/download remotely hosted \".chm\" files.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='HH.exe' | Image.str.contains(r'\\\\hh.exe', case=False)) & (CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False) | CommandLine.str.contains(r'\\\\\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon AddinUtil.EXE CommandLine Execution",
        "id": "4f2cd9b6-4a17-440f-bb2a-687abb65993a",
        "status": "test",
        "description": "Detects execution of the Add-In deployment cache updating utility (AddInutil.exe) with uncommon Addinroot or Pipelineroot paths. An adversary may execute AddinUtil.exe with uncommon Addinroot/Pipelineroot paths that point to the adversaries Addins.Store payload.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\addinutil.exe', case=False) | OriginalFileName=='AddInUtil.exe') & (CommandLine.str.contains(r'-AddInRoot:', case=False) | CommandLine.str.contains(r'-PipelineRoot:', case=False)) & ~ (CommandLine.str.contains(r'-AddInRoot:\"C:\\\\Program Files (x86)\\\\Common Files\\\\Microsoft Shared\\\\VSTA', case=False) | CommandLine.str.contains(r'-AddInRoot:C:\\\\Program Files (x86)\\\\Common Files\\\\Microsoft Shared\\\\VSTA', case=False) | CommandLine.str.contains(r'-PipelineRoot:\"C:\\\\Program Files (x86)\\\\Common Files\\\\Microsoft Shared\\\\VSTA', case=False) | CommandLine.str.contains(r'-PipelineRoot:C:\\\\Program Files (x86)\\\\Common Files\\\\Microsoft Shared\\\\VSTA', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SysmonEOP Execution",
        "id": "8a7e90c5-fe6e-45dc-889e-057fe4378bd9",
        "status": "test",
        "description": "Detects the execution of the PoC that can be used to exploit Sysmon CVE-2022-41120",
        "tags": [
            "cve.2022-41120",
            "attack.t1068",
            "attack.privilege-escalation"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SysmonEOP.exe', case=False) | Hashes.str.contains(r'IMPHASH=22F4089EB8ABA31E1BB162C6D9BF72E5', case=False) | Hashes.str.contains(r'IMPHASH=5123FA4C4384D431CD0D893EEB49BBEC', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ETW Trace Evasion Activity",
        "id": "a238b5d0-ce2d-4414-a676-7a531b3d13d6",
        "status": "test",
        "description": "Detects command line activity that tries to clear or disable any ETW trace log which could be a sign of logging evasion.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070",
            "attack.t1562.006",
            "car.2016-04-002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'cl', case=False) & CommandLine.str.contains(r'/Trace', case=False) | CommandLine.str.contains(r'clear-log', case=False) & CommandLine.str.contains(r'/Trace', case=False) | CommandLine.str.contains(r'sl', case=False) & CommandLine.str.contains(r'/e:false', case=False) | CommandLine.str.contains(r'set-log', case=False) & CommandLine.str.contains(r'/e:false', case=False) | CommandLine.str.contains(r'logman', case=False) & CommandLine.str.contains(r'update', case=False) & CommandLine.str.contains(r'trace', case=False) & CommandLine.str.contains(r'--p', case=False) & CommandLine.str.contains(r'-ets', case=False) | CommandLine.str.contains(r'Remove-EtwTraceProvider', case=False) | CommandLine.str.contains(r'Set-EtwTraceProvider', case=False) & CommandLine.str.contains(r'0x11', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Import PowerShell Modules From Suspicious Directories - ProcCreation",
        "id": "c31364f7-8be6-4b77-8483-dd2b5a7b69a3",
        "status": "test",
        "description": "Detects powershell scripts that import modules from suspicious directories",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'Import-Module \"$Env:Temp\\\\', case=False) | CommandLine.str.contains(r'Import-Module \\'$Env:Temp\\\\', case=False) | CommandLine.str.contains(r'Import-Module $Env:Temp\\\\', case=False) | CommandLine.str.contains(r'Import-Module \"$Env:Appdata\\\\', case=False) | CommandLine.str.contains(r'Import-Module \\'$Env:Appdata\\\\', case=False) | CommandLine.str.contains(r'Import-Module $Env:Appdata\\\\', case=False) | CommandLine.str.contains(r'Import-Module C:\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'ipmo \"$Env:Temp\\\\', case=False) | CommandLine.str.contains(r'ipmo \\'$Env:Temp\\\\', case=False) | CommandLine.str.contains(r'ipmo $Env:Temp\\\\', case=False) | CommandLine.str.contains(r'ipmo \"$Env:Appdata\\\\', case=False) | CommandLine.str.contains(r'ipmo \\'$Env:Appdata\\\\', case=False) | CommandLine.str.contains(r'ipmo $Env:Appdata\\\\', case=False) | CommandLine.str.contains(r'ipmo C:\\\\Users\\\\Public\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sensitive File Recovery From Backup Via Wbadmin.EXE",
        "id": "84972c80-251c-4c3a-9079-4f00aad93938",
        "status": "experimental",
        "description": "Detects the dump of highly sensitive files such as \"NTDS.DIT\" and \"SECURITY\" hive.\nAttackers can leverage the \"wbadmin\" utility in order to dump sensitive files that might contain credential or sensitive information.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1003.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wbadmin.exe', case=False) | OriginalFileName=='WBADMIN.EXE') & CommandLine.str.contains(r' recovery', case=False) & CommandLine.str.contains(r'recoveryTarget', case=False) & CommandLine.str.contains(r'itemtype:File', case=False) & (CommandLine.str.contains(r'\\\\config\\\\SAM', case=False) | CommandLine.str.contains(r'\\\\config\\\\SECURITY', case=False) | CommandLine.str.contains(r'\\\\config\\\\SYSTEM', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\NTDS\\\\NTDS.dit', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Java Running with Remote Debugging",
        "id": "8f88e3f6-2a49-48f5-a5c4-2f7eedf78710",
        "status": "test",
        "description": "Detects a JAVA process running with remote debugging allowing more than just localhost to connect",
        "tags": [
            "attack.t1203",
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'transport=dt_socket,address=', case=False) & (CommandLine.str.contains(r'jre1.', case=False) | CommandLine.str.contains(r'jdk1.', case=False)) & ~ (CommandLine.str.contains(r'address=127.0.0.1', case=False) | CommandLine.str.contains(r'address=localhost', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using Event Viewer RecentViews",
        "id": "30fc8de7-d833-40c4-96b6-28319fbc4f6c",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using Event Viewer RecentViews",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\\\\Event Viewer\\\\RecentViews', case=False) | CommandLine.str.contains(r'\\\\EventV~1\\\\RecentViews', case=False)) & CommandLine.str.contains(r'>', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Response File Execution Via Odbcconf.EXE",
        "id": "5f03babb-12db-4eec-8c82-7b4cb5580868",
        "status": "test",
        "description": "Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.008"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\odbcconf.exe', case=False) | OriginalFileName=='odbcconf.exe') & (CommandLine.str.contains(r' -f ', case=False) | CommandLine.str.contains(r' /f ', case=False) | CommandLine.str.contains(r' \u2013f ', case=False) | CommandLine.str.contains(r' \u2014f ', case=False) | CommandLine.str.contains(r' \u2015f ', case=False)) & CommandLine.str.contains(r'.rsp', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Arbitrary Code Execution Via Node.EXE",
        "id": "6640f31c-01ad-49b5-beb5-83498a5cd8bd",
        "status": "test",
        "description": "Detects the execution node.exe which is shipped with multiple software such as VMware, Adobe...etc. In order to execute arbitrary code. For example to establish reverse shell as seen in Log4j attacks...etc",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\node.exe', case=False) & (CommandLine.str.contains(r' -e ', case=False) | CommandLine.str.contains(r' --eval ', case=False)) & CommandLine.str.contains(r'.exec(', case=False) & CommandLine.str.contains(r'net.socket', case=False) & CommandLine.str.contains(r'.connect', case=False) & CommandLine.str.contains(r'child_process', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential MsiExec Masquerading",
        "id": "e22a6eb2-f8a5-44b5-8b44-a2dbd47b1144",
        "status": "test",
        "description": "Detects the execution of msiexec.exe from an uncommon directory",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\msiexec.exe', case=False) | OriginalFileName=='\\\\msiexec.exe') & ~ (Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CobaltStrike Load by Rundll32",
        "id": "ae9c6a7c-9521-42a6-915e-5aaa8689d529",
        "status": "test",
        "description": "Rundll32 can be use by Cobalt Strike with StartW function to load DLLs from the command line.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE' | CommandLine.str.contains(r'rundll32.exe', case=False) | CommandLine.str.contains(r'rundll32 ', case=False)) & CommandLine.str.contains(r'.dll', case=False) & (CommandLine.str.contains(r' StartW', case=False) | CommandLine.str.contains(r',StartW', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Operator Bloopers Cobalt Strike Commands",
        "id": "647c7b9e-d784-4fda-b9a0-45c565a7b729",
        "status": "test",
        "description": "Detects use of Cobalt Strike commands accidentally entered in the CMD shell",
        "tags": [
            "attack.execution",
            "attack.t1059.003",
            "stp.1u"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='Cmd.Exe' | Image.str.contains(r'\\\\cmd.exe', case=False)) & (CommandLine.str.contains(r'cmd ', case=False) | CommandLine.str.contains(r'cmd.exe', case=False) | CommandLine.str.contains(r'c:\\\\windows\\\\system32\\\\cmd.exe', case=False)) & (CommandLine.str.contains(r'psinject', case=False) | CommandLine.str.contains(r'spawnas', case=False) | CommandLine.str.contains(r'make_token', case=False) | CommandLine.str.contains(r'remote-exec', case=False) | CommandLine.str.contains(r'rev2self', case=False) | CommandLine.str.contains(r'dcsync', case=False) | CommandLine.str.contains(r'logonpasswords', case=False) | CommandLine.str.contains(r'execute-assembly', case=False) | CommandLine.str.contains(r'getsystem', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Service DACL Modification Via Set-Service Cmdlet",
        "id": "a95b9b42-1308-4735-a1af-abb1c5e6f5ac",
        "status": "test",
        "description": "Detects suspicious DACL modifications via the \"Set-Service\" cmdlet using the \"SecurityDescriptorSddl\" flag (Only available with PowerShell 7) that can be used to hide services or make them unstopable",
        "tags": [
            "attack.persistence",
            "attack.t1543.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName=='pwsh.dll') & (CommandLine.str.contains(r'-SecurityDescriptorSddl ', case=False) | CommandLine.str.contains(r'-sd ', case=False)) & CommandLine.str.contains(r'Set-Service ', case=False) & CommandLine.str.contains(r'D;;', case=False) & (CommandLine.str.contains(r';;;IU', case=False) | CommandLine.str.contains(r';;;SU', case=False) | CommandLine.str.contains(r';;;BA', case=False) | CommandLine.str.contains(r';;;SY', case=False) | CommandLine.str.contains(r';;;WD', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LSASS Process Reconnaissance Via Findstr.EXE",
        "id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
        "status": "experimental",
        "description": "Detects findstring commands that include the keyword lsass, which indicates recon actviity for the LSASS process PID",
        "tags": [
            "attack.credential-access",
            "attack.t1552.006"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\find.exe', case=False) | Image.str.contains(r'\\\\findstr.exe', case=False) | OriginalFileName==['FIND.EXE', 'FINDSTR.EXE']) & CommandLine.str.contains(r'lsass', case=False) | CommandLine.str.contains(r' -i \"lsass', case=False) | CommandLine.str.contains(r' /i \"lsass', case=False) | CommandLine.str.contains(r' \u2013i \"lsass', case=False) | CommandLine.str.contains(r' \u2014i \"lsass', case=False) | CommandLine.str.contains(r' \u2015i \"lsass', case=False) | CommandLine.str.contains(r' -i lsass.exe', case=False) | CommandLine.str.contains(r' /i lsass.exe', case=False) | CommandLine.str.contains(r' \u2013i lsass.exe', case=False) | CommandLine.str.contains(r' \u2014i lsass.exe', case=False) | CommandLine.str.contains(r' \u2015i lsass.exe', case=False) | CommandLine.str.contains(r'findstr \"lsass', case=False) | CommandLine.str.contains(r'findstr lsass', case=False) | CommandLine.str.contains(r'findstr.exe \"lsass', case=False) | CommandLine.str.contains(r'findstr.exe lsass', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Run Once Task Execution as Configured in Registry",
        "id": "198effb6-6c98-4d0c-9ea3-451fa143c45c",
        "status": "test",
        "description": "This rule detects the execution of Run Once task as configured in the registry",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\runonce.exe', case=False) | Description=='Run Once Wrapper') & (CommandLine.str.contains(r'/AlternateShellStartup', case=False) | CommandLine.str.contains(r'/r', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Child Process of KeyScrambler.exe",
        "id": "ca5583e9-8f80-46ac-ab91-7f314d13b984",
        "status": "experimental",
        "description": "Detects potentially suspicious child processes of KeyScrambler.exe",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1203",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\KeyScrambler.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | OriginalFileName==['Cmd.Exe', 'cscript.exe', 'mshta.exe', 'PowerShell.EXE', 'pwsh.dll', 'regsvr32.exe', 'RUNDLL32.EXE', 'wscript.exe'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Msiexec Quiet Installation",
        "id": "79a87aa6-e4bd-42fc-a5bb-5e6fbdcd62f5",
        "status": "test",
        "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.007"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\msiexec.exe', case=False) | OriginalFileName=='msiexec.exe') & (CommandLine.str.contains(r'-i', case=False) | CommandLine.str.contains(r'/i', case=False) | CommandLine.str.contains(r'\u2013i', case=False) | CommandLine.str.contains(r'\u2014i', case=False) | CommandLine.str.contains(r'\u2015i', case=False) | CommandLine.str.contains(r'-package', case=False) | CommandLine.str.contains(r'/package', case=False) | CommandLine.str.contains(r'\u2013package', case=False) | CommandLine.str.contains(r'\u2014package', case=False) | CommandLine.str.contains(r'\u2015package', case=False) | CommandLine.str.contains(r'-a', case=False) | CommandLine.str.contains(r'/a', case=False) | CommandLine.str.contains(r'\u2013a', case=False) | CommandLine.str.contains(r'\u2014a', case=False) | CommandLine.str.contains(r'\u2015a', case=False) | CommandLine.str.contains(r'-j', case=False) | CommandLine.str.contains(r'/j', case=False) | CommandLine.str.contains(r'\u2013j', case=False) | CommandLine.str.contains(r'\u2014j', case=False) | CommandLine.str.contains(r'\u2015j', case=False)) & (CommandLine.str.contains(r'-q', case=False) | CommandLine.str.contains(r'/q', case=False) | CommandLine.str.contains(r'\u2013q', case=False) | CommandLine.str.contains(r'\u2014q', case=False) | CommandLine.str.contains(r'\u2015q', case=False)) & ~ (ParentImage.str.contains(r'C:\\\\Users\\\\', case=False) & ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | ParentImage.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False) | ParentImage=='C:\\\\Windows\\\\CCM\\\\Ccm32BitLauncher.exe' & (IntegrityLevel==['System', 'S-1-16-16384']))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WhoAmI as Parameter",
        "id": "e9142d84-fbe0-401d-ac50-3e519fb00c89",
        "status": "test",
        "description": "Detects a suspicious process command line that uses whoami as first parameter (as e.g. used by EfsPotato)",
        "tags": [
            "attack.discovery",
            "attack.t1033",
            "car.2016-03-001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'.exe whoami', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Service StartupType Change Via Sc.EXE",
        "id": "85c312b7-f44d-4a51-a024-d671c40b49fc",
        "status": "test",
        "description": "Detect the use of \"sc.exe\" to change the startup type of a service to \"disabled\" or \"demand\"",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\sc.exe', case=False) | OriginalFileName=='sc.exe') & CommandLine.str.contains(r' config ', case=False) & CommandLine.str.contains(r'start', case=False) & (CommandLine.str.contains(r'disabled', case=False) | CommandLine.str.contains(r'demand', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Indirect Command Execution From Script File Via Bash.EXE",
        "id": "2d22a514-e024-4428-9dba-41505bd63a5b",
        "status": "test",
        "description": "Detects execution of Microsoft bash launcher without any flags to execute the content of a bash script directly.\nThis can be used to potentially bypass defenses and execute Linux or Windows-based binaries directly via bash.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r':\\\\Windows\\\\System32\\\\bash.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\bash.exe', case=False) | OriginalFileName=='Bash.exe') & ~ (CommandLine.str.contains(r'bash.exe -', case=False) | CommandLine.str.contains(r'bash -', case=False) | CommandLine is null | CommandLine=='' | CommandLine==['bash.exe', 'bash'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Whoami.EXE Execution From Privileged Process",
        "id": "79ce34ca-af29-4d0e-b832-fc1b377020db",
        "status": "test",
        "description": "Detects the execution of \"whoami.exe\" by privileged accounts that are often abused by threat actors",
        "tags": [
            "attack.privilege-escalation",
            "attack.discovery",
            "attack.t1033"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='whoami.exe' | Image.str.contains(r'\\\\whoami.exe', case=False)) & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False) | User.str.contains(r'TrustedInstaller', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Serv-U Process Pattern",
        "id": "58f4ea09-0fc2-4520-ba18-b85c540b0eaf",
        "status": "test",
        "description": "Detects a suspicious process pattern which could be a sign of an exploited Serv-U service",
        "tags": [
            "attack.credential-access",
            "attack.t1555",
            "cve.2021-35211"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\Serv-U.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\sh.exe', case=False) | Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) | Image.str.contains(r'\\\\forfiles.exe', case=False) | Image.str.contains(r'\\\\scriptrunner.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Child Process Of AddinUtil.EXE",
        "id": "b5746143-59d6-4603-8d06-acbd60e166ee",
        "status": "test",
        "description": "Detects uncommon child processes of the Add-In deployment cache updating utility (AddInutil.exe) which could be a sign of potential abuse of the binary to proxy execution via a custom Addins.Store payload.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\addinutil.exe', case=False) & ~ (Image.str.contains(r':\\\\Windows\\\\System32\\\\conhost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\werfault.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\werfault.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Verclsid.exe Runs COM Object",
        "id": "d06be4b9-8045-428b-a567-740a26d9db25",
        "status": "test",
        "description": "Detects when verclsid.exe is used to run COM object via GUID",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\verclsid.exe', case=False) | OriginalFileName=='verclsid.exe') & CommandLine.str.contains(r'/S', case=False) & CommandLine.str.contains(r'/C', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote PowerShell Session Host Process (WinRM)",
        "id": "734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8",
        "status": "test",
        "description": "Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.t1021.006"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wsmprovhost.exe', case=False) | ParentImage.str.contains(r'\\\\wsmprovhost.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - NSudo Execution",
        "id": "771d1eb5-9587-4568-95fb-9ec44153a012",
        "status": "test",
        "description": "Detects the use of NSudo tool for command execution",
        "tags": [
            "attack.execution",
            "attack.t1569.002",
            "attack.s0029"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\NSudo.exe', case=False) | Image.str.contains(r'\\\\NSudoLC.exe', case=False) | Image.str.contains(r'\\\\NSudoLG.exe', case=False) | OriginalFileName==['NSudo.exe', 'NSudoLC.exe', 'NSudoLG.exe']) & (CommandLine.str.contains(r'-U:S ', case=False) | CommandLine.str.contains(r'-U:T ', case=False) | CommandLine.str.contains(r'-U:E ', case=False) | CommandLine.str.contains(r'-P:E ', case=False) | CommandLine.str.contains(r'-M:S ', case=False) | CommandLine.str.contains(r'-M:H ', case=False) | CommandLine.str.contains(r'-U=S ', case=False) | CommandLine.str.contains(r'-U=T ', case=False) | CommandLine.str.contains(r'-U=E ', case=False) | CommandLine.str.contains(r'-P=E ', case=False) | CommandLine.str.contains(r'-M=S ', case=False) | CommandLine.str.contains(r'-M=H ', case=False) | CommandLine.str.contains(r'-ShowWindowMode:Hide', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SafetyKatz Execution",
        "id": "b1876533-4ed5-4a83-90f3-b8645840a413",
        "status": "test",
        "description": "Detects the execution of the hacktool SafetyKatz via PE information and default Image name",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SafetyKatz.exe', case=False) | OriginalFileName=='SafetyKatz.exe' | Description=='SafetyKatz')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - System Informer Execution",
        "id": "5722dff1-4bdd-4949-86ab-fbaf707e767a",
        "status": "test",
        "description": "Detects the execution of System Informer, a task manager tool to view and manipulate processes, kernel options and other low level operations",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.discovery",
            "attack.defense-evasion",
            "attack.t1082",
            "attack.t1564",
            "attack.t1543"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SystemInformer.exe', case=False) | OriginalFileName=='SystemInformer.exe' | Description=='System Informer' | Product=='System Informer' | Hashes.str.contains(r'MD5=19426363A37C03C3ED6FEDF57B6696EC', case=False) | Hashes.str.contains(r'SHA1=8B12C6DA8FAC0D5E8AB999C31E5EA04AF32D53DC', case=False) | Hashes.str.contains(r'SHA256=8EE9D84DE50803545937A63C686822388A3338497CDDB660D5D69CF68B68F287', case=False) | Hashes.str.contains(r'IMPHASH=B68908ADAEB5D662F87F2528AF318F12', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed ProcDump Execution",
        "id": "4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67",
        "status": "test",
        "description": "Detects the execution of a renamed ProcDump executable.\nThis often done by attackers or malware in order to evade defensive mechanisms.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='procdump' | (CommandLine.str.contains(r' -ma ', case=False) | CommandLine.str.contains(r' /ma ', case=False) | CommandLine.str.contains(r' \u2013ma ', case=False) | CommandLine.str.contains(r' \u2014ma ', case=False) | CommandLine.str.contains(r' \u2015ma ', case=False) | CommandLine.str.contains(r' -mp ', case=False) | CommandLine.str.contains(r' /mp ', case=False) | CommandLine.str.contains(r' \u2013mp ', case=False) | CommandLine.str.contains(r' \u2014mp ', case=False) | CommandLine.str.contains(r' \u2015mp ', case=False)) & (CommandLine.str.contains(r' -accepteula', case=False) | CommandLine.str.contains(r' /accepteula', case=False) | CommandLine.str.contains(r' \u2013accepteula', case=False) | CommandLine.str.contains(r' \u2014accepteula', case=False) | CommandLine.str.contains(r' \u2015accepteula', case=False))) & ~ (Image.str.contains(r'\\\\procdump.exe', case=False) | Image.str.contains(r'\\\\procdump64.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential RDP Tunneling Via SSH",
        "id": "f7d7ebd5-a016-46e2-9c54-f9932f2d386d",
        "status": "test",
        "description": "Execution of ssh.exe to perform data exfiltration and tunneling through RDP",
        "tags": [
            "attack.command-and-control",
            "attack.t1572"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\ssh.exe', case=False) & CommandLine.str.contains(r':3389', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Meterpreter/CobaltStrike Activity",
        "id": "15619216-e993-4721-b590-4c520615a67d",
        "status": "test",
        "description": "Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service starting",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1134.001",
            "attack.t1134.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\services.exe', case=False) & (CommandLine.str.contains(r'/c', case=False) & CommandLine.str.contains(r'echo', case=False) & CommandLine.str.contains(r'\\\\pipe\\\\', case=False) & (CommandLine.str.contains(r'cmd', case=False) | CommandLine.str.contains(r'%COMSPEC%', case=False)) | CommandLine.str.contains(r'rundll32', case=False) & CommandLine.str.contains(r'.dll,a', case=False) & CommandLine.str.contains(r'/p:', case=False)) & ~ CommandLine.str.contains(r'MpCmdRun', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Whoami.EXE Execution Anomaly",
        "id": "8de1cbe8-d6f5-496d-8237-5f44a721c7a0",
        "status": "test",
        "description": "Detects the execution of whoami.exe with suspicious parent processes.",
        "tags": [
            "attack.discovery",
            "attack.t1033",
            "car.2016-03-001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\whoami.exe', case=False) | OriginalFileName=='whoami.exe') & ~ (ParentImage.str.contains(r'\\\\cmd.exe', case=False) | ParentImage.str.contains(r'\\\\powershell_ise.exe', case=False) | ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False) | ParentImage is null | ParentImage=='') & ~ ParentImage.str.contains(r':\\\\Program Files\\\\Microsoft Monitoring Agent\\\\Agent\\\\MonitoringHost.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Active Directory Structure Export Via Csvde.EXE",
        "id": "e5d36acd-acb4-4c6f-a13f-9eb203d50099",
        "status": "test",
        "description": "Detects the execution of \"csvde.exe\" in order to export organizational Active Directory structure.",
        "tags": [
            "attack.exfiltration",
            "attack.discovery",
            "attack.t1087.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\csvde.exe', case=False) | OriginalFileName=='csvde.exe') & CommandLine.str.contains(r' -f', case=False) & ~ CommandLine.str.contains(r' -i', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Userinit Child Process",
        "id": "b655a06a-31c0-477a-95c2-3726b83d649d",
        "status": "test",
        "description": "Detects a suspicious child process of userinit",
        "tags": [
            "attack.defense-evasion",
            "attack.t1055"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\userinit.exe', case=False) & ~ (CommandLine.str.contains(r'\\\\netlogon\\\\', case=False) | Image.str.contains(r'\\\\explorer.exe', case=False) | OriginalFileName=='explorer.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Tasks Folder Evasion",
        "id": "cc4e02ba-9c06-48e2-b09e-2500cace9ae0",
        "status": "test",
        "description": "The Tasks folder in system32 and syswow64 are globally writable paths.\nAdversaries can take advantage of this and load or influence any script hosts or ANY .NET Application\nin Tasks to load and execute a custom assembly into cscript, wscript, regsvr32, mshta, eventvwr\n",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.execution",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'echo ', case=False) | CommandLine.str.contains(r'copy ', case=False) | CommandLine.str.contains(r'type ', case=False) | CommandLine.str.contains(r'file createnew', case=False)) & (CommandLine.str.contains(r' C:\\\\Windows\\\\System32\\\\Tasks\\\\', case=False) | CommandLine.str.contains(r' C:\\\\Windows\\\\SysWow64\\\\Tasks\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Stdin",
        "id": "9c14c9fa-1a63-4a64-8e57-d19280559490",
        "status": "test",
        "description": "Detects Obfuscated Powershell via Stdin in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'(?i)(set).*&&\\\\s?set.*(environment|invoke|\\\\$\\\\{?input).*&&.*\"')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sensitive File Dump Via Wbadmin.EXE",
        "id": "8b93a509-1cb8-42e1-97aa-ee24224cdc15",
        "status": "experimental",
        "description": "Detects the dump of highly sensitive files such as \"NTDS.DIT\" and \"SECURITY\" hive.\nAttackers can leverage the \"wbadmin\" utility in order to dump sensitive files that might contain credential or sensitive information.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1003.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wbadmin.exe', case=False) | OriginalFileName=='WBADMIN.EXE') & (CommandLine.str.contains(r'start', case=False) | CommandLine.str.contains(r'backup', case=False)) & (CommandLine.str.contains(r'\\\\config\\\\SAM', case=False) | CommandLine.str.contains(r'\\\\config\\\\SECURITY', case=False) | CommandLine.str.contains(r'\\\\config\\\\SYSTEM', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\NTDS\\\\NTDS.dit', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Insecure Transfer Via Curl.EXE",
        "id": "cb9cc1d1-e84e-4bdc-b7ad-c31b1b7908ec",
        "status": "test",
        "description": "Detects execution of \"curl.exe\" with the \"--insecure\" flag.",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\curl.exe', case=False) | OriginalFileName=='curl.exe') & (CommandLine.str.contains(r'\\\\s-k\\\\s') | CommandLine.str.contains(r'--insecure', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Defense Evasion Activity Via Emoji Usage In CommandLine - 3",
        "id": "f9578658-9e71-4711-b634-3f9b50cd3c06",
        "status": "test",
        "description": "Detects the usage of emojis in the command line, this could be a sign of potential defense evasion activity.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\ud83e\udd86', case=False) | CommandLine.str.contains(r'\ud83e\udd85', case=False) | CommandLine.str.contains(r'\ud83e\udd89', case=False) | CommandLine.str.contains(r'\ud83e\udd87', case=False) | CommandLine.str.contains(r'\ud83d\udc3a', case=False) | CommandLine.str.contains(r'\ud83d\udc17', case=False) | CommandLine.str.contains(r'\ud83d\udc34', case=False) | CommandLine.str.contains(r'\ud83e\udd84', case=False) | CommandLine.str.contains(r'\ud83d\udc1d', case=False) | CommandLine.str.contains(r'\ud83e\udeb1', case=False) | CommandLine.str.contains(r'\ud83d\udc1b', case=False) | CommandLine.str.contains(r'\ud83e\udd8b', case=False) | CommandLine.str.contains(r'\ud83d\udc0c', case=False) | CommandLine.str.contains(r'\ud83d\udc1e', case=False) | CommandLine.str.contains(r'\ud83d\udc1c', case=False) | CommandLine.str.contains(r'\ud83e\udeb0', case=False) | CommandLine.str.contains(r'\ud83e\udeb2', case=False) | CommandLine.str.contains(r'\ud83e\udeb3', case=False) | CommandLine.str.contains(r'\ud83e\udd9f', case=False) | CommandLine.str.contains(r'\ud83e\udd97', case=False) | CommandLine.str.contains(r'\ud83d\udd77', case=False) | CommandLine.str.contains(r'\ud83d\udd78', case=False) | CommandLine.str.contains(r'\ud83e\udd82', case=False) | CommandLine.str.contains(r'\ud83d\udc22', case=False) | CommandLine.str.contains(r'\ud83d\udc0d', case=False) | CommandLine.str.contains(r'\ud83e\udd8e', case=False) | CommandLine.str.contains(r'\ud83e\udd96', case=False) | CommandLine.str.contains(r'\ud83e\udd95', case=False) | CommandLine.str.contains(r'\ud83d\udc19', case=False) | CommandLine.str.contains(r'\ud83e\udd91', case=False) | CommandLine.str.contains(r'\ud83e\udd90', case=False) | CommandLine.str.contains(r'\ud83e\udd9e', case=False) | CommandLine.str.contains(r'\ud83e\udd80', case=False) | CommandLine.str.contains(r'\ud83e\udeb8', case=False) | CommandLine.str.contains(r'\ud83d\udc21', case=False) | CommandLine.str.contains(r'\ud83d\udc20', case=False) | CommandLine.str.contains(r'\ud83d\udc1f', case=False) | CommandLine.str.contains(r'\ud83d\udc2c', case=False) | CommandLine.str.contains(r'\ud83d\udc33', case=False) | CommandLine.str.contains(r'\ud83d\udc0b', case=False) | CommandLine.str.contains(r'\ud83e\udd88', case=False) | CommandLine.str.contains(r'\ud83d\udc0a', case=False) | CommandLine.str.contains(r'\ud83d\udc05', case=False) | CommandLine.str.contains(r'\ud83d\udc06', case=False) | CommandLine.str.contains(r'\ud83e\udd93', case=False) | CommandLine.str.contains(r'\ud83e\udd8d', case=False) | CommandLine.str.contains(r'\ud83e\udda7', case=False) | CommandLine.str.contains(r'\ud83e\udda3', case=False) | CommandLine.str.contains(r'\ud83d\udc18', case=False) | CommandLine.str.contains(r'\ud83e\udd9b', case=False) | CommandLine.str.contains(r'\ud83e\udd8f', case=False) | CommandLine.str.contains(r'\ud83d\udc2a', case=False) | CommandLine.str.contains(r'\ud83d\udc2b', case=False) | CommandLine.str.contains(r'\ud83e\udd92', case=False) | CommandLine.str.contains(r'\ud83e\udd98', case=False) | CommandLine.str.contains(r'\ud83e\uddac', case=False) | CommandLine.str.contains(r'\ud83d\udc03', case=False) | CommandLine.str.contains(r'\ud83d\udc02', case=False) | CommandLine.str.contains(r'\ud83d\udc04', case=False) | CommandLine.str.contains(r'\ud83d\udc0e', case=False) | CommandLine.str.contains(r'\ud83d\udc16', case=False) | CommandLine.str.contains(r'\ud83d\udc0f', case=False) | CommandLine.str.contains(r'\ud83d\udc11', case=False) | CommandLine.str.contains(r'\ud83e\udd99', case=False) | CommandLine.str.contains(r'\ud83d\udc10', case=False) | CommandLine.str.contains(r'\ud83e\udd8c', case=False) | CommandLine.str.contains(r'\ud83d\udc15', case=False) | CommandLine.str.contains(r'\ud83d\udc29', case=False) | CommandLine.str.contains(r'\ud83e\uddae', case=False) | CommandLine.str.contains(r'\ud83d\udc15\u200d\ud83e\uddba', case=False) | CommandLine.str.contains(r'\ud83d\udc08', case=False) | CommandLine.str.contains(r'\ud83d\udc08\u200d\u2b1b', case=False) | CommandLine.str.contains(r'\ud83e\udeb6', case=False) | CommandLine.str.contains(r'\ud83d\udc13', case=False) | CommandLine.str.contains(r'\ud83e\udd83', case=False) | CommandLine.str.contains(r'\ud83e\udda4', case=False) | CommandLine.str.contains(r'\ud83e\udd9a', case=False) | CommandLine.str.contains(r'\ud83e\udd9c', case=False) | CommandLine.str.contains(r'\ud83e\udda2', case=False) | CommandLine.str.contains(r'\ud83e\udda9', case=False) | CommandLine.str.contains(r'\ud83d\udd4a', case=False) | CommandLine.str.contains(r'\ud83d\udc07', case=False) | CommandLine.str.contains(r'\ud83e\udd9d', case=False) | CommandLine.str.contains(r'\ud83e\udda8', case=False) | CommandLine.str.contains(r'\ud83e\udda1', case=False) | CommandLine.str.contains(r'\ud83e\uddab', case=False) | CommandLine.str.contains(r'\ud83e\udda6', case=False) | CommandLine.str.contains(r'\ud83e\udda5', case=False) | CommandLine.str.contains(r'\ud83d\udc01', case=False) | CommandLine.str.contains(r'\ud83d\udc00', case=False) | CommandLine.str.contains(r'\ud83d\udc3f', case=False) | CommandLine.str.contains(r'\ud83e\udd94', case=False) | CommandLine.str.contains(r'\ud83d\udc3e', case=False) | CommandLine.str.contains(r'\ud83d\udc09', case=False) | CommandLine.str.contains(r'\ud83d\udc32', case=False) | CommandLine.str.contains(r'\ud83c\udf35', case=False) | CommandLine.str.contains(r'\ud83c\udf84', case=False) | CommandLine.str.contains(r'\ud83c\udf32', case=False) | CommandLine.str.contains(r'\ud83c\udf33', case=False) | CommandLine.str.contains(r'\ud83c\udf34', case=False) | CommandLine.str.contains(r'\ud83e\udeb9', case=False) | CommandLine.str.contains(r'\ud83e\udeba', case=False) | CommandLine.str.contains(r'\ud83e\udeb5', case=False) | CommandLine.str.contains(r'\ud83c\udf31', case=False) | CommandLine.str.contains(r'\ud83c\udf3f', case=False) | CommandLine.str.contains(r'\u2618\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udf40', case=False) | CommandLine.str.contains(r'\ud83c\udf8d', case=False) | CommandLine.str.contains(r'\ud83e\udeb4', case=False) | CommandLine.str.contains(r'\ud83c\udf8b', case=False) | CommandLine.str.contains(r'\ud83c\udf43', case=False) | CommandLine.str.contains(r'\ud83c\udf42', case=False) | CommandLine.str.contains(r'\ud83c\udf41', case=False) | CommandLine.str.contains(r'\ud83c\udf44', case=False) | CommandLine.str.contains(r'\ud83d\udc1a', case=False) | CommandLine.str.contains(r'\ud83e\udea8', case=False) | CommandLine.str.contains(r'\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83d\udc90', case=False) | CommandLine.str.contains(r'\ud83c\udf37', case=False) | CommandLine.str.contains(r'\ud83e\udeb7', case=False) | CommandLine.str.contains(r'\ud83c\udf39', case=False) | CommandLine.str.contains(r'\ud83e\udd40', case=False) | CommandLine.str.contains(r'\ud83c\udf3a', case=False) | CommandLine.str.contains(r'\ud83c\udf38', case=False) | CommandLine.str.contains(r'\ud83c\udf3c', case=False) | CommandLine.str.contains(r'\ud83c\udf3b', case=False) | CommandLine.str.contains(r'\ud83c\udf1e', case=False) | CommandLine.str.contains(r'\ud83c\udf1d', case=False) | CommandLine.str.contains(r'\ud83c\udf1b', case=False) | CommandLine.str.contains(r'\ud83c\udf1c', case=False) | CommandLine.str.contains(r'\ud83c\udf1a', case=False) | CommandLine.str.contains(r'\ud83c\udf15', case=False) | CommandLine.str.contains(r'\ud83c\udf16', case=False) | CommandLine.str.contains(r'\ud83c\udf17', case=False) | CommandLine.str.contains(r'\ud83c\udf18', case=False) | CommandLine.str.contains(r'\ud83c\udf11', case=False) | CommandLine.str.contains(r'\ud83c\udf12', case=False) | CommandLine.str.contains(r'\ud83c\udf13', case=False) | CommandLine.str.contains(r'\ud83c\udf14', case=False) | CommandLine.str.contains(r'\ud83c\udf19', case=False) | CommandLine.str.contains(r'\ud83c\udf0e', case=False) | CommandLine.str.contains(r'\ud83c\udf0d', case=False) | CommandLine.str.contains(r'\ud83c\udf0f', case=False) | CommandLine.str.contains(r'\ud83e\ude90', case=False) | CommandLine.str.contains(r'\ud83d\udcab', case=False) | CommandLine.str.contains(r'\u2b50\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udf1f', case=False) | CommandLine.str.contains(r'\u2728', case=False) | CommandLine.str.contains(r'\u26a1\ufe0f', case=False) | CommandLine.str.contains(r'\u2604\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udca5', case=False) | CommandLine.str.contains(r'\ud83d\udd25', case=False) | CommandLine.str.contains(r'\ud83c\udf2a', case=False) | CommandLine.str.contains(r'\ud83c\udf08', case=False) | CommandLine.str.contains(r'\u2600\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udf24', case=False) | CommandLine.str.contains(r'\u26c5\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udf25', case=False) | CommandLine.str.contains(r'\u2601\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udf26', case=False) | CommandLine.str.contains(r'\ud83c\udf27', case=False) | CommandLine.str.contains(r'\u26c8', case=False) | CommandLine.str.contains(r'\ud83c\udf29', case=False) | CommandLine.str.contains(r'\ud83c\udf28', case=False) | CommandLine.str.contains(r'\u2744\ufe0f', case=False) | CommandLine.str.contains(r'\u2603\ufe0f', case=False) | CommandLine.str.contains(r'\u26c4\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udf2c', case=False) | CommandLine.str.contains(r'\ud83d\udca8', case=False) | CommandLine.str.contains(r'\ud83d\udca7', case=False) | CommandLine.str.contains(r'\ud83d\udca6', case=False) | CommandLine.str.contains(r'\ud83e\udee7', case=False) | CommandLine.str.contains(r'\u2614\ufe0f', case=False) | CommandLine.str.contains(r'\u2602\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udf0a', case=False) | CommandLine.str.contains(r'\ud83c\udf2b\ud83c\udf4f', case=False) | CommandLine.str.contains(r'\ud83c\udf4e', case=False) | CommandLine.str.contains(r'\ud83c\udf50', case=False) | CommandLine.str.contains(r'\ud83c\udf4a', case=False) | CommandLine.str.contains(r'\ud83c\udf4b', case=False) | CommandLine.str.contains(r'\ud83c\udf4c', case=False) | CommandLine.str.contains(r'\ud83c\udf49', case=False) | CommandLine.str.contains(r'\ud83c\udf47', case=False) | CommandLine.str.contains(r'\ud83c\udf53', case=False) | CommandLine.str.contains(r'\ud83e\uded0', case=False) | CommandLine.str.contains(r'\ud83c\udf48', case=False) | CommandLine.str.contains(r'\ud83c\udf52', case=False) | CommandLine.str.contains(r'\ud83c\udf51', case=False) | CommandLine.str.contains(r'\ud83e\udd6d', case=False) | CommandLine.str.contains(r'\ud83c\udf4d', case=False) | CommandLine.str.contains(r'\ud83e\udd65', case=False) | CommandLine.str.contains(r'\ud83e\udd5d', case=False) | CommandLine.str.contains(r'\ud83c\udf45', case=False) | CommandLine.str.contains(r'\ud83c\udf46', case=False) | CommandLine.str.contains(r'\ud83e\udd51', case=False) | CommandLine.str.contains(r'\ud83e\udd66', case=False) | CommandLine.str.contains(r'\ud83e\udd6c', case=False) | CommandLine.str.contains(r'\ud83e\udd52', case=False) | CommandLine.str.contains(r'\ud83c\udf36', case=False) | CommandLine.str.contains(r'\ud83e\uded1', case=False) | CommandLine.str.contains(r'\ud83c\udf3d', case=False) | CommandLine.str.contains(r'\ud83e\udd55', case=False) | CommandLine.str.contains(r'\ud83e\uded2', case=False) | CommandLine.str.contains(r'\ud83e\uddc4', case=False) | CommandLine.str.contains(r'\ud83e\uddc5', case=False) | CommandLine.str.contains(r'\ud83e\udd54', case=False) | CommandLine.str.contains(r'\ud83c\udf60', case=False) | CommandLine.str.contains(r'\ud83e\uded8', case=False) | CommandLine.str.contains(r'\ud83e\udd50', case=False) | CommandLine.str.contains(r'\ud83e\udd6f', case=False) | CommandLine.str.contains(r'\ud83c\udf5e', case=False) | CommandLine.str.contains(r'\ud83e\udd56', case=False) | CommandLine.str.contains(r'\ud83e\udd68', case=False) | CommandLine.str.contains(r'\ud83e\uddc0', case=False) | CommandLine.str.contains(r'\ud83e\udd5a', case=False) | CommandLine.str.contains(r'\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83e\uddc8', case=False) | CommandLine.str.contains(r'\ud83e\udd5e', case=False) | CommandLine.str.contains(r'\ud83e\uddc7', case=False) | CommandLine.str.contains(r'\ud83e\udd53', case=False) | CommandLine.str.contains(r'\ud83e\udd69', case=False) | CommandLine.str.contains(r'\ud83c\udf57', case=False) | CommandLine.str.contains(r'\ud83c\udf56', case=False) | CommandLine.str.contains(r'\ud83e\uddb4', case=False) | CommandLine.str.contains(r'\ud83c\udf2d', case=False) | CommandLine.str.contains(r'\ud83c\udf54', case=False) | CommandLine.str.contains(r'\ud83c\udf5f', case=False) | CommandLine.str.contains(r'\ud83c\udf55', case=False) | CommandLine.str.contains(r'\ud83e\uded3', case=False) | CommandLine.str.contains(r'\ud83e\udd6a', case=False) | CommandLine.str.contains(r'\ud83e\udd59', case=False) | CommandLine.str.contains(r'\ud83e\uddc6', case=False) | CommandLine.str.contains(r'\ud83c\udf2e', case=False) | CommandLine.str.contains(r'\ud83c\udf2f', case=False) | CommandLine.str.contains(r'\ud83e\uded4', case=False) | CommandLine.str.contains(r'\ud83e\udd57', case=False) | CommandLine.str.contains(r'\ud83e\udd58', case=False) | CommandLine.str.contains(r'\ud83e\uded5', case=False) | CommandLine.str.contains(r'\ud83e\udd6b', case=False) | CommandLine.str.contains(r'\ud83c\udf5d', case=False) | CommandLine.str.contains(r'\ud83c\udf5c', case=False) | CommandLine.str.contains(r'\ud83c\udf72', case=False) | CommandLine.str.contains(r'\ud83c\udf5b', case=False) | CommandLine.str.contains(r'\ud83c\udf63', case=False) | CommandLine.str.contains(r'\ud83c\udf71', case=False) | CommandLine.str.contains(r'\ud83e\udd5f', case=False) | CommandLine.str.contains(r'\ud83e\uddaa', case=False) | CommandLine.str.contains(r'\ud83c\udf64', case=False) | CommandLine.str.contains(r'\ud83c\udf59', case=False) | CommandLine.str.contains(r'\ud83c\udf5a', case=False) | CommandLine.str.contains(r'\ud83c\udf58', case=False) | CommandLine.str.contains(r'\ud83c\udf65', case=False) | CommandLine.str.contains(r'\ud83e\udd60', case=False) | CommandLine.str.contains(r'\ud83e\udd6e', case=False) | CommandLine.str.contains(r'\ud83c\udf62', case=False) | CommandLine.str.contains(r'\ud83c\udf61', case=False) | CommandLine.str.contains(r'\ud83c\udf67', case=False) | CommandLine.str.contains(r'\ud83c\udf68', case=False) | CommandLine.str.contains(r'\ud83c\udf66', case=False) | CommandLine.str.contains(r'\ud83e\udd67', case=False) | CommandLine.str.contains(r'\ud83e\uddc1', case=False) | CommandLine.str.contains(r'\ud83c\udf70', case=False) | CommandLine.str.contains(r'\ud83c\udf82', case=False) | CommandLine.str.contains(r'\ud83c\udf6e', case=False) | CommandLine.str.contains(r'\ud83c\udf6d', case=False) | CommandLine.str.contains(r'\ud83c\udf6c', case=False) | CommandLine.str.contains(r'\ud83c\udf6b', case=False) | CommandLine.str.contains(r'\ud83c\udf7f', case=False) | CommandLine.str.contains(r'\ud83c\udf69', case=False) | CommandLine.str.contains(r'\ud83c\udf6a', case=False) | CommandLine.str.contains(r'\ud83c\udf30', case=False) | CommandLine.str.contains(r'\ud83e\udd5c', case=False) | CommandLine.str.contains(r'\ud83c\udf6f', case=False) | CommandLine.str.contains(r'\ud83e\udd5b', case=False) | CommandLine.str.contains(r'\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83e\uded6', case=False) | CommandLine.str.contains(r'\u2615\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udf75', case=False) | CommandLine.str.contains(r'\ud83e\uddc3', case=False) | CommandLine.str.contains(r'\ud83e\udd64', case=False) | CommandLine.str.contains(r'\ud83e\uddcb', case=False) | CommandLine.str.contains(r'\ud83e\uded9', case=False) | CommandLine.str.contains(r'\ud83c\udf76', case=False) | CommandLine.str.contains(r'\ud83c\udf7a', case=False) | CommandLine.str.contains(r'\ud83c\udf7b', case=False) | CommandLine.str.contains(r'\ud83e\udd42', case=False) | CommandLine.str.contains(r'\ud83c\udf77', case=False) | CommandLine.str.contains(r'\ud83e\uded7', case=False) | CommandLine.str.contains(r'\ud83e\udd43', case=False) | CommandLine.str.contains(r'\ud83c\udf78', case=False) | CommandLine.str.contains(r'\ud83c\udf79', case=False) | CommandLine.str.contains(r'\ud83e\uddc9', case=False) | CommandLine.str.contains(r'\ud83c\udf7e', case=False) | CommandLine.str.contains(r'\ud83e\uddca', case=False) | CommandLine.str.contains(r'\ud83e\udd44', case=False) | CommandLine.str.contains(r'\ud83c\udf74', case=False) | CommandLine.str.contains(r'\ud83c\udf7d', case=False) | CommandLine.str.contains(r'\ud83e\udd63', case=False) | CommandLine.str.contains(r'\ud83e\udd61', case=False) | CommandLine.str.contains(r'\ud83e\udd62', case=False) | CommandLine.str.contains(r'\ud83e\uddc2', case=False) | CommandLine.str.contains(r'\u26bd\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc0', case=False) | CommandLine.str.contains(r'\ud83c\udfc8', case=False) | CommandLine.str.contains(r'\u26be\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd4e', case=False) | CommandLine.str.contains(r'\ud83c\udfbe', case=False) | CommandLine.str.contains(r'\ud83c\udfd0', case=False) | CommandLine.str.contains(r'\ud83c\udfc9', case=False) | CommandLine.str.contains(r'\ud83e\udd4f', case=False) | CommandLine.str.contains(r'\ud83c\udfb1', case=False) | CommandLine.str.contains(r'\ud83e\ude80', case=False) | CommandLine.str.contains(r'\ud83c\udfd3', case=False) | CommandLine.str.contains(r'\ud83c\udff8', case=False) | CommandLine.str.contains(r'\ud83c\udfd2', case=False) | CommandLine.str.contains(r'\ud83c\udfd1', case=False) | CommandLine.str.contains(r'\ud83e\udd4d', case=False) | CommandLine.str.contains(r'\ud83c\udfcf', case=False) | CommandLine.str.contains(r'\ud83e\ude83', case=False) | CommandLine.str.contains(r'\ud83e\udd45', case=False) | CommandLine.str.contains(r'\u26f3\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\ude81', case=False) | CommandLine.str.contains(r'\ud83c\udff9', case=False) | CommandLine.str.contains(r'\ud83c\udfa3', case=False) | CommandLine.str.contains(r'\ud83e\udd3f', case=False) | CommandLine.str.contains(r'\ud83e\udd4a', case=False) | CommandLine.str.contains(r'\ud83e\udd4b', case=False) | CommandLine.str.contains(r'\ud83c\udfbd', case=False) | CommandLine.str.contains(r'\ud83d\udef9', case=False) | CommandLine.str.contains(r'\ud83d\udefc', case=False) | CommandLine.str.contains(r'\ud83d\udef7', case=False) | CommandLine.str.contains(r'\u26f8', case=False) | CommandLine.str.contains(r'\ud83e\udd4c', case=False) | CommandLine.str.contains(r'\ud83c\udfbf', case=False) | CommandLine.str.contains(r'\u26f7', case=False) | CommandLine.str.contains(r'\ud83c\udfc2', case=False) | CommandLine.str.contains(r'\ud83e\ude82', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ufe0f\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3c\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3c', case=False) | CommandLine.str.contains(r'\ud83e\udd3c\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd38\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd38', case=False) | CommandLine.str.contains(r'\ud83e\udd38\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\u26f9\ufe0f\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\u26f9\ufe0f', case=False) | CommandLine.str.contains(r'\u26f9\ufe0f\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3a', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3e', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ufe0f\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ufe0f\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc7', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd8', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc4', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfca\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfca', case=False) | CommandLine.str.contains(r'\ud83c\udfca\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3d', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea3\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea3', case=False) | CommandLine.str.contains(r'\ud83d\udea3\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd7', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb5', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb4', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc6', case=False) | CommandLine.str.contains(r'\ud83e\udd47', case=False) | CommandLine.str.contains(r'\ud83e\udd48', case=False) | CommandLine.str.contains(r'\ud83e\udd49', case=False) | CommandLine.str.contains(r'\ud83c\udfc5', case=False) | CommandLine.str.contains(r'\ud83c\udf96', case=False) | CommandLine.str.contains(r'\ud83c\udff5', case=False) | CommandLine.str.contains(r'\ud83c\udf97', case=False) | CommandLine.str.contains(r'\ud83c\udfab', case=False) | CommandLine.str.contains(r'\ud83c\udf9f', case=False) | CommandLine.str.contains(r'\ud83c\udfaa', case=False) | CommandLine.str.contains(r'\ud83e\udd39', case=False) | CommandLine.str.contains(r'\ud83e\udd39\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd39\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfad', case=False) | CommandLine.str.contains(r'\ud83e\ude70', case=False) | CommandLine.str.contains(r'\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83c\udfac', case=False) | CommandLine.str.contains(r'\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83c\udfa7', case=False) | CommandLine.str.contains(r'\ud83c\udfbc', case=False) | CommandLine.str.contains(r'\ud83c\udfb9', case=False) | CommandLine.str.contains(r'\ud83e\udd41', case=False) | CommandLine.str.contains(r'\ud83e\ude98', case=False) | CommandLine.str.contains(r'\ud83c\udfb7', case=False) | CommandLine.str.contains(r'\ud83c\udfba', case=False) | CommandLine.str.contains(r'\ud83e\ude97', case=False) | CommandLine.str.contains(r'\ud83c\udfb8', case=False) | CommandLine.str.contains(r'\ud83e\ude95', case=False) | CommandLine.str.contains(r'\ud83c\udfbb', case=False) | CommandLine.str.contains(r'\ud83c\udfb2', case=False) | CommandLine.str.contains(r'\u265f', case=False) | CommandLine.str.contains(r'\ud83c\udfaf', case=False) | CommandLine.str.contains(r'\ud83c\udfb3', case=False) | CommandLine.str.contains(r'\ud83c\udfae', case=False) | CommandLine.str.contains(r'\ud83c\udfb0', case=False) | CommandLine.str.contains(r'\ud83e\udde9', case=False) | CommandLine.str.contains(r'\ud83d\ude97', case=False) | CommandLine.str.contains(r'\ud83d\ude95', case=False) | CommandLine.str.contains(r'\ud83d\ude99', case=False) | CommandLine.str.contains(r'\ud83d\ude8c', case=False) | CommandLine.str.contains(r'\ud83d\ude8e', case=False) | CommandLine.str.contains(r'\ud83c\udfce', case=False) | CommandLine.str.contains(r'\ud83d\ude93', case=False) | CommandLine.str.contains(r'\ud83d\ude91', case=False) | CommandLine.str.contains(r'\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83d\ude90', case=False) | CommandLine.str.contains(r'\ud83d\udefb', case=False) | CommandLine.str.contains(r'\ud83d\ude9a', case=False) | CommandLine.str.contains(r'\ud83d\ude9b', case=False) | CommandLine.str.contains(r'\ud83d\ude9c', case=False) | CommandLine.str.contains(r'\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83d\udef4', case=False) | CommandLine.str.contains(r'\ud83d\udeb2', case=False) | CommandLine.str.contains(r'\ud83d\udef5', case=False) | CommandLine.str.contains(r'\ud83c\udfcd', case=False) | CommandLine.str.contains(r'\ud83d\udefa', case=False) | CommandLine.str.contains(r'\ud83d\udea8', case=False) | CommandLine.str.contains(r'\ud83d\ude94', case=False) | CommandLine.str.contains(r'\ud83d\ude8d', case=False) | CommandLine.str.contains(r'\ud83d\ude98', case=False) | CommandLine.str.contains(r'\ud83d\ude96', case=False) | CommandLine.str.contains(r'\ud83d\udede', case=False) | CommandLine.str.contains(r'\ud83d\udea1', case=False) | CommandLine.str.contains(r'\ud83d\udea0', case=False) | CommandLine.str.contains(r'\ud83d\ude9f', case=False) | CommandLine.str.contains(r'\ud83d\ude83', case=False) | CommandLine.str.contains(r'\ud83d\ude8b', case=False) | CommandLine.str.contains(r'\ud83d\ude9e', case=False) | CommandLine.str.contains(r'\ud83d\ude9d', case=False) | CommandLine.str.contains(r'\ud83d\ude84', case=False) | CommandLine.str.contains(r'\ud83d\ude85', case=False) | CommandLine.str.contains(r'\ud83d\ude88', case=False) | CommandLine.str.contains(r'\ud83d\ude82', case=False) | CommandLine.str.contains(r'\ud83d\ude86', case=False) | CommandLine.str.contains(r'\ud83d\ude87', case=False) | CommandLine.str.contains(r'\ud83d\ude8a', case=False) | CommandLine.str.contains(r'\ud83d\ude89', case=False) | CommandLine.str.contains(r'\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeeb', case=False) | CommandLine.str.contains(r'\ud83d\udeec', case=False) | CommandLine.str.contains(r'\ud83d\udee9', case=False) | CommandLine.str.contains(r'\ud83d\udcba', case=False) | CommandLine.str.contains(r'\ud83d\udef0', case=False) | CommandLine.str.contains(r'\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83d\udef8', case=False) | CommandLine.str.contains(r'\ud83d\ude81', case=False) | CommandLine.str.contains(r'\ud83d\udef6', case=False) | CommandLine.str.contains(r'\u26f5\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea4', case=False) | CommandLine.str.contains(r'\ud83d\udee5', case=False) | CommandLine.str.contains(r'\ud83d\udef3', case=False) | CommandLine.str.contains(r'\u26f4', case=False) | CommandLine.str.contains(r'\ud83d\udea2', case=False) | CommandLine.str.contains(r'\u2693\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udedf', case=False) | CommandLine.str.contains(r'\ud83e\ude9d', case=False) | CommandLine.str.contains(r'\u26fd\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea7', case=False) | CommandLine.str.contains(r'\ud83d\udea6', case=False) | CommandLine.str.contains(r'\ud83d\udea5', case=False) | CommandLine.str.contains(r'\ud83d\ude8f', case=False) | CommandLine.str.contains(r'\ud83d\uddfa', case=False) | CommandLine.str.contains(r'\ud83d\uddff', case=False) | CommandLine.str.contains(r'\ud83d\uddfd', case=False) | CommandLine.str.contains(r'\ud83d\uddfc', case=False) | CommandLine.str.contains(r'\ud83c\udff0', case=False) | CommandLine.str.contains(r'\ud83c\udfef', case=False) | CommandLine.str.contains(r'\ud83c\udfdf', case=False) | CommandLine.str.contains(r'\ud83c\udfa1', case=False) | CommandLine.str.contains(r'\ud83c\udfa2', case=False) | CommandLine.str.contains(r'\ud83d\udedd', case=False) | CommandLine.str.contains(r'\ud83c\udfa0', case=False) | CommandLine.str.contains(r'\u26f2\ufe0f', case=False) | CommandLine.str.contains(r'\u26f1', case=False) | CommandLine.str.contains(r'\ud83c\udfd6', case=False) | CommandLine.str.contains(r'\ud83c\udfdd', case=False) | CommandLine.str.contains(r'\ud83c\udfdc', case=False) | CommandLine.str.contains(r'\ud83c\udf0b', case=False) | CommandLine.str.contains(r'\u26f0', case=False) | CommandLine.str.contains(r'\ud83c\udfd4', case=False) | CommandLine.str.contains(r'\ud83d\uddfb', case=False) | CommandLine.str.contains(r'\ud83c\udfd5', case=False) | CommandLine.str.contains(r'\u26fa\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\uded6', case=False) | CommandLine.str.contains(r'\ud83c\udfe0', case=False) | CommandLine.str.contains(r'\ud83c\udfe1', case=False) | CommandLine.str.contains(r'\ud83c\udfd8', case=False) | CommandLine.str.contains(r'\ud83c\udfda', case=False) | CommandLine.str.contains(r'\ud83c\udfd7', case=False) | CommandLine.str.contains(r'\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83c\udfe2', case=False) | CommandLine.str.contains(r'\ud83c\udfec', case=False) | CommandLine.str.contains(r'\ud83c\udfe3', case=False) | CommandLine.str.contains(r'\ud83c\udfe4', case=False) | CommandLine.str.contains(r'\ud83c\udfe5', case=False) | CommandLine.str.contains(r'\ud83c\udfe6', case=False) | CommandLine.str.contains(r'\ud83c\udfe8', case=False) | CommandLine.str.contains(r'\ud83c\udfea', case=False) | CommandLine.str.contains(r'\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83c\udfe9', case=False) | CommandLine.str.contains(r'\ud83d\udc92', case=False) | CommandLine.str.contains(r'\ud83c\udfdb', case=False) | CommandLine.str.contains(r'\u26ea\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd4c', case=False) | CommandLine.str.contains(r'\ud83d\udd4d', case=False) | CommandLine.str.contains(r'\ud83d\uded5', case=False) | CommandLine.str.contains(r'\ud83d\udd4b', case=False) | CommandLine.str.contains(r'\u26e9', case=False) | CommandLine.str.contains(r'\ud83d\udee4', case=False) | CommandLine.str.contains(r'\ud83d\udee3', case=False) | CommandLine.str.contains(r'\ud83d\uddfe', case=False) | CommandLine.str.contains(r'\ud83c\udf91', case=False) | CommandLine.str.contains(r'\ud83c\udfde', case=False) | CommandLine.str.contains(r'\ud83c\udf05', case=False) | CommandLine.str.contains(r'\ud83c\udf04', case=False) | CommandLine.str.contains(r'\ud83c\udf20', case=False) | CommandLine.str.contains(r'\ud83c\udf87', case=False) | CommandLine.str.contains(r'\ud83c\udf86', case=False) | CommandLine.str.contains(r'\ud83c\udf07', case=False) | CommandLine.str.contains(r'\ud83c\udf06', case=False) | CommandLine.str.contains(r'\ud83c\udfd9', case=False) | CommandLine.str.contains(r'\ud83c\udf03', case=False) | CommandLine.str.contains(r'\ud83c\udf0c', case=False) | CommandLine.str.contains(r'\ud83c\udf09', case=False) | CommandLine.str.contains(r'\ud83c\udf01', case=False) | CommandLine.str.contains(r'\u231a\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udcf1', case=False) | CommandLine.str.contains(r'\ud83d\udcf2', case=False) | CommandLine.str.contains(r'\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\u2328\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udda5', case=False) | CommandLine.str.contains(r'\ud83d\udda8', case=False) | CommandLine.str.contains(r'\ud83d\uddb1', case=False) | CommandLine.str.contains(r'\ud83d\uddb2', case=False) | CommandLine.str.contains(r'\ud83d\udd79', case=False) | CommandLine.str.contains(r'\ud83d\udddc', case=False) | CommandLine.str.contains(r'\ud83d\udcbd', case=False) | CommandLine.str.contains(r'\ud83d\udcbe', case=False) | CommandLine.str.contains(r'\ud83d\udcbf', case=False) | CommandLine.str.contains(r'\ud83d\udcc0', case=False) | CommandLine.str.contains(r'\ud83d\udcfc', case=False) | CommandLine.str.contains(r'\ud83d\udcf7', case=False) | CommandLine.str.contains(r'\ud83d\udcf8', case=False) | CommandLine.str.contains(r'\ud83d\udcf9', case=False) | CommandLine.str.contains(r'\ud83c\udfa5', case=False) | CommandLine.str.contains(r'\ud83d\udcfd', case=False) | CommandLine.str.contains(r'\ud83c\udf9e', case=False) | CommandLine.str.contains(r'\ud83d\udcde', case=False) | CommandLine.str.contains(r'\u260e\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udcdf', case=False) | CommandLine.str.contains(r'\ud83d\udce0', case=False) | CommandLine.str.contains(r'\ud83d\udcfa', case=False) | CommandLine.str.contains(r'\ud83d\udcfb', case=False) | CommandLine.str.contains(r'\ud83c\udf99', case=False) | CommandLine.str.contains(r'\ud83c\udf9a', case=False) | CommandLine.str.contains(r'\ud83c\udf9b', case=False) | CommandLine.str.contains(r'\ud83e\udded', case=False) | CommandLine.str.contains(r'\u23f1', case=False) | CommandLine.str.contains(r'\u23f2', case=False) | CommandLine.str.contains(r'\u23f0', case=False) | CommandLine.str.contains(r'\ud83d\udd70', case=False) | CommandLine.str.contains(r'\u231b\ufe0f', case=False) | CommandLine.str.contains(r'\u23f3', case=False) | CommandLine.str.contains(r'\ud83d\udce1', case=False) | CommandLine.str.contains(r'\ud83d\udd0b', case=False) | CommandLine.str.contains(r'\ud83e\udeab', case=False) | CommandLine.str.contains(r'\ud83d\udd0c', case=False) | CommandLine.str.contains(r'\ud83d\udca1', case=False) | CommandLine.str.contains(r'\ud83d\udd26', case=False) | CommandLine.str.contains(r'\ud83d\udd6f', case=False) | CommandLine.str.contains(r'\ud83e\ude94', case=False) | CommandLine.str.contains(r'\ud83e\uddef', case=False) | CommandLine.str.contains(r'\ud83d\udee2', case=False) | CommandLine.str.contains(r'\ud83d\udcb8', case=False) | CommandLine.str.contains(r'\ud83d\udcb5', case=False) | CommandLine.str.contains(r'\ud83d\udcb4', case=False) | CommandLine.str.contains(r'\ud83d\udcb6', case=False) | CommandLine.str.contains(r'\ud83d\udcb7', case=False) | CommandLine.str.contains(r'\ud83e\ude99', case=False) | CommandLine.str.contains(r'\ud83d\udcb0', case=False) | CommandLine.str.contains(r'\ud83d\udcb3', case=False) | CommandLine.str.contains(r'\ud83d\udc8e', case=False) | CommandLine.str.contains(r'\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\ude9c', case=False) | CommandLine.str.contains(r'\ud83e\uddf0', case=False) | CommandLine.str.contains(r'\ud83e\ude9b', case=False) | CommandLine.str.contains(r'\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83d\udd28', case=False) | CommandLine.str.contains(r'\u2692', case=False) | CommandLine.str.contains(r'\ud83d\udee0', case=False) | CommandLine.str.contains(r'\u26cf', case=False) | CommandLine.str.contains(r'\ud83e\ude9a', case=False) | CommandLine.str.contains(r'\ud83d\udd29', case=False) | CommandLine.str.contains(r'\u2699\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udea4', case=False) | CommandLine.str.contains(r'\ud83e\uddf1', case=False) | CommandLine.str.contains(r'\u26d3', case=False) | CommandLine.str.contains(r'\ud83e\uddf2', case=False) | CommandLine.str.contains(r'\ud83d\udd2b', case=False) | CommandLine.str.contains(r'\ud83d\udca3', case=False) | CommandLine.str.contains(r'\ud83e\udde8', case=False) | CommandLine.str.contains(r'\ud83e\ude93', case=False) | CommandLine.str.contains(r'\ud83d\udd2a', case=False) | CommandLine.str.contains(r'\ud83d\udde1', case=False) | CommandLine.str.contains(r'\u2694\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udee1', case=False) | CommandLine.str.contains(r'\ud83d\udeac', case=False) | CommandLine.str.contains(r'\u26b0\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udea6', case=False) | CommandLine.str.contains(r'\u26b1\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udffa', case=False) | CommandLine.str.contains(r'\ud83d\udd2e', case=False) | CommandLine.str.contains(r'\ud83d\udcff', case=False) | CommandLine.str.contains(r'\ud83e\uddff', case=False) | CommandLine.str.contains(r'\ud83e\udeac', case=False) | CommandLine.str.contains(r'\ud83d\udc88', case=False) | CommandLine.str.contains(r'\u2697\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd2d', case=False) | CommandLine.str.contains(r'\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83d\udd73', case=False) | CommandLine.str.contains(r'\ud83e\ude79', case=False) | CommandLine.str.contains(r'\ud83e\ude7a', case=False) | CommandLine.str.contains(r'\ud83e\ude7b', case=False) | CommandLine.str.contains(r'\ud83e\ude7c', case=False) | CommandLine.str.contains(r'\ud83d\udc8a', case=False) | CommandLine.str.contains(r'\ud83d\udc89', case=False) | CommandLine.str.contains(r'\ud83e\ude78', case=False) | CommandLine.str.contains(r'\ud83e\uddec', case=False) | CommandLine.str.contains(r'\ud83e\udda0', case=False) | CommandLine.str.contains(r'\ud83e\uddeb', case=False) | CommandLine.str.contains(r'\ud83e\uddea', case=False) | CommandLine.str.contains(r'\ud83c\udf21', case=False) | CommandLine.str.contains(r'\ud83e\uddf9', case=False) | CommandLine.str.contains(r'\ud83e\udea0', case=False) | CommandLine.str.contains(r'\ud83e\uddfa', case=False) | CommandLine.str.contains(r'\ud83e\uddfb', case=False) | CommandLine.str.contains(r'\ud83d\udebd', case=False) | CommandLine.str.contains(r'\ud83d\udeb0', case=False) | CommandLine.str.contains(r'\ud83d\udebf', case=False) | CommandLine.str.contains(r'\ud83d\udec1', case=False) | CommandLine.str.contains(r'\ud83d\udec0', case=False) | CommandLine.str.contains(r'\ud83e\uddfc', case=False) | CommandLine.str.contains(r'\ud83e\udea5', case=False) | CommandLine.str.contains(r'\ud83e\ude92', case=False) | CommandLine.str.contains(r'\ud83e\uddfd', case=False) | CommandLine.str.contains(r'\ud83e\udea3', case=False) | CommandLine.str.contains(r'\ud83e\uddf4', case=False) | CommandLine.str.contains(r'\ud83d\udece', case=False) | CommandLine.str.contains(r'\ud83d\udd11', case=False) | CommandLine.str.contains(r'\ud83d\udddd', case=False) | CommandLine.str.contains(r'\ud83d\udeaa', case=False) | CommandLine.str.contains(r'\ud83e\ude91', case=False) | CommandLine.str.contains(r'\ud83d\udecb', case=False) | CommandLine.str.contains(r'\ud83d\udecf', case=False) | CommandLine.str.contains(r'\ud83d\udecc', case=False) | CommandLine.str.contains(r'\ud83e\uddf8', case=False) | CommandLine.str.contains(r'\ud83e\ude86', case=False) | CommandLine.str.contains(r'\ud83d\uddbc', case=False) | CommandLine.str.contains(r'\ud83e\ude9e', case=False) | CommandLine.str.contains(r'\ud83e\ude9f', case=False) | CommandLine.str.contains(r'\ud83d\udecd', case=False) | CommandLine.str.contains(r'\ud83d\uded2', case=False) | CommandLine.str.contains(r'\ud83c\udf81', case=False) | CommandLine.str.contains(r'\ud83c\udf88', case=False) | CommandLine.str.contains(r'\ud83c\udf8f', case=False) | CommandLine.str.contains(r'\ud83c\udf80', case=False) | CommandLine.str.contains(r'\ud83e\ude84', case=False) | CommandLine.str.contains(r'\ud83e\ude85', case=False) | CommandLine.str.contains(r'\ud83c\udf8a', case=False) | CommandLine.str.contains(r'\ud83c\udf89', case=False) | CommandLine.str.contains(r'\ud83e\udea9', case=False) | CommandLine.str.contains(r'\ud83c\udf8e', case=False) | CommandLine.str.contains(r'\ud83c\udfee', case=False) | CommandLine.str.contains(r'\ud83c\udf90', case=False) | CommandLine.str.contains(r'\ud83e\udde7', case=False) | CommandLine.str.contains(r'\u2709\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udce9', case=False) | CommandLine.str.contains(r'\ud83d\udce8', case=False) | CommandLine.str.contains(r'\ud83d\udce7', case=False) | CommandLine.str.contains(r'\ud83d\udc8c', case=False) | CommandLine.str.contains(r'\ud83d\udce5', case=False) | CommandLine.str.contains(r'\ud83d\udce4', case=False) | CommandLine.str.contains(r'\ud83d\udce6', case=False) | CommandLine.str.contains(r'\ud83c\udff7', case=False) | CommandLine.str.contains(r'\ud83e\udea7', case=False) | CommandLine.str.contains(r'\ud83d\udcea', case=False) | CommandLine.str.contains(r'\ud83d\udceb', case=False) | CommandLine.str.contains(r'\ud83d\udcec', case=False) | CommandLine.str.contains(r'\ud83d\udced', case=False) | CommandLine.str.contains(r'\ud83d\udcee', case=False) | CommandLine.str.contains(r'\ud83d\udcef', case=False) | CommandLine.str.contains(r'\ud83d\udcdc', case=False) | CommandLine.str.contains(r'\ud83d\udcc3', case=False) | CommandLine.str.contains(r'\ud83d\udcc4', case=False) | CommandLine.str.contains(r'\ud83d\udcd1', case=False) | CommandLine.str.contains(r'\ud83e\uddfe', case=False) | CommandLine.str.contains(r'\ud83d\udcca', case=False) | CommandLine.str.contains(r'\ud83d\udcc8', case=False) | CommandLine.str.contains(r'\ud83d\udcc9', case=False) | CommandLine.str.contains(r'\ud83d\uddd2', case=False) | CommandLine.str.contains(r'\ud83d\uddd3', case=False) | CommandLine.str.contains(r'\ud83d\udcc6', case=False) | CommandLine.str.contains(r'\ud83d\udcc5', case=False) | CommandLine.str.contains(r'\ud83d\uddd1', case=False) | CommandLine.str.contains(r'\ud83e\udeaa', case=False) | CommandLine.str.contains(r'\ud83d\udcc7', case=False) | CommandLine.str.contains(r'\ud83d\uddc3', case=False) | CommandLine.str.contains(r'\ud83d\uddf3', case=False) | CommandLine.str.contains(r'\ud83d\uddc4', case=False) | CommandLine.str.contains(r'\ud83d\udccb', case=False) | CommandLine.str.contains(r'\ud83d\udcc1', case=False) | CommandLine.str.contains(r'\ud83d\udcc2', case=False) | CommandLine.str.contains(r'\ud83d\uddc2', case=False) | CommandLine.str.contains(r'\ud83d\uddde', case=False) | CommandLine.str.contains(r'\ud83d\udcf0', case=False) | CommandLine.str.contains(r'\ud83d\udcd3', case=False) | CommandLine.str.contains(r'\ud83d\udcd4', case=False) | CommandLine.str.contains(r'\ud83d\udcd2', case=False) | CommandLine.str.contains(r'\ud83d\udcd5', case=False) | CommandLine.str.contains(r'\ud83d\udcd7', case=False) | CommandLine.str.contains(r'\ud83d\udcd8', case=False) | CommandLine.str.contains(r'\ud83d\udcd9', case=False) | CommandLine.str.contains(r'\ud83d\udcda', case=False) | CommandLine.str.contains(r'\ud83d\udcd6', case=False) | CommandLine.str.contains(r'\ud83d\udd16', case=False) | CommandLine.str.contains(r'\ud83e\uddf7', case=False) | CommandLine.str.contains(r'\ud83d\udd17', case=False) | CommandLine.str.contains(r'\ud83d\udcce', case=False) | CommandLine.str.contains(r'\ud83d\udd87', case=False) | CommandLine.str.contains(r'\ud83d\udcd0', case=False) | CommandLine.str.contains(r'\ud83d\udccf', case=False) | CommandLine.str.contains(r'\ud83e\uddee', case=False) | CommandLine.str.contains(r'\ud83d\udccc', case=False) | CommandLine.str.contains(r'\ud83d\udccd', case=False) | CommandLine.str.contains(r'\u2702\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd8a', case=False) | CommandLine.str.contains(r'\ud83d\udd8b', case=False) | CommandLine.str.contains(r'\u2712\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd8c', case=False) | CommandLine.str.contains(r'\ud83d\udd8d', case=False) | CommandLine.str.contains(r'\ud83d\udcdd', case=False) | CommandLine.str.contains(r'\u270f\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd0d', case=False) | CommandLine.str.contains(r'\ud83d\udd0e', case=False) | CommandLine.str.contains(r'\ud83d\udd0f', case=False) | CommandLine.str.contains(r'\ud83d\udd10', case=False) | CommandLine.str.contains(r'\ud83d\udd12', case=False) | CommandLine.str.contains(r'\ud83d\udd13\u2764\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udde1', case=False) | CommandLine.str.contains(r'\ud83d\udc9b', case=False) | CommandLine.str.contains(r'\ud83d\udc9a', case=False) | CommandLine.str.contains(r'\ud83d\udc99', case=False) | CommandLine.str.contains(r'\ud83d\udc9c', case=False) | CommandLine.str.contains(r'\ud83d\udda4', case=False) | CommandLine.str.contains(r'\ud83e\udd0d', case=False) | CommandLine.str.contains(r'\ud83e\udd0e', case=False) | CommandLine.str.contains(r'\u2764\ufe0f\u200d\ud83d\udd25', case=False) | CommandLine.str.contains(r'\u2764\ufe0f\u200d\ud83e\ude79', case=False) | CommandLine.str.contains(r'\ud83d\udc94', case=False) | CommandLine.str.contains(r'\u2763\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc95', case=False) | CommandLine.str.contains(r'\ud83d\udc9e', case=False) | CommandLine.str.contains(r'\ud83d\udc93', case=False) | CommandLine.str.contains(r'\ud83d\udc97', case=False) | CommandLine.str.contains(r'\ud83d\udc96', case=False) | CommandLine.str.contains(r'\ud83d\udc98', case=False) | CommandLine.str.contains(r'\ud83d\udc9d', case=False) | CommandLine.str.contains(r'\ud83d\udc9f', case=False) | CommandLine.str.contains(r'\u262e\ufe0f', case=False) | CommandLine.str.contains(r'\u271d\ufe0f', case=False) | CommandLine.str.contains(r'\u262a\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd49', case=False) | CommandLine.str.contains(r'\u2638\ufe0f', case=False) | CommandLine.str.contains(r'\u2721\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd2f', case=False) | CommandLine.str.contains(r'\ud83d\udd4e', case=False) | CommandLine.str.contains(r'\u262f\ufe0f', case=False) | CommandLine.str.contains(r'\u2626\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\uded0', case=False) | CommandLine.str.contains(r'\u26ce', case=False) | CommandLine.str.contains(r'\u2648\ufe0f', case=False) | CommandLine.str.contains(r'\u2649\ufe0f', case=False) | CommandLine.str.contains(r'\u264a\ufe0f', case=False) | CommandLine.str.contains(r'\u264b\ufe0f', case=False) | CommandLine.str.contains(r'\u264c\ufe0f', case=False) | CommandLine.str.contains(r'\u264d\ufe0f', case=False) | CommandLine.str.contains(r'\u264e\ufe0f', case=False) | CommandLine.str.contains(r'\u264f\ufe0f', case=False) | CommandLine.str.contains(r'\u2650\ufe0f', case=False) | CommandLine.str.contains(r'\u2651\ufe0f', case=False) | CommandLine.str.contains(r'\u2652\ufe0f', case=False) | CommandLine.str.contains(r'\u2653\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udd94', case=False) | CommandLine.str.contains(r'\u269b\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\ude51', case=False) | CommandLine.str.contains(r'\u2622\ufe0f', case=False) | CommandLine.str.contains(r'\u2623\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udcf4', case=False) | CommandLine.str.contains(r'\ud83d\udcf3', case=False) | CommandLine.str.contains(r'\ud83c\ude36', case=False) | CommandLine.str.contains(r'\ud83c\ude1a\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\ude38', case=False) | CommandLine.str.contains(r'\ud83c\ude3a', case=False) | CommandLine.str.contains(r'\ud83c\ude37\ufe0f', case=False) | CommandLine.str.contains(r'\u2734\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udd9a', case=False) | CommandLine.str.contains(r'\ud83d\udcae', case=False) | CommandLine.str.contains(r'\ud83c\ude50', case=False) | CommandLine.str.contains(r'\u3299\ufe0f', case=False) | CommandLine.str.contains(r'\u3297\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\ude34', case=False) | CommandLine.str.contains(r'\ud83c\ude35', case=False) | CommandLine.str.contains(r'\ud83c\ude39', case=False) | CommandLine.str.contains(r'\ud83c\ude32', case=False) | CommandLine.str.contains(r'\ud83c\udd70\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udd71\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udd8e', case=False) | CommandLine.str.contains(r'\ud83c\udd91', case=False) | CommandLine.str.contains(r'\ud83c\udd7e\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udd98', case=False) | CommandLine.str.contains(r'\u274c', case=False) | CommandLine.str.contains(r'\u2b55\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\uded1', case=False) | CommandLine.str.contains(r'\u26d4\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udcdb', case=False) | CommandLine.str.contains(r'\ud83d\udeab', case=False) | CommandLine.str.contains(r'\ud83d\udcaf', case=False) | CommandLine.str.contains(r'\ud83d\udca2', case=False) | CommandLine.str.contains(r'\u2668\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb7', case=False) | CommandLine.str.contains(r'\ud83d\udeaf', case=False) | CommandLine.str.contains(r'\ud83d\udeb3', case=False) | CommandLine.str.contains(r'\ud83d\udeb1', case=False) | CommandLine.str.contains(r'\ud83d\udd1e', case=False) | CommandLine.str.contains(r'\ud83d\udcf5', case=False) | CommandLine.str.contains(r'\ud83d\udead', case=False) | CommandLine.str.contains(r'\u2757\ufe0f', case=False) | CommandLine.str.contains(r'\u2755', case=False) | CommandLine.str.contains(r'\u2753', case=False) | CommandLine.str.contains(r'\u2754', case=False) | CommandLine.str.contains(r'\u203c\ufe0f', case=False) | CommandLine.str.contains(r'\u2049\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd05', case=False) | CommandLine.str.contains(r'\ud83d\udd06', case=False) | CommandLine.str.contains(r'\u303d\ufe0f', case=False) | CommandLine.str.contains(r'\u26a0\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb8', case=False) | CommandLine.str.contains(r'\ud83d\udd31', case=False) | CommandLine.str.contains(r'\u269c\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd30', case=False) | CommandLine.str.contains(r'\u267b\ufe0f', case=False) | CommandLine.str.contains(r'\u2705', case=False) | CommandLine.str.contains(r'\ud83c\ude2f\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udcb9', case=False) | CommandLine.str.contains(r'\u2747\ufe0f', case=False) | CommandLine.str.contains(r'\u2733\ufe0f', case=False) | CommandLine.str.contains(r'\u274e', case=False) | CommandLine.str.contains(r'\ud83c\udf10', case=False) | CommandLine.str.contains(r'\ud83d\udca0', case=False) | CommandLine.str.contains(r'\u24c2\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udf00', case=False) | CommandLine.str.contains(r'\ud83d\udca4', case=False) | CommandLine.str.contains(r'\ud83c\udfe7', case=False) | CommandLine.str.contains(r'\ud83d\udebe', case=False) | CommandLine.str.contains(r'\u267f\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udd7f\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\uded7', case=False) | CommandLine.str.contains(r'\ud83c\ude33', case=False) | CommandLine.str.contains(r'\ud83c\ude02\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udec2', case=False) | CommandLine.str.contains(r'\ud83d\udec3', case=False) | CommandLine.str.contains(r'\ud83d\udec4', case=False) | CommandLine.str.contains(r'\ud83d\udec5', case=False) | CommandLine.str.contains(r'\ud83d\udeb9', case=False) | CommandLine.str.contains(r'\ud83d\udeba', case=False) | CommandLine.str.contains(r'\ud83d\udebc', case=False) | CommandLine.str.contains(r'\u26a7', case=False) | CommandLine.str.contains(r'\ud83d\udebb', case=False) | CommandLine.str.contains(r'\ud83d\udeae', case=False) | CommandLine.str.contains(r'\ud83c\udfa6', case=False) | CommandLine.str.contains(r'\ud83d\udcf6', case=False) | CommandLine.str.contains(r'\ud83c\ude01', case=False) | CommandLine.str.contains(r'\ud83d\udd23', case=False) | CommandLine.str.contains(r'\u2139\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd24', case=False) | CommandLine.str.contains(r'\ud83d\udd21', case=False) | CommandLine.str.contains(r'\ud83d\udd20', case=False) | CommandLine.str.contains(r'\ud83c\udd96', case=False) | CommandLine.str.contains(r'\ud83c\udd97', case=False) | CommandLine.str.contains(r'\ud83c\udd99', case=False) | CommandLine.str.contains(r'\ud83c\udd92', case=False) | CommandLine.str.contains(r'\ud83c\udd95', case=False) | CommandLine.str.contains(r'\ud83c\udd93', case=False) | CommandLine.str.contains(r'0\ufe0f\u20e3', case=False) | CommandLine.str.contains(r'1\ufe0f\u20e3', case=False) | CommandLine.str.contains(r'2\ufe0f\u20e3', case=False) | CommandLine.str.contains(r'3\ufe0f\u20e3', case=False) | CommandLine.str.contains(r'4\ufe0f\u20e3', case=False) | CommandLine.str.contains(r'5\ufe0f\u20e3', case=False) | CommandLine.str.contains(r'6\ufe0f\u20e3', case=False) | CommandLine.str.contains(r'7\ufe0f\u20e3', case=False) | CommandLine.str.contains(r'8\ufe0f\u20e3', case=False) | CommandLine.str.contains(r'9\ufe0f\u20e3', case=False) | CommandLine.str.contains(r'\ud83d\udd1f', case=False) | CommandLine.str.contains(r'\ud83d\udd22', case=False) | CommandLine.str.contains(r'#\ufe0f\u20e3', case=False) | CommandLine.str.contains(r'\ufe0f\u20e3', case=False) | CommandLine.str.contains(r'\u23cf\ufe0f', case=False) | CommandLine.str.contains(r'\u25b6\ufe0f', case=False) | CommandLine.str.contains(r'\u23f8', case=False) | CommandLine.str.contains(r'\u23ef', case=False) | CommandLine.str.contains(r'\u23f9', case=False) | CommandLine.str.contains(r'\u23fa', case=False) | CommandLine.str.contains(r'\u23ed', case=False) | CommandLine.str.contains(r'\u23ee', case=False) | CommandLine.str.contains(r'\u23e9', case=False) | CommandLine.str.contains(r'\u23ea', case=False) | CommandLine.str.contains(r'\u23eb', case=False) | CommandLine.str.contains(r'\u23ec', case=False) | CommandLine.str.contains(r'\u25c0\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd3c', case=False) | CommandLine.str.contains(r'\ud83d\udd3d', case=False) | CommandLine.str.contains(r'\u27a1\ufe0f', case=False) | CommandLine.str.contains(r'\u2b05\ufe0f', case=False) | CommandLine.str.contains(r'\u2b06\ufe0f', case=False) | CommandLine.str.contains(r'\u2b07\ufe0f', case=False) | CommandLine.str.contains(r'\u2197\ufe0f', case=False) | CommandLine.str.contains(r'\u2198\ufe0f', case=False) | CommandLine.str.contains(r'\u2199\ufe0f', case=False) | CommandLine.str.contains(r'\u2196\ufe0f', case=False) | CommandLine.str.contains(r'\u2195\ufe0f', case=False) | CommandLine.str.contains(r'\u2194\ufe0f', case=False) | CommandLine.str.contains(r'\u21aa\ufe0f', case=False) | CommandLine.str.contains(r'\u21a9\ufe0f', case=False) | CommandLine.str.contains(r'\u2934\ufe0f', case=False) | CommandLine.str.contains(r'\u2935\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd00', case=False) | CommandLine.str.contains(r'\ud83d\udd01', case=False) | CommandLine.str.contains(r'\ud83d\udd02', case=False) | CommandLine.str.contains(r'\ud83d\udd04', case=False) | CommandLine.str.contains(r'\ud83d\udd03', case=False) | CommandLine.str.contains(r'\ud83c\udfb5', case=False) | CommandLine.str.contains(r'\ud83c\udfb6', case=False) | CommandLine.str.contains(r'\u2795', case=False) | CommandLine.str.contains(r'\u2796', case=False) | CommandLine.str.contains(r'\u2797', case=False) | CommandLine.str.contains(r'\u2716\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udff0', case=False) | CommandLine.str.contains(r'\u267e', case=False) | CommandLine.str.contains(r'\ud83d\udcb2', case=False) | CommandLine.str.contains(r'\ud83d\udcb1', case=False) | CommandLine.str.contains(r'\u2122\ufe0f', case=False) | CommandLine.str.contains(r'\u00a9\ufe0f', case=False) | CommandLine.str.contains(r'\u00ae\ufe0f', case=False) | CommandLine.str.contains(r'\u3030\ufe0f', case=False) | CommandLine.str.contains(r'\u27b0', case=False) | CommandLine.str.contains(r'\u27bf', case=False) | CommandLine.str.contains(r'\ud83d\udd1a', case=False) | CommandLine.str.contains(r'\ud83d\udd19', case=False) | CommandLine.str.contains(r'\ud83d\udd1b', case=False) | CommandLine.str.contains(r'\ud83d\udd1d', case=False) | CommandLine.str.contains(r'\ud83d\udd1c', case=False) | CommandLine.str.contains(r'\u2714\ufe0f', case=False) | CommandLine.str.contains(r'\u2611\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd18', case=False) | CommandLine.str.contains(r'\ud83d\udd34', case=False) | CommandLine.str.contains(r'\ud83d\udfe0', case=False) | CommandLine.str.contains(r'\ud83d\udfe1', case=False) | CommandLine.str.contains(r'\ud83d\udfe2', case=False) | CommandLine.str.contains(r'\ud83d\udd35', case=False) | CommandLine.str.contains(r'\ud83d\udfe3', case=False) | CommandLine.str.contains(r'\u26ab\ufe0f', case=False) | CommandLine.str.contains(r'\u26aa\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udfe4', case=False) | CommandLine.str.contains(r'\ud83d\udd3a', case=False) | CommandLine.str.contains(r'\ud83d\udd3b', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Dosfuscation Activity",
        "id": "a77c1610-fc73-4019-8e29-0f51efc04a51",
        "status": "test",
        "description": "Detects possible payload obfuscation via the commandline",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'^^', case=False) | CommandLine.str.contains(r'^|^', case=False) | CommandLine.str.contains(r',;,', case=False) | CommandLine.str.contains(r';;;;', case=False) | CommandLine.str.contains(r';; ;;', case=False) | CommandLine.str.contains(r'(,(,', case=False) | CommandLine.str.contains(r'%COMSPEC:~', case=False) | CommandLine.str.contains(r' c^m^d', case=False) | CommandLine.str.contains(r'^c^m^d', case=False) | CommandLine.str.contains(r' c^md', case=False) | CommandLine.str.contains(r' cm^d', case=False) | CommandLine.str.contains(r'^cm^d', case=False) | CommandLine.str.contains(r' s^et ', case=False) | CommandLine.str.contains(r' s^e^t ', case=False) | CommandLine.str.contains(r' se^t ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Csi.exe Usage",
        "id": "40b95d31-1afc-469e-8d34-9a3a667d058e",
        "status": "test",
        "description": "Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft \u201cRoslyn\u201d Community Technology Preview was named 'rcsi.exe'",
        "tags": [
            "attack.execution",
            "attack.t1072",
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\csi.exe', case=False) | Image.str.contains(r'\\\\rcsi.exe', case=False) | OriginalFileName==['csi.exe', 'rcsi.exe']) & Company=='Microsoft Corporation'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Taskkill Symantec Endpoint Protection",
        "id": "4a6713f6-3331-11ed-a261-0242ac120002",
        "status": "test",
        "description": "Detects one of the possible scenarios for disabling Symantec Endpoint Protection.\nSymantec Endpoint Protection antivirus software services incorrectly implement the protected service mechanism.\nAs a result, the NT AUTHORITY/SYSTEM user can execute the taskkill /im command several times ccSvcHst.exe /f, thereby killing the process belonging to the service, and thus shutting down the service.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'taskkill', case=False) & CommandLine.str.contains(r' /F ', case=False) & CommandLine.str.contains(r' /IM ', case=False) & CommandLine.str.contains(r'ccSvcHst.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Cabinet File Execution Via Msdt.EXE",
        "id": "dc4576d4-7467-424f-9eee-fd2b02855fe0",
        "status": "test",
        "description": "Detects execution of msdt.exe using the \"cab\" flag which could indicates suspicious diagcab files with embedded answer files leveraging CVE-2022-30190",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\msdt.exe', case=False) | OriginalFileName=='msdt.exe') & (CommandLine.str.contains(r' -cab ', case=False) | CommandLine.str.contains(r' /cab ', case=False) | CommandLine.str.contains(r' \u2013cab ', case=False) | CommandLine.str.contains(r' \u2014cab ', case=False) | CommandLine.str.contains(r' \u2015cab ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use MSHTA",
        "id": "ac20ae82-8758-4f38-958e-b44a3140ca88",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'set', case=False) & CommandLine.str.contains(r'&&', case=False) & CommandLine.str.contains(r'mshta', case=False) & CommandLine.str.contains(r'vbscript:createobject', case=False) & CommandLine.str.contains(r'.run', case=False) & CommandLine.str.contains(r'(window.close)', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Exchange PowerShell Snap-Ins Usage",
        "id": "25676e10-2121-446e-80a4-71ff8506af47",
        "status": "test",
        "description": "Detects adding and using Exchange PowerShell snap-ins to export mailbox data. As seen used by HAFNIUM and APT27",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.collection",
            "attack.t1114"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & CommandLine.str.contains(r'Add-PSSnapin', case=False) & (CommandLine.str.contains(r'Microsoft.Exchange.Powershell.Snapin', case=False) | CommandLine.str.contains(r'Microsoft.Exchange.Management.PowerShell.SnapIn', case=False)) & ~ (ParentImage=='C:\\\\Windows\\\\System32\\\\msiexec.exe' & CommandLine.str.contains(r'$exserver=Get-ExchangeServer ([Environment]::MachineName) -ErrorVariable exerr 2> $null', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Potential Impacket Lateral Movement Activity",
        "id": "10c14723-61c7-4c75-92ca-9af245723ad2",
        "status": "stable",
        "description": "Detects wmiexec/dcomexec/atexec/smbexec from Impacket framework",
        "tags": [
            "attack.execution",
            "attack.t1047",
            "attack.lateral-movement",
            "attack.t1021.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((ParentImage.str.contains(r'\\\\wmiprvse.exe', case=False) | ParentImage.str.contains(r'\\\\mmc.exe', case=False) | ParentImage.str.contains(r'\\\\explorer.exe', case=False) | ParentImage.str.contains(r'\\\\services.exe', case=False)) & CommandLine.str.contains(r'cmd.exe', case=False) & CommandLine.str.contains(r'/Q', case=False) & CommandLine.str.contains(r'/c', case=False) & CommandLine.str.contains(r'\\\\\\\\127.0.0.1\\\\', case=False) & CommandLine.str.contains(r'&1', case=False) | (ParentCommandLine.str.contains(r'svchost.exe -k netsvcs', case=False) | ParentCommandLine.str.contains(r'taskeng.exe', case=False)) & CommandLine.str.contains(r'cmd.exe', case=False) & CommandLine.str.contains(r'/C', case=False) & CommandLine.str.contains(r'Windows\\\\Temp\\\\', case=False) & CommandLine.str.contains(r'&1', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential RDP Tunneling Via Plink",
        "id": "f38ce0b9-5e97-4b47-a211-7dc8d8b871da",
        "status": "test",
        "description": "Execution of plink to perform data exfiltration and tunneling",
        "tags": [
            "attack.command-and-control",
            "attack.t1572"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\plink.exe', case=False) & CommandLine.str.contains(r':127.0.0.1:3389', case=False) | Image.str.contains(r'\\\\plink.exe', case=False) & CommandLine.str.contains(r':3389', case=False) & (CommandLine.str.contains(r' -P 443', case=False) | CommandLine.str.contains(r' -P 22', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Defense Evasion Activity Via Emoji Usage In CommandLine - 2",
        "id": "c98f2a0d-e1b8-4f76-90d3-359caf88d6b9",
        "status": "test",
        "description": "Detects the usage of emojis in the command line, this could be a sign of potential defense evasion activity.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\ud83e\udd37\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc83\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udd7a\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udd74\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc6d\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc6c\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc6b\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc7\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83c\udfc2\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udffc', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udec0\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udecc\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc4b\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd1a\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udd90\ud83c\udffd', case=False) | CommandLine.str.contains(r'\u270b\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udd96\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc4c\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd0c\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd0f\ud83c\udffd', case=False) | CommandLine.str.contains(r'\u270c\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd1e\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef0\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd1f\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd18\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd19\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef5\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef2\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef3\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef4\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc48\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc49\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc46\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udd95\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc47\ud83c\udffd', case=False) | CommandLine.str.contains(r'\u261d\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc4d\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc4e\ud83c\udffd', case=False) | CommandLine.str.contains(r'\u270a\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc4a\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd1b\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd1c\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc4f\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef6\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\ude4c\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc50\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd32\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\ude4f\ud83c\udffd', case=False) | CommandLine.str.contains(r'\u270d\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udcaa\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddb5\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddb6\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc42\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddbb\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc43\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc76\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc67\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd2\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc66\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc75\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd3\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc74\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc72\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd5\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc78\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udec5\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd34\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd77\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd36\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83c\udf84', case=False) | CommandLine.str.contains(r'\ud83c\udf85\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc7c\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd30\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udec4\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udec3\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd31\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc83\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udd7a\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udd74\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc6d\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc6c\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc6b\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc7\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83c\udfc2\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udffd', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udec0\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udecc\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc4b\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd1a\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udd90\ud83c\udffe', case=False) | CommandLine.str.contains(r'\u270b\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udd96\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc4c\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd0c\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd0f\ud83c\udffe', case=False) | CommandLine.str.contains(r'\u270c\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd1e\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef0\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd1f\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd18\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd19\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef5\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef2\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef3\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef4\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc48\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc49\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc46\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udd95\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc47\ud83c\udffe', case=False) | CommandLine.str.contains(r'\u261d\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc4d\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc4e\ud83c\udffe', case=False) | CommandLine.str.contains(r'\u270a\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc4a\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd1b\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd1c\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc4f\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef6\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\ude4c\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc50\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd32\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\ude4f\ud83c\udffe', case=False) | CommandLine.str.contains(r'\u270d\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udcaa\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddb5\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddb6\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc42\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddbb\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc43\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc76\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc67\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd2\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc66\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc75\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd3\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc74\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc72\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd5\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc78\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udec5\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd34\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd77\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd36\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83c\udf84', case=False) | CommandLine.str.contains(r'\ud83c\udf85\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc7c\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd30\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udec4\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udec3\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd31\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc83\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udd7a\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc6d\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc6c\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc6b\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc7\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83c\udfc2\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udffe', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udec0\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udecc\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc4b\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd1a\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udd90\ud83c\udfff', case=False) | CommandLine.str.contains(r'\u270b\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udd96\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc4c\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd0c\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd0f\ud83c\udfff', case=False) | CommandLine.str.contains(r'\u270c\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd1e\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef0\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd1f\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd18\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd19\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef5\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef2\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef3\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef4\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc48\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc49\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc46\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udd95\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc47\ud83c\udfff', case=False) | CommandLine.str.contains(r'\u261d\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc4d\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc4e\ud83c\udfff', case=False) | CommandLine.str.contains(r'\u270a\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc4a\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd1b\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd1c\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc4f\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef6\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\ude4c\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc50\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd32\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\ude4f\ud83c\udfff', case=False) | CommandLine.str.contains(r'\u270d\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd33\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udcaa\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddb5\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddb6\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc42\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddbb\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc43\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc76\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc67\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd2\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc66\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83e\uddb1', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83e\uddb0', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc71\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83e\uddb3', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83e\uddb2', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc75\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd3\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc74\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc72\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc73\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd5\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc6e\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc77\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc82\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udd75\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\u2695\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83c\udf3e', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83c\udf73', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83c\udf93', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa4', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83c\udfeb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83c\udfed', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83d\udcbc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83d\udd27', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83d\udd2c', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83c\udfa8', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83d\ude92', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\u2708\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83d\ude80', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\u2696\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc70\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd35\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc78\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udec5\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd34\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd77\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddb8\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddb9\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd36\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83c\udf84', case=False) | CommandLine.str.contains(r'\ud83c\udf85\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd9\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udddd\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udddb\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udddc\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddda\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc7c\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd30\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udec4\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udec3\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd31\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83c\udf7c', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\ude47\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc81\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\ude45\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\ude46\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\ude4b\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddcf\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd26\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd37\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\ude4e\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\ude4d\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc87\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc86\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd6\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc83\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udd7a\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udd74\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83e\uddbd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83e\uddbc', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udeb6\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\ud83e\uddaf', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddce\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83c\udfc3\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddcd\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc6d\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc6c\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc6b\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd7\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc7\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83c\udfc2\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83c\udfcc\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83c\udfc4\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udea3\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83c\udfca\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udfff', case=False) | CommandLine.str.contains(r'\u26f9\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83c\udfcb\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udeb4\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udeb5\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd38\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd3d\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd3e\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd39\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd8\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udec0\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udecc\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc36', case=False) | CommandLine.str.contains(r'\ud83d\udc31', case=False) | CommandLine.str.contains(r'\ud83d\udc2d', case=False) | CommandLine.str.contains(r'\ud83d\udc39', case=False) | CommandLine.str.contains(r'\ud83d\udc30', case=False) | CommandLine.str.contains(r'\ud83e\udd8a', case=False) | CommandLine.str.contains(r'\ud83d\udc3b', case=False) | CommandLine.str.contains(r'\ud83d\udc3c', case=False) | CommandLine.str.contains(r'\ud83d\udc3b\u200d\u2744\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc28', case=False) | CommandLine.str.contains(r'\ud83d\udc2f', case=False) | CommandLine.str.contains(r'\ud83e\udd81', case=False) | CommandLine.str.contains(r'\ud83d\udc2e', case=False) | CommandLine.str.contains(r'\ud83d\udc37', case=False) | CommandLine.str.contains(r'\ud83d\udc3d', case=False) | CommandLine.str.contains(r'\ud83d\udc38', case=False) | CommandLine.str.contains(r'\ud83d\udc35', case=False) | CommandLine.str.contains(r'\ud83d\ude48', case=False) | CommandLine.str.contains(r'\ud83d\ude49', case=False) | CommandLine.str.contains(r'\ud83d\ude4a', case=False) | CommandLine.str.contains(r'\ud83d\udc12', case=False) | CommandLine.str.contains(r'\ud83d\udc14', case=False) | CommandLine.str.contains(r'\ud83d\udc27', case=False) | CommandLine.str.contains(r'\ud83d\udc26', case=False) | CommandLine.str.contains(r'\ud83d\udc24', case=False) | CommandLine.str.contains(r'\ud83d\udc23', case=False) | CommandLine.str.contains(r'\ud83d\udc25', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Key Manager Access",
        "id": "a4694263-59a8-4608-a3a0-6f8d3a51664c",
        "status": "test",
        "description": "Detects the invocation of the Stored User Names and Passwords dialogue (Key Manager)",
        "tags": [
            "attack.credential-access",
            "attack.t1555.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & CommandLine.str.contains(r'keymgr', case=False) & CommandLine.str.contains(r'KRShowKeyMgr', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Download From File-Sharing Website Via Bitsadmin",
        "id": "8518ed3d-f7c9-4601-a26c-f361a4256a0c",
        "status": "experimental",
        "description": "Detects usage of bitsadmin downloading a file from a suspicious domain",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1197",
            "attack.s0190",
            "attack.t1036.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\bitsadmin.exe', case=False) | OriginalFileName=='bitsadmin.exe') & (CommandLine.str.contains(r' /transfer ', case=False) | CommandLine.str.contains(r' /create ', case=False) | CommandLine.str.contains(r' /addfile ', case=False)) & (CommandLine.str.contains(r'.githubusercontent.com', case=False) | CommandLine.str.contains(r'anonfiles.com', case=False) | CommandLine.str.contains(r'cdn.discordapp.com', case=False) | CommandLine.str.contains(r'ddns.net', case=False) | CommandLine.str.contains(r'dl.dropboxusercontent.com', case=False) | CommandLine.str.contains(r'ghostbin.co', case=False) | CommandLine.str.contains(r'glitch.me', case=False) | CommandLine.str.contains(r'gofile.io', case=False) | CommandLine.str.contains(r'hastebin.com', case=False) | CommandLine.str.contains(r'mediafire.com', case=False) | CommandLine.str.contains(r'mega.nz', case=False) | CommandLine.str.contains(r'onrender.com', case=False) | CommandLine.str.contains(r'pages.dev', case=False) | CommandLine.str.contains(r'paste.ee', case=False) | CommandLine.str.contains(r'pastebin.com', case=False) | CommandLine.str.contains(r'pastebin.pl', case=False) | CommandLine.str.contains(r'pastetext.net', case=False) | CommandLine.str.contains(r'privatlab.com', case=False) | CommandLine.str.contains(r'privatlab.net', case=False) | CommandLine.str.contains(r'send.exploit.in', case=False) | CommandLine.str.contains(r'sendspace.com', case=False) | CommandLine.str.contains(r'storage.googleapis.com', case=False) | CommandLine.str.contains(r'storjshare.io', case=False) | CommandLine.str.contains(r'supabase.co', case=False) | CommandLine.str.contains(r'temp.sh', case=False) | CommandLine.str.contains(r'transfer.sh', case=False) | CommandLine.str.contains(r'trycloudflare.com', case=False) | CommandLine.str.contains(r'ufile.io', case=False) | CommandLine.str.contains(r'w3spaces.com', case=False) | CommandLine.str.contains(r'workers.dev', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "RDP Connection Allowed Via Netsh.EXE",
        "id": "01aeb693-138d-49d2-9403-c4f52d7d3d62",
        "status": "test",
        "description": "Detects usage of the netsh command to open and allow connections to port 3389 (RDP). As seen used by Sarwent Malware",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\netsh.exe', case=False) | OriginalFileName=='netsh.exe') & CommandLine.str.contains(r'firewall ', case=False) & CommandLine.str.contains(r'add ', case=False) & CommandLine.str.contains(r'tcp ', case=False) & CommandLine.str.contains(r'3389', case=False) & (CommandLine.str.contains(r'portopening', case=False) | CommandLine.str.contains(r'allow', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Execution Of Non-Existing File",
        "id": "71158e3f-df67-472b-930e-7d287acaa3e1",
        "status": "test",
        "description": "Checks whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process)",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ~ Image.str.contains(r'\\\\', case=False) & ~ (Image is null | Image==['-', ''] | Image==['System', 'Registry', 'MemCompression', 'vmmem'] | CommandLine==['Registry', 'MemCompression', 'vmmem'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon System Information Discovery Via Wmic.EXE",
        "id": "9d5a1274-922a-49d0-87f3-8c653483b909",
        "status": "test",
        "description": "Detects the use of the WMI command-line (WMIC) utility to identify and display various system information,\nincluding OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS,\nand GPU driver products/versions.\nSome of these commands were used by Aurora Stealer in late 2022/early 2023.\n",
        "tags": [
            "attack.discovery",
            "attack.t1082"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description=='WMI Commandline Utility' | OriginalFileName=='wmic.exe' | Image.str.contains(r'\\\\WMIC.exe', case=False)) & (CommandLine.str.contains(r'LOGICALDISK get Name,Size,FreeSpace', case=False) | CommandLine.str.contains(r'os get Caption,OSArchitecture,Version', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Arbitrary File Download Via Squirrel.EXE",
        "id": "1e75c1cc-c5d4-42aa-ac3d-91b0b68b3b4c",
        "status": "test",
        "description": "Detects the usage of the \"Squirrel.exe\" to download arbitrary files. This binary is part of multiple Electron based software installations (Slack, Teams, Discord, etc.)\n",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\squirrel.exe', case=False) | Image.str.contains(r'\\\\update.exe', case=False)) & (CommandLine.str.contains(r' --download ', case=False) | CommandLine.str.contains(r' --update ', case=False) | CommandLine.str.contains(r' --updateRollback=', case=False)) & CommandLine.str.contains(r'http', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Certificate Exported Via Certutil.EXE",
        "id": "3ffd6f51-e6c1-47b7-94b4-c1e61d4117c5",
        "status": "test",
        "description": "Detects the execution of the certutil with the \"exportPFX\" flag which allows the utility to export certificates.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certutil.exe', case=False) | OriginalFileName=='CertUtil.exe') & (CommandLine.str.contains(r'-exportPFX ', case=False) | CommandLine.str.contains(r'/exportPFX ', case=False) | CommandLine.str.contains(r'\u2013exportPFX ', case=False) | CommandLine.str.contains(r'\u2014exportPFX ', case=False) | CommandLine.str.contains(r'\u2015exportPFX ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Windows Credential Editor (WCE) Execution",
        "id": "7aa7009a-28b9-4344-8c1f-159489a390df",
        "status": "test",
        "description": "Detects the use of Windows Credential Editor (WCE)",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001",
            "attack.s0005"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Hashes.str.contains(r'IMPHASH=a53a02b997935fd8eedcb5f7abab9b9f', case=False) | Hashes.str.contains(r'IMPHASH=e96a73c7bf33a464c510ede582318bf2', case=False) | CommandLine.str.contains(r'.exe -S', case=False) & ParentImage.str.contains(r'\\\\services.exe', case=False)) & ~ Image.str.contains(r'\\\\clussvc.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Service Creation Using Sc.EXE",
        "id": "85ff530b-261d-48c6-a441-facaa2e81e48",
        "status": "test",
        "description": "Detects the creation of a new service using the \"sc.exe\" utility.",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1543.003"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\sc.exe', case=False) & CommandLine.str.contains(r'create', case=False) & CommandLine.str.contains(r'binPath', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Child Process Of VsCode",
        "id": "5a3164f2-b373-4152-93cf-090b13c12d27",
        "status": "test",
        "description": "Detects uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process. This could indicate an attempt of persistence via VsCode tasks or terminal profiles.",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\code.exe', case=False) & (Image.str.contains(r'\\\\calc.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False)) & (CommandLine.str.contains(r'Invoke-Expressions', case=False) | CommandLine.str.contains(r'IEX', case=False) | CommandLine.str.contains(r'Invoke-Command', case=False) | CommandLine.str.contains(r'ICM', case=False) | CommandLine.str.contains(r'DownloadString', case=False) | CommandLine.str.contains(r'rundll32', case=False) | CommandLine.str.contains(r'regsvr32', case=False) | CommandLine.str.contains(r'wscript', case=False) | CommandLine.str.contains(r'cscript', case=False)) | Image.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | Image.str.contains(r':\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Where Execution",
        "id": "725a9768-0f5e-4cb3-aec2-bc5719c6831a",
        "status": "test",
        "description": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n",
        "tags": [
            "attack.discovery",
            "attack.t1217"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\where.exe', case=False) | OriginalFileName=='where.exe') & (CommandLine.str.contains(r'places.sqlite', case=False) | CommandLine.str.contains(r'cookies.sqlite', case=False) | CommandLine.str.contains(r'formhistory.sqlite', case=False) | CommandLine.str.contains(r'logins.json', case=False) | CommandLine.str.contains(r'key4.db', case=False) | CommandLine.str.contains(r'key3.db', case=False) | CommandLine.str.contains(r'sessionstore.jsonlz4', case=False) | CommandLine.str.contains(r'History', case=False) | CommandLine.str.contains(r'Bookmarks', case=False) | CommandLine.str.contains(r'Cookies', case=False) | CommandLine.str.contains(r'Login Data', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - AdFind Suspicious Execution",
        "id": "9a132afa-654e-11eb-ae93-0242ac130002",
        "status": "test",
        "description": "Detects AdFind execution with common flags seen used during attacks",
        "tags": [
            "attack.discovery",
            "attack.t1018",
            "attack.t1087.002",
            "attack.t1482",
            "attack.t1069.002",
            "stp.1u"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'domainlist', case=False) | CommandLine.str.contains(r'trustdmp', case=False) | CommandLine.str.contains(r'dcmodes', case=False) | CommandLine.str.contains(r'adinfo', case=False) | CommandLine.str.contains(r' dclist ', case=False) | CommandLine.str.contains(r'computer_pwdnotreqd', case=False) | CommandLine.str.contains(r'objectcategory=', case=False) | CommandLine.str.contains(r'-subnets -f', case=False) | CommandLine.str.contains(r'name=\"Domain Admins\"', case=False) | CommandLine.str.contains(r'-sc u:', case=False) | CommandLine.str.contains(r'domainncs', case=False) | CommandLine.str.contains(r'dompol', case=False) | CommandLine.str.contains(r' oudmp ', case=False) | CommandLine.str.contains(r'subnetdmp', case=False) | CommandLine.str.contains(r'gpodmp', case=False) | CommandLine.str.contains(r'fspdmp', case=False) | CommandLine.str.contains(r'users_noexpire', case=False) | CommandLine.str.contains(r'computers_active', case=False) | CommandLine.str.contains(r'computers_pwdnotreqd', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Web Access Feature Enabled Via DISM",
        "id": "7e8f2d3b-9c1a-4f67-b9e8-8d9006e0e51f",
        "status": "test",
        "description": "Detects the use of DISM to enable the PowerShell Web Access feature, which could be used for remote access and potential abuse",
        "tags": [
            "attack.persistence",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\dism.exe', case=False) | OriginalFileName=='DISM.EXE') & CommandLine.str.contains(r'WindowsPowerShellWebAccess', case=False) & CommandLine.str.contains(r'/online', case=False) & CommandLine.str.contains(r'/enable-feature', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "RemoteFXvGPUDisablement Abuse Via AtomicTestHarnesses",
        "id": "a6fc3c46-23b8-4996-9ea2-573f4c4d88c5",
        "status": "test",
        "description": "Detects calls to the AtomicTestHarnesses \"Invoke-ATHRemoteFXvGPUDisablementCommand\" which is designed to abuse the \"RemoteFXvGPUDisablement.exe\" binary to run custom PowerShell code via module load-order hijacking.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'Invoke-ATHRemoteFXvGPUDisablementCommand', case=False) | CommandLine.str.contains(r'Invoke-ATHRemoteFXvGPUDisableme', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Base64 Encoded FromBase64String Cmdlet",
        "id": "fdb62a13-9a81-4e5c-a38f-ea93a16f6d7c",
        "status": "test",
        "description": "Detects usage of a base64 encoded \"FromBase64String\" cmdlet in a process command line",
        "tags": [
            "attack.defense-evasion",
            "attack.t1140",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'OjpGcm9tQmFzZTY0U3RyaW5n', case=False) | CommandLine.str.contains(r'o6RnJvbUJhc2U2NFN0cmluZ', case=False) | CommandLine.str.contains(r'6OkZyb21CYXNlNjRTdHJpbm', case=False) | CommandLine.str.contains(r'OgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcA', case=False) | CommandLine.str.contains(r'oAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnA', case=False) | CommandLine.str.contains(r'6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZw', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - RemoteKrbRelay Execution",
        "id": "a7664b14-75fb-4a50-a223-cb9bc0afbacf",
        "status": "experimental",
        "description": "Detects the use of RemoteKrbRelay, a Kerberos relaying tool via CommandLine flags and PE metadata.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1558.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\RemoteKrbRelay.exe', case=False) | OriginalFileName=='RemoteKrbRelay.exe' | CommandLine.str.contains(r' -clsid ', case=False) & CommandLine.str.contains(r' -target ', case=False) & CommandLine.str.contains(r' -victim ', case=False) | CommandLine.str.contains(r'-rbcd ', case=False) & (CommandLine.str.contains(r'-cn ', case=False) | CommandLine.str.contains(r'--computername ', case=False)) | CommandLine.str.contains(r'-chp ', case=False) & CommandLine.str.contains(r'-chpPass ', case=False) & CommandLine.str.contains(r'-chpUser ', case=False) | CommandLine.str.contains(r'-addgroupmember ', case=False) & CommandLine.str.contains(r'-group ', case=False) & CommandLine.str.contains(r'-groupuser ', case=False) | CommandLine.str.contains(r'-smb ', case=False) & CommandLine.str.contains(r'--smbkeyword ', case=False) & (CommandLine.str.contains(r'interactive', case=False) | CommandLine.str.contains(r'secrets', case=False) | CommandLine.str.contains(r'service-add', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Advanced IP Scanner Execution",
        "id": "bef37fa2-f205-4a7b-b484-0759bfd5f86f",
        "status": "test",
        "description": "Detects the use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.",
        "tags": [
            "attack.discovery",
            "attack.t1046",
            "attack.t1135"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\advanced_ip_scanner', case=False) | OriginalFileName.str.contains(r'advanced_ip_scanner', case=False) | Description.str.contains(r'Advanced IP Scanner', case=False) | CommandLine.str.contains(r'/portable', case=False) & CommandLine.str.contains(r'/lng', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use NTFS Short Name in Command Line",
        "id": "dd6b39d9-d9be-4a3b-8fe0-fe3c6a5c1795",
        "status": "test",
        "description": "Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'~1.exe', case=False) | CommandLine.str.contains(r'~1.bat', case=False) | CommandLine.str.contains(r'~1.msi', case=False) | CommandLine.str.contains(r'~1.vbe', case=False) | CommandLine.str.contains(r'~1.vbs', case=False) | CommandLine.str.contains(r'~1.dll', case=False) | CommandLine.str.contains(r'~1.ps1', case=False) | CommandLine.str.contains(r'~1.js', case=False) | CommandLine.str.contains(r'~1.hta', case=False) | CommandLine.str.contains(r'~2.exe', case=False) | CommandLine.str.contains(r'~2.bat', case=False) | CommandLine.str.contains(r'~2.msi', case=False) | CommandLine.str.contains(r'~2.vbe', case=False) | CommandLine.str.contains(r'~2.vbs', case=False) | CommandLine.str.contains(r'~2.dll', case=False) | CommandLine.str.contains(r'~2.ps1', case=False) | CommandLine.str.contains(r'~2.js', case=False) | CommandLine.str.contains(r'~2.hta', case=False)) & ~ (ParentImage.str.contains(r'\\\\WebEx\\\\WebexHost.exe', case=False) | ParentImage.str.contains(r'\\\\thor\\\\thor64.exe', case=False) | CommandLine.str.contains(r'C:\\\\xampp\\\\vcredist\\\\VCREDI~1.EXE', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious X509Enrollment - Process Creation",
        "id": "114de787-4eb2-48cc-abdb-c0b449f93ea4",
        "status": "test",
        "description": "Detect use of X509Enrollment",
        "tags": [
            "attack.defense-evasion",
            "attack.t1553.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'X509Enrollment.CBinaryConverter', case=False) | CommandLine.str.contains(r'884e2002-217d-11da-b2a4-000e7bbb2b09', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Harvesting Of Wifi Credentials Via Netsh.EXE",
        "id": "42b1a5b8-353f-4f10-b256-39de4467faff",
        "status": "test",
        "description": "Detect the harvesting of wifi credentials using netsh.exe",
        "tags": [
            "attack.discovery",
            "attack.credential-access",
            "attack.t1040"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\netsh.exe', case=False) | OriginalFileName=='netsh.exe') & CommandLine.str.contains(r'wlan', case=False) & CommandLine.str.contains(r' s', case=False) & CommandLine.str.contains(r' p', case=False) & CommandLine.str.contains(r' k', case=False) & CommandLine.str.contains(r'=clear', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Whoami.EXE Execution With Output Option",
        "id": "c30fb093-1109-4dc8-88a8-b30d11c95a5d",
        "status": "test",
        "description": "Detects the execution of \"whoami.exe\" with the \"/FO\" flag to choose CSV as output format or with redirection options to export the results to a file for later use.",
        "tags": [
            "attack.discovery",
            "attack.t1033",
            "car.2016-03-001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\whoami.exe', case=False) | OriginalFileName=='whoami.exe') & (CommandLine.str.contains(r' /FO CSV', case=False) | CommandLine.str.contains(r' -FO CSV', case=False)) | CommandLine.str.contains(r'*whoami*>*'))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Program Location Whitelisted In Firewall Via Netsh.EXE",
        "id": "a35f5a72-f347-4e36-8895-9869b0d5fc6d",
        "status": "test",
        "description": "Detects Netsh command execution that whitelists a program located in a suspicious location in the Windows Firewall",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\netsh.exe', case=False) | OriginalFileName=='netsh.exe') & (CommandLine.str.contains(r'firewall', case=False) & CommandLine.str.contains(r'add', case=False) & CommandLine.str.contains(r'allowedprogram', case=False) | CommandLine.str.contains(r'advfirewall', case=False) & CommandLine.str.contains(r'firewall', case=False) & CommandLine.str.contains(r'add', case=False) & CommandLine.str.contains(r'rule', case=False) & CommandLine.str.contains(r'action=allow', case=False) & CommandLine.str.contains(r'program=', case=False)) & (CommandLine.str.contains(r':\\\\$Recycle.bin\\\\', case=False) | CommandLine.str.contains(r':\\\\RECYCLER.BIN\\\\', case=False) | CommandLine.str.contains(r':\\\\RECYCLERS.BIN\\\\', case=False) | CommandLine.str.contains(r':\\\\SystemVolumeInformation\\\\', case=False) | CommandLine.str.contains(r':\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Default\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Desktop\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\addins\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\cursors\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\debug\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\drivers\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\fonts\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\help\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\system32\\\\tasks\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Downloads\\\\', case=False) | CommandLine.str.contains(r'\\\\Local Settings\\\\Temporary Internet Files\\\\', case=False) | CommandLine.str.contains(r'\\\\Temporary Internet Files\\\\Content.Outlook\\\\', case=False) | CommandLine.str.contains(r'%Public%\\\\', case=False) | CommandLine.str.contains(r'%TEMP%', case=False) | CommandLine.str.contains(r'%TMP%', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Change Default File Association To Executable Via Assoc",
        "id": "ae6f14e6-14de-45b0-9f44-c0986f50dc89",
        "status": "test",
        "description": "Detects when a program changes the default file association of any extension to an executable.\nWhen a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n",
        "tags": [
            "attack.persistence",
            "attack.t1546.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & CommandLine.str.contains(r'assoc ', case=False) & CommandLine.str.contains(r'exefile', case=False) & ~ CommandLine.str.contains(r'.exe=exefile', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Malicious Windows Script Components File Execution by TAEF Detection",
        "id": "634b00d5-ccc3-4a06-ae3b-0ec8444dd51b",
        "status": "test",
        "description": "Windows Test Authoring and Execution Framework (TAEF) framework allows you to run automation by executing tests files written on different languages (C, C#, Microsoft COM Scripting interfaces\nAdversaries may execute malicious code (such as WSC file with VBScript, dll and so on) directly by running te.exe\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\te.exe', case=False) | ParentImage.str.contains(r'\\\\te.exe', case=False) | OriginalFileName=='\\\\te.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Boot Configuration Tampering Via Bcdedit.EXE",
        "id": "1444443e-6757-43e4-9ea4-c8fc705f79a2",
        "status": "stable",
        "description": "Detects the use of the bcdedit command to tamper with the boot configuration data. This technique is often times used by malware or attackers as a destructive way before launching ransomware.",
        "tags": [
            "attack.impact",
            "attack.t1490"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\bcdedit.exe', case=False) | OriginalFileName=='bcdedit.exe') & CommandLine.str.contains(r'set', case=False) & (CommandLine.str.contains(r'bootstatuspolicy', case=False) & CommandLine.str.contains(r'ignoreallfailures', case=False) | CommandLine.str.contains(r'recoveryenabled', case=False) & CommandLine.str.contains(r'no', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DriverQuery.EXE Execution",
        "id": "a20def93-0709-4eae-9bd2-31206e21e6b2",
        "status": "test",
        "description": "Detect usage of the \"driverquery\" utility. Which can be used to perform reconnaissance on installed drivers",
        "tags": [
            "attack.discovery"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'driverquery.exe', case=False) | OriginalFileName=='drvqry.exe') & ~ (ParentImage.str.contains(r'\\\\cscript.exe', case=False) | ParentImage.str.contains(r'\\\\mshta.exe', case=False) | ParentImage.str.contains(r'\\\\regsvr32.exe', case=False) | ParentImage.str.contains(r'\\\\rundll32.exe', case=False) | ParentImage.str.contains(r'\\\\wscript.exe', case=False) | ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | ParentImage.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | ParentImage.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Lolbin Unregmp2.exe Use As Proxy",
        "id": "727454c0-d851-48b0-8b89-385611ab0704",
        "status": "test",
        "description": "Detect usage of the \"unregmp2.exe\" binary as a proxy to launch a custom version of \"wmpnscfg.exe\"",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\unregmp2.exe', case=False) | OriginalFileName=='unregmp2.exe') & (CommandLine.str.contains(r' -HideWMP', case=False) | CommandLine.str.contains(r' /HideWMP', case=False) | CommandLine.str.contains(r' \u2013HideWMP', case=False) | CommandLine.str.contains(r' \u2014HideWMP', case=False) | CommandLine.str.contains(r' \u2015HideWMP', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Security Tools Keyword Lookup Via Findstr.EXE",
        "id": "4fe074b4-b833-4081-8f24-7dcfeca72b42",
        "status": "test",
        "description": "Detects execution of \"findstr\" to search for common names of security tools. Attackers often pipe the results of recon commands such as \"tasklist\" or \"whoami\" to \"findstr\" in order to filter out the results.\nThis detection focuses on the keywords that the attacker might use as a filter.\n",
        "tags": [
            "attack.discovery",
            "attack.t1518.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\find.exe', case=False) | Image.str.contains(r'\\\\findstr.exe', case=False) | OriginalFileName==['FIND.EXE', 'FINDSTR.EXE']) & (CommandLine.str.contains(r' avira', case=False) | CommandLine.str.contains(r' avira\"', case=False) | CommandLine.str.contains(r' cb', case=False) | CommandLine.str.contains(r' cb\"', case=False) | CommandLine.str.contains(r' cylance', case=False) | CommandLine.str.contains(r' cylance\"', case=False) | CommandLine.str.contains(r' defender', case=False) | CommandLine.str.contains(r' defender\"', case=False) | CommandLine.str.contains(r' kaspersky', case=False) | CommandLine.str.contains(r' kaspersky\"', case=False) | CommandLine.str.contains(r' kes', case=False) | CommandLine.str.contains(r' kes\"', case=False) | CommandLine.str.contains(r' mc', case=False) | CommandLine.str.contains(r' mc\"', case=False) | CommandLine.str.contains(r' sec', case=False) | CommandLine.str.contains(r' sec\"', case=False) | CommandLine.str.contains(r' sentinel', case=False) | CommandLine.str.contains(r' sentinel\"', case=False) | CommandLine.str.contains(r' symantec', case=False) | CommandLine.str.contains(r' symantec\"', case=False) | CommandLine.str.contains(r' virus', case=False) | CommandLine.str.contains(r' virus\"', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using MSConfig Token Modification - Process",
        "id": "ad92e3f9-7eb6-460e-96b1-582b0ccbb980",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288']) & ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\pkgmgr.exe', case=False) & CommandLine=='\"C:\\\\Windows\\\\system32\\\\msconfig.exe\" -5'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Tampering With Security Products Via WMIC",
        "id": "847d5ff3-8a31-4737-a970-aeae8fe21765",
        "status": "test",
        "description": "Detects uninstallation or termination of security products using the WMIC utility",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'wmic', case=False) & CommandLine.str.contains(r'product where ', case=False) & CommandLine.str.contains(r'call', case=False) & CommandLine.str.contains(r'uninstall', case=False) & CommandLine.str.contains(r'/nointeractive', case=False) | CommandLine.str.contains(r'wmic', case=False) & CommandLine.str.contains(r'caption like ', case=False) & (CommandLine.str.contains(r'call delete', case=False) | CommandLine.str.contains(r'call terminate', case=False)) | CommandLine.str.contains(r'process ', case=False) & CommandLine.str.contains(r'where ', case=False) & CommandLine.str.contains(r'delete', case=False)) & (CommandLine.str.contains(r'%carbon%', case=False) | CommandLine.str.contains(r'%cylance%', case=False) | CommandLine.str.contains(r'%endpoint%', case=False) | CommandLine.str.contains(r'%eset%', case=False) | CommandLine.str.contains(r'%malware%', case=False) | CommandLine.str.contains(r'%Sophos%', case=False) | CommandLine.str.contains(r'%symantec%', case=False) | CommandLine.str.contains(r'Antivirus', case=False) | CommandLine.str.contains(r'AVG ', case=False) | CommandLine.str.contains(r'Carbon Black', case=False) | CommandLine.str.contains(r'CarbonBlack', case=False) | CommandLine.str.contains(r'Cb Defense Sensor 64-bit', case=False) | CommandLine.str.contains(r'Crowdstrike Sensor', case=False) | CommandLine.str.contains(r'Cylance ', case=False) | CommandLine.str.contains(r'Dell Threat Defense', case=False) | CommandLine.str.contains(r'DLP Endpoint', case=False) | CommandLine.str.contains(r'Endpoint Detection', case=False) | CommandLine.str.contains(r'Endpoint Protection', case=False) | CommandLine.str.contains(r'Endpoint Security', case=False) | CommandLine.str.contains(r'Endpoint Sensor', case=False) | CommandLine.str.contains(r'ESET File Security', case=False) | CommandLine.str.contains(r'LogRhythm System Monitor Service', case=False) | CommandLine.str.contains(r'Malwarebytes', case=False) | CommandLine.str.contains(r'McAfee Agent', case=False) | CommandLine.str.contains(r'Microsoft Security Client', case=False) | CommandLine.str.contains(r'Sophos Anti-Virus', case=False) | CommandLine.str.contains(r'Sophos AutoUpdate', case=False) | CommandLine.str.contains(r'Sophos Credential Store', case=False) | CommandLine.str.contains(r'Sophos Management Console', case=False) | CommandLine.str.contains(r'Sophos Management Database', case=False) | CommandLine.str.contains(r'Sophos Management Server', case=False) | CommandLine.str.contains(r'Sophos Remote Management System', case=False) | CommandLine.str.contains(r'Sophos Update Manager', case=False) | CommandLine.str.contains(r'Threat Protection', case=False) | CommandLine.str.contains(r'VirusScan', case=False) | CommandLine.str.contains(r'Webroot SecureAnywhere', case=False) | CommandLine.str.contains(r'Windows Defender', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Execution Of Regasm/Regsvcs With Uncommon Extension",
        "id": "e9f8f8cc-07cc-4e81-b724-f387db9175e4",
        "status": "test",
        "description": "Detects potentially suspicious execution of the Regasm/Regsvcs utilities with an uncommon extension.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.009"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Regsvcs.exe', case=False) | Image.str.contains(r'\\\\Regasm.exe', case=False) | OriginalFileName==['RegSvcs.exe', 'RegAsm.exe']) & (CommandLine.str.contains(r'.dat', case=False) | CommandLine.str.contains(r'.gif', case=False) | CommandLine.str.contains(r'.jpeg', case=False) | CommandLine.str.contains(r'.jpg', case=False) | CommandLine.str.contains(r'.png', case=False) | CommandLine.str.contains(r'.txt', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WebDav Client Execution Via Rundll32.EXE",
        "id": "2dbd9d3d-9e27-42a8-b8df-f13825c6c3d5",
        "status": "test",
        "description": "Detects \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like \"C:\\windows\\system32\\davclnt.dll,DavSetCookie\".\nThis could be an indicator of exfiltration or use of WebDav to launch code (hosted on a WebDav server).\n",
        "tags": [
            "attack.exfiltration",
            "attack.t1048.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\svchost.exe', case=False) & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & CommandLine.str.contains(r'C:\\\\windows\\\\system32\\\\davclnt.dll,DavSetCookie', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Deletion Via Del",
        "id": "379fa130-190e-4c3f-b7bc-6c8e834485f3",
        "status": "test",
        "description": "Detects execution of the builtin \"del\"/\"erase\" commands in order to delete files.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.004"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & (CommandLine.str.contains(r'del ', case=False) | CommandLine.str.contains(r'erase ', case=False)) & (CommandLine.str.contains(r' -f', case=False) | CommandLine.str.contains(r' /f', case=False) | CommandLine.str.contains(r' \u2013f', case=False) | CommandLine.str.contains(r' \u2014f', case=False) | CommandLine.str.contains(r' \u2015f', case=False) | CommandLine.str.contains(r' -s', case=False) | CommandLine.str.contains(r' /s', case=False) | CommandLine.str.contains(r' \u2013s', case=False) | CommandLine.str.contains(r' \u2014s', case=False) | CommandLine.str.contains(r' \u2015s', case=False) | CommandLine.str.contains(r' -q', case=False) | CommandLine.str.contains(r' /q', case=False) | CommandLine.str.contains(r' \u2013q', case=False) | CommandLine.str.contains(r' \u2014q', case=False) | CommandLine.str.contains(r' \u2015q', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Abusing Winsat Path Parsing - Process",
        "id": "7a01183d-71a2-46ad-ad5c-acd989ac1793",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288']) & ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\system32\\\\winsat.exe', case=False) & ParentCommandLine.str.contains(r'C:\\\\Windows \\\\system32\\\\winsat.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Discovery Activity Via Dnscmd.EXE",
        "id": "b6457d63-d2a2-4e29-859d-4e7affc153d1",
        "status": "test",
        "description": "Detects an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain. DNS zones used to host the DNS records for a particular domain.",
        "tags": [
            "attack.discovery",
            "attack.execution",
            "attack.t1543.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\dnscmd.exe', case=False) & (CommandLine.str.contains(r'/enumrecords', case=False) | CommandLine.str.contains(r'/enumzones', case=False) | CommandLine.str.contains(r'/ZonePrint', case=False) | CommandLine.str.contains(r'/info', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sdiagnhost Calling Suspicious Child Process",
        "id": "f3d39c45-de1a-4486-a687-ab126124f744",
        "status": "test",
        "description": "Detects sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\sdiagnhost.exe', case=False) & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\taskkill.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\calc.exe', case=False)) & ~ (Image.str.contains(r'\\\\cmd.exe', case=False) & CommandLine.str.contains(r'bits', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) & (CommandLine.str.contains(r'-noprofile -', case=False) | CommandLine.str.contains(r'-noprofile', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - winPEAS Execution",
        "id": "98b53e78-ebaf-46f8-be06-421aafd176d9",
        "status": "test",
        "description": "WinPEAS is a script that search for possible paths to escalate privileges on Windows hosts. The checks are explained on book.hacktricks.xyz",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1082",
            "attack.t1087",
            "attack.t1046"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='winPEAS.exe' | Image.str.contains(r'\\\\winPEASany_ofs.exe', case=False) | Image.str.contains(r'\\\\winPEASany.exe', case=False) | Image.str.contains(r'\\\\winPEASx64_ofs.exe', case=False) | Image.str.contains(r'\\\\winPEASx64.exe', case=False) | Image.str.contains(r'\\\\winPEASx86_ofs.exe', case=False) | Image.str.contains(r'\\\\winPEASx86.exe', case=False) | CommandLine.str.contains(r' applicationsinfo', case=False) | CommandLine.str.contains(r' browserinfo', case=False) | CommandLine.str.contains(r' eventsinfo', case=False) | CommandLine.str.contains(r' fileanalysis', case=False) | CommandLine.str.contains(r' filesinfo', case=False) | CommandLine.str.contains(r' processinfo', case=False) | CommandLine.str.contains(r' servicesinfo', case=False) | CommandLine.str.contains(r' windowscreds', case=False) | CommandLine.str.contains(r'https://github.com/carlospolop/PEASS-ng/releases/latest/download/', case=False) | ParentCommandLine.str.contains(r' -linpeas', case=False) | CommandLine.str.contains(r' -linpeas', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Hacktool Execution - PE Metadata",
        "id": "37c1333a-a0db-48be-b64b-7393b2386e3b",
        "status": "test",
        "description": "Detects the execution of different Windows based hacktools via PE metadata (company, product, etc.) even if the files have been renamed",
        "tags": [
            "attack.credential-access",
            "attack.t1588.002",
            "attack.t1003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Company=='Cube0x0'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "JScript Compiler Execution",
        "id": "52788a70-f1da-40dd-8fbd-73b5865d6568",
        "status": "test",
        "description": "Detects the execution of the \"jsc.exe\" (JScript Compiler).\nAttacker might abuse this in order to compile JScript files on the fly and bypassing application whitelisting.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\jsc.exe', case=False) | OriginalFileName=='jsc.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "SQL Client Tools PowerShell Session Detection",
        "id": "a746c9b8-a2fb-4ee5-a428-92bee9e99060",
        "status": "test",
        "description": "This rule detects execution of a PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\sqltoolsps.exe', case=False) | ParentImage.str.contains(r'\\\\sqltoolsps.exe', case=False) | OriginalFileName=='\\\\sqltoolsps.exe') & ~ ParentImage.str.contains(r'\\\\smss.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SharpLdapWhoami Execution",
        "id": "d9367cbb-c2e0-47ce-bdc0-128cb6da898d",
        "status": "test",
        "description": "Detects SharpLdapWhoami, a whoami alternative that queries the LDAP service on a domain controller",
        "tags": [
            "attack.discovery",
            "attack.t1033",
            "car.2016-03-001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SharpLdapWhoami.exe', case=False) | OriginalFileName.str.contains(r'SharpLdapWhoami', case=False) | Product=='SharpLdapWhoami' | CommandLine.str.contains(r' /method:ntlm', case=False) | CommandLine.str.contains(r' /method:kerb', case=False) | CommandLine.str.contains(r' /method:nego', case=False) | CommandLine.str.contains(r' /m:nego', case=False) | CommandLine.str.contains(r' /m:ntlm', case=False) | CommandLine.str.contains(r' /m:kerb', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Arbitrary File Download Via MSPUB.EXE",
        "id": "3b3c7f55-f771-4dd6-8a6e-08d057a17caf",
        "status": "test",
        "description": "Detects usage of \"MSPUB\" (Microsoft Publisher) to download arbitrary files",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\MSPUB.exe', case=False) | OriginalFileName=='MSPUB.exe') & (CommandLine.str.contains(r'ftp://', case=False) | CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - SoftPerfect Netscan Execution",
        "id": "ca387a8e-1c84-4da3-9993-028b45342d30",
        "status": "test",
        "description": "Detects usage of SoftPerfect's \"netscan.exe\". An application for scanning networks.\nIt is actively used in-the-wild by threat actors to inspect and understand the network architecture of a victim.\n",
        "tags": [
            "attack.discovery",
            "attack.t1046"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\netscan.exe', case=False) | Product=='Network Scanner' | Description=='Application for scanning networks')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - CrackMapExec PowerShell Obfuscation",
        "id": "6f8b3439-a203-45dc-a88b-abf57ea15ccf",
        "status": "test",
        "description": "The CrachMapExec pentesting framework implements a PowerShell obfuscation with some static strings detected by this rule.",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.defense-evasion",
            "attack.t1027.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r'*join*split*') | CommandLine.str.contains(r'( $ShellId[1]+$ShellId[13]+\\'x\\')', case=False) | CommandLine.str.contains(r'*( $PSHome[*]+$PSHOME[*]+*') | CommandLine.str.contains(r'( $env:Public[13]+$env:Public[5]+\\'x\\')', case=False) | CommandLine.str.contains(r'*( $env:ComSpec[4,*,25]-Join\\'\\')*') | CommandLine.str.contains(r'[1,3]+\\'x\\'-Join\\'\\')', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Root Certificate Installed Via Certutil.EXE",
        "id": "d2125259-ddea-4c1c-9c22-977eb5b29cf0",
        "status": "test",
        "description": "Detects execution of \"certutil\" with the \"addstore\" flag in order to install a new certificate on the system.\nAdversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1553.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certutil.exe', case=False) | OriginalFileName=='CertUtil.exe') & (CommandLine.str.contains(r'-addstore', case=False) | CommandLine.str.contains(r'/addstore', case=False) | CommandLine.str.contains(r'\u2013addstore', case=False) | CommandLine.str.contains(r'\u2014addstore', case=False) | CommandLine.str.contains(r'\u2015addstore', case=False)) & CommandLine.str.contains(r'root', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed Jusched.EXE Execution",
        "id": "edd8a48c-1b9f-4ba1-83aa-490338cd1ccb",
        "status": "test",
        "description": "Detects the execution of a renamed \"jusched.exe\" as seen used by the cobalt group",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1036.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description==['Java Update Scheduler', 'Java(TM) Update Scheduler']) & ~ Image.str.contains(r'\\\\jusched.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Execution of Hostname",
        "id": "7be5fb68-f9ef-476d-8b51-0256ebece19e",
        "status": "test",
        "description": "Use of hostname to get information",
        "tags": [
            "attack.discovery",
            "attack.t1082"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\HOSTNAME.EXE', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Audit Policy Tampering Via Auditpol",
        "id": "0a13e132-651d-11eb-ae93-0242ac130002",
        "status": "test",
        "description": "Threat actors can use auditpol binary to change audit policy configuration to impair detection capability.\nThis can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\auditpol.exe', case=False) | OriginalFileName=='AUDITPOL.EXE') & (CommandLine.str.contains(r'disable', case=False) | CommandLine.str.contains(r'clear', case=False) | CommandLine.str.contains(r'remove', case=False) | CommandLine.str.contains(r'restore', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Abuse of Service Permissions to Hide Services Via Set-Service",
        "id": "514e4c3a-c77d-4cde-a00f-046425e2301e",
        "status": "test",
        "description": "Detects usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName=='pwsh.dll') & CommandLine.str.contains(r'Set-Service ', case=False) & CommandLine.str.contains(r'DCLCWPDTSD', case=False) & (CommandLine.str.contains(r'-SecurityDescriptorSddl ', case=False) | CommandLine.str.contains(r'-sd ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disabled Volume Snapshots",
        "id": "dee4af55-1f22-4e1d-a9d2-4bdc7ecb472a",
        "status": "test",
        "description": "Detects commands that temporarily turn off Volume Snapshots",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\Services\\\\VSS\\\\Diag', case=False) & CommandLine.str.contains(r'/d Disabled', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Reg Add BitLocker",
        "id": "0e0255bf-2548-47b8-9582-c0955c9283f5",
        "status": "test",
        "description": "Detects suspicious addition to BitLocker related registry keys via the reg.exe utility",
        "tags": [
            "attack.impact",
            "attack.t1486"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'REG', case=False) & CommandLine.str.contains(r'ADD', case=False) & CommandLine.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\FVE', case=False) & CommandLine.str.contains(r'/v', case=False) & CommandLine.str.contains(r'/f', case=False) & (CommandLine.str.contains(r'EnableBDEWithNoTPM', case=False) | CommandLine.str.contains(r'UseAdvancedStartup', case=False) | CommandLine.str.contains(r'UseTPM', case=False) | CommandLine.str.contains(r'UseTPMKey', case=False) | CommandLine.str.contains(r'UseTPMKeyPIN', case=False) | CommandLine.str.contains(r'RecoveryKeyMessageSource', case=False) | CommandLine.str.contains(r'UseTPMPIN', case=False) | CommandLine.str.contains(r'RecoveryKeyMessage', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Child Process Spawned By Odbcconf.EXE",
        "id": "8e3c7994-131e-4ba5-b6ea-804d49113a26",
        "status": "test",
        "description": "Detects an uncommon child process of \"odbcconf.exe\" binary which normally shouldn't have any child processes.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.008"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\odbcconf.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disabled IE Security Features",
        "id": "fb50eb7a-5ab1-43ae-bcc9-091818cb8424",
        "status": "test",
        "description": "Detects command lines that indicate unwanted modifications to registry keys that disable important Internet Explorer security features",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' -name IEHarden ', case=False) & CommandLine.str.contains(r' -value 0 ', case=False) | CommandLine.str.contains(r' -name DEPOff ', case=False) & CommandLine.str.contains(r' -value 1 ', case=False) | CommandLine.str.contains(r' -name DisableFirstRunCustomize ', case=False) & CommandLine.str.contains(r' -value 2 ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Certify Execution",
        "id": "762f2482-ff21-4970-8939-0aa317a886bb",
        "status": "test",
        "description": "Detects Certify a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments.",
        "tags": [
            "attack.discovery",
            "attack.credential-access",
            "attack.t1649"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Certify.exe', case=False) | OriginalFileName=='Certify.exe' | Description.str.contains(r'Certify', case=False) | (CommandLine.str.contains(r'.exe cas ', case=False) | CommandLine.str.contains(r'.exe find ', case=False) | CommandLine.str.contains(r'.exe pkiobjects ', case=False) | CommandLine.str.contains(r'.exe request ', case=False) | CommandLine.str.contains(r'.exe download ', case=False)) & (CommandLine.str.contains(r' /vulnerable', case=False) | CommandLine.str.contains(r' /template:', case=False) | CommandLine.str.contains(r' /altname:', case=False) | CommandLine.str.contains(r' /domain:', case=False) | CommandLine.str.contains(r' /path:', case=False) | CommandLine.str.contains(r' /ca:', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Manipulation Of Default Accounts Via Net.EXE",
        "id": "5b768e71-86f2-4879-b448-81061cbae951",
        "status": "test",
        "description": "Detects suspicious manipulations of default accounts such as 'administrator' and 'guest'. For example 'enable' or 'disable' accounts or change the password...etc",
        "tags": [
            "attack.collection",
            "attack.t1560.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | OriginalFileName==['net.exe', 'net1.exe']) & CommandLine.str.contains(r' user ', case=False) & (CommandLine.str.contains(r' J\u00e4rjestelm\u00e4nvalvoja ', case=False) | CommandLine.str.contains(r' Rendszergazda ', case=False) | CommandLine.str.contains(r' \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 ', case=False) | CommandLine.str.contains(r' Administrateur ', case=False) | CommandLine.str.contains(r' Administrador ', case=False) | CommandLine.str.contains(r' Administrat\u00f6r ', case=False) | CommandLine.str.contains(r' Administrator ', case=False) | CommandLine.str.contains(r' guest ', case=False) | CommandLine.str.contains(r' DefaultAccount ', case=False) | CommandLine.str.contains(r' \"J\u00e4rjestelm\u00e4nvalvoja\" ', case=False) | CommandLine.str.contains(r' \"Rendszergazda\" ', case=False) | CommandLine.str.contains(r' \"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\" ', case=False) | CommandLine.str.contains(r' \"Administrateur\" ', case=False) | CommandLine.str.contains(r' \"Administrador\" ', case=False) | CommandLine.str.contains(r' \"Administrat\u00f6r\" ', case=False) | CommandLine.str.contains(r' \"Administrator\" ', case=False) | CommandLine.str.contains(r' \"guest\" ', case=False) | CommandLine.str.contains(r' \"DefaultAccount\" ', case=False) | CommandLine.str.contains(r' \\'J\u00e4rjestelm\u00e4nvalvoja\\' ', case=False) | CommandLine.str.contains(r' \\'Rendszergazda\\' ', case=False) | CommandLine.str.contains(r' \\'\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\\' ', case=False) | CommandLine.str.contains(r' \\'Administrateur\\' ', case=False) | CommandLine.str.contains(r' \\'Administrador\\' ', case=False) | CommandLine.str.contains(r' \\'Administrat\u00f6r\\' ', case=False) | CommandLine.str.contains(r' \\'Administrator\\' ', case=False) | CommandLine.str.contains(r' \\'guest\\' ', case=False) | CommandLine.str.contains(r' \\'DefaultAccount\\' ', case=False)) & ~ (CommandLine.str.contains(r'guest', case=False) & CommandLine.str.contains(r'/active no', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Filter Driver Unloaded Via Fltmc.EXE",
        "id": "4931188c-178e-4ee7-a348-39e8a7a56821",
        "status": "test",
        "description": "Detect filter driver unloading activity via fltmc.exe",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070",
            "attack.t1562",
            "attack.t1562.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\fltMC.exe', case=False) | OriginalFileName=='fltMC.exe') & CommandLine.str.contains(r'unload', case=False) & ~ (ParentImage.str.contains(r'C:\\\\Users\\\\', case=False) & ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) & ParentImage.str.contains(r'\\\\endpoint-protection-installer-x64.tmp', case=False) & CommandLine.str.contains(r'unload rtp_filesystem_filter', case=False) | ParentImage=='C:\\\\Program Files (x86)\\\\ManageEngine\\\\uems_agent\\\\bin\\\\dcfaservice64.exe' & CommandLine.str.contains(r'unload DFMFilter', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Powershell Executed From Headless ConHost Process",
        "id": "056c7317-9a09-4bd4-9067-d051312752ea",
        "status": "experimental",
        "description": "Detects the use of powershell commands from headless ConHost window.\nThe \"--headless\" flag hides the windows from the user upon execution.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1059.001",
            "attack.t1059.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\conhost.exe', case=False) | OriginalFileName=='CONHOST.EXE') & CommandLine.str.contains(r'--headless', case=False) & CommandLine.str.contains(r'powershell', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Gzip Archive Decode Via PowerShell",
        "id": "98767d61-b2e8-4d71-b661-e36783ee24c1",
        "status": "test",
        "description": "Detects attempts of decoding encoded Gzip archives via PowerShell.",
        "tags": [
            "attack.command-and-control",
            "attack.t1132.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'GZipStream', case=False) & CommandLine.str.contains(r'::Decompress', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious WindowsTerminal Child Processes",
        "id": "8de89e52-f6e1-4b5b-afd1-41ecfa300d48",
        "status": "test",
        "description": "Detects suspicious children spawned via the Windows Terminal application which could be a sign of persistence via WindowsTerminal (see references section)",
        "tags": [
            "attack.execution",
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\WindowsTerminal.exe', case=False) | ParentImage.str.contains(r'\\\\wt.exe', case=False)) & (Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\csc.exe', case=False) | Image.str.contains(r'C:\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\Downloads\\\\', case=False) | Image.str.contains(r'\\\\Desktop\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\TEMP\\\\', case=False) | CommandLine.str.contains(r' iex ', case=False) | CommandLine.str.contains(r' icm', case=False) | CommandLine.str.contains(r'Invoke-', case=False) | CommandLine.str.contains(r'Import-Module ', case=False) | CommandLine.str.contains(r'ipmo ', case=False) | CommandLine.str.contains(r'DownloadString(', case=False) | CommandLine.str.contains(r' /c ', case=False) | CommandLine.str.contains(r' /k ', case=False) | CommandLine.str.contains(r' /r ', case=False)) & ~ (CommandLine.str.contains(r'Import-Module', case=False) & CommandLine.str.contains(r'Microsoft.VisualStudio.DevShell.dll', case=False) & CommandLine.str.contains(r'Enter-VsDevShell', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Packages\\\\Microsoft.WindowsTerminal_', case=False) & CommandLine.str.contains(r'\\\\LocalState\\\\settings.json', case=False) | CommandLine.str.contains(r'C:\\\\Program Files\\\\Microsoft Visual Studio\\\\', case=False) & CommandLine.str.contains(r'\\\\Common7\\\\Tools\\\\VsDevCmd.bat', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WMI Backdoor Exchange Transport Agent",
        "id": "797011dc-44f4-4e6f-9f10-a8ceefbe566b",
        "status": "test",
        "description": "Detects a WMI backdoor in Exchange Transport Agents via WMI event filters",
        "tags": [
            "attack.persistence",
            "attack.t1546.003"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\EdgeTransport.exe', case=False) & ~ (Image=='C:\\\\Windows\\\\System32\\\\conhost.exe' | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\Exchange Server\\\\', case=False) & Image.str.contains(r'\\\\Bin\\\\OleConverter.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Netsh Helper DLL",
        "id": "56321594-9087-49d9-bf10-524fe8479452",
        "status": "test",
        "description": "Detects the execution of netsh with \"add helper\" flag in order to add a custom helper DLL. This technique can be abused to add a malicious helper DLL that can be used as a persistence proxy that gets called when netsh.exe is executed.\n",
        "tags": [
            "attack.privilege-escalation",
            "attack.persistence",
            "attack.t1546.007",
            "attack.s0108"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='netsh.exe' | Image.str.contains(r'\\\\netsh.exe', case=False)) & CommandLine.str.contains(r'add', case=False) & CommandLine.str.contains(r'helper', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Encoded To Base64 Via Certutil.EXE",
        "id": "ea0cdc3e-2239-4f26-a947-4e8f8224e464",
        "status": "test",
        "description": "Detects the execution of certutil with the \"encode\" flag to encode a file to base64 where the extensions of the file is suspicious",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certutil.exe', case=False) | OriginalFileName=='CertUtil.exe') & (CommandLine.str.contains(r'-encode', case=False) | CommandLine.str.contains(r'/encode', case=False) | CommandLine.str.contains(r'\u2013encode', case=False) | CommandLine.str.contains(r'\u2014encode', case=False) | CommandLine.str.contains(r'\u2015encode', case=False)) & (CommandLine.str.contains(r'.acl', case=False) | CommandLine.str.contains(r'.bat', case=False) | CommandLine.str.contains(r'.doc', case=False) | CommandLine.str.contains(r'.gif', case=False) | CommandLine.str.contains(r'.jpeg', case=False) | CommandLine.str.contains(r'.jpg', case=False) | CommandLine.str.contains(r'.mp3', case=False) | CommandLine.str.contains(r'.pdf', case=False) | CommandLine.str.contains(r'.png', case=False) | CommandLine.str.contains(r'.ppt', case=False) | CommandLine.str.contains(r'.tmp', case=False) | CommandLine.str.contains(r'.xls', case=False) | CommandLine.str.contains(r'.xml', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - AnyDesk Silent Installation",
        "id": "114e7f1c-f137-48c8-8f54-3088c24ce4b9",
        "status": "test",
        "description": "Detects AnyDesk Remote Desktop silent installation. Which can be used by attackers to gain remote access.",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'--install', case=False) & CommandLine.str.contains(r'--start-with-win', case=False) & CommandLine.str.contains(r'--silent', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Service DACL Abuse To Hide Services Via Sc.EXE",
        "id": "a537cfc3-4297-4789-92b5-345bfd845ad0",
        "status": "test",
        "description": "Detects usage of the \"sc.exe\" utility adding a new service with special permission seen used by threat actors which makes the service hidden and unremovable.",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\sc.exe', case=False) | OriginalFileName=='sc.exe') & CommandLine.str.contains(r'sdset', case=False) & CommandLine.str.contains(r'DCLCWPDTSD', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Regsvr32 DLL Execution With Suspicious File Extension",
        "id": "089fc3d2-71e8-4763-a8a5-c97fbb0a403e",
        "status": "test",
        "description": "Detects the execution of REGSVR32.exe with DLL files masquerading as other files",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.010"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\regsvr32.exe', case=False) | OriginalFileName=='REGSVR32.EXE') & (CommandLine.str.contains(r'.bin', case=False) | CommandLine.str.contains(r'.bmp', case=False) | CommandLine.str.contains(r'.cr2', case=False) | CommandLine.str.contains(r'.dat', case=False) | CommandLine.str.contains(r'.eps', case=False) | CommandLine.str.contains(r'.gif', case=False) | CommandLine.str.contains(r'.ico', case=False) | CommandLine.str.contains(r'.jpeg', case=False) | CommandLine.str.contains(r'.jpg', case=False) | CommandLine.str.contains(r'.nef', case=False) | CommandLine.str.contains(r'.orf', case=False) | CommandLine.str.contains(r'.png', case=False) | CommandLine.str.contains(r'.raw', case=False) | CommandLine.str.contains(r'.sr2', case=False) | CommandLine.str.contains(r'.temp', case=False) | CommandLine.str.contains(r'.tif', case=False) | CommandLine.str.contains(r'.tiff', case=False) | CommandLine.str.contains(r'.tmp', case=False) | CommandLine.str.contains(r'.rtf', case=False) | CommandLine.str.contains(r'.txt', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - ScreenConnect Installation Execution",
        "id": "75bfe6e6-cd8e-429e-91d3-03921e1d7962",
        "status": "test",
        "description": "Detects ScreenConnect program starts that establish a remote access to a system.",
        "tags": [
            "attack.initial-access",
            "attack.t1133"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'e=Access&', case=False) & CommandLine.str.contains(r'y=Guest&', case=False) & CommandLine.str.contains(r'&p=', case=False) & CommandLine.str.contains(r'&c=', case=False) & CommandLine.str.contains(r'&k=', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Scheduled Task Creation Involving Temp Folder",
        "id": "39019a4e-317f-4ce3-ae63-309a8c6b53c5",
        "status": "test",
        "description": "Detects the creation of scheduled tasks that involves a temporary folder and runs only once",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.t1053.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\schtasks.exe', case=False) & CommandLine.str.contains(r' /create ', case=False) & CommandLine.str.contains(r' /sc once ', case=False) & CommandLine.str.contains(r'\\\\Temp\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Process Memory Dump via RdrLeakDiag.EXE",
        "id": "edadb1e5-5919-4e4c-8462-a9e643b02c4b",
        "status": "test",
        "description": "Detects the use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rdrleakdiag.exe', case=False) | OriginalFileName=='RdrLeakDiag.exe') & (CommandLine.str.contains(r'-memdmp', case=False) | CommandLine.str.contains(r'/memdmp', case=False) | CommandLine.str.contains(r'\u2013memdmp', case=False) | CommandLine.str.contains(r'\u2014memdmp', case=False) | CommandLine.str.contains(r'\u2015memdmp', case=False) | CommandLine.str.contains(r'fullmemdmp', case=False)) & (CommandLine.str.contains(r' -o ', case=False) | CommandLine.str.contains(r' /o ', case=False) | CommandLine.str.contains(r' \u2013o ', case=False) | CommandLine.str.contains(r' \u2014o ', case=False) | CommandLine.str.contains(r' \u2015o ', case=False) | CommandLine.str.contains(r' -p ', case=False) | CommandLine.str.contains(r' /p ', case=False) | CommandLine.str.contains(r' \u2013p ', case=False) | CommandLine.str.contains(r' \u2014p ', case=False) | CommandLine.str.contains(r' \u2015p ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Parent Double Extension File Execution",
        "id": "5e6a80c8-2d45-4633-9ef4-fa2671a39c5c",
        "status": "test",
        "description": "Detect execution of suspicious double extension files in ParentCommandLine",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.007"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'.doc.lnk', case=False) | ParentImage.str.contains(r'.docx.lnk', case=False) | ParentImage.str.contains(r'.xls.lnk', case=False) | ParentImage.str.contains(r'.xlsx.lnk', case=False) | ParentImage.str.contains(r'.ppt.lnk', case=False) | ParentImage.str.contains(r'.pptx.lnk', case=False) | ParentImage.str.contains(r'.rtf.lnk', case=False) | ParentImage.str.contains(r'.pdf.lnk', case=False) | ParentImage.str.contains(r'.txt.lnk', case=False) | ParentImage.str.contains(r'.doc.js', case=False) | ParentImage.str.contains(r'.docx.js', case=False) | ParentImage.str.contains(r'.xls.js', case=False) | ParentImage.str.contains(r'.xlsx.js', case=False) | ParentImage.str.contains(r'.ppt.js', case=False) | ParentImage.str.contains(r'.pptx.js', case=False) | ParentImage.str.contains(r'.rtf.js', case=False) | ParentImage.str.contains(r'.pdf.js', case=False) | ParentImage.str.contains(r'.txt.js', case=False) | ParentCommandLine.str.contains(r'.doc.lnk', case=False) | ParentCommandLine.str.contains(r'.docx.lnk', case=False) | ParentCommandLine.str.contains(r'.xls.lnk', case=False) | ParentCommandLine.str.contains(r'.xlsx.lnk', case=False) | ParentCommandLine.str.contains(r'.ppt.lnk', case=False) | ParentCommandLine.str.contains(r'.pptx.lnk', case=False) | ParentCommandLine.str.contains(r'.rtf.lnk', case=False) | ParentCommandLine.str.contains(r'.pdf.lnk', case=False) | ParentCommandLine.str.contains(r'.txt.lnk', case=False) | ParentCommandLine.str.contains(r'.doc.js', case=False) | ParentCommandLine.str.contains(r'.docx.js', case=False) | ParentCommandLine.str.contains(r'.xls.js', case=False) | ParentCommandLine.str.contains(r'.xlsx.js', case=False) | ParentCommandLine.str.contains(r'.ppt.js', case=False) | ParentCommandLine.str.contains(r'.pptx.js', case=False) | ParentCommandLine.str.contains(r'.rtf.js', case=False) | ParentCommandLine.str.contains(r'.pdf.js', case=False) | ParentCommandLine.str.contains(r'.txt.js', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Base64 MZ Header In CommandLine",
        "id": "22e58743-4ac8-4a9f-bf19-00a0428d8c5f",
        "status": "test",
        "description": "Detects encoded base64 MZ header in the commandline",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'TVqQAAMAAAAEAAAA', case=False) | CommandLine.str.contains(r'TVpQAAIAAAAEAA8A', case=False) | CommandLine.str.contains(r'TVqAAAEAAAAEABAA', case=False) | CommandLine.str.contains(r'TVoAAAAAAAAAAAAA', case=False) | CommandLine.str.contains(r'TVpTAQEAAAAEAAAA', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - ADCSPwn Execution",
        "id": "cd8c163e-a19b-402e-bdd5-419ff5859f12",
        "status": "test",
        "description": "Detects command line parameters used by ADCSPwn, a tool to escalate privileges in an active directory network by coercing authenticate from machine accounts and relaying to the certificate service",
        "tags": [
            "attack.credential-access",
            "attack.t1557.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r' --adcs ', case=False) & CommandLine.str.contains(r' --port ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious RDP Redirect Using TSCON",
        "id": "f72aa3e8-49f9-4c7d-bd74-f8ab84ff9bbb",
        "status": "test",
        "description": "Detects a suspicious RDP session redirect using tscon.exe",
        "tags": [
            "attack.lateral-movement",
            "attack.t1563.002",
            "attack.t1021.001",
            "car.2013-07-002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r' /dest:rdp-tcp#', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SharpMove Tool Execution",
        "id": "055fb54c-a8f4-4aee-bd44-f74cf30a0d9d",
        "status": "test",
        "description": "Detects the execution of SharpMove, a .NET utility performing multiple tasks such as \"Task Creation\", \"SCM\" query, VBScript execution using WMI via its PE metadata and command line options.\n",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SharpMove.exe', case=False) | OriginalFileName=='SharpMove.exe' | CommandLine.str.contains(r'computername=', case=False) & (CommandLine.str.contains(r'action=create', case=False) | CommandLine.str.contains(r'action=dcom', case=False) | CommandLine.str.contains(r'action=executevbs', case=False) | CommandLine.str.contains(r'action=hijackdcom', case=False) | CommandLine.str.contains(r'action=modschtask', case=False) | CommandLine.str.contains(r'action=modsvc', case=False) | CommandLine.str.contains(r'action=query', case=False) | CommandLine.str.contains(r'action=scm', case=False) | CommandLine.str.contains(r'action=startservice', case=False) | CommandLine.str.contains(r'action=taskscheduler', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Arbitrary File Download Via PresentationHost.EXE",
        "id": "b124ddf4-778d-418e-907f-6dd3fc0d31cd",
        "status": "test",
        "description": "Detects usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files to download arbitrary files",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\presentationhost.exe', case=False) | OriginalFileName=='PresentationHost.exe') & (CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False) | CommandLine.str.contains(r'ftp://', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Mstsc.EXE Execution With Local RDP File",
        "id": "5fdce3ac-e7f9-4ecd-a3aa-a4d78ebbf0af",
        "status": "test",
        "description": "Detects potential RDP connection via Mstsc using a local \".rdp\" file",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\mstsc.exe', case=False) | OriginalFileName=='mstsc.exe') & (CommandLine.str.contains(r'.rdp', case=False) | CommandLine.str.contains(r'.rdp\"', case=False)) & ~ (ParentImage=='C:\\\\Windows\\\\System32\\\\lxss\\\\wslhost.exe' & CommandLine.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\WSL\\\\wslg.rdp', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Binary Proxy Execution Via VSDiagnostics.EXE",
        "id": "ac1c92b4-ac81-405a-9978-4604d78cc47e",
        "status": "test",
        "description": "Detects execution of \"VSDiagnostics.exe\" with the \"start\" command in order to launch and proxy arbitrary binaries.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\VSDiagnostics.exe', case=False) | OriginalFileName=='VSDiagnostics.exe') & CommandLine.str.contains(r'start', case=False) & (CommandLine.str.contains(r' /launch:', case=False) | CommandLine.str.contains(r' -launch:', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Seatbelt Execution",
        "id": "38646daa-e78f-4ace-9de0-55547b2d30da",
        "status": "test",
        "description": "Detects the execution of the PUA/Recon tool Seatbelt via PE information of command line parameters",
        "tags": [
            "attack.discovery",
            "attack.t1526",
            "attack.t1087",
            "attack.t1083"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Seatbelt.exe', case=False) | OriginalFileName=='Seatbelt.exe' | Description=='Seatbelt' | CommandLine.str.contains(r' DpapiMasterKeys', case=False) | CommandLine.str.contains(r' InterestingProcesses', case=False) | CommandLine.str.contains(r' InterestingFiles', case=False) | CommandLine.str.contains(r' CertificateThumbprints', case=False) | CommandLine.str.contains(r' ChromiumBookmarks', case=False) | CommandLine.str.contains(r' ChromiumHistory', case=False) | CommandLine.str.contains(r' ChromiumPresence', case=False) | CommandLine.str.contains(r' CloudCredentials', case=False) | CommandLine.str.contains(r' CredEnum', case=False) | CommandLine.str.contains(r' CredGuard', case=False) | CommandLine.str.contains(r' FirefoxHistory', case=False) | CommandLine.str.contains(r' ProcessCreationEvents', case=False) | (CommandLine.str.contains(r' -group=misc', case=False) | CommandLine.str.contains(r' -group=remote', case=False) | CommandLine.str.contains(r' -group=chromium', case=False) | CommandLine.str.contains(r' -group=slack', case=False) | CommandLine.str.contains(r' -group=system', case=False) | CommandLine.str.contains(r' -group=user', case=False) | CommandLine.str.contains(r' -group=all', case=False)) & CommandLine.str.contains(r' -outputfile=', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "VolumeShadowCopy Symlink Creation Via Mklink",
        "id": "40b19fa6-d835-400c-b301-41f3a2baacaf",
        "status": "stable",
        "description": "Shadow Copies storage symbolic link creation using operating systems utilities",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002",
            "attack.t1003.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'mklink', case=False) & CommandLine.str.contains(r'HarddiskVolumeShadowCopy', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential WMI Lateral Movement WmiPrvSE Spawned PowerShell",
        "id": "692f0bec-83ba-4d04-af7e-e884a96059b6",
        "status": "stable",
        "description": "Detects Powershell as a child of the WmiPrvSE process. Which could be a sign of lateral movement via WMI.",
        "tags": [
            "attack.execution",
            "attack.t1047",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\WmiPrvSE.exe', case=False) & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Visual Basic Command Line Compiler Usage",
        "id": "7b10f171-7f04-47c7-9fa2-5be43c76e535",
        "status": "test",
        "description": "Detects successful code compilation via Visual Basic Command Line Compiler that utilizes Windows Resource to Object Converter.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\vbc.exe', case=False) & Image.str.contains(r'\\\\cvtres.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Start of NT Virtual DOS Machine",
        "id": "16905e21-66ee-42fe-b256-1318ada2d770",
        "status": "test",
        "description": "Ntvdm.exe allows the execution of 16-bit Windows applications on 32-bit Windows operating systems, as well as the execution of both 16-bit and 32-bit DOS applications",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ntvdm.exe', case=False) | Image.str.contains(r'\\\\csrstub.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Odbcconf.EXE Suspicious DLL Location",
        "id": "6b65c28e-11f3-46cb-902a-68f2cafaf474",
        "status": "test",
        "description": "Detects execution of \"odbcconf\" where the path of the DLL being registered is located in a potentially suspicious location.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.008"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\odbcconf.exe', case=False) | OriginalFileName=='odbcconf.exe') & (CommandLine.str.contains(r':\\\\PerfLogs\\\\', case=False) | CommandLine.str.contains(r':\\\\ProgramData\\\\', case=False) | CommandLine.str.contains(r':\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Registration\\\\CRMLog', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\System32\\\\com\\\\dmp\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\System32\\\\FxsTmp\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\System32\\\\Microsoft\\\\Crypto\\\\RSA\\\\MachineKeys\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\System32\\\\spool\\\\PRINTERS\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\System32\\\\spool\\\\SERVERS\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\System32\\\\Tasks_Migrated\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\System32\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\SysWOW64\\\\com\\\\dmp\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\SysWOW64\\\\FxsTmp\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\PLA\\\\System\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Tracing\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DLL Execution Via Register-cimprovider.exe",
        "id": "a2910908-e86f-4687-aeba-76a5f996e652",
        "status": "test",
        "description": "Detects using register-cimprovider.exe to execute arbitrary dll file.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\register-cimprovider.exe', case=False) & CommandLine.str.contains(r'-path', case=False) & CommandLine.str.contains(r'dll', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Rundll32 Execution With Uncommon DLL Extension",
        "id": "c3a99af4-35a9-4668-879e-c09aeb4f2bdf",
        "status": "test",
        "description": "Detects the execution of rundll32 with a command line that doesn't contain a common extension",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & ~ (CommandLine is null | CommandLine=='' | CommandLine.str.contains(r'.cpl ', case=False) | CommandLine.str.contains(r'.cpl,', case=False) | CommandLine.str.contains(r'.cpl\"', case=False) | CommandLine.str.contains(r'.cpl\\'', case=False) | CommandLine.str.contains(r'.dll ', case=False) | CommandLine.str.contains(r'.dll,', case=False) | CommandLine.str.contains(r'.dll\"', case=False) | CommandLine.str.contains(r'.dll\\'', case=False) | CommandLine.str.contains(r'.inf ', case=False) | CommandLine.str.contains(r'.inf,', case=False) | CommandLine.str.contains(r'.inf\"', case=False) | CommandLine.str.contains(r'.inf\\'', case=False) | CommandLine.str.contains(r'.cpl', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.inf', case=False) | CommandLine.str.contains(r' -localserver ', case=False) | ParentImage.str.contains(r'\\\\msiexec.exe', case=False) & CommandLine.str.contains(r':\\\\Windows\\\\Installer\\\\', case=False) & CommandLine.str.contains(r'.tmp', case=False) & CommandLine.str.contains(r'zzzzInvokeManagedCustomActionOutOfProc', case=False)) & ~ (ParentCommandLine.str.contains(r':\\\\Users\\\\', case=False) & ParentCommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\EdgeUpdate\\\\Install\\\\{', case=False) & ParentCommandLine.str.contains(r'\\\\EDGEMITMP_', case=False) & ParentCommandLine.str.contains(r'.tmp\\\\setup.exe', case=False) & ParentCommandLine.str.contains(r'--install-archive=', case=False) & ParentCommandLine.str.contains(r'--previous-version=', case=False) & ParentCommandLine.str.contains(r'--msedgewebview --verbose-logging --do-not-launch-msedge --user-level', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Ngrok Execution",
        "id": "ee37eb7c-a4e7-4cd5-8fa4-efa27f1c3f31",
        "status": "test",
        "description": "Detects the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.\nInvolved domains are bin.equinox.io for download and *.ngrok.io for connections.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1572"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' tcp 139', case=False) | CommandLine.str.contains(r' tcp 445', case=False) | CommandLine.str.contains(r' tcp 3389', case=False) | CommandLine.str.contains(r' tcp 5985', case=False) | CommandLine.str.contains(r' tcp 5986', case=False) | CommandLine.str.contains(r' start ', case=False) & CommandLine.str.contains(r'--all', case=False) & CommandLine.str.contains(r'--config', case=False) & CommandLine.str.contains(r'.yml', case=False) | Image.str.contains(r'ngrok.exe', case=False) & (CommandLine.str.contains(r' tcp ', case=False) | CommandLine.str.contains(r' http ', case=False) | CommandLine.str.contains(r' authtoken ', case=False)) | CommandLine.str.contains(r'.exe authtoken ', case=False) | CommandLine.str.contains(r'.exe start --all', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "BitLockerTogo.EXE Execution",
        "id": "7f2376f9-42ee-4dfc-9360-fecff9a88fc8",
        "status": "experimental",
        "description": "Detects the execution of \"BitLockerToGo.EXE\".\nBitLocker To Go is BitLocker Drive Encryption on removable data drives. This feature includes the encryption of, USB flash drives, SD cards, External hard disk drives, Other drives that are formatted by using the NTFS, FAT16, FAT32, or exFAT file system.\nThis is a rarely used application and usage of it at all is worth investigating.\nMalware such as Lumma stealer has been seen using this process as a target for process hollowing.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\BitLockerToGo.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sysinternals PsService Execution",
        "id": "3371f518-5fe3-4cf6-a14b-2a0ae3fd8a4f",
        "status": "test",
        "description": "Detects usage of Sysinternals PsService which can be abused for service reconnaissance and tampering",
        "tags": [
            "attack.discovery",
            "attack.persistence",
            "attack.t1543.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='psservice.exe' | Image.str.contains(r'\\\\PsService.exe', case=False) | Image.str.contains(r'\\\\PsService64.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Malicious PowerShell Commandlets - ProcessCreation",
        "id": "02030f2f-6199-49ec-b258-ea71b07e03dc",
        "status": "test",
        "description": "Detects Commandlet names from well-known PowerShell exploitation frameworks",
        "tags": [
            "attack.execution",
            "attack.discovery",
            "attack.t1482",
            "attack.t1087",
            "attack.t1087.001",
            "attack.t1087.002",
            "attack.t1069.001",
            "attack.t1069.002",
            "attack.t1069",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'Add-Exfiltration', case=False) | CommandLine.str.contains(r'Add-Persistence', case=False) | CommandLine.str.contains(r'Add-RegBackdoor', case=False) | CommandLine.str.contains(r'Add-RemoteRegBackdoor', case=False) | CommandLine.str.contains(r'Add-ScrnSaveBackdoor', case=False) | CommandLine.str.contains(r'Check-VM', case=False) | CommandLine.str.contains(r'ConvertTo-Rc4ByteStream', case=False) | CommandLine.str.contains(r'Decrypt-Hash', case=False) | CommandLine.str.contains(r'Disable-ADIDNSNode', case=False) | CommandLine.str.contains(r'Disable-MachineAccount', case=False) | CommandLine.str.contains(r'Do-Exfiltration', case=False) | CommandLine.str.contains(r'Enable-ADIDNSNode', case=False) | CommandLine.str.contains(r'Enable-MachineAccount', case=False) | CommandLine.str.contains(r'Enabled-DuplicateToken', case=False) | CommandLine.str.contains(r'Exploit-Jboss', case=False) | CommandLine.str.contains(r'Export-ADR', case=False) | CommandLine.str.contains(r'Export-ADRCSV', case=False) | CommandLine.str.contains(r'Export-ADRExcel', case=False) | CommandLine.str.contains(r'Export-ADRHTML', case=False) | CommandLine.str.contains(r'Export-ADRJSON', case=False) | CommandLine.str.contains(r'Export-ADRXML', case=False) | CommandLine.str.contains(r'Find-Fruit', case=False) | CommandLine.str.contains(r'Find-GPOLocation', case=False) | CommandLine.str.contains(r'Find-TrustedDocuments', case=False) | CommandLine.str.contains(r'Get-ADIDNS', case=False) | CommandLine.str.contains(r'Get-ApplicationHost', case=False) | CommandLine.str.contains(r'Get-ChromeDump', case=False) | CommandLine.str.contains(r'Get-ClipboardContents', case=False) | CommandLine.str.contains(r'Get-FoxDump', case=False) | CommandLine.str.contains(r'Get-GPPPassword', case=False) | CommandLine.str.contains(r'Get-IndexedItem', case=False) | CommandLine.str.contains(r'Get-KerberosAESKey', case=False) | CommandLine.str.contains(r'Get-Keystrokes', case=False) | CommandLine.str.contains(r'Get-LSASecret', case=False) | CommandLine.str.contains(r'Get-MachineAccountAttribute', case=False) | CommandLine.str.contains(r'Get-MachineAccountCreator', case=False) | CommandLine.str.contains(r'Get-PassHashes', case=False) | CommandLine.str.contains(r'Get-RegAlwaysInstallElevated', case=False) | CommandLine.str.contains(r'Get-RegAutoLogon', case=False) | CommandLine.str.contains(r'Get-RemoteBootKey', case=False) | CommandLine.str.contains(r'Get-RemoteCachedCredential', case=False) | CommandLine.str.contains(r'Get-RemoteLocalAccountHash', case=False) | CommandLine.str.contains(r'Get-RemoteLSAKey', case=False) | CommandLine.str.contains(r'Get-RemoteMachineAccountHash', case=False) | CommandLine.str.contains(r'Get-RemoteNLKMKey', case=False) | CommandLine.str.contains(r'Get-RickAstley', case=False) | CommandLine.str.contains(r'Get-Screenshot', case=False) | CommandLine.str.contains(r'Get-SecurityPackages', case=False) | CommandLine.str.contains(r'Get-ServiceFilePermission', case=False) | CommandLine.str.contains(r'Get-ServicePermission', case=False) | CommandLine.str.contains(r'Get-ServiceUnquoted', case=False) | CommandLine.str.contains(r'Get-SiteListPassword', case=False) | CommandLine.str.contains(r'Get-System', case=False) | CommandLine.str.contains(r'Get-TimedScreenshot', case=False) | CommandLine.str.contains(r'Get-UnattendedInstallFile', case=False) | CommandLine.str.contains(r'Get-Unconstrained', case=False) | CommandLine.str.contains(r'Get-USBKeystrokes', case=False) | CommandLine.str.contains(r'Get-VaultCredential', case=False) | CommandLine.str.contains(r'Get-VulnAutoRun', case=False) | CommandLine.str.contains(r'Get-VulnSchTask', case=False) | CommandLine.str.contains(r'Grant-ADIDNSPermission', case=False) | CommandLine.str.contains(r'Gupt-Backdoor', case=False) | CommandLine.str.contains(r'HTTP-Login', case=False) | CommandLine.str.contains(r'Install-ServiceBinary', case=False) | CommandLine.str.contains(r'Install-SSP', case=False) | CommandLine.str.contains(r'Invoke-ACLScanner', case=False) | CommandLine.str.contains(r'Invoke-ADRecon', case=False) | CommandLine.str.contains(r'Invoke-ADSBackdoor', case=False) | CommandLine.str.contains(r'Invoke-AgentSmith', case=False) | CommandLine.str.contains(r'Invoke-AllChecks', case=False) | CommandLine.str.contains(r'Invoke-ARPScan', case=False) | CommandLine.str.contains(r'Invoke-AzureHound', case=False) | CommandLine.str.contains(r'Invoke-BackdoorLNK', case=False) | CommandLine.str.contains(r'Invoke-BadPotato', case=False) | CommandLine.str.contains(r'Invoke-BetterSafetyKatz', case=False) | CommandLine.str.contains(r'Invoke-BypassUAC', case=False) | CommandLine.str.contains(r'Invoke-Carbuncle', case=False) | CommandLine.str.contains(r'Invoke-Certify', case=False) | CommandLine.str.contains(r'Invoke-ConPtyShell', case=False) | CommandLine.str.contains(r'Invoke-CredentialInjection', case=False) | CommandLine.str.contains(r'Invoke-DAFT', case=False) | CommandLine.str.contains(r'Invoke-DCSync', case=False) | CommandLine.str.contains(r'Invoke-DinvokeKatz', case=False) | CommandLine.str.contains(r'Invoke-DllInjection', case=False) | CommandLine.str.contains(r'Invoke-DNSUpdate', case=False) | CommandLine.str.contains(r'Invoke-DomainPasswordSpray', case=False) | CommandLine.str.contains(r'Invoke-DowngradeAccount', case=False) | CommandLine.str.contains(r'Invoke-EgressCheck', case=False) | CommandLine.str.contains(r'Invoke-Eyewitness', case=False) | CommandLine.str.contains(r'Invoke-FakeLogonScreen', case=False) | CommandLine.str.contains(r'Invoke-Farmer', case=False) | CommandLine.str.contains(r'Invoke-Get-RBCD-Threaded', case=False) | CommandLine.str.contains(r'Invoke-Gopher', case=False) | CommandLine.str.contains(r'Invoke-Grouper', case=False) | CommandLine.str.contains(r'Invoke-HandleKatz', case=False) | CommandLine.str.contains(r'Invoke-ImpersonatedProcess', case=False) | CommandLine.str.contains(r'Invoke-ImpersonateSystem', case=False) | CommandLine.str.contains(r'Invoke-InteractiveSystemPowerShell', case=False) | CommandLine.str.contains(r'Invoke-Internalmonologue', case=False) | CommandLine.str.contains(r'Invoke-Inveigh', case=False) | CommandLine.str.contains(r'Invoke-InveighRelay', case=False) | CommandLine.str.contains(r'Invoke-KrbRelay', case=False) | CommandLine.str.contains(r'Invoke-LdapSignCheck', case=False) | CommandLine.str.contains(r'Invoke-Lockless', case=False) | CommandLine.str.contains(r'Invoke-MalSCCM', case=False) | CommandLine.str.contains(r'Invoke-Mimikatz', case=False) | CommandLine.str.contains(r'Invoke-Mimikittenz', case=False) | CommandLine.str.contains(r'Invoke-MITM6', case=False) | CommandLine.str.contains(r'Invoke-NanoDump', case=False) | CommandLine.str.contains(r'Invoke-NetRipper', case=False) | CommandLine.str.contains(r'Invoke-Nightmare', case=False) | CommandLine.str.contains(r'Invoke-NinjaCopy', case=False) | CommandLine.str.contains(r'Invoke-OfficeScrape', case=False) | CommandLine.str.contains(r'Invoke-OxidResolver', case=False) | CommandLine.str.contains(r'Invoke-P0wnedshell', case=False) | CommandLine.str.contains(r'Invoke-Paranoia', case=False) | CommandLine.str.contains(r'Invoke-PortScan', case=False) | CommandLine.str.contains(r'Invoke-PoshRatHttp', case=False) | CommandLine.str.contains(r'Invoke-PostExfil', case=False) | CommandLine.str.contains(r'Invoke-PowerDump', case=False) | CommandLine.str.contains(r'Invoke-PowerShellTCP', case=False) | CommandLine.str.contains(r'Invoke-PowerShellWMI', case=False) | CommandLine.str.contains(r'Invoke-PPLDump', case=False) | CommandLine.str.contains(r'Invoke-PsExec', case=False) | CommandLine.str.contains(r'Invoke-PSInject', case=False) | CommandLine.str.contains(r'Invoke-PsUaCme', case=False) | CommandLine.str.contains(r'Invoke-ReflectivePEInjection', case=False) | CommandLine.str.contains(r'Invoke-ReverseDNSLookup', case=False) | CommandLine.str.contains(r'Invoke-Rubeus', case=False) | CommandLine.str.contains(r'Invoke-RunAs', case=False) | CommandLine.str.contains(r'Invoke-SafetyKatz', case=False) | CommandLine.str.contains(r'Invoke-SauronEye', case=False) | CommandLine.str.contains(r'Invoke-SCShell', case=False) | CommandLine.str.contains(r'Invoke-Seatbelt', case=False) | CommandLine.str.contains(r'Invoke-ServiceAbuse', case=False) | CommandLine.str.contains(r'Invoke-ShadowSpray', case=False) | CommandLine.str.contains(r'Invoke-Sharp', case=False) | CommandLine.str.contains(r'Invoke-Shellcode', case=False) | CommandLine.str.contains(r'Invoke-SMBScanner', case=False) | CommandLine.str.contains(r'Invoke-Snaffler', case=False) | CommandLine.str.contains(r'Invoke-Spoolsample', case=False) | CommandLine.str.contains(r'Invoke-SpraySinglePassword', case=False) | CommandLine.str.contains(r'Invoke-SSHCommand', case=False) | CommandLine.str.contains(r'Invoke-StandIn', case=False) | CommandLine.str.contains(r'Invoke-StickyNotesExtract', case=False) | CommandLine.str.contains(r'Invoke-SystemCommand', case=False) | CommandLine.str.contains(r'Invoke-Tasksbackdoor', case=False) | CommandLine.str.contains(r'Invoke-Tater', case=False) | CommandLine.str.contains(r'Invoke-Thunderfox', case=False) | CommandLine.str.contains(r'Invoke-ThunderStruck', case=False) | CommandLine.str.contains(r'Invoke-TokenManipulation', case=False) | CommandLine.str.contains(r'Invoke-Tokenvator', case=False) | CommandLine.str.contains(r'Invoke-TotalExec', case=False) | CommandLine.str.contains(r'Invoke-UrbanBishop', case=False) | CommandLine.str.contains(r'Invoke-UserHunter', case=False) | CommandLine.str.contains(r'Invoke-VoiceTroll', case=False) | CommandLine.str.contains(r'Invoke-Whisker', case=False) | CommandLine.str.contains(r'Invoke-WinEnum', case=False) | CommandLine.str.contains(r'Invoke-winPEAS', case=False) | CommandLine.str.contains(r'Invoke-WireTap', case=False) | CommandLine.str.contains(r'Invoke-WmiCommand', case=False) | CommandLine.str.contains(r'Invoke-WMIExec', case=False) | CommandLine.str.contains(r'Invoke-WScriptBypassUAC', case=False) | CommandLine.str.contains(r'Invoke-Zerologon', case=False) | CommandLine.str.contains(r'MailRaider', case=False) | CommandLine.str.contains(r'New-ADIDNSNode', case=False) | CommandLine.str.contains(r'New-DNSRecordArray', case=False) | CommandLine.str.contains(r'New-HoneyHash', case=False) | CommandLine.str.contains(r'New-InMemoryModule', case=False) | CommandLine.str.contains(r'New-MachineAccount', case=False) | CommandLine.str.contains(r'New-SOASerialNumberArray', case=False) | CommandLine.str.contains(r'Out-Minidump', case=False) | CommandLine.str.contains(r'Port-Scan', case=False) | CommandLine.str.contains(r'PowerBreach', case=False) | CommandLine.str.contains(r'powercat ', case=False) | CommandLine.str.contains(r'PowerUp', case=False) | CommandLine.str.contains(r'PowerView', case=False) | CommandLine.str.contains(r'Remove-ADIDNSNode', case=False) | CommandLine.str.contains(r'Remove-MachineAccount', case=False) | CommandLine.str.contains(r'Remove-Update', case=False) | CommandLine.str.contains(r'Rename-ADIDNSNode', case=False) | CommandLine.str.contains(r'Revoke-ADIDNSPermission', case=False) | CommandLine.str.contains(r'Set-ADIDNSNode', case=False) | CommandLine.str.contains(r'Set-MacAttribute', case=False) | CommandLine.str.contains(r'Set-MachineAccountAttribute', case=False) | CommandLine.str.contains(r'Set-Wallpaper', case=False) | CommandLine.str.contains(r'Show-TargetScreen', case=False) | CommandLine.str.contains(r'Start-CaptureServer', case=False) | CommandLine.str.contains(r'Start-Dnscat2', case=False) | CommandLine.str.contains(r'Start-WebcamRecorder', case=False) | CommandLine.str.contains(r'Veeam-Get-Creds', case=False) | CommandLine.str.contains(r'VolumeShadowCopyTools', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass via Windows Firewall Snap-In Hijack",
        "id": "e52cb31c-10ed-4aea-bcb7-593c9f4a315b",
        "status": "test",
        "description": "Detects attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1548"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\mmc.exe', case=False) & ParentCommandLine.str.contains(r'WF.msc', case=False) & ~ Image.str.contains(r'\\\\WerFault.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential ReflectDebugger Content Execution Via WerFault.EXE",
        "id": "fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd",
        "status": "test",
        "description": "Detects execution of \"WerFault.exe\" with the \"-pr\" commandline flag that is used to run files stored in the ReflectDebugger key which could be used to store the path to the malware in order to masquerade the execution flow",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\WerFault.exe', case=False) | OriginalFileName=='WerFault.exe') & CommandLine.str.contains(r' -pr ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential MSTSC Shadowing Activity",
        "id": "6ba5a05f-b095-4f0a-8654-b825f4f16334",
        "status": "test",
        "description": "Detects RDP session hijacking by using MSTSC shadowing",
        "tags": [
            "attack.lateral-movement",
            "attack.t1563.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'noconsentprompt', case=False) & CommandLine.str.contains(r'shadow:', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - RedMimicry Winnti Playbook Execution",
        "id": "95022b85-ff2a-49fa-939a-d7b8f56eeb9b",
        "status": "test",
        "description": "Detects actions caused by the RedMimicry Winnti playbook a automated breach emulations utility",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1106",
            "attack.t1059.003",
            "attack.t1218.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False)) & (CommandLine.str.contains(r'gthread-3.6.dll', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Temp\\\\tmp.bat', case=False) | CommandLine.str.contains(r'sigcmm-2.4.dll', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Process Reconnaissance Via Wmic.EXE",
        "id": "221b251a-357a-49a9-920a-271802777cc0",
        "status": "test",
        "description": "Detects the execution of \"wmic\" with the \"process\" flag, which adversary might use to list processes running on the compromised host or list installed software hotfixes and patches.",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\WMIC.exe', case=False) | OriginalFileName=='wmic.exe') & CommandLine.str.contains(r'process', case=False) & ~ (CommandLine.str.contains(r'call', case=False) & CommandLine.str.contains(r'create', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Folder Compress To Potentially Suspicious Output Via Compress-Archive Cmdlet",
        "id": "85a8e5ba-bd03-4bfb-bbfa-a4409a8f8b98",
        "status": "test",
        "description": "Detects PowerShell scripts that make use of the \"Compress-Archive\" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.\nAn adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.\n",
        "tags": [
            "attack.collection",
            "attack.t1074.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'*Compress-Archive -Path*-DestinationPath $env:TEMP*') | CommandLine.str.contains(r'*Compress-Archive -Path*-DestinationPath*\\\\AppData\\\\Local\\\\Temp\\\\*') | CommandLine.str.contains(r'*Compress-Archive -Path*-DestinationPath*:\\\\Windows\\\\Temp\\\\*'))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious DumpMinitool Execution",
        "id": "eb1c4225-1c23-4241-8dd4-051389fde4ce",
        "status": "test",
        "description": "Detects suspicious ways to use the \"DumpMinitool.exe\" binary",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\DumpMinitool.exe', case=False) | Image.str.contains(r'\\\\DumpMinitool.x86.exe', case=False) | Image.str.contains(r'\\\\DumpMinitool.arm64.exe', case=False) | OriginalFileName==['DumpMinitool.exe', 'DumpMinitool.x86.exe', 'DumpMinitool.arm64.exe']) & (~ (Image.str.contains(r'\\\\Microsoft Visual Studio\\\\', case=False) | Image.str.contains(r'\\\\Extensions\\\\', case=False)) | CommandLine.str.contains(r'.txt', case=False) | (CommandLine.str.contains(r' Full', case=False) | CommandLine.str.contains(r' Mini', case=False) | CommandLine.str.contains(r' WithHeap', case=False)) & ~ CommandLine.str.contains(r'--dumpType', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Audit Policy Tampering Via NT Resource Kit Auditpol",
        "id": "c6c56ada-612b-42d1-9a29-adad3c5c2c1e",
        "status": "test",
        "description": "Threat actors can use an older version of the auditpol binary available inside the NT resource kit to change audit policy configuration to impair detection capability.\nThis can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'/logon:none', case=False) | CommandLine.str.contains(r'/system:none', case=False) | CommandLine.str.contains(r'/sam:none', case=False) | CommandLine.str.contains(r'/privilege:none', case=False) | CommandLine.str.contains(r'/object:none', case=False) | CommandLine.str.contains(r'/process:none', case=False) | CommandLine.str.contains(r'/policy:none', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Visual Studio Code Tunnel Service Installation",
        "id": "30bf1789-379d-4fdc-900f-55cd0a90a801",
        "status": "test",
        "description": "Detects the installation of VsCode tunnel (code-tunnel) as a service.",
        "tags": [
            "attack.command-and-control",
            "attack.t1071.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'tunnel ', case=False) & CommandLine.str.contains(r'service', case=False) & CommandLine.str.contains(r'internal-run', case=False) & CommandLine.str.contains(r'tunnel-service.log', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Regsvr32 HTTP IP Pattern",
        "id": "2dd2c217-bf68-437a-b57c-fe9fd01d5de8",
        "status": "test",
        "description": "Detects regsvr32 execution to download and install DLLs located remotely where the address is an IP address.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.010"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\regsvr32.exe', case=False) | OriginalFileName=='REGSVR32.EXE') & (CommandLine.str.contains(r' /i:http://1', case=False) | CommandLine.str.contains(r' /i:http://2', case=False) | CommandLine.str.contains(r' /i:http://3', case=False) | CommandLine.str.contains(r' /i:http://4', case=False) | CommandLine.str.contains(r' /i:http://5', case=False) | CommandLine.str.contains(r' /i:http://6', case=False) | CommandLine.str.contains(r' /i:http://7', case=False) | CommandLine.str.contains(r' /i:http://8', case=False) | CommandLine.str.contains(r' /i:http://9', case=False) | CommandLine.str.contains(r' /i:https://1', case=False) | CommandLine.str.contains(r' /i:https://2', case=False) | CommandLine.str.contains(r' /i:https://3', case=False) | CommandLine.str.contains(r' /i:https://4', case=False) | CommandLine.str.contains(r' /i:https://5', case=False) | CommandLine.str.contains(r' /i:https://6', case=False) | CommandLine.str.contains(r' /i:https://7', case=False) | CommandLine.str.contains(r' /i:https://8', case=False) | CommandLine.str.contains(r' /i:https://9', case=False) | CommandLine.str.contains(r' -i:http://1', case=False) | CommandLine.str.contains(r' -i:http://2', case=False) | CommandLine.str.contains(r' -i:http://3', case=False) | CommandLine.str.contains(r' -i:http://4', case=False) | CommandLine.str.contains(r' -i:http://5', case=False) | CommandLine.str.contains(r' -i:http://6', case=False) | CommandLine.str.contains(r' -i:http://7', case=False) | CommandLine.str.contains(r' -i:http://8', case=False) | CommandLine.str.contains(r' -i:http://9', case=False) | CommandLine.str.contains(r' -i:https://1', case=False) | CommandLine.str.contains(r' -i:https://2', case=False) | CommandLine.str.contains(r' -i:https://3', case=False) | CommandLine.str.contains(r' -i:https://4', case=False) | CommandLine.str.contains(r' -i:https://5', case=False) | CommandLine.str.contains(r' -i:https://6', case=False) | CommandLine.str.contains(r' -i:https://7', case=False) | CommandLine.str.contains(r' -i:https://8', case=False) | CommandLine.str.contains(r' -i:https://9', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Execution via stordiag.exe",
        "id": "961e0abb-1b1e-4c84-a453-aafe56ad0d34",
        "status": "test",
        "description": "Detects the use of stordiag.exe to execute schtasks.exe systeminfo.exe and fltmc.exe",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\stordiag.exe', case=False) & (Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\systeminfo.exe', case=False) | Image.str.contains(r'\\\\fltmc.exe', case=False)) & ~ (ParentImage.str.contains(r'c:\\\\windows\\\\system32\\\\', case=False) | ParentImage.str.contains(r'c:\\\\windows\\\\syswow64\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Imports Registry Key From an ADS",
        "id": "0b80ade5-6997-4b1d-99a1-71701778ea61",
        "status": "test",
        "description": "Detects the import of a alternate datastream to the registry with regedit.exe.",
        "tags": [
            "attack.t1112",
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\regedit.exe', case=False) | OriginalFileName=='REGEDIT.EXE') & (CommandLine.str.contains(r' /i ', case=False) | CommandLine.str.contains(r'.reg', case=False)) & CommandLine.str.contains(r':[^ \\\\\\\\]') & ~ (CommandLine.str.contains(r' -e ', case=False) | CommandLine.str.contains(r' /e ', case=False) | CommandLine.str.contains(r' \u2013e ', case=False) | CommandLine.str.contains(r' \u2014e ', case=False) | CommandLine.str.contains(r' \u2015e ', case=False) | CommandLine.str.contains(r' -a ', case=False) | CommandLine.str.contains(r' /a ', case=False) | CommandLine.str.contains(r' \u2013a ', case=False) | CommandLine.str.contains(r' \u2014a ', case=False) | CommandLine.str.contains(r' \u2015a ', case=False) | CommandLine.str.contains(r' -c ', case=False) | CommandLine.str.contains(r' /c ', case=False) | CommandLine.str.contains(r' \u2013c ', case=False) | CommandLine.str.contains(r' \u2014c ', case=False) | CommandLine.str.contains(r' \u2015c ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ConvertTo-SecureString Cmdlet Usage Via CommandLine",
        "id": "74403157-20f5-415d-89a7-c505779585cf",
        "status": "test",
        "description": "Detects usage of the \"ConvertTo-SecureString\" cmdlet via the commandline. Which is fairly uncommon and could indicate potential suspicious activity",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & CommandLine.str.contains(r'ConvertTo-SecureString', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Execution of Shutdown",
        "id": "34ebb878-1b15-4895-b352-ca2eeb99b274",
        "status": "test",
        "description": "Use of the commandline to shutdown or reboot windows",
        "tags": [
            "attack.impact",
            "attack.t1529"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\shutdown.exe', case=False) & (CommandLine.str.contains(r'/r ', case=False) | CommandLine.str.contains(r'/s ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Get-Clipboard Cmdlet Via CLI",
        "id": "b9aeac14-2ffd-4ad3-b967-1354a4e628c3",
        "status": "test",
        "description": "Detects usage of the 'Get-Clipboard' cmdlet via CLI",
        "tags": [
            "attack.collection",
            "attack.t1115"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'Get-Clipboard', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remotely Hosted HTA File Executed Via Mshta.EXE",
        "id": "b98d0db6-511d-45de-ad02-e82a98729620",
        "status": "test",
        "description": "Detects execution of the \"mshta\" utility with an argument containing the \"http\" keyword, which could indicate that an attacker is executing a remotely hosted malicious hta file",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\mshta.exe', case=False) | OriginalFileName=='MSHTA.EXE') & (CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False) | CommandLine.str.contains(r'ftp://', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Sigverif.EXE Child Process",
        "id": "7d4aaec2-08ed-4430-8b96-28420e030e04",
        "status": "test",
        "description": "Detects uncommon child processes spawning from \"sigverif.exe\", which could indicate potential abuse of the latter as a living of the land binary in order to proxy execution.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1216"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\sigverif.exe', case=False) & ~ (Image==['C:\\\\Windows\\\\System32\\\\WerFault.exe', 'C:\\\\Windows\\\\SysWOW64\\\\WerFault.exe'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell DownloadFile",
        "id": "8f70ac5f-1f6f-4f8e-b454-db19561216c5",
        "status": "test",
        "description": "Detects the execution of powershell, a WebClient object creation and the invocation of DownloadFile in a single command line",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.command-and-control",
            "attack.t1104",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'powershell', case=False) & CommandLine.str.contains(r'.DownloadFile', case=False) & CommandLine.str.contains(r'System.Net.WebClient', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Decoded From Base64/Hex Via Certutil.EXE",
        "id": "cc9cbe82-7bc0-4ef5-bc23-bbfb83947be7",
        "status": "test",
        "description": "Detects the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certutil.exe', case=False) | OriginalFileName=='CertUtil.exe') & (CommandLine.str.contains(r'-decode ', case=False) | CommandLine.str.contains(r'/decode ', case=False) | CommandLine.str.contains(r'\u2013decode ', case=False) | CommandLine.str.contains(r'\u2014decode ', case=False) | CommandLine.str.contains(r'\u2015decode ', case=False) | CommandLine.str.contains(r'-decodehex ', case=False) | CommandLine.str.contains(r'/decodehex ', case=False) | CommandLine.str.contains(r'\u2013decodehex ', case=False) | CommandLine.str.contains(r'\u2014decodehex ', case=False) | CommandLine.str.contains(r'\u2015decodehex ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Obfuscated Ordinal Call Via Rundll32",
        "id": "43fa5350-db63-4b8f-9a01-789a427074e1",
        "status": "test",
        "description": "Detects execution of \"rundll32\" with potential obfuscated ordinal calls",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027.010"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE' | CommandLine.str.contains(r'rundll32', case=False)) & (CommandLine.str.contains(r'#+', case=False) | CommandLine.str.contains(r'#-', case=False) | CommandLine.str.contains(r'#0', case=False) | CommandLine.str.contains(r'#655', case=False) | CommandLine.str.contains(r'#656', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Hotfix Updates Reconnaissance Via Wmic.EXE",
        "id": "dfd2fcb7-8bd5-4daa-b132-5adb61d6ad45",
        "status": "test",
        "description": "Detects the execution of wmic with the \"qfe\" flag in order to obtain information about installed hotfix updates on the system. This is often used by pentester and attacker enumeration scripts",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='wmic.exe' | Image.str.contains(r'\\\\WMIC.exe', case=False)) & CommandLine.str.contains(r' qfe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - CoercedPotato Execution",
        "id": "e8d34729-86a4-4140-adfd-0a29c2106307",
        "status": "experimental",
        "description": "Detects the use of CoercedPotato, a tool for privilege escalation",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\CoercedPotato.exe', case=False) | CommandLine.str.contains(r' --exploitId ', case=False) | Hashes.str.contains(r'IMPHASH=A75D7669DB6B2E107A44C4057FF7F7D6', case=False) | Hashes.str.contains(r'IMPHASH=F91624350E2C678C5DCBE5E1F24E22C9', case=False) | Hashes.str.contains(r'IMPHASH=14C81850A079A87E83D50CA41C709A15', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Nmap/Zenmap Execution",
        "id": "f6ecd1cf-19b8-4488-97f6-00f0924991a3",
        "status": "test",
        "description": "Detects usage of namp/zenmap. Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation",
        "tags": [
            "attack.discovery",
            "attack.t1046"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\nmap.exe', case=False) | Image.str.contains(r'\\\\zennmap.exe', case=False) | OriginalFileName==['nmap.exe', 'zennmap.exe'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Response File Execution Via Odbcconf.EXE",
        "id": "2d32dd6f-3196-4093-b9eb-1ad8ab088ca5",
        "status": "test",
        "description": "Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file with a non-\".rsp\" extension.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.008"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\odbcconf.exe', case=False) | OriginalFileName=='odbcconf.exe') & (CommandLine.str.contains(r' -f ', case=False) | CommandLine.str.contains(r' /f ', case=False) | CommandLine.str.contains(r' \u2013f ', case=False) | CommandLine.str.contains(r' \u2014f ', case=False) | CommandLine.str.contains(r' \u2015f ', case=False)) & ~ (CommandLine.str.contains(r'.rsp', case=False) | ParentImage=='C:\\\\Windows\\\\System32\\\\runonce.exe' & Image=='C:\\\\Windows\\\\System32\\\\odbcconf.exe' & CommandLine.str.contains(r'.exe /E /F \"C:\\\\WINDOWS\\\\system32\\\\odbcconf.tmp\"', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Chromium Browser Instance Executed With Custom Extension",
        "id": "88d6e60c-759d-4ac1-a447-c0f1466c2d21",
        "status": "test",
        "description": "Detects a Chromium based browser process with the 'load-extension' flag to start a instance with a custom extension",
        "tags": [
            "attack.persistence",
            "attack.t1176"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\brave.exe', case=False) | Image.str.contains(r'\\\\chrome.exe', case=False) | Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False)) & CommandLine.str.contains(r'--load-extension=', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Defense Evasion Via Binary Rename",
        "id": "36480ae1-a1cb-4eaa-a0d6-29801d7e9142",
        "status": "test",
        "description": "Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName==['Cmd.Exe', 'CONHOST.EXE', '7z.exe', 'WinRAR.exe', 'wevtutil.exe', 'net.exe', 'net1.exe', 'netsh.exe', 'InstallUtil.exe']) & ~ (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\conhost.exe', case=False) | Image.str.contains(r'\\\\7z.exe', case=False) | Image.str.contains(r'\\\\WinRAR.exe', case=False) | Image.str.contains(r'\\\\wevtutil.exe', case=False) | Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | Image.str.contains(r'\\\\netsh.exe', case=False) | Image.str.contains(r'\\\\InstallUtil.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Enumeration for 3rd Party Creds From CLI",
        "id": "87a476dc-0079-4583-a985-dee7a20a03de",
        "status": "test",
        "description": "Detects processes that query known 3rd party registry keys that holds credentials via commandline",
        "tags": [
            "attack.credential-access",
            "attack.t1552.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\\\\Software\\\\SimonTatham\\\\PuTTY\\\\Sessions', case=False) | CommandLine.str.contains(r'\\\\Software\\\\SimonTatham\\\\PuTTY\\\\SshHostKeys\\\\', case=False) | CommandLine.str.contains(r'\\\\Software\\\\Mobatek\\\\MobaXterm\\\\', case=False) | CommandLine.str.contains(r'\\\\Software\\\\WOW6432Node\\\\Radmin\\\\v3.0\\\\Server\\\\Parameters\\\\Radmin', case=False) | CommandLine.str.contains(r'\\\\Software\\\\Aerofox\\\\FoxmailPreview', case=False) | CommandLine.str.contains(r'\\\\Software\\\\Aerofox\\\\Foxmail\\\\V3.1', case=False) | CommandLine.str.contains(r'\\\\Software\\\\IncrediMail\\\\Identities', case=False) | CommandLine.str.contains(r'\\\\Software\\\\Qualcomm\\\\Eudora\\\\CommandLine', case=False) | CommandLine.str.contains(r'\\\\Software\\\\RimArts\\\\B2\\\\Settings', case=False) | CommandLine.str.contains(r'\\\\Software\\\\OpenVPN-GUI\\\\configs', case=False) | CommandLine.str.contains(r'\\\\Software\\\\Martin Prikryl\\\\WinSCP 2\\\\Sessions', case=False) | CommandLine.str.contains(r'\\\\Software\\\\FTPWare\\\\COREFTP\\\\Sites', case=False) | CommandLine.str.contains(r'\\\\Software\\\\DownloadManager\\\\Passwords', case=False) | CommandLine.str.contains(r'\\\\Software\\\\OpenSSH\\\\Agent\\\\Keys', case=False) | CommandLine.str.contains(r'\\\\Software\\\\TightVNC\\\\Server', case=False) | CommandLine.str.contains(r'\\\\Software\\\\ORL\\\\WinVNC3\\\\Password', case=False) | CommandLine.str.contains(r'\\\\Software\\\\RealVNC\\\\WinVNC4', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Downloaded From Direct IP Via Certutil.EXE",
        "id": "13e6fe51-d478-4c7e-b0f2-6da9b400a829",
        "status": "test",
        "description": "Detects the execution of certutil with certain flags that allow the utility to download files from direct IPs.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certutil.exe', case=False) | OriginalFileName=='CertUtil.exe') & (CommandLine.str.contains(r'urlcache ', case=False) | CommandLine.str.contains(r'verifyctl ', case=False)) & (CommandLine.str.contains(r'://1', case=False) | CommandLine.str.contains(r'://2', case=False) | CommandLine.str.contains(r'://3', case=False) | CommandLine.str.contains(r'://4', case=False) | CommandLine.str.contains(r'://5', case=False) | CommandLine.str.contains(r'://6', case=False) | CommandLine.str.contains(r'://7', case=False) | CommandLine.str.contains(r'://8', case=False) | CommandLine.str.contains(r'://9', case=False)) & ~ CommandLine.str.contains(r'://7-', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Procdump Execution",
        "id": "2e65275c-8288-4ab4-aeb7-6274f58b6b20",
        "status": "test",
        "description": "Detects usage of the SysInternals Procdump utility",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.t1003.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\procdump.exe', case=False) | Image.str.contains(r'\\\\procdump64.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Share And Session Enumeration Using Net.EXE",
        "id": "62510e69-616b-4078-b371-847da438cc03",
        "status": "stable",
        "description": "Detects attempts to enumerate file shares, printer shares and sessions using \"net.exe\" with the \"view\" flag.",
        "tags": [
            "attack.discovery",
            "attack.t1018"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | OriginalFileName==['net.exe', 'net1.exe']) & CommandLine.str.contains(r'view', case=False) & ~ CommandLine.str.contains(r'\\\\\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Defense Evasion Activity Via Emoji Usage In CommandLine - 4",
        "id": "225274c4-8dd1-40db-9e09-71dff4f6fb3c",
        "status": "test",
        "description": "Detects the usage of emojis in the command line, this could be a sign of potential defense evasion activity.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\ud83d\udd38', case=False) | CommandLine.str.contains(r'\ud83d\udd39', case=False) | CommandLine.str.contains(r'\ud83d\udd36', case=False) | CommandLine.str.contains(r'\ud83d\udd37', case=False) | CommandLine.str.contains(r'\ud83d\udd33', case=False) | CommandLine.str.contains(r'\ud83d\udd32', case=False) | CommandLine.str.contains(r'\u25aa\ufe0f', case=False) | CommandLine.str.contains(r'\u25ab\ufe0f', case=False) | CommandLine.str.contains(r'\u25fe\ufe0f', case=False) | CommandLine.str.contains(r'\u25fd\ufe0f', case=False) | CommandLine.str.contains(r'\u25fc\ufe0f', case=False) | CommandLine.str.contains(r'\u25fb\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udfe5', case=False) | CommandLine.str.contains(r'\ud83d\udfe7', case=False) | CommandLine.str.contains(r'\ud83d\udfe8', case=False) | CommandLine.str.contains(r'\ud83d\udfe9', case=False) | CommandLine.str.contains(r'\ud83d\udfe6', case=False) | CommandLine.str.contains(r'\ud83d\udfea', case=False) | CommandLine.str.contains(r'\u2b1b\ufe0f', case=False) | CommandLine.str.contains(r'\u2b1c\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udfeb', case=False) | CommandLine.str.contains(r'\ud83d\udd08', case=False) | CommandLine.str.contains(r'\ud83d\udd07', case=False) | CommandLine.str.contains(r'\ud83d\udd09', case=False) | CommandLine.str.contains(r'\ud83d\udd0a', case=False) | CommandLine.str.contains(r'\ud83d\udd14', case=False) | CommandLine.str.contains(r'\ud83d\udd15', case=False) | CommandLine.str.contains(r'\ud83d\udce3', case=False) | CommandLine.str.contains(r'\ud83d\udce2', case=False) | CommandLine.str.contains(r'\ud83d\udc41\u200d\ud83d\udde8', case=False) | CommandLine.str.contains(r'\ud83d\udcac', case=False) | CommandLine.str.contains(r'\ud83d\udcad', case=False) | CommandLine.str.contains(r'\ud83d\uddef', case=False) | CommandLine.str.contains(r'\u2660\ufe0f', case=False) | CommandLine.str.contains(r'\u2663\ufe0f', case=False) | CommandLine.str.contains(r'\u2665\ufe0f', case=False) | CommandLine.str.contains(r'\u2666\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udccf', case=False) | CommandLine.str.contains(r'\ud83c\udfb4', case=False) | CommandLine.str.contains(r'\ud83c\udc04\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udd50', case=False) | CommandLine.str.contains(r'\ud83d\udd51', case=False) | CommandLine.str.contains(r'\ud83d\udd52', case=False) | CommandLine.str.contains(r'\ud83d\udd53', case=False) | CommandLine.str.contains(r'\ud83d\udd54', case=False) | CommandLine.str.contains(r'\ud83d\udd55', case=False) | CommandLine.str.contains(r'\ud83d\udd56', case=False) | CommandLine.str.contains(r'\ud83d\udd57', case=False) | CommandLine.str.contains(r'\ud83d\udd58', case=False) | CommandLine.str.contains(r'\ud83d\udd59', case=False) | CommandLine.str.contains(r'\ud83d\udd5a', case=False) | CommandLine.str.contains(r'\ud83d\udd5b', case=False) | CommandLine.str.contains(r'\ud83d\udd5c', case=False) | CommandLine.str.contains(r'\ud83d\udd5d', case=False) | CommandLine.str.contains(r'\ud83d\udd5e', case=False) | CommandLine.str.contains(r'\ud83d\udd5f', case=False) | CommandLine.str.contains(r'\ud83d\udd60', case=False) | CommandLine.str.contains(r'\ud83d\udd61', case=False) | CommandLine.str.contains(r'\ud83d\udd62', case=False) | CommandLine.str.contains(r'\ud83d\udd63', case=False) | CommandLine.str.contains(r'\ud83d\udd64', case=False) | CommandLine.str.contains(r'\ud83d\udd65', case=False) | CommandLine.str.contains(r'\ud83d\udd66', case=False) | CommandLine.str.contains(r'\ud83d\udd67\u2722', case=False) | CommandLine.str.contains(r'\u2723', case=False) | CommandLine.str.contains(r'\u2724', case=False) | CommandLine.str.contains(r'\u2725', case=False) | CommandLine.str.contains(r'\u2726', case=False) | CommandLine.str.contains(r'\u2727', case=False) | CommandLine.str.contains(r'\u2605', case=False) | CommandLine.str.contains(r'\u2606', case=False) | CommandLine.str.contains(r'\u272f', case=False) | CommandLine.str.contains(r'\u2721\ufe0e', case=False) | CommandLine.str.contains(r'\u2729', case=False) | CommandLine.str.contains(r'\u272a', case=False) | CommandLine.str.contains(r'\u272b', case=False) | CommandLine.str.contains(r'\u272c', case=False) | CommandLine.str.contains(r'\u272d', case=False) | CommandLine.str.contains(r'\u272e', case=False) | CommandLine.str.contains(r'\u2736', case=False) | CommandLine.str.contains(r'\u2737', case=False) | CommandLine.str.contains(r'\u2735', case=False) | CommandLine.str.contains(r'\u2738', case=False) | CommandLine.str.contains(r'\u2739', case=False) | CommandLine.str.contains(r'\u2192', case=False) | CommandLine.str.contains(r'\u21d2', case=False) | CommandLine.str.contains(r'\u27f9', case=False) | CommandLine.str.contains(r'\u21e8', case=False) | CommandLine.str.contains(r'\u21fe', case=False) | CommandLine.str.contains(r'\u27be', case=False) | CommandLine.str.contains(r'\u21e2', case=False) | CommandLine.str.contains(r'\u261b', case=False) | CommandLine.str.contains(r'\u261e', case=False) | CommandLine.str.contains(r'\u2794', case=False) | CommandLine.str.contains(r'\u279c', case=False) | CommandLine.str.contains(r'\u2799', case=False) | CommandLine.str.contains(r'\u279b', case=False) | CommandLine.str.contains(r'\u279d', case=False) | CommandLine.str.contains(r'\u279e', case=False) | CommandLine.str.contains(r'\u2660\ufe0e', case=False) | CommandLine.str.contains(r'\u2663\ufe0e', case=False) | CommandLine.str.contains(r'\u2665\ufe0e', case=False) | CommandLine.str.contains(r'\u2666\ufe0e', case=False) | CommandLine.str.contains(r'\u2664', case=False) | CommandLine.str.contains(r'\u2667', case=False) | CommandLine.str.contains(r'\u2661', case=False) | CommandLine.str.contains(r'\u2662', case=False) | CommandLine.str.contains(r'\u265a', case=False) | CommandLine.str.contains(r'\u265b', case=False) | CommandLine.str.contains(r'\u265c', case=False) | CommandLine.str.contains(r'\u265d', case=False) | CommandLine.str.contains(r'\u265e', case=False) | CommandLine.str.contains(r'\u265f', case=False) | CommandLine.str.contains(r'\u2654', case=False) | CommandLine.str.contains(r'\u2655', case=False) | CommandLine.str.contains(r'\u2656', case=False) | CommandLine.str.contains(r'\u2657', case=False) | CommandLine.str.contains(r'\u2658', case=False) | CommandLine.str.contains(r'\u2659', case=False) | CommandLine.str.contains(r'\u2680', case=False) | CommandLine.str.contains(r'\u2681', case=False) | CommandLine.str.contains(r'\u2682', case=False) | CommandLine.str.contains(r'\u2683', case=False) | CommandLine.str.contains(r'\u2684', case=False) | CommandLine.str.contains(r'\u2685', case=False) | CommandLine.str.contains(r'\ud83c\udca0', case=False) | CommandLine.str.contains(r'\u2688', case=False) | CommandLine.str.contains(r'\u2689', case=False) | CommandLine.str.contains(r'\u2686', case=False) | CommandLine.str.contains(r'\u2687', case=False) | CommandLine.str.contains(r'\ud80c\udc00', case=False) | CommandLine.str.contains(r'\ud80c\udc01', case=False) | CommandLine.str.contains(r'\ud80c\udc02', case=False) | CommandLine.str.contains(r'\ud80c\udc03', case=False) | CommandLine.str.contains(r'\ud80c\udc04', case=False) | CommandLine.str.contains(r'\ud80c\udc05', case=False) | CommandLine.str.contains(r'\ud80c\udc06', case=False) | CommandLine.str.contains(r'\ud80c\udc07', case=False) | CommandLine.str.contains(r'\ud80c\udc08', case=False) | CommandLine.str.contains(r'\ud80c\udc09', case=False) | CommandLine.str.contains(r'\ud80c\udc0a', case=False) | CommandLine.str.contains(r'\ud80c\udc0b', case=False) | CommandLine.str.contains(r'\ud80c\udc0c', case=False) | CommandLine.str.contains(r'\ud80c\udc0d', case=False) | CommandLine.str.contains(r'\ud80c\udc0e', case=False) | CommandLine.str.contains(r'\ud80c\udc0f', case=False) | CommandLine.str.contains(r'\ud80c\udc10', case=False) | CommandLine.str.contains(r'\ud80c\udc11', case=False) | CommandLine.str.contains(r'\ud80c\udc12', case=False) | CommandLine.str.contains(r'\ud80c\udc13', case=False) | CommandLine.str.contains(r'\ud80c\udc14', case=False) | CommandLine.str.contains(r'\ud80c\udc15', case=False) | CommandLine.str.contains(r'\ud80c\udc16', case=False) | CommandLine.str.contains(r'\ud80c\udc17', case=False) | CommandLine.str.contains(r'\ud80c\udc18', case=False) | CommandLine.str.contains(r'\ud80c\udc19', case=False) | CommandLine.str.contains(r'\ud80c\udc1a', case=False) | CommandLine.str.contains(r'\ud80c\udc1b', case=False) | CommandLine.str.contains(r'\ud80c\udc1c', case=False) | CommandLine.str.contains(r'\ud80c\udc1d\ud83c\udff3\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udff4', case=False) | CommandLine.str.contains(r'\ud83c\udfc1', case=False) | CommandLine.str.contains(r'\ud83d\udea9', case=False) | CommandLine.str.contains(r'\ud83c\udff3\ufe0f\u200d\ud83c\udf08', case=False) | CommandLine.str.contains(r'\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udff4\u200d\u2620\ufe0f', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddeb', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddfd', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddf1', case=False) | CommandLine.str.contains(r'\ud83c\udde9\ud83c\uddff', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddf8', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\udde9', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddf4', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddee', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddf6', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddec', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddfc', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddfa', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddf9', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddff', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddf8', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\udded', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\udde9', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\udde7', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddfe', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddff', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddef', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddf9', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddf4', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\udde6', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddfc', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\uddee\ud83c\uddf4', case=False) | CommandLine.str.contains(r'\ud83c\uddfb\ud83c\uddec', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddf3', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddec', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddeb', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddee', case=False) | CommandLine.str.contains(r'\ud83c\uddf0\ud83c\udded', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\udde6', case=False) | CommandLine.str.contains(r'\ud83c\uddee\ud83c\udde8', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddfb', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddf6', case=False) | CommandLine.str.contains(r'\ud83c\uddf0\ud83c\uddfe', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddeb', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\udde9', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddf1', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddf3', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddfd', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\udde8', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddf4', case=False) | CommandLine.str.contains(r'\ud83c\uddf0\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddec', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\udde9', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddf0', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddee', case=False) | CommandLine.str.contains(r'\ud83c\udded\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddfa', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddfc', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddfe', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\uddff', case=False) | CommandLine.str.contains(r'\ud83c\udde9\ud83c\uddf0', case=False) | CommandLine.str.contains(r'\ud83c\udde9\ud83c\uddef', case=False) | CommandLine.str.contains(r'\ud83c\udde9\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\udde9\ud83c\uddf4', case=False) | CommandLine.str.contains(r'\ud83c\uddea\ud83c\udde8', case=False) | CommandLine.str.contains(r'\ud83c\uddea\ud83c\uddec', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddfb', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddf6', case=False) | CommandLine.str.contains(r'\ud83c\uddea\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\uddea\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\uddea\ud83c\uddf9', case=False) | CommandLine.str.contains(r'\ud83c\uddea\ud83c\uddfa', case=False) | CommandLine.str.contains(r'\ud83c\uddeb\ud83c\uddf0', case=False) | CommandLine.str.contains(r'\ud83c\uddeb\ud83c\uddf4', case=False) | CommandLine.str.contains(r'\ud83c\uddeb\ud83c\uddef', case=False) | CommandLine.str.contains(r'\ud83c\uddeb\ud83c\uddee', case=False) | CommandLine.str.contains(r'\ud83c\uddeb\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddeb', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\uddeb', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\uddeb', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\udde6', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\udde9\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\udded', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddee', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddf1', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\udde9', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddf5', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddfa', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddf9', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddec', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddf3', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddfc', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddfe', case=False) | CommandLine.str.contains(r'\ud83c\udded\ud83c\uddf9', case=False) | CommandLine.str.contains(r'\ud83c\udded\ud83c\uddf3', case=False) | CommandLine.str.contains(r'\ud83c\udded\ud83c\uddf0', case=False) | CommandLine.str.contains(r'\ud83c\udded\ud83c\uddfa', case=False) | CommandLine.str.contains(r'\ud83c\uddee\ud83c\uddf8', case=False) | CommandLine.str.contains(r'\ud83c\uddee\ud83c\uddf3', case=False) | CommandLine.str.contains(r'\ud83c\uddee\ud83c\udde9', case=False) | CommandLine.str.contains(r'\ud83c\uddee\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\uddee\ud83c\uddf6', case=False) | CommandLine.str.contains(r'\ud83c\uddee\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\uddee\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\uddee\ud83c\uddf1', case=False) | CommandLine.str.contains(r'\ud83c\uddee\ud83c\uddf9', case=False) | CommandLine.str.contains(r'\ud83c\uddef\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\uddef\ud83c\uddf5', case=False) | CommandLine.str.contains(r'\ud83c\udf8c', case=False) | CommandLine.str.contains(r'\ud83c\uddef\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\uddef\ud83c\uddf4', case=False) | CommandLine.str.contains(r'\ud83c\uddf0\ud83c\uddff', case=False) | CommandLine.str.contains(r'\ud83c\uddf0\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\uddf0\ud83c\uddee', case=False) | CommandLine.str.contains(r'\ud83c\uddfd\ud83c\uddf0', case=False) | CommandLine.str.contains(r'\ud83c\uddf0\ud83c\uddfc', case=False) | CommandLine.str.contains(r'\ud83c\uddf0\ud83c\uddec', case=False) | CommandLine.str.contains(r'\ud83c\uddf1\ud83c\udde6', case=False) | CommandLine.str.contains(r'\ud83c\uddf1\ud83c\uddfb', case=False) | CommandLine.str.contains(r'\ud83c\uddf1\ud83c\udde7', case=False) | CommandLine.str.contains(r'\ud83c\uddf1\ud83c\uddf8', case=False) | CommandLine.str.contains(r'\ud83c\uddf1\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\uddf1\ud83c\uddfe', case=False) | CommandLine.str.contains(r'\ud83c\uddf1\ud83c\uddee', case=False) | CommandLine.str.contains(r'\ud83c\uddf1\ud83c\uddf9', case=False) | CommandLine.str.contains(r'\ud83c\uddf1\ud83c\uddfa', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddf4', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddf0', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddec', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddfc', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddfe', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddfb', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddf1', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddf9', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\udded', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddf6', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddfa', case=False) | CommandLine.str.contains(r'\ud83c\uddfe\ud83c\uddf9', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddfd', case=False) | CommandLine.str.contains(r'\ud83c\uddeb\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\udde9', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\udde8', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddf3', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddf8', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\udde6', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddff', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\uddf3\ud83c\udde6', case=False) | CommandLine.str.contains(r'\ud83c\uddf3\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\uddf3\ud83c\uddf5', case=False) | CommandLine.str.contains(r'\ud83c\uddf3\ud83c\uddf1', case=False) | CommandLine.str.contains(r'\ud83c\uddf3\ud83c\udde8', case=False) | CommandLine.str.contains(r'\ud83c\uddf3\ud83c\uddff', case=False) | CommandLine.str.contains(r'\ud83c\uddf3\ud83c\uddee', case=False) | CommandLine.str.contains(r'\ud83c\uddf3\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\uddf3\ud83c\uddec', case=False) | CommandLine.str.contains(r'\ud83c\uddf3\ud83c\uddfa', case=False) | CommandLine.str.contains(r'\ud83c\uddf3\ud83c\uddeb', case=False) | CommandLine.str.contains(r'\ud83c\uddf0\ud83c\uddf5', case=False) | CommandLine.str.contains(r'\ud83c\uddf2\ud83c\uddf5', case=False) | CommandLine.str.contains(r'\ud83c\uddf3\ud83c\uddf4', case=False) | CommandLine.str.contains(r'\ud83c\uddf4\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\uddf0', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\uddfc', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\uddf8', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\udde6', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\uddec', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\uddfe', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\udded', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\uddf3', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\uddf1', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\uddf9', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\uddf6\ud83c\udde6', case=False) | CommandLine.str.contains(r'\ud83c\uddf7\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\uddf7\ud83c\uddf4', case=False) | CommandLine.str.contains(r'\ud83c\uddf7\ud83c\uddfa', case=False) | CommandLine.str.contains(r'\ud83c\uddf7\ud83c\uddfc', case=False) | CommandLine.str.contains(r'\ud83c\uddfc\ud83c\uddf8', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\udde6', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddf3', case=False) | CommandLine.str.contains(r'\ud83c\uddf7\ud83c\uddf8', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\udde8', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddf1', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddec', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddfd', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddf0', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddee', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\uddf8', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\udde7', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddf4', case=False) | CommandLine.str.contains(r'\ud83c\uddff\ud83c\udde6', case=False) | CommandLine.str.contains(r'\ud83c\uddf0\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddf8', case=False) | CommandLine.str.contains(r'\ud83c\uddea\ud83c\uddf8', case=False) | CommandLine.str.contains(r'\ud83c\uddf1\ud83c\uddf0', case=False) | CommandLine.str.contains(r'\ud83c\udde7\ud83c\uddf1', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\udded', case=False) | CommandLine.str.contains(r'\ud83c\uddf0\ud83c\uddf3', case=False) | CommandLine.str.contains(r'\ud83c\uddf1\ud83c\udde8', case=False) | CommandLine.str.contains(r'\ud83c\uddf5\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\uddfb\ud83c\udde8', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\udde9', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddff', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\udde8\ud83c\udded', case=False) | CommandLine.str.contains(r'\ud83c\uddf8\ud83c\uddfe', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\uddfc', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\uddef', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\uddff', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\udded', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\uddf1', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\uddec', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\uddf0', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\uddf4', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\uddf9', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\uddf3', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\uddf7', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\udde8', case=False) | CommandLine.str.contains(r'\ud83c\uddf9\ud83c\uddfb', case=False) | CommandLine.str.contains(r'\ud83c\uddfb\ud83c\uddee', case=False) | CommandLine.str.contains(r'\ud83c\uddfa\ud83c\uddec', case=False) | CommandLine.str.contains(r'\ud83c\uddfa\ud83c\udde6', case=False) | CommandLine.str.contains(r'\ud83c\udde6\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\uddec\ud83c\udde7', case=False) | CommandLine.str.contains(r'\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f', case=False) | CommandLine.str.contains(r'\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f', case=False) | CommandLine.str.contains(r'\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f', case=False) | CommandLine.str.contains(r'\ud83c\uddfa\ud83c\uddf3', case=False) | CommandLine.str.contains(r'\ud83c\uddfa\ud83c\uddf8', case=False) | CommandLine.str.contains(r'\ud83c\uddfa\ud83c\uddfe', case=False) | CommandLine.str.contains(r'\ud83c\uddfa\ud83c\uddff', case=False) | CommandLine.str.contains(r'\ud83c\uddfb\ud83c\uddfa', case=False) | CommandLine.str.contains(r'\ud83c\uddfb\ud83c\udde6', case=False) | CommandLine.str.contains(r'\ud83c\uddfb\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\uddfb\ud83c\uddf3', case=False) | CommandLine.str.contains(r'\ud83c\uddfc\ud83c\uddeb', case=False) | CommandLine.str.contains(r'\ud83c\uddea\ud83c\udded', case=False) | CommandLine.str.contains(r'\ud83c\uddfe\ud83c\uddea', case=False) | CommandLine.str.contains(r'\ud83c\uddff\ud83c\uddf2', case=False) | CommandLine.str.contains(r'\ud83c\uddff\ud83c\uddfc\ud83e\udee0', case=False) | CommandLine.str.contains(r'\ud83e\udee2', case=False) | CommandLine.str.contains(r'\ud83e\udee3', case=False) | CommandLine.str.contains(r'\ud83e\udee1', case=False) | CommandLine.str.contains(r'\ud83e\udee5', case=False) | CommandLine.str.contains(r'\ud83e\udee4', case=False) | CommandLine.str.contains(r'\ud83e\udd79', case=False) | CommandLine.str.contains(r'\ud83e\udef1', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef2', case=False) | CommandLine.str.contains(r'\ud83e\udef2\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef2\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef2\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef2\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef2\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef3', case=False) | CommandLine.str.contains(r'\ud83e\udef3\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef3\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef3\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef3\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef3\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef4', case=False) | CommandLine.str.contains(r'\ud83e\udef4\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef4\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef4\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef4\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef4\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef0', case=False) | CommandLine.str.contains(r'\ud83e\udef0\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef0\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef0\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef0\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef0\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef5', case=False) | CommandLine.str.contains(r'\ud83e\udef5\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef5\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef5\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef5\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef5\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef6', case=False) | CommandLine.str.contains(r'\ud83e\udef6\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef6\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef6\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef6\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef6\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udd1d\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udd1d\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udd1d\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udd1d\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udd1d\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffc\u200d\ud83e\udef2\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffc\u200d\ud83e\udef2\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffc\u200d\ud83e\udef2\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffc\u200d\ud83e\udef2\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffd\u200d\ud83e\udef2\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffd\u200d\ud83e\udef2\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffd\u200d\ud83e\udef2\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffd\u200d\ud83e\udef2\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffe\u200d\ud83e\udef2\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffe\u200d\ud83e\udef2\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffe\u200d\ud83e\udef2\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udffe\u200d\ud83e\udef2\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udfff\u200d\ud83e\udef2\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udfff\u200d\ud83e\udef2\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udfff\u200d\ud83e\udef2\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udef1\ud83c\udfff\u200d\ud83e\udef2\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udee6', case=False) | CommandLine.str.contains(r'\ud83e\udec5', case=False) | CommandLine.str.contains(r'\ud83e\udec5\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udec5\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udec5\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udec5\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udec5\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udec3', case=False) | CommandLine.str.contains(r'\ud83e\udec3\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udec3\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udec3\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udec3\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udec3\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\udec4', case=False) | CommandLine.str.contains(r'\ud83e\udec4\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\udec4\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\udec4\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\udec4\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\udec4\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddcc', case=False) | CommandLine.str.contains(r'\ud83e\udeb8', case=False) | CommandLine.str.contains(r'\ud83e\udeb7', case=False) | CommandLine.str.contains(r'\ud83e\udeb9', case=False) | CommandLine.str.contains(r'\ud83e\udeba', case=False) | CommandLine.str.contains(r'\ud83e\uded8', case=False) | CommandLine.str.contains(r'\ud83e\uded7', case=False) | CommandLine.str.contains(r'\ud83e\uded9', case=False) | CommandLine.str.contains(r'\ud83d\udedd', case=False) | CommandLine.str.contains(r'\ud83d\udede', case=False) | CommandLine.str.contains(r'\ud83d\udedf', case=False) | CommandLine.str.contains(r'\ud83e\udeac', case=False) | CommandLine.str.contains(r'\ud83e\udea9', case=False) | CommandLine.str.contains(r'\ud83e\udeab', case=False) | CommandLine.str.contains(r'\ud83e\ude7c', case=False) | CommandLine.str.contains(r'\ud83e\ude7b', case=False) | CommandLine.str.contains(r'\ud83e\udee7', case=False) | CommandLine.str.contains(r'\ud83e\udeaa', case=False) | CommandLine.str.contains(r'\ud83d\udff0', case=False) | CommandLine.str.contains(r'\ud83d\ude2e\u200d\ud83d\udca8', case=False) | CommandLine.str.contains(r'\ud83d\ude35\u200d\ud83d\udcab', case=False) | CommandLine.str.contains(r'\ud83d\ude36\u200d\ud83c\udf2b\ufe0f', case=False) | CommandLine.str.contains(r'\u2764\ufe0f\u200d\ud83d\udd25', case=False) | CommandLine.str.contains(r'\u2764\ufe0f\u200d\ud83e\ude79', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffb\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffc\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffd\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffe\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udfff\u200d\u2640\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffb\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffc\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffd\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udffe\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83e\uddd4\ud83c\udfff\u200d\u2642\ufe0f', case=False) | CommandLine.str.contains(r'\ud83d\udc91\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc91\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc91\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc91\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc91\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc8f\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc8f\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc8f\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc8f\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc8f\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd', case=False) | CommandLine.str.contains(r'\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Local Accounts Discovery",
        "id": "502b42de-4306-40b4-9596-6f590c81f073",
        "status": "test",
        "description": "Local accounts, System Owner/User discovery using operating systems utilities",
        "tags": [
            "attack.discovery",
            "attack.t1033",
            "attack.t1087.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) & CommandLine.str.contains(r' /c', case=False) & CommandLine.str.contains(r'dir ', case=False) & CommandLine.str.contains(r'\\\\Users\\\\', case=False) & ~ CommandLine.str.contains(r' rmdir ', case=False) | (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False)) & CommandLine.str.contains(r'user', case=False) & ~ (CommandLine.str.contains(r'/domain', case=False) | CommandLine.str.contains(r'/add', case=False) | CommandLine.str.contains(r'/delete', case=False) | CommandLine.str.contains(r'/active', case=False) | CommandLine.str.contains(r'/expires', case=False) | CommandLine.str.contains(r'/passwordreq', case=False) | CommandLine.str.contains(r'/scriptpath', case=False) | CommandLine.str.contains(r'/times', case=False) | CommandLine.str.contains(r'/workstations', case=False)) | Image.str.contains(r'\\\\whoami.exe', case=False) | Image.str.contains(r'\\\\quser.exe', case=False) | Image.str.contains(r'\\\\qwinsta.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) & CommandLine.str.contains(r'useraccount', case=False) & CommandLine.str.contains(r'get', case=False) | Image.str.contains(r'\\\\cmdkey.exe', case=False) & CommandLine.str.contains(r' /l', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious WmiPrvSE Child Process",
        "id": "8a582fe2-0882-4b89-a82a-da6b2dc32937",
        "status": "test",
        "description": "Detects suspicious and uncommon child processes of WmiPrvSE",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1047",
            "attack.t1204.002",
            "attack.t1218.010"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\wbem\\\\WmiPrvSE.exe', case=False) & (Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\verclsid.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) & (CommandLine.str.contains(r'cscript', case=False) | CommandLine.str.contains(r'mshta', case=False) | CommandLine.str.contains(r'powershell', case=False) | CommandLine.str.contains(r'pwsh', case=False) | CommandLine.str.contains(r'regsvr32', case=False) | CommandLine.str.contains(r'rundll32', case=False) | CommandLine.str.contains(r'wscript', case=False))) & ~ (Image.str.contains(r'\\\\WerFault.exe', case=False) | Image.str.contains(r'\\\\WmiPrvSE.exe', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) & CommandLine.str.contains(r'/i ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Invoke-Obfuscation VAR+ Launcher",
        "id": "27aec9c9-dbb0-4939-8422-1742242471d0",
        "status": "test",
        "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'cmd.{0,5}(?:/c|/r)(?:\\\\s|)\\\\\"set\\\\s[a-zA-Z]{3,6}.*(?:\\\\{\\\\d\\\\}){1,}\\\\\\\\\\\\\"\\\\s+?\\\\-f(?:.*\\\\)){1,}.*\\\\\"')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Empire PowerShell Launch Parameters",
        "id": "79f4ede3-402e-41c8-bc3e-ebbf5f162581",
        "status": "test",
        "description": "Detects suspicious powershell command line parameters used in Empire",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' -NoP -sta -NonI -W Hidden -Enc ', case=False) | CommandLine.str.contains(r' -noP -sta -w 1 -enc ', case=False) | CommandLine.str.contains(r' -NoP -NonI -W Hidden -enc ', case=False) | CommandLine.str.contains(r' -noP -sta -w 1 -enc', case=False) | CommandLine.str.contains(r' -enc  SQB', case=False) | CommandLine.str.contains(r' -nop -exec bypass -EncodedCommand ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Execution Of Regasm/Regsvcs From Uncommon Location",
        "id": "cc368ed0-2411-45dc-a222-510ace303cb2",
        "status": "test",
        "description": "Detects potentially suspicious execution of the Regasm/Regsvcs utilities from a potentially suspicious location",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.009"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Regsvcs.exe', case=False) | Image.str.contains(r'\\\\Regasm.exe', case=False) | OriginalFileName==['RegSvcs.exe', 'RegAsm.exe']) & (CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\', case=False) | CommandLine.str.contains(r'\\\\PerfLogs\\\\', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Email Exifiltration Via Powershell",
        "id": "312d0384-401c-4b8b-abdf-685ffba9a332",
        "status": "test",
        "description": "Detects email exfiltration via powershell cmdlets",
        "tags": [
            "attack.exfiltration"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & CommandLine.str.contains(r'Add-PSSnapin', case=False) & CommandLine.str.contains(r'Get-Recipient', case=False) & CommandLine.str.contains(r'-ExpandProperty', case=False) & CommandLine.str.contains(r'EmailAddresses', case=False) & CommandLine.str.contains(r'SmtpAddress', case=False) & CommandLine.str.contains(r'-hidetableheaders', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Extrac32 Alternate Data Stream Execution",
        "id": "4b13db67-0c45-40f1-aba8-66a1a7198a1e",
        "status": "test",
        "description": "Extract data from cab file and hide it in an alternate data stream",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'extrac32.exe', case=False) & CommandLine.str.contains(r'.cab', case=False) & CommandLine.str.contains(r':[^\\\\\\\\]')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use Short Name Path in Image",
        "id": "a96970af-f126-420d-90e1-d37bf25e50e1",
        "status": "test",
        "description": "Detect use of the Windows 8.3 short name. Which could be used as a method to avoid Image detection",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'~1\\\\', case=False) | Image.str.contains(r'~2\\\\', case=False)) & ~ (ParentImage==['C:\\\\Windows\\\\System32\\\\Dism.exe', 'C:\\\\Windows\\\\System32\\\\cleanmgr.exe'] | ParentImage.str.contains(r'\\\\WebEx\\\\WebexHost.exe', case=False) | ParentImage.str.contains(r'\\\\thor\\\\thor64.exe', case=False) | Product=='InstallShield (R)' | Description=='InstallShield (R) Setup Engine' | Company=='InstallShield Software Corporation' | Image.str.contains(r'\\\\AppData\\\\', case=False) & Image.str.contains(r'\\\\Temp\\\\', case=False) | Image.str.contains(r'~1\\\\unzip.exe', case=False) | Image.str.contains(r'~1\\\\7zG.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Command Line Path Traversal Evasion Attempt",
        "id": "1327381e-6ab0-4f38-b583-4c1b8346a56b",
        "status": "test",
        "description": "Detects potential evasion or obfuscation attempts using bogus path traversal via the commandline",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Windows\\\\', case=False) & (CommandLine.str.contains(r'\\\\..\\\\Windows\\\\', case=False) | CommandLine.str.contains(r'\\\\..\\\\System32\\\\', case=False) | CommandLine.str.contains(r'\\\\..\\\\..\\\\', case=False)) | CommandLine.str.contains(r'.exe\\\\..\\\\', case=False)) & ~ (CommandLine.str.contains(r'\\\\Google\\\\Drive\\\\googledrivesync.exe\\\\..\\\\', case=False) | CommandLine.str.contains(r'\\\\Citrix\\\\Virtual Smart Card\\\\Citrix.Authentication.VirtualSmartcard.Launcher.exe\\\\..\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Advpack Call Via Rundll32.EXE",
        "id": "a1473adb-5338-4a20-b4c3-126763e2d3d3",
        "status": "test",
        "description": "Detects execution of \"rundll32\" calling \"advpack.dll\" with potential obfuscated ordinal calls in order to leverage the \"RegisterOCX\" function",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE' | CommandLine.str.contains(r'rundll32', case=False)) & CommandLine.str.contains(r'advpack', case=False) & (CommandLine.str.contains(r'#+', case=False) & CommandLine.str.contains(r'12', case=False) | CommandLine.str.contains(r'#-', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SILENTTRINITY Stager Execution",
        "id": "03552375-cc2c-4883-bbe4-7958d5a980be",
        "status": "test",
        "description": "Detects SILENTTRINITY stager use via PE metadata",
        "tags": [
            "attack.command-and-control",
            "attack.t1071"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Description.str.contains(r'st2stager', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - AnyDesk Execution With Known Revoked Signing Certificate",
        "id": "41f407b5-3096-44ea-a74f-96d04fbc41be",
        "status": "test",
        "description": "Detects the execution of an AnyDesk binary with a version prior to 8.0.8.\nPrior to version 8.0.8, the Anydesk application used a signing certificate that got compromised by threat actors.\nUse this rule to detect instances of older versions of Anydesk using the compromised certificate\nThis is recommended in order to avoid attackers leveraging the certificate and signing their binaries to bypass detections.\n",
        "tags": [
            "attack.execution",
            "attack.initial-access"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\AnyDesk.exe', case=False) | Description=='AnyDesk' | Product=='AnyDesk' | Company=='AnyDesk Software GmbH') & (FileVersion.str.contains(r'7.0.', case=False) | FileVersion.str.contains(r'7.1.', case=False) | FileVersion.str.contains(r'8.0.1', case=False) | FileVersion.str.contains(r'8.0.2', case=False) | FileVersion.str.contains(r'8.0.3', case=False) | FileVersion.str.contains(r'8.0.4', case=False) | FileVersion.str.contains(r'8.0.5', case=False) | FileVersion.str.contains(r'8.0.6', case=False) | FileVersion.str.contains(r'8.0.7', case=False)) & ~ (CommandLine.str.contains(r' --remove', case=False) | CommandLine.str.contains(r' --uninstall', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Root Certificate Installed From Susp Locations",
        "id": "5f6a601c-2ecb-498b-9c33-660362323afa",
        "status": "test",
        "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1553.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'Import-Certificate', case=False) & CommandLine.str.contains(r' -FilePath ', case=False) & CommandLine.str.contains(r'Cert:\\\\LocalMachine\\\\Root', case=False) & (CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\TEMP\\\\', case=False) | CommandLine.str.contains(r'\\\\Desktop\\\\', case=False) | CommandLine.str.contains(r'\\\\Downloads\\\\', case=False) | CommandLine.str.contains(r'\\\\Perflogs\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Exports Critical Registry Keys To a File",
        "id": "82880171-b475-4201-b811-e9c826cd5eaa",
        "status": "test",
        "description": "Detects the export of a crital Registry key to a file.",
        "tags": [
            "attack.exfiltration",
            "attack.t1012"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\regedit.exe', case=False) | OriginalFileName=='REGEDIT.EXE') & (CommandLine.str.contains(r' -E ', case=False) | CommandLine.str.contains(r' /E ', case=False) | CommandLine.str.contains(r' \u2013E ', case=False) | CommandLine.str.contains(r' \u2014E ', case=False) | CommandLine.str.contains(r' \u2015E ', case=False)) & (CommandLine.str.contains(r'hklm', case=False) | CommandLine.str.contains(r'hkey_local_machine', case=False)) & (CommandLine.str.contains(r'\\\\system', case=False) | CommandLine.str.contains(r'\\\\sam', case=False) | CommandLine.str.contains(r'\\\\security', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Rundll32 Execution Without Parameters",
        "id": "5bb68627-3198-40ca-b458-49f973db8752",
        "status": "test",
        "description": "Detects rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002",
            "attack.t1570",
            "attack.execution",
            "attack.t1569.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine==['rundll32.exe', 'rundll32'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Curl Web Request With Potential Custom User-Agent",
        "id": "85de1f22-d189-44e4-8239-dc276b45379b",
        "status": "test",
        "description": "Detects execution of \"curl.exe\" with a potential custom \"User-Agent\". Attackers can leverage this to download or exfiltrate data via \"curl\" to a domain that only accept specific \"User-Agent\" strings",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\curl.exe', case=False) | OriginalFileName=='curl.exe') & CommandLine.str.contains(r'\\\\s-H\\\\s') & CommandLine.str.contains(r'User-Agent:', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - F-Secure C3 Load by Rundll32",
        "id": "b18c9d4c-fac9-4708-bd06-dd5bfacf200f",
        "status": "test",
        "description": "F-Secure C3 produces DLLs with a default exported StartNodeRelay function.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'rundll32.exe', case=False) & CommandLine.str.contains(r'.dll', case=False) & CommandLine.str.contains(r'StartNodeRelay', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Encryption/Decryption Via Gpg4win From Suspicious Locations",
        "id": "e1e0b7d7-e10b-4ee4-ac49-a4bda05d320d",
        "status": "test",
        "description": "Detects usage of Gpg4win to encrypt/decrypt files located in potentially suspicious locations.",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\gpg.exe', case=False) | Image.str.contains(r'\\\\gpg2.exe', case=False) | Product=='GNU Privacy Guard (GnuPG)' | Description=='GnuPG\u2019s OpenPGP tool') & CommandLine.str.contains(r'-passphrase', case=False) & (CommandLine.str.contains(r':\\\\PerfLogs\\\\', case=False) | CommandLine.str.contains(r':\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Register_App.Vbs LOLScript Abuse",
        "id": "28c8f68b-098d-45af-8d43-8089f3e35403",
        "status": "test",
        "description": "Detects potential abuse of the \"register_app.vbs\" script that is part of the Windows SDK. The script offers the capability to register new VSS/VDS Provider as a COM+ application. Attackers can use this to install malicious DLLs for persistence and execution.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | OriginalFileName==['cscript.exe', 'wscript.exe']) & CommandLine.str.contains(r'.vbs -register ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - KrbRelayUp Execution",
        "id": "12827a56-61a4-476a-a9cb-f3068f191073",
        "status": "test",
        "description": "Detects KrbRelayUp used to perform a universal no-fix local privilege escalation in Windows domain environments where LDAP signing is not enforced",
        "tags": [
            "attack.credential-access",
            "attack.t1558.003",
            "attack.lateral-movement",
            "attack.t1550.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\KrbRelayUp.exe', case=False) | OriginalFileName=='KrbRelayUp.exe' | CommandLine.str.contains(r' relay ', case=False) & CommandLine.str.contains(r' -Domain ', case=False) & CommandLine.str.contains(r' -ComputerName ', case=False) | CommandLine.str.contains(r' krbscm ', case=False) & CommandLine.str.contains(r' -sc ', case=False) | CommandLine.str.contains(r' spawn ', case=False) & CommandLine.str.contains(r' -d ', case=False) & CommandLine.str.contains(r' -cn ', case=False) & CommandLine.str.contains(r' -cp ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Hacktool Execution - Imphash",
        "id": "24e3e58a-646b-4b50-adef-02ef935b9fc8",
        "status": "test",
        "description": "Detects the execution of different Windows based hacktools via their import hash (imphash) even if the files have been renamed",
        "tags": [
            "attack.credential-access",
            "attack.t1588.002",
            "attack.t1003"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Hashes.str.contains(r'IMPHASH=BCCA3C247B619DCD13C8CDFF5F123932', case=False) | Hashes.str.contains(r'IMPHASH=3A19059BD7688CB88E70005F18EFC439', case=False) | Hashes.str.contains(r'IMPHASH=bf6223a49e45d99094406777eb6004ba', case=False) | Hashes.str.contains(r'IMPHASH=23867A89C2B8FC733BE6CF5EF902F2D1', case=False) | Hashes.str.contains(r'IMPHASH=A37FF327F8D48E8A4D2F757E1B6E70BC', case=False) | Hashes.str.contains(r'IMPHASH=F9A28C458284584A93B14216308D31BD', case=False) | Hashes.str.contains(r'IMPHASH=6118619783FC175BC7EBECFF0769B46E', case=False) | Hashes.str.contains(r'IMPHASH=959A83047E80AB68B368FDB3F4C6E4EA', case=False) | Hashes.str.contains(r'IMPHASH=563233BFA169ACC7892451F71AD5850A', case=False) | Hashes.str.contains(r'IMPHASH=87575CB7A0E0700EB37F2E3668671A08', case=False) | Hashes.str.contains(r'IMPHASH=13F08707F759AF6003837A150A371BA1', case=False) | Hashes.str.contains(r'IMPHASH=1781F06048A7E58B323F0B9259BE798B', case=False) | Hashes.str.contains(r'IMPHASH=233F85F2D4BC9D6521A6CAAE11A1E7F5', case=False) | Hashes.str.contains(r'IMPHASH=24AF2584CBF4D60BBE5C6D1B31B3BE6D', case=False) | Hashes.str.contains(r'IMPHASH=632969DDF6DBF4E0F53424B75E4B91F2', case=False) | Hashes.str.contains(r'IMPHASH=713C29B396B907ED71A72482759ED757', case=False) | Hashes.str.contains(r'IMPHASH=749A7BB1F0B4C4455949C0B2BF7F9E9F', case=False) | Hashes.str.contains(r'IMPHASH=8628B2608957A6B0C6330AC3DE28CE2E', case=False) | Hashes.str.contains(r'IMPHASH=8B114550386E31895DFAB371E741123D', case=False) | Hashes.str.contains(r'IMPHASH=94CB940A1A6B65BED4D5A8F849CE9793', case=False) | Hashes.str.contains(r'IMPHASH=9D68781980370E00E0BD939EE5E6C141', case=False) | Hashes.str.contains(r'IMPHASH=B18A1401FF8F444056D29450FBC0A6CE', case=False) | Hashes.str.contains(r'IMPHASH=CB567F9498452721D77A451374955F5F', case=False) | Hashes.str.contains(r'IMPHASH=730073214094CD328547BF1F72289752', case=False) | Hashes.str.contains(r'IMPHASH=17B461A082950FC6332228572138B80C', case=False) | Hashes.str.contains(r'IMPHASH=DC25EE78E2EF4D36FAA0BADF1E7461C9', case=False) | Hashes.str.contains(r'IMPHASH=819B19D53CA6736448F9325A85736792', case=False) | Hashes.str.contains(r'IMPHASH=829DA329CE140D873B4A8BDE2CBFAA7E', case=False) | Hashes.str.contains(r'IMPHASH=C547F2E66061A8DFFB6F5A3FF63C0A74', case=False) | Hashes.str.contains(r'IMPHASH=0588081AB0E63BA785938467E1B10CCA', case=False) | Hashes.str.contains(r'IMPHASH=0D9EC08BAC6C07D9987DFD0F1506587C', case=False) | Hashes.str.contains(r'IMPHASH=BC129092B71C89B4D4C8CDF8EA590B29', case=False) | Hashes.str.contains(r'IMPHASH=4DA924CF622D039D58BCE71CDF05D242', case=False) | Hashes.str.contains(r'IMPHASH=E7A3A5C377E2D29324093377D7DB1C66', case=False) | Hashes.str.contains(r'IMPHASH=9A9DBEC5C62F0380B4FA5FD31DEFFEDF', case=False) | Hashes.str.contains(r'IMPHASH=AF8A3976AD71E5D5FDFB67DDB8DADFCE', case=False) | Hashes.str.contains(r'IMPHASH=0C477898BBF137BBD6F2A54E3B805FF4', case=False) | Hashes.str.contains(r'IMPHASH=0CA9F02B537BCEA20D4EA5EB1A9FE338', case=False) | Hashes.str.contains(r'IMPHASH=3AB3655E5A14D4EEFC547F4781BF7F9E', case=False) | Hashes.str.contains(r'IMPHASH=E6F9D5152DA699934B30DAAB206471F6', case=False) | Hashes.str.contains(r'IMPHASH=3AD59991CCF1D67339B319B15A41B35D', case=False) | Hashes.str.contains(r'IMPHASH=FFDD59E0318B85A3E480874D9796D872', case=False) | Hashes.str.contains(r'IMPHASH=0CF479628D7CC1EA25EC7998A92F5051', case=False) | Hashes.str.contains(r'IMPHASH=07A2D4DCBD6CB2C6A45E6B101F0B6D51', case=False) | Hashes.str.contains(r'IMPHASH=D6D0F80386E1380D05CB78E871BC72B1', case=False) | Hashes.str.contains(r'IMPHASH=38D9E015591BBFD4929E0D0F47FA0055', case=False) | Hashes.str.contains(r'IMPHASH=0E2216679CA6E1094D63322E3412D650', case=False) | Hashes.str.contains(r'IMPHASH=ADA161BF41B8E5E9132858CB54CAB5FB', case=False) | Hashes.str.contains(r'IMPHASH=2A1BC4913CD5ECB0434DF07CB675B798', case=False) | Hashes.str.contains(r'IMPHASH=11083E75553BAAE21DC89CE8F9A195E4', case=False) | Hashes.str.contains(r'IMPHASH=A23D29C9E566F2FA8FFBB79267F5DF80', case=False) | Hashes.str.contains(r'IMPHASH=4A07F944A83E8A7C2525EFA35DD30E2F', case=False) | Hashes.str.contains(r'IMPHASH=767637C23BB42CD5D7397CF58B0BE688', case=False) | Hashes.str.contains(r'IMPHASH=14C4E4C72BA075E9069EE67F39188AD8', case=False) | Hashes.str.contains(r'IMPHASH=3C782813D4AFCE07BBFC5A9772ACDBDC', case=False) | Hashes.str.contains(r'IMPHASH=7D010C6BB6A3726F327F7E239166D127', case=False) | Hashes.str.contains(r'IMPHASH=89159BA4DD04E4CE5559F132A9964EB3', case=False) | Hashes.str.contains(r'IMPHASH=6F33F4A5FC42B8CEC7314947BD13F30F', case=False) | Hashes.str.contains(r'IMPHASH=5834ED4291BDEB928270428EBBAF7604', case=False) | Hashes.str.contains(r'IMPHASH=5A8A8A43F25485E7EE1B201EDCBC7A38', case=False) | Hashes.str.contains(r'IMPHASH=DC7D30B90B2D8ABF664FBED2B1B59894', case=False) | Hashes.str.contains(r'IMPHASH=41923EA1F824FE63EA5BEB84DB7A3E74', case=False) | Hashes.str.contains(r'IMPHASH=3DE09703C8E79ED2CA3F01074719906B', case=False) | Hashes.str.contains(r'IMPHASH=A53A02B997935FD8EEDCB5F7ABAB9B9F', case=False) | Hashes.str.contains(r'IMPHASH=E96A73C7BF33A464C510EDE582318BF2', case=False) | Hashes.str.contains(r'IMPHASH=32089B8851BBF8BC2D014E9F37288C83', case=False) | Hashes.str.contains(r'IMPHASH=09D278F9DE118EF09163C6140255C690', case=False) | Hashes.str.contains(r'IMPHASH=03866661686829d806989e2fc5a72606', case=False) | Hashes.str.contains(r'IMPHASH=e57401fbdadcd4571ff385ab82bd5d6d', case=False) | Hashes.str.contains(r'IMPHASH=84B763C45C0E4A3E7CA5548C710DB4EE', case=False) | Hashes.str.contains(r'IMPHASH=19584675D94829987952432E018D5056', case=False) | Hashes.str.contains(r'IMPHASH=330768A4F172E10ACB6287B87289D83B', case=False) | Hashes.str.contains(r'IMPHASH=885C99CCFBE77D1CBFCB9C4E7C1A3313', case=False) | Hashes.str.contains(r'IMPHASH=22A22BC9E4E0D2F189F1EA01748816AC', case=False) | Hashes.str.contains(r'IMPHASH=7FA30E6BB7E8E8A69155636E50BF1B28', case=False) | Hashes.str.contains(r'IMPHASH=96DF3A3731912449521F6F8D183279B1', case=False) | Hashes.str.contains(r'IMPHASH=7E6CF3FF4576581271AC8A313B2AAB46', case=False) | Hashes.str.contains(r'IMPHASH=51791678F351C03A0EB4E2A7B05C6E17', case=False) | Hashes.str.contains(r'IMPHASH=25CE42B079282632708FC846129E98A5', case=False) | Hashes.str.contains(r'IMPHASH=021BCCA20BA3381B11BDDE26B4E62F20', case=False) | Hashes.str.contains(r'IMPHASH=59223B5F52D8799D38E0754855CBDF42', case=False) | Hashes.str.contains(r'IMPHASH=81E75D8F1D276C156653D3D8813E4A43', case=False) | Hashes.str.contains(r'IMPHASH=17244E8B6B8227E57FE709CCAD421420', case=False) | Hashes.str.contains(r'IMPHASH=5B76DA3ACDEDC8A5CDF23A798B5936B4', case=False) | Hashes.str.contains(r'IMPHASH=CB2B65BB77D995CC1C0E5DF1C860133C', case=False) | Hashes.str.contains(r'IMPHASH=40445337761D80CF465136FAFB1F63E6', case=False) | Hashes.str.contains(r'IMPHASH=8A790F401B29FA87BC1E56F7272B3AA6', case=False) | Hashes.str.contains(r'IMPHASH=B50199E952C875241B9CE06C971CE3C1', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Unusual Child Process of dns.exe",
        "id": "a4e3d776-f12e-42c2-8510-9e6ed1f43ec3",
        "status": "test",
        "description": "Detects an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)",
        "tags": [
            "attack.initial-access",
            "attack.t1133"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\dns.exe', case=False) & ~ Image.str.contains(r'\\\\conhost.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LOLBAS Data Exfiltration by DataSvcUtil.exe",
        "id": "e290b10b-1023-4452-a4a9-eb31a9013b3a",
        "status": "test",
        "description": "Detects when a user performs data exfiltration by using DataSvcUtil.exe",
        "tags": [
            "attack.exfiltration",
            "attack.t1567"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'/in:', case=False) | CommandLine.str.contains(r'/out:', case=False) | CommandLine.str.contains(r'/uri:', case=False)) & (Image.str.contains(r'\\\\DataSvcUtil.exe', case=False) | OriginalFileName=='DataSvcUtil.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential File Download Via MS-AppInstaller Protocol Handler",
        "id": "180c7c5c-d64b-4a63-86e9-68910451bc8b",
        "status": "test",
        "description": "Detects usage of the \"ms-appinstaller\" protocol handler via command line to potentially download arbitrary files via AppInstaller.EXE\nThe downloaded files are temporarly stored in \":\\Users\\%username%\\AppData\\Local\\Packages\\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\\AC\\INetCache\\<RANDOM-8-CHAR-DIRECTORY>\"\n",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'*ms-appinstaller://*source=*') & CommandLine.str.contains(r'http', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Virtual Smart Card Created Via TpmVscMgr.EXE",
        "id": "c633622e-cab9-4eaa-bb13-66a1d68b3e47",
        "status": "test",
        "description": "Detects execution of \"Tpmvscmgr.exe\" to create a new virtual smart card.",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\tpmvscmgr.exe', case=False) & OriginalFileName=='TpmVscMgr.exe' & CommandLine.str.contains(r'create', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Curl Download And Execute Combination",
        "id": "21dd6d38-2b18-4453-9404-a0fe4a0cc288",
        "status": "test",
        "description": "Adversaries can use curl to download payloads remotely and execute them. Curl is included by default in Windows 10 build 17063 and later.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' -c ', case=False) | CommandLine.str.contains(r' /c ', case=False) | CommandLine.str.contains(r' \u2013c ', case=False) | CommandLine.str.contains(r' \u2014c ', case=False) | CommandLine.str.contains(r' \u2015c ', case=False)) & CommandLine.str.contains(r'curl ', case=False) & CommandLine.str.contains(r'http', case=False) & CommandLine.str.contains(r'-o', case=False) & CommandLine.str.contains(r'&', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Application Removed Via Wmic.EXE",
        "id": "b53317a0-8acf-4fd1-8de8-a5401e776b96",
        "status": "test",
        "description": "Detects the removal or uninstallation of an application via \"Wmic.EXE\".",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\WMIC.exe', case=False) | OriginalFileName=='wmic.exe') & CommandLine.str.contains(r'call', case=False) & CommandLine.str.contains(r'uninstall', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Discovery of a System Time",
        "id": "b243b280-65fe-48df-ba07-6ddea7646427",
        "status": "test",
        "description": "Identifies use of various commands to query a systems time. This technique may be used before executing a scheduled task or to discover the time zone of a target system.",
        "tags": [
            "attack.discovery",
            "attack.t1124"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False)) & CommandLine.str.contains(r'time', case=False) | Image.str.contains(r'\\\\w32tm.exe', case=False) & CommandLine.str.contains(r'tz', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Cmd.EXE Missing Space Characters Execution Anomaly",
        "id": "a16980c2-0c56-4de0-9a79-17971979efdd",
        "status": "test",
        "description": "Detects Windows command lines that miss a space before or after the /c flag when running a command using the cmd.exe.\nThis could be a sign of obfuscation of a fat finger problem (typo by the developer).\n",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'cmd.exe/c', case=False) | CommandLine.str.contains(r'\\\\cmd/c', case=False) | CommandLine.str.contains(r'\"cmd/c', case=False) | CommandLine.str.contains(r'cmd.exe/k', case=False) | CommandLine.str.contains(r'\\\\cmd/k', case=False) | CommandLine.str.contains(r'\"cmd/k', case=False) | CommandLine.str.contains(r'cmd.exe/r', case=False) | CommandLine.str.contains(r'\\\\cmd/r', case=False) | CommandLine.str.contains(r'\"cmd/r', case=False) | CommandLine.str.contains(r'/cwhoami', case=False) | CommandLine.str.contains(r'/cpowershell', case=False) | CommandLine.str.contains(r'/cschtasks', case=False) | CommandLine.str.contains(r'/cbitsadmin', case=False) | CommandLine.str.contains(r'/ccertutil', case=False) | CommandLine.str.contains(r'/kwhoami', case=False) | CommandLine.str.contains(r'/kpowershell', case=False) | CommandLine.str.contains(r'/kschtasks', case=False) | CommandLine.str.contains(r'/kbitsadmin', case=False) | CommandLine.str.contains(r'/kcertutil', case=False) | CommandLine.str.contains(r'cmd.exe /c', case=False) | CommandLine.str.contains(r'cmd /c', case=False) | CommandLine.str.contains(r'cmd.exe /k', case=False) | CommandLine.str.contains(r'cmd /k', case=False) | CommandLine.str.contains(r'cmd.exe /r', case=False) | CommandLine.str.contains(r'cmd /r', case=False)) & ~ (CommandLine.str.contains(r'cmd.exe /c ', case=False) | CommandLine.str.contains(r'cmd /c ', case=False) | CommandLine.str.contains(r'cmd.exe /k ', case=False) | CommandLine.str.contains(r'cmd /k ', case=False) | CommandLine.str.contains(r'cmd.exe /r ', case=False) | CommandLine.str.contains(r'cmd /r ', case=False) | CommandLine.str.contains(r'AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\resources\\\\app\\\\node_modules', case=False) | CommandLine.str.contains(r'cmd.exe/c .', case=False) | CommandLine=='cmd.exe /c')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using Consent and Comctl32 - Process",
        "id": "1ca6bd18-0ba0-44ca-851c-92ed89a61085",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\consent.exe', case=False) & Image.str.contains(r'\\\\werfault.exe', case=False) & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious JavaScript Execution Via Mshta.EXE",
        "id": "67f113fa-e23d-4271-befa-30113b3e08b1",
        "status": "test",
        "description": "Detects execution of javascript code using \"mshta.exe\".",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\mshta.exe', case=False) | OriginalFileName=='MSHTA.EXE') & CommandLine.str.contains(r'javascript', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Finger.EXE Execution",
        "id": "af491bca-e752-4b44-9c86-df5680533dbc",
        "status": "test",
        "description": "Detects execution of the \"finger.exe\" utility.\nFinger.EXE or \"TCPIP Finger Command\" is an old utility that is still present on modern Windows installation. It Displays information about users on a specified remote computer (typically a UNIX computer) that is running the finger service or daemon.\nDue to the old nature of this utility and the rareness of machines having the finger service. Any execution of \"finger.exe\" can be considered \"suspicious\" and worth investigating.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='finger.exe' | Image.str.contains(r'\\\\finger.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Execution With Potential Decryption Capabilities",
        "id": "434c08ba-8406-4d15-8b24-782cb071a691",
        "status": "test",
        "description": "Detects PowerShell commands that decrypt an \".LNK\" \"file to drop the next stage of the malware.",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & (OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r'Get-ChildItem ', case=False) | CommandLine.str.contains(r'dir ', case=False) | CommandLine.str.contains(r'gci ', case=False) | CommandLine.str.contains(r'ls ', case=False)) & (CommandLine.str.contains(r'Get-Content ', case=False) | CommandLine.str.contains(r'gc ', case=False) | CommandLine.str.contains(r'cat ', case=False) | CommandLine.str.contains(r'type ', case=False) | CommandLine.str.contains(r'ReadAllBytes', case=False)) & (CommandLine.str.contains(r' ^| ', case=False) & CommandLine.str.contains(r'\\*.lnk', case=False) & CommandLine.str.contains(r'-Recurse', case=False) & CommandLine.str.contains(r'-Skip ', case=False) | CommandLine.str.contains(r' -ExpandProperty ', case=False) & CommandLine.str.contains(r'\\*.lnk', case=False) & CommandLine.str.contains(r'WriteAllBytes', case=False) & CommandLine.str.contains(r' .length ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Powershell Defender Disable Scan Feature",
        "id": "1ec65a5f-9473-4f12-97da-622044d6df21",
        "status": "test",
        "description": "Detects requests to disable Microsoft Defender features using PowerShell commands",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((CommandLine.str.contains(r'Add-MpPreference ', case=False) | CommandLine.str.contains(r'Set-MpPreference ', case=False)) & (CommandLine.str.contains(r'DisableArchiveScanning ', case=False) | CommandLine.str.contains(r'DisableRealtimeMonitoring ', case=False) | CommandLine.str.contains(r'DisableIOAVProtection ', case=False) | CommandLine.str.contains(r'DisableBehaviorMonitoring ', case=False) | CommandLine.str.contains(r'DisableBlockAtFirstSeen ', case=False) | CommandLine.str.contains(r'DisableCatchupFullScan ', case=False) | CommandLine.str.contains(r'DisableCatchupQuickScan ', case=False)) & (CommandLine.str.contains(r'$true', case=False) | CommandLine.str.contains(r' 1 ', case=False)) | CommandLine.str.contains(r'ZGlzYWJsZWFyY2hpdmVzY2FubmluZy', case=False) | CommandLine.str.contains(r'Rpc2FibGVhcmNoaXZlc2Nhbm5pbmcg', case=False) | CommandLine.str.contains(r'kaXNhYmxlYXJjaGl2ZXNjYW5uaW5nI', case=False) | CommandLine.str.contains(r'RGlzYWJsZUFyY2hpdmVTY2FubmluZy', case=False) | CommandLine.str.contains(r'Rpc2FibGVBcmNoaXZlU2Nhbm5pbmcg', case=False) | CommandLine.str.contains(r'EaXNhYmxlQXJjaGl2ZVNjYW5uaW5nI', case=False) | CommandLine.str.contains(r'ZGlzYWJsZWJlaGF2aW9ybW9uaXRvcmluZy', case=False) | CommandLine.str.contains(r'Rpc2FibGViZWhhdmlvcm1vbml0b3Jpbmcg', case=False) | CommandLine.str.contains(r'kaXNhYmxlYmVoYXZpb3Jtb25pdG9yaW5nI', case=False) | CommandLine.str.contains(r'RGlzYWJsZUJlaGF2aW9yTW9uaXRvcmluZy', case=False) | CommandLine.str.contains(r'Rpc2FibGVCZWhhdmlvck1vbml0b3Jpbmcg', case=False) | CommandLine.str.contains(r'EaXNhYmxlQmVoYXZpb3JNb25pdG9yaW5nI', case=False) | CommandLine.str.contains(r'ZGlzYWJsZWJsb2NrYXRmaXJzdHNlZW4g', case=False) | CommandLine.str.contains(r'Rpc2FibGVibG9ja2F0Zmlyc3RzZWVuI', case=False) | CommandLine.str.contains(r'kaXNhYmxlYmxvY2thdGZpcnN0c2Vlbi', case=False) | CommandLine.str.contains(r'RGlzYWJsZUJsb2NrQXRGaXJzdFNlZW4g', case=False) | CommandLine.str.contains(r'Rpc2FibGVCbG9ja0F0Rmlyc3RTZWVuI', case=False) | CommandLine.str.contains(r'EaXNhYmxlQmxvY2tBdEZpcnN0U2Vlbi', case=False) | CommandLine.str.contains(r'ZGlzYWJsZWNhdGNodXBmdWxsc2Nhbi', case=False) | CommandLine.str.contains(r'Rpc2FibGVjYXRjaHVwZnVsbHNjYW4g', case=False) | CommandLine.str.contains(r'kaXNhYmxlY2F0Y2h1cGZ1bGxzY2FuI', case=False) | CommandLine.str.contains(r'RGlzYWJsZUNhdGNodXBGdWxsU2Nhbi', case=False) | CommandLine.str.contains(r'Rpc2FibGVDYXRjaHVwRnVsbFNjYW4g', case=False) | CommandLine.str.contains(r'EaXNhYmxlQ2F0Y2h1cEZ1bGxTY2FuI', case=False) | CommandLine.str.contains(r'ZGlzYWJsZWNhdGNodXBxdWlja3NjYW4g', case=False) | CommandLine.str.contains(r'Rpc2FibGVjYXRjaHVwcXVpY2tzY2FuI', case=False) | CommandLine.str.contains(r'kaXNhYmxlY2F0Y2h1cHF1aWNrc2Nhbi', case=False) | CommandLine.str.contains(r'RGlzYWJsZUNhdGNodXBRdWlja1NjYW4g', case=False) | CommandLine.str.contains(r'Rpc2FibGVDYXRjaHVwUXVpY2tTY2FuI', case=False) | CommandLine.str.contains(r'EaXNhYmxlQ2F0Y2h1cFF1aWNrU2Nhbi', case=False) | CommandLine.str.contains(r'ZGlzYWJsZWlvYXZwcm90ZWN0aW9uI', case=False) | CommandLine.str.contains(r'Rpc2FibGVpb2F2cHJvdGVjdGlvbi', case=False) | CommandLine.str.contains(r'kaXNhYmxlaW9hdnByb3RlY3Rpb24g', case=False) | CommandLine.str.contains(r'RGlzYWJsZUlPQVZQcm90ZWN0aW9uI', case=False) | CommandLine.str.contains(r'Rpc2FibGVJT0FWUHJvdGVjdGlvbi', case=False) | CommandLine.str.contains(r'EaXNhYmxlSU9BVlByb3RlY3Rpb24g', case=False) | CommandLine.str.contains(r'ZGlzYWJsZXJlYWx0aW1lbW9uaXRvcmluZy', case=False) | CommandLine.str.contains(r'Rpc2FibGVyZWFsdGltZW1vbml0b3Jpbmcg', case=False) | CommandLine.str.contains(r'kaXNhYmxlcmVhbHRpbWVtb25pdG9yaW5nI', case=False) | CommandLine.str.contains(r'RGlzYWJsZVJlYWx0aW1lTW9uaXRvcmluZy', case=False) | CommandLine.str.contains(r'Rpc2FibGVSZWFsdGltZU1vbml0b3Jpbmcg', case=False) | CommandLine.str.contains(r'EaXNhYmxlUmVhbHRpbWVNb25pdG9yaW5nI', case=False) | CommandLine.str.contains(r'RABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgA', case=False) | CommandLine.str.contains(r'QAaQBzAGEAYgBsAGUAUgBlAGEAbAB0AGkAbQBlAE0AbwBuAGkAdABvAHIAaQBuAGcAIA', case=False) | CommandLine.str.contains(r'EAGkAcwBhAGIAbABlAFIAZQBhAGwAdABpAG0AZQBNAG8AbgBpAHQAbwByAGkAbgBnACAA', case=False) | CommandLine.str.contains(r'RABpAHMAYQBiAGwAZQBJAE8AQQBWAFAAcgBvAHQAZQBjAHQAaQBvAG4AIA', case=False) | CommandLine.str.contains(r'QAaQBzAGEAYgBsAGUASQBPAEEAVgBQAHIAbwB0AGUAYwB0AGkAbwBuACAA', case=False) | CommandLine.str.contains(r'EAGkAcwBhAGIAbABlAEkATwBBAFYAUAByAG8AdABlAGMAdABpAG8AbgAgA', case=False) | CommandLine.str.contains(r'RABpAHMAYQBiAGwAZQBCAGUAaABhAHYAaQBvAHIATQBvAG4AaQB0AG8AcgBpAG4AZwAgA', case=False) | CommandLine.str.contains(r'QAaQBzAGEAYgBsAGUAQgBlAGgAYQB2AGkAbwByAE0AbwBuAGkAdABvAHIAaQBuAGcAIA', case=False) | CommandLine.str.contains(r'EAGkAcwBhAGIAbABlAEIAZQBoAGEAdgBpAG8AcgBNAG8AbgBpAHQAbwByAGkAbgBnACAA', case=False) | CommandLine.str.contains(r'RABpAHMAYQBiAGwAZQBCAGwAbwBjAGsAQQB0AEYAaQByAHMAdABTAGUAZQBuACAA', case=False) | CommandLine.str.contains(r'QAaQBzAGEAYgBsAGUAQgBsAG8AYwBrAEEAdABGAGkAcgBzAHQAUwBlAGUAbgAgA', case=False) | CommandLine.str.contains(r'EAGkAcwBhAGIAbABlAEIAbABvAGMAawBBAHQARgBpAHIAcwB0AFMAZQBlAG4AIA', case=False) | CommandLine.str.contains(r'ZABpAHMAYQBiAGwAZQByAGUAYQBsAHQAaQBtAGUAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA', case=False) | CommandLine.str.contains(r'QAaQBzAGEAYgBsAGUAcgBlAGEAbAB0AGkAbQBlAG0AbwBuAGkAdABvAHIAaQBuAGcAIA', case=False) | CommandLine.str.contains(r'kAGkAcwBhAGIAbABlAHIAZQBhAGwAdABpAG0AZQBtAG8AbgBpAHQAbwByAGkAbgBnACAA', case=False) | CommandLine.str.contains(r'ZABpAHMAYQBiAGwAZQBpAG8AYQB2AHAAcgBvAHQAZQBjAHQAaQBvAG4AIA', case=False) | CommandLine.str.contains(r'QAaQBzAGEAYgBsAGUAaQBvAGEAdgBwAHIAbwB0AGUAYwB0AGkAbwBuACAA', case=False) | CommandLine.str.contains(r'kAGkAcwBhAGIAbABlAGkAbwBhAHYAcAByAG8AdABlAGMAdABpAG8AbgAgA', case=False) | CommandLine.str.contains(r'ZABpAHMAYQBiAGwAZQBiAGUAaABhAHYAaQBvAHIAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA', case=False) | CommandLine.str.contains(r'QAaQBzAGEAYgBsAGUAYgBlAGgAYQB2AGkAbwByAG0AbwBuAGkAdABvAHIAaQBuAGcAIA', case=False) | CommandLine.str.contains(r'kAGkAcwBhAGIAbABlAGIAZQBoAGEAdgBpAG8AcgBtAG8AbgBpAHQAbwByAGkAbgBnACAA', case=False) | CommandLine.str.contains(r'ZABpAHMAYQBiAGwAZQBiAGwAbwBjAGsAYQB0AGYAaQByAHMAdABzAGUAZQBuACAA', case=False) | CommandLine.str.contains(r'QAaQBzAGEAYgBsAGUAYgBsAG8AYwBrAGEAdABmAGkAcgBzAHQAcwBlAGUAbgAgA', case=False) | CommandLine.str.contains(r'kAGkAcwBhAGIAbABlAGIAbABvAGMAawBhAHQAZgBpAHIAcwB0AHMAZQBlAG4AIA', case=False) | CommandLine.str.contains(r'RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAEYAdQBsAGwAUwBjAGEAbgA', case=False) | CommandLine.str.contains(r'RABpAHMAYQBiAGwAZQBDAGEAdABjAGgAdQBwAFEAdQBpAGMAawBTAGMAYQBuAA', case=False) | CommandLine.str.contains(r'RABpAHMAYQBiAGwAZQBBAHIAYwBoAGkAdgBlAFMAYwBhAG4AbgBpAG4AZwA', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Use of CSharp Interactive Console",
        "id": "a9e416a8-e613-4f8b-88b8-a7d1d1af2f61",
        "status": "test",
        "description": "Detects the execution of CSharp interactive console by PowerShell",
        "tags": [
            "attack.execution",
            "attack.t1127"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\csi.exe', case=False) & (ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False) | ParentImage.str.contains(r'\\\\powershell_ise.exe', case=False)) & OriginalFileName=='csi.exe'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential SMB Relay Attack Tool Execution",
        "id": "5589ab4f-a767-433c-961d-c91f3f704db1",
        "status": "test",
        "description": "Detects different hacktools used for relay attacks on Windows for privilege escalation",
        "tags": [
            "attack.execution",
            "attack.t1557.001"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'PetitPotam', case=False) | Image.str.contains(r'RottenPotato', case=False) | Image.str.contains(r'HotPotato', case=False) | Image.str.contains(r'JuicyPotato', case=False) | Image.str.contains(r'\\\\just_dce_', case=False) | Image.str.contains(r'Juicy Potato', case=False) | Image.str.contains(r'\\\\temp\\\\rot.exe', case=False) | Image.str.contains(r'\\\\Potato.exe', case=False) | Image.str.contains(r'\\\\SpoolSample.exe', case=False) | Image.str.contains(r'\\\\Responder.exe', case=False) | Image.str.contains(r'\\\\smbrelayx', case=False) | Image.str.contains(r'\\\\ntlmrelayx', case=False) | Image.str.contains(r'\\\\LocalPotato', case=False) | CommandLine.str.contains(r'Invoke-Tater', case=False) | CommandLine.str.contains(r' smbrelay', case=False) | CommandLine.str.contains(r' ntlmrelay', case=False) | CommandLine.str.contains(r'cme smb ', case=False) | CommandLine.str.contains(r' /ntlm:NTLMhash ', case=False) | CommandLine.str.contains(r'Invoke-PetitPotam', case=False) | CommandLine.str.contains(r'*.exe -t * -p *') | CommandLine.str.contains(r'.exe -c \"{', case=False) & CommandLine.str.contains(r'}\" -z', case=False)) & ~ (Image.str.contains(r'HotPotatoes6', case=False) | Image.str.contains(r'HotPotatoes7', case=False) | Image.str.contains(r'HotPotatoes ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uninstall Sysinternals Sysmon",
        "id": "6a5f68d1-c4b5-46b9-94ee-5324892ea939",
        "status": "test",
        "description": "Detects the removal of Sysmon, which could be a potential attempt at defense evasion",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Sysmon64.exe', case=False) | Image.str.contains(r'\\\\Sysmon.exe', case=False) | Description=='System activity monitor') & (CommandLine.str.contains(r'-u', case=False) | CommandLine.str.contains(r'/u', case=False) | CommandLine.str.contains(r'\u2013u', case=False) | CommandLine.str.contains(r'\u2014u', case=False) | CommandLine.str.contains(r'\u2015u', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Download From IP URL Via Curl.EXE",
        "id": "9cc85849-3b02-4cb5-b371-3a1ff54f2218",
        "status": "test",
        "description": "Detects file downloads directly from IP address URL using curl.exe",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\curl.exe', case=False) | OriginalFileName=='curl.exe') & CommandLine.str.contains(r'://[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}') & CommandLine.str.contains(r'http', case=False) & (CommandLine.str.contains(r' -O', case=False) | CommandLine.str.contains(r'--remote-name', case=False) | CommandLine.str.contains(r'--output', case=False)) & ~ (CommandLine.str.contains(r'.bat', case=False) | CommandLine.str.contains(r'.bat\"', case=False) | CommandLine.str.contains(r'.dat', case=False) | CommandLine.str.contains(r'.dat\"', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.dll\"', case=False) | CommandLine.str.contains(r'.exe', case=False) | CommandLine.str.contains(r'.exe\"', case=False) | CommandLine.str.contains(r'.gif', case=False) | CommandLine.str.contains(r'.gif\"', case=False) | CommandLine.str.contains(r'.hta', case=False) | CommandLine.str.contains(r'.hta\"', case=False) | CommandLine.str.contains(r'.jpeg', case=False) | CommandLine.str.contains(r'.jpeg\"', case=False) | CommandLine.str.contains(r'.log', case=False) | CommandLine.str.contains(r'.log\"', case=False) | CommandLine.str.contains(r'.msi', case=False) | CommandLine.str.contains(r'.msi\"', case=False) | CommandLine.str.contains(r'.png', case=False) | CommandLine.str.contains(r'.png\"', case=False) | CommandLine.str.contains(r'.ps1', case=False) | CommandLine.str.contains(r'.ps1\"', case=False) | CommandLine.str.contains(r'.psm1', case=False) | CommandLine.str.contains(r'.psm1\"', case=False) | CommandLine.str.contains(r'.vbe', case=False) | CommandLine.str.contains(r'.vbe\"', case=False) | CommandLine.str.contains(r'.vbs', case=False) | CommandLine.str.contains(r'.vbs\"', case=False) | CommandLine.str.contains(r'.bat\\'', case=False) | CommandLine.str.contains(r'.dat\\'', case=False) | CommandLine.str.contains(r'.dll\\'', case=False) | CommandLine.str.contains(r'.exe\\'', case=False) | CommandLine.str.contains(r'.gif\\'', case=False) | CommandLine.str.contains(r'.hta\\'', case=False) | CommandLine.str.contains(r'.jpeg\\'', case=False) | CommandLine.str.contains(r'.log\\'', case=False) | CommandLine.str.contains(r'.msi\\'', case=False) | CommandLine.str.contains(r'.png\\'', case=False) | CommandLine.str.contains(r'.ps1\\'', case=False) | CommandLine.str.contains(r'.psm1\\'', case=False) | CommandLine.str.contains(r'.vbe\\'', case=False) | CommandLine.str.contains(r'.vbs\\'', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New DLL Registered Via Odbcconf.EXE",
        "id": "9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70",
        "status": "test",
        "description": "Detects execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.008"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\odbcconf.exe', case=False) | OriginalFileName=='odbcconf.exe') & CommandLine.str.contains(r'REGSVR ', case=False) & CommandLine.str.contains(r'.dll', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Binary Executed From WSL",
        "id": "ed825c86-c009-4014-b413-b76003e33d35",
        "status": "test",
        "description": "Detects the execution of Windows binaries from within a WSL instance.\nThis could be used to masquerade parent-child relationships\n",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'[a-zA-Z]:\\\\\\\\') & CurrentDirectory.str.contains(r'\\\\\\\\wsl.localhost', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Child Process Of BgInfo.EXE",
        "id": "aaf46cdc-934e-4284-b329-34aa701e3771",
        "status": "test",
        "description": "Detects uncommon child processes of \"BgInfo.exe\" which could be a sign of potential abuse of the binary to proxy execution via external VBScript",
        "tags": [
            "attack.execution",
            "attack.t1059.005",
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\bginfo.exe', case=False) | ParentImage.str.contains(r'\\\\bginfo64.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious ZipExec Execution",
        "id": "90dcf730-1b71-4ae7-9ffc-6fcf62bd0132",
        "status": "test",
        "description": "ZipExec is a Proof-of-Concept (POC) tool to wrap binary-based tools into a password-protected zip file.",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'/generic:Microsoft_Windows_Shell_ZipFolder:filename=', case=False) & CommandLine.str.contains(r'.zip', case=False) & CommandLine.str.contains(r'/pass:', case=False) & CommandLine.str.contains(r'/user:', case=False) | CommandLine.str.contains(r'/delete', case=False) & CommandLine.str.contains(r'Microsoft_Windows_Shell_ZipFolder:filename=', case=False) & CommandLine.str.contains(r'.zip', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Electron Application CommandLine",
        "id": "378a05d8-963c-46c9-bcce-13c7657eac99",
        "status": "test",
        "description": "Detects potentially suspicious CommandLine of electron apps (teams, discord, slack, etc.). This could be a sign of abuse to proxy execution through a signed binary.",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\chrome.exe', case=False) | Image.str.contains(r'\\\\code.exe', case=False) | Image.str.contains(r'\\\\discord.exe', case=False) | Image.str.contains(r'\\\\GitHubDesktop.exe', case=False) | Image.str.contains(r'\\\\keybase.exe', case=False) | Image.str.contains(r'\\\\msedge_proxy.exe', case=False) | Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False) | Image.str.contains(r'\\\\msteams.exe', case=False) | Image.str.contains(r'\\\\slack.exe', case=False) | Image.str.contains(r'\\\\Teams.exe', case=False) | OriginalFileName==['chrome.exe', 'code.exe', 'discord.exe', 'GitHubDesktop.exe', 'keybase.exe', 'msedge_proxy.exe', 'msedge.exe', 'msedgewebview2.exe', 'msteams.exe', 'slack.exe', 'Teams.exe']) & (CommandLine.str.contains(r'--browser-subprocess-path', case=False) | CommandLine.str.contains(r'--gpu-launcher', case=False) | CommandLine.str.contains(r'--renderer-cmd-prefix', case=False) | CommandLine.str.contains(r'--utility-cmd-prefix', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Wusa.EXE Executed By Parent Process Located In Suspicious Location",
        "id": "ef64fc9c-a45e-43cc-8fd8-7d75d73b4c99",
        "status": "experimental",
        "description": "Detects execution of the \"wusa.exe\" (Windows Update Standalone Installer) utility by a parent process that is located in a suspicious location.\nAttackers could instantiate an instance of \"wusa.exe\" in order to bypass User Account Control (UAC). They can duplicate the access token from \"wusa.exe\" to gain elevated privileges.\n",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\wusa.exe', case=False) & (ParentImage.str.contains(r':\\\\Perflogs\\\\', case=False) | ParentImage.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | ParentImage.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | ParentImage.str.contains(r'\\\\Appdata\\\\Local\\\\Temp\\\\', case=False) | ParentImage.str.contains(r'\\\\Temporary Internet', case=False) | ParentImage.str.contains(r':\\\\Users\\\\', case=False) & ParentImage.str.contains(r'\\\\Favorites\\\\', case=False) | ParentImage.str.contains(r':\\\\Users\\\\', case=False) & ParentImage.str.contains(r'\\\\Favourites\\\\', case=False) | ParentImage.str.contains(r':\\\\Users\\\\', case=False) & ParentImage.str.contains(r'\\\\Contacts\\\\', case=False) | ParentImage.str.contains(r':\\\\Users\\\\', case=False) & ParentImage.str.contains(r'\\\\Pictures\\\\', case=False)) & ~ CommandLine.str.contains(r'.msu', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Shim Database Persistence via Sdbinst.EXE",
        "id": "517490a7-115a-48c6-8862-1a481504d5a8",
        "status": "test",
        "description": "Detects installation of a new shim using sdbinst.exe.\nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims\n",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1546.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\sdbinst.exe', case=False) | OriginalFileName=='sdbinst.exe') & CommandLine.str.contains(r'.sdb', case=False) & ~ (ParentImage.str.contains(r'\\\\msiexec.exe', case=False) & (CommandLine.str.contains(r':\\\\Program Files (x86)\\\\IIS Express\\\\iisexpressshim.sdb', case=False) | CommandLine.str.contains(r':\\\\Program Files\\\\IIS Express\\\\iisexpressshim.sdb', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Privilege Escalation via Service Permissions Weakness",
        "id": "0f9c21f1-6a73-4b0e-9809-cb562cb8d981",
        "status": "test",
        "description": "Detect modification of services configuration (ImagePath, FailureCommand and ServiceDLL) in registry by processes with Medium integrity level",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1574.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (IntegrityLevel==['Medium', 'S-1-16-8192']) & CommandLine.str.contains(r'ControlSet', case=False) & CommandLine.str.contains(r'services', case=False) & (CommandLine.str.contains(r'\\\\ImagePath', case=False) | CommandLine.str.contains(r'\\\\FailureCommand', case=False) | CommandLine.str.contains(r'\\\\ServiceDll', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Reconnaissance Activity Using Get-LocalGroupMember Cmdlet",
        "id": "c8a180d6-47a3-4345-a609-53f9c3d834fc",
        "status": "test",
        "description": "Detects suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet",
        "tags": [
            "attack.discovery",
            "attack.t1087.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'Get-LocalGroupMember ', case=False) & (CommandLine.str.contains(r'domain admins', case=False) | CommandLine.str.contains(r' administrator', case=False) | CommandLine.str.contains(r' administrateur', case=False) | CommandLine.str.contains(r'enterprise admins', case=False) | CommandLine.str.contains(r'Exchange Trusted Subsystem', case=False) | CommandLine.str.contains(r'Remote Desktop Users', case=False) | CommandLine.str.contains(r'Utilisateurs du Bureau \u00e0 distance', case=False) | CommandLine.str.contains(r'Usuarios de escritorio remoto', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious SYSTEM User Process Creation",
        "id": "2617e7ed-adb7-40ba-b0f3-8f9945fe6c09",
        "status": "test",
        "description": "Detects a suspicious process creation as SYSTEM user (suspicious program or command line parameter)",
        "tags": [
            "attack.credential-access",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1134",
            "attack.t1003",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (IntegrityLevel==['System', 'S-1-16-16384']) & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False)) & (Image.str.contains(r'\\\\calc.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\forfiles.exe', case=False) | Image.str.contains(r'\\\\hh.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\ping.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | CommandLine.str.contains(r' -NoP ', case=False) | CommandLine.str.contains(r' -W Hidden ', case=False) | CommandLine.str.contains(r' -decode ', case=False) | CommandLine.str.contains(r' /decode ', case=False) | CommandLine.str.contains(r' /urlcache ', case=False) | CommandLine.str.contains(r' -urlcache ', case=False) | CommandLine.str.contains(r'* -e* JAB*') | CommandLine.str.contains(r'* -e* SUVYI*') | CommandLine.str.contains(r'* -e* SQBFAFgA*') | CommandLine.str.contains(r'* -e* aWV4I*') | CommandLine.str.contains(r'* -e* IAB*') | CommandLine.str.contains(r'* -e* PAA*') | CommandLine.str.contains(r'* -e* aQBlAHgA*') | CommandLine.str.contains(r'vssadmin delete shadows', case=False) | CommandLine.str.contains(r'reg SAVE HKLM', case=False) | CommandLine.str.contains(r' -ma ', case=False) | CommandLine.str.contains(r'Microsoft\\\\Windows\\\\CurrentVersion\\\\Run', case=False) | CommandLine.str.contains(r'.downloadstring(', case=False) | CommandLine.str.contains(r'.downloadfile(', case=False) | CommandLine.str.contains(r' /ticket:', case=False) | CommandLine.str.contains(r'dpapi::', case=False) | CommandLine.str.contains(r'event::clear', case=False) | CommandLine.str.contains(r'event::drop', case=False) | CommandLine.str.contains(r'id::modify', case=False) | CommandLine.str.contains(r'kerberos::', case=False) | CommandLine.str.contains(r'lsadump::', case=False) | CommandLine.str.contains(r'misc::', case=False) | CommandLine.str.contains(r'privilege::', case=False) | CommandLine.str.contains(r'rpc::', case=False) | CommandLine.str.contains(r'sekurlsa::', case=False) | CommandLine.str.contains(r'sid::', case=False) | CommandLine.str.contains(r'token::', case=False) | CommandLine.str.contains(r'vault::cred', case=False) | CommandLine.str.contains(r'vault::list', case=False) | CommandLine.str.contains(r' p::d ', case=False) | CommandLine.str.contains(r';iex(', case=False) | CommandLine.str.contains(r'MiniDump', case=False) | CommandLine.str.contains(r'net user ', case=False)) & ~ (CommandLine.str.contains(r'ping', case=False) & CommandLine.str.contains(r'127.0.0.1', case=False) & CommandLine.str.contains(r' -n ', case=False) | Image.str.contains(r'\\\\PING.EXE', case=False) & ParentCommandLine.str.contains(r'\\\\DismFoDInstall.cmd', case=False) | ParentImage.str.contains(r':\\\\Packages\\\\Plugins\\\\Microsoft.GuestConfiguration.ConfigurationforWindows\\\\', case=False) | (ParentImage.str.contains(r':\\\\Program Files (x86)\\\\Java\\\\', case=False) | ParentImage.str.contains(r':\\\\Program Files\\\\Java\\\\', case=False)) & ParentImage.str.contains(r'\\\\bin\\\\javaws.exe', case=False) & (Image.str.contains(r':\\\\Program Files (x86)\\\\Java\\\\', case=False) | Image.str.contains(r':\\\\Program Files\\\\Java\\\\', case=False)) & Image.str.contains(r'\\\\bin\\\\jp2launcher.exe', case=False) & CommandLine.str.contains(r' -ma ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Perl Inline Command Execution",
        "id": "f426547a-e0f7-441a-b63e-854ac5bdf54d",
        "status": "test",
        "description": "Detects execution of perl using the \"-e\"/\"-E\" flags. This is could be used as a way to launch a reverse shell or execute live perl code.",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\perl.exe', case=False) | OriginalFileName=='perl.exe') & CommandLine.str.contains(r' -e', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Schedule Task Creation From Env Variable Or Potentially Suspicious Path Via Schtasks.EXE",
        "id": "81325ce1-be01-4250-944f-b4789644556f",
        "status": "test",
        "description": "Detects Schtask creations that point to a suspicious folder or an environment variable often used by malware",
        "tags": [
            "attack.execution",
            "attack.t1053.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\schtasks.exe', case=False) & CommandLine.str.contains(r' /create ', case=False) & (CommandLine.str.contains(r':\\\\Perflogs', case=False) | CommandLine.str.contains(r':\\\\Users\\\\All Users\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Default\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False) | CommandLine.str.contains(r'%AppData%', case=False) | CommandLine.str.contains(r'%Public%', case=False)) | ParentCommandLine.str.contains(r'\\\\svchost.exe -k netsvcs -p -s Schedule', case=False) & (CommandLine.str.contains(r':\\\\Perflogs', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public', case=False) | CommandLine.str.contains(r'%Public%', case=False))) & ~ (ParentCommandLine.str.contains(r'unattended.ini', case=False) | CommandLine.str.contains(r'update_task.xml', case=False) | CommandLine.str.contains(r'/Create /TN TVInstallRestore /TR', case=False) | CommandLine.str.contains(r'/Create /Xml \"C:\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\.CR.', case=False) & CommandLine.str.contains(r'Avira_Security_Installation.xml', case=False) | CommandLine.str.contains(r'/Create /F /TN', case=False) & CommandLine.str.contains(r'/Xml ', case=False) & CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\is-', case=False) & CommandLine.str.contains(r'Avira_', case=False) & (CommandLine.str.contains(r'.tmp\\\\UpdateFallbackTask.xml', case=False) | CommandLine.str.contains(r'.tmp\\\\WatchdogServiceControlManagerTimeout.xml', case=False) | CommandLine.str.contains(r'.tmp\\\\SystrayAutostart.xml', case=False) | CommandLine.str.contains(r'.tmp\\\\MaintenanceTask.xml', case=False)) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) & CommandLine.str.contains(r'/Create /TN \"klcp_update\" /XML ', case=False) & CommandLine.str.contains(r'\\\\klcp_update_task.xml', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Invoke-WebRequest Execution",
        "id": "5e3cc4d8-3e68-43db-8656-eaaeefdec9cc",
        "status": "test",
        "description": "Detects a suspicious call to Invoke-WebRequest cmdlet where the and output is located in a suspicious location",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r'curl ', case=False) | CommandLine.str.contains(r'Invoke-WebRequest', case=False) | CommandLine.str.contains(r'iwr ', case=False) | CommandLine.str.contains(r'wget ', case=False)) & (CommandLine.str.contains(r' -ur', case=False) | CommandLine.str.contains(r' -o', case=False)) & (CommandLine.str.contains(r'\\\\AppData\\\\', case=False) | CommandLine.str.contains(r'\\\\Desktop\\\\', case=False) | CommandLine.str.contains(r'\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'%AppData%', case=False) | CommandLine.str.contains(r'%Public%', case=False) | CommandLine.str.contains(r'%Temp%', case=False) | CommandLine.str.contains(r'%tmp%', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Encoded To Base64 Via Certutil.EXE",
        "id": "e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a",
        "status": "test",
        "description": "Detects the execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certutil.exe', case=False) | OriginalFileName=='CertUtil.exe') & (CommandLine.str.contains(r'-encode', case=False) | CommandLine.str.contains(r'/encode', case=False) | CommandLine.str.contains(r'\u2013encode', case=False) | CommandLine.str.contains(r'\u2014encode', case=False) | CommandLine.str.contains(r'\u2015encode', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - DIT Snapshot Viewer",
        "id": "d3b70aad-097e-409c-9df2-450f80dc476b",
        "status": "test",
        "description": "Detects the use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ditsnap.exe', case=False) | CommandLine.str.contains(r'ditsnap.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Indirect Inline Command Execution Via Bash.EXE",
        "id": "5edc2273-c26f-406c-83f3-f4d948e740dd",
        "status": "test",
        "description": "Detects execution of Microsoft bash launcher with the \"-c\" flag.\nThis can be used to potentially bypass defenses and execute Linux or Windows-based binaries directly via bash.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r':\\\\Windows\\\\System32\\\\bash.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\bash.exe', case=False) | OriginalFileName=='Bash.exe') & CommandLine.str.contains(r' -c ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Always Install Elevated Windows Installer",
        "id": "cd951fdc-4b2f-47f5-ba99-a33bf61e3770",
        "status": "test",
        "description": "Detects Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Windows\\\\Installer\\\\', case=False) & Image.str.contains(r'msi', case=False) & Image.str.contains(r'tmp', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) & (IntegrityLevel==['System', 'S-1-16-16384'])) & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False)) & ~ (ParentImage=='C:\\\\Windows\\\\System32\\\\services.exe' | CommandLine.str.contains(r'\\\\system32\\\\msiexec.exe /V', case=False) | ParentCommandLine.str.contains(r'\\\\system32\\\\msiexec.exe /V', case=False) | ParentImage.str.contains(r'C:\\\\ProgramData\\\\Sophos\\\\', case=False) | ParentImage.str.contains(r'C:\\\\ProgramData\\\\Avira\\\\', case=False) | ParentImage.str.contains(r'C:\\\\Program Files\\\\Avast Software\\\\', case=False) | ParentImage.str.contains(r'C:\\\\Program Files (x86)\\\\Avast Software\\\\', case=False) | ParentImage.str.contains(r'C:\\\\Program Files\\\\Google\\\\Update\\\\', case=False) | ParentImage.str.contains(r'C:\\\\Program Files (x86)\\\\Google\\\\Update\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Copy From Or To Admin Share Or Sysvol Folder",
        "id": "855bc8b5-2ae8-402e-a9ed-b889e6df1900",
        "status": "test",
        "description": "Detects a copy command or a copy utility execution to or from an Admin share or remote",
        "tags": [
            "attack.lateral-movement",
            "attack.collection",
            "attack.exfiltration",
            "attack.t1039",
            "attack.t1048",
            "attack.t1021.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'*\\\\\\\\*$*') | CommandLine.str.contains(r'\\\\Sysvol\\\\', case=False)) & (Image.str.contains(r'\\\\robocopy.exe', case=False) | Image.str.contains(r'\\\\xcopy.exe', case=False) | OriginalFileName==['robocopy.exe', 'XCOPY.EXE'] | (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & CommandLine.str.contains(r'copy', case=False) | (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r'copy-item', case=False) | CommandLine.str.contains(r'copy ', case=False) | CommandLine.str.contains(r'cpi ', case=False) | CommandLine.str.contains(r' cp ', case=False) | CommandLine.str.contains(r'move ', case=False) | CommandLine.str.contains(r'move-item', case=False) | CommandLine.str.contains(r' mi ', case=False) | CommandLine.str.contains(r' mv ', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PrintBrm ZIP Creation of Extraction",
        "id": "cafeeba3-01da-4ab4-b6c4-a31b1d9730c7",
        "status": "test",
        "description": "Detects the execution of the LOLBIN PrintBrm.exe, which can be used to create or extract ZIP files. PrintBrm.exe should not be run on a normal workstation.",
        "tags": [
            "attack.command-and-control",
            "attack.t1105",
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\PrintBrm.exe', case=False) & CommandLine.str.contains(r' -f', case=False) & CommandLine.str.contains(r'.zip', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Download Via Certutil.EXE",
        "id": "19b08b1c-861d-4e75-a1ef-ea0c1baf202b",
        "status": "test",
        "description": "Detects the execution of certutil with certain flags that allow the utility to download files.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certutil.exe', case=False) | OriginalFileName=='CertUtil.exe') & (CommandLine.str.contains(r'urlcache ', case=False) | CommandLine.str.contains(r'verifyctl ', case=False)) & CommandLine.str.contains(r'http', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "InfDefaultInstall.exe .inf Execution",
        "id": "ce7cf472-6fcc-490a-9481-3786840b5d9b",
        "status": "test",
        "description": "Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'InfDefaultInstall.exe ', case=False) & CommandLine.str.contains(r'.inf', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DeviceCredentialDeployment Execution",
        "id": "b8b1b304-a60f-4999-9a6e-c547bde03ffd",
        "status": "test",
        "description": "Detects the execution of DeviceCredentialDeployment to hide a process from view",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\DeviceCredentialDeployment.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "OneNote.EXE Execution of Malicious Embedded Scripts",
        "id": "84b1706c-932a-44c4-ae28-892b28a25b94",
        "status": "test",
        "description": "Detects the execution of malicious OneNote documents that contain embedded scripts.\nWhen a user clicks on a OneNote attachment and then on the malicious link inside the \".one\" file, it exports and executes the malicious embedded script from specific directories.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\onenote.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False)) & (CommandLine.str.contains(r'\\\\exported\\\\', case=False) | CommandLine.str.contains(r'\\\\onenoteofflinecache_files\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed MegaSync Execution",
        "id": "643bdcac-8b82-49f4-9fd9-25a90b929f3b",
        "status": "test",
        "description": "Detects the execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & OriginalFileName=='megasync.exe' & ~ Image.str.contains(r'\\\\megasync.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential SquiblyTwo Technique Execution",
        "id": "8d63dadf-b91b-4187-87b6-34a1114577ea",
        "status": "test",
        "description": "Detects potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields",
        "tags": [
            "attack.defense-evasion",
            "attack.t1047",
            "attack.t1220",
            "attack.execution",
            "attack.t1059.005",
            "attack.t1059.007"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wmic.exe', case=False) | OriginalFileName=='wmic.exe' | Hashes.str.contains(r'IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E', case=False) | Hashes.str.contains(r'IMPHASH=37777A96245A3C74EB217308F3546F4C', case=False) | Hashes.str.contains(r'IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206', case=False)) & CommandLine.str.contains(r'format:', case=False) & CommandLine.str.contains(r'http', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Mouse Lock Execution",
        "id": "c9192ad9-75e5-43eb-8647-82a0a5b493e3",
        "status": "test",
        "description": "In Kaspersky's 2020 Incident Response Analyst Report they listed legitimate tool \"Mouse Lock\" as being used for both credential access and collection in security incidents.",
        "tags": [
            "attack.credential-access",
            "attack.collection",
            "attack.t1056.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Product.str.contains(r'Mouse Lock', case=False) | Company.str.contains(r'Misc314', case=False) | CommandLine.str.contains(r'Mouse Lock_', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Share Mount Via Net.EXE",
        "id": "f117933c-980c-4f78-b384-e3d838111165",
        "status": "test",
        "description": "Detects when a share is mounted using the \"net.exe\" utility",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | OriginalFileName==['net.exe', 'net1.exe']) & (CommandLine.str.contains(r' use ', case=False) | CommandLine.str.contains(r' \\\\\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote File Download Via Findstr.EXE",
        "id": "587254ee-a24b-4335-b3cd-065c0f1f4baa",
        "status": "test",
        "description": "Detects execution of \"findstr\" with specific flags and a remote share path. This specific set of CLI flags would allow \"findstr\" to download the content of the file located on the remote share as described in the LOLBAS entry.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1564.004",
            "attack.t1552.001",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'findstr', case=False) | Image.str.contains(r'findstr.exe', case=False) | OriginalFileName=='FINDSTR.EXE') & (CommandLine.str.contains(r' -v ', case=False) | CommandLine.str.contains(r' /v ', case=False) | CommandLine.str.contains(r' \u2013v ', case=False) | CommandLine.str.contains(r' \u2014v ', case=False) | CommandLine.str.contains(r' \u2015v ', case=False)) & (CommandLine.str.contains(r' -l ', case=False) | CommandLine.str.contains(r' /l ', case=False) | CommandLine.str.contains(r' \u2013l ', case=False) | CommandLine.str.contains(r' \u2014l ', case=False) | CommandLine.str.contains(r' \u2015l ', case=False)) & CommandLine.str.contains(r'\\\\\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Credential Dumping Via LSASS Process Clone",
        "id": "c8da0dfd-4ed0-4b68-962d-13c9c884384e",
        "status": "test",
        "description": "Detects a suspicious LSASS process process clone that could be a sign of credential dumping activity",
        "tags": [
            "attack.credential-access",
            "attack.t1003",
            "attack.t1003.001"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\Windows\\\\System32\\\\lsass.exe', case=False) & Image.str.contains(r'\\\\Windows\\\\System32\\\\lsass.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Nslookup PowerShell Download Cradle - ProcessCreation",
        "id": "1b3b01c7-84e9-4072-86e5-fc285a41ff23",
        "status": "test",
        "description": "Detects suspicious powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\nslookup.exe', case=False) | OriginalFileName=='\\\\nslookup.exe') & (ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False)) & (CommandLine.str.contains(r' -q=txt ', case=False) | CommandLine.str.contains(r' -querytype=txt ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Ping/Copy Command Combination",
        "id": "ded2b07a-d12f-4284-9b76-653e37b6c8b0",
        "status": "test",
        "description": "Detects uncommon and potentially suspicious one-liner command containing both \"ping\" and \"copy\" at the same time, which is usually used by malware.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & CommandLine.str.contains(r'ping', case=False) & CommandLine.str.contains(r'copy ', case=False) & (CommandLine.str.contains(r' -n ', case=False) | CommandLine.str.contains(r' /n ', case=False) | CommandLine.str.contains(r' \u2013n ', case=False) | CommandLine.str.contains(r' \u2014n ', case=False) | CommandLine.str.contains(r' \u2015n ', case=False)) & (CommandLine.str.contains(r' -y ', case=False) | CommandLine.str.contains(r' /y ', case=False) | CommandLine.str.contains(r' \u2013y ', case=False) | CommandLine.str.contains(r' \u2014y ', case=False) | CommandLine.str.contains(r' \u2015y ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Arbitrary Shell Command Execution Via Settingcontent-Ms",
        "id": "24de4f3b-804c-4165-b442-5a06a2302c7e",
        "status": "test",
        "description": "The .SettingContent-ms file type was introduced in Windows 10 and allows a user to create \"shortcuts\" to various Windows 10 setting pages. These files are simply XML and contain paths to various Windows 10 settings binaries.",
        "tags": [
            "attack.t1204",
            "attack.t1566.001",
            "attack.execution",
            "attack.initial-access"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'.SettingContent-ms', case=False) & ~ CommandLine.str.contains(r'immersivecontrolpanel', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ETW Logging Tamper In .NET Processes Via CommandLine",
        "id": "41421f44-58f9-455d-838a-c398859841d4",
        "status": "test",
        "description": "Detects changes to environment variables related to ETW logging via the CommandLine.\nThis could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'COMPlus_ETWEnabled', case=False) | CommandLine.str.contains(r'COMPlus_ETWFlags', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DllUnregisterServer Function Call Via Msiexec.EXE",
        "id": "84f52741-8834-4a8c-a413-2eb2269aa6c8",
        "status": "test",
        "description": "Detects MsiExec loading a DLL and calling its DllUnregisterServer function",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.007"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\msiexec.exe', case=False) | OriginalFileName=='\\\\msiexec.exe') & (CommandLine.str.contains(r' -z ', case=False) | CommandLine.str.contains(r' /z ', case=False) | CommandLine.str.contains(r' \u2013z ', case=False) | CommandLine.str.contains(r' \u2014z ', case=False) | CommandLine.str.contains(r' \u2015z ', case=False)) & CommandLine.str.contains(r'.dll', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "All Backups Deleted Via Wbadmin.EXE",
        "id": "639c9081-f482-47d3-a0bd-ddee3d4ecd76",
        "status": "test",
        "description": "Detects the deletion of all backups or system state backups via \"wbadmin.exe\".\nThis technique is used by numerous ransomware families and actors.\nThis may only be successful on server platforms that have Windows Backup enabled.\n",
        "tags": [
            "attack.impact",
            "attack.t1490"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wbadmin.exe', case=False) | OriginalFileName=='WBADMIN.EXE') & CommandLine.str.contains(r'delete', case=False) & CommandLine.str.contains(r'backup', case=False) & CommandLine.str.contains(r'keepVersions:0', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Registry Modification Via Regini.EXE",
        "id": "5f60740a-f57b-4e76-82a1-15b6ff2cb134",
        "status": "test",
        "description": "Detects the execution of regini.exe which can be used to modify registry keys, the changes are imported from one or more text files.",
        "tags": [
            "attack.t1112",
            "attack.defense-evasion"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\regini.exe', case=False) | OriginalFileName=='REGINI.EXE') & ~ CommandLine.str.contains(r':[^ \\\\\\\\]')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File With Suspicious Extension Downloaded Via Bitsadmin",
        "id": "5b80a791-ad9b-4b75-bcc1-ad4e1e89c200",
        "status": "test",
        "description": "Detects usage of bitsadmin downloading a file with a suspicious extension",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1197",
            "attack.s0190",
            "attack.t1036.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\bitsadmin.exe', case=False) | OriginalFileName=='bitsadmin.exe') & (CommandLine.str.contains(r' /transfer ', case=False) | CommandLine.str.contains(r' /create ', case=False) | CommandLine.str.contains(r' /addfile ', case=False)) & (CommandLine.str.contains(r'.7z', case=False) | CommandLine.str.contains(r'.asax', case=False) | CommandLine.str.contains(r'.ashx', case=False) | CommandLine.str.contains(r'.asmx', case=False) | CommandLine.str.contains(r'.asp', case=False) | CommandLine.str.contains(r'.aspx', case=False) | CommandLine.str.contains(r'.bat', case=False) | CommandLine.str.contains(r'.cfm', case=False) | CommandLine.str.contains(r'.cgi', case=False) | CommandLine.str.contains(r'.chm', case=False) | CommandLine.str.contains(r'.cmd', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.gif', case=False) | CommandLine.str.contains(r'.jpeg', case=False) | CommandLine.str.contains(r'.jpg', case=False) | CommandLine.str.contains(r'.jsp', case=False) | CommandLine.str.contains(r'.jspx', case=False) | CommandLine.str.contains(r'.log', case=False) | CommandLine.str.contains(r'.png', case=False) | CommandLine.str.contains(r'.ps1', case=False) | CommandLine.str.contains(r'.psm1', case=False) | CommandLine.str.contains(r'.rar', case=False) | CommandLine.str.contains(r'.scf', case=False) | CommandLine.str.contains(r'.sct', case=False) | CommandLine.str.contains(r'.txt', case=False) | CommandLine.str.contains(r'.vbe', case=False) | CommandLine.str.contains(r'.vbs', case=False) | CommandLine.str.contains(r'.war', case=False) | CommandLine.str.contains(r'.wsf', case=False) | CommandLine.str.contains(r'.wsh', case=False) | CommandLine.str.contains(r'.xll', case=False) | CommandLine.str.contains(r'.zip', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious DLL Loaded via CertOC.EXE",
        "id": "84232095-ecca-4015-b0d7-7726507ee793",
        "status": "test",
        "description": "Detects when a user installs certificates by using CertOC.exe to load the target DLL file.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certoc.exe', case=False) | OriginalFileName=='CertOC.exe') & (CommandLine.str.contains(r' -LoadDLL ', case=False) | CommandLine.str.contains(r' /LoadDLL ', case=False) | CommandLine.str.contains(r' \u2013LoadDLL ', case=False) | CommandLine.str.contains(r' \u2014LoadDLL ', case=False) | CommandLine.str.contains(r' \u2015LoadDLL ', case=False)) & (CommandLine.str.contains(r'\\\\Appdata\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Desktop\\\\', case=False) | CommandLine.str.contains(r'\\\\Downloads\\\\', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'C:\\\\Windows\\\\Tasks\\\\', case=False) | CommandLine.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Windows Defender Folder Exclusion Added Via Reg.EXE",
        "id": "48917adc-a28e-4f5d-b729-11e75da8941f",
        "status": "test",
        "description": "Detects the usage of \"reg.exe\" to add Defender folder exclusions. Qbot has been seen using this technique to add exclusions for folders within AppData and ProgramData.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\reg.exe', case=False) & (CommandLine.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows Defender\\\\Exclusions\\\\Paths', case=False) | CommandLine.str.contains(r'SOFTWARE\\\\Microsoft\\\\Microsoft Antimalware\\\\Exclusions\\\\Paths', case=False)) & CommandLine.str.contains(r'ADD ', case=False) & CommandLine.str.contains(r'/t ', case=False) & CommandLine.str.contains(r'REG_DWORD ', case=False) & CommandLine.str.contains(r'/v ', case=False) & CommandLine.str.contains(r'/d ', case=False) & CommandLine.str.contains(r'0', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Mpclient.DLL Sideloading Via OfflineScannerShell.EXE Execution",
        "id": "02b18447-ea83-4b1b-8805-714a8a34546a",
        "status": "test",
        "description": "Detects execution of Windows Defender \"OfflineScannerShell.exe\" from its non standard directory.\nThe \"OfflineScannerShell.exe\" binary is vulnerable to DLL side loading and will load any DLL named \"mpclient.dll\" from the current working directory.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\OfflineScannerShell.exe', case=False) | OriginalFileName=='OfflineScannerShell.exe') & ~ (CurrentDirectory=='C:\\\\Program Files\\\\Windows Defender\\\\Offline\\\\' | CurrentDirectory=='' | CurrentDirectory is null)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Computer System Reconnaissance Via Wmic.EXE",
        "id": "9d7ca793-f6bd-471c-8d0f-11e68b2f0d2f",
        "status": "test",
        "description": "Detects execution of wmic utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc.",
        "tags": [
            "attack.discovery",
            "attack.execution",
            "attack.t1047"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wmic.exe', case=False) | OriginalFileName=='wmic.exe') & CommandLine.str.contains(r'computersystem', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Default PowerSploit/Empire Scheduled Task Creation",
        "id": "56c217c3-2de2-479b-990f-5c109ba8458f",
        "status": "test",
        "description": "Detects the creation of a schtask via PowerSploit or Empire Default Configuration.",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.s0111",
            "attack.g0022",
            "attack.g0060",
            "car.2013-08-001",
            "attack.t1053.005",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False)) & Image.str.contains(r'\\\\schtasks.exe', case=False) & CommandLine.str.contains(r'/Create', case=False) & CommandLine.str.contains(r'powershell.exe -NonI', case=False) & CommandLine.str.contains(r'/TN Updater /TR', case=False) & (CommandLine.str.contains(r'/SC ONLOGON', case=False) | CommandLine.str.contains(r'/SC DAILY /ST', case=False) | CommandLine.str.contains(r'/SC ONIDLE', case=False) | CommandLine.str.contains(r'/SC HOURLY', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Tamper Windows Defender Remove-MpPreference",
        "id": "07e3cb2c-0608-410d-be4b-1511cb1a0448",
        "status": "test",
        "description": "Detects attempts to remove Windows Defender configurations using the 'MpPreference' cmdlet",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'Remove-MpPreference', case=False) & (CommandLine.str.contains(r'-ControlledFolderAccessProtectedFolders ', case=False) | CommandLine.str.contains(r'-AttackSurfaceReductionRules_Ids ', case=False) | CommandLine.str.contains(r'-AttackSurfaceReductionRules_Actions ', case=False) | CommandLine.str.contains(r'-CheckForSignaturesBeforeRunningScan ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Self Extracting Package Creation Via Iexpress.EXE From Potentially Suspicious Location",
        "id": "b2b048b0-7857-4380-b0fb-d3f0ab820b71",
        "status": "experimental",
        "description": "Detects the use of iexpress.exe to create binaries via Self Extraction Directive (SED) files located in potentially suspicious locations.\nThis behavior has been observed in-the-wild by different threat actors.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\iexpress.exe', case=False) | OriginalFileName=='IEXPRESS.exe') & (CommandLine.str.contains(r' -n ', case=False) | CommandLine.str.contains(r' /n ', case=False) | CommandLine.str.contains(r' \u2013n ', case=False) | CommandLine.str.contains(r' \u2014n ', case=False) | CommandLine.str.contains(r' \u2015n ', case=False)) & (CommandLine.str.contains(r':\\\\ProgramData\\\\', case=False) | CommandLine.str.contains(r':\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\System32\\\\Tasks\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Diantz Alternate Data Stream Execution",
        "id": "6b369ced-4b1d-48f1-b427-fdc0de0790bd",
        "status": "test",
        "description": "Compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'diantz.exe', case=False) & CommandLine.str.contains(r'.cab', case=False) & CommandLine.str.contains(r':[^\\\\\\\\]')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Adplus.EXE Abuse",
        "id": "2f869d59-7f6a-4931-992c-cce556ff2d53",
        "status": "test",
        "description": "Detects execution of \"AdPlus.exe\", a binary that is part of the Windows SDK that can be used as a LOLBIN in order to dump process memory and execute arbitrary commands.",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\adplus.exe', case=False) | OriginalFileName=='Adplus.exe') & (CommandLine.str.contains(r' -hang ', case=False) | CommandLine.str.contains(r' -pn ', case=False) | CommandLine.str.contains(r' -pmn ', case=False) | CommandLine.str.contains(r' -p ', case=False) | CommandLine.str.contains(r' -po ', case=False) | CommandLine.str.contains(r' -c ', case=False) | CommandLine.str.contains(r' -sc ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Obfuscated PowerShell OneLiner Execution",
        "id": "44e24481-6202-4c62-9127-5a0ae8e3fe3d",
        "status": "test",
        "description": "Detects the execution of a specific OneLiner to download and execute powershell modules in memory.",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1059.001",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\powershell.exe', case=False) & CommandLine.str.contains(r'http://127.0.0.1', case=False) & CommandLine.str.contains(r'%{(IRM $_)}', case=False) & CommandLine.str.contains(r'.SubString.ToString()[67,72,64]-Join', case=False) & CommandLine.str.contains(r'Import-Module', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New User Created Via Net.EXE",
        "id": "cd219ff3-fa99-45d4-8380-a7d15116c6dc",
        "status": "test",
        "description": "Identifies the creation of local users via the net.exe command.",
        "tags": [
            "attack.persistence",
            "attack.t1136.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | OriginalFileName==['net.exe', 'net1.exe']) & CommandLine.str.contains(r'user', case=False) & CommandLine.str.contains(r'add', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "MMC20 Lateral Movement",
        "id": "f1f3bf22-deb2-418d-8cce-e1a45e46a5bd",
        "status": "test",
        "description": "Detects MMC20.Application Lateral Movement; specifically looks for the spawning of the parent MMC.exe with a command line of \"-Embedding\" as a child of svchost.exe",
        "tags": [
            "attack.execution",
            "attack.t1021.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\svchost.exe', case=False) & Image.str.contains(r'\\\\mmc.exe', case=False) & CommandLine.str.contains(r'-Embedding', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - NetSupport Execution",
        "id": "758ff488-18d5-4cbe-8ec4-02b6285a434f",
        "status": "test",
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description=='NetSupport Client Configurator' | Product=='NetSupport Remote Control' | Company=='NetSupport Ltd' | OriginalFileName=='PCICFGUI.EXE')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Add Insecure Download Source To Winget",
        "id": "81a0ecb5-0a41-4ba1-b2ba-c944eb92bfa2",
        "status": "test",
        "description": "Detects usage of winget to add a new insecure (http) download source.\nWinget will not allow the addition of insecure sources, hence this could indicate potential suspicious activity (or typos)\n",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\winget.exe', case=False) | OriginalFileName=='winget.exe') & CommandLine.str.contains(r'source ', case=False) & CommandLine.str.contains(r'add ', case=False) & CommandLine.str.contains(r'http://', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DumpStack.log Defender Evasion",
        "id": "4f647cfa-b598-4e12-ad69-c68dd16caef8",
        "status": "test",
        "description": "Detects the use of the filename DumpStack.log to evade Microsoft Defender",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\DumpStack.log', case=False) | CommandLine.str.contains(r' -o DumpStack.log', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Deleted Data Overwritten Via Cipher.EXE",
        "id": "4b046706-5789-4673-b111-66f25fe99534",
        "status": "test",
        "description": "Detects usage of the \"cipher\" built-in utility in order to overwrite deleted data from disk.\nAdversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources.\nData destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives\n",
        "tags": [
            "attack.impact",
            "attack.t1485"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='CIPHER.EXE' | Image.str.contains(r'\\\\cipher.exe', case=False)) & CommandLine.str.contains(r' /w:', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Group And Account Reconnaissance Activity Using Net.EXE",
        "id": "d95de845-b83c-4a9a-8a6a-4fc802ebf6c0",
        "status": "test",
        "description": "Detects suspicious reconnaissance command line activity on Windows systems using Net.EXE\nCheck if the user that executed the commands is suspicious (e.g. service accounts, LOCAL_SYSTEM)\n",
        "tags": [
            "attack.discovery",
            "attack.t1087.001",
            "attack.t1087.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | OriginalFileName==['net.exe', 'net1.exe']) & ((CommandLine.str.contains(r' group ', case=False) | CommandLine.str.contains(r' localgroup ', case=False)) & (CommandLine.str.contains(r'domain admins', case=False) | CommandLine.str.contains(r' administrator', case=False) | CommandLine.str.contains(r' administrateur', case=False) | CommandLine.str.contains(r'enterprise admins', case=False) | CommandLine.str.contains(r'Exchange Trusted Subsystem', case=False) | CommandLine.str.contains(r'Remote Desktop Users', case=False) | CommandLine.str.contains(r'Utilisateurs du Bureau \u00e0 distance', case=False) | CommandLine.str.contains(r'Usuarios de escritorio remoto', case=False) | CommandLine.str.contains(r' /do', case=False)) & ~ CommandLine.str.contains(r' /add', case=False) | CommandLine.str.contains(r' accounts ', case=False) & CommandLine.str.contains(r' /do', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Persistence Via TypedPaths - CommandLine",
        "id": "ec88289a-7e1a-4cc3-8d18-bd1f60e4b9ba",
        "status": "test",
        "description": "Detects modification addition to the 'TypedPaths' key in the user or admin registry via the commandline. Which might indicate persistence attempt",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\TypedPaths', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Child Process Of DiskShadow.EXE",
        "id": "9f546b25-5f12-4c8d-8532-5893dcb1e4b8",
        "status": "test",
        "description": "Detects potentially suspicious child processes of \"Diskshadow.exe\". This could be an attempt to bypass parent/child relationship detection or application whitelisting rules.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\diskshadow.exe', case=False) & (Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Shadow Copies Deletion Using Operating Systems Utilities",
        "id": "c947b146-0abc-4c87-9c64-b17e9d7274a2",
        "status": "stable",
        "description": "Shadow Copies deletion using operating systems utilities",
        "tags": [
            "attack.defense-evasion",
            "attack.impact",
            "attack.t1070",
            "attack.t1490"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\vssadmin.exe', case=False) | Image.str.contains(r'\\\\diskshadow.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll', 'wmic.exe', 'VSSADMIN.EXE', 'diskshadow.exe']) & CommandLine.str.contains(r'shadow', case=False) & CommandLine.str.contains(r'delete', case=False) | (Image.str.contains(r'\\\\wbadmin.exe', case=False) | OriginalFileName=='WBADMIN.EXE') & CommandLine.str.contains(r'delete', case=False) & CommandLine.str.contains(r'catalog', case=False) & CommandLine.str.contains(r'quiet', case=False) | (Image.str.contains(r'\\\\vssadmin.exe', case=False) | OriginalFileName=='VSSADMIN.EXE') & CommandLine.str.contains(r'resize', case=False) & CommandLine.str.contains(r'shadowstorage', case=False) & (CommandLine.str.contains(r'unbounded', case=False) | CommandLine.str.contains(r'/MaxSize=', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Binary Impersonating Sysinternals Tools",
        "id": "7cce6fc8-a07f-4d84-a53e-96e1879843c9",
        "status": "test",
        "description": "Detects binaries that use the same name as legitimate sysinternals tools to evade detection",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\accesschk.exe', case=False) | Image.str.contains(r'\\\\accesschk64.exe', case=False) | Image.str.contains(r'\\\\AccessEnum.exe', case=False) | Image.str.contains(r'\\\\ADExplorer.exe', case=False) | Image.str.contains(r'\\\\ADExplorer64.exe', case=False) | Image.str.contains(r'\\\\ADInsight.exe', case=False) | Image.str.contains(r'\\\\ADInsight64.exe', case=False) | Image.str.contains(r'\\\\adrestore.exe', case=False) | Image.str.contains(r'\\\\adrestore64.exe', case=False) | Image.str.contains(r'\\\\Autologon.exe', case=False) | Image.str.contains(r'\\\\Autologon64.exe', case=False) | Image.str.contains(r'\\\\Autoruns.exe', case=False) | Image.str.contains(r'\\\\Autoruns64.exe', case=False) | Image.str.contains(r'\\\\autorunsc.exe', case=False) | Image.str.contains(r'\\\\autorunsc64.exe', case=False) | Image.str.contains(r'\\\\Bginfo.exe', case=False) | Image.str.contains(r'\\\\Bginfo64.exe', case=False) | Image.str.contains(r'\\\\Cacheset.exe', case=False) | Image.str.contains(r'\\\\Cacheset64.exe', case=False) | Image.str.contains(r'\\\\Clockres.exe', case=False) | Image.str.contains(r'\\\\Clockres64.exe', case=False) | Image.str.contains(r'\\\\Contig.exe', case=False) | Image.str.contains(r'\\\\Contig64.exe', case=False) | Image.str.contains(r'\\\\Coreinfo.exe', case=False) | Image.str.contains(r'\\\\Coreinfo64.exe', case=False) | Image.str.contains(r'\\\\CPUSTRES.EXE', case=False) | Image.str.contains(r'\\\\CPUSTRES64.EXE', case=False) | Image.str.contains(r'\\\\ctrl2cap.exe', case=False) | Image.str.contains(r'\\\\Dbgview.exe', case=False) | Image.str.contains(r'\\\\dbgview64.exe', case=False) | Image.str.contains(r'\\\\Desktops.exe', case=False) | Image.str.contains(r'\\\\Desktops64.exe', case=False) | Image.str.contains(r'\\\\disk2vhd.exe', case=False) | Image.str.contains(r'\\\\disk2vhd64.exe', case=False) | Image.str.contains(r'\\\\diskext.exe', case=False) | Image.str.contains(r'\\\\diskext64.exe', case=False) | Image.str.contains(r'\\\\Diskmon.exe', case=False) | Image.str.contains(r'\\\\Diskmon64.exe', case=False) | Image.str.contains(r'\\\\DiskView.exe', case=False) | Image.str.contains(r'\\\\DiskView64.exe', case=False) | Image.str.contains(r'\\\\du.exe', case=False) | Image.str.contains(r'\\\\du64.exe', case=False) | Image.str.contains(r'\\\\efsdump.exe', case=False) | Image.str.contains(r'\\\\FindLinks.exe', case=False) | Image.str.contains(r'\\\\FindLinks64.exe', case=False) | Image.str.contains(r'\\\\handle.exe', case=False) | Image.str.contains(r'\\\\handle64.exe', case=False) | Image.str.contains(r'\\\\hex2dec.exe', case=False) | Image.str.contains(r'\\\\hex2dec64.exe', case=False) | Image.str.contains(r'\\\\junction.exe', case=False) | Image.str.contains(r'\\\\junction64.exe', case=False) | Image.str.contains(r'\\\\ldmdump.exe', case=False) | Image.str.contains(r'\\\\listdlls.exe', case=False) | Image.str.contains(r'\\\\listdlls64.exe', case=False) | Image.str.contains(r'\\\\livekd.exe', case=False) | Image.str.contains(r'\\\\livekd64.exe', case=False) | Image.str.contains(r'\\\\loadOrd.exe', case=False) | Image.str.contains(r'\\\\loadOrd64.exe', case=False) | Image.str.contains(r'\\\\loadOrdC.exe', case=False) | Image.str.contains(r'\\\\loadOrdC64.exe', case=False) | Image.str.contains(r'\\\\logonsessions.exe', case=False) | Image.str.contains(r'\\\\logonsessions64.exe', case=False) | Image.str.contains(r'\\\\movefile.exe', case=False) | Image.str.contains(r'\\\\movefile64.exe', case=False) | Image.str.contains(r'\\\\notmyfault.exe', case=False) | Image.str.contains(r'\\\\notmyfault64.exe', case=False) | Image.str.contains(r'\\\\notmyfaultc.exe', case=False) | Image.str.contains(r'\\\\notmyfaultc64.exe', case=False) | Image.str.contains(r'\\\\ntfsinfo.exe', case=False) | Image.str.contains(r'\\\\ntfsinfo64.exe', case=False) | Image.str.contains(r'\\\\pendmoves.exe', case=False) | Image.str.contains(r'\\\\pendmoves64.exe', case=False) | Image.str.contains(r'\\\\pipelist.exe', case=False) | Image.str.contains(r'\\\\pipelist64.exe', case=False) | Image.str.contains(r'\\\\portmon.exe', case=False) | Image.str.contains(r'\\\\procdump.exe', case=False) | Image.str.contains(r'\\\\procdump64.exe', case=False) | Image.str.contains(r'\\\\procexp.exe', case=False) | Image.str.contains(r'\\\\procexp64.exe', case=False) | Image.str.contains(r'\\\\Procmon.exe', case=False) | Image.str.contains(r'\\\\Procmon64.exe', case=False) | Image.str.contains(r'\\\\psExec.exe', case=False) | Image.str.contains(r'\\\\psExec64.exe', case=False) | Image.str.contains(r'\\\\psfile.exe', case=False) | Image.str.contains(r'\\\\psfile64.exe', case=False) | Image.str.contains(r'\\\\psGetsid.exe', case=False) | Image.str.contains(r'\\\\psGetsid64.exe', case=False) | Image.str.contains(r'\\\\psInfo.exe', case=False) | Image.str.contains(r'\\\\psInfo64.exe', case=False) | Image.str.contains(r'\\\\pskill.exe', case=False) | Image.str.contains(r'\\\\pskill64.exe', case=False) | Image.str.contains(r'\\\\pslist.exe', case=False) | Image.str.contains(r'\\\\pslist64.exe', case=False) | Image.str.contains(r'\\\\psLoggedon.exe', case=False) | Image.str.contains(r'\\\\psLoggedon64.exe', case=False) | Image.str.contains(r'\\\\psloglist.exe', case=False) | Image.str.contains(r'\\\\psloglist64.exe', case=False) | Image.str.contains(r'\\\\pspasswd.exe', case=False) | Image.str.contains(r'\\\\pspasswd64.exe', case=False) | Image.str.contains(r'\\\\psping.exe', case=False) | Image.str.contains(r'\\\\psping64.exe', case=False) | Image.str.contains(r'\\\\psService.exe', case=False) | Image.str.contains(r'\\\\psService64.exe', case=False) | Image.str.contains(r'\\\\psshutdown.exe', case=False) | Image.str.contains(r'\\\\psshutdown64.exe', case=False) | Image.str.contains(r'\\\\pssuspend.exe', case=False) | Image.str.contains(r'\\\\pssuspend64.exe', case=False) | Image.str.contains(r'\\\\RAMMap.exe', case=False) | Image.str.contains(r'\\\\RDCMan.exe', case=False) | Image.str.contains(r'\\\\RegDelNull.exe', case=False) | Image.str.contains(r'\\\\RegDelNull64.exe', case=False) | Image.str.contains(r'\\\\regjump.exe', case=False) | Image.str.contains(r'\\\\ru.exe', case=False) | Image.str.contains(r'\\\\ru64.exe', case=False) | Image.str.contains(r'\\\\sdelete.exe', case=False) | Image.str.contains(r'\\\\sdelete64.exe', case=False) | Image.str.contains(r'\\\\ShareEnum.exe', case=False) | Image.str.contains(r'\\\\ShareEnum64.exe', case=False) | Image.str.contains(r'\\\\shellRunas.exe', case=False) | Image.str.contains(r'\\\\sigcheck.exe', case=False) | Image.str.contains(r'\\\\sigcheck64.exe', case=False) | Image.str.contains(r'\\\\streams.exe', case=False) | Image.str.contains(r'\\\\streams64.exe', case=False) | Image.str.contains(r'\\\\strings.exe', case=False) | Image.str.contains(r'\\\\strings64.exe', case=False) | Image.str.contains(r'\\\\sync.exe', case=False) | Image.str.contains(r'\\\\sync64.exe', case=False) | Image.str.contains(r'\\\\Sysmon.exe', case=False) | Image.str.contains(r'\\\\Sysmon64.exe', case=False) | Image.str.contains(r'\\\\tcpvcon.exe', case=False) | Image.str.contains(r'\\\\tcpvcon64.exe', case=False) | Image.str.contains(r'\\\\tcpview.exe', case=False) | Image.str.contains(r'\\\\tcpview64.exe', case=False) | Image.str.contains(r'\\\\Testlimit.exe', case=False) | Image.str.contains(r'\\\\Testlimit64.exe', case=False) | Image.str.contains(r'\\\\vmmap.exe', case=False) | Image.str.contains(r'\\\\vmmap64.exe', case=False) | Image.str.contains(r'\\\\Volumeid.exe', case=False) | Image.str.contains(r'\\\\Volumeid64.exe', case=False) | Image.str.contains(r'\\\\whois.exe', case=False) | Image.str.contains(r'\\\\whois64.exe', case=False) | Image.str.contains(r'\\\\Winobj.exe', case=False) | Image.str.contains(r'\\\\Winobj64.exe', case=False) | Image.str.contains(r'\\\\ZoomIt.exe', case=False) | Image.str.contains(r'\\\\ZoomIt64.exe', case=False)) & ~ (Company==['Sysinternals - www.sysinternals.com', 'Sysinternals'] | Company is null)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - XORDump Execution",
        "id": "66e563f9-1cbd-4a22-a957-d8b7c0f44372",
        "status": "test",
        "description": "Detects suspicious use of XORDump process memory dumping utility",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\xordump.exe', case=False) | CommandLine.str.contains(r' -process lsass.exe ', case=False) | CommandLine.str.contains(r' -m comsvcs ', case=False) | CommandLine.str.contains(r' -m dbghelp ', case=False) | CommandLine.str.contains(r' -m dbgcore ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed Remote Utilities RAT (RURAT) Execution",
        "id": "9ef27c24-4903-4192-881a-3adde7ff92a5",
        "status": "test",
        "description": "Detects execution of renamed Remote Utilities (RURAT) via Product PE header field",
        "tags": [
            "attack.defense-evasion",
            "attack.collection",
            "attack.command-and-control",
            "attack.discovery",
            "attack.s0592"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Product=='Remote Utilities' & ~ (Image.str.contains(r'\\\\rutserv.exe', case=False) | Image.str.contains(r'\\\\rfusclient.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Command Patterns In Scheduled Task Creation",
        "id": "f2c64357-b1d2-41b7-849f-34d2682c0fad",
        "status": "test",
        "description": "Detects scheduled task creation using \"schtasks\" that contain potentially suspicious or uncommon commands",
        "tags": [
            "attack.execution",
            "attack.t1053.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\schtasks.exe', case=False) & CommandLine.str.contains(r'/Create ', case=False) & ((CommandLine.str.contains(r'/sc minute ', case=False) | CommandLine.str.contains(r'/ru system ', case=False)) & (CommandLine.str.contains(r'cmd /c', case=False) | CommandLine.str.contains(r'cmd /k', case=False) | CommandLine.str.contains(r'cmd /r', case=False) | CommandLine.str.contains(r'cmd.exe /c ', case=False) | CommandLine.str.contains(r'cmd.exe /k ', case=False) | CommandLine.str.contains(r'cmd.exe /r ', case=False)) | CommandLine.str.contains(r' -decode ', case=False) | CommandLine.str.contains(r' -enc ', case=False) | CommandLine.str.contains(r' -w hidden ', case=False) | CommandLine.str.contains(r' bypass ', case=False) | CommandLine.str.contains(r' IEX', case=False) | CommandLine.str.contains(r'.DownloadData', case=False) | CommandLine.str.contains(r'.DownloadFile', case=False) | CommandLine.str.contains(r'.DownloadString', case=False) | CommandLine.str.contains(r'/c start /min ', case=False) | CommandLine.str.contains(r'FromBase64String', case=False) | CommandLine.str.contains(r'mshta http', case=False) | CommandLine.str.contains(r'mshta.exe http', case=False) | (CommandLine.str.contains(r':\\\\ProgramData\\\\', case=False) | CommandLine.str.contains(r':\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Tmp\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\', case=False) | CommandLine.str.contains(r'%AppData%', case=False) | CommandLine.str.contains(r'%Temp%', case=False) | CommandLine.str.contains(r'%tmp%', case=False)) & (CommandLine.str.contains(r'cscript', case=False) | CommandLine.str.contains(r'curl', case=False) | CommandLine.str.contains(r'wscript', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Script Interpreter Execution From Suspicious Folder",
        "id": "1228c958-e64e-4e71-92ad-7d429f4138ba",
        "status": "test",
        "description": "Detects a suspicious script execution in temporary folders or folders accessible by environment variables",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | CommandLine.str.contains(r' -ep bypass ', case=False) | CommandLine.str.contains(r' -ExecutionPolicy bypass ', case=False) | CommandLine.str.contains(r' -w hidden ', case=False) | CommandLine.str.contains(r'/e:javascript ', case=False) | CommandLine.str.contains(r'/e:Jscript ', case=False) | CommandLine.str.contains(r'/e:vbscript ', case=False) | OriginalFileName==['cscript.exe', 'mshta.exe', 'wscript.exe']) & (CommandLine.str.contains(r':\\\\Perflogs\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Roaming\\\\Temp', case=False) | CommandLine.str.contains(r'\\\\Temporary Internet', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Temp', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Favorites\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Favourites\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Contacts\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use Short Name Path in Command Line",
        "id": "349d891d-fef0-4fe4-bc53-eee623a15969",
        "status": "test",
        "description": "Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'~1\\\\', case=False) | CommandLine.str.contains(r'~2\\\\', case=False)) & ~ (ParentImage==['C:\\\\Windows\\\\System32\\\\Dism.exe', 'C:\\\\Windows\\\\System32\\\\cleanmgr.exe', 'C:\\\\Program Files\\\\GPSoftware\\\\Directory Opus\\\\dopus.exe'] | ParentImage.str.contains(r'\\\\WebEx\\\\WebexHost.exe', case=False) | ParentImage.str.contains(r'\\\\thor\\\\thor64.exe', case=False) | ParentImage.str.contains(r'\\\\veam.backup.shell.exe', case=False) | ParentImage.str.contains(r'\\\\winget.exe', case=False) | ParentImage.str.contains(r'\\\\Everything\\\\Everything.exe', case=False) | ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\WinGet\\\\', case=False) | CommandLine.str.contains(r'\\\\appdata\\\\local\\\\webex\\\\webex64\\\\meetings\\\\wbxreport.exe', case=False) | CommandLine.str.contains(r'C:\\\\Program Files\\\\Git\\\\post-install.bat', case=False) | CommandLine.str.contains(r'C:\\\\Program Files\\\\Git\\\\cmd\\\\scalar.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Download Via Windows Defender MpCmpRun.EXE",
        "id": "46123129-1024-423e-9fae-43af4a0fa9a5",
        "status": "test",
        "description": "Detects the use of Windows Defender MpCmdRun.EXE to download files",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='MpCmdRun.exe' | Image.str.contains(r'\\\\MpCmdRun.exe', case=False) | CommandLine.str.contains(r'MpCmdRun.exe', case=False) | Description=='Microsoft Malware Protection Command Line Utility') & CommandLine.str.contains(r'DownloadFile', case=False) & CommandLine.str.contains(r'url', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Program Names",
        "id": "efdd8dd5-cee8-4e59-9390-7d4d5e4dd6f6",
        "status": "test",
        "description": "Detects suspicious patterns in program names or folders that are often found in malicious samples or hacktools",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\CVE-202', case=False) | Image.str.contains(r'\\\\CVE202', case=False) | Image.str.contains(r'\\\\poc.exe', case=False) | Image.str.contains(r'\\\\artifact.exe', case=False) | Image.str.contains(r'\\\\artifact64.exe', case=False) | Image.str.contains(r'\\\\artifact_protected.exe', case=False) | Image.str.contains(r'\\\\artifact32.exe', case=False) | Image.str.contains(r'\\\\artifact32big.exe', case=False) | Image.str.contains(r'obfuscated.exe', case=False) | Image.str.contains(r'obfusc.exe', case=False) | Image.str.contains(r'\\\\meterpreter', case=False) | CommandLine.str.contains(r'inject.ps1', case=False) | CommandLine.str.contains(r'Invoke-CVE', case=False) | CommandLine.str.contains(r'pupy.ps1', case=False) | CommandLine.str.contains(r'payload.ps1', case=False) | CommandLine.str.contains(r'beacon.ps1', case=False) | CommandLine.str.contains(r'PowerView.ps1', case=False) | CommandLine.str.contains(r'bypass.ps1', case=False) | CommandLine.str.contains(r'obfuscated.ps1', case=False) | CommandLine.str.contains(r'obfusc.ps1', case=False) | CommandLine.str.contains(r'obfus.ps1', case=False) | CommandLine.str.contains(r'obfs.ps1', case=False) | CommandLine.str.contains(r'evil.ps1', case=False) | CommandLine.str.contains(r'MiniDogz.ps1', case=False) | CommandLine.str.contains(r'_enc.ps1', case=False) | CommandLine.str.contains(r'\\\\shell.ps1', case=False) | CommandLine.str.contains(r'\\\\rshell.ps1', case=False) | CommandLine.str.contains(r'revshell.ps1', case=False) | CommandLine.str.contains(r'\\\\av.ps1', case=False) | CommandLine.str.contains(r'\\\\av_test.ps1', case=False) | CommandLine.str.contains(r'adrecon.ps1', case=False) | CommandLine.str.contains(r'mimikatz.ps1', case=False) | CommandLine.str.contains(r'\\\\PowerUp_', case=False) | CommandLine.str.contains(r'powerup.ps1', case=False) | CommandLine.str.contains(r'\\\\Temp\\\\a.ps1', case=False) | CommandLine.str.contains(r'\\\\Temp\\\\p.ps1', case=False) | CommandLine.str.contains(r'\\\\Temp\\\\1.ps1', case=False) | CommandLine.str.contains(r'Hound.ps1', case=False) | CommandLine.str.contains(r'encode.ps1', case=False) | CommandLine.str.contains(r'powercat.ps1', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Exports Registry Key To a File",
        "id": "f0e53e89-8d22-46ea-9db5-9d4796ee2f8a",
        "status": "test",
        "description": "Detects the export of the target Registry key to a file.",
        "tags": [
            "attack.exfiltration",
            "attack.t1012"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\regedit.exe', case=False) | OriginalFileName=='REGEDIT.EXE') & (CommandLine.str.contains(r' -E ', case=False) | CommandLine.str.contains(r' /E ', case=False) | CommandLine.str.contains(r' \u2013E ', case=False) | CommandLine.str.contains(r' \u2014E ', case=False) | CommandLine.str.contains(r' \u2015E ', case=False)) & ~ ((CommandLine.str.contains(r'hklm', case=False) | CommandLine.str.contains(r'hkey_local_machine', case=False)) & (CommandLine.str.contains(r'\\\\system', case=False) | CommandLine.str.contains(r'\\\\sam', case=False) | CommandLine.str.contains(r'\\\\security', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Renamed Rundll32 Execution",
        "id": "2569ed8c-1147-498a-9b8c-2ad3656b10ed",
        "status": "test",
        "description": "Detects when 'DllRegisterServer' is called in the commandline and the image is not rundll32. This could mean that the 'rundll32' utility has been renamed in order to avoid detection",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'DllRegisterServer', case=False) & ~ Image.str.contains(r'\\\\rundll32.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Execute From Alternate Data Streams",
        "id": "7f43c430-5001-4f8b-aaa9-c3b88f18fa5c",
        "status": "test",
        "description": "Detects execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'txt:', case=False) & (CommandLine.str.contains(r'type ', case=False) & CommandLine.str.contains(r' > ', case=False) | CommandLine.str.contains(r'makecab ', case=False) & CommandLine.str.contains(r'.cab', case=False) | CommandLine.str.contains(r'reg ', case=False) & CommandLine.str.contains(r' export ', case=False) | CommandLine.str.contains(r'regedit ', case=False) & CommandLine.str.contains(r' /E ', case=False) | CommandLine.str.contains(r'esentutl ', case=False) & CommandLine.str.contains(r' /y ', case=False) & CommandLine.str.contains(r' /d ', case=False) & CommandLine.str.contains(r' /o ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Assembly Loading Via CL_LoadAssembly.ps1",
        "id": "c57872c7-614f-4d7f-a40d-b78c8df2d30d",
        "status": "test",
        "description": "Detects calls to \"LoadAssemblyFromPath\" or \"LoadAssemblyFromNS\" that are part of the \"CL_LoadAssembly.ps1\" script. This can be abused to load different assemblies and bypass App locker controls.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1216"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'LoadAssemblyFromPath ', case=False) | CommandLine.str.contains(r'LoadAssemblyFromNS ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Impersonate Execution",
        "id": "cf0c254b-22f1-4b2b-8221-e137b3c0af94",
        "status": "test",
        "description": "Detects execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1134.001",
            "attack.t1134.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'impersonate.exe', case=False) & (CommandLine.str.contains(r' list ', case=False) | CommandLine.str.contains(r' exec ', case=False) | CommandLine.str.contains(r' adduser ', case=False)) | Hashes.str.contains(r'MD5=9520714AB576B0ED01D1513691377D01', case=False) | Hashes.str.contains(r'SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A', case=False) | Hashes.str.contains(r'IMPHASH=0A358FFC1697B7A07D0E817AC740DF62', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Generic Credentials Added Via Cmdkey.EXE",
        "id": "b1ec66c6-f4d1-4b5c-96dd-af28ccae7727",
        "status": "test",
        "description": "Detects usage of \"cmdkey.exe\" to add generic credentials.\nAs an example, this can be used before connecting to an RDP session via command line interface.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1003.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmdkey.exe', case=False) | OriginalFileName=='cmdkey.exe') & (CommandLine.str.contains(r' -g', case=False) | CommandLine.str.contains(r' /g', case=False) | CommandLine.str.contains(r' \u2013g', case=False) | CommandLine.str.contains(r' \u2014g', case=False) | CommandLine.str.contains(r' \u2015g', case=False)) & (CommandLine.str.contains(r' -u', case=False) | CommandLine.str.contains(r' /u', case=False) | CommandLine.str.contains(r' \u2013u', case=False) | CommandLine.str.contains(r' \u2014u', case=False) | CommandLine.str.contains(r' \u2015u', case=False)) & (CommandLine.str.contains(r' -p', case=False) | CommandLine.str.contains(r' /p', case=False) | CommandLine.str.contains(r' \u2013p', case=False) | CommandLine.str.contains(r' \u2014p', case=False) | CommandLine.str.contains(r' \u2015p', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed Sysinternals Sdelete Execution",
        "id": "c1d867fe-8d95-4487-aab4-e53f2d339f90",
        "status": "test",
        "description": "Detects the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming)",
        "tags": [
            "attack.impact",
            "attack.t1485"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & OriginalFileName=='sdelete.exe' & ~ (Image.str.contains(r'\\\\sdelete.exe', case=False) | Image.str.contains(r'\\\\sdelete64.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Execution Location Of Wermgr.EXE",
        "id": "5394fcc7-aeb2-43b5-9a09-cac9fc5edcd5",
        "status": "test",
        "description": "Detects suspicious Windows Error Reporting manager (wermgr.exe) execution location.",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\wermgr.exe', case=False) & ~ (Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Extension Shim Database Installation Via Sdbinst.EXE",
        "id": "18ee686c-38a3-4f65-9f44-48a077141f42",
        "status": "test",
        "description": "Detects installation of a potentially suspicious new shim with an uncommon extension using sdbinst.exe.\nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims\n",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1546.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\sdbinst.exe', case=False) | OriginalFileName=='sdbinst.exe') & ~ (CommandLine.str.contains(r'.sdb', case=False) | CommandLine.str.contains(r' -c', case=False) | CommandLine.str.contains(r' -f', case=False) | CommandLine.str.contains(r' -mm', case=False) | CommandLine.str.contains(r' -t', case=False) | CommandLine.str.contains(r' -m -bg', case=False) | CommandLine is null | CommandLine=='')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - NirCmd Execution",
        "id": "4e2ed651-1906-4a59-a78a-18220fca1b22",
        "status": "test",
        "description": "Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity",
        "tags": [
            "attack.execution",
            "attack.t1569.002",
            "attack.s0029"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\NirCmd.exe', case=False) | OriginalFileName=='NirCmd.exe' | CommandLine.str.contains(r' execmd ', case=False) | CommandLine.str.contains(r'.exe script ', case=False) | CommandLine.str.contains(r'.exe shexec ', case=False) | CommandLine.str.contains(r' runinteractive ', case=False) | (CommandLine.str.contains(r' exec ', case=False) | CommandLine.str.contains(r' exec2 ', case=False)) & (CommandLine.str.contains(r' show ', case=False) | CommandLine.str.contains(r' hide ', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "MsiExec Web Install",
        "id": "f7b5f842-a6af-4da5-9e95-e32478f3cd2f",
        "status": "test",
        "description": "Detects suspicious msiexec process starts with web addresses as parameter",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.007",
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r' msiexec', case=False) & CommandLine.str.contains(r'://', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PktMon.EXE Execution",
        "id": "f956c7c1-0f60-4bc5-b7d7-b39ab3c08908",
        "status": "test",
        "description": "Detects execution of PktMon, a tool that captures network packets.",
        "tags": [
            "attack.credential-access",
            "attack.t1040"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\pktmon.exe', case=False) | OriginalFileName=='PktMon.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Hidden Directory Creation Via NTFS INDEX_ALLOCATION Stream - CLI",
        "id": "0900463c-b33b-49a8-be1d-552a3b553dae",
        "status": "test",
        "description": "Detects command line containing reference to the \"::$index_allocation\" stream, which can be used as a technique to prevent access to folders or files from tooling such as \"explorer.exe\" or \"powershell.exe\"\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'::$index_allocation', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "OpenWith.exe Executes Specified Binary",
        "id": "cec8e918-30f7-4e2d-9bfa-a59cc97ae60f",
        "status": "test",
        "description": "The OpenWith.exe executes other binary",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\OpenWith.exe', case=False) & CommandLine.str.contains(r'/c', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Important Scheduled Task",
        "id": "9ac94dc8-9042-493c-ba45-3b5e7c86b980",
        "status": "test",
        "description": "Detects when adversaries stop services or processes by disabling their respective scheduled tasks in order to conduct data destructive activities",
        "tags": [
            "attack.impact",
            "attack.t1489"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\schtasks.exe', case=False) & CommandLine.str.contains(r'/Change', case=False) & CommandLine.str.contains(r'/TN', case=False) & CommandLine.str.contains(r'/disable', case=False) & (CommandLine.str.contains(r'\\\\Windows\\\\BitLocker', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\ExploitGuard', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\ExploitGuard\\\\ExploitGuard MDM policy Refresh', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\SystemRestore\\\\SR', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\UpdateOrchestrator\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Windows Defender\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\WindowsBackup\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\WindowsUpdate\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Kavremover Dropped Binary LOLBIN Usage",
        "id": "d047726b-c71c-4048-a99b-2e2f50dc107d",
        "status": "test",
        "description": "Detects the execution of a signed binary dropped by Kaspersky Lab Products Remover (kavremover) which can be abused as a LOLBIN to execute arbitrary commands and binaries.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r' run run-cmd ', case=False) & ~ (ParentImage.str.contains(r'\\\\cleanapi.exe', case=False) | ParentImage.str.contains(r'\\\\kavremover.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Download From IP Via Curl.EXE",
        "id": "5cb299fc-5fb1-4d07-b989-0644c68b6043",
        "status": "test",
        "description": "Detects potentially suspicious file downloads directly from IP addresses using curl.exe",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\curl.exe', case=False) | OriginalFileName=='curl.exe') & CommandLine.str.contains(r'://[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}') & CommandLine.str.contains(r'http', case=False) & (CommandLine.str.contains(r' -O', case=False) | CommandLine.str.contains(r'--remote-name', case=False) | CommandLine.str.contains(r'--output', case=False)) & (CommandLine.str.contains(r'.bat', case=False) | CommandLine.str.contains(r'.bat\"', case=False) | CommandLine.str.contains(r'.dat', case=False) | CommandLine.str.contains(r'.dat\"', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.dll\"', case=False) | CommandLine.str.contains(r'.exe', case=False) | CommandLine.str.contains(r'.exe\"', case=False) | CommandLine.str.contains(r'.gif', case=False) | CommandLine.str.contains(r'.gif\"', case=False) | CommandLine.str.contains(r'.hta', case=False) | CommandLine.str.contains(r'.hta\"', case=False) | CommandLine.str.contains(r'.jpeg', case=False) | CommandLine.str.contains(r'.jpeg\"', case=False) | CommandLine.str.contains(r'.log', case=False) | CommandLine.str.contains(r'.log\"', case=False) | CommandLine.str.contains(r'.msi', case=False) | CommandLine.str.contains(r'.msi\"', case=False) | CommandLine.str.contains(r'.png', case=False) | CommandLine.str.contains(r'.png\"', case=False) | CommandLine.str.contains(r'.ps1', case=False) | CommandLine.str.contains(r'.ps1\"', case=False) | CommandLine.str.contains(r'.psm1', case=False) | CommandLine.str.contains(r'.psm1\"', case=False) | CommandLine.str.contains(r'.vbe', case=False) | CommandLine.str.contains(r'.vbe\"', case=False) | CommandLine.str.contains(r'.vbs', case=False) | CommandLine.str.contains(r'.vbs\"', case=False) | CommandLine.str.contains(r'.bat\\'', case=False) | CommandLine.str.contains(r'.dat\\'', case=False) | CommandLine.str.contains(r'.dll\\'', case=False) | CommandLine.str.contains(r'.exe\\'', case=False) | CommandLine.str.contains(r'.gif\\'', case=False) | CommandLine.str.contains(r'.hta\\'', case=False) | CommandLine.str.contains(r'.jpeg\\'', case=False) | CommandLine.str.contains(r'.log\\'', case=False) | CommandLine.str.contains(r'.msi\\'', case=False) | CommandLine.str.contains(r'.png\\'', case=False) | CommandLine.str.contains(r'.ps1\\'', case=False) | CommandLine.str.contains(r'.psm1\\'', case=False) | CommandLine.str.contains(r'.vbe\\'', case=False) | CommandLine.str.contains(r'.vbs\\'', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Kernel Debugger Execution",
        "id": "27ee9438-90dc-4bef-904b-d3ef927f5e7e",
        "status": "test",
        "description": "Detects execution of the Windows Kernel Debugger \"kd.exe\".",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\kd.exe', case=False) | OriginalFileName=='kd.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Processes Spawned by Java.EXE",
        "id": "0d34ed8b-1c12-4ff2-828c-16fc860b766d",
        "status": "test",
        "description": "Detects suspicious processes spawned from a Java host process which could indicate a sign of exploitation (e.g. log4j)",
        "tags": [
            "attack.initial-access",
            "attack.persistence",
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\java.exe', case=False) & (Image.str.contains(r'\\\\AppVLP.exe', case=False) | Image.str.contains(r'\\\\bitsadmin.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\curl.exe', case=False) | Image.str.contains(r'\\\\forfiles.exe', case=False) | Image.str.contains(r'\\\\hh.exe', case=False) | Image.str.contains(r'\\\\mftrace.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | Image.str.contains(r'\\\\query.exe', case=False) | Image.str.contains(r'\\\\reg.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\scrcons.exe', case=False) | Image.str.contains(r'\\\\scriptrunner.exe', case=False) | Image.str.contains(r'\\\\sh.exe', case=False) | Image.str.contains(r'\\\\systeminfo.exe', case=False) | Image.str.contains(r'\\\\whoami.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon  Assistive Technology Applications Execution Via AtBroker.EXE",
        "id": "f24bcaea-0cd1-11eb-adc1-0242ac120002",
        "status": "test",
        "description": "Detects the start of a non built-in assistive technology applications via \"Atbroker.EXE\".",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\AtBroker.exe', case=False) | OriginalFileName=='AtBroker.exe') & CommandLine.str.contains(r'start', case=False) & ~ (CommandLine.str.contains(r'animations', case=False) | CommandLine.str.contains(r'audiodescription', case=False) | CommandLine.str.contains(r'caretbrowsing', case=False) | CommandLine.str.contains(r'caretwidth', case=False) | CommandLine.str.contains(r'colorfiltering', case=False) | CommandLine.str.contains(r'cursorindicator', case=False) | CommandLine.str.contains(r'cursorscheme', case=False) | CommandLine.str.contains(r'filterkeys', case=False) | CommandLine.str.contains(r'focusborderheight', case=False) | CommandLine.str.contains(r'focusborderwidth', case=False) | CommandLine.str.contains(r'highcontrast', case=False) | CommandLine.str.contains(r'keyboardcues', case=False) | CommandLine.str.contains(r'keyboardpref', case=False) | CommandLine.str.contains(r'livecaptions', case=False) | CommandLine.str.contains(r'magnifierpane', case=False) | CommandLine.str.contains(r'messageduration', case=False) | CommandLine.str.contains(r'minimumhitradius', case=False) | CommandLine.str.contains(r'mousekeys', case=False) | CommandLine.str.contains(r'Narrator', case=False) | CommandLine.str.contains(r'osk', case=False) | CommandLine.str.contains(r'overlappedcontent', case=False) | CommandLine.str.contains(r'showsounds', case=False) | CommandLine.str.contains(r'soundsentry', case=False) | CommandLine.str.contains(r'speechreco', case=False) | CommandLine.str.contains(r'stickykeys', case=False) | CommandLine.str.contains(r'togglekeys', case=False) | CommandLine.str.contains(r'voiceaccess', case=False) | CommandLine.str.contains(r'windowarranging', case=False) | CommandLine.str.contains(r'windowtracking', case=False) | CommandLine.str.contains(r'windowtrackingtimeout', case=False) | CommandLine.str.contains(r'windowtrackingzorder', case=False)) & ~ CommandLine.str.contains(r'Oracle_JavaAccessBridge', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Local Groups Reconnaissance Via Wmic.EXE",
        "id": "164eda96-11b2-430b-85ff-6a265c15bf32",
        "status": "test",
        "description": "Detects the execution of \"wmic\" with the \"group\" flag.\nAdversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n",
        "tags": [
            "attack.discovery",
            "attack.t1069.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wmic.exe', case=False) | OriginalFileName=='wmic.exe') & CommandLine.str.contains(r' group', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SharpLDAPmonitor Execution",
        "id": "9f8fc146-1d1a-4dbf-b8fd-dfae15e08541",
        "status": "test",
        "description": "Detects execution of the SharpLDAPmonitor. Which can monitor the creation, deletion and changes to LDAP objects.",
        "tags": [
            "attack.discovery"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SharpLDAPmonitor.exe', case=False) | OriginalFileName=='SharpLDAPmonitor.exe' | CommandLine.str.contains(r'/user:', case=False) & CommandLine.str.contains(r'/pass:', case=False) & CommandLine.str.contains(r'/dcip:', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - AdvancedRun Execution",
        "id": "d2b749ee-4225-417e-b20e-a8d2193cbb84",
        "status": "test",
        "description": "Detects the execution of AdvancedRun utility",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1564.003",
            "attack.t1134.002",
            "attack.t1059.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='AdvancedRun.exe' | CommandLine.str.contains(r' /EXEFilename ', case=False) & CommandLine.str.contains(r' /Run', case=False) | CommandLine.str.contains(r' /WindowState 0', case=False) & CommandLine.str.contains(r' /RunAs ', case=False) & CommandLine.str.contains(r' /CommandLine ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Process Memory Dump Via Dotnet-Dump",
        "id": "53d8d3e1-ca33-4012-adf3-e05a4d652e34",
        "status": "test",
        "description": "Detects the execution of \"dotnet-dump\" with the \"collect\" flag. The execution could indicate potential process dumping of critical processes such as LSASS.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\dotnet-dump.exe', case=False) | OriginalFileName=='dotnet-dump.dll') & CommandLine.str.contains(r'collect', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Script Execution From Temp Folder",
        "id": "a6a39bdb-935c-4f0a-ab77-35f4bbf44d33",
        "status": "test",
        "description": "Detects a suspicious script executions from temporary folder",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False)) & (CommandLine.str.contains(r'\\\\Windows\\\\Temp', case=False) | CommandLine.str.contains(r'\\\\Temporary Internet', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Roaming\\\\Temp', case=False) | CommandLine.str.contains(r'%TEMP%', case=False) | CommandLine.str.contains(r'%TMP%', case=False) | CommandLine.str.contains(r'%LocalAppData%\\\\Temp', case=False)) & ~ (CommandLine.str.contains(r' >', case=False) | CommandLine.str.contains(r'Out-File', case=False) | CommandLine.str.contains(r'ConvertTo-Json', case=False) | CommandLine.str.contains(r'-WindowStyle hidden -Verb runAs', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\system32\\\\config\\\\systemprofile\\\\AppData\\\\Local\\\\Temp\\\\Amazon\\\\EC2-Windows\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SharpWSUS/WSUSpendu Execution",
        "id": "b0ce780f-10bd-496d-9067-066d23dc3aa5",
        "status": "experimental",
        "description": "Detects the execution of SharpWSUS or WSUSpendu, utilities that allow for lateral movement through WSUS.\nWindows Server Update Services (WSUS) is a critical component of Windows systems and is frequently configured in a way that allows an attacker to circumvent internal networking limitations.\n",
        "tags": [
            "attack.execution",
            "attack.lateral-movement",
            "attack.t1210"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' -Inject ', case=False) & (CommandLine.str.contains(r' -PayloadArgs ', case=False) | CommandLine.str.contains(r' -PayloadFile ', case=False)) | (CommandLine.str.contains(r' approve ', case=False) | CommandLine.str.contains(r' create ', case=False) | CommandLine.str.contains(r' check ', case=False) | CommandLine.str.contains(r' delete ', case=False)) & (CommandLine.str.contains(r' /payload:', case=False) | CommandLine.str.contains(r' /payload=', case=False) | CommandLine.str.contains(r' /updateid:', case=False) | CommandLine.str.contains(r' /updateid=', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Svchost Parent Process",
        "id": "01d2e2a1-5f09-44f7-9fc1-24faa7479b6d",
        "status": "test",
        "description": "Detects an uncommon svchost parent process",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\svchost.exe', case=False) & ~ (ParentImage.str.contains(r'\\\\Mrt.exe', case=False) | ParentImage.str.contains(r'\\\\MsMpEng.exe', case=False) | ParentImage.str.contains(r'\\\\ngen.exe', case=False) | ParentImage.str.contains(r'\\\\rpcnet.exe', case=False) | ParentImage.str.contains(r'\\\\services.exe', case=False) | ParentImage.str.contains(r'\\\\TiWorker.exe', case=False) | ParentImage is null | ParentImage==['-', ''])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION",
        "id": "e9f55347-2928-4c06-88e5-1a7f8169942e",
        "status": "test",
        "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'&&set', case=False) & CommandLine.str.contains(r'cmd', case=False) & CommandLine.str.contains(r'/c', case=False) & CommandLine.str.contains(r'-f', case=False) & (CommandLine.str.contains(r'{0}', case=False) | CommandLine.str.contains(r'{1}', case=False) | CommandLine.str.contains(r'{2}', case=False) | CommandLine.str.contains(r'{3}', case=False) | CommandLine.str.contains(r'{4}', case=False) | CommandLine.str.contains(r'{5}', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Chopper Webshell Process Pattern",
        "id": "fa3c117a-bc0d-416e-a31b-0c0e80653efb",
        "status": "test",
        "description": "Detects patterns found in process executions cause by China Chopper like tiny (ASPX) webshells",
        "tags": [
            "attack.persistence",
            "attack.t1505.003",
            "attack.t1018",
            "attack.t1033",
            "attack.t1087"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\w3wp.exe', case=False) | ParentImage.str.contains(r'\\\\w3wp.exe', case=False)) & (CommandLine.str.contains(r'&ipconfig&echo', case=False) | CommandLine.str.contains(r'&quser&echo', case=False) | CommandLine.str.contains(r'&whoami&echo', case=False) | CommandLine.str.contains(r'&c:&echo', case=False) | CommandLine.str.contains(r'&cd&echo', case=False) | CommandLine.str.contains(r'&dir&echo', case=False) | CommandLine.str.contains(r'&echo [E]', case=False) | CommandLine.str.contains(r'&echo [S]', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - ScreenConnect Server Web Shell Execution",
        "id": "b19146a3-25d4-41b4-928b-1e2a92641b1b",
        "status": "test",
        "description": "Detects potential web shell execution from the ScreenConnect server process.",
        "tags": [
            "attack.initial-access",
            "attack.t1190"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\ScreenConnect.Service.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\csc.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Capture Credentials with Rpcping.exe",
        "id": "93671f99-04eb-4ab4-a161-70d446a84003",
        "status": "test",
        "description": "Detects using Rpcping.exe to send a RPC test connection to the target server (-s) and force the NTLM hash to be sent in the process.",
        "tags": [
            "attack.credential-access",
            "attack.t1003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\rpcping.exe', case=False) & (CommandLine.str.contains(r'-s', case=False) | CommandLine.str.contains(r'/s', case=False) | CommandLine.str.contains(r'\u2013s', case=False) | CommandLine.str.contains(r'\u2014s', case=False) | CommandLine.str.contains(r'\u2015s', case=False)) & ((CommandLine.str.contains(r'-u', case=False) | CommandLine.str.contains(r'/u', case=False) | CommandLine.str.contains(r'\u2013u', case=False) | CommandLine.str.contains(r'\u2014u', case=False) | CommandLine.str.contains(r'\u2015u', case=False)) & (CommandLine.str.contains(r'NTLM', case=False)) | (CommandLine.str.contains(r'-t', case=False) | CommandLine.str.contains(r'/t', case=False) | CommandLine.str.contains(r'\u2013t', case=False) | CommandLine.str.contains(r'\u2014t', case=False) | CommandLine.str.contains(r'\u2015t', case=False)) & (CommandLine.str.contains(r'ncacn_np', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ShimCache Flush",
        "id": "b0524451-19af-4efa-a46f-562a977f792e",
        "status": "stable",
        "description": "Detects actions that clear the local ShimCache and remove forensic evidence",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'rundll32', case=False) & CommandLine.str.contains(r'apphelp.dll', case=False) & (CommandLine.str.contains(r'ShimFlushCache', case=False) | CommandLine.str.contains(r'#250', case=False)) | CommandLine.str.contains(r'rundll32', case=False) & CommandLine.str.contains(r'kernel32.dll', case=False) & (CommandLine.str.contains(r'BaseFlushAppcompatCache', case=False) | CommandLine.str.contains(r'#46', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Base64 Encoded Reflective Assembly Load",
        "id": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
        "status": "test",
        "description": "Detects base64 encoded .NET reflective loading of Assembly",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.defense-evasion",
            "attack.t1027",
            "attack.t1620"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA', case=False) | CommandLine.str.contains(r'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA', case=False) | CommandLine.str.contains(r'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA', case=False) | CommandLine.str.contains(r'AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC', case=False) | CommandLine.str.contains(r'BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp', case=False) | CommandLine.str.contains(r'AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK', case=False) | CommandLine.str.contains(r'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ', case=False) | CommandLine.str.contains(r'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA', case=False) | CommandLine.str.contains(r'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA', case=False) | CommandLine.str.contains(r'WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA', case=False) | CommandLine.str.contains(r'sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA', case=False) | CommandLine.str.contains(r'bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WmiPrvSE Spawned A Process",
        "id": "d21374ff-f574-44a7-9998-4a8c8bf33d7d",
        "status": "stable",
        "description": "Detects WmiPrvSE spawning a process",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\WmiPrvSe.exe', case=False) & ~ (LogonId==['0x3e7', 'null'] | User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False) | Image.str.contains(r'\\\\WmiPrvSE.exe', case=False) | Image.str.contains(r'\\\\WerFault.exe', case=False) | LogonId is null)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - PurpleSharp Execution",
        "id": "ff23ffbc-3378-435e-992f-0624dcf93ab4",
        "status": "test",
        "description": "Detects the execution of the PurpleSharp adversary simulation tool",
        "tags": [
            "attack.t1587",
            "attack.resource-development"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\purplesharp', case=False) | OriginalFileName=='PurpleSharp.exe' | CommandLine.str.contains(r'xyz123456.exe', case=False) | CommandLine.str.contains(r'PurpleSharp', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Persistence Via Sticky Key Backdoor",
        "id": "1070db9a-3e5d-412e-8e7b-7183b616e1b3",
        "status": "test",
        "description": "By replacing the sticky keys executable with the local admins CMD executable, an attacker is able to access a privileged windows console session without authenticating to the system.\nWhen the sticky keys are \"activated\" the privilleged shell is launched.\n",
        "tags": [
            "attack.t1546.008",
            "attack.privilege-escalation"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'copy ', case=False) & CommandLine.str.contains(r'/y ', case=False) & CommandLine.str.contains(r'C:\\\\windows\\\\system32\\\\cmd.exe C:\\\\windows\\\\system32\\\\sethc.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - DefenderCheck Execution",
        "id": "f0ca6c24-3225-47d5-b1f5-352bf07ecfa7",
        "status": "test",
        "description": "Detects the use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\DefenderCheck.exe', case=False) | Description=='DefenderCheck')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious RASdial Activity",
        "id": "6bba49bf-7f8c-47d6-a1bb-6b4dece4640e",
        "status": "test",
        "description": "Detects suspicious process related to rasdial.exe",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'rasdial.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious ASP.NET Compilation Via AspNetCompiler",
        "id": "9f50fe98-fe5c-4a2d-86c7-fad7f63ed622",
        "status": "test",
        "description": "Detects execution of \"aspnet_compiler.exe\" with potentially suspicious paths for compilation.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'C:\\\\Windows\\\\Microsoft.NET\\\\Framework\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\', case=False)) & Image.str.contains(r'\\\\aspnet_compiler.exe', case=False) & (CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Roaming\\\\', case=False) | CommandLine.str.contains(r':\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\System32\\\\Tasks\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Powercfg Execution To Change Lock Screen Timeout",
        "id": "f8d6a15e-4bc8-4c27-8e5d-2b10f0b73e5b",
        "status": "test",
        "description": "Detects suspicious execution of 'Powercfg.exe' to change lock screen timeout",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powercfg.exe', case=False) | OriginalFileName=='PowerCfg.exe') & (CommandLine.str.contains(r'/setacvalueindex ', case=False) & CommandLine.str.contains(r'SCHEME_CURRENT', case=False) & CommandLine.str.contains(r'SUB_VIDEO', case=False) & CommandLine.str.contains(r'VIDEOCONLOCK', case=False) | CommandLine.str.contains(r'-change ', case=False) & CommandLine.str.contains(r'-standby-timeout-', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Password Spraying Attempt Using Dsacls.EXE",
        "id": "bac9fb54-2da7-44e9-988f-11e9a5edbc0c",
        "status": "test",
        "description": "Detects possible password spraying attempts using Dsacls",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\dsacls.exe', case=False) | OriginalFileName=='DSACLS.EXE') & CommandLine.str.contains(r'/user:', case=False) & CommandLine.str.contains(r'/passwd:', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Driver/DLL Installation Via Odbcconf.EXE",
        "id": "3f5491e2-8db8-496b-9e95-1029fce852d4",
        "status": "test",
        "description": "Detects execution of \"odbcconf\" with \"INSTALLDRIVER\" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.008"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\odbcconf.exe', case=False) | OriginalFileName=='odbcconf.exe') & CommandLine.str.contains(r'INSTALLDRIVER ', case=False) & CommandLine.str.contains(r'.dll', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "7Zip Compressing Dump Files",
        "id": "ec570e53-4c76-45a9-804d-dc3f355ff7a7",
        "status": "test",
        "description": "Detects execution of 7z in order to compress a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration.",
        "tags": [
            "attack.collection",
            "attack.t1560.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description.str.contains(r'7-Zip', case=False) | Image.str.contains(r'\\\\7z.exe', case=False) | Image.str.contains(r'\\\\7zr.exe', case=False) | Image.str.contains(r'\\\\7za.exe', case=False) | OriginalFileName==['7z.exe', '7za.exe']) & (CommandLine.str.contains(r'.dmp', case=False) | CommandLine.str.contains(r'.dump', case=False) | CommandLine.str.contains(r'.hdmp', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Indirect Command Execution By Program Compatibility Wizard",
        "id": "b97cd4b1-30b8-4a9d-bd72-6293928d52bc",
        "status": "test",
        "description": "Detect indirect command execution via Program Compatibility Assistant pcwrun.exe",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.execution"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\pcwrun.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Msiexec Quiet Install From Remote Location",
        "id": "8150732a-0c9d-4a99-82b9-9efb9b90c40c",
        "status": "test",
        "description": "Detects usage of Msiexec.exe to install packages hosted remotely quietly",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.007"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\msiexec.exe', case=False) | OriginalFileName=='msiexec.exe') & (CommandLine.str.contains(r'-i', case=False) | CommandLine.str.contains(r'/i', case=False) | CommandLine.str.contains(r'\u2013i', case=False) | CommandLine.str.contains(r'\u2014i', case=False) | CommandLine.str.contains(r'\u2015i', case=False) | CommandLine.str.contains(r'-package', case=False) | CommandLine.str.contains(r'/package', case=False) | CommandLine.str.contains(r'\u2013package', case=False) | CommandLine.str.contains(r'\u2014package', case=False) | CommandLine.str.contains(r'\u2015package', case=False) | CommandLine.str.contains(r'-a', case=False) | CommandLine.str.contains(r'/a', case=False) | CommandLine.str.contains(r'\u2013a', case=False) | CommandLine.str.contains(r'\u2014a', case=False) | CommandLine.str.contains(r'\u2015a', case=False) | CommandLine.str.contains(r'-j', case=False) | CommandLine.str.contains(r'/j', case=False) | CommandLine.str.contains(r'\u2013j', case=False) | CommandLine.str.contains(r'\u2014j', case=False) | CommandLine.str.contains(r'\u2015j', case=False)) & (CommandLine.str.contains(r'-q', case=False) | CommandLine.str.contains(r'/q', case=False) | CommandLine.str.contains(r'\u2013q', case=False) | CommandLine.str.contains(r'\u2014q', case=False) | CommandLine.str.contains(r'\u2015q', case=False)) & (CommandLine.str.contains(r'http', case=False) | CommandLine.str.contains(r'\\\\\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - 3Proxy Execution",
        "id": "f38a82d2-fba3-4781-b549-525efbec8506",
        "status": "test",
        "description": "Detects the use of 3proxy, a tiny free proxy server",
        "tags": [
            "attack.command-and-control",
            "attack.t1572"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\3proxy.exe', case=False) | Description=='3proxy - tiny proxy server' | CommandLine.str.contains(r'.exe -i127.0.0.1 -p', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Arbitrary File Download Via Cmdl32.EXE",
        "id": "f37aba28-a9e6-4045-882c-d5004043b337",
        "status": "test",
        "description": "Detects execution of Cmdl32 with the \"/vpn\" and \"/lan\" flags.\nAttackers can abuse this utility in order to download arbitrary files via a configuration file.\nInspect the location and the content of the file passed as an argument in order to determine if it is suspicious.\n",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmdl32.exe', case=False) | OriginalFileName=='CMDL32.EXE') & CommandLine.str.contains(r'/vpn', case=False) & CommandLine.str.contains(r'/lan', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Portable Gpg.EXE Execution",
        "id": "77df53a5-1d78-4f32-bc5a-0e7465bd8f41",
        "status": "test",
        "description": "Detects the execution of \"gpg.exe\" from uncommon location. Often used by ransomware and loaders to decrypt/encrypt data.",
        "tags": [
            "attack.impact",
            "attack.t1486"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\gpg.exe', case=False) | Image.str.contains(r'\\\\gpg2.exe', case=False) | OriginalFileName=='gpg.exe' | Description=='GnuPG\u2019s OpenPGP tool') & ~ (Image.str.contains(r':\\\\Program Files (x86)\\\\GNU\\\\GnuPG\\\\bin\\\\', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\GnuPG VS-Desktop\\\\', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\GnuPG\\\\bin\\\\', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Gpg4win\\\\bin\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - PowerTool Execution",
        "id": "a34f79a3-8e5f-4cc3-b765-de00695452c2",
        "status": "test",
        "description": "Detects the execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\PowerTool.exe', case=False) | Image.str.contains(r'\\\\PowerTool64.exe', case=False) | OriginalFileName=='PowerTool.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Dllhost.EXE Execution Anomaly",
        "id": "e7888eb1-13b0-4616-bd99-4bc0c2b054b9",
        "status": "test",
        "description": "Detects a \"dllhost\" process spawning with no commandline arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1055"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\dllhost.exe', case=False) & (CommandLine==['dllhost.exe', 'dllhost']) & ~ CommandLine is null"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Findstr Launching .lnk File",
        "id": "33339be3-148b-4e16-af56-ad16ec6c7e7b",
        "status": "test",
        "description": "Detects usage of findstr to identify and execute a lnk file as seen within the HHS redirect attack",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.t1202",
            "attack.t1027.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\find.exe', case=False) | Image.str.contains(r'\\\\findstr.exe', case=False) | OriginalFileName==['FIND.EXE', 'FINDSTR.EXE']) & (CommandLine.str.contains(r'.lnk', case=False) | CommandLine.str.contains(r'.lnk\"', case=False) | CommandLine.str.contains(r'.lnk\\'', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "SyncAppvPublishingServer Execute Arbitrary PowerShell Code",
        "id": "fbd7c32d-db2a-4418-b92c-566eb8911133",
        "status": "test",
        "description": "Executes arbitrary PowerShell code using SyncAppvPublishingServer.exe.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SyncAppvPublishingServer.exe', case=False) | OriginalFileName=='syncappvpublishingserver.exe') & CommandLine.str.contains(r'\"n; ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Microsoft Office Child Process",
        "id": "438025f9-5856-4663-83f7-52f878a70a50",
        "status": "test",
        "description": "Detects a suspicious process spawning from one of the Microsoft Office suite products (Word, Excel, PowerPoint, Publisher, Visio, etc.)",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1047",
            "attack.t1204.002",
            "attack.t1218.010"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\EQNEDT32.EXE', case=False) | ParentImage.str.contains(r'\\\\EXCEL.EXE', case=False) | ParentImage.str.contains(r'\\\\MSACCESS.EXE', case=False) | ParentImage.str.contains(r'\\\\MSPUB.exe', case=False) | ParentImage.str.contains(r'\\\\ONENOTE.EXE', case=False) | ParentImage.str.contains(r'\\\\POWERPNT.exe', case=False) | ParentImage.str.contains(r'\\\\VISIO.exe', case=False) | ParentImage.str.contains(r'\\\\WINWORD.EXE', case=False) | ParentImage.str.contains(r'\\\\wordpad.exe', case=False) | ParentImage.str.contains(r'\\\\wordview.exe', case=False)) & (OriginalFileName==['bitsadmin.exe', 'CertOC.exe', 'CertUtil.exe', 'Cmd.Exe', 'CMSTP.EXE', 'cscript.exe', 'curl.exe', 'HH.exe', 'IEExec.exe', 'InstallUtil.exe', 'javaw.exe', 'Microsoft.Workflow.Compiler.exe', 'msdt.exe', 'MSHTA.EXE', 'msiexec.exe', 'Msxsl.exe', 'odbcconf.exe', 'pcalua.exe', 'PowerShell.EXE', 'RegAsm.exe', 'RegSvcs.exe', 'REGSVR32.exe', 'RUNDLL32.exe', 'schtasks.exe', 'ScriptRunner.exe', 'wmic.exe', 'WorkFolders.exe', 'wscript.exe'] | Image.str.contains(r'\\\\AppVLP.exe', case=False) | Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\bitsadmin.exe', case=False) | Image.str.contains(r'\\\\certoc.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cmstp.exe', case=False) | Image.str.contains(r'\\\\control.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\curl.exe', case=False) | Image.str.contains(r'\\\\forfiles.exe', case=False) | Image.str.contains(r'\\\\hh.exe', case=False) | Image.str.contains(r'\\\\ieexec.exe', case=False) | Image.str.contains(r'\\\\installutil.exe', case=False) | Image.str.contains(r'\\\\javaw.exe', case=False) | Image.str.contains(r'\\\\mftrace.exe', case=False) | Image.str.contains(r'\\\\Microsoft.Workflow.Compiler.exe', case=False) | Image.str.contains(r'\\\\msbuild.exe', case=False) | Image.str.contains(r'\\\\msdt.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\msidb.exe', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) | Image.str.contains(r'\\\\msxsl.exe', case=False) | Image.str.contains(r'\\\\odbcconf.exe', case=False) | Image.str.contains(r'\\\\pcalua.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regasm.exe', case=False) | Image.str.contains(r'\\\\regsvcs.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\scrcons.exe', case=False) | Image.str.contains(r'\\\\scriptrunner.exe', case=False) | Image.str.contains(r'\\\\sh.exe', case=False) | Image.str.contains(r'\\\\svchost.exe', case=False) | Image.str.contains(r'\\\\verclsid.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\workfolders.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\', case=False) | Image.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\ProgramData\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\Tasks\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\System32\\\\Tasks\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Download with Headless Browser",
        "id": "0e8cfe08-02c9-4815-a2f8-0d157b7ed33e",
        "status": "test",
        "description": "Detects execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\brave.exe', case=False) | Image.str.contains(r'\\\\chrome.exe', case=False) | Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False)) & CommandLine.str.contains(r'--headless', case=False) & CommandLine.str.contains(r'dump-dom', case=False) & CommandLine.str.contains(r'http', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Covenant PowerShell Launcher",
        "id": "c260b6db-48ba-4b4a-a76f-2f67644e99d2",
        "status": "test",
        "description": "Detects suspicious command lines used in Covenant luanchers",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1059.001",
            "attack.t1564.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'-Sta', case=False) & CommandLine.str.contains(r'-Nop', case=False) & CommandLine.str.contains(r'-Window', case=False) & CommandLine.str.contains(r'Hidden', case=False) & (CommandLine.str.contains(r'-Command', case=False) | CommandLine.str.contains(r'-EncodedCommand', case=False)) | CommandLine.str.contains(r'sv o (New-Object IO.MemorySteam);sv d ', case=False) | CommandLine.str.contains(r'mshta file.hta', case=False) | CommandLine.str.contains(r'GruntHTTP', case=False) | CommandLine.str.contains(r'-EncodedCommand cwB2ACAAbwAgA', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspect Svchost Activity",
        "id": "16c37b52-b141-42a5-a3ea-bbe098444397",
        "status": "test",
        "description": "It is extremely abnormal for svchost.exe to spawn without any CLI arguments and is normally observed when a malicious process spawns the process and injects code into the process memory space.",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'svchost.exe', case=False) & Image.str.contains(r'\\\\svchost.exe', case=False) & ~ (ParentImage.str.contains(r'\\\\rpcnet.exe', case=False) | ParentImage.str.contains(r'\\\\rpcnetp.exe', case=False) | CommandLine is null)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA- IOX Tunneling Tool Execution",
        "id": "d7654f02-e04b-4934-9838-65c46f187ebc",
        "status": "test",
        "description": "Detects the use of IOX - a tool for port forwarding and intranet proxy purposes",
        "tags": [
            "attack.command-and-control",
            "attack.t1090"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\iox.exe', case=False) | CommandLine.str.contains(r'.exe fwd -l ', case=False) | CommandLine.str.contains(r'.exe fwd -r ', case=False) | CommandLine.str.contains(r'.exe proxy -l ', case=False) | CommandLine.str.contains(r'.exe proxy -r ', case=False) | Hashes.str.contains(r'MD5=9DB2D314DD3F704A02051EF5EA210993', case=False) | Hashes.str.contains(r'SHA1=039130337E28A6623ECF9A0A3DA7D92C5964D8DD', case=False) | Hashes.str.contains(r'SHA256=C6CF82919B809967D9D90EA73772A8AA1C1EB3BC59252D977500F64F1A0D6731', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious High IntegrityLevel Conhost Legacy Option",
        "id": "3037d961-21e9-4732-b27a-637bcc7bf539",
        "status": "test",
        "description": "ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "informational",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (IntegrityLevel==['High', 'S-1-16-12288']) & CommandLine.str.contains(r'conhost.exe', case=False) & CommandLine.str.contains(r'0xffffffff', case=False) & CommandLine.str.contains(r'-ForceV1', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Audio Capture via PowerShell",
        "id": "932fb0d8-692b-4b0f-a26e-5643a50fe7d6",
        "status": "test",
        "description": "Detects audio capture via PowerShell Cmdlet.",
        "tags": [
            "attack.collection",
            "attack.t1123"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'WindowsAudioDevice-Powershell-Cmdlet', case=False) | CommandLine.str.contains(r'Toggle-AudioDevice', case=False) | CommandLine.str.contains(r'Get-AudioDevice ', case=False) | CommandLine.str.contains(r'Set-AudioDevice ', case=False) | CommandLine.str.contains(r'Write-AudioDevice ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Cloudflared Tunnel Connections Cleanup",
        "id": "7050bba1-1aed-454e-8f73-3f46f09ce56a",
        "status": "test",
        "description": "Detects execution of the \"cloudflared\" tool with the tunnel \"cleanup\" flag in order to cleanup tunnel connections.",
        "tags": [
            "attack.command-and-control",
            "attack.t1102",
            "attack.t1090",
            "attack.t1572"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r' tunnel ', case=False) & CommandLine.str.contains(r'cleanup ', case=False) & (CommandLine.str.contains(r'-config ', case=False) | CommandLine.str.contains(r'-connector-id ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Advanced Port Scanner Execution",
        "id": "54773c5f-f1cc-4703-9126-2f797d96a69d",
        "status": "test",
        "description": "Detects the use of Advanced Port Scanner.",
        "tags": [
            "attack.discovery",
            "attack.t1046",
            "attack.t1135"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\advanced_port_scanner', case=False) | OriginalFileName.str.contains(r'advanced_port_scanner', case=False) | Description.str.contains(r'Advanced Port Scanner', case=False) | CommandLine.str.contains(r'/portable', case=False) & CommandLine.str.contains(r'/lng', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Rebuild Performance Counter Values Via Lodctr.EXE",
        "id": "cc9d3712-6310-4320-b2df-7cb408274d53",
        "status": "test",
        "description": "Detects the execution of \"lodctr.exe\" to rebuild the performance counter registry values. This can be abused by attackers by providing a malicious config file to overwrite performance counter configuration to confuse and evade monitoring and security solutions.",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\lodctr.exe', case=False) & OriginalFileName=='LODCTR.EXE' & (CommandLine.str.contains(r' -r', case=False) | CommandLine.str.contains(r' /r', case=False) | CommandLine.str.contains(r' \u2013r', case=False) | CommandLine.str.contains(r' \u2014r', case=False) | CommandLine.str.contains(r' \u2015r', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use Clip",
        "id": "e1561947-b4e3-4a74-9bdd-83baed21bdb5",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'(?i)echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?)')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Active Directory Database Snapshot Via ADExplorer",
        "id": "9212f354-7775-4e28-9c9f-8f0a4544e664",
        "status": "test",
        "description": "Detects the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database.",
        "tags": [
            "attack.credential-access",
            "attack.t1552.001",
            "attack.t1003.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ADExplorer.exe', case=False) | OriginalFileName=='AdExp') & CommandLine.str.contains(r'snapshot', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - ScreenConnect Remote Command Execution",
        "id": "b1f73849-6329-4069-bc8f-78a604bb8b23",
        "status": "test",
        "description": "Detects the execution of a system command via the ScreenConnect RMM service.",
        "tags": [
            "attack.execution",
            "attack.t1059.003"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\ScreenConnect.ClientService.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & CommandLine.str.contains(r'\\\\TEMP\\\\ScreenConnect\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed AutoIt Execution",
        "id": "f4264e47-f522-4c38-a420-04525d5b880f",
        "status": "test",
        "description": "Detects the execution of a renamed AutoIt2.exe or AutoIt3.exe.\nAutoIt is a scripting language and automation tool for Windows systems. While primarily used for legitimate automation tasks, it can be misused in cyber attacks.\nAttackers can leverage AutoIt to create and distribute malware, including keyloggers, spyware, and botnets. A renamed AutoIt executable is particularly suspicious.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' /AutoIt3ExecuteScript', case=False) | CommandLine.str.contains(r' /ErrorStdOut', case=False) | Hashes.str.contains(r'IMPHASH=FDC554B3A8683918D731685855683DDF', case=False) | Hashes.str.contains(r'IMPHASH=CD30A61B60B3D60CECDB034C8C83C290', case=False) | Hashes.str.contains(r'IMPHASH=F8A00C72F2D667D2EDBB234D0C0AE000', case=False) | OriginalFileName==['AutoIt3.exe', 'AutoIt2.exe', 'AutoIt.exe']) & ~ (Image.str.contains(r'\\\\AutoIt.exe', case=False) | Image.str.contains(r'\\\\AutoIt2.exe', case=False) | Image.str.contains(r'\\\\AutoIt3_x64.exe', case=False) | Image.str.contains(r'\\\\AutoIt3.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Over Permissive Permissions Granted Using Dsacls.EXE",
        "id": "01c42d3c-242d-4655-85b2-34f1739632f7",
        "status": "test",
        "description": "Detects usage of Dsacls to grant over permissive permissions",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\dsacls.exe', case=False) | OriginalFileName=='DSACLS.EXE') & CommandLine.str.contains(r' /G ', case=False) & (CommandLine.str.contains(r'GR', case=False) | CommandLine.str.contains(r'GE', case=False) | CommandLine.str.contains(r'GW', case=False) | CommandLine.str.contains(r'GA', case=False) | CommandLine.str.contains(r'WP', case=False) | CommandLine.str.contains(r'WD', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use of Wfc.exe",
        "id": "49be8799-7b4d-4fda-ad23-cafbefdebbc5",
        "status": "test",
        "description": "The Workflow Command-line Compiler can be used for AWL bypass and is listed in Microsoft's recommended block rules.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wfc.exe', case=False) | OriginalFileName=='wfc.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Code Execute via Winrm.vbs",
        "id": "9df0dd3a-1a5c-47e3-a2bc-30ed177646a0",
        "status": "test",
        "description": "Detects an attempt to execute code or create service on remote host via winrm.vbs.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1216"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cscript.exe', case=False) | OriginalFileName=='cscript.exe') & CommandLine.str.contains(r'winrm', case=False) & CommandLine.str.contains(r'invoke Create wmicimv2/Win32_', case=False) & CommandLine.str.contains(r'-r:http', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Whoami Utility Execution",
        "id": "e28a5a99-da44-436d-b7a0-2afc20a5f413",
        "status": "test",
        "description": "Detects the execution of whoami, which is often used by attackers after exploitation / privilege escalation",
        "tags": [
            "attack.discovery",
            "attack.t1033",
            "car.2016-03-001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\whoami.exe', case=False) | OriginalFileName=='whoami.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - RURAT Execution From Unusual Location",
        "id": "e01fa958-6893-41d4-ae03-182477c5e77d",
        "status": "test",
        "description": "Detects execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files')",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rutserv.exe', case=False) | Image.str.contains(r'\\\\rfusclient.exe', case=False) | Product=='Remote Utilities') & ~ (Image.str.contains(r'C:\\\\Program Files\\\\Remote Utilities', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Remote Utilities', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Firewall Configuration Discovery Via Netsh.EXE",
        "id": "0e4164da-94bc-450d-a7be-a4b176179f1f",
        "status": "test",
        "description": "Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems",
        "tags": [
            "attack.discovery",
            "attack.t1016"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\netsh.exe', case=False) | OriginalFileName=='netsh.exe') & CommandLine.str.contains(r'netsh ', case=False) & CommandLine.str.contains(r'show ', case=False) & CommandLine.str.contains(r'firewall ', case=False) & (CommandLine.str.contains(r'config ', case=False) | CommandLine.str.contains(r'state ', case=False) | CommandLine.str.contains(r'rule ', case=False) | CommandLine.str.contains(r'name=all', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sysinternals PsSuspend Suspicious Execution",
        "id": "4beb6ae0-f85b-41e2-8f18-8668abc8af78",
        "status": "test",
        "description": "Detects suspicious execution of Sysinternals PsSuspend, where the utility is used to suspend critical processes such as AV or EDR to bypass defenses",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='pssuspend.exe' | Image.str.contains(r'\\\\pssuspend.exe', case=False) | Image.str.contains(r'\\\\pssuspend64.exe', case=False)) & CommandLine.str.contains(r'msmpeng.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Data Stealing Via Chromium Headless Debugging",
        "id": "3e8207c5-fcd2-4ea6-9418-15d45b4890e4",
        "status": "test",
        "description": "Detects chromium based browsers starting in headless and debugging mode and pointing to a user profile. This could be a sign of data stealing or remote control",
        "tags": [
            "attack.credential-access",
            "attack.t1185"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'--remote-debugging-', case=False) & CommandLine.str.contains(r'--user-data-dir', case=False) & CommandLine.str.contains(r'--headless', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "SQLite Firefox Profile Data DB Access",
        "id": "4833155a-4053-4c9c-a997-777fcea0baa7",
        "status": "test",
        "description": "Detect usage of the \"sqlite\" binary to query databases in Firefox and other Gecko-based browsers for potential data stealing.",
        "tags": [
            "attack.credential-access",
            "attack.t1539",
            "attack.collection",
            "attack.t1005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Product=='SQLite' | Image.str.contains(r'\\\\sqlite.exe', case=False) | Image.str.contains(r'\\\\sqlite3.exe', case=False)) & (CommandLine.str.contains(r'cookies.sqlite', case=False) | CommandLine.str.contains(r'places.sqlite', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Hiding Files with Attrib.exe",
        "id": "4281cb20-2994-4580-aa63-c8b86d019934",
        "status": "test",
        "description": "Detects usage of attrib.exe to hide files from users.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\attrib.exe', case=False) | OriginalFileName=='ATTRIB.EXE') & CommandLine.str.contains(r' +h ', case=False) & ~ CommandLine.str.contains(r'\\\\desktop.ini ', case=False) & ~ (ParentImage.str.contains(r'\\\\cmd.exe', case=False) & CommandLine=='+R +H +S +A \\\\\\*.cui' & ParentCommandLine=='C:\\\\WINDOWS\\\\system32\\\\\\*.bat')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Remote Desktop Connection Initiated Via Mstsc.EXE",
        "id": "954f0af7-62dd-418f-b3df-a84bc2c7a774",
        "status": "test",
        "description": "Detects the usage of \"mstsc.exe\" with the \"/v\" flag to initiate a connection to a remote server.\nAdversaries may use valid accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\mstsc.exe', case=False) | OriginalFileName=='mstsc.exe') & (CommandLine.str.contains(r' -v:', case=False) | CommandLine.str.contains(r' /v:', case=False) | CommandLine.str.contains(r' \u2013v:', case=False) | CommandLine.str.contains(r' \u2014v:', case=False) | CommandLine.str.contains(r' \u2015v:', case=False)) & ~ (ParentImage=='C:\\\\Windows\\\\System32\\\\lxss\\\\wslhost.exe' & CommandLine.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\WSL\\\\wslg.rdp', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious UltraVNC Execution",
        "id": "871b9555-69ca-4993-99d3-35a59f9f3599",
        "status": "test",
        "description": "Detects suspicious UltraVNC command line flag combination that indicate a auto reconnect upon execution, e.g. startup (as seen being used by Gamaredon threat group)",
        "tags": [
            "attack.lateral-movement",
            "attack.g0047",
            "attack.t1021.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'-autoreconnect ', case=False) & CommandLine.str.contains(r'-connect ', case=False) & CommandLine.str.contains(r'-id:', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Scan Loop Network",
        "id": "f8ad2e2c-40b6-4117-84d7-20b89896ab23",
        "status": "test",
        "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system",
        "tags": [
            "attack.execution",
            "attack.t1059",
            "attack.discovery",
            "attack.t1018"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'for ', case=False) | CommandLine.str.contains(r'foreach ', case=False)) & (CommandLine.str.contains(r'nslookup', case=False) | CommandLine.str.contains(r'ping', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Execute MSDT Via Answer File",
        "id": "9c8c7000-3065-44a8-a555-79bcba5d9955",
        "status": "test",
        "description": "Detects execution of \"msdt.exe\" using an answer file which is simulating the legitimate way of calling msdt via \"pcwrun.exe\" (For example from the compatibility tab)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\msdt.exe', case=False) & CommandLine.str.contains(r'\\\\WINDOWS\\\\diagnostics\\\\index\\\\PCWDiagnostic.xml', case=False) & (CommandLine.str.contains(r' -af ', case=False) | CommandLine.str.contains(r' /af ', case=False)) & ~ ParentImage.str.contains(r'\\\\pcwrun.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Impacket Tools Execution",
        "id": "4627c6ae-6899-46e2-aa0c-6ebcb1becd19",
        "status": "test",
        "description": "Detects the execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives)",
        "tags": [
            "attack.execution",
            "attack.t1557.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\goldenPac', case=False) | Image.str.contains(r'\\\\karmaSMB', case=False) | Image.str.contains(r'\\\\kintercept', case=False) | Image.str.contains(r'\\\\ntlmrelayx', case=False) | Image.str.contains(r'\\\\rpcdump', case=False) | Image.str.contains(r'\\\\samrdump', case=False) | Image.str.contains(r'\\\\secretsdump', case=False) | Image.str.contains(r'\\\\smbexec', case=False) | Image.str.contains(r'\\\\smbrelayx', case=False) | Image.str.contains(r'\\\\wmiexec', case=False) | Image.str.contains(r'\\\\wmipersist', case=False) | Image.str.contains(r'\\\\atexec_windows.exe', case=False) | Image.str.contains(r'\\\\dcomexec_windows.exe', case=False) | Image.str.contains(r'\\\\dpapi_windows.exe', case=False) | Image.str.contains(r'\\\\findDelegation_windows.exe', case=False) | Image.str.contains(r'\\\\GetADUsers_windows.exe', case=False) | Image.str.contains(r'\\\\GetNPUsers_windows.exe', case=False) | Image.str.contains(r'\\\\getPac_windows.exe', case=False) | Image.str.contains(r'\\\\getST_windows.exe', case=False) | Image.str.contains(r'\\\\getTGT_windows.exe', case=False) | Image.str.contains(r'\\\\GetUserSPNs_windows.exe', case=False) | Image.str.contains(r'\\\\ifmap_windows.exe', case=False) | Image.str.contains(r'\\\\mimikatz_windows.exe', case=False) | Image.str.contains(r'\\\\netview_windows.exe', case=False) | Image.str.contains(r'\\\\nmapAnswerMachine_windows.exe', case=False) | Image.str.contains(r'\\\\opdump_windows.exe', case=False) | Image.str.contains(r'\\\\psexec_windows.exe', case=False) | Image.str.contains(r'\\\\rdp_check_windows.exe', case=False) | Image.str.contains(r'\\\\sambaPipe_windows.exe', case=False) | Image.str.contains(r'\\\\smbclient_windows.exe', case=False) | Image.str.contains(r'\\\\smbserver_windows.exe', case=False) | Image.str.contains(r'\\\\sniff_windows.exe', case=False) | Image.str.contains(r'\\\\sniffer_windows.exe', case=False) | Image.str.contains(r'\\\\split_windows.exe', case=False) | Image.str.contains(r'\\\\ticketer_windows.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Plink Port Forwarding",
        "id": "48a61b29-389f-4032-b317-b30de6b95314",
        "status": "test",
        "description": "Detects suspicious Plink tunnel port forwarding to a local port",
        "tags": [
            "attack.command-and-control",
            "attack.t1572",
            "attack.lateral-movement",
            "attack.t1021.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Description=='Command-line SSH, Telnet, and Rlogin client' & CommandLine.str.contains(r' -R ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Arbitrary Command Execution Via FTP.EXE",
        "id": "06b401f4-107c-4ff9-947f-9ec1e7649f1e",
        "status": "test",
        "description": "Detects execution of \"ftp.exe\" script with the \"-s\" or \"/s\" flag and any child processes ran by \"ftp.exe\".",
        "tags": [
            "attack.execution",
            "attack.t1059",
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\ftp.exe', case=False) | (Image.str.contains(r'\\\\ftp.exe', case=False) | OriginalFileName=='ftp.exe') & (CommandLine.str.contains(r'-s:', case=False) | CommandLine.str.contains(r'/s:', case=False) | CommandLine.str.contains(r'\u2013s:', case=False) | CommandLine.str.contains(r'\u2014s:', case=False) | CommandLine.str.contains(r'\u2015s:', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Forfiles Command Execution",
        "id": "9aa5106d-bce3-4b13-86df-3a20f1d5cf0b",
        "status": "test",
        "description": "Detects the execution of \"forfiles\" with the \"/c\" flag.\nWhile this is an expected behavior of the tool, it can be abused in order to proxy execution through it with any binary.\nCan be used to bypass application whitelisting.\n",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\forfiles.exe', case=False) | OriginalFileName=='forfiles.exe') & (CommandLine.str.contains(r' -c ', case=False) | CommandLine.str.contains(r' /c ', case=False) | CommandLine.str.contains(r' \u2013c ', case=False) | CommandLine.str.contains(r' \u2014c ', case=False) | CommandLine.str.contains(r' \u2015c ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious JWT Token Search Via CLI",
        "id": "6d3a3952-6530-44a3-8554-cf17c116c615",
        "status": "test",
        "description": "Detects possible search for JWT tokens via CLI by looking for the string \"eyJ0eX\" or \"eyJhbG\".\nThis string is used as an anchor to look for the start of the JWT token used by microsoft office and similar apps.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1528"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'eyJ0eXAiOi', case=False) | CommandLine.str.contains(r'eyJhbGciOi', case=False) | CommandLine.str.contains(r' eyJ0eX', case=False) | CommandLine.str.contains(r' \"eyJ0eX\"', case=False) | CommandLine.str.contains(r' \\'eyJ0eX\\'', case=False) | CommandLine.str.contains(r' eyJhbG', case=False) | CommandLine.str.contains(r' \"eyJhbG\"', case=False) | CommandLine.str.contains(r' \\'eyJhbG\\'', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using Disk Cleanup",
        "id": "b697e69c-746f-4a86-9f59-7bfff8eab881",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\"\\\\system32\\\\cleanmgr.exe /autoclean /d C:', case=False) & ParentCommandLine=='C:\\\\Windows\\\\system32\\\\svchost.exe -k netsvcs -p -s Schedule' & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Desktop Background Change Using Reg.EXE",
        "id": "8cbc9475-8d05-4e27-9c32-df960716c701",
        "status": "test",
        "description": "Detects the execution of \"reg.exe\" to alter registry keys that would replace the user's desktop background.\nThis is a common technique used by malware to change the desktop background to a ransom note or other image.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.impact",
            "attack.t1112",
            "attack.t1491.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\reg.exe', case=False) | OriginalFileName=='reg.exe') & CommandLine.str.contains(r'add', case=False) & (CommandLine.str.contains(r'Control Panel\\\\Desktop', case=False) | CommandLine.str.contains(r'CurrentVersion\\\\Policies\\\\ActiveDesktop', case=False) | CommandLine.str.contains(r'CurrentVersion\\\\Policies\\\\System', case=False)) & (CommandLine.str.contains(r'/v NoChangingWallpaper', case=False) & CommandLine.str.contains(r'/d 1', case=False) | CommandLine.str.contains(r'/v Wallpaper', case=False) & CommandLine.str.contains(r'/t REG_SZ', case=False) | CommandLine.str.contains(r'/v WallpaperStyle', case=False) & CommandLine.str.contains(r'/d 2', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Rundll32 Spawned Via Explorer.EXE",
        "id": "1723e720-616d-4ddc-ab02-f7e3685a4713",
        "status": "test",
        "description": "Detects execution of \"rundll32.exe\" with a parent process of Explorer.exe. This has been observed by variants of Raspberry Robin, as first reported by Red Canary.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\explorer.exe', case=False) & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & ~ (CommandLine.str.contains(r' C:\\\\Windows\\\\System32\\\\', case=False) | CommandLine.str.contains(r' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "RestrictedAdminMode Registry Value Tampering - ProcCreation",
        "id": "28ac00d6-22d9-4a3c-927f-bbd770104573",
        "status": "test",
        "description": "Detects changes to the \"DisableRestrictedAdmin\" registry value in order to disable or enable RestrictedAdmin mode.\nRestrictedAdmin mode prevents the transmission of reusable credentials to the remote system to which you connect using Remote Desktop.\nThis prevents your credentials from being harvested during the initial connection process if the remote server has been compromise\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\System\\\\CurrentControlSet\\\\Control\\\\Lsa\\\\', case=False) & CommandLine.str.contains(r'DisableRestrictedAdmin', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Query Usage To Exfil Data",
        "id": "53ef0cef-fa24-4f25-a34a-6c72dfa2e6e2",
        "status": "test",
        "description": "Detects usage of \"query.exe\" a system binary to exfil information such as \"sessions\" and \"processes\" for later use",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r':\\\\Windows\\\\System32\\\\query.exe', case=False) & (CommandLine.str.contains(r'session >', case=False) | CommandLine.str.contains(r'process >', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Kernel Driver Via SC.EXE",
        "id": "431a1fdb-4799-4f3b-91c3-a683b003fc49",
        "status": "test",
        "description": "Detects creation of a new service (kernel driver) with the type \"kernel\"",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1543.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\sc.exe', case=False) & (CommandLine.str.contains(r'create', case=False) | CommandLine.str.contains(r'config', case=False)) & CommandLine.str.contains(r'binPath', case=False) & CommandLine.str.contains(r'type', case=False) & CommandLine.str.contains(r'kernel', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Download From File Sharing Domain Via Curl.EXE",
        "id": "56454143-524f-49fb-b1c6-3fb8b1ad41fb",
        "status": "experimental",
        "description": "Detects potentially suspicious file download from file sharing domains using curl.exe",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\curl.exe', case=False) | OriginalFileName=='curl.exe') & (CommandLine.str.contains(r'.githubusercontent.com', case=False) | CommandLine.str.contains(r'anonfiles.com', case=False) | CommandLine.str.contains(r'cdn.discordapp.com', case=False) | CommandLine.str.contains(r'ddns.net', case=False) | CommandLine.str.contains(r'dl.dropboxusercontent.com', case=False) | CommandLine.str.contains(r'ghostbin.co', case=False) | CommandLine.str.contains(r'glitch.me', case=False) | CommandLine.str.contains(r'gofile.io', case=False) | CommandLine.str.contains(r'hastebin.com', case=False) | CommandLine.str.contains(r'mediafire.com', case=False) | CommandLine.str.contains(r'mega.nz', case=False) | CommandLine.str.contains(r'onrender.com', case=False) | CommandLine.str.contains(r'pages.dev', case=False) | CommandLine.str.contains(r'paste.ee', case=False) | CommandLine.str.contains(r'pastebin.com', case=False) | CommandLine.str.contains(r'pastebin.pl', case=False) | CommandLine.str.contains(r'pastetext.net', case=False) | CommandLine.str.contains(r'pixeldrain.com', case=False) | CommandLine.str.contains(r'privatlab.com', case=False) | CommandLine.str.contains(r'privatlab.net', case=False) | CommandLine.str.contains(r'send.exploit.in', case=False) | CommandLine.str.contains(r'sendspace.com', case=False) | CommandLine.str.contains(r'storage.googleapis.com', case=False) | CommandLine.str.contains(r'storjshare.io', case=False) | CommandLine.str.contains(r'supabase.co', case=False) | CommandLine.str.contains(r'temp.sh', case=False) | CommandLine.str.contains(r'transfer.sh', case=False) | CommandLine.str.contains(r'trycloudflare.com', case=False) | CommandLine.str.contains(r'ufile.io', case=False) | CommandLine.str.contains(r'w3spaces.com', case=False) | CommandLine.str.contains(r'workers.dev', case=False)) & CommandLine.str.contains(r'http', case=False) & (CommandLine.str.contains(r' -O', case=False) | CommandLine.str.contains(r'--remote-name', case=False) | CommandLine.str.contains(r'--output', case=False)) & (CommandLine.str.contains(r'.ps1', case=False) | CommandLine.str.contains(r'.ps1\\'', case=False) | CommandLine.str.contains(r'.ps1\"', case=False) | CommandLine.str.contains(r'.dat', case=False) | CommandLine.str.contains(r'.dat\\'', case=False) | CommandLine.str.contains(r'.dat\"', case=False) | CommandLine.str.contains(r'.msi', case=False) | CommandLine.str.contains(r'.msi\\'', case=False) | CommandLine.str.contains(r'.msi\"', case=False) | CommandLine.str.contains(r'.bat', case=False) | CommandLine.str.contains(r'.bat\\'', case=False) | CommandLine.str.contains(r'.bat\"', case=False) | CommandLine.str.contains(r'.exe', case=False) | CommandLine.str.contains(r'.exe\\'', case=False) | CommandLine.str.contains(r'.exe\"', case=False) | CommandLine.str.contains(r'.vbs', case=False) | CommandLine.str.contains(r'.vbs\\'', case=False) | CommandLine.str.contains(r'.vbs\"', case=False) | CommandLine.str.contains(r'.vbe', case=False) | CommandLine.str.contains(r'.vbe\\'', case=False) | CommandLine.str.contains(r'.vbe\"', case=False) | CommandLine.str.contains(r'.hta', case=False) | CommandLine.str.contains(r'.hta\\'', case=False) | CommandLine.str.contains(r'.hta\"', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.dll\\'', case=False) | CommandLine.str.contains(r'.dll\"', case=False) | CommandLine.str.contains(r'.psm1', case=False) | CommandLine.str.contains(r'.psm1\\'', case=False) | CommandLine.str.contains(r'.psm1\"', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Script Change Permission Via Set-Acl",
        "id": "bdeb2cff-af74-4094-8426-724dc937f20a",
        "status": "test",
        "description": "Detects PowerShell execution to set the ACL of a file or a folder",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName==['PowerShell.EXE', 'pwsh.dll'] | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & CommandLine.str.contains(r'Set-Acl ', case=False) & CommandLine.str.contains(r'-AclObject ', case=False) & CommandLine.str.contains(r'-Path ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DSInternals Suspicious PowerShell Cmdlets",
        "id": "43d91656-a9b2-4541-b7e2-6a9bd3a13f4e",
        "status": "experimental",
        "description": "Detects execution and usage of the DSInternals PowerShell module. Which can be used to perform what might be considered as suspicious activity such as dumping DPAPI backup keys or manipulating NTDS.DIT files.\nThe DSInternals PowerShell Module exposes several internal features of Active Directory and Azure Active Directory. These include FIDO2 and NGC key auditing, offline ntds.dit file manipulation, password auditing, DC recovery from IFM backups and password hash calculation.\n",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'Add-ADDBSidHistory', case=False) | CommandLine.str.contains(r'Add-ADNgcKey', case=False) | CommandLine.str.contains(r'Add-ADReplNgcKey', case=False) | CommandLine.str.contains(r'ConvertFrom-ADManagedPasswordBlob', case=False) | CommandLine.str.contains(r'ConvertFrom-GPPrefPassword', case=False) | CommandLine.str.contains(r'ConvertFrom-ManagedPasswordBlob', case=False) | CommandLine.str.contains(r'ConvertFrom-UnattendXmlPassword', case=False) | CommandLine.str.contains(r'ConvertFrom-UnicodePassword', case=False) | CommandLine.str.contains(r'ConvertTo-AADHash', case=False) | CommandLine.str.contains(r'ConvertTo-GPPrefPassword', case=False) | CommandLine.str.contains(r'ConvertTo-KerberosKey', case=False) | CommandLine.str.contains(r'ConvertTo-LMHash', case=False) | CommandLine.str.contains(r'ConvertTo-MsoPasswordHash', case=False) | CommandLine.str.contains(r'ConvertTo-NTHash', case=False) | CommandLine.str.contains(r'ConvertTo-OrgIdHash', case=False) | CommandLine.str.contains(r'ConvertTo-UnicodePassword', case=False) | CommandLine.str.contains(r'Disable-ADDBAccount', case=False) | CommandLine.str.contains(r'Enable-ADDBAccount', case=False) | CommandLine.str.contains(r'Get-ADDBAccount', case=False) | CommandLine.str.contains(r'Get-ADDBBackupKey', case=False) | CommandLine.str.contains(r'Get-ADDBDomainController', case=False) | CommandLine.str.contains(r'Get-ADDBGroupManagedServiceAccount', case=False) | CommandLine.str.contains(r'Get-ADDBKdsRootKey', case=False) | CommandLine.str.contains(r'Get-ADDBSchemaAttribute', case=False) | CommandLine.str.contains(r'Get-ADDBServiceAccount', case=False) | CommandLine.str.contains(r'Get-ADDefaultPasswordPolicy', case=False) | CommandLine.str.contains(r'Get-ADKeyCredential', case=False) | CommandLine.str.contains(r'Get-ADPasswordPolicy', case=False) | CommandLine.str.contains(r'Get-ADReplAccount', case=False) | CommandLine.str.contains(r'Get-ADReplBackupKey', case=False) | CommandLine.str.contains(r'Get-ADReplicationAccount', case=False) | CommandLine.str.contains(r'Get-ADSIAccount', case=False) | CommandLine.str.contains(r'Get-AzureADUserEx', case=False) | CommandLine.str.contains(r'Get-BootKey', case=False) | CommandLine.str.contains(r'Get-KeyCredential', case=False) | CommandLine.str.contains(r'Get-LsaBackupKey', case=False) | CommandLine.str.contains(r'Get-LsaPolicy', case=False) | CommandLine.str.contains(r'Get-SamPasswordPolicy', case=False) | CommandLine.str.contains(r'Get-SysKey', case=False) | CommandLine.str.contains(r'Get-SystemKey', case=False) | CommandLine.str.contains(r'New-ADDBRestoreFromMediaScript', case=False) | CommandLine.str.contains(r'New-ADKeyCredential', case=False) | CommandLine.str.contains(r'New-ADNgcKey', case=False) | CommandLine.str.contains(r'New-NTHashSet', case=False) | CommandLine.str.contains(r'Remove-ADDBObject', case=False) | CommandLine.str.contains(r'Save-DPAPIBlob', case=False) | CommandLine.str.contains(r'Set-ADAccountPasswordHash', case=False) | CommandLine.str.contains(r'Set-ADDBAccountPassword', case=False) | CommandLine.str.contains(r'Set-ADDBBootKey', case=False) | CommandLine.str.contains(r'Set-ADDBDomainController', case=False) | CommandLine.str.contains(r'Set-ADDBPrimaryGroup', case=False) | CommandLine.str.contains(r'Set-ADDBSysKey', case=False) | CommandLine.str.contains(r'Set-AzureADUserEx', case=False) | CommandLine.str.contains(r'Set-LsaPolicy', case=False) | CommandLine.str.contains(r'Set-SamAccountPasswordHash', case=False) | CommandLine.str.contains(r'Set-WinUserPasswordHash', case=False) | CommandLine.str.contains(r'Test-ADDBPasswordQuality', case=False) | CommandLine.str.contains(r'Test-ADPasswordQuality', case=False) | CommandLine.str.contains(r'Test-ADReplPasswordQuality', case=False) | CommandLine.str.contains(r'Test-PasswordQuality', case=False) | CommandLine.str.contains(r'Unlock-ADDBAccount', case=False) | CommandLine.str.contains(r'Write-ADNgcKey', case=False) | CommandLine.str.contains(r'Write-ADReplNgcKey', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Decryption Using Gpg4win",
        "id": "037dcd71-33a8-4392-bb01-293c94663e5a",
        "status": "test",
        "description": "Detects usage of Gpg4win to decrypt files",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\gpg.exe', case=False) | Image.str.contains(r'\\\\gpg2.exe', case=False) | Description=='GnuPG\u2019s OpenPGP tool') & CommandLine.str.contains(r' -d ', case=False) & CommandLine.str.contains(r'passphrase', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Reconnaissance Activity Via GatherNetworkInfo.VBS",
        "id": "575dce0c-8139-4e30-9295-1ee75969f7fe",
        "status": "test",
        "description": "Detects execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine",
        "tags": [
            "attack.discovery",
            "attack.execution",
            "attack.t1615",
            "attack.t1059.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | OriginalFileName==['cscript.exe', 'wscript.exe']) & CommandLine.str.contains(r'gatherNetworkInfo.vbs', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Chisel Tunneling Tool Execution",
        "id": "8b0e12da-d3c3-49db-bb4f-256703f380e5",
        "status": "test",
        "description": "Detects usage of the Chisel tunneling tool via the commandline arguments",
        "tags": [
            "attack.command-and-control",
            "attack.t1090.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\chisel.exe', case=False) | (CommandLine.str.contains(r'exe client ', case=False) | CommandLine.str.contains(r'exe server ', case=False)) & (CommandLine.str.contains(r'-socks5', case=False) | CommandLine.str.contains(r'-reverse', case=False) | CommandLine.str.contains(r' r:', case=False) | CommandLine.str.contains(r':127.0.0.1:', case=False) | CommandLine.str.contains(r'-tls-skip-verify ', case=False) | CommandLine.str.contains(r':socks', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious CodePage Switch Via CHCP",
        "id": "c7942406-33dd-4377-a564-0f62db0593a3",
        "status": "test",
        "description": "Detects a code page switch in command line or batch scripts to a rare language",
        "tags": [
            "attack.t1036",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\chcp.com', case=False) & (CommandLine.str.contains(r' 936', case=False) | CommandLine.str.contains(r' 1258', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious AddinUtil.EXE CommandLine Execution",
        "id": "631b22a4-70f4-4e2f-9ea8-42f84d9df6d8",
        "status": "test",
        "description": "Detects execution of the Add-In deployment cache updating utility (AddInutil.exe) with suspicious Addinroot or Pipelineroot paths. An adversary may execute AddinUtil.exe with uncommon Addinroot/Pipelineroot paths that point to the adversaries Addins.Store payload.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\addinutil.exe', case=False) | OriginalFileName=='AddInUtil.exe') & ((CommandLine.str.contains(r'-AddInRoot:', case=False) | CommandLine.str.contains(r'-PipelineRoot:', case=False)) & (CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Desktop\\\\', case=False) | CommandLine.str.contains(r'\\\\Downloads\\\\', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False)) | (CommandLine.str.contains(r'-AddInRoot:.', case=False) | CommandLine.str.contains(r'-AddInRoot:\".\"', case=False) | CommandLine.str.contains(r'-PipelineRoot:.', case=False) | CommandLine.str.contains(r'-PipelineRoot:\".\"', case=False)) & (CurrentDirectory.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CurrentDirectory.str.contains(r'\\\\Desktop\\\\', case=False) | CurrentDirectory.str.contains(r'\\\\Downloads\\\\', case=False) | CurrentDirectory.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CurrentDirectory.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Inveigh Execution",
        "id": "b99a1518-1ad5-4f65-bc95-1ffff97a8fd0",
        "status": "test",
        "description": "Detects the use of Inveigh a cross-platform .NET IPv4/IPv6 machine-in-the-middle tool",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Inveigh.exe', case=False) | OriginalFileName==['\\\\Inveigh.exe', '\\\\Inveigh.dll'] | Description=='Inveigh' | CommandLine.str.contains(r' -SpooferIP', case=False) | CommandLine.str.contains(r' -ReplyToIPs ', case=False) | CommandLine.str.contains(r' -ReplyToDomains ', case=False) | CommandLine.str.contains(r' -ReplyToMACs ', case=False) | CommandLine.str.contains(r' -SnifferIP', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Copy From VolumeShadowCopy Via Cmd.EXE",
        "id": "c73124a7-3e89-44a3-bdc1-25fe4df754b1",
        "status": "test",
        "description": "Detects the execution of the builtin \"copy\" command that targets a shadow copy (sometimes used to copy registry hives that are in use)",
        "tags": [
            "attack.impact",
            "attack.t1490"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'copy ', case=False) & CommandLine.str.contains(r'\\\\\\\\?\\\\GLOBALROOT\\\\Device\\\\HarddiskVolumeShadowCopy', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Mshtml.DLL RunHTMLApplication Suspicious Usage",
        "id": "4782eb5a-a513-4523-a0ac-f3082b26ac5c",
        "status": "test",
        "description": "Detects execution of commands that leverage the \"mshtml.dll\" RunHTMLApplication export to run arbitrary code via different protocol handlers (vbscript, javascript, file, http...)\n",
        "tags": [
            "attack.defense-evasion",
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\..\\\\', case=False) & CommandLine.str.contains(r'mshtml', case=False) & (CommandLine.str.contains(r'#135', case=False) | CommandLine.str.contains(r'RunHTMLApplication', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Bypass UAC via CMSTP",
        "id": "e66779cc-383e-4224-a3a4-267eeb585c40",
        "status": "test",
        "description": "Detect commandline usage of Microsoft Connection Manager Profile Installer (cmstp.exe) to install specially formatted local .INF files",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1548.002",
            "attack.t1218.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmstp.exe', case=False) | OriginalFileName=='CMSTP.EXE') & (CommandLine.str.contains(r'/s', case=False) | CommandLine.str.contains(r'-s', case=False) | CommandLine.str.contains(r'/au', case=False) | CommandLine.str.contains(r'-au', case=False) | CommandLine.str.contains(r'/ni', case=False) | CommandLine.str.contains(r'-ni', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote XSL Execution Via Msxsl.EXE",
        "id": "75d0a94e-6252-448d-a7be-d953dff527bb",
        "status": "test",
        "description": "Detects the execution of the \"msxsl\" binary with an \"http\" keyword in the command line. This might indicate a potential remote execution of XSL files.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1220"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\msxsl.exe', case=False) & CommandLine.str.contains(r'http', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Shell Process Spawned by Java.EXE",
        "id": "dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0",
        "status": "test",
        "description": "Detects shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation)",
        "tags": [
            "attack.initial-access",
            "attack.persistence",
            "attack.privilege-escalation"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\java.exe', case=False) & (Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & ~ (ParentImage.str.contains(r'build', case=False) & CommandLine.str.contains(r'build', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed BOINC Client Execution",
        "id": "30d07da2-83ab-45d8-ae75-ec7c0edcaffc",
        "status": "experimental",
        "description": "Detects the execution of a renamed BOINC binary.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1553"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & OriginalFileName=='BOINC.exe' & ~ Image.str.contains(r'\\\\BOINC.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Invoke-Obfuscation Obfuscated IEX Invocation",
        "id": "4bf943c6-5146-4273-98dd-e958fd1e3abf",
        "status": "test",
        "description": "Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\\\\$PSHome\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$PSHome\\\\[') | CommandLine.str.contains(r'\\\\$ShellId\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$ShellId\\\\[') | CommandLine.str.contains(r'\\\\$env:Public\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$env:Public\\\\[') | CommandLine.str.contains(r'\\\\$env:ComSpec\\\\[(\\\\s*\\\\d{1,3}\\\\s*,){2}') | CommandLine.str.contains(r'\\\\*mdr\\\\*\\\\W\\\\s*\\\\)\\\\.Name') | CommandLine.str.contains(r'\\\\$VerbosePreference\\\\.ToString\\\\(') | CommandLine.str.contains(r'\\\\[String\\\\]\\\\s*\\\\$VerbosePreference'))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Reconnaissance Activity Via GatherNetworkInfo.VBS",
        "id": "07aa184a-870d-413d-893a-157f317f6f58",
        "status": "test",
        "description": "Detects execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine",
        "tags": [
            "attack.discovery",
            "attack.execution",
            "attack.t1615",
            "attack.t1059.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'gatherNetworkInfo.vbs', case=False) & ~ (Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Control Panel Items",
        "id": "0ba863e6-def5-4e50-9cea-4dd8c7dc46a4",
        "status": "test",
        "description": "Detects the malicious use of a control panel item",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1218.002",
            "attack.persistence",
            "attack.t1546"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\reg.exe', case=False) | OriginalFileName=='reg.exe') & CommandLine.str.contains(r'add', case=False) & CommandLine.str.contains(r'CurrentVersion\\\\Control Panel\\\\CPLs', case=False) | CommandLine.str.contains(r'.cpl', case=False) & ~ (CommandLine.str.contains(r'\\\\System32\\\\', case=False) | CommandLine.str.contains(r'%System%', case=False) | CommandLine.str.contains(r'|C:\\\\Windows\\\\system32|', case=False) | CommandLine.str.contains(r'regsvr32 ', case=False) & CommandLine.str.contains(r' /s ', case=False) & CommandLine.str.contains(r'igfxCPL.cpl', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - TruffleSnout Execution",
        "id": "69ca006d-b9a9-47f5-80ff-ecd4d25d481a",
        "status": "test",
        "description": "Detects the use of TruffleSnout.exe an iterative AD discovery toolkit for offensive operators, situational awareness and targeted low noise enumeration.",
        "tags": [
            "attack.discovery",
            "attack.t1482"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='TruffleSnout.exe' | Image.str.contains(r'\\\\TruffleSnout.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Elevated System Shell Spawned From Uncommon Parent Location",
        "id": "178e615d-e666-498b-9630-9ed363038101",
        "status": "test",
        "description": "Detects when a shell program such as the Windows command prompt or PowerShell is launched with system privileges from a uncommon parent location.",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll', 'Cmd.Exe']) & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False)) & LogonId=='0x3e7' & ~ (ParentImage.str.contains(r':\\\\Program Files (x86)\\\\', case=False) | ParentImage.str.contains(r':\\\\Program Files\\\\', case=False) | ParentImage.str.contains(r':\\\\ProgramData\\\\', case=False) | ParentImage.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | ParentImage.str.contains(r':\\\\Windows\\\\SysWOW64\\\\', case=False) | ParentImage.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | ParentImage.str.contains(r':\\\\Windows\\\\WinSxS\\\\', case=False) | ParentImage is null | ParentImage=='') & ~ (ParentImage.str.contains(r':\\\\ManageEngine\\\\ADManager Plus\\\\pgsql\\\\bin\\\\postgres.exe', case=False) & Image.str.contains(r'\\\\cmd.exe', case=False) | CommandLine.str.contains(r':\\\\WINDOWS\\\\system32\\\\cmd.exe /c \"', case=False) & CurrentDirectory.str.contains(r':\\\\WINDOWS\\\\Temp\\\\asgard2-agent\\\\', case=False) | ParentImage.str.contains(r':\\\\IBM\\\\SpectrumProtect\\\\webserver\\\\scripts\\\\', case=False) & CommandLine.str.contains(r':\\\\IBM\\\\SpectrumProtect\\\\webserver\\\\scripts\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Binary Proxy Execution Via Cdb.EXE",
        "id": "b5c7395f-e501-4a08-94d4-57fe7a9da9d2",
        "status": "test",
        "description": "Detects usage of \"cdb.exe\" to launch arbitrary processes or commands from a debugger script file",
        "tags": [
            "attack.execution",
            "attack.t1106",
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1127"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cdb.exe', case=False) | OriginalFileName=='CDB.Exe') & (CommandLine.str.contains(r' -c ', case=False) | CommandLine.str.contains(r' -cf ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Compressed File Extraction Via Tar.EXE",
        "id": "bf361876-6620-407a-812f-bfe11e51e924",
        "status": "test",
        "description": "Detects execution of \"tar.exe\" in order to extract compressed file.\nAdversaries may abuse various utilities in order to decompress data to avoid detection.\n",
        "tags": [
            "attack.collection",
            "attack.exfiltration",
            "attack.t1560",
            "attack.t1560.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\tar.exe', case=False) | OriginalFileName=='bsdtar') & CommandLine.str.contains(r'-x', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DLL Sideloading by VMware Xfer Utility",
        "id": "ebea773c-a8f1-42ad-a856-00cb221966e8",
        "status": "test",
        "description": "Detects execution of VMware Xfer utility (VMwareXferlogs.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\VMwareXferlogs.exe', case=False) & ~ Image.str.contains(r'C:\\\\Program Files\\\\VMware\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CodePage Modification Via MODE.COM To Russian Language",
        "id": "12fbff88-16b5-4b42-9754-cd001a789fb3",
        "status": "test",
        "description": "Detects a CodePage modification using the \"mode.com\" utility to Russian language.\nThis behavior has been used by threat actors behind Dharma ransomware.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\mode.com', case=False) | OriginalFileName=='MODE.COM') & CommandLine.str.contains(r' con ', case=False) & CommandLine.str.contains(r' cp ', case=False) & CommandLine.str.contains(r' select=', case=False) & (CommandLine.str.contains(r'=1251', case=False) | CommandLine.str.contains(r'=866', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious HWP Sub Processes",
        "id": "023394c4-29d5-46ab-92b8-6a534c6f447b",
        "status": "test",
        "description": "Detects suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation",
        "tags": [
            "attack.initial-access",
            "attack.t1566.001",
            "attack.execution",
            "attack.t1203",
            "attack.t1059.003",
            "attack.g0032"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\Hwp.exe', case=False) & Image.str.contains(r'\\\\gbb.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Malicious Base64 Encoded PowerShell Keywords in Command Lines",
        "id": "f26c6093-6f14-4b12-800f-0fcb46f5ffd0",
        "status": "test",
        "description": "Detects base64 encoded strings used in hidden malicious PowerShell command lines",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & CommandLine.str.contains(r' hidden ', case=False) & (CommandLine.str.contains(r'AGkAdABzAGEAZABtAGkAbgAgAC8AdAByAGEAbgBzAGYAZQByA', case=False) | CommandLine.str.contains(r'aXRzYWRtaW4gL3RyYW5zZmVy', case=False) | CommandLine.str.contains(r'IAaQB0AHMAYQBkAG0AaQBuACAALwB0AHIAYQBuAHMAZgBlAHIA', case=False) | CommandLine.str.contains(r'JpdHNhZG1pbiAvdHJhbnNmZX', case=False) | CommandLine.str.contains(r'YgBpAHQAcwBhAGQAbQBpAG4AIAAvAHQAcgBhAG4AcwBmAGUAcg', case=False) | CommandLine.str.contains(r'Yml0c2FkbWluIC90cmFuc2Zlc', case=False) | CommandLine.str.contains(r'AGMAaAB1AG4AawBfAHMAaQB6AGUA', case=False) | CommandLine.str.contains(r'JABjAGgAdQBuAGsAXwBzAGkAegBlA', case=False) | CommandLine.str.contains(r'JGNodW5rX3Npem', case=False) | CommandLine.str.contains(r'QAYwBoAHUAbgBrAF8AcwBpAHoAZQ', case=False) | CommandLine.str.contains(r'RjaHVua19zaXpl', case=False) | CommandLine.str.contains(r'Y2h1bmtfc2l6Z', case=False) | CommandLine.str.contains(r'AE8ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4A', case=False) | CommandLine.str.contains(r'kATwAuAEMAbwBtAHAAcgBlAHMAcwBpAG8Abg', case=False) | CommandLine.str.contains(r'lPLkNvbXByZXNzaW9u', case=False) | CommandLine.str.contains(r'SQBPAC4AQwBvAG0AcAByAGUAcwBzAGkAbwBuA', case=False) | CommandLine.str.contains(r'SU8uQ29tcHJlc3Npb2', case=False) | CommandLine.str.contains(r'Ty5Db21wcmVzc2lvb', case=False) | CommandLine.str.contains(r'AE8ALgBNAGUAbQBvAHIAeQBTAHQAcgBlAGEAbQ', case=False) | CommandLine.str.contains(r'kATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtA', case=False) | CommandLine.str.contains(r'lPLk1lbW9yeVN0cmVhb', case=False) | CommandLine.str.contains(r'SQBPAC4ATQBlAG0AbwByAHkAUwB0AHIAZQBhAG0A', case=False) | CommandLine.str.contains(r'SU8uTWVtb3J5U3RyZWFt', case=False) | CommandLine.str.contains(r'Ty5NZW1vcnlTdHJlYW', case=False) | CommandLine.str.contains(r'4ARwBlAHQAQwBoAHUAbgBrA', case=False) | CommandLine.str.contains(r'5HZXRDaHVua', case=False) | CommandLine.str.contains(r'AEcAZQB0AEMAaAB1AG4Aaw', case=False) | CommandLine.str.contains(r'LgBHAGUAdABDAGgAdQBuAGsA', case=False) | CommandLine.str.contains(r'LkdldENodW5r', case=False) | CommandLine.str.contains(r'R2V0Q2h1bm', case=False) | CommandLine.str.contains(r'AEgAUgBFAEEARABfAEkATgBGAE8ANgA0A', case=False) | CommandLine.str.contains(r'QASABSAEUAQQBEAF8ASQBOAEYATwA2ADQA', case=False) | CommandLine.str.contains(r'RIUkVBRF9JTkZPNj', case=False) | CommandLine.str.contains(r'SFJFQURfSU5GTzY0', case=False) | CommandLine.str.contains(r'VABIAFIARQBBAEQAXwBJAE4ARgBPADYANA', case=False) | CommandLine.str.contains(r'VEhSRUFEX0lORk82N', case=False) | CommandLine.str.contains(r'AHIAZQBhAHQAZQBSAGUAbQBvAHQAZQBUAGgAcgBlAGEAZA', case=False) | CommandLine.str.contains(r'cmVhdGVSZW1vdGVUaHJlYW', case=False) | CommandLine.str.contains(r'MAcgBlAGEAdABlAFIAZQBtAG8AdABlAFQAaAByAGUAYQBkA', case=False) | CommandLine.str.contains(r'NyZWF0ZVJlbW90ZVRocmVhZ', case=False) | CommandLine.str.contains(r'Q3JlYXRlUmVtb3RlVGhyZWFk', case=False) | CommandLine.str.contains(r'QwByAGUAYQB0AGUAUgBlAG0AbwB0AGUAVABoAHIAZQBhAGQA', case=False) | CommandLine.str.contains(r'0AZQBtAG0AbwB2AGUA', case=False) | CommandLine.str.contains(r'1lbW1vdm', case=False) | CommandLine.str.contains(r'AGUAbQBtAG8AdgBlA', case=False) | CommandLine.str.contains(r'bQBlAG0AbQBvAHYAZQ', case=False) | CommandLine.str.contains(r'bWVtbW92Z', case=False) | CommandLine.str.contains(r'ZW1tb3Zl', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Credential Dumping Attempt Using New NetworkProvider - CLI",
        "id": "baef1ec6-2ca9-47a3-97cc-4cf2bda10b77",
        "status": "test",
        "description": "Detects when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it",
        "tags": [
            "attack.credential-access",
            "attack.t1003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\System\\\\CurrentControlSet\\\\Services\\\\', case=False) & CommandLine.str.contains(r'\\\\NetworkProvider', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Interactive AT Job",
        "id": "60fc936d-2eb0-4543-8a13-911c750a1dfc",
        "status": "test",
        "description": "Detects an interactive AT job, which may be used as a form of privilege escalation.",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1053.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\at.exe', case=False) & CommandLine.str.contains(r'interactive', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Root Certificate Installed Via CertMgr.EXE",
        "id": "ff992eac-6449-4c60-8c1d-91c9722a1d48",
        "status": "test",
        "description": "Detects execution of \"certmgr\" with the \"add\" flag in order to install a new certificate on the system.\nAdversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1553.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\CertMgr.exe', case=False) | OriginalFileName=='CERTMGT.EXE') & CommandLine.str.contains(r'/add', case=False) & CommandLine.str.contains(r'root', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Schtasks From Suspicious Folders",
        "id": "8a8379b8-780b-4dbf-b1e9-31c8d112fefb",
        "status": "test",
        "description": "Detects scheduled task creations that have suspicious action command and folder combinations",
        "tags": [
            "attack.execution",
            "attack.t1053.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\schtasks.exe', case=False) | OriginalFileName=='schtasks.exe') & CommandLine.str.contains(r' /create ', case=False) & (CommandLine.str.contains(r'powershell', case=False) | CommandLine.str.contains(r'pwsh', case=False) | CommandLine.str.contains(r'cmd /c ', case=False) | CommandLine.str.contains(r'cmd /k ', case=False) | CommandLine.str.contains(r'cmd /r ', case=False) | CommandLine.str.contains(r'cmd.exe /c ', case=False) | CommandLine.str.contains(r'cmd.exe /k ', case=False) | CommandLine.str.contains(r'cmd.exe /r ', case=False)) & (CommandLine.str.contains(r'C:\\\\ProgramData\\\\', case=False) | CommandLine.str.contains(r'%ProgramData%', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - PCHunter Execution",
        "id": "fca949cc-79ca-446e-8064-01aa7e52ece5",
        "status": "test",
        "description": "Detects suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options and other low level stuff",
        "tags": [
            "attack.execution",
            "attack.discovery",
            "attack.t1082",
            "attack.t1057",
            "attack.t1012",
            "attack.t1083",
            "attack.t1007"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\PCHunter64.exe', case=False) | Image.str.contains(r'\\\\PCHunter32.exe', case=False) | OriginalFileName=='PCHunter.exe' | Description=='Epoolsoft Windows Information View Tools' | Hashes.str.contains(r'SHA1=5F1CBC3D99558307BC1250D084FA968521482025', case=False) | Hashes.str.contains(r'MD5=987B65CD9B9F4E9A1AFD8F8B48CF64A7', case=False) | Hashes.str.contains(r'SHA256=2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32', case=False) | Hashes.str.contains(r'IMPHASH=444D210CEA1FF8112F256A4997EED7FF', case=False) | Hashes.str.contains(r'SHA1=3FB89787CB97D902780DA080545584D97FB1C2EB', case=False) | Hashes.str.contains(r'MD5=228DD0C2E6287547E26FFBD973A40F14', case=False) | Hashes.str.contains(r'SHA256=55F041BF4E78E9BFA6D4EE68BE40E496CE3A1353E1CA4306598589E19802522C', case=False) | Hashes.str.contains(r'IMPHASH=0479F44DF47CFA2EF1CCC4416A538663', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - LaZagne Execution",
        "id": "c2b86e67-b880-4eec-b045-50bc98ef4844",
        "status": "experimental",
        "description": "Detects the execution of the LaZagne. A utility used to retrieve multiple types of passwords stored on a local computer.\nLaZagne has been leveraged multiple times by threat actors in order to dump credentials.\n",
        "tags": [
            "attack.credential-access"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\lazagne.exe', case=False) | (Image.str.contains(r':\\\\PerfLogs\\\\', case=False) | Image.str.contains(r':\\\\ProgramData\\\\', case=False) | Image.str.contains(r':\\\\Temp\\\\', case=False) | Image.str.contains(r':\\\\Tmp\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\', case=False) | Image.str.contains(r'\\\\Downloads\\\\', case=False) | Image.str.contains(r'\\\\Users\\\\Public\\\\', case=False)) & (CommandLine.str.contains(r'.exe all', case=False) | CommandLine.str.contains(r'.exe browsers', case=False) | CommandLine.str.contains(r'.exe chats', case=False) | CommandLine.str.contains(r'.exe databases', case=False) | CommandLine.str.contains(r'.exe games', case=False) | CommandLine.str.contains(r'.exe git', case=False) | CommandLine.str.contains(r'.exe mails', case=False) | CommandLine.str.contains(r'.exe maven', case=False) | CommandLine.str.contains(r'.exe memory', case=False) | CommandLine.str.contains(r'.exe multimedia', case=False) | CommandLine.str.contains(r'.exe sysadmin', case=False) | CommandLine.str.contains(r'.exe unused', case=False) | CommandLine.str.contains(r'.exe wifi', case=False) | CommandLine.str.contains(r'.exe windows', case=False)) | (CommandLine.str.contains(r'all ', case=False) | CommandLine.str.contains(r'browsers ', case=False) | CommandLine.str.contains(r'chats ', case=False) | CommandLine.str.contains(r'databases ', case=False) | CommandLine.str.contains(r'games ', case=False) | CommandLine.str.contains(r'git ', case=False) | CommandLine.str.contains(r'mails ', case=False) | CommandLine.str.contains(r'maven ', case=False) | CommandLine.str.contains(r'memory ', case=False) | CommandLine.str.contains(r'multimedia ', case=False) | CommandLine.str.contains(r'php ', case=False) | CommandLine.str.contains(r'svn ', case=False) | CommandLine.str.contains(r'sysadmin ', case=False) | CommandLine.str.contains(r'unused ', case=False) | CommandLine.str.contains(r'wifi ', case=False) | CommandLine.str.contains(r'windows ', case=False)) & (CommandLine.str.contains(r'-oA', case=False) | CommandLine.str.contains(r'-oJ', case=False) | CommandLine.str.contains(r'-oN', case=False) | CommandLine.str.contains(r'-output', case=False) | CommandLine.str.contains(r'-password', case=False) | CommandLine.str.contains(r'-1Password', case=False) | CommandLine.str.contains(r'-apachedirectorystudio', case=False) | CommandLine.str.contains(r'-autologon', case=False) | CommandLine.str.contains(r'-ChromiumBased', case=False) | CommandLine.str.contains(r'-composer', case=False) | CommandLine.str.contains(r'-coreftp', case=False) | CommandLine.str.contains(r'-credfiles', case=False) | CommandLine.str.contains(r'-credman', case=False) | CommandLine.str.contains(r'-cyberduck', case=False) | CommandLine.str.contains(r'-dbvis', case=False) | CommandLine.str.contains(r'-EyeCon', case=False) | CommandLine.str.contains(r'-filezilla', case=False) | CommandLine.str.contains(r'-filezillaserver', case=False) | CommandLine.str.contains(r'-ftpnavigator', case=False) | CommandLine.str.contains(r'-galconfusion', case=False) | CommandLine.str.contains(r'-gitforwindows', case=False) | CommandLine.str.contains(r'-hashdump', case=False) | CommandLine.str.contains(r'-iisapppool', case=False) | CommandLine.str.contains(r'-IISCentralCertP', case=False) | CommandLine.str.contains(r'-kalypsomedia', case=False) | CommandLine.str.contains(r'-keepass', case=False) | CommandLine.str.contains(r'-keepassconfig', case=False) | CommandLine.str.contains(r'-lsa_secrets', case=False) | CommandLine.str.contains(r'-mavenrepositories', case=False) | CommandLine.str.contains(r'-memory_dump', case=False) | CommandLine.str.contains(r'-Mozilla', case=False) | CommandLine.str.contains(r'-mRemoteNG', case=False) | CommandLine.str.contains(r'-mscache', case=False) | CommandLine.str.contains(r'-opensshforwindows', case=False) | CommandLine.str.contains(r'-openvpn', case=False) | CommandLine.str.contains(r'-outlook', case=False) | CommandLine.str.contains(r'-pidgin', case=False) | CommandLine.str.contains(r'-postgresql', case=False) | CommandLine.str.contains(r'-psi-im', case=False) | CommandLine.str.contains(r'-puttycm', case=False) | CommandLine.str.contains(r'-pypykatz', case=False) | CommandLine.str.contains(r'-Rclone', case=False) | CommandLine.str.contains(r'-rdpmanager', case=False) | CommandLine.str.contains(r'-robomongo', case=False) | CommandLine.str.contains(r'-roguestale', case=False) | CommandLine.str.contains(r'-skype', case=False) | CommandLine.str.contains(r'-SQLDeveloper', case=False) | CommandLine.str.contains(r'-squirrel', case=False) | CommandLine.str.contains(r'-tortoise', case=False) | CommandLine.str.contains(r'-turba', case=False) | CommandLine.str.contains(r'-UCBrowser', case=False) | CommandLine.str.contains(r'-unattended', case=False) | CommandLine.str.contains(r'-vault', case=False) | CommandLine.str.contains(r'-vaultfiles', case=False) | CommandLine.str.contains(r'-vnc', case=False) | CommandLine.str.contains(r'-windows', case=False) | CommandLine.str.contains(r'-winscp', case=False) | CommandLine.str.contains(r'-wsl', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious AgentExecutor PowerShell Execution",
        "id": "c0b40568-b1e9-4b03-8d6c-b096da6da9ab",
        "status": "test",
        "description": "Detects execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\AgentExecutor.exe', case=False) | OriginalFileName=='AgentExecutor.exe') & (CommandLine.str.contains(r' -powershell', case=False) | CommandLine.str.contains(r' -remediationScript', case=False)) & ~ (CommandLine.str.contains(r'C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\', case=False) | CommandLine.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\', case=False) | ParentImage.str.contains(r'\\\\Microsoft.Management.Services.IntuneWindowsAgent.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential LethalHTA Technique Execution",
        "id": "ed5d72a6-f8f4-479d-ba79-02f6a80d7471",
        "status": "test",
        "description": "Detects potential LethalHTA technique where the \"mshta.exe\" is spawned by an \"svchost.exe\" process",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\svchost.exe', case=False) & Image.str.contains(r'\\\\mshta.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Delete Important Scheduled Task",
        "id": "dbc1f800-0fe0-4bc0-9c66-292c2abe3f78",
        "status": "test",
        "description": "Detects when adversaries stop services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities",
        "tags": [
            "attack.impact",
            "attack.t1489"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\schtasks.exe', case=False) & CommandLine.str.contains(r'/delete', case=False) & CommandLine.str.contains(r'/tn', case=False) & (CommandLine.str.contains(r'\\\\Windows\\\\BitLocker', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\ExploitGuard', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\SystemRestore\\\\SR', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\UpdateOrchestrator\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Windows Defender\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\WindowsBackup\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\WindowsUpdate\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Cscript/Wscript Uncommon Script Extension Execution",
        "id": "99b7460d-c9f1-40d7-a316-1f36f61d52ee",
        "status": "test",
        "description": "Detects Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension",
        "tags": [
            "attack.execution",
            "attack.t1059.005",
            "attack.t1059.007"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName==['wscript.exe', 'cscript.exe'] | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False)) & (CommandLine.str.contains(r'.csv', case=False) | CommandLine.str.contains(r'.dat', case=False) | CommandLine.str.contains(r'.doc', case=False) | CommandLine.str.contains(r'.gif', case=False) | CommandLine.str.contains(r'.jpeg', case=False) | CommandLine.str.contains(r'.jpg', case=False) | CommandLine.str.contains(r'.png', case=False) | CommandLine.str.contains(r'.ppt', case=False) | CommandLine.str.contains(r'.txt', case=False) | CommandLine.str.contains(r'.xls', case=False) | CommandLine.str.contains(r'.xml', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious PowerShell IEX Execution Patterns",
        "id": "09576804-7a05-458e-a817-eb718ca91f54",
        "status": "test",
        "description": "Detects suspicious ways to run Invoke-Execution using IEX alias",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & (CommandLine.str.contains(r' | iex;', case=False) | CommandLine.str.contains(r' | iex ', case=False) | CommandLine.str.contains(r' | iex}', case=False) | CommandLine.str.contains(r' | IEX ;', case=False) | CommandLine.str.contains(r' | IEX -Error', case=False) | CommandLine.str.contains(r' | IEX (new', case=False) | CommandLine.str.contains(r');IEX ', case=False)) & (CommandLine.str.contains(r'::FromBase64String', case=False) | CommandLine.str.contains(r'.GetString([System.Convert]::', case=False)) | CommandLine.str.contains(r')|iex;$', case=False) | CommandLine.str.contains(r');iex($', case=False) | CommandLine.str.contains(r');iex $', case=False) | CommandLine.str.contains(r' | IEX | ', case=False) | CommandLine.str.contains(r' | iex\\\\\"', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Webshell Tool Reconnaissance Activity",
        "id": "f64e5c19-879c-4bae-b471-6d84c8339677",
        "status": "test",
        "description": "Detects processes spawned from web servers (PHP, Tomcat, IIS, etc.) that perform reconnaissance looking for the existence of popular scripting tools (perl, python, wget) on the system via the help commands\n",
        "tags": [
            "attack.persistence",
            "attack.t1505.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\caddy.exe', case=False) | ParentImage.str.contains(r'\\\\httpd.exe', case=False) | ParentImage.str.contains(r'\\\\nginx.exe', case=False) | ParentImage.str.contains(r'\\\\php-cgi.exe', case=False) | ParentImage.str.contains(r'\\\\w3wp.exe', case=False) | ParentImage.str.contains(r'\\\\ws_tomcatservice.exe', case=False) | (ParentImage.str.contains(r'\\\\java.exe', case=False) | ParentImage.str.contains(r'\\\\javaw.exe', case=False)) & (ParentImage.str.contains(r'-tomcat-', case=False) | ParentImage.str.contains(r'\\\\tomcat', case=False)) | (ParentImage.str.contains(r'\\\\java.exe', case=False) | ParentImage.str.contains(r'\\\\javaw.exe', case=False)) & (CommandLine.str.contains(r'CATALINA_HOME', case=False) | CommandLine.str.contains(r'catalina.jar', case=False))) & (CommandLine.str.contains(r'perl --help', case=False) | CommandLine.str.contains(r'perl -h', case=False) | CommandLine.str.contains(r'python --help', case=False) | CommandLine.str.contains(r'python -h', case=False) | CommandLine.str.contains(r'python3 --help', case=False) | CommandLine.str.contains(r'python3 -h', case=False) | CommandLine.str.contains(r'wget --help', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Powershell Search Order Hijacking - Task",
        "id": "b66474aa-bd92-4333-a16c-298155b120df",
        "status": "test",
        "description": "Detects suspicious powershell execution via a schedule task where the command ends with an suspicious flags to hide the powershell instance instead of executeing scripts or commands. This could be a sign of persistence via PowerShell \"Get-Variable\" technique as seen being used in Colibri Loader",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.t1053.005",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage=='C:\\\\WINDOWS\\\\System32\\\\svchost.exe' & ParentCommandLine.str.contains(r'-k netsvcs', case=False) & ParentCommandLine.str.contains(r'-s Schedule', case=False) & (CommandLine.str.contains(r' -windowstyle hidden', case=False) | CommandLine.str.contains(r' -w hidden', case=False) | CommandLine.str.contains(r' -ep bypass', case=False) | CommandLine.str.contains(r' -noni', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Wab Execution From Non Default Location",
        "id": "395907ee-96e5-4666-af2e-2ca91688e151",
        "status": "test",
        "description": "Detects execution of wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) from non default locations as seen with bumblebee activity",
        "tags": [
            "attack.defense-evasion",
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wab.exe', case=False) | Image.str.contains(r'\\\\wabmig.exe', case=False)) & ~ (Image.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Windows Mail\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Windows Mail\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Windows Defender AV Security Monitoring",
        "id": "a7ee1722-c3c5-aeff-3212-c777e4733217",
        "status": "test",
        "description": "Detects attackers attempting to disable Windows Defender using Powershell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r'-DisableBehaviorMonitoring $true', case=False) | CommandLine.str.contains(r'-DisableRuntimeMonitoring $true', case=False)) | (Image.str.contains(r'\\\\sc.exe', case=False) | OriginalFileName=='sc.exe') & (CommandLine.str.contains(r'stop', case=False) & CommandLine.str.contains(r'WinDefend', case=False) | CommandLine.str.contains(r'delete', case=False) & CommandLine.str.contains(r'WinDefend', case=False) | CommandLine.str.contains(r'config', case=False) & CommandLine.str.contains(r'WinDefend', case=False) & CommandLine.str.contains(r'start=disabled', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Regsvr32 Execution From Highly Suspicious Location",
        "id": "327ff235-94eb-4f06-b9de-aaee571324be",
        "status": "test",
        "description": "Detects execution of regsvr32 where the DLL is located in a highly suspicious locations",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.010"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\regsvr32.exe', case=False) | OriginalFileName=='REGSVR32.EXE') & (CommandLine.str.contains(r':\\\\PerfLogs\\\\', case=False) | CommandLine.str.contains(r':\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Registration\\\\CRMLog', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\System32\\\\com\\\\dmp\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\System32\\\\FxsTmp\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\System32\\\\Microsoft\\\\Crypto\\\\RSA\\\\MachineKeys\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\System32\\\\spool\\\\PRINTERS\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\System32\\\\spool\\\\SERVERS\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\System32\\\\Tasks_Migrated\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\System32\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\SysWOW64\\\\com\\\\dmp\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\SysWOW64\\\\FxsTmp\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\PLA\\\\System\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Tasks\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Tracing\\\\', case=False) | (CommandLine.str.contains(r' \"C:\\\\', case=False) | CommandLine.str.contains(r' C:\\\\', case=False) | CommandLine.str.contains(r' \\'C:\\\\', case=False) | CommandLine.str.contains(r'D:\\\\', case=False)) & ~ (CommandLine.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | CommandLine.str.contains(r'C:\\\\Program Files\\\\', case=False) | CommandLine.str.contains(r'C:\\\\ProgramData\\\\', case=False) | CommandLine.str.contains(r'C:\\\\Users\\\\', case=False) | CommandLine.str.contains(r' C:\\\\Windows\\\\', case=False) | CommandLine.str.contains(r' \"C:\\\\Windows\\\\', case=False) | CommandLine.str.contains(r' \\'C:\\\\Windows\\\\', case=False))) & ~ (CommandLine=='' | CommandLine is null)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Mshta.EXE Execution Patterns",
        "id": "e32f92d1-523e-49c3-9374-bdb13b46a3ba",
        "status": "test",
        "description": "Detects suspicious mshta process execution patterns",
        "tags": [
            "attack.execution",
            "attack.t1106"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\mshta.exe', case=False) | OriginalFileName=='MSHTA.EXE') & (ParentImage.str.contains(r'\\\\cmd.exe', case=False) | ParentImage.str.contains(r'\\\\cscript.exe', case=False) | ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False) | ParentImage.str.contains(r'\\\\regsvr32.exe', case=False) | ParentImage.str.contains(r'\\\\rundll32.exe', case=False) | ParentImage.str.contains(r'\\\\wscript.exe', case=False)) & (CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | CommandLine.str.contains(r'C:\\\\ProgramData\\\\', case=False) | CommandLine.str.contains(r'C:\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False)) | (Image.str.contains(r'\\\\mshta.exe', case=False) | OriginalFileName=='MSHTA.EXE') & ~ (Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | CommandLine.str.contains(r'.htm', case=False) | CommandLine.str.contains(r'.hta', case=False) | CommandLine.str.contains(r'mshta.exe', case=False) | CommandLine.str.contains(r'mshta', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential CobaltStrike Process Patterns",
        "id": "f35c5d71-b489-4e22-a115-f003df287317",
        "status": "test",
        "description": "Detects potential process patterns related to Cobalt Strike beacon activity",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'cmd.exe /C whoami', case=False) & ParentImage.str.contains(r'C:\\\\Temp\\\\', case=False) | (ParentImage.str.contains(r'\\\\runonce.exe', case=False) | ParentImage.str.contains(r'\\\\dllhost.exe', case=False)) & CommandLine.str.contains(r'cmd.exe /c echo', case=False) & CommandLine.str.contains(r'> \\\\\\\\.\\\\pipe', case=False) | ParentCommandLine.str.contains(r'cmd.exe /C echo', case=False) & ParentCommandLine.str.contains(r' > \\\\\\\\.\\\\pipe', case=False) & CommandLine.str.contains(r'conhost.exe 0xffffffff -ForceV1', case=False) | ParentCommandLine.str.contains(r'/C whoami', case=False) & CommandLine.str.contains(r'conhost.exe 0xffffffff -ForceV1', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Execution of Systeminfo",
        "id": "0ef56343-059e-4cb6-adc1-4c3c967c5e46",
        "status": "test",
        "description": "Detects usage of the \"systeminfo\" command to retrieve information",
        "tags": [
            "attack.discovery",
            "attack.t1082"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\systeminfo.exe', case=False) | OriginalFileName=='sysinfo.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Encoded PowerShell Patterns In CommandLine",
        "id": "cdf05894-89e7-4ead-b2b0-0a5f97a90f2f",
        "status": "test",
        "description": "Detects specific combinations of encoding methods in PowerShell via the commandline",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & ((CommandLine.str.contains(r'ToInt', case=False) | CommandLine.str.contains(r'ToDecimal', case=False) | CommandLine.str.contains(r'ToByte', case=False) | CommandLine.str.contains(r'ToUint', case=False) | CommandLine.str.contains(r'ToSingle', case=False) | CommandLine.str.contains(r'ToSByte', case=False)) & (CommandLine.str.contains(r'ToChar', case=False) | CommandLine.str.contains(r'ToString', case=False) | CommandLine.str.contains(r'String', case=False)) | CommandLine.str.contains(r'char', case=False) & CommandLine.str.contains(r'join', case=False) | CommandLine.str.contains(r'split', case=False) & CommandLine.str.contains(r'join', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Child Process of AspNetCompiler",
        "id": "9ccba514-7cb6-4c5c-b377-700758f2f120",
        "status": "test",
        "description": "Detects potentially suspicious child processes of \"aspnet_compiler.exe\".",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\aspnet_compiler.exe', case=False) & (Image.str.contains(r'\\\\calc.exe', case=False) | Image.str.contains(r'\\\\notepad.exe', case=False) | Image.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Roaming\\\\', case=False) | Image.str.contains(r':\\\\Temp\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\Tasks\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Encoded PowerShell Command Line",
        "id": "ca2092a1-c273-4878-9b4b-0d60115bf5ea",
        "status": "test",
        "description": "Detects suspicious powershell process starts with base64 encoded commands (e.g. Emotet)",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r' -e', case=False) & (CommandLine.str.contains(r' JAB', case=False) | CommandLine.str.contains(r' SUVYI', case=False) | CommandLine.str.contains(r' SQBFAFgA', case=False) | CommandLine.str.contains(r' aQBlAHgA', case=False) | CommandLine.str.contains(r' aWV4I', case=False) | CommandLine.str.contains(r' IAA', case=False) | CommandLine.str.contains(r' IAB', case=False) | CommandLine.str.contains(r' UwB', case=False) | CommandLine.str.contains(r' cwB', case=False)) | CommandLine.str.contains(r'.exe -ENCOD ', case=False) | CommandLine.str.contains(r' BA^J e-', case=False)) & ~ CommandLine.str.contains(r' -ExecutionPolicy remotesigned ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Regsvr32 Commandline Flag Anomaly",
        "id": "b236190c-1c61-41e9-84b3-3fe03f6d76b0",
        "status": "test",
        "description": "Detects a potential command line flag anomaly related to \"regsvr32\" in which the \"/i\" flag is used without the \"/n\" which should be uncommon.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.010"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\regsvr32.exe', case=False) & (CommandLine.str.contains(r' -i:', case=False) | CommandLine.str.contains(r' /i:', case=False) | CommandLine.str.contains(r' \u2013i:', case=False) | CommandLine.str.contains(r' \u2014i:', case=False) | CommandLine.str.contains(r' \u2015i:', case=False)) & ~ CommandLine.str.contains(r' -n ', case=False) | CommandLine.str.contains(r' /n ', case=False) | CommandLine.str.contains(r' \u2013n ', case=False) | CommandLine.str.contains(r' \u2014n ', case=False) | CommandLine.str.contains(r' \u2015n ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "User Added to Local Administrators Group",
        "id": "ad720b90-25ad-43ff-9b5e-5c841facc8e5",
        "status": "test",
        "description": "Detects addition of users to the local administrator group via \"Net\" or \"Add-LocalGroupMember\".",
        "tags": [
            "attack.persistence",
            "attack.t1098"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'localgroup ', case=False) & CommandLine.str.contains(r' /add', case=False) | CommandLine.str.contains(r'Add-LocalGroupMember ', case=False) & CommandLine.str.contains(r' -Group ', case=False)) & (CommandLine.str.contains(r' administrators ', case=False) | CommandLine.str.contains(r' administrateur', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Script Proxy Execution Via CL_Mutexverifiers.ps1",
        "id": "1e0e1a81-e79b-44bc-935b-ddb9c8006b3d",
        "status": "test",
        "description": "Detects the use of the Microsoft signed script \"CL_mutexverifiers\" to proxy the execution of additional PowerShell script commands",
        "tags": [
            "attack.defense-evasion",
            "attack.t1216"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False)) & Image.str.contains(r'\\\\powershell.exe', case=False) & CommandLine.str.contains(r' -nologo -windowstyle minimized -file ', case=False) & (CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Abusing Print Executable",
        "id": "bafac3d6-7de9-4dd9-8874-4a1194b493ed",
        "status": "test",
        "description": "Attackers can use print.exe for remote file copy",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\print.exe', case=False) & CommandLine.str.contains(r'print', case=False) & CommandLine.str.contains(r'/D', case=False) & CommandLine.str.contains(r'.exe', case=False) & ~ CommandLine.str.contains(r'print.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "AADInternals PowerShell Cmdlets Execution - ProccessCreation",
        "id": "c86500e9-a645-4680-98d7-f882c70c1ea3",
        "status": "test",
        "description": "Detects ADDInternals Cmdlet execution. A tool for administering Azure AD and Office 365. Which can be abused by threat actors to attack Azure AD or Office 365.",
        "tags": [
            "attack.execution",
            "attack.reconnaissance",
            "attack.discovery",
            "attack.credential-access",
            "attack.impact"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\powershell_ise.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.Exe', 'pwsh.dll']) & (CommandLine.str.contains(r'Add-AADInt', case=False) | CommandLine.str.contains(r'ConvertTo-AADInt', case=False) | CommandLine.str.contains(r'Disable-AADInt', case=False) | CommandLine.str.contains(r'Enable-AADInt', case=False) | CommandLine.str.contains(r'Export-AADInt', case=False) | CommandLine.str.contains(r'Find-AADInt', case=False) | CommandLine.str.contains(r'Get-AADInt', case=False) | CommandLine.str.contains(r'Grant-AADInt', case=False) | CommandLine.str.contains(r'Initialize-AADInt', case=False) | CommandLine.str.contains(r'Install-AADInt', case=False) | CommandLine.str.contains(r'Invoke-AADInt', case=False) | CommandLine.str.contains(r'Join-AADInt', case=False) | CommandLine.str.contains(r'New-AADInt', case=False) | CommandLine.str.contains(r'Open-AADInt', case=False) | CommandLine.str.contains(r'Read-AADInt', case=False) | CommandLine.str.contains(r'Register-AADInt', case=False) | CommandLine.str.contains(r'Remove-AADInt', case=False) | CommandLine.str.contains(r'Reset-AADInt', case=False) | CommandLine.str.contains(r'Resolve-AADInt', case=False) | CommandLine.str.contains(r'Restore-AADInt', case=False) | CommandLine.str.contains(r'Save-AADInt', case=False) | CommandLine.str.contains(r'Search-AADInt', case=False) | CommandLine.str.contains(r'Send-AADInt', case=False) | CommandLine.str.contains(r'Set-AADInt', case=False) | CommandLine.str.contains(r'Start-AADInt', case=False) | CommandLine.str.contains(r'Unprotect-AADInt', case=False) | CommandLine.str.contains(r'Update-AADInt', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "IE ZoneMap Setting Downgraded To MyComputer Zone For HTTP Protocols Via CLI",
        "id": "10344bb3-7f65-46c2-b915-2d00d47be5b0",
        "status": "test",
        "description": "Detects changes to Internet Explorer's (IE / Windows Internet properties) ZoneMap configuration of the \"HTTP\" and \"HTTPS\" protocols to point to the \"My Computer\" zone. This allows downloaded files from the Internet to be granted the same level of trust as files stored locally.\n",
        "tags": [
            "attack.execution",
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\\\\ZoneMap\\\\ProtocolDefaults', case=False) & CommandLine.str.contains(r'http', case=False) & CommandLine.str.contains(r' 0', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "User Added to Remote Desktop Users Group",
        "id": "ffa28e60-bdb1-46e0-9f82-05f7a61cc06e",
        "status": "test",
        "description": "Detects addition of users to the local Remote Desktop Users group via \"Net\" or \"Add-LocalGroupMember\".",
        "tags": [
            "attack.persistence",
            "attack.lateral-movement",
            "attack.t1133",
            "attack.t1136.001",
            "attack.t1021.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'localgroup ', case=False) & CommandLine.str.contains(r' /add', case=False) | CommandLine.str.contains(r'Add-LocalGroupMember ', case=False) & CommandLine.str.contains(r' -Group ', case=False)) & (CommandLine.str.contains(r'Remote Desktop Users', case=False) | CommandLine.str.contains(r'Utilisateurs du Bureau \u00e0 distance', case=False) | CommandLine.str.contains(r'Usuarios de escritorio remoto', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Scheduled Task Creation via Masqueraded XML File",
        "id": "dd2a821e-3b07-4d3b-a9ac-929fe4c6ca0c",
        "status": "test",
        "description": "Detects the creation of a scheduled task using the \"-XML\" flag with a file without the '.xml' extension. This behavior could be indicative of potential defense evasion attempt during persistence",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1036.005",
            "attack.t1053.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\schtasks.exe', case=False) | OriginalFileName=='schtasks.exe') & (CommandLine.str.contains(r'/create', case=False) | CommandLine.str.contains(r'-create', case=False)) & (CommandLine.str.contains(r'/xml', case=False) | CommandLine.str.contains(r'-xml', case=False)) & ~ (CommandLine.str.contains(r'.xml', case=False) | IntegrityLevel==['System', 'S-1-16-16384'] | ParentImage.str.contains(r'\\\\rundll32.exe', case=False) & ParentCommandLine.str.contains(r':\\\\WINDOWS\\\\Installer\\\\MSI', case=False) & ParentCommandLine.str.contains(r'.tmp,zzzzInvokeManagedCustomActionOutOfProc', case=False)) & ~ (ParentImage.str.contains(r'*:\\\\ProgramData\\\\OEM\\\\UpgradeTool\\\\CareCenter_*\\\\BUnzip\\\\Setup_msi.exe') | ParentImage.str.contains(r':\\\\Program Files\\\\Axis Communications\\\\AXIS Camera Station\\\\SetupActions.exe', case=False) | ParentImage.str.contains(r':\\\\Program Files\\\\Axis Communications\\\\AXIS Device Manager\\\\AdmSetupActions.exe', case=False) | ParentImage.str.contains(r':\\\\Program Files (x86)\\\\Zemana\\\\AntiMalware\\\\AntiMalware.exe', case=False) | ParentImage.str.contains(r':\\\\Program Files\\\\Dell\\\\SupportAssist\\\\pcdrcui.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Logged-On User Password Change Via Ksetup.EXE",
        "id": "c9783e20-4793-4164-ba96-d9ee483992c4",
        "status": "test",
        "description": "Detects password change for the logged-on user's via \"ksetup.exe\"",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ksetup.exe', case=False) | OriginalFileName=='ksetup.exe') & CommandLine.str.contains(r' /ChangePassword ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Registry Modification From ADS Via Regini.EXE",
        "id": "77946e79-97f1-45a2-84b4-f37b5c0d8682",
        "status": "test",
        "description": "Detects the import of an alternate data stream with regini.exe, regini.exe can be used to modify registry keys.",
        "tags": [
            "attack.t1112",
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\regini.exe', case=False) | OriginalFileName=='REGINI.EXE') & CommandLine.str.contains(r':[^ \\\\\\\\]')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Cabinet File Expansion",
        "id": "9f107a84-532c-41af-b005-8d12a607639f",
        "status": "test",
        "description": "Detects the expansion or decompression of cabinet files from potentially suspicious or uncommon locations, e.g. seen in Iranian MeteorExpress related attacks",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\expand.exe', case=False) & (CommandLine.str.contains(r'-F:', case=False) | CommandLine.str.contains(r'/F:', case=False) | CommandLine.str.contains(r'\u2013F:', case=False) | CommandLine.str.contains(r'\u2014F:', case=False) | CommandLine.str.contains(r'\u2015F:', case=False)) & (CommandLine.str.contains(r':\\\\Perflogs\\\\', case=False) | CommandLine.str.contains(r':\\\\ProgramData', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Admin$\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False) | CommandLine.str.contains(r'\\\\C$\\\\', case=False) | CommandLine.str.contains(r'\\\\Temporary Internet', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Favorites\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Favourites\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Contacts\\\\', case=False)) & ~ (ParentImage=='C:\\\\Program Files (x86)\\\\Dell\\\\UpdateService\\\\ServiceShell.exe' & CommandLine.str.contains(r'C:\\\\ProgramData\\\\Dell\\\\UpdateService\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CMSTP Execution Process Creation",
        "id": "7d4cdc5a-0076-40ca-aac8-f7e714570e47",
        "status": "stable",
        "description": "Detects various indicators of Microsoft Connection Manager Profile Installer execution",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218.003",
            "attack.g0069",
            "car.2019-04-001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\cmstp.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Copy From or To System Directory",
        "id": "fff9d2b7-e11c-4a69-93d3-40ef66189767",
        "status": "test",
        "description": "Detects a suspicious copy operation that tries to copy a program from system (System32, SysWOW64, WinSxS) directories to another on disk.\nOften used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) & CommandLine.str.contains(r'copy ', case=False) | (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & (CommandLine.str.contains(r'copy-item', case=False) | CommandLine.str.contains(r' copy ', case=False) | CommandLine.str.contains(r'cpi ', case=False) | CommandLine.str.contains(r' cp ', case=False)) | Image.str.contains(r'\\\\robocopy.exe', case=False) | Image.str.contains(r'\\\\xcopy.exe', case=False) | OriginalFileName==['robocopy.exe', 'XCOPY.EXE']) & (CommandLine.str.contains(r'\\\\System32', case=False) | CommandLine.str.contains(r'\\\\SysWOW64', case=False) | CommandLine.str.contains(r'\\\\WinSxS', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Browser Data Stealing",
        "id": "47147b5b-9e17-4d76-b8d2-7bac24c5ce1b",
        "status": "test",
        "description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.\nWeb browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future.\nWeb browsers typically store the credentials in an encrypted format within a credential store.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1555.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'copy-item', case=False) | CommandLine.str.contains(r'copy ', case=False) | CommandLine.str.contains(r'cpi ', case=False) | CommandLine.str.contains(r' cp ', case=False) | CommandLine.str.contains(r'move ', case=False) | CommandLine.str.contains(r'move-item', case=False) | CommandLine.str.contains(r' mi ', case=False) | CommandLine.str.contains(r' mv ', case=False) | Image.str.contains(r'\\\\xcopy.exe', case=False) | Image.str.contains(r'\\\\robocopy.exe', case=False) | OriginalFileName==['XCOPY.EXE', 'robocopy.exe']) & (CommandLine.str.contains(r'\\\\Amigo\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\BraveSoftware\\\\Brave-Browser\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\CentBrowser\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Chromium\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\CocCoc\\\\Browser\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Comodo\\\\Dragon\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Elements Browser\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Epic Privacy Browser\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Google\\\\Chrome Beta\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Google\\\\Chrome SxS\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Google\\\\Chrome\\\\User Data\\\\', case=False) | CommandLine.str.contains(r'\\\\Kometa\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Maxthon5\\\\Users', case=False) | CommandLine.str.contains(r'\\\\Microsoft\\\\Edge\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Mozilla\\\\Firefox\\\\Profiles', case=False) | CommandLine.str.contains(r'\\\\Nichrome\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Opera Software\\\\Opera GX Stable\\\\', case=False) | CommandLine.str.contains(r'\\\\Opera Software\\\\Opera Neon\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Opera Software\\\\Opera Stable\\\\', case=False) | CommandLine.str.contains(r'\\\\Orbitum\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\QIP Surf\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Sputnik\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Torch\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\uCozMedia\\\\Uran\\\\User Data', case=False) | CommandLine.str.contains(r'\\\\Vivaldi\\\\User Data', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Ping/Del Command Combination",
        "id": "54786ddc-5b8a-11ed-9b6a-0242ac120002",
        "status": "test",
        "description": "Detects a method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' -n ', case=False) | CommandLine.str.contains(r' /n ', case=False) | CommandLine.str.contains(r' \u2013n ', case=False) | CommandLine.str.contains(r' \u2014n ', case=False) | CommandLine.str.contains(r' \u2015n ', case=False)) & CommandLine.str.contains(r'Nul', case=False) & (CommandLine.str.contains(r' -f ', case=False) | CommandLine.str.contains(r' /f ', case=False) | CommandLine.str.contains(r' \u2013f ', case=False) | CommandLine.str.contains(r' \u2014f ', case=False) | CommandLine.str.contains(r' \u2015f ', case=False) | CommandLine.str.contains(r' -q ', case=False) | CommandLine.str.contains(r' /q ', case=False) | CommandLine.str.contains(r' \u2013q ', case=False) | CommandLine.str.contains(r' \u2014q ', case=False) | CommandLine.str.contains(r' \u2015q ', case=False)) & CommandLine.str.contains(r'ping', case=False) & CommandLine.str.contains(r'del ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Base64 Encoded PowerShell Command Detected",
        "id": "e32d4572-9826-4738-b651-95fa63747e8a",
        "status": "test",
        "description": "Detects usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string",
        "tags": [
            "attack.t1027",
            "attack.defense-evasion",
            "attack.t1140",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'::FromBase64String(', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sensitive File Access Via Volume Shadow Copy Backup",
        "id": "f57f8d16-1f39-4dcb-a604-6c73d9b54b3d",
        "status": "test",
        "description": "Detects a command that accesses the VolumeShadowCopy in order to extract sensitive files such as the Security or SAM registry hives or the AD database (ntds.dit)\n",
        "tags": [
            "attack.impact",
            "attack.t1490"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\\\\\?\\\\GLOBALROOT\\\\Device\\\\HarddiskVolumeShadowCopy', case=False) & (CommandLine.str.contains(r'\\\\NTDS.dit', case=False) | CommandLine.str.contains(r'\\\\SYSTEM', case=False) | CommandLine.str.contains(r'\\\\SECURITY', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Attempt Via Existing Service Tampering",
        "id": "38879043-7e1e-47a9-8d46-6bec88e201df",
        "status": "test",
        "description": "Detects the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence.",
        "tags": [
            "attack.persistence",
            "attack.t1543.003",
            "attack.t1574.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'sc ', case=False) & CommandLine.str.contains(r'config ', case=False) & CommandLine.str.contains(r'binpath=', case=False) | CommandLine.str.contains(r'sc ', case=False) & CommandLine.str.contains(r'failure', case=False) & CommandLine.str.contains(r'command=', case=False) | (CommandLine.str.contains(r'reg ', case=False) & CommandLine.str.contains(r'add ', case=False) & CommandLine.str.contains(r'FailureCommand', case=False) | CommandLine.str.contains(r'reg ', case=False) & CommandLine.str.contains(r'add ', case=False) & CommandLine.str.contains(r'ImagePath', case=False)) & (CommandLine.str.contains(r'.sh', case=False) | CommandLine.str.contains(r'.exe', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.bin$', case=False) | CommandLine.str.contains(r'.bat', case=False) | CommandLine.str.contains(r'.cmd', case=False) | CommandLine.str.contains(r'.js', case=False) | CommandLine.str.contains(r'.msh$', case=False) | CommandLine.str.contains(r'.reg$', case=False) | CommandLine.str.contains(r'.scr', case=False) | CommandLine.str.contains(r'.ps', case=False) | CommandLine.str.contains(r'.vb', case=False) | CommandLine.str.contains(r'.jar', case=False) | CommandLine.str.contains(r'.pl', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Admin Share Mount Via Net.EXE",
        "id": "3abd6094-7027-475f-9630-8ab9be7b9725",
        "status": "test",
        "description": "Detects when an admin share is mounted using net.exe",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | OriginalFileName==['net.exe', 'net1.exe']) & CommandLine.str.contains(r' use ', case=False) & CommandLine.str.contains(r'* \\\\\\\\*\\\\*$*')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious IIS Module Registration",
        "id": "043c4b8b-3a54-4780-9682-081cb6b8185c",
        "status": "test",
        "description": "Detects a suspicious IIS module registration as described in Microsoft threat report on IIS backdoors",
        "tags": [
            "attack.persistence",
            "attack.t1505.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\w3wp.exe', case=False) & (CommandLine.str.contains(r'appcmd.exe add module', case=False) | CommandLine.str.contains(r' system.enterpriseservices.internal.publish', case=False) & Image.str.contains(r'\\\\powershell.exe', case=False) | CommandLine.str.contains(r'gacutil', case=False) & CommandLine.str.contains(r' /I', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Download Via Bitsadmin To An Uncommon Target Folder",
        "id": "6e30c82f-a9f8-4aab-b79c-7c12bce6f248",
        "status": "test",
        "description": "Detects usage of bitsadmin downloading a file to uncommon target folder",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1197",
            "attack.s0190",
            "attack.t1036.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\bitsadmin.exe', case=False) | OriginalFileName=='bitsadmin.exe') & (CommandLine.str.contains(r' /transfer ', case=False) | CommandLine.str.contains(r' /create ', case=False) | CommandLine.str.contains(r' /addfile ', case=False)) & (CommandLine.str.contains(r'%AppData%', case=False) | CommandLine.str.contains(r'%temp%', case=False) | CommandLine.str.contains(r'%tmp%', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | CommandLine.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Radmin Viewer Utility Execution",
        "id": "5817e76f-4804-41e6-8f1d-5fa0b3ecae2d",
        "status": "test",
        "description": "Detects the execution of Radmin which can be abused by an adversary to remotely control Windows machines",
        "tags": [
            "attack.execution",
            "attack.lateral-movement",
            "attack.t1072"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description=='Radmin Viewer' | Product=='Radmin Viewer' | OriginalFileName=='Radmin.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote File Download Via Desktopimgdownldr Utility",
        "id": "214641c2-c579-4ecb-8427-0cf19df6842e",
        "status": "test",
        "description": "Detects the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil.",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\desktopimgdownldr.exe', case=False) & ParentImage.str.contains(r'\\\\desktopimgdownldr.exe', case=False) & CommandLine.str.contains(r'/lockscreenurl:http', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Base64 Encoded Invoke Keyword",
        "id": "6385697e-9f1b-40bd-8817-f4a91f40508e",
        "status": "test",
        "description": "Detects UTF-8 and UTF-16 Base64 encoded powershell 'Invoke-' calls",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & CommandLine.str.contains(r' -e', case=False) & (CommandLine.str.contains(r'SQBuAHYAbwBrAGUALQ', case=False) | CommandLine.str.contains(r'kAbgB2AG8AawBlAC0A', case=False) | CommandLine.str.contains(r'JAG4AdgBvAGsAZQAtA', case=False) | CommandLine.str.contains(r'SW52b2tlL', case=False) | CommandLine.str.contains(r'ludm9rZS', case=False) | CommandLine.str.contains(r'JbnZva2Ut', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Child Process Of Regsvr32",
        "id": "6f0947a4-1c5e-4e0d-8ac7-53159b8f23ca",
        "status": "test",
        "description": "Detects potentially suspicious child processes of \"regsvr32.exe\".",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.010"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\regsvr32.exe', case=False) & (Image.str.contains(r'\\\\calc.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\explorer.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | Image.str.contains(r'\\\\nltest.exe', case=False) | Image.str.contains(r'\\\\notepad.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\reg.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\werfault.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False)) & ~ (Image.str.contains(r'\\\\werfault.exe', case=False) & CommandLine.str.contains(r' -u -p ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Empire PowerShell UAC Bypass",
        "id": "3268b746-88d8-4cd3-bffc-30077d02c787",
        "status": "stable",
        "description": "Detects some Empire PowerShell UAC bypass methods",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002",
            "car.2019-04-001"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' -NoP -NonI -w Hidden -c $x=$((gp HKCU:Software\\\\Microsoft\\\\Windows Update).Update)', case=False) | CommandLine.str.contains(r' -NoP -NonI -c $x=$((gp HKCU:Software\\\\Microsoft\\\\Windows Update).Update);', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Execution From Outlook Temporary Folder",
        "id": "a018fdc3-46a3-44e5-9afb-2cd4af1d4b39",
        "status": "test",
        "description": "Detects a suspicious program execution in Outlook temp folder",
        "tags": [
            "attack.initial-access",
            "attack.t1566.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\Temporary Internet Files\\\\Content.Outlook\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - MeshAgent Command Execution via MeshCentral",
        "id": "74a2b202-73e0-4693-9a3a-9d36146d0775",
        "status": "experimental",
        "description": "Detects the use of MeshAgent to execute commands on the target host, particularly when threat actors might abuse it to execute commands directly.\nMeshAgent can execute commands on the target host by leveraging win-console to obscure their activities and win-dispatcher to run malicious code through IPC with child processes.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\meshagent.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Command Line Execution with Suspicious URL and AppData Strings",
        "id": "1ac8666b-046f-4201-8aba-1951aaec03a3",
        "status": "test",
        "description": "Detects a suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell)",
        "tags": [
            "attack.execution",
            "attack.command-and-control",
            "attack.t1059.003",
            "attack.t1059.001",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\cmd.exe', case=False) & CommandLine.str.contains(r'http', case=False) & CommandLine.str.contains(r'://', case=False) & CommandLine.str.contains(r'%AppData%', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Query of MachineGUID",
        "id": "f5240972-3938-4e56-8e4b-e33893176c1f",
        "status": "test",
        "description": "Use of reg to get MachineGuid information",
        "tags": [
            "attack.discovery",
            "attack.t1082"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\reg.exe', case=False) & CommandLine.str.contains(r'SOFTWARE\\\\Microsoft\\\\Cryptography', case=False) & CommandLine.str.contains(r'/v ', case=False) & CommandLine.str.contains(r'MachineGuid', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Wab/Wabmig Unusual Parent Or Child Processes",
        "id": "63d1ccc0-2a43-4f4b-9289-361b308991ff",
        "status": "test",
        "description": "Detects unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity",
        "tags": [
            "attack.defense-evasion",
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((ParentImage.str.contains(r'\\\\WmiPrvSE.exe', case=False) | ParentImage.str.contains(r'\\\\svchost.exe', case=False) | ParentImage.str.contains(r'\\\\dllhost.exe', case=False)) & (Image.str.contains(r'\\\\wab.exe', case=False) | Image.str.contains(r'\\\\wabmig.exe', case=False)) | ParentImage.str.contains(r'\\\\wab.exe', case=False) | ParentImage.str.contains(r'\\\\wabmig.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - Anydesk Execution From Suspicious Folder",
        "id": "065b00ca-5d5c-4557-ac95-64a6d0b64d86",
        "status": "test",
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\AnyDesk.exe', case=False) | Image.str.contains(r'\\\\AnyDeskMSI.exe', case=False) | Description=='AnyDesk' | Product=='AnyDesk' | Company=='AnyDesk Software GmbH') & ~ (Image.str.contains(r'\\\\AppData\\\\', case=False) | Image.str.contains(r'Program Files (x86)\\\\AnyDesk', case=False) | Image.str.contains(r'Program Files\\\\AnyDesk', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Execution of Shutdown to Log Out",
        "id": "ec290c06-9b6b-4338-8b6b-095c0f284f10",
        "status": "test",
        "description": "Detects the rare use of the command line tool shutdown to logoff a user",
        "tags": [
            "attack.impact",
            "attack.t1529"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\shutdown.exe', case=False) & CommandLine.str.contains(r'/l', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use of VSIISExeLauncher.exe",
        "id": "18749301-f1c5-4efc-a4c3-276ff1f5b6f8",
        "status": "test",
        "description": "The \"VSIISExeLauncher.exe\" binary part of the Visual Studio/VS Code can be used to execute arbitrary binaries",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\VSIISExeLauncher.exe', case=False) | OriginalFileName=='VSIISExeLauncher.exe') & (CommandLine.str.contains(r' -p ', case=False) | CommandLine.str.contains(r' -a ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious TSCON Start as SYSTEM",
        "id": "9847f263-4a81-424f-970c-875dab15b79b",
        "status": "test",
        "description": "Detects a tscon.exe start as LOCAL SYSTEM",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False)) & Image.str.contains(r'\\\\tscon.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ManageEngine Endpoint Central Dctask64.EXE Potential Abuse",
        "id": "6345b048-8441-43a7-9bed-541133633d7a",
        "status": "test",
        "description": "Detects the execution of \"dctask64.exe\", a signed binary by ZOHO Corporation part of ManageEngine Endpoint Central.\nThis binary can be abused for DLL injection, arbitrary command and process execution.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1055.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\dctask64.exe', case=False) | Hashes.str.contains(r'IMPHASH=6834B1B94E49701D77CCB3C0895E1AFD', case=False) | Hashes.str.contains(r'IMPHASH=1BB6F93B129F398C7C4A76BB97450BBA', case=False) | Hashes.str.contains(r'IMPHASH=FAA2AC19875FADE461C8D89DCF2710A3', case=False) | Hashes.str.contains(r'IMPHASH=F1039CED4B91572AB7847D26032E6BBF', case=False)) & (CommandLine.str.contains(r' executecmd64 ', case=False) | CommandLine.str.contains(r' invokeexe ', case=False) | CommandLine.str.contains(r' injectDll ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Group Membership Reconnaissance Via Whoami.EXE",
        "id": "bd8b828d-0dca-48e1-8a63-8a58ecf2644f",
        "status": "test",
        "description": "Detects the execution of whoami.exe with the /group command line flag to show group membership for the current user, account type, security identifiers (SID), and attributes.",
        "tags": [
            "attack.discovery",
            "attack.t1033"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\whoami.exe', case=False) | OriginalFileName=='whoami.exe') & (CommandLine.str.contains(r' /groups', case=False) | CommandLine.str.contains(r' -groups', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Workstation Locking via Rundll32",
        "id": "3b5b0213-0460-4e3f-8937-3abf98ff7dcc",
        "status": "test",
        "description": "Detects a suspicious call to the user32.dll function that locks the user workstation",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & ParentImage.str.contains(r'\\\\cmd.exe', case=False) & CommandLine.str.contains(r'user32.dll,', case=False) & CommandLine.str.contains(r'LockWorkStation', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Excel.EXE DCOM Lateral Movement Via ActivateMicrosoftApp",
        "id": "551d9c1f-816c-445b-a7a6-7a3864720d60",
        "status": "test",
        "description": "Detects suspicious child processes of Excel which could be an indicator of lateral movement leveraging the \"ActivateMicrosoftApp\" Excel DCOM object.\n",
        "tags": [
            "attack.t1021.003",
            "attack.lateral-movement"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\excel.exe', case=False) & (OriginalFileName==['foxprow.exe', 'schdplus.exe', 'winproj.exe'] | Image.str.contains(r'\\\\foxprow.exe', case=False) | Image.str.contains(r'\\\\schdplus.exe', case=False) | Image.str.contains(r'\\\\winproj.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - GMER Rootkit Detector and Remover Execution",
        "id": "9082ff1f-88ab-4678-a3cc-5bcff99fc74d",
        "status": "test",
        "description": "Detects the execution GMER tool based on image and hash fields.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\gmer.exe', case=False) | Hashes.str.contains(r'MD5=E9DC058440D321AA17D0600B3CA0AB04', case=False) | Hashes.str.contains(r'SHA1=539C228B6B332F5AA523E5CE358C16647D8BBE57', case=False) | Hashes.str.contains(r'SHA256=E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Download From IP Based URL Via CertOC.EXE",
        "id": "b86f6dea-0b2f-41f5-bdcc-a057bd19cd6a",
        "status": "test",
        "description": "Detects when a user downloads a file from an IP based URL using CertOC.exe",
        "tags": [
            "attack.command-and-control",
            "attack.execution",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certoc.exe', case=False) | OriginalFileName=='CertOC.exe') & CommandLine.str.contains(r'://[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}') & CommandLine.str.contains(r'-GetCACAPS', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Powershell Inline Execution From A File",
        "id": "ee218c12-627a-4d27-9e30-d6fb2fe22ed2",
        "status": "test",
        "description": "Detects inline execution of PowerShell code from a file",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'iex ', case=False) | CommandLine.str.contains(r'Invoke-Expression ', case=False) | CommandLine.str.contains(r'Invoke-Command ', case=False) | CommandLine.str.contains(r'icm ', case=False)) & (CommandLine.str.contains(r'cat ', case=False) | CommandLine.str.contains(r'get-content ', case=False) | CommandLine.str.contains(r'type ', case=False)) & CommandLine.str.contains(r' -raw', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - CrackMapExec Execution Patterns",
        "id": "058f4380-962d-40a5-afce-50207d36d7e2",
        "status": "stable",
        "description": "Detects various execution patterns of the CrackMapExec pentesting framework",
        "tags": [
            "attack.execution",
            "attack.t1047",
            "attack.t1053",
            "attack.t1059.003",
            "attack.t1059.001",
            "attack.s0106"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'*cmd.exe /Q /c * 1> \\\\\\\\*\\\\*\\\\* 2>&1*') | CommandLine.str.contains(r'*cmd.exe /C * > \\\\\\\\*\\\\*\\\\* 2>&1*') | CommandLine.str.contains(r'*cmd.exe /C * > *\\\\Temp\\\\* 2>&1*') | CommandLine.str.contains(r'powershell.exe -exec bypass -noni -nop -w 1 -C \"', case=False) | CommandLine.str.contains(r'powershell.exe -noni -nop -w 1 -enc ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious PowerShell Download and Execute Pattern",
        "id": "e6c54d94-498c-4562-a37c-b469d8e9a275",
        "status": "test",
        "description": "Detects suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'IEX ((New-Object Net.WebClient).DownloadString', case=False) | CommandLine.str.contains(r'IEX (New-Object Net.WebClient).DownloadString', case=False) | CommandLine.str.contains(r'IEX((New-Object Net.WebClient).DownloadString', case=False) | CommandLine.str.contains(r'IEX(New-Object Net.WebClient).DownloadString', case=False) | CommandLine.str.contains(r' -command (New-Object System.Net.WebClient).DownloadFile(', case=False) | CommandLine.str.contains(r' -c (New-Object System.Net.WebClient).DownloadFile(', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CreateDump Process Dump",
        "id": "515c8be5-e5df-4c5e-8f6d-a4a2f05e4b48",
        "status": "test",
        "description": "Detects uses of the createdump.exe LOLOBIN utility to dump process memory",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\createdump.exe', case=False) | OriginalFileName=='FX_VER_INTERNALNAME_STR') & (CommandLine.str.contains(r' -u ', case=False) | CommandLine.str.contains(r' --full ', case=False) | CommandLine.str.contains(r' -f ', case=False) | CommandLine.str.contains(r' --name ', case=False) | CommandLine.str.contains(r'.dmp ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Child Process Of Veeam Dabatase",
        "id": "d55b793d-f847-4eea-b59a-5ab09908ac90",
        "status": "test",
        "description": "Detects suspicious child processes of the Veeam service process. This could indicate potential RCE or SQL Injection.",
        "tags": [
            "attack.initial-access",
            "attack.persistence",
            "attack.privilege-escalation"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\sqlservr.exe', case=False) & ParentCommandLine.str.contains(r'VEEAMSQL', case=False) & ((Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wsl.exe', case=False) | Image.str.contains(r'\\\\wt.exe', case=False)) & (CommandLine.str.contains(r'-ex ', case=False) | CommandLine.str.contains(r'bypass', case=False) | CommandLine.str.contains(r'cscript', case=False) | CommandLine.str.contains(r'DownloadString', case=False) | CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False) | CommandLine.str.contains(r'mshta', case=False) | CommandLine.str.contains(r'regsvr32', case=False) | CommandLine.str.contains(r'rundll32', case=False) | CommandLine.str.contains(r'wscript', case=False) | CommandLine.str.contains(r'copy ', case=False)) | Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | Image.str.contains(r'\\\\netstat.exe', case=False) | Image.str.contains(r'\\\\nltest.exe', case=False) | Image.str.contains(r'\\\\ping.exe', case=False) | Image.str.contains(r'\\\\tasklist.exe', case=False) | Image.str.contains(r'\\\\whoami.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Remote Child Process From Outlook",
        "id": "e212d415-0e93-435f-9e1a-f29005bb4723",
        "status": "test",
        "description": "Detects a suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares).",
        "tags": [
            "attack.execution",
            "attack.t1059",
            "attack.t1202"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\outlook.exe', case=False) & Image.str.contains(r'\\\\\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "XSL Script Execution Via WMIC.EXE",
        "id": "05c36dd6-79d6-4a9a-97da-3db20298ab2d",
        "status": "test",
        "description": "Detects the execution of WMIC with the \"format\" flag to potentially load XSL files.\nAdversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\nExtensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1220"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\wmic.exe', case=False) & (CommandLine.str.contains(r'-format', case=False) | CommandLine.str.contains(r'/format', case=False) | CommandLine.str.contains(r'\u2013format', case=False) | CommandLine.str.contains(r'\u2014format', case=False) | CommandLine.str.contains(r'\u2015format', case=False)) & ~ (CommandLine.str.contains(r'Format:List', case=False) | CommandLine.str.contains(r'Format:htable', case=False) | CommandLine.str.contains(r'Format:hform', case=False) | CommandLine.str.contains(r'Format:table', case=False) | CommandLine.str.contains(r'Format:mof', case=False) | CommandLine.str.contains(r'Format:value', case=False) | CommandLine.str.contains(r'Format:rawxml', case=False) | CommandLine.str.contains(r'Format:xml', case=False) | CommandLine.str.contains(r'Format:csv', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Electron Application Child Processes",
        "id": "f26eb764-fd89-464b-85e2-dc4a8e6e77b8",
        "status": "test",
        "description": "Detects suspicious child processes of electron apps (teams, discord, slack, etc.). This could be a potential sign of \".asar\" file tampering (See reference section for more information) or binary execution proxy through specific CLI arguments (see related rule)\n",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\chrome.exe', case=False) | ParentImage.str.contains(r'\\\\discord.exe', case=False) | ParentImage.str.contains(r'\\\\GitHubDesktop.exe', case=False) | ParentImage.str.contains(r'\\\\keybase.exe', case=False) | ParentImage.str.contains(r'\\\\msedge.exe', case=False) | ParentImage.str.contains(r'\\\\msedgewebview2.exe', case=False) | ParentImage.str.contains(r'\\\\msteams.exe', case=False) | ParentImage.str.contains(r'\\\\slack.exe', case=False) | ParentImage.str.contains(r'\\\\teams.exe', case=False)) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\whoami.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r':\\\\ProgramData\\\\', case=False) | Image.str.contains(r':\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False)) & ~ (ParentImage.str.contains(r'\\\\Discord.exe', case=False) & Image.str.contains(r'\\\\cmd.exe', case=False) & CommandLine.str.contains(r'\\\\NVSMI\\\\nvidia-smi.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Bypass UAC via WSReset.exe",
        "id": "d797268e-28a9-49a7-b9a8-2f5039011c5c",
        "status": "test",
        "description": "Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\wsreset.exe', case=False) & ~ (Image.str.contains(r'\\\\conhost.exe', case=False) | OriginalFileName=='CONHOST.EXE')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Greedy File Deletion Using Del",
        "id": "204b17ae-4007-471b-917b-b917b315c5db",
        "status": "test",
        "description": "Detects execution of the \"del\" builtin command to remove files using greedy/wildcard expression. This is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & (CommandLine.str.contains(r'del ', case=False) | CommandLine.str.contains(r'erase ', case=False)) & (CommandLine.str.contains(r'\\\\\\*.au3', case=False) | CommandLine.str.contains(r'\\\\\\*.dll', case=False) | CommandLine.str.contains(r'\\\\\\*.exe', case=False) | CommandLine.str.contains(r'\\\\\\*.js', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Double Extension File Execution",
        "id": "1cdd9a09-06c9-4769-99ff-626e2b3991b8",
        "status": "stable",
        "description": "Detects suspicious use of an .exe extension after a non-executable file extension like .pdf.exe, a set of spaces or underlines to cloak the executable file in spear phishing campaigns",
        "tags": [
            "attack.initial-access",
            "attack.t1566.001"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'.doc.exe', case=False) | Image.str.contains(r'.docx.exe', case=False) | Image.str.contains(r'.xls.exe', case=False) | Image.str.contains(r'.xlsx.exe', case=False) | Image.str.contains(r'.ppt.exe', case=False) | Image.str.contains(r'.pptx.exe', case=False) | Image.str.contains(r'.rtf.exe', case=False) | Image.str.contains(r'.pdf.exe', case=False) | Image.str.contains(r'.txt.exe', case=False) | Image.str.contains(r'      .exe', case=False) | Image.str.contains(r'______.exe', case=False) | Image.str.contains(r'.doc.js', case=False) | Image.str.contains(r'.docx.js', case=False) | Image.str.contains(r'.xls.js', case=False) | Image.str.contains(r'.xlsx.js', case=False) | Image.str.contains(r'.ppt.js', case=False) | Image.str.contains(r'.pptx.js', case=False) | Image.str.contains(r'.rtf.js', case=False) | Image.str.contains(r'.pdf.js', case=False) | Image.str.contains(r'.txt.js', case=False)) & (CommandLine.str.contains(r'.doc.exe', case=False) | CommandLine.str.contains(r'.docx.exe', case=False) | CommandLine.str.contains(r'.xls.exe', case=False) | CommandLine.str.contains(r'.xlsx.exe', case=False) | CommandLine.str.contains(r'.ppt.exe', case=False) | CommandLine.str.contains(r'.pptx.exe', case=False) | CommandLine.str.contains(r'.rtf.exe', case=False) | CommandLine.str.contains(r'.pdf.exe', case=False) | CommandLine.str.contains(r'.txt.exe', case=False) | CommandLine.str.contains(r'      .exe', case=False) | CommandLine.str.contains(r'______.exe', case=False) | CommandLine.str.contains(r'.doc.js', case=False) | CommandLine.str.contains(r'.docx.js', case=False) | CommandLine.str.contains(r'.xls.js', case=False) | CommandLine.str.contains(r'.xlsx.js', case=False) | CommandLine.str.contains(r'.ppt.js', case=False) | CommandLine.str.contains(r'.pptx.js', case=False) | CommandLine.str.contains(r'.rtf.js', case=False) | CommandLine.str.contains(r'.pdf.js', case=False) | CommandLine.str.contains(r'.txt.js', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Enable LM Hash Storage - ProcCreation",
        "id": "98dedfdd-8333-49d4-9f23-d7018cccae53",
        "status": "test",
        "description": "Detects changes to the \"NoLMHash\" registry value in order to allow Windows to store LM Hashes.\nBy setting this registry value to \"0\" (DWORD), Windows will be allowed to store a LAN manager hash of your password in Active Directory and local SAM databases.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\System\\\\CurrentControlSet\\\\Control\\\\Lsa', case=False) & CommandLine.str.contains(r'NoLMHash', case=False) & CommandLine.str.contains(r' 0', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Cloudflared Tunnel Execution",
        "id": "9a019ffc-3580-4c9d-8d87-079f7e8d3fd4",
        "status": "test",
        "description": "Detects execution of the \"cloudflared\" tool to connect back to a tunnel. This was seen used by threat actors to maintain persistence and remote access to compromised networks.",
        "tags": [
            "attack.command-and-control",
            "attack.t1102",
            "attack.t1090",
            "attack.t1572"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r' tunnel ', case=False) & CommandLine.str.contains(r' run ', case=False) & (CommandLine.str.contains(r'-config ', case=False) | CommandLine.str.contains(r'-credentials-contents ', case=False) | CommandLine.str.contains(r'-credentials-file ', case=False) | CommandLine.str.contains(r'-token ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using PkgMgr and DISM",
        "id": "a743ceba-c771-4d75-97eb-8a90f7f4844c",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\pkgmgr.exe', case=False) & Image.str.contains(r'\\\\dism.exe', case=False) & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Defense Evasion Via Right-to-Left Override",
        "id": "ad691d92-15f2-4181-9aa4-723c74f9ddc3",
        "status": "test",
        "description": "Detects the presence of the \"u202+E\" character, which causes a terminal, browser, or operating system to render text in a right-to-left sequence.\nThis is used as an obfuscation and masquerading techniques.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\u202e', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Child Process Of Conhost.EXE",
        "id": "7dc2dedd-7603-461a-bc13-15803d132355",
        "status": "test",
        "description": "Detects uncommon \"conhost\" child processes. This could be a sign of \"conhost\" usage as a LOLBIN or potential process injection activity.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\conhost.exe', case=False) & ~ (Image.str.contains(r':\\\\Windows\\\\System32\\\\conhost.exe', case=False) | Image is null | Image=='') & ~ Provider_Name=='SystemTraceProvider-Process'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious PowerShell Mailbox Export to Share",
        "id": "889719ef-dd62-43df-86c3-768fb08dc7c0",
        "status": "test",
        "description": "Detects usage of the powerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations",
        "tags": [
            "attack.exfiltration"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'New-MailboxExportRequest', case=False) & CommandLine.str.contains(r' -Mailbox ', case=False) & CommandLine.str.contains(r' -FilePath \\\\\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Regsvr32 HTTP/FTP Pattern",
        "id": "867356ee-9352-41c9-a8f2-1be690d78216",
        "status": "test",
        "description": "Detects regsvr32 execution to download/install/register new DLLs that are hosted on Web or FTP servers.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.010"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\regsvr32.exe', case=False) | OriginalFileName=='REGSVR32.EXE') & (CommandLine.str.contains(r' /i', case=False) | CommandLine.str.contains(r' -i', case=False)) & (CommandLine.str.contains(r'ftp', case=False) | CommandLine.str.contains(r'http', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Defender Definition Files Removed",
        "id": "9719a8aa-401c-41af-8108-ced7ec9cd75c",
        "status": "test",
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\MpCmdRun.exe', case=False) | OriginalFileName=='MpCmdRun.exe') & CommandLine.str.contains(r' -RemoveDefinitions', case=False) & CommandLine.str.contains(r' -All', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "C# IL Code Compilation Via Ilasm.EXE",
        "id": "850d55f9-6eeb-4492-ad69-a72338f65ba4",
        "status": "test",
        "description": "Detects the use of \"Ilasm.EXE\" in order to compile C# intermediate (IL) code to EXE or DLL.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ilasm.exe', case=False) | OriginalFileName=='ilasm.exe') & (CommandLine.str.contains(r' /dll', case=False) | CommandLine.str.contains(r' /exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Start Windows Service Via Net.EXE",
        "id": "2a072a96-a086-49fa-bcb5-15cc5a619093",
        "status": "test",
        "description": "Detects the usage of the \"net.exe\" command to start a service using the \"start\" flag",
        "tags": [
            "attack.execution",
            "attack.t1569.002"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | OriginalFileName==['net.exe', 'net1.exe']) & CommandLine.str.contains(r' start ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious DLL Registered Via Odbcconf.EXE",
        "id": "ba4cfc11-d0fa-4d94-bf20-7c332c412e76",
        "status": "test",
        "description": "Detects execution of \"odbcconf\" with the \"REGSVR\" action where the DLL in question doesn't contain a \".dll\" extension. Which is often used as a method to evade defenses.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.008"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\odbcconf.exe', case=False) | OriginalFileName=='odbcconf.exe') & CommandLine.str.contains(r'REGSVR ', case=False) & ~ CommandLine.str.contains(r'.dll', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Schtasks Execution AppData Folder",
        "id": "c5c00f49-b3f9-45a6-997e-cfdecc6e1967",
        "status": "test",
        "description": "Detects the creation of a schtask that executes a file from C:\\Users\\<USER>\\AppData\\Local",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.t1053.005",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\schtasks.exe', case=False) & CommandLine.str.contains(r'/Create', case=False) & CommandLine.str.contains(r'/RU', case=False) & CommandLine.str.contains(r'/TR', case=False) & CommandLine.str.contains(r'C:\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) & (CommandLine.str.contains(r'NT AUT', case=False) | CommandLine.str.contains(r' SYSTEM ', case=False)) & ~ (ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) & ParentImage.str.contains(r'TeamViewer_.exe', case=False) & Image.str.contains(r'\\\\schtasks.exe', case=False) & CommandLine.str.contains(r'/TN TVInstallRestore', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Regsvr32 Execution From Potential Suspicious Location",
        "id": "9525dc73-0327-438c-8c04-13c0e037e9da",
        "status": "test",
        "description": "Detects execution of regsvr32 where the DLL is located in a potentially suspicious location.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.010"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\regsvr32.exe', case=False) | OriginalFileName=='REGSVR32.EXE') & (CommandLine.str.contains(r':\\\\ProgramData\\\\', case=False) | CommandLine.str.contains(r':\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LOLBIN Execution From Abnormal Drive",
        "id": "d4ca7c59-e9e4-42d8-bf57-91a776efcb87",
        "status": "test",
        "description": "Detects LOLBINs executing from an abnormal or uncommon drive such as a mounted ISO.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\calc.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\cmstp.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\installutil.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | OriginalFileName==['CALC.EXE', 'CertUtil.exe', 'CMSTP.EXE', 'cscript.exe', 'installutil.exe', 'MSHTA.EXE', 'REGSVR32.EXE', 'RUNDLL32.EXE', 'wscript.exe']) & ~ (CurrentDirectory.str.contains(r'C:\\\\', case=False) | CurrentDirectory=='' | CurrentDirectory is null)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Set Suspicious Files as System Files Using Attrib.EXE",
        "id": "efec536f-72e8-4656-8960-5e85d091345b",
        "status": "test",
        "description": "Detects the usage of attrib with the \"+s\" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights. The rule limits the search to specific extensions and directories to avoid FPs\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\attrib.exe', case=False) | OriginalFileName=='ATTRIB.EXE') & CommandLine.str.contains(r' +s', case=False) & (CommandLine.str.contains(r' %', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | CommandLine.str.contains(r'\\\\ProgramData\\\\', case=False) | CommandLine.str.contains(r'\\\\Downloads\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False)) & (CommandLine.str.contains(r'.bat', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.exe', case=False) | CommandLine.str.contains(r'.hta', case=False) | CommandLine.str.contains(r'.ps1', case=False) | CommandLine.str.contains(r'.vbe', case=False) | CommandLine.str.contains(r'.vbs', case=False)) & ~ (CommandLine.str.contains(r'\\\\Windows\\\\TEMP\\\\', case=False) & CommandLine.str.contains(r'.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Diskshadow Script Mode - Uncommon Script Extension Execution",
        "id": "1dde5376-a648-492e-9e54-4241dd9b0c7f",
        "status": "test",
        "description": "Detects execution of \"Diskshadow.exe\" in script mode to execute an script with a potentially uncommon extension.\nInitial baselining of the allowed extension list is required.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='diskshadow.exe' | Image.str.contains(r'\\\\diskshadow.exe', case=False)) & (CommandLine.str.contains(r'-s ', case=False) | CommandLine.str.contains(r'/s ', case=False) | CommandLine.str.contains(r'\u2013s ', case=False) | CommandLine.str.contains(r'\u2014s ', case=False) | CommandLine.str.contains(r'\u2015s ', case=False)) & ~ CommandLine.str.contains(r'.txt', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Arbitrary File Download Via IMEWDBLD.EXE",
        "id": "863218bd-c7d0-4c52-80cd-0a96c09f54af",
        "status": "test",
        "description": "Detects usage of \"IMEWDBLD.exe\" to download arbitrary files",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\IMEWDBLD.exe', case=False) | OriginalFileName=='imewdbld.exe') & (CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious File Download From File Sharing Domain Via PowerShell.EXE",
        "id": "b6e04788-29e1-4557-bb14-77f761848ab8",
        "status": "experimental",
        "description": "Detects potentially suspicious file downloads from file sharing domains using PowerShell.exe",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r'anonfiles.com', case=False) | CommandLine.str.contains(r'cdn.discordapp.com', case=False) | CommandLine.str.contains(r'ddns.net', case=False) | CommandLine.str.contains(r'dl.dropboxusercontent.com', case=False) | CommandLine.str.contains(r'ghostbin.co', case=False) | CommandLine.str.contains(r'glitch.me', case=False) | CommandLine.str.contains(r'gofile.io', case=False) | CommandLine.str.contains(r'hastebin.com', case=False) | CommandLine.str.contains(r'mediafire.com', case=False) | CommandLine.str.contains(r'mega.nz', case=False) | CommandLine.str.contains(r'onrender.com', case=False) | CommandLine.str.contains(r'pages.dev', case=False) | CommandLine.str.contains(r'paste.ee', case=False) | CommandLine.str.contains(r'pastebin.com', case=False) | CommandLine.str.contains(r'pastebin.pl', case=False) | CommandLine.str.contains(r'pastetext.net', case=False) | CommandLine.str.contains(r'pixeldrain.com', case=False) | CommandLine.str.contains(r'privatlab.com', case=False) | CommandLine.str.contains(r'privatlab.net', case=False) | CommandLine.str.contains(r'send.exploit.in', case=False) | CommandLine.str.contains(r'sendspace.com', case=False) | CommandLine.str.contains(r'storage.googleapis.com', case=False) | CommandLine.str.contains(r'storjshare.io', case=False) | CommandLine.str.contains(r'supabase.co', case=False) | CommandLine.str.contains(r'temp.sh', case=False) | CommandLine.str.contains(r'transfer.sh', case=False) | CommandLine.str.contains(r'trycloudflare.com', case=False) | CommandLine.str.contains(r'ufile.io', case=False) | CommandLine.str.contains(r'w3spaces.com', case=False) | CommandLine.str.contains(r'workers.dev', case=False)) & (CommandLine.str.contains(r'.DownloadString(', case=False) | CommandLine.str.contains(r'.DownloadFile(', case=False) | CommandLine.str.contains(r'Invoke-WebRequest ', case=False) | CommandLine.str.contains(r'iwr ', case=False) | CommandLine.str.contains(r'wget ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Python Inline Command Execution",
        "id": "899133d5-4d7c-4a7f-94ee-27355c879d90",
        "status": "test",
        "description": "Detects execution of python using the \"-c\" flag. This is could be used as a way to launch a reverse shell or execute live python code.",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='python.exe' | Image.str.contains(r'python.exe', case=False) | Image.str.contains(r'python3.exe', case=False) | Image.str.contains(r'python2.exe', case=False)) & CommandLine.str.contains(r' -c', case=False) & ~ (ParentImage.str.contains(r'C:\\\\Program Files\\\\Python', case=False) & ParentImage.str.contains(r'\\\\python.exe', case=False) & ParentCommandLine.str.contains(r'-E -s -m ensurepip -U --default-pip', case=False)) & ~ (ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\Code.exe', case=False) | CommandLine.str.contains(r'<pip-setuptools-caller>', case=False) & CommandLine.str.contains(r'exec(compile(', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Hidden Powershell in Link File Pattern",
        "id": "30e92f50-bb5a-4884-98b5-d20aa80f3d7a",
        "status": "test",
        "description": "Detects events that appear when a user click on a link file with a powershell command in it",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage=='C:\\\\Windows\\\\explorer.exe' & Image=='C:\\\\Windows\\\\System32\\\\cmd.exe' & CommandLine.str.contains(r'powershell', case=False) & CommandLine.str.contains(r'.lnk', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Diskshadow Script Mode - Execution From Potential Suspicious Location",
        "id": "fa1a7e52-3d02-435b-81b8-00da14dd66c1",
        "status": "test",
        "description": "Detects execution of \"Diskshadow.exe\" in script mode using the \"/s\" flag where the script is located in a potentially suspicious location.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='diskshadow.exe' | Image.str.contains(r'\\\\diskshadow.exe', case=False)) & (CommandLine.str.contains(r'-s ', case=False) | CommandLine.str.contains(r'/s ', case=False) | CommandLine.str.contains(r'\u2013s ', case=False) | CommandLine.str.contains(r'\u2014s ', case=False) | CommandLine.str.contains(r'\u2015s ', case=False)) & (CommandLine.str.contains(r':\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False) | CommandLine.str.contains(r'\\\\ProgramData\\\\', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential NTLM Coercion Via Certutil.EXE",
        "id": "6c6d9280-e6d0-4b9d-80ac-254701b64916",
        "status": "test",
        "description": "Detects possible NTLM coercion via certutil using the 'syncwithWU' flag",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certutil.exe', case=False) | OriginalFileName=='CertUtil.exe') & CommandLine.str.contains(r' -syncwithWU ', case=False) & CommandLine.str.contains(r' \\\\\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Recon Activity Via Nltest.EXE",
        "id": "5cc90652-4cbd-4241-aa3b-4b462fa5a248",
        "status": "test",
        "description": "Detects nltest commands that can be used for information discovery",
        "tags": [
            "attack.discovery",
            "attack.t1016",
            "attack.t1482"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\nltest.exe', case=False) | OriginalFileName=='nltestrk.exe') & (CommandLine.str.contains(r'server', case=False) & CommandLine.str.contains(r'query', case=False) | CommandLine.str.contains(r'/user', case=False) | CommandLine.str.contains(r'all_trusts', case=False) | CommandLine.str.contains(r'dclist:', case=False) | CommandLine.str.contains(r'dnsgetdc:', case=False) | CommandLine.str.contains(r'domain_trusts', case=False) | CommandLine.str.contains(r'dsgetdc:', case=False) | CommandLine.str.contains(r'parentdomain', case=False) | CommandLine.str.contains(r'trusted_domains', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential SPN Enumeration Via Setspn.EXE",
        "id": "1eeed653-dbc8-4187-ad0c-eeebb20e6599",
        "status": "test",
        "description": "Detects service principal name (SPN) enumeration used for Kerberoasting",
        "tags": [
            "attack.credential-access",
            "attack.t1558.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\setspn.exe', case=False) | OriginalFileName=='setspn.exe' | Description.str.contains(r'Query or reset the computer', case=False) & Description.str.contains(r'SPN attribute', case=False)) & (CommandLine.str.contains(r' -q ', case=False) | CommandLine.str.contains(r' /q ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Computer Discovery And Export Via Get-ADComputer Cmdlet",
        "id": "435e10e4-992a-4281-96f3-38b11106adde",
        "status": "test",
        "description": "Detects usage of the Get-ADComputer cmdlet to collect computer information and output it to a file",
        "tags": [
            "attack.discovery",
            "attack.t1033"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & CommandLine.str.contains(r'Get-ADComputer ', case=False) & CommandLine.str.contains(r' -Filter \\*', case=False) & (CommandLine.str.contains(r' > ', case=False) | CommandLine.str.contains(r' | Select ', case=False) | CommandLine.str.contains(r'Out-File', case=False) | CommandLine.str.contains(r'Set-Content', case=False) | CommandLine.str.contains(r'Add-Content', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HH.EXE Execution",
        "id": "68c8acb4-1b60-4890-8e82-3ddf7a6dba84",
        "status": "test",
        "description": "Detects the execution of \"hh.exe\" to open \".chm\" files.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='HH.exe' | Image.str.contains(r'\\\\hh.exe', case=False)) & CommandLine.str.contains(r'.chm', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Arbitrary File Download Using Office Application",
        "id": "4ae3e30b-b03f-43aa-87e3-b622f4048eed",
        "status": "test",
        "description": "Detects potential arbitrary file download using a Microsoft Office application",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\EXCEL.EXE', case=False) | Image.str.contains(r'\\\\POWERPNT.EXE', case=False) | Image.str.contains(r'\\\\WINWORD.exe', case=False) | OriginalFileName==['Excel.exe', 'POWERPNT.EXE', 'WinWord.exe']) & (CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious New Service Creation",
        "id": "17a1be64-8d88-40bf-b5ff-a4f7a50ebcc8",
        "status": "test",
        "description": "Detects creation of a new service via \"sc\" command or the powershell \"new-service\" cmdlet with suspicious binary paths",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1543.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\sc.exe', case=False) & CommandLine.str.contains(r'create', case=False) & CommandLine.str.contains(r'binPath=', case=False) | CommandLine.str.contains(r'New-Service', case=False) & CommandLine.str.contains(r'-BinaryPathName', case=False)) & (CommandLine.str.contains(r'powershell', case=False) | CommandLine.str.contains(r'mshta', case=False) | CommandLine.str.contains(r'wscript', case=False) | CommandLine.str.contains(r'cscript', case=False) | CommandLine.str.contains(r'svchost', case=False) | CommandLine.str.contains(r'dllhost', case=False) | CommandLine.str.contains(r'cmd ', case=False) | CommandLine.str.contains(r'cmd.exe /c', case=False) | CommandLine.str.contains(r'cmd.exe /k', case=False) | CommandLine.str.contains(r'cmd.exe /r', case=False) | CommandLine.str.contains(r'rundll32', case=False) | CommandLine.str.contains(r'C:\\\\Users\\\\Public', case=False) | CommandLine.str.contains(r'\\\\Downloads\\\\', case=False) | CommandLine.str.contains(r'\\\\Desktop\\\\', case=False) | CommandLine.str.contains(r'\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\', case=False) | CommandLine.str.contains(r'C:\\\\Windows\\\\TEMP\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Service Path Modification",
        "id": "138d3531-8793-4f50-a2cd-f291b2863d78",
        "status": "test",
        "description": "Detects service path modification via the \"sc\" binary to a suspicious command or path",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1543.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\sc.exe', case=False) & CommandLine.str.contains(r'config', case=False) & CommandLine.str.contains(r'binPath', case=False) & (CommandLine.str.contains(r'powershell', case=False) | CommandLine.str.contains(r'cmd ', case=False) | CommandLine.str.contains(r'mshta', case=False) | CommandLine.str.contains(r'wscript', case=False) | CommandLine.str.contains(r'cscript', case=False) | CommandLine.str.contains(r'rundll32', case=False) | CommandLine.str.contains(r'svchost', case=False) | CommandLine.str.contains(r'dllhost', case=False) | CommandLine.str.contains(r'cmd.exe /c', case=False) | CommandLine.str.contains(r'cmd.exe /k', case=False) | CommandLine.str.contains(r'cmd.exe /r', case=False) | CommandLine.str.contains(r'cmd /c', case=False) | CommandLine.str.contains(r'cmd /k', case=False) | CommandLine.str.contains(r'cmd /r', case=False) | CommandLine.str.contains(r'C:\\\\Users\\\\Public', case=False) | CommandLine.str.contains(r'\\\\Downloads\\\\', case=False) | CommandLine.str.contains(r'\\\\Desktop\\\\', case=False) | CommandLine.str.contains(r'\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\', case=False) | CommandLine.str.contains(r'C:\\\\Windows\\\\TEMP\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use of FSharp Interpreters",
        "id": "b96b2031-7c17-4473-afe7-a30ce714db29",
        "status": "test",
        "description": "Detects the execution of FSharp Interpreters \"FsiAnyCpu.exe\" and \"FSi.exe\"\nBoth can be used for AWL bypass and to execute F# code via scripts or inline.\n",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\fsi.exe', case=False) | Image.str.contains(r'\\\\fsianycpu.exe', case=False) | OriginalFileName==['fsi.exe', 'fsianycpu.exe'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Firewall Rule Update Via Netsh.EXE",
        "id": "a70dcb37-3bee-453a-99df-d0c683151be6",
        "status": "test",
        "description": "Detects execution of netsh with the \"advfirewall\" and the \"set\" option in order to set new values for properties of a existing rule",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\netsh.exe', case=False) | OriginalFileName=='netsh.exe') & CommandLine.str.contains(r' firewall ', case=False) & CommandLine.str.contains(r' set ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Script Event Consumer Spawning Process",
        "id": "f6d1dd2f-b8ce-40ca-bc23-062efb686b34",
        "status": "test",
        "description": "Detects a suspicious child process of Script Event Consumer (scrcons.exe).",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\scrcons.exe', case=False) & (Image.str.contains(r'\\\\svchost.exe', case=False) | Image.str.contains(r'\\\\dllhost.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) | Image.str.contains(r'\\\\msbuild.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HTML Help HH.EXE Suspicious Child Process",
        "id": "52cad028-0ff0-4854-8f67-d25dfcbc78b4",
        "status": "test",
        "description": "Detects a suspicious child process of a Microsoft HTML Help (HH.exe)",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.initial-access",
            "attack.t1047",
            "attack.t1059.001",
            "attack.t1059.003",
            "attack.t1059.005",
            "attack.t1059.007",
            "attack.t1218",
            "attack.t1218.001",
            "attack.t1218.010",
            "attack.t1218.011",
            "attack.t1566",
            "attack.t1566.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\hh.exe', case=False) & (Image.str.contains(r'\\\\CertReq.exe', case=False) | Image.str.contains(r'\\\\CertUtil.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\installutil.exe', case=False) | Image.str.contains(r'\\\\MSbuild.exe', case=False) | Image.str.contains(r'\\\\MSHTA.EXE', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - CsExec Execution",
        "id": "d08a2711-ee8b-4323-bdec-b7d85e892b31",
        "status": "test",
        "description": "Detects the use of the lesser known remote execution tool named CsExec a PsExec alternative",
        "tags": [
            "attack.resource-development",
            "attack.t1587.001",
            "attack.execution",
            "attack.t1569.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\csexec.exe', case=False) | Description=='csexec')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Characteristics Due to Missing Fields",
        "id": "9637e8a5-7131-4f7f-bdc7-2b05d8670c43",
        "status": "test",
        "description": "Detects Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe",
        "tags": [
            "attack.execution",
            "attack.t1059.006"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description=='?' & FileVersion=='?' | Description=='?' & Product=='?' | Description=='?' & Company=='?') & Image.str.contains(r'\\\\Downloads\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Computer Password Change Via Ksetup.EXE",
        "id": "de16d92c-c446-4d53-8938-10aeef41c8b6",
        "status": "test",
        "description": "Detects password change for the computer's domain account or host principal via \"ksetup.exe\"",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ksetup.exe', case=False) | OriginalFileName=='ksetup.exe') & CommandLine.str.contains(r' /setcomputerpassword ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon FileSystem Load Attempt By Format.com",
        "id": "9fb6b26e-7f9e-4517-a48b-8cac4a1b6c60",
        "status": "test",
        "description": "Detects the execution of format.com with an uncommon filesystem selection that could indicate a defense evasion activity in which \"format.com\" is used to load malicious DLL files or other programs.\n",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\format.com', case=False) & CommandLine.str.contains(r'/fs:', case=False) & ~ (CommandLine.str.contains(r'/fs:exFAT', case=False) | CommandLine.str.contains(r'/fs:FAT', case=False) | CommandLine.str.contains(r'/fs:NTFS', case=False) | CommandLine.str.contains(r'/fs:ReFS', case=False) | CommandLine.str.contains(r'/fs:UDF', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Download from Office Domain",
        "id": "00d49ed5-4491-4271-a8db-650a4ef6f8c1",
        "status": "test",
        "description": "Detects suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents",
        "tags": [
            "attack.command-and-control",
            "attack.t1105",
            "attack.t1608"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\curl.exe', case=False) | Image.str.contains(r'\\\\wget.exe', case=False) | CommandLine.str.contains(r'Invoke-WebRequest', case=False) | CommandLine.str.contains(r'iwr ', case=False) | CommandLine.str.contains(r'curl ', case=False) | CommandLine.str.contains(r'wget ', case=False) | CommandLine.str.contains(r'Start-BitsTransfer', case=False) | CommandLine.str.contains(r'.DownloadFile(', case=False) | CommandLine.str.contains(r'.DownloadString(', case=False)) & (CommandLine.str.contains(r'https://attachment.outlook.live.net/owa/', case=False) | CommandLine.str.contains(r'https://onenoteonlinesync.onenote.com/onenoteonlinesync/', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Esentutl Gather Credentials",
        "id": "7df1713a-1a5b-4a4b-a071-dc83b144a101",
        "status": "test",
        "description": "Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.",
        "tags": [
            "attack.credential-access",
            "attack.t1003",
            "attack.t1003.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'esentutl', case=False) & CommandLine.str.contains(r' /p', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious PowerShell Encoded Command Patterns",
        "id": "b9d9cc83-380b-4ba3-8d8f-60c0e7e2930c",
        "status": "test",
        "description": "Detects PowerShell command line patterns in combincation with encoded commands that often appear in malware infection chains",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.Exe', 'pwsh.dll']) & (CommandLine.str.contains(r' -e ', case=False) | CommandLine.str.contains(r' -en ', case=False) | CommandLine.str.contains(r' -enc ', case=False) | CommandLine.str.contains(r' -enco', case=False)) & (CommandLine.str.contains(r' JAB', case=False) | CommandLine.str.contains(r' SUVYI', case=False) | CommandLine.str.contains(r' SQBFAFgA', case=False) | CommandLine.str.contains(r' aWV4I', case=False) | CommandLine.str.contains(r' IAB', case=False) | CommandLine.str.contains(r' PAA', case=False) | CommandLine.str.contains(r' aQBlAHgA', case=False)) & ~ (ParentImage.str.contains(r'C:\\\\Packages\\\\Plugins\\\\Microsoft.GuestConfiguration.ConfigurationforWindows\\\\', case=False) | ParentImage.str.contains(r'\\\\gc_worker.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Audio Capture via SoundRecorder",
        "id": "83865853-59aa-449e-9600-74b9d89a6d6e",
        "status": "test",
        "description": "Detect attacker collecting audio via SoundRecorder application.",
        "tags": [
            "attack.collection",
            "attack.t1123"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\SoundRecorder.exe', case=False) & CommandLine.str.contains(r'/FILE', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Obfuscated IP Via CLI",
        "id": "56d19cb4-6414-4769-9644-1ed35ffbb148",
        "status": "test",
        "description": "Detects usage of an encoded/obfuscated version of an IP address (hex, octal, etc.) via command line",
        "tags": [
            "attack.discovery"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ping.exe', case=False) | Image.str.contains(r'\\\\arp.exe', case=False)) & (CommandLine.str.contains(r' 0x', case=False) | CommandLine.str.contains(r'//0x', case=False) | CommandLine.str.contains(r'.0x', case=False) | CommandLine.str.contains(r'.00x', case=False) | CommandLine.str.contains(r'http://%', case=False) & CommandLine.str.contains(r'%2e', case=False) | CommandLine.str.contains(r'https?://[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.0[0-9]{3,4}') | CommandLine.str.contains(r'https?://[0-9]{1,3}\\\\.0[0-9]{3,7}') | CommandLine.str.contains(r'https?://0[0-9]{3,11}') | CommandLine.str.contains(r'https?://(0[0-9]{1,11}\\\\.){3}0[0-9]{1,11}') | CommandLine.str.contains(r'https?://0[0-9]{1,11}') | CommandLine.str.contains(r' [0-7]{7,13}')) & ~ CommandLine.str.contains(r'https?://((25[0-5]|(2[0-4]|1\\\\d|[1-9])?\\\\d)(\\\\.|\\\\b)){4}')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Setup16.EXE Execution With Custom .Lst File",
        "id": "99c8be4f-3087-4f9f-9c24-8c7e257b442e",
        "status": "experimental",
        "description": "Detects the execution of \"Setup16.EXE\" and old installation utility with a custom \".lst\" file.\nThese \".lst\" file can contain references to external program that \"Setup16.EXE\" will execute.\nAttackers and adversaries might leverage this as a living of the land utility.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage=='C:\\\\Windows\\\\SysWOW64\\\\setup16.exe' & ParentCommandLine.str.contains(r' -m ', case=False) & ~ Image.str.contains(r'C:\\\\~MSSETUP.T\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Regedit as Trusted Installer",
        "id": "883835a7-df45-43e4-bf1d-4268768afda4",
        "status": "test",
        "description": "Detects a regedit started with TrustedInstaller privileges or by ProcessHacker.exe",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1548"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\regedit.exe', case=False) & (ParentImage.str.contains(r'\\\\TrustedInstaller.exe', case=False) | ParentImage.str.contains(r'\\\\ProcessHacker.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Child Process Of Manage Engine ServiceDesk",
        "id": "cea2b7ea-792b-405f-95a1-b903ea06458f",
        "status": "test",
        "description": "Detects suspicious child processes of the \"Manage Engine ServiceDesk Plus\" Java web service",
        "tags": [
            "attack.command-and-control",
            "attack.t1102"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\ManageEngine\\\\ServiceDesk\\\\', case=False) & ParentImage.str.contains(r'\\\\java.exe', case=False) & (Image.str.contains(r'\\\\AppVLP.exe', case=False) | Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\bitsadmin.exe', case=False) | Image.str.contains(r'\\\\calc.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\curl.exe', case=False) | Image.str.contains(r'\\\\forfiles.exe', case=False) | Image.str.contains(r'\\\\mftrace.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | Image.str.contains(r'\\\\notepad.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\query.exe', case=False) | Image.str.contains(r'\\\\reg.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\scrcons.exe', case=False) | Image.str.contains(r'\\\\sh.exe', case=False) | Image.str.contains(r'\\\\systeminfo.exe', case=False) | Image.str.contains(r'\\\\whoami.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False)) & ~ ((Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False)) & CommandLine.str.contains(r' stop', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Suspicious ActiveDirectory Enumeration Via AdFind.EXE",
        "id": "455b9d50-15a1-4b99-853f-8d37655a4c1b",
        "status": "test",
        "description": "Detects active directory enumeration activity using known AdFind CLI flags",
        "tags": [
            "attack.discovery",
            "attack.t1087.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'lockoutduration', case=False) | CommandLine.str.contains(r'lockoutthreshold', case=False) | CommandLine.str.contains(r'lockoutobservationwindow', case=False) | CommandLine.str.contains(r'maxpwdage', case=False) | CommandLine.str.contains(r'minpwdage', case=False) | CommandLine.str.contains(r'minpwdlength', case=False) | CommandLine.str.contains(r'pwdhistorylength', case=False) | CommandLine.str.contains(r'pwdproperties', case=False) | CommandLine.str.contains(r'-sc admincountdmp', case=False) | CommandLine.str.contains(r'-sc exchaddresses', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Process Created Via Taskmgr.EXE",
        "id": "3d7679bd-0c00-440c-97b0-3f204273e6c7",
        "status": "test",
        "description": "Detects the creation of a process via the Windows task manager. This might be an attempt to bypass UAC",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\taskmgr.exe', case=False) & ~ (Image.str.contains(r':\\\\Windows\\\\System32\\\\mmc.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\resmon.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\Taskmgr.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Gpscript Execution",
        "id": "1e59c230-6670-45bf-83b0-98903780607e",
        "status": "test",
        "description": "Detects the execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\gpscript.exe', case=False) | OriginalFileName=='GPSCRIPT.EXE') & (CommandLine.str.contains(r' /logon', case=False) | CommandLine.str.contains(r' /startup', case=False)) & ~ ParentCommandLine=='C:\\\\windows\\\\system32\\\\svchost.exe -k netsvcs -p -s gpsvc'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Replace.exe Usage",
        "id": "9292293b-8496-4715-9db6-37028dcda4b3",
        "status": "test",
        "description": "Detects the use of Replace.exe which can be used to replace file with another file",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\replace.exe', case=False) & (CommandLine.str.contains(r'-a', case=False) | CommandLine.str.contains(r'/a', case=False) | CommandLine.str.contains(r'\u2013a', case=False) | CommandLine.str.contains(r'\u2014a', case=False) | CommandLine.str.contains(r'\u2015a', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sdclt Child Processes",
        "id": "da2738f2-fadb-4394-afa7-0a0674885afa",
        "status": "test",
        "description": "A General detection for sdclt spawning new processes. This could be an indicator of sdclt being used for bypass UAC techniques.",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\sdclt.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Rubeus Execution",
        "id": "7ec2c172-dceb-4c10-92c9-87c1881b7e18",
        "status": "stable",
        "description": "Detects the execution of the hacktool Rubeus via PE information of command line parameters",
        "tags": [
            "attack.credential-access",
            "attack.t1003",
            "attack.t1558.003",
            "attack.lateral-movement",
            "attack.t1550.003"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Rubeus.exe', case=False) | OriginalFileName=='Rubeus.exe' | Description=='Rubeus' | CommandLine.str.contains(r'asreproast ', case=False) | CommandLine.str.contains(r'dump /service:krbtgt ', case=False) | CommandLine.str.contains(r'dump /luid:0x', case=False) | CommandLine.str.contains(r'kerberoast ', case=False) | CommandLine.str.contains(r'createnetonly /program:', case=False) | CommandLine.str.contains(r'ptt /ticket:', case=False) | CommandLine.str.contains(r'/impersonateuser:', case=False) | CommandLine.str.contains(r'renew /ticket:', case=False) | CommandLine.str.contains(r'asktgt /user:', case=False) | CommandLine.str.contains(r'harvest /interval:', case=False) | CommandLine.str.contains(r's4u /user:', case=False) | CommandLine.str.contains(r's4u /ticket:', case=False) | CommandLine.str.contains(r'hash /password:', case=False) | CommandLine.str.contains(r'golden /aes256:', case=False) | CommandLine.str.contains(r'silver /user:', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass via ICMLuaUtil",
        "id": "49f2f17b-b4c8-4172-a68b-d5bf95d05130",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\dllhost.exe', case=False) & (ParentCommandLine.str.contains(r'/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}', case=False) | ParentCommandLine.str.contains(r'/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}', case=False)) & ~ (Image.str.contains(r'\\\\WerFault.exe', case=False) | OriginalFileName=='WerFault.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl",
        "id": "074e0ded-6ced-4ebd-8b4d-53f55908119d",
        "status": "test",
        "description": "Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1216"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'winrm', case=False) & (CommandLine.str.contains(r'format:pretty', case=False) | CommandLine.str.contains(r'format:\"pretty\"', case=False) | CommandLine.str.contains(r'format:\"text\"', case=False) | CommandLine.str.contains(r'format:text', case=False)) & ~ (Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Browser Execution In Headless Mode",
        "id": "ef9dcfed-690c-4c5d-a9d1-482cd422225c",
        "status": "test",
        "description": "Detects execution of Chromium based browser in headless mode",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\brave.exe', case=False) | Image.str.contains(r'\\\\chrome.exe', case=False) | Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False)) & CommandLine.str.contains(r'--headless', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Chromium Browser Instance Executed With Custom Extension",
        "id": "27ba3207-dd30-4812-abbf-5d20c57d474e",
        "status": "test",
        "description": "Detects a suspicious process spawning a Chromium based browser process with the 'load-extension' flag to start an instance with a custom extension",
        "tags": [
            "attack.persistence",
            "attack.t1176"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\cmd.exe', case=False) | ParentImage.str.contains(r'\\\\cscript.exe', case=False) | ParentImage.str.contains(r'\\\\mshta.exe', case=False) | ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False) | ParentImage.str.contains(r'\\\\regsvr32.exe', case=False) | ParentImage.str.contains(r'\\\\rundll32.exe', case=False) | ParentImage.str.contains(r'\\\\wscript.exe', case=False)) & (Image.str.contains(r'\\\\brave.exe', case=False) | Image.str.contains(r'\\\\chrome.exe', case=False) | Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False)) & CommandLine.str.contains(r'--load-extension=', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Debugger Registration Cmdline",
        "id": "ae215552-081e-44c7-805f-be16f975c8a2",
        "status": "test",
        "description": "Detects the registration of a debugger for a program that is available in the logon screen (sticky key backdoor).",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1546.008"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\CurrentVersion\\\\Image File Execution Options\\\\', case=False) & (CommandLine.str.contains(r'sethc.exe', case=False) | CommandLine.str.contains(r'utilman.exe', case=False) | CommandLine.str.contains(r'osk.exe', case=False) | CommandLine.str.contains(r'magnify.exe', case=False) | CommandLine.str.contains(r'narrator.exe', case=False) | CommandLine.str.contains(r'displayswitch.exe', case=False) | CommandLine.str.contains(r'atbroker.exe', case=False) | CommandLine.str.contains(r'HelpPane.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Redirection to Local Admin Share",
        "id": "ab9e3b40-0c85-4ba1-aede-455d226fd124",
        "status": "test",
        "description": "Detects a suspicious output redirection to the local admins share, this technique is often found in malicious scripts or hacktool stagers",
        "tags": [
            "attack.exfiltration",
            "attack.t1048"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'>', case=False) & (CommandLine.str.contains(r'\\\\\\\\127.0.0.1\\\\admin$\\\\', case=False) | CommandLine.str.contains(r'\\\\\\\\localhost\\\\admin$\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Firewall Rule Added Via Netsh.EXE",
        "id": "cd5cfd80-aa5f-44c0-9c20-108c4ae12e3c",
        "status": "test",
        "description": "Detects the addition of a new rule to the Windows firewall via netsh",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004",
            "attack.s0246"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\netsh.exe', case=False) | OriginalFileName=='netsh.exe') & CommandLine.str.contains(r' firewall ', case=False) & CommandLine.str.contains(r' add ', case=False) & ~ (CommandLine.str.contains(r'*advfirewall firewall add rule name=Dropbox dir=in action=allow \"program=*:\\\\Program Files (x86)\\\\Dropbox\\\\Client\\\\Dropbox.exe\" enable=yes profile=Any*') | CommandLine.str.contains(r'*advfirewall firewall add rule name=Dropbox dir=in action=allow \"program=*:\\\\Program Files\\\\Dropbox\\\\Client\\\\Dropbox.exe\" enable=yes profile=Any*'))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Data Exfiltration Activity Via CommandLine Tools",
        "id": "7d1aaf3d-4304-425c-b7c3-162055e0b3ab",
        "status": "test",
        "description": "Detects the use of various CLI utilities exfiltrating data via web requests",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False)) & (CommandLine.str.contains(r'Invoke-WebRequest', case=False) | CommandLine.str.contains(r'iwr ', case=False) | CommandLine.str.contains(r'wget ', case=False) | CommandLine.str.contains(r'curl ', case=False)) & CommandLine.str.contains(r' -ur', case=False) & CommandLine.str.contains(r' -me', case=False) & CommandLine.str.contains(r' -b', case=False) & CommandLine.str.contains(r' POST ', case=False) | Image.str.contains(r'\\\\curl.exe', case=False) & CommandLine.str.contains(r'--ur', case=False) & (CommandLine.str.contains(r' -d ', case=False) | CommandLine.str.contains(r' --data ', case=False)) | Image.str.contains(r'\\\\wget.exe', case=False) & (CommandLine.str.contains(r'--post-data', case=False) | CommandLine.str.contains(r'--post-file', case=False))) & (CommandLine.str.contains(r'Get-Content', case=False) | CommandLine.str.contains(r'GetBytes', case=False) | CommandLine.str.contains(r'hostname', case=False) | CommandLine.str.contains(r'ifconfig', case=False) | CommandLine.str.contains(r'ipconfig', case=False) | CommandLine.str.contains(r'net view', case=False) | CommandLine.str.contains(r'netstat', case=False) | CommandLine.str.contains(r'nltest', case=False) | CommandLine.str.contains(r'qprocess', case=False) | CommandLine.str.contains(r'sc query', case=False) | CommandLine.str.contains(r'systeminfo', case=False) | CommandLine.str.contains(r'tasklist', case=False) | CommandLine.str.contains(r'ToBase64String', case=False) | CommandLine.str.contains(r'whoami', case=False) | CommandLine.str.contains(r'type ', case=False) & CommandLine.str.contains(r' > ', case=False) & CommandLine.str.contains(r' C:\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Execution of InstallUtil Without Log",
        "id": "d042284c-a296-4988-9be5-f424fadcc28c",
        "status": "test",
        "description": "Uses the .NET InstallUtil.exe application in order to execute image without log",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\InstallUtil.exe', case=False) & Image.str.contains(r'Microsoft.NET\\\\Framework', case=False) & CommandLine.str.contains(r'/logfile= ', case=False) & CommandLine.str.contains(r'/LogToConsole=false', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Browser Started with Remote Debugging",
        "id": "b3d34dc5-2efd-4ae3-845f-8ec14921f449",
        "status": "test",
        "description": "Detects browsers starting with the remote debugging flags. Which is a technique often used to perform browser injection attacks",
        "tags": [
            "attack.credential-access",
            "attack.t1185"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' --remote-debugging-', case=False) | Image.str.contains(r'\\\\firefox.exe', case=False) & CommandLine.str.contains(r' -start-debugger-server', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Weak or Abused Passwords In CLI",
        "id": "91edcfb1-2529-4ac2-9ecc-7617f895c7e4",
        "status": "test",
        "description": "Detects weak passwords or often abused passwords (seen used by threat actors) via the CLI.\nAn example would be a threat actor creating a new user via the net command and providing the password inline\n",
        "tags": [
            "attack.defense-evasion",
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'123456789', case=False) | CommandLine.str.contains(r'123123qwE', case=False) | CommandLine.str.contains(r'Asd123.aaaa', case=False) | CommandLine.str.contains(r'Decryptme', case=False) | CommandLine.str.contains(r'P@ssw0rd!', case=False) | CommandLine.str.contains(r'Pass8080', case=False) | CommandLine.str.contains(r'password123', case=False) | CommandLine.str.contains(r'test@202', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Attempt Via Run Keys Using Reg.EXE",
        "id": "de587dce-915e-4218-aac4-835ca6af6f70",
        "status": "test",
        "description": "Detects suspicious command line reg.exe tool adding key to RUN key in Registry",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'reg', case=False) & CommandLine.str.contains(r' ADD ', case=False) & CommandLine.str.contains(r'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Detection of PowerShell Execution via Sqlps.exe",
        "id": "0152550d-3a26-4efd-9f0e-54a0b28ae2f3",
        "status": "test",
        "description": "This rule detects execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\sqlps.exe', case=False) | (Image.str.contains(r'\\\\sqlps.exe', case=False) | OriginalFileName=='sqlps.exe') & ~ ParentImage.str.contains(r'\\\\sqlagent.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential File Overwrite Via Sysinternals SDelete",
        "id": "a4824fca-976f-4964-b334-0621379e84c4",
        "status": "test",
        "description": "Detects the use of SDelete to erase a file not the free space",
        "tags": [
            "attack.impact",
            "attack.t1485"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & OriginalFileName=='sdelete.exe' & ~ (CommandLine.str.contains(r' -h', case=False) | CommandLine.str.contains(r' -c', case=False) | CommandLine.str.contains(r' -z', case=False) | CommandLine.str.contains(r' /?', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed BrowserCore.EXE Execution",
        "id": "8a4519e8-e64a-40b6-ae85-ba8ad2177559",
        "status": "test",
        "description": "Detects process creation with a renamed BrowserCore.exe (used to extract Azure tokens)",
        "tags": [
            "attack.t1528",
            "attack.t1036.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & OriginalFileName=='BrowserCore.exe' & ~ Image.str.contains(r'\\\\BrowserCore.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "System Disk And Volume Reconnaissance Via Wmic.EXE",
        "id": "c79da740-5030-45ec-a2e0-479e824a562c",
        "status": "test",
        "description": "An adversary might use WMI to discover information about the system, such as the volume name, size,\nfree space, and other disk information. This can be done using the `wmic` command-line utility and has been\nobserved being used by threat actors such as Volt Typhoon.\n",
        "tags": [
            "attack.execution",
            "attack.discovery",
            "attack.t1047",
            "attack.t1082"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\WMIC.exe', case=False) | OriginalFileName=='wmic.exe') & (CommandLine.str.contains(r'volume', case=False) | CommandLine.str.contains(r'path win32_logicaldisk', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Privilege Escalation via Named Pipe Impersonation",
        "id": "9bd04a79-dabe-4f1f-a5ff-92430265c96b",
        "status": "test",
        "description": "Detects a remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity.",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | OriginalFileName==['Cmd.Exe', 'PowerShell.EXE']) & CommandLine.str.contains(r'echo', case=False) & CommandLine.str.contains(r'>', case=False) & CommandLine.str.contains(r'\\\\\\\\.\\\\pipe\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Visual Studio NodejsTools PressAnyKey Renamed Execution",
        "id": "65c3ca2c-525f-4ced-968e-246a713d164f",
        "status": "test",
        "description": "Detects renamed execution of \"Microsoft.NodejsTools.PressAnyKey.exe\", which can be abused as a LOLBIN to execute arbitrary binaries",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & OriginalFileName=='Microsoft.NodejsTools.PressAnyKey.exe' & ~ Image.str.contains(r'\\\\Microsoft.NodejsTools.PressAnyKey.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DLL Loaded via CertOC.EXE",
        "id": "242301bc-f92f-4476-8718-78004a6efd9f",
        "status": "test",
        "description": "Detects when a user installs certificates by using CertOC.exe to loads the target DLL file.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certoc.exe', case=False) | OriginalFileName=='CertOC.exe') & (CommandLine.str.contains(r' -LoadDLL ', case=False) | CommandLine.str.contains(r' /LoadDLL ', case=False) | CommandLine.str.contains(r' \u2013LoadDLL ', case=False) | CommandLine.str.contains(r' \u2014LoadDLL ', case=False) | CommandLine.str.contains(r' \u2015LoadDLL ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sysprep on AppData Folder",
        "id": "d5b9ae7a-e6fc-405e-80ff-2ff9dcc64e7e",
        "status": "test",
        "description": "Detects suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec)",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\sysprep.exe', case=False) & CommandLine.str.contains(r'\\\\AppData\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Quarks PwDump Execution",
        "id": "0685b176-c816-4837-8e7b-1216f346636b",
        "status": "test",
        "description": "Detects usage of the Quarks PwDump tool via commandline arguments",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\QuarksPwDump.exe', case=False) | CommandLine==[' -dhl', ' --dump-hash-local', ' -dhdc', ' --dump-hash-domain-cached', ' --dump-bitlocker', ' -dhd ', ' --dump-hash-domain ', '--ntds-file'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Direct Autorun Keys Modification",
        "id": "24357373-078f-44ed-9ac4-6d334a668a11",
        "status": "test",
        "description": "Detects direct modification of autostart extensibility point (ASEP) in registry using reg.exe.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\reg.exe', case=False) & CommandLine.str.contains(r'add', case=False) & (CommandLine.str.contains(r'\\\\software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run', case=False) | CommandLine.str.contains(r'\\\\software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Userinit', case=False) | CommandLine.str.contains(r'\\\\software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Shell', case=False) | CommandLine.str.contains(r'\\\\software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows', case=False) | CommandLine.str.contains(r'\\\\software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\User Shell Folders', case=False) | CommandLine.str.contains(r'\\\\system\\\\CurrentControlSet\\\\Control\\\\SafeBoot\\\\AlternateShell', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential COM Objects Download Cradles Usage - Process Creation",
        "id": "02b64f1b-3f33-4e67-aede-ef3b0a5a8fcf",
        "status": "test",
        "description": "Detects usage of COM objects that can be abused to download files in PowerShell by CLSID",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'[Type]::GetTypeFromCLSID(', case=False) & (CommandLine.str.contains(r'0002DF01-0000-0000-C000-000000000046', case=False) | CommandLine.str.contains(r'F6D90F16-9C73-11D3-B32E-00C04F990BB4', case=False) | CommandLine.str.contains(r'F5078F35-C551-11D3-89B9-0000F81FE221', case=False) | CommandLine.str.contains(r'88d96a0a-f192-11d4-a65f-0040963251e5', case=False) | CommandLine.str.contains(r'AFBA6B42-5692-48EA-8141-DC517DCF0EF1', case=False) | CommandLine.str.contains(r'AFB40FFD-B609-40A3-9828-F88BBE11E4E3', case=False) | CommandLine.str.contains(r'88d96a0b-f192-11d4-a65f-0040963251e5', case=False) | CommandLine.str.contains(r'2087c2f4-2cef-4953-a8ab-66779b670495', case=False) | CommandLine.str.contains(r'000209FF-0000-0000-C000-000000000046', case=False) | CommandLine.str.contains(r'00024500-0000-0000-C000-000000000046', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential PowerShell Obfuscation Via WCHAR",
        "id": "e312efd0-35a1-407f-8439-b8d434b438a6",
        "status": "test",
        "description": "Detects suspicious encoded character syntax often used for defense evasion",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'(WCHAR)0x', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Extrac32 Execution",
        "id": "aa8e035d-7be4-48d3-a944-102aec04400d",
        "status": "test",
        "description": "Download or Copy file with Extrac32",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'extrac32.exe', case=False) | Image.str.contains(r'\\\\extrac32.exe', case=False) | OriginalFileName=='extrac32.exe') & CommandLine.str.contains(r'.cab', case=False) & (CommandLine.str.contains(r'/C', case=False) | CommandLine.str.contains(r'/Y', case=False) | CommandLine.str.contains(r' \\\\\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Execution From Internet Hosted WebDav Share",
        "id": "f0507c0f-a3a2-40f5-acc6-7f543c334993",
        "status": "test",
        "description": "Detects the execution of the \"net use\" command to mount a WebDAV server and then immediately execute some content in it. As seen being used in malicious LNK files",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.EXE') & CommandLine.str.contains(r' net use http', case=False) & CommandLine.str.contains(r'& start /b ', case=False) & CommandLine.str.contains(r'\\\\DavWWWRoot\\\\', case=False) & (CommandLine.str.contains(r'.exe ', case=False) | CommandLine.str.contains(r'.dll ', case=False) | CommandLine.str.contains(r'.bat ', case=False) | CommandLine.str.contains(r'.vbs ', case=False) | CommandLine.str.contains(r'.ps1 ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Dumping of Sensitive Hives Via Reg.EXE",
        "id": "fd877b94-9bb5-4191-bb25-d79cbd93c167",
        "status": "test",
        "description": "Detects the usage of \"reg.exe\" in order to dump sensitive registry hives. This includes SAM, SYSTEM and SECURITY hives.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002",
            "attack.t1003.004",
            "attack.t1003.005",
            "car.2013-07-001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\reg.exe', case=False) | OriginalFileName=='reg.exe') & (CommandLine.str.contains(r' save ', case=False) | CommandLine.str.contains(r' export ', case=False) | CommandLine.str.contains(r' \u02e2ave ', case=False) | CommandLine.str.contains(r' e\u02e3port ', case=False)) & (CommandLine.str.contains(r'hklm', case=False) | CommandLine.str.contains(r'hk\u02eam', case=False) | CommandLine.str.contains(r'hkey_local_machine', case=False) | CommandLine.str.contains(r'hkey_\u02eaocal_machine', case=False) | CommandLine.str.contains(r'hkey_loca\u02ea_machine', case=False) | CommandLine.str.contains(r'hkey_\u02eaoca\u02ea_machine', case=False)) & (CommandLine.str.contains(r'\\\\system', case=False) | CommandLine.str.contains(r'\\\\sam', case=False) | CommandLine.str.contains(r'\\\\security', case=False) | CommandLine.str.contains(r'\\\\\u02e2ystem', case=False) | CommandLine.str.contains(r'\\\\sy\u02e2tem', case=False) | CommandLine.str.contains(r'\\\\\u02e2y\u02e2tem', case=False) | CommandLine.str.contains(r'\\\\\u02e2am', case=False) | CommandLine.str.contains(r'\\\\\u02e2ecurity', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential CommandLine Obfuscation Using Unicode Characters From Suspicious Image",
        "id": "584bca0f-3608-4402-80fd-4075ff6072e3",
        "status": "test",
        "description": "Detects potential commandline obfuscation using unicode characters.\nAdversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False)) & (OriginalFileName==['Cmd.EXE', 'cscript.exe', 'PowerShell.EXE', 'pwsh.dll', 'wscript.exe']) & (CommandLine.str.contains(r'\u02e3', case=False) | CommandLine.str.contains(r'\u02ea', case=False) | CommandLine.str.contains(r'\u02e2', case=False) | CommandLine.str.contains(r'\u2215', case=False) | CommandLine.str.contains(r'\u2044', case=False) | CommandLine.str.contains(r'\u2015', case=False) | CommandLine.str.contains(r'\u2014', case=False) | CommandLine.str.contains(r'\u00a0', case=False) | CommandLine.str.contains(r'\u00af', case=False) | CommandLine.str.contains(r'\u00ae', case=False) | CommandLine.str.contains(r'\u00b6', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed Cloudflared.EXE Execution",
        "id": "e0c69ebd-b54f-4aed-8ae3-e3467843f3f0",
        "status": "test",
        "description": "Detects the execution of a renamed \"cloudflared\" binary.",
        "tags": [
            "attack.command-and-control",
            "attack.t1090.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' tunnel ', case=False) & CommandLine.str.contains(r'cleanup ', case=False) & (CommandLine.str.contains(r'-config ', case=False) | CommandLine.str.contains(r'-connector-id ', case=False)) | CommandLine.str.contains(r' tunnel ', case=False) & CommandLine.str.contains(r' run ', case=False) & (CommandLine.str.contains(r'-config ', case=False) | CommandLine.str.contains(r'-credentials-contents ', case=False) | CommandLine.str.contains(r'-credentials-file ', case=False) | CommandLine.str.contains(r'-token ', case=False)) | CommandLine.str.contains(r'-url', case=False) & CommandLine.str.contains(r'tunnel', case=False) | Hashes.str.contains(r'SHA256=2fb6c04c4f95fb8d158af94c137f90ac820716deaf88d8ebec956254e046cb29', case=False) | Hashes.str.contains(r'SHA256=b3d21940a10fdef5e415ad70331ce257c24fe3bcf7722262302e0421791f87e8', case=False) | Hashes.str.contains(r'SHA256=1fbd8362b2d2d2e6a5750ae3db69cd1815e6c1d31da48a98b796450971a8e039', case=False) | Hashes.str.contains(r'SHA256=0409c9b12f9d0eda86e461ed9bdabeefb00172b26322079681a0bdf48e68dc28', case=False) | Hashes.str.contains(r'SHA256=7cfb411d04bac42ef93d1f0c93c0a481e38c6f4612b97ae89d4702595988edc7', case=False) | Hashes.str.contains(r'SHA256=5b3c2d846ab162dc6bc595cce3a49de5731afde5d6060be7066d21b013a28373', case=False) | Hashes.str.contains(r'SHA256=ce95df7f69664c3df19b76028e115931919a71517b776da7b42d353e2ff4a670', case=False) | Hashes.str.contains(r'SHA256=1293525a19cfe3bc8296b62fbfe19f083632ed644a1c18c10b045a1d3030d81a', case=False) | Hashes.str.contains(r'SHA256=af2b9161cfcb654b16408cd6b098afe9d1fb61a037d18d7090a119d4c0c8e0f0', case=False) | Hashes.str.contains(r'SHA256=39ddceb56a15798826a5fc4892fa2b474c444bb4d7a8bf2fa95e41cab10fa7a1', case=False) | Hashes.str.contains(r'SHA256=ccd11f2328023a0e7929e845d5b6e7bc783fb4650d65faef3ae090239d4bbce2', case=False) | Hashes.str.contains(r'SHA256=b6e5c5d2567ae8c69cc012ebcae30e6c9b5359d64a58d17ba75ec89f8bce71ac', case=False) | Hashes.str.contains(r'SHA256=f813484ea441404f18caad96f28138e8aaf0cb256163c09c2ab8a3acab87f69f', case=False) | Hashes.str.contains(r'SHA256=fc4a0802ab9c7409b892ca00636bec61e2acfc911bccfdeb9978b8ab5a2f828d', case=False) | Hashes.str.contains(r'SHA256=083150724b49604c8765c1ba19541fa260b133be0acb0647fcd936d81f054499', case=False) | Hashes.str.contains(r'SHA256=44303d6572956f28a0f2e4b188934fb9874f2584f5c81fa431a463cfbf28083b', case=False) | Hashes.str.contains(r'SHA256=5d38c46032a58e28ae5f7d174d8761ec3d64d186677f3ec53af5f51afb9bfd2f', case=False) | Hashes.str.contains(r'SHA256=e1e70fa42059911bc6685fafef957f9a73fc66f214d0704a9b932683a5204032', case=False) | Hashes.str.contains(r'SHA256=c01356092a365b84f84f0e66870bd1a05ba3feb53cafd973fa5fea2534bee234', case=False) | Hashes.str.contains(r'SHA256=b3f9c06151e30ee43d39e788a79cd918a314f24e04fe87f3de8272a2057b624f', case=False) | Hashes.str.contains(r'SHA256=cd81b2792f0739f473c31c9cb7cf2313154bfa28b839975802b90e8790bb5058', case=False) | Hashes.str.contains(r'SHA256=9ec7e6c8e1bfd883663d8d9d62c9e4f9ae373b731407181e32491b27a7218a2c', case=False) | Hashes.str.contains(r'SHA256=c2cfd23fdc6c0e1b1ffa0e545cbe556f18d11b362b4a89ba0713f6ab01c4827f', case=False) | Hashes.str.contains(r'SHA256=53f8adbd76c0eb16f5e43cadde422474d8a06f9c8f959389c1930042ad8beaa5', case=False) | Hashes.str.contains(r'SHA256=648c8d2f8001c113d2986dd00b7bbd181593d462bef73522cee212c4f71f95b3', case=False) | Hashes.str.contains(r'SHA256=ae047e2095e46c3f9c518b2be67ec753f4f0aad23b261a361fcb6144dcdb63b4', case=False) | Hashes.str.contains(r'SHA256=3153d2baa462978dd22ab33d1c2274ecc88c200225d6a3327f98d5b752d08f5c', case=False) | Hashes.str.contains(r'SHA256=f49cde976e628012c9db73e1c8d76081944ecf2297cdafeb78bb13290da274c4', case=False) | Hashes.str.contains(r'SHA256=d2513e58bb03ccc83affde685c6ef987924c37ce6707d8e9857e2524b0d7e90f', case=False) | Hashes.str.contains(r'SHA256=bb67c7623ba92fe64ffd9816b8d5b3b1ea3013960a30bd4cf6e295b3eb5b1bad', case=False) | Hashes.str.contains(r'SHA256=b34b3c3a91e3165d1481f0b3ec23eab93a1cfba94345a6cbfe5b18ddbd48eac7', case=False) | Hashes.str.contains(r'SHA256=f7848034e010d55f15e474ca998f96391e320ff29b00cfcc4c5e536529703e75', case=False) | Hashes.str.contains(r'SHA256=b6fc9493778cbe3bfc062d73f5cc604bc0ff058bc5e5dc6aac87f3a4008b54b6', case=False) | Hashes.str.contains(r'SHA256=f5c5e962577e2293c4ad10603816dce7cc273585969615fbf4e4bfa9eaff1688', case=False) | Hashes.str.contains(r'SHA256=d14c52d9220b606f428a8fe9f7c108b0d6f14cf71e7384749e98e6a95962e68f', case=False) | Hashes.str.contains(r'SHA256=d3a0e1a79158f3985cd49607ebe0cdfcc49cb9af96b8f43aefd0cdfe2f22e663', case=False) | Hashes.str.contains(r'SHA256=2fbbfc8299537ff80cadf9d0e27c223fe0ccb9052bf9d8763ad717bbfa521c77', case=False) | Hashes.str.contains(r'SHA256=19074674c6fbdaa573b3081745e5e26144fdf7a086d14e0e220d1814f1f13078', case=False)) & ~ (Image.str.contains(r'\\\\cloudflared.exe', case=False) | Image.str.contains(r'\\\\cloudflared-windows-386.exe', case=False) | Image.str.contains(r'\\\\cloudflared-windows-amd64.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Terminal Service Process Spawn",
        "id": "1012f107-b8f1-4271-af30-5aed2de89b39",
        "status": "test",
        "description": "Detects a process spawned by the terminal service server process (this could be an indicator for an exploitation of CVE-2019-0708)",
        "tags": [
            "attack.initial-access",
            "attack.t1190",
            "attack.lateral-movement",
            "attack.t1210",
            "car.2013-07-002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentCommandLine.str.contains(r'\\\\svchost.exe', case=False) & ParentCommandLine.str.contains(r'termsvcs', case=False) & ~ (Image.str.contains(r'\\\\rdpclip.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\csrss.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\wininit.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\winlogon.exe', case=False) | Image is null)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Add Potential Suspicious New Download Source To Winget",
        "id": "c15a46a0-07d4-4c87-b4b6-89207835a83b",
        "status": "test",
        "description": "Detects usage of winget to add new potentially suspicious download sources",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\winget.exe', case=False) | OriginalFileName=='winget.exe') & CommandLine.str.contains(r'source ', case=False) & CommandLine.str.contains(r'add ', case=False) & CommandLine.str.contains(r'://\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Visual Studio Code Tunnel Execution",
        "id": "90d6bd71-dffb-4989-8d86-a827fedd6624",
        "status": "test",
        "description": "Detects Visual Studio Code tunnel execution. Attackers can abuse this functionality to establish a C2 channel",
        "tags": [
            "attack.command-and-control",
            "attack.t1071.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName is null & CommandLine.str.contains(r'.exe tunnel', case=False) | CommandLine.str.contains(r'.exe tunnel', case=False) & CommandLine.str.contains(r'--name ', case=False) & CommandLine.str.contains(r'--accept-server-license-terms', case=False) | ParentCommandLine.str.contains(r' tunnel', case=False) & Image.str.contains(r'\\\\cmd.exe', case=False) & CommandLine.str.contains(r'/d /c ', case=False) & CommandLine.str.contains(r'\\\\servers\\\\Stable-', case=False) & CommandLine.str.contains(r'code-server.cmd', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Enumerate All Information With Whoami.EXE",
        "id": "c248c896-e412-4279-8c15-1c558067b6fa",
        "status": "test",
        "description": "Detects the execution of \"whoami.exe\" with the \"/all\" flag",
        "tags": [
            "attack.discovery",
            "attack.t1033",
            "car.2016-03-001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\whoami.exe', case=False) | OriginalFileName=='whoami.exe') & (CommandLine.str.contains(r' -all', case=False) | CommandLine.str.contains(r' /all', case=False) | CommandLine.str.contains(r' \u2013all', case=False) | CommandLine.str.contains(r' \u2014all', case=False) | CommandLine.str.contains(r' \u2015all', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "TrustedPath UAC Bypass Pattern",
        "id": "4ac47ed3-44c2-4b1f-9d51-bf46e8914126",
        "status": "test",
        "description": "Detects indicators of a UAC bypass method by mocking directories",
        "tags": [
            "attack.defense-evasion",
            "attack.t1548.002"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'C:\\\\Windows \\\\System32\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Service Reconnaissance Via Wmic.EXE",
        "id": "76f55eaa-d27f-4213-9d45-7b0e4b60bbae",
        "status": "test",
        "description": "An adversary might use WMI to check if a certain remote service is running on a remote device.\nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\n",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\WMIC.exe', case=False) | OriginalFileName=='wmic.exe') & CommandLine.str.contains(r'service', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uninstall Crowdstrike Falcon Sensor",
        "id": "f0f7be61-9cf5-43be-9836-99d6ef448a18",
        "status": "test",
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities by uninstalling Crowdstrike Falcon",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\WindowsSensor.exe', case=False) & CommandLine.str.contains(r' /uninstall', case=False) & CommandLine.str.contains(r' /quiet', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Cloudflared Quick Tunnel Execution",
        "id": "222129f7-f4dc-4568-b0d2-22440a9639ba",
        "status": "test",
        "description": "Detects creation of an ad-hoc Cloudflare Quick Tunnel, which can be used to tunnel local services such as HTTP, RDP, SSH and SMB.\nThe free TryCloudflare Quick Tunnel will generate a random subdomain on trycloudflare[.]com, following a call to api[.]trycloudflare[.]com.\nThe tool has been observed in use by threat groups including Akira ransomware.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1090.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\cloudflared.exe', case=False) | Image.str.contains(r'\\\\cloudflared-windows-386.exe', case=False) | Image.str.contains(r'\\\\cloudflared-windows-amd64.exe', case=False) | Hashes.str.contains(r'SHA256=2fb6c04c4f95fb8d158af94c137f90ac820716deaf88d8ebec956254e046cb29', case=False) | Hashes.str.contains(r'SHA256=b3d21940a10fdef5e415ad70331ce257c24fe3bcf7722262302e0421791f87e8', case=False) | Hashes.str.contains(r'SHA256=1fbd8362b2d2d2e6a5750ae3db69cd1815e6c1d31da48a98b796450971a8e039', case=False) | Hashes.str.contains(r'SHA256=0409c9b12f9d0eda86e461ed9bdabeefb00172b26322079681a0bdf48e68dc28', case=False) | Hashes.str.contains(r'SHA256=7cfb411d04bac42ef93d1f0c93c0a481e38c6f4612b97ae89d4702595988edc7', case=False) | Hashes.str.contains(r'SHA256=5b3c2d846ab162dc6bc595cce3a49de5731afde5d6060be7066d21b013a28373', case=False) | Hashes.str.contains(r'SHA256=ce95df7f69664c3df19b76028e115931919a71517b776da7b42d353e2ff4a670', case=False) | Hashes.str.contains(r'SHA256=1293525a19cfe3bc8296b62fbfe19f083632ed644a1c18c10b045a1d3030d81a', case=False) | Hashes.str.contains(r'SHA256=af2b9161cfcb654b16408cd6b098afe9d1fb61a037d18d7090a119d4c0c8e0f0', case=False) | Hashes.str.contains(r'SHA256=39ddceb56a15798826a5fc4892fa2b474c444bb4d7a8bf2fa95e41cab10fa7a1', case=False) | Hashes.str.contains(r'SHA256=ccd11f2328023a0e7929e845d5b6e7bc783fb4650d65faef3ae090239d4bbce2', case=False) | Hashes.str.contains(r'SHA256=b6e5c5d2567ae8c69cc012ebcae30e6c9b5359d64a58d17ba75ec89f8bce71ac', case=False) | Hashes.str.contains(r'SHA256=f813484ea441404f18caad96f28138e8aaf0cb256163c09c2ab8a3acab87f69f', case=False) | Hashes.str.contains(r'SHA256=fc4a0802ab9c7409b892ca00636bec61e2acfc911bccfdeb9978b8ab5a2f828d', case=False) | Hashes.str.contains(r'SHA256=083150724b49604c8765c1ba19541fa260b133be0acb0647fcd936d81f054499', case=False) | Hashes.str.contains(r'SHA256=44303d6572956f28a0f2e4b188934fb9874f2584f5c81fa431a463cfbf28083b', case=False) | Hashes.str.contains(r'SHA256=5d38c46032a58e28ae5f7d174d8761ec3d64d186677f3ec53af5f51afb9bfd2f', case=False) | Hashes.str.contains(r'SHA256=e1e70fa42059911bc6685fafef957f9a73fc66f214d0704a9b932683a5204032', case=False) | Hashes.str.contains(r'SHA256=c01356092a365b84f84f0e66870bd1a05ba3feb53cafd973fa5fea2534bee234', case=False) | Hashes.str.contains(r'SHA256=b3f9c06151e30ee43d39e788a79cd918a314f24e04fe87f3de8272a2057b624f', case=False) | Hashes.str.contains(r'SHA256=cd81b2792f0739f473c31c9cb7cf2313154bfa28b839975802b90e8790bb5058', case=False) | Hashes.str.contains(r'SHA256=9ec7e6c8e1bfd883663d8d9d62c9e4f9ae373b731407181e32491b27a7218a2c', case=False) | Hashes.str.contains(r'SHA256=c2cfd23fdc6c0e1b1ffa0e545cbe556f18d11b362b4a89ba0713f6ab01c4827f', case=False) | Hashes.str.contains(r'SHA256=53f8adbd76c0eb16f5e43cadde422474d8a06f9c8f959389c1930042ad8beaa5', case=False) | Hashes.str.contains(r'SHA256=648c8d2f8001c113d2986dd00b7bbd181593d462bef73522cee212c4f71f95b3', case=False) | Hashes.str.contains(r'SHA256=ae047e2095e46c3f9c518b2be67ec753f4f0aad23b261a361fcb6144dcdb63b4', case=False) | Hashes.str.contains(r'SHA256=3153d2baa462978dd22ab33d1c2274ecc88c200225d6a3327f98d5b752d08f5c', case=False) | Hashes.str.contains(r'SHA256=f49cde976e628012c9db73e1c8d76081944ecf2297cdafeb78bb13290da274c4', case=False) | Hashes.str.contains(r'SHA256=d2513e58bb03ccc83affde685c6ef987924c37ce6707d8e9857e2524b0d7e90f', case=False) | Hashes.str.contains(r'SHA256=bb67c7623ba92fe64ffd9816b8d5b3b1ea3013960a30bd4cf6e295b3eb5b1bad', case=False) | Hashes.str.contains(r'SHA256=b34b3c3a91e3165d1481f0b3ec23eab93a1cfba94345a6cbfe5b18ddbd48eac7', case=False) | Hashes.str.contains(r'SHA256=f7848034e010d55f15e474ca998f96391e320ff29b00cfcc4c5e536529703e75', case=False) | Hashes.str.contains(r'SHA256=b6fc9493778cbe3bfc062d73f5cc604bc0ff058bc5e5dc6aac87f3a4008b54b6', case=False) | Hashes.str.contains(r'SHA256=f5c5e962577e2293c4ad10603816dce7cc273585969615fbf4e4bfa9eaff1688', case=False) | Hashes.str.contains(r'SHA256=d14c52d9220b606f428a8fe9f7c108b0d6f14cf71e7384749e98e6a95962e68f', case=False) | Hashes.str.contains(r'SHA256=d3a0e1a79158f3985cd49607ebe0cdfcc49cb9af96b8f43aefd0cdfe2f22e663', case=False) | Hashes.str.contains(r'SHA256=2fbbfc8299537ff80cadf9d0e27c223fe0ccb9052bf9d8763ad717bbfa521c77', case=False) | Hashes.str.contains(r'SHA256=19074674c6fbdaa573b3081745e5e26144fdf7a086d14e0e220d1814f1f13078', case=False)) & (CommandLine.str.contains(r'-url', case=False) & CommandLine.str.contains(r'tunnel', case=False) | CommandLine.str.contains(r'.exe -url', case=False) | CommandLine.str.contains(r'.exe --url', case=False)) | CommandLine.str.contains(r'-url', case=False) & CommandLine.str.contains(r'-no-autoupdate', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed Office Binary Execution",
        "id": "0b0cd537-fc77-4e6e-a973-e53495c1083d",
        "status": "test",
        "description": "Detects the execution of a renamed office binary",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName==['Excel.exe', 'MSACCESS.EXE', 'MSPUB.EXE', 'OneNote.exe', 'OneNoteM.exe', 'OUTLOOK.EXE', 'POWERPNT.EXE', 'WinWord.exe'] | Description==['Microsoft Access', 'Microsoft Excel', 'Microsoft OneNote', 'Microsoft Outlook', 'Microsoft PowerPoint', 'Microsoft Publisher', 'Microsoft Word', 'Sent to OneNote Tool']) & ~ (Image.str.contains(r'\\\\EXCEL.exe', case=False) | Image.str.contains(r'\\\\excelcnv.exe', case=False) | Image.str.contains(r'\\\\MSACCESS.exe', case=False) | Image.str.contains(r'\\\\MSPUB.EXE', case=False) | Image.str.contains(r'\\\\ONENOTE.EXE', case=False) | Image.str.contains(r'\\\\ONENOTEM.EXE', case=False) | Image.str.contains(r'\\\\OUTLOOK.EXE', case=False) | Image.str.contains(r'\\\\POWERPNT.EXE', case=False) | Image.str.contains(r'\\\\WINWORD.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Backup Deleted Via Wbadmin.EXE",
        "id": "89f75308-5b1b-4390-b2d8-d6b2340efaf8",
        "status": "test",
        "description": "Detects the deletion of backups or system state backups via \"wbadmin.exe\".\nThis technique is used by numerous ransomware families and actors.\nThis may only be successful on server platforms that have Windows Backup enabled.\n",
        "tags": [
            "attack.impact",
            "attack.t1490"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wbadmin.exe', case=False) | OriginalFileName=='WBADMIN.EXE') & CommandLine.str.contains(r'delete ', case=False) & CommandLine.str.contains(r'backup', case=False) & ~ CommandLine.str.contains(r'keepVersions:0', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Reg Add Suspicious Paths",
        "id": "b7e2a8d4-74bb-4b78-adc9-3f92af2d4829",
        "status": "test",
        "description": "Detects when an adversary uses the reg.exe utility to add or modify new keys or subkeys",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\reg.exe', case=False) | OriginalFileName=='reg.exe') & (CommandLine.str.contains(r'\\\\AppDataLow\\\\Software\\\\Microsoft\\\\', case=False) | CommandLine.str.contains(r'\\\\Policies\\\\Microsoft\\\\Windows\\\\OOBE', case=False) | CommandLine.str.contains(r'\\\\Policies\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon', case=False) | CommandLine.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\Currentversion\\\\Winlogon', case=False) | CommandLine.str.contains(r'\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\WDigest', case=False) | CommandLine.str.contains(r'\\\\Microsoft\\\\Windows Defender\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Scheduled Task Name As GUID",
        "id": "ff2fff64-4cd6-4a2b-ba7d-e28a30bbe66b",
        "status": "test",
        "description": "Detects creation of a scheduled task with a GUID like name",
        "tags": [
            "attack.execution",
            "attack.t1053.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\schtasks.exe', case=False) & CommandLine.str.contains(r'/Create ', case=False) & (CommandLine.str.contains(r'/TN \"{', case=False) | CommandLine.str.contains(r'/TN \\'{', case=False) | CommandLine.str.contains(r'/TN {', case=False)) & (CommandLine.str.contains(r'}\"', case=False) | CommandLine.str.contains(r'}\\'', case=False) | CommandLine.str.contains(r'} ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Microsoft IIS Connection Strings Decryption",
        "id": "97dbf6e2-e436-44d8-abee-4261b24d3e41",
        "status": "test",
        "description": "Detects use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command.",
        "tags": [
            "attack.credential-access",
            "attack.t1003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\aspnet_regiis.exe', case=False) | OriginalFileName=='aspnet_regiis.exe') & CommandLine.str.contains(r'connectionStrings', case=False) & CommandLine.str.contains(r' -pdf', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious PowerShell Invocations - Specific - ProcessCreation",
        "id": "536e2947-3729-478c-9903-745aaffe60d2",
        "status": "test",
        "description": "Detects suspicious PowerShell invocation command parameters",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'-nop', case=False) & CommandLine.str.contains(r' -w ', case=False) & CommandLine.str.contains(r'hidden', case=False) & CommandLine.str.contains(r' -c ', case=False) & CommandLine.str.contains(r'[Convert]::FromBase64String', case=False) | CommandLine.str.contains(r' -w ', case=False) & CommandLine.str.contains(r'hidden', case=False) & CommandLine.str.contains(r'-noni', case=False) & CommandLine.str.contains(r'-nop', case=False) & CommandLine.str.contains(r' -c ', case=False) & CommandLine.str.contains(r'iex', case=False) & CommandLine.str.contains(r'New-Object', case=False) | CommandLine.str.contains(r' -w ', case=False) & CommandLine.str.contains(r'hidden', case=False) & CommandLine.str.contains(r'-ep', case=False) & CommandLine.str.contains(r'bypass', case=False) & CommandLine.str.contains(r'-Enc', case=False) | CommandLine.str.contains(r'powershell', case=False) & CommandLine.str.contains(r'reg', case=False) & CommandLine.str.contains(r'add', case=False) & CommandLine.str.contains(r'\\\\software\\\\', case=False) | CommandLine.str.contains(r'bypass', case=False) & CommandLine.str.contains(r'-noprofile', case=False) & CommandLine.str.contains(r'-windowstyle', case=False) & CommandLine.str.contains(r'hidden', case=False) & CommandLine.str.contains(r'new-object', case=False) & CommandLine.str.contains(r'system.net.webclient', case=False) & CommandLine.str.contains(r'.download', case=False) | CommandLine.str.contains(r'iex', case=False) & CommandLine.str.contains(r'New-Object', case=False) & CommandLine.str.contains(r'Net.WebClient', case=False) & CommandLine.str.contains(r'.Download', case=False)) & ~ (CommandLine.str.contains(r'(New-Object System.Net.WebClient).DownloadString(\\'https://community.chocolatey.org/install.ps1', case=False) | CommandLine.str.contains(r'Write-ChocolateyWarning', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - CreateMiniDump Execution",
        "id": "36d88494-1d43-4dc0-b3fa-35c8fea0ca9d",
        "status": "test",
        "description": "Detects the use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\CreateMiniDump.exe', case=False) | Hashes.str.contains(r'IMPHASH=4a07f944a83e8a7c2525efa35dd30e2f', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Time Travel Debugging Utility Usage",
        "id": "0b4ae027-2a2d-4b93-8c7e-962caaba5b2a",
        "status": "test",
        "description": "Detects usage of Time Travel Debugging Utility. Adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe.",
        "tags": [
            "attack.defense-evasion",
            "attack.credential-access",
            "attack.t1218",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\tttracer.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Imports Registry Key From a File",
        "id": "73bba97f-a82d-42ce-b315-9182e76c57b1",
        "status": "test",
        "description": "Detects the import of the specified file to the registry with regedit.exe.",
        "tags": [
            "attack.t1112",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\regedit.exe', case=False) | OriginalFileName=='REGEDIT.EXE') & (CommandLine.str.contains(r' /i ', case=False) | CommandLine.str.contains(r' /s ', case=False) | CommandLine.str.contains(r'.reg', case=False)) & ~ ((CommandLine.str.contains(r' -e ', case=False) | CommandLine.str.contains(r' /e ', case=False) | CommandLine.str.contains(r' \u2013e ', case=False) | CommandLine.str.contains(r' \u2014e ', case=False) | CommandLine.str.contains(r' \u2015e ', case=False) | CommandLine.str.contains(r' -a ', case=False) | CommandLine.str.contains(r' /a ', case=False) | CommandLine.str.contains(r' \u2013a ', case=False) | CommandLine.str.contains(r' \u2014a ', case=False) | CommandLine.str.contains(r' \u2015a ', case=False) | CommandLine.str.contains(r' -c ', case=False) | CommandLine.str.contains(r' /c ', case=False) | CommandLine.str.contains(r' \u2013c ', case=False) | CommandLine.str.contains(r' \u2014c ', case=False) | CommandLine.str.contains(r' \u2015c ', case=False)) & CommandLine.str.contains(r':[^ \\\\\\\\]'))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Rundll32 Invoking Inline VBScript",
        "id": "1cc50f3f-1fc8-4acf-b2e9-6f172e1fdebd",
        "status": "test",
        "description": "Detects suspicious process related to rundll32 based on command line that invokes inline VBScript as seen being used by UNC2452",
        "tags": [
            "attack.defense-evasion",
            "attack.t1055"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'rundll32.exe', case=False) & CommandLine.str.contains(r'Execute', case=False) & CommandLine.str.contains(r'RegRead', case=False) & CommandLine.str.contains(r'window.close', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Spool Service Child Process",
        "id": "dcdbc940-0bff-46b2-95f3-2d73f848e33b",
        "status": "test",
        "description": "Detects suspicious print spool service (spoolsv.exe) child processes.",
        "tags": [
            "attack.execution",
            "attack.t1203",
            "attack.privilege-escalation",
            "attack.t1068"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\spoolsv.exe', case=False) & (IntegrityLevel==['System', 'S-1-16-16384']) & (Image.str.contains(r'\\\\gpupdate.exe', case=False) | Image.str.contains(r'\\\\whoami.exe', case=False) | Image.str.contains(r'\\\\nltest.exe', case=False) | Image.str.contains(r'\\\\taskkill.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\taskmgr.exe', case=False) | Image.str.contains(r'\\\\sc.exe', case=False) | Image.str.contains(r'\\\\findstr.exe', case=False) | Image.str.contains(r'\\\\curl.exe', case=False) | Image.str.contains(r'\\\\wget.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\bitsadmin.exe', case=False) | Image.str.contains(r'\\\\accesschk.exe', case=False) | Image.str.contains(r'\\\\wevtutil.exe', case=False) | Image.str.contains(r'\\\\bcdedit.exe', case=False) | Image.str.contains(r'\\\\fsutil.exe', case=False) | Image.str.contains(r'\\\\cipher.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\write.exe', case=False) | Image.str.contains(r'\\\\wuauclt.exe', case=False) | Image.str.contains(r'\\\\systeminfo.exe', case=False) | Image.str.contains(r'\\\\reg.exe', case=False) | Image.str.contains(r'\\\\query.exe', case=False) | (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False)) & ~ CommandLine.str.contains(r'start', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) & ~ (CommandLine.str.contains(r'.spl', case=False) | CommandLine.str.contains(r'route add', case=False) | CommandLine.str.contains(r'program files', case=False)) | Image.str.contains(r'\\\\netsh.exe', case=False) & ~ (CommandLine.str.contains(r'add portopening', case=False) | CommandLine.str.contains(r'rule name', case=False)) | (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & ~ CommandLine.str.contains(r'.spl', case=False) | (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & CommandLine.str.contains(r'rundll32.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Deletion of Volume Shadow Copies via WMI with PowerShell",
        "id": "21ff4ca9-f13a-41ad-b828-0077b2af2e40",
        "status": "test",
        "description": "Detects deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil",
        "tags": [
            "attack.impact",
            "attack.t1490"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'Get-WmiObject', case=False) | CommandLine.str.contains(r'gwmi', case=False) | CommandLine.str.contains(r'Get-CimInstance', case=False) | CommandLine.str.contains(r'gcim', case=False)) & CommandLine.str.contains(r'Win32_ShadowCopy', case=False) & (CommandLine.str.contains(r'.Delete()', case=False) | CommandLine.str.contains(r'Remove-WmiObject', case=False) | CommandLine.str.contains(r'rwmi', case=False) | CommandLine.str.contains(r'Remove-CimInstance', case=False) | CommandLine.str.contains(r'rcim', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Schtasks Schedule Type With High Privileges",
        "id": "7a02e22e-b885-4404-b38b-1ddc7e65258a",
        "status": "test",
        "description": "Detects scheduled task creations or modification to be run with high privileges on a suspicious schedule type",
        "tags": [
            "attack.execution",
            "attack.t1053.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\schtasks.exe', case=False) | OriginalFileName=='schtasks.exe') & (CommandLine.str.contains(r' ONLOGON ', case=False) | CommandLine.str.contains(r' ONSTART ', case=False) | CommandLine.str.contains(r' ONCE ', case=False) | CommandLine.str.contains(r' ONIDLE ', case=False)) & (CommandLine.str.contains(r'NT AUT', case=False) | CommandLine.str.contains(r' SYSTEM', case=False) | CommandLine.str.contains(r'HIGHEST', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Windows IIS HTTP Logging",
        "id": "e4ed6030-ffe5-4e6a-8a8a-ab3c1ab9d94e",
        "status": "test",
        "description": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\appcmd.exe', case=False) | OriginalFileName=='appcmd.exe') & CommandLine.str.contains(r'set', case=False) & CommandLine.str.contains(r'config', case=False) & CommandLine.str.contains(r'section:httplogging', case=False) & CommandLine.str.contains(r'dontLog:true', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Fsutil Drive Enumeration",
        "id": "63de06b9-a385-40b5-8b32-73f2b9ef84b6",
        "status": "test",
        "description": "Attackers may leverage fsutil to enumerated connected drives.",
        "tags": [
            "attack.discovery",
            "attack.t1120"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\fsutil.exe', case=False) | OriginalFileName=='fsutil.exe') & CommandLine.str.contains(r'drives', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Visual Studio Code Tunnel Shell Execution",
        "id": "f4a623c2-4ef5-4c33-b811-0642f702c9f1",
        "status": "test",
        "description": "Detects the execution of a shell (powershell, bash, wsl...) via Visual Studio Code tunnel. Attackers can abuse this functionality to establish a C2 channel and execute arbitrary commands on the system.",
        "tags": [
            "attack.command-and-control",
            "attack.t1071.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\servers\\\\Stable-', case=False) & ParentImage.str.contains(r'\\\\server\\\\node.exe', case=False) & ParentCommandLine.str.contains(r'.vscode-server', case=False) & ((Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & CommandLine.str.contains(r'\\\\terminal\\\\browser\\\\media\\\\shellIntegration.ps1', case=False) | Image.str.contains(r'\\\\wsl.exe', case=False) | Image.str.contains(r'\\\\bash.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "User Discovery And Export Via Get-ADUser Cmdlet",
        "id": "1114e048-b69c-4f41-bc20-657245ae6e3f",
        "status": "test",
        "description": "Detects usage of the Get-ADUser cmdlet to collect user information and output it to a file",
        "tags": [
            "attack.discovery",
            "attack.t1033"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & CommandLine.str.contains(r'Get-ADUser ', case=False) & CommandLine.str.contains(r' -Filter \\*', case=False) & (CommandLine.str.contains(r' > ', case=False) | CommandLine.str.contains(r' | Select ', case=False) | CommandLine.str.contains(r'Out-File', case=False) | CommandLine.str.contains(r'Set-Content', case=False) | CommandLine.str.contains(r'Add-Content', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Service Started/Stopped Via Wmic.EXE",
        "id": "0b7163dc-7eee-4960-af17-c0cd517f92da",
        "status": "test",
        "description": "Detects usage of wmic to start or stop a service",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='wmic.exe' | Image.str.contains(r'\\\\WMIC.exe', case=False)) & CommandLine.str.contains(r' service ', case=False) & CommandLine.str.contains(r' call ', case=False) & (CommandLine.str.contains(r'stopservice', case=False) | CommandLine.str.contains(r'startservice', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Download From Direct IP Via Bitsadmin",
        "id": "99c840f2-2012-46fd-9141-c761987550ef",
        "status": "test",
        "description": "Detects usage of bitsadmin downloading a file using an URL that contains an IP",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1197",
            "attack.s0190",
            "attack.t1036.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\bitsadmin.exe', case=False) | OriginalFileName=='bitsadmin.exe') & (CommandLine.str.contains(r' /transfer ', case=False) | CommandLine.str.contains(r' /create ', case=False) | CommandLine.str.contains(r' /addfile ', case=False)) & (CommandLine.str.contains(r'://1', case=False) | CommandLine.str.contains(r'://2', case=False) | CommandLine.str.contains(r'://3', case=False) | CommandLine.str.contains(r'://4', case=False) | CommandLine.str.contains(r'://5', case=False) | CommandLine.str.contains(r'://6', case=False) | CommandLine.str.contains(r'://7', case=False) | CommandLine.str.contains(r'://8', case=False) | CommandLine.str.contains(r'://9', case=False)) & ~ CommandLine.str.contains(r'://7-', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Permission Check Via Accesschk.EXE",
        "id": "c625d754-6a3d-4f65-9c9a-536aea960d37",
        "status": "test",
        "description": "Detects the usage of the \"Accesschk\" utility, an access and privilege audit tool developed by SysInternal and often being abused by attacker to verify process privileges",
        "tags": [
            "attack.discovery",
            "attack.t1069.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Product.str.contains(r'AccessChk', case=False) | Description.str.contains(r'Reports effective permissions', case=False) | Image.str.contains(r'\\\\accesschk.exe', case=False) | Image.str.contains(r'\\\\accesschk64.exe', case=False) | OriginalFileName=='accesschk.exe') & (CommandLine.str.contains(r'uwcqv ', case=False) | CommandLine.str.contains(r'kwsu ', case=False) | CommandLine.str.contains(r'qwsu ', case=False) | CommandLine.str.contains(r'uwdqs ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Calculator Usage",
        "id": "737e618a-a410-49b5-bec3-9e55ff7fbc15",
        "status": "test",
        "description": "Detects suspicious use of 'calc.exe' with command line parameters or in a suspicious directory, which is likely caused by some PoC or detection evasion.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\\\\calc.exe ', case=False) | Image.str.contains(r'\\\\calc.exe', case=False) & ~ (Image.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\WinSxS\\\\', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Rundll32 Execution With DLL Stored In ADS",
        "id": "9248c7e1-2bf3-4661-a22c-600a8040b446",
        "status": "test",
        "description": "Detects execution of rundll32 where the DLL being called is stored in an Alternate Data Stream (ADS).",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & CommandLine.str.contains(r'[Rr][Uu][Nn][Dd][Ll][Ll]32(\\\\.[Ee][Xx][Ee])? \\\\S+?\\\\w:\\\\S+?:')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Directory Removal Via Rmdir",
        "id": "41ca393d-538c-408a-ac27-cf1e038be80c",
        "status": "test",
        "description": "Detects execution of the builtin \"rmdir\" command in order to delete directories.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.004"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & CommandLine.str.contains(r'rmdir', case=False) & (CommandLine.str.contains(r'/s', case=False) | CommandLine.str.contains(r'/q', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed Plink Execution",
        "id": "1c12727d-02bf-45ff-a9f3-d49806a3cf43",
        "status": "test",
        "description": "Detects the execution of a renamed version of the Plink binary",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='Plink' | CommandLine.str.contains(r' -l forward', case=False) & CommandLine.str.contains(r' -P ', case=False) & CommandLine.str.contains(r' -R ', case=False)) & ~ Image.str.contains(r'\\\\plink.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Download Via Bitsadmin",
        "id": "d059842b-6b9d-4ed1-b5c3-5b89143c6ede",
        "status": "test",
        "description": "Detects usage of bitsadmin downloading a file",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1197",
            "attack.s0190",
            "attack.t1036.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\bitsadmin.exe', case=False) | OriginalFileName=='bitsadmin.exe') & (CommandLine.str.contains(r' /transfer ', case=False) | (CommandLine.str.contains(r' /create ', case=False) | CommandLine.str.contains(r' /addfile ', case=False)) & CommandLine.str.contains(r'http', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential WinAPI Calls Via CommandLine",
        "id": "ba3f5c1b-6272-4119-9dbd-0bc8d21c2702",
        "status": "test",
        "description": "Detects the use of WinAPI Functions via the commandline. As seen used by threat actors via the tool winapiexec",
        "tags": [
            "attack.execution",
            "attack.t1106"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'AddSecurityPackage', case=False) | CommandLine.str.contains(r'AdjustTokenPrivileges', case=False) | CommandLine.str.contains(r'Advapi32', case=False) | CommandLine.str.contains(r'CloseHandle', case=False) | CommandLine.str.contains(r'CreateProcessWithToken', case=False) | CommandLine.str.contains(r'CreatePseudoConsole', case=False) | CommandLine.str.contains(r'CreateRemoteThread', case=False) | CommandLine.str.contains(r'CreateThread', case=False) | CommandLine.str.contains(r'CreateUserThread', case=False) | CommandLine.str.contains(r'DangerousGetHandle', case=False) | CommandLine.str.contains(r'DuplicateTokenEx', case=False) | CommandLine.str.contains(r'EnumerateSecurityPackages', case=False) | CommandLine.str.contains(r'FreeHGlobal', case=False) | CommandLine.str.contains(r'FreeLibrary', case=False) | CommandLine.str.contains(r'GetDelegateForFunctionPointer', case=False) | CommandLine.str.contains(r'GetLogonSessionData', case=False) | CommandLine.str.contains(r'GetModuleHandle', case=False) | CommandLine.str.contains(r'GetProcAddress', case=False) | CommandLine.str.contains(r'GetProcessHandle', case=False) | CommandLine.str.contains(r'GetTokenInformation', case=False) | CommandLine.str.contains(r'ImpersonateLoggedOnUser', case=False) | CommandLine.str.contains(r'kernel32', case=False) | CommandLine.str.contains(r'LoadLibrary', case=False) | CommandLine.str.contains(r'memcpy', case=False) | CommandLine.str.contains(r'MiniDumpWriteDump', case=False) | CommandLine.str.contains(r'ntdll', case=False) | CommandLine.str.contains(r'OpenDesktop', case=False) | CommandLine.str.contains(r'OpenProcess', case=False) | CommandLine.str.contains(r'OpenProcessToken', case=False) | CommandLine.str.contains(r'OpenThreadToken', case=False) | CommandLine.str.contains(r'OpenWindowStation', case=False) | CommandLine.str.contains(r'PtrToString', case=False) | CommandLine.str.contains(r'QueueUserApc', case=False) | CommandLine.str.contains(r'ReadProcessMemory', case=False) | CommandLine.str.contains(r'RevertToSelf', case=False) | CommandLine.str.contains(r'RtlCreateUserThread', case=False) | CommandLine.str.contains(r'secur32', case=False) | CommandLine.str.contains(r'SetThreadToken', case=False) | CommandLine.str.contains(r'VirtualAlloc', case=False) | CommandLine.str.contains(r'VirtualFree', case=False) | CommandLine.str.contains(r'VirtualProtect', case=False) | CommandLine.str.contains(r'WaitForSingleObject', case=False) | CommandLine.str.contains(r'WriteInt32', case=False) | CommandLine.str.contains(r'WriteProcessMemory', case=False) | CommandLine.str.contains(r'ZeroFreeGlobalAllocUnicode', case=False)) & ~ (Image.str.contains(r'\\\\MpCmdRun.exe', case=False) & CommandLine.str.contains(r'GetLoadLibraryWAddress32', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Recall Feature Enabled Via Reg.EXE",
        "id": "817f252c-5143-4dae-b418-48c3e9f63728",
        "status": "experimental",
        "description": "Detects the enabling of the Windows Recall feature via registry manipulation.\nWindows Recall can be enabled by deleting the existing \"DisableAIDataAnalysis\" value, or setting it to 0.\nAdversaries may enable Windows Recall as part of post-exploitation discovery and collection activities.\nThis rule assumes that Recall is already explicitly disabled on the host, and subsequently enabled by the adversary.\n",
        "tags": [
            "attack.collection",
            "attack.t1113"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\reg.exe', case=False) | OriginalFileName=='reg.exe') & CommandLine.str.contains(r'Microsoft\\\\Windows\\\\WindowsAI', case=False) & CommandLine.str.contains(r'DisableAIDataAnalysis', case=False) & (CommandLine.str.contains(r'add', case=False) | CommandLine.str.contains(r'0', case=False) | CommandLine.str.contains(r'delete', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use of UltraVNC Remote Access Software",
        "id": "145322e4-0fd3-486b-81ca-9addc75736d8",
        "status": "test",
        "description": "An adversary may use legitimate desktop support and remote access software,to establish an interactive command and control channel to target systems within networks",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description=='VNCViewer' | Product=='UltraVNC VNCViewer' | Company=='UltraVNC' | OriginalFileName=='VNCViewer.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious WebDAV LNK Execution",
        "id": "1412aa78-a24c-4abd-83df-767dfb2c5bbe",
        "status": "test",
        "description": "Detects possible execution via LNK file accessed on a WebDAV server.",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.t1204"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\explorer.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False)) & CommandLine.str.contains(r'\\\\DavWWWRoot\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed FTP.EXE Execution",
        "id": "277a4393-446c-449a-b0ed-7fdc7795244c",
        "status": "test",
        "description": "Detects the execution of a renamed \"ftp.exe\" binary based on the PE metadata fields",
        "tags": [
            "attack.execution",
            "attack.t1059",
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & OriginalFileName=='ftp.exe' & ~ Image.str.contains(r'\\\\ftp.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Process Masquerading As SvcHost.EXE",
        "id": "be58d2e2-06c8-4f58-b666-b99f6dc3b6cd",
        "status": "experimental",
        "description": "Detects a suspicious process that is masquerading as the legitimate \"svchost.exe\" by naming its binary \"svchost.exe\" and executing from an uncommon location.\nAdversaries often disguise their malicious binaries by naming them after legitimate system processes like \"svchost.exe\" to evade detection.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\svchost.exe', case=False) & ~ (Image==['C:\\\\Windows\\\\System32\\\\svchost.exe', 'C:\\\\Windows\\\\SysWOW64\\\\svchost.exe'] | OriginalFileName=='svchost.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Phishing Pattern ISO in Archive",
        "id": "fcdf69e5-a3d3-452a-9724-26f2308bf2b1",
        "status": "test",
        "description": "Detects cases in which an ISO files is opend within an archiver like 7Zip or Winrar, which is a sign of phishing as threat actors put small ISO files in archives as email attachments to bypass certain filters and protective measures (mark of web)",
        "tags": [
            "attack.initial-access",
            "attack.t1566"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\Winrar.exe', case=False) | ParentImage.str.contains(r'\\\\7zFM.exe', case=False) | ParentImage.str.contains(r'\\\\peazip.exe', case=False)) & (Image.str.contains(r'\\\\isoburn.exe', case=False) | Image.str.contains(r'\\\\PowerISO.exe', case=False) | Image.str.contains(r'\\\\ImgBurn.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Screen Capture Activity Via Psr.EXE",
        "id": "2158f96f-43c2-43cb-952a-ab4580f32382",
        "status": "test",
        "description": "Detects execution of Windows Problem Steps Recorder (psr.exe), a utility used to record the user screen and clicks.",
        "tags": [
            "attack.collection",
            "attack.t1113"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\Psr.exe', case=False) & (CommandLine.str.contains(r'/start', case=False) | CommandLine.str.contains(r'-start', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Child Process Of ClickOnce Application",
        "id": "67bc0e75-c0a9-4cfc-8754-84a505b63c04",
        "status": "test",
        "description": "Detects potentially suspicious child processes of a ClickOnce deployment application",
        "tags": [
            "attack.execution",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\Apps\\\\2.0\\\\', case=False) & (Image.str.contains(r'\\\\calc.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\explorer.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | Image.str.contains(r'\\\\nltest.exe', case=False) | Image.str.contains(r'\\\\notepad.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\reg.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\werfault.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Install New Package Via Winget Local Manifest",
        "id": "313d6012-51a0-4d93-8dfc-de8553239e25",
        "status": "test",
        "description": "Detects usage of winget to install applications via manifest file. Adversaries can abuse winget to download payloads remotely and execute them.\nThe manifest option enables you to install an application by passing in a YAML file directly to the client.\nWinget can be used to download and install exe, msi or msix files later.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\winget.exe', case=False) | OriginalFileName=='winget.exe') & (CommandLine.str.contains(r'install', case=False) | CommandLine.str.contains(r' add ', case=False)) & (CommandLine.str.contains(r'-m ', case=False) | CommandLine.str.contains(r'--manifest', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Dynamic .NET Compilation Via Csc.EXE",
        "id": "dcaa3f04-70c3-427a-80b4-b870d73c94c4",
        "status": "test",
        "description": "Detects execution of \"csc.exe\" to compile .NET code. Attackers often leverage this to compile code on the fly and use it in other stages.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\csc.exe', case=False) & (CommandLine.str.contains(r':\\\\Perflogs\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Temporary Internet', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Favorites\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Favourites\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Contacts\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Pictures\\\\', case=False) | CommandLine.str.contains(r'([Pp]rogram[Dd]ata|%([Ll]ocal)?[Aa]pp[Dd]ata%|\\\\\\\\[Aa]pp[Dd]ata\\\\\\\\([Ll]ocal([Ll]ow)?|[Rr]oaming))\\\\\\\\[^\\\\\\\\]{1,256}$')) & ~ (ParentImage.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | ParentImage.str.contains(r'C:\\\\Program Files\\\\', case=False) | ParentImage=='C:\\\\Windows\\\\System32\\\\sdiagnhost.exe' | ParentImage=='C:\\\\Windows\\\\System32\\\\inetsrv\\\\w3wp.exe') & ~ (ParentImage==['C:\\\\ProgramData\\\\chocolatey\\\\choco.exe', 'C:\\\\ProgramData\\\\chocolatey\\\\tools\\\\shimgen.exe'] | ParentCommandLine.str.contains(r'\\\\ProgramData\\\\Microsoft\\\\Windows Defender Advanced Threat Protection', case=False) | ParentCommandLine.str.contains(r'JwB7ACIAZgBhAGkAbABlAGQAIgA6AHQAcgB1AGUALAAiAG0AcwBnACIAOgAiAEEAbgBzAGkAYgBsAGUAIAByAGUAcQB1AGkAcgBlAHMAIABQAG8AdwBlAHIAUwBoAGUAbABsACAAdgAzAC4AMAAgAG8AcgAgAG4AZQB3AGUAcgAiAH0AJw', case=False) | ParentCommandLine.str.contains(r'cAewAiAGYAYQBpAGwAZQBkACIAOgB0AHIAdQBlACwAIgBtAHMAZwAiADoAIgBBAG4AcwBpAGIAbABlACAAcgBlAHEAdQBpAHIAZQBzACAAUABvAHcAZQByAFMAaABlAGwAbAAgAHYAMwAuADAAIABvAHIAIABuAGUAdwBlAHIAIgB9ACcA', case=False) | ParentCommandLine.str.contains(r'nAHsAIgBmAGEAaQBsAGUAZAAiADoAdAByAHUAZQAsACIAbQBzAGcAIgA6ACIAQQBuAHMAaQBiAGwAZQAgAHIAZQBxAHUAaQByAGUAcwAgAFAAbwB3AGUAcgBTAGgAZQBsAGwAIAB2ADMALgAwACAAbwByACAAbgBlAHcAZQByACIAfQAnA', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Cloudflared Portable Execution",
        "id": "fadb84f0-4e84-4f6d-a1ce-9ef2bffb6ccd",
        "status": "test",
        "description": "Detects the execution of the \"cloudflared\" binary from a non standard location.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1090.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\cloudflared.exe', case=False) & ~ (Image.str.contains(r':\\\\Program Files (x86)\\\\cloudflared\\\\', case=False) | Image.str.contains(r':\\\\Program Files\\\\cloudflared\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Outlook Child Process",
        "id": "208748f7-881d-47ac-a29c-07ea84bf691d",
        "status": "test",
        "description": "Detects a suspicious process spawning from an Outlook process.",
        "tags": [
            "attack.execution",
            "attack.t1204.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\OUTLOOK.EXE', case=False) & (Image.str.contains(r'\\\\AppVLP.exe', case=False) | Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\forfiles.exe', case=False) | Image.str.contains(r'\\\\hh.exe', case=False) | Image.str.contains(r'\\\\mftrace.exe', case=False) | Image.str.contains(r'\\\\msbuild.exe', case=False) | Image.str.contains(r'\\\\msdt.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\scrcons.exe', case=False) | Image.str.contains(r'\\\\scriptrunner.exe', case=False) | Image.str.contains(r'\\\\sh.exe', case=False) | Image.str.contains(r'\\\\svchost.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Certreq Command to Download",
        "id": "4480827a-9799-4232-b2c4-ccc6c4e9e12b",
        "status": "test",
        "description": "Detects a suspicious certreq execution taken from the LOLBAS examples, which can be abused to download (small) files",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certreq.exe', case=False) | OriginalFileName=='CertReq.exe') & CommandLine.str.contains(r' -Post ', case=False) & CommandLine.str.contains(r' -config ', case=False) & CommandLine.str.contains(r' http', case=False) & CommandLine.str.contains(r' C:\\\\windows\\\\win.ini ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious WebDav Client Execution Via Rundll32.EXE",
        "id": "982e9f2d-1a85-4d5b-aea4-31f5e97c6555",
        "status": "test",
        "description": "Detects \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie. This could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server) or potentially a sign of exploitation of CVE-2023-23397\n",
        "tags": [
            "attack.exfiltration",
            "attack.t1048.003",
            "cve.2023-23397"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\svchost.exe', case=False) & ParentCommandLine.str.contains(r'-s WebClient', case=False) & Image.str.contains(r'\\\\rundll32.exe', case=False) & CommandLine.str.contains(r'C:\\\\windows\\\\system32\\\\davclnt.dll,DavSetCookie', case=False) & CommandLine.str.contains(r'://\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}') & ~ (CommandLine.str.contains(r'://10.', case=False) | CommandLine.str.contains(r'://192.168.', case=False) | CommandLine.str.contains(r'://172.16.', case=False) | CommandLine.str.contains(r'://172.17.', case=False) | CommandLine.str.contains(r'://172.18.', case=False) | CommandLine.str.contains(r'://172.19.', case=False) | CommandLine.str.contains(r'://172.20.', case=False) | CommandLine.str.contains(r'://172.21.', case=False) | CommandLine.str.contains(r'://172.22.', case=False) | CommandLine.str.contains(r'://172.23.', case=False) | CommandLine.str.contains(r'://172.24.', case=False) | CommandLine.str.contains(r'://172.25.', case=False) | CommandLine.str.contains(r'://172.26.', case=False) | CommandLine.str.contains(r'://172.27.', case=False) | CommandLine.str.contains(r'://172.28.', case=False) | CommandLine.str.contains(r'://172.29.', case=False) | CommandLine.str.contains(r'://172.30.', case=False) | CommandLine.str.contains(r'://172.31.', case=False) | CommandLine.str.contains(r'://127.', case=False) | CommandLine.str.contains(r'://169.254.', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Credential Dumping Via WER",
        "id": "9a4ccd1a-3526-4d99-b980-9f9c5d3a6ff3",
        "status": "test",
        "description": "Detects potential credential dumping via Windows Error Reporting LSASS Shtinkering technique which uses the Windows Error Reporting to dump lsass",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Werfault.exe', case=False) | OriginalFileName=='WerFault.exe') & (ParentUser.str.contains(r'AUTHORI', case=False) | ParentUser.str.contains(r'AUTORI', case=False)) & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False)) & CommandLine.str.contains(r' -u -p ', case=False) & CommandLine.str.contains(r' -ip ', case=False) & CommandLine.str.contains(r' -s ', case=False) & ~ ParentImage=='C:\\\\Windows\\\\System32\\\\lsass.exe'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed AdFind Execution",
        "id": "df55196f-f105-44d3-a675-e9dfb6cc2f2b",
        "status": "test",
        "description": "Detects the use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.",
        "tags": [
            "attack.discovery",
            "attack.t1018",
            "attack.t1087.002",
            "attack.t1482",
            "attack.t1069.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'domainlist', case=False) | CommandLine.str.contains(r'trustdmp', case=False) | CommandLine.str.contains(r'dcmodes', case=False) | CommandLine.str.contains(r'adinfo', case=False) | CommandLine.str.contains(r' dclist ', case=False) | CommandLine.str.contains(r'computer_pwdnotreqd', case=False) | CommandLine.str.contains(r'objectcategory=', case=False) | CommandLine.str.contains(r'-subnets -f', case=False) | CommandLine.str.contains(r'name=\"Domain Admins\"', case=False) | CommandLine.str.contains(r'-sc u:', case=False) | CommandLine.str.contains(r'domainncs', case=False) | CommandLine.str.contains(r'dompol', case=False) | CommandLine.str.contains(r' oudmp ', case=False) | CommandLine.str.contains(r'subnetdmp', case=False) | CommandLine.str.contains(r'gpodmp', case=False) | CommandLine.str.contains(r'fspdmp', case=False) | CommandLine.str.contains(r'users_noexpire', case=False) | CommandLine.str.contains(r'computers_active', case=False) | CommandLine.str.contains(r'computers_pwdnotreqd', case=False) | Hashes.str.contains(r'IMPHASH=BCA5675746D13A1F246E2DA3C2217492', case=False) | Hashes.str.contains(r'IMPHASH=53E117A96057EAF19C41380D0E87F1C2', case=False) | OriginalFileName=='AdFind.exe') & ~ Image.str.contains(r'\\\\AdFind.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Automated Collection Command Prompt",
        "id": "f576a613-2392-4067-9d1a-9345fb58d8d1",
        "status": "test",
        "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data.",
        "tags": [
            "attack.collection",
            "attack.t1119",
            "attack.credential-access",
            "attack.t1552.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'.doc', case=False) | CommandLine.str.contains(r'.docx', case=False) | CommandLine.str.contains(r'.xls', case=False) | CommandLine.str.contains(r'.xlsx', case=False) | CommandLine.str.contains(r'.ppt', case=False) | CommandLine.str.contains(r'.pptx', case=False) | CommandLine.str.contains(r'.rtf', case=False) | CommandLine.str.contains(r'.pdf', case=False) | CommandLine.str.contains(r'.txt', case=False)) & (CommandLine.str.contains(r'dir ', case=False) & CommandLine.str.contains(r' /b ', case=False) & CommandLine.str.contains(r' /s ', case=False) | OriginalFileName=='FINDSTR.EXE' & (CommandLine.str.contains(r' /e ', case=False) | CommandLine.str.contains(r' /si ', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Certificate Exported Via PowerShell",
        "id": "9e716b33-63b2-46da-86a4-bd3c3b9b5dfb",
        "status": "test",
        "description": "Detects calls to cmdlets that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.",
        "tags": [
            "attack.credential-access",
            "attack.execution",
            "attack.t1552.004",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'Export-PfxCertificate ', case=False) | CommandLine.str.contains(r'Export-Certificate ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed Visual Studio Code Tunnel Execution",
        "id": "2cf29f11-e356-4f61-98c0-1bdb9393d6da",
        "status": "test",
        "description": "Detects renamed Visual Studio Code tunnel execution. Attackers can abuse this functionality to establish a C2 channel",
        "tags": [
            "attack.command-and-control",
            "attack.t1071.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((OriginalFileName is null & CommandLine.str.contains(r'.exe tunnel', case=False) | CommandLine.str.contains(r'.exe tunnel', case=False) & CommandLine.str.contains(r'--name ', case=False) & CommandLine.str.contains(r'--accept-server-license-terms', case=False) | CommandLine.str.contains(r'tunnel ', case=False) & CommandLine.str.contains(r'service', case=False) & CommandLine.str.contains(r'internal-run', case=False) & CommandLine.str.contains(r'tunnel-service.log', case=False)) & ~ (Image.str.contains(r'\\\\code-tunnel.exe', case=False) | Image.str.contains(r'\\\\code.exe', case=False)) | ParentCommandLine.str.contains(r' tunnel', case=False) & Image.str.contains(r'\\\\cmd.exe', case=False) & CommandLine.str.contains(r'/d /c ', case=False) & CommandLine.str.contains(r'\\\\servers\\\\Stable-', case=False) & CommandLine.str.contains(r'code-server.cmd', case=False) & ~ (ParentImage.str.contains(r'\\\\code-tunnel.exe', case=False) | ParentImage.str.contains(r'\\\\code.exe', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Encryption Using Gpg4win",
        "id": "550bbb84-ce5d-4e61-84ad-e590f0024dcd",
        "status": "test",
        "description": "Detects usage of Gpg4win to encrypt files",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\gpg.exe', case=False) | Image.str.contains(r'\\\\gpg2.exe', case=False) | Description=='GnuPG\u2019s OpenPGP tool') & CommandLine.str.contains(r' -c ', case=False) & CommandLine.str.contains(r'passphrase', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Detected Windows Software Discovery",
        "id": "e13f668e-7f95-443d-98d2-1816a7648a7b",
        "status": "test",
        "description": "Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable.",
        "tags": [
            "attack.discovery",
            "attack.t1518"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\reg.exe', case=False) & CommandLine.str.contains(r'query', case=False) & CommandLine.str.contains(r'\\\\software\\\\', case=False) & CommandLine.str.contains(r'/v', case=False) & CommandLine.str.contains(r'svcversion', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Insecure Proxy/DOH Transfer Via Curl.EXE",
        "id": "2c1486f5-02e8-4f86-9099-b97f2da4ed77",
        "status": "test",
        "description": "Detects execution of \"curl.exe\" with the \"insecure\" flag over proxy or DOH.",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\curl.exe', case=False) | OriginalFileName=='curl.exe') & (CommandLine.str.contains(r'--doh-insecure', case=False) | CommandLine.str.contains(r'--proxy-insecure', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Suspicious Activity Using SeCEdit",
        "id": "c2c76b77-32be-4d1f-82c9-7e544bdfe0eb",
        "status": "test",
        "description": "Detects potential suspicious behaviour using secedit.exe. Such as exporting or modifying the security policy",
        "tags": [
            "attack.discovery",
            "attack.persistence",
            "attack.defense-evasion",
            "attack.credential-access",
            "attack.privilege-escalation",
            "attack.t1562.002",
            "attack.t1547.001",
            "attack.t1505.005",
            "attack.t1556.002",
            "attack.t1562",
            "attack.t1574.007",
            "attack.t1564.002",
            "attack.t1546.008",
            "attack.t1546.007",
            "attack.t1547.014",
            "attack.t1547.010",
            "attack.t1547.002",
            "attack.t1557",
            "attack.t1082"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\secedit.exe', case=False) | OriginalFileName=='SeCEdit') & (CommandLine.str.contains(r'/export', case=False) & CommandLine.str.contains(r'/cfg', case=False) | CommandLine.str.contains(r'/configure', case=False) & CommandLine.str.contains(r'/db', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Service Registry Key Deleted Via Reg.EXE",
        "id": "05b2aa93-1210-42c8-8d9a-2fcc13b284f5",
        "status": "test",
        "description": "Detects execution of \"reg.exe\" commands with the \"delete\" flag on services registry key. Often used by attacker to remove AV software services",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'reg.exe', case=False) | OriginalFileName=='reg.exe') & CommandLine.str.contains(r' delete ', case=False) & CommandLine.str.contains(r'\\\\SYSTEM\\\\CurrentControlSet\\\\services\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Wsudo Suspicious Execution",
        "id": "bdeeabc9-ff2a-4a51-be59-bb253aac7891",
        "status": "test",
        "description": "Detects usage of wsudo (Windows Sudo Utility). Which is a tool that let the user execute programs with different permissions (System, Trusted Installer, Administrator...etc)",
        "tags": [
            "attack.execution",
            "attack.privilege-escalation",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wsudo.exe', case=False) | OriginalFileName=='wsudo.exe' | Description=='Windows sudo utility' | ParentImage.str.contains(r'\\\\wsudo-bridge.exe', case=False) | CommandLine.str.contains(r'-u System', case=False) | CommandLine.str.contains(r'-uSystem', case=False) | CommandLine.str.contains(r'-u TrustedInstaller', case=False) | CommandLine.str.contains(r'-uTrustedInstaller', case=False) | CommandLine.str.contains(r' --ti ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Dropper Script Execution Via WScript/CScript",
        "id": "cea72823-df4d-4567-950c-0b579eaf0846",
        "status": "test",
        "description": "Detects wscript/cscript executions of scripts located in user directories",
        "tags": [
            "attack.execution",
            "attack.t1059.005",
            "attack.t1059.007"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False)) & (CommandLine.str.contains(r':\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Tmp\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False)) & (CommandLine.str.contains(r'.js', case=False) | CommandLine.str.contains(r'.jse', case=False) | CommandLine.str.contains(r'.vba', case=False) | CommandLine.str.contains(r'.vbe', case=False) | CommandLine.str.contains(r'.vbs', case=False) | CommandLine.str.contains(r'.wsf', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Schtasks Schedule Types",
        "id": "24c8392b-aa3c-46b7-a545-43f71657fe98",
        "status": "test",
        "description": "Detects scheduled task creations or modification on a suspicious schedule type",
        "tags": [
            "attack.execution",
            "attack.t1053.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\schtasks.exe', case=False) | OriginalFileName=='schtasks.exe') & (CommandLine.str.contains(r' ONLOGON ', case=False) | CommandLine.str.contains(r' ONSTART ', case=False) | CommandLine.str.contains(r' ONCE ', case=False) | CommandLine.str.contains(r' ONIDLE ', case=False)) & ~ (CommandLine.str.contains(r'NT AUT', case=False) | CommandLine.str.contains(r' SYSTEM', case=False) | CommandLine.str.contains(r'HIGHEST', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - LocalPotato Execution",
        "id": "6bd75993-9888-4f91-9404-e1e4e4e34b77",
        "status": "test",
        "description": "Detects the execution of the LocalPotato POC based on basic PE metadata information and default CLI examples",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "cve.2023-21746"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\LocalPotato.exe', case=False) | CommandLine.str.contains(r'.exe -i C:\\\\', case=False) & CommandLine.str.contains(r'-o Windows\\\\', case=False) | Hashes.str.contains(r'IMPHASH=E1742EE971D6549E8D4D81115F88F1FC', case=False) | Hashes.str.contains(r'IMPHASH=DD82066EFBA94D7556EF582F247C8BB5', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Homoglyph Attack Using Lookalike Characters",
        "id": "32e280f1-8ad4-46ef-9e80-910657611fbc",
        "status": "test",
        "description": "Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.\nThis is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that\nare indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.t1036.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\u0410', case=False) | CommandLine.str.contains(r'\u0412', case=False) | CommandLine.str.contains(r'\u0415', case=False) | CommandLine.str.contains(r'\u041a', case=False) | CommandLine.str.contains(r'\u041c', case=False) | CommandLine.str.contains(r'\u041d', case=False) | CommandLine.str.contains(r'\u041e', case=False) | CommandLine.str.contains(r'\u0420', case=False) | CommandLine.str.contains(r'\u0421', case=False) | CommandLine.str.contains(r'\u0422', case=False) | CommandLine.str.contains(r'\u0425', case=False) | CommandLine.str.contains(r'\u0405', case=False) | CommandLine.str.contains(r'\u0406', case=False) | CommandLine.str.contains(r'\u0408', case=False) | CommandLine.str.contains(r'\u04ae', case=False) | CommandLine.str.contains(r'\u04c0', case=False) | CommandLine.str.contains(r'\u050c', case=False) | CommandLine.str.contains(r'\u051a', case=False) | CommandLine.str.contains(r'\u051c', case=False) | CommandLine.str.contains(r'\u0391', case=False) | CommandLine.str.contains(r'\u0392', case=False) | CommandLine.str.contains(r'\u0395', case=False) | CommandLine.str.contains(r'\u0396', case=False) | CommandLine.str.contains(r'\u0397', case=False) | CommandLine.str.contains(r'\u0399', case=False) | CommandLine.str.contains(r'\u039a', case=False) | CommandLine.str.contains(r'\u039c', case=False) | CommandLine.str.contains(r'\u039d', case=False) | CommandLine.str.contains(r'\u039f', case=False) | CommandLine.str.contains(r'\u03a1', case=False) | CommandLine.str.contains(r'\u03a4', case=False) | CommandLine.str.contains(r'\u03a5', case=False) | CommandLine.str.contains(r'\u03a7', case=False) | CommandLine.str.contains(r'\u0430', case=False) | CommandLine.str.contains(r'\u0435', case=False) | CommandLine.str.contains(r'\u043e', case=False) | CommandLine.str.contains(r'\u0440', case=False) | CommandLine.str.contains(r'\u0441', case=False) | CommandLine.str.contains(r'\u0445', case=False) | CommandLine.str.contains(r'\u0455', case=False) | CommandLine.str.contains(r'\u0456', case=False) | CommandLine.str.contains(r'\u04cf', case=False) | CommandLine.str.contains(r'\u0458', case=False) | CommandLine.str.contains(r'\u04bb', case=False) | CommandLine.str.contains(r'\u0501', case=False) | CommandLine.str.contains(r'\u051b', case=False) | CommandLine.str.contains(r'\u051d', case=False) | CommandLine.str.contains(r'\u03bf', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Program Executed Using Proxy/Local Command Via SSH.EXE",
        "id": "7d6d30b8-5b91-4b90-a891-46cccaf29598",
        "status": "test",
        "description": "Detect usage of the \"ssh.exe\" binary as a proxy to launch other programs.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage=='C:\\\\Windows\\\\System32\\\\OpenSSH\\\\sshd.exe' | Image.str.contains(r'\\\\ssh.exe', case=False) & (CommandLine.str.contains(r'ProxyCommand=', case=False) | CommandLine.str.contains(r'PermitLocalCommand', case=False) & CommandLine.str.contains(r'LocalCommand', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Wlrmdr.EXE Uncommon Argument Or Child Process",
        "id": "9cfc00b6-bfb7-49ce-9781-ef78503154bb",
        "status": "test",
        "description": "Detects the execution of \"Wlrmdr.exe\" with the \"-u\" command line flag which allows anything passed to it to be an argument of the ShellExecute API, which would allow an attacker to execute arbitrary binaries.\nThis detection also focuses on any uncommon child processes spawned from \"Wlrmdr.exe\" as a supplement for those that posses \"ParentImage\" telemetry.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\wlrmdr.exe', case=False) | (Image.str.contains(r'\\\\wlrmdr.exe', case=False) | OriginalFileName=='WLRMNDR.EXE') & (CommandLine.str.contains(r'-s ', case=False) | CommandLine.str.contains(r'/s ', case=False) | CommandLine.str.contains(r'\u2013s ', case=False) | CommandLine.str.contains(r'\u2014s ', case=False) | CommandLine.str.contains(r'\u2015s ', case=False)) & (CommandLine.str.contains(r'-f ', case=False) | CommandLine.str.contains(r'/f ', case=False) | CommandLine.str.contains(r'\u2013f ', case=False) | CommandLine.str.contains(r'\u2014f ', case=False) | CommandLine.str.contains(r'\u2015f ', case=False)) & (CommandLine.str.contains(r'-t ', case=False) | CommandLine.str.contains(r'/t ', case=False) | CommandLine.str.contains(r'\u2013t ', case=False) | CommandLine.str.contains(r'\u2014t ', case=False) | CommandLine.str.contains(r'\u2015t ', case=False)) & (CommandLine.str.contains(r'-m ', case=False) | CommandLine.str.contains(r'/m ', case=False) | CommandLine.str.contains(r'\u2013m ', case=False) | CommandLine.str.contains(r'\u2014m ', case=False) | CommandLine.str.contains(r'\u2015m ', case=False)) & (CommandLine.str.contains(r'-a ', case=False) | CommandLine.str.contains(r'/a ', case=False) | CommandLine.str.contains(r'\u2013a ', case=False) | CommandLine.str.contains(r'\u2014a ', case=False) | CommandLine.str.contains(r'\u2015a ', case=False)) & (CommandLine.str.contains(r'-u ', case=False) | CommandLine.str.contains(r'/u ', case=False) | CommandLine.str.contains(r'\u2013u ', case=False) | CommandLine.str.contains(r'\u2014u ', case=False) | CommandLine.str.contains(r'\u2015u ', case=False)) & ~ (ParentImage=='C:\\\\Windows\\\\System32\\\\winlogon.exe' | ParentImage==['', '-'] | ParentImage is null))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Domain Trust Discovery Via Dsquery",
        "id": "3bad990e-4848-4a78-9530-b427d854aac0",
        "status": "test",
        "description": "Detects execution of \"dsquery.exe\" for domain trust discovery",
        "tags": [
            "attack.discovery",
            "attack.t1482"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\dsquery.exe', case=False) | OriginalFileName=='dsquery.exe') & CommandLine.str.contains(r'trustedDomain', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Modification Of Scheduled Tasks",
        "id": "1c0e41cd-21bb-4433-9acc-4a2cd6367b9b",
        "status": "test",
        "description": "Detects when an attacker tries to modify an already existing scheduled tasks to run from a suspicious location\nAttackers can create a simple looking task in order to avoid detection on creation as it's often the most focused on\nInstead they modify the task after creation to include their malicious payload\n",
        "tags": [
            "attack.execution",
            "attack.t1053.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\schtasks.exe', case=False) & CommandLine.str.contains(r' /Change ', case=False) & CommandLine.str.contains(r' /TN ', case=False) & (CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'\\\\WINDOWS\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Desktop\\\\', case=False) | CommandLine.str.contains(r'\\\\Downloads\\\\', case=False) | CommandLine.str.contains(r'\\\\Temporary Internet', case=False) | CommandLine.str.contains(r'C:\\\\ProgramData\\\\', case=False) | CommandLine.str.contains(r'C:\\\\Perflogs\\\\', case=False) | CommandLine.str.contains(r'%ProgramData%', case=False) | CommandLine.str.contains(r'%appdata%', case=False) | CommandLine.str.contains(r'%comspec%', case=False) | CommandLine.str.contains(r'%localappdata%', case=False)) & (CommandLine.str.contains(r'regsvr32', case=False) | CommandLine.str.contains(r'rundll32', case=False) | CommandLine.str.contains(r'cmd /c ', case=False) | CommandLine.str.contains(r'cmd /k ', case=False) | CommandLine.str.contains(r'cmd /r ', case=False) | CommandLine.str.contains(r'cmd.exe /c ', case=False) | CommandLine.str.contains(r'cmd.exe /k ', case=False) | CommandLine.str.contains(r'cmd.exe /r ', case=False) | CommandLine.str.contains(r'powershell', case=False) | CommandLine.str.contains(r'mshta', case=False) | CommandLine.str.contains(r'wscript', case=False) | CommandLine.str.contains(r'cscript', case=False) | CommandLine.str.contains(r'certutil', case=False) | CommandLine.str.contains(r'bitsadmin', case=False) | CommandLine.str.contains(r'bash.exe', case=False) | CommandLine.str.contains(r'bash ', case=False) | CommandLine.str.contains(r'scrcons', case=False) | CommandLine.str.contains(r'wmic ', case=False) | CommandLine.str.contains(r'wmic.exe', case=False) | CommandLine.str.contains(r'forfiles', case=False) | CommandLine.str.contains(r'scriptrunner', case=False) | CommandLine.str.contains(r'hh.exe', case=False) | CommandLine.str.contains(r'hh ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "User Added To Highly Privileged Group",
        "id": "10fb649c-3600-4d37-b1e6-56ea90bb7e09",
        "status": "test",
        "description": "Detects addition of users to highly privileged groups via \"Net\" or \"Add-LocalGroupMember\".",
        "tags": [
            "attack.persistence",
            "attack.t1098"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'localgroup ', case=False) & CommandLine.str.contains(r' /add', case=False) | CommandLine.str.contains(r'Add-LocalGroupMember ', case=False) & CommandLine.str.contains(r' -Group ', case=False)) & (CommandLine.str.contains(r'Group Policy Creator Owners', case=False) | CommandLine.str.contains(r'Schema Admins', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Nimgrab Execution",
        "id": "74a12f18-505c-4114-8d0b-8448dd5485c6",
        "status": "test",
        "description": "Detects the usage of nimgrab, a tool bundled with the Nim programming framework and used for downloading files.",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\nimgrab.exe', case=False) | Hashes.str.contains(r'MD5=2DD44C3C29D667F5C0EF5F9D7C7FFB8B', case=False) | Hashes.str.contains(r'SHA256=F266609E91985F0FE3E31C5E8FAEEEC4FFA5E0322D8B6F15FE69F4C5165B9559', case=False) | Hashes.str.contains(r'IMPHASH=C07FDDD21D123EA9B3A08EEF44AAAC45', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Psexec Execution",
        "id": "730fc21b-eaff-474b-ad23-90fd265d4988",
        "status": "test",
        "description": "Detects user accept agreement execution in psexec commandline",
        "tags": [
            "attack.execution",
            "attack.t1569",
            "attack.t1021"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\psexec.exe', case=False) | OriginalFileName=='psexec.c')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "NtdllPipe Like Activity Execution",
        "id": "bbc865e4-7fcd-45a6-8ff1-95ced28ec5b2",
        "status": "test",
        "description": "Detects command that type the content of ntdll.dll to a different file or a pipe in order to evade AV / EDR detection. As seen being used in the POC NtdllPipe",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'type %windir%\\\\system32\\\\ntdll.dll', case=False) | CommandLine.str.contains(r'type %systemroot%\\\\system32\\\\ntdll.dll', case=False) | CommandLine.str.contains(r'type c:\\\\windows\\\\system32\\\\ntdll.dll', case=False) | CommandLine.str.contains(r'\\\\ntdll.dll > \\\\\\\\.\\\\pipe\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Notepad Password Files Discovery",
        "id": "3b4e950b-a3ea-44d3-877e-432071990709",
        "status": "experimental",
        "description": "Detects the execution of Notepad to open a file that has the string \"password\" which may indicate unauthorized access to credentials or suspicious activity.",
        "tags": [
            "attack.discovery",
            "attack.t1083"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\explorer.exe', case=False) & Image.str.contains(r'\\\\notepad.exe', case=False) & (CommandLine.str.contains(r'*password*.txt') | CommandLine.str.contains(r'*password*.csv') | CommandLine.str.contains(r'*password*.doc') | CommandLine.str.contains(r'*password*.xls'))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - AnyDesk Execution",
        "id": "b52e84a3-029e-4529-b09b-71d19dd27e94",
        "status": "test",
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\AnyDesk.exe', case=False) | Image.str.contains(r'\\\\AnyDeskMSI.exe', case=False) | Description=='AnyDesk' | Product=='AnyDesk' | Company=='AnyDesk Software GmbH')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Invoke-Obfuscation CLIP+ Launcher",
        "id": "b222df08-0e07-11eb-adc1-0242ac120002",
        "status": "test",
        "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'cmd', case=False) & CommandLine.str.contains(r'&&', case=False) & CommandLine.str.contains(r'clipboard]::', case=False) & CommandLine.str.contains(r'-f', case=False) & (CommandLine.str.contains(r'/c', case=False) | CommandLine.str.contains(r'/r', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Malicious PE Execution by Microsoft Visual Studio Debugger",
        "id": "15c7904e-6ad1-4a45-9b46-5fb25df37fd2",
        "status": "test",
        "description": "There is an option for a MS VS Just-In-Time Debugger \"vsjitdebugger.exe\" to launch specified executable and attach a debugger.\nThis option may be used adversaries to execute malicious code by signed verified binary.\nThe debugger is installed alongside with Microsoft Visual Studio package.\n",
        "tags": [
            "attack.t1218",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\vsjitdebugger.exe', case=False) & ~ (Image.str.contains(r'*\\\\vsimmersiveactivatehelper*.exe') | Image.str.contains(r'\\\\devenv.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Shells Spawn by Java Utility Keytool",
        "id": "90fb5e62-ca1f-4e22-b42e-cc521874c938",
        "status": "test",
        "description": "Detects suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation)",
        "tags": [
            "attack.initial-access",
            "attack.persistence",
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\keytool.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\sh.exe', case=False) | Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\whoami.exe', case=False) | Image.str.contains(r'\\\\bitsadmin.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\scrcons.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\hh.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\forfiles.exe', case=False) | Image.str.contains(r'\\\\scriptrunner.exe', case=False) | Image.str.contains(r'\\\\mftrace.exe', case=False) | Image.str.contains(r'\\\\AppVLP.exe', case=False) | Image.str.contains(r'\\\\systeminfo.exe', case=False) | Image.str.contains(r'\\\\reg.exe', case=False) | Image.str.contains(r'\\\\query.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Child Process Of WinRAR.EXE",
        "id": "146aace8-9bd6-42ba-be7a-0070d8027b76",
        "status": "test",
        "description": "Detects potentially suspicious child processes of WinRAR.exe.",
        "tags": [
            "attack.execution",
            "attack.t1203"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\WinRAR.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | OriginalFileName==['Cmd.Exe', 'cscript.exe', 'mshta.exe', 'PowerShell.EXE', 'pwsh.dll', 'regsvr32.exe', 'RUNDLL32.EXE', 'wscript.exe'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Wscript Shell Run In CommandLine",
        "id": "2c28c248-7f50-417a-9186-a85b223010ee",
        "status": "test",
        "description": "Detects the presence of the keywords \"Wscript\", \"Shell\" and \"Run\" in the command, which could indicate a suspicious activity",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'Wscript.', case=False) & CommandLine.str.contains(r'.Shell', case=False) & CommandLine.str.contains(r'.Run', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential AMSI Bypass Via .NET Reflection",
        "id": "30edb182-aa75-42c0-b0a9-e998bb29067c",
        "status": "test",
        "description": "Detects Request to \"amsiInitFailed\" that can be used to disable AMSI Scanning",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'System.Management.Automation.AmsiUtils', case=False) & CommandLine.str.contains(r'amsiInitFailed', case=False) | CommandLine.str.contains(r'[Ref].Assembly.GetType', case=False) & CommandLine.str.contains(r'SetValue($null,$true)', case=False) & CommandLine.str.contains(r'NonPublic,Static', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Rundll32 Execution Without CommandLine Parameters",
        "id": "1775e15e-b61b-4d14-a1a3-80981298085a",
        "status": "test",
        "description": "Detects suspicious start of rundll32.exe without any parameters as found in CobaltStrike beacon activity",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\\\\rundll32.exe', case=False) | CommandLine.str.contains(r'\\\\rundll32.exe\"', case=False) | CommandLine.str.contains(r'\\\\rundll32', case=False)) & ~ (ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | ParentImage.str.contains(r'\\\\Microsoft\\\\Edge\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Hydra Password Bruteforce Execution",
        "id": "aaafa146-074c-11eb-adc1-0242ac120002",
        "status": "test",
        "description": "Detects command line parameters used by Hydra password guessing hack tool",
        "tags": [
            "attack.credential-access",
            "attack.t1110",
            "attack.t1110.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'-u ', case=False) & CommandLine.str.contains(r'-p ', case=False) & (CommandLine.str.contains(r'^USER^', case=False) | CommandLine.str.contains(r'^PASS^', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious PowerShell Invocation From Script Engines",
        "id": "95eadcb2-92e4-4ed1-9031-92547773a6db",
        "status": "test",
        "description": "Detects suspicious powershell invocations from interpreters or unusual programs",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\wscript.exe', case=False) | ParentImage.str.contains(r'\\\\cscript.exe', case=False)) & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & ~ CurrentDirectory.str.contains(r'\\\\Health Service State\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential CommandLine Path Traversal Via Cmd.EXE",
        "id": "087790e3-3287-436c-bccf-cbd0184a7db1",
        "status": "test",
        "description": "Detects potential path traversal attempt via cmd.exe. Could indicate possible command/argument confusion/hijacking",
        "tags": [
            "attack.execution",
            "attack.t1059.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='cmd.exe') & (ParentCommandLine.str.contains(r'/c', case=False) | ParentCommandLine.str.contains(r'/k', case=False) | ParentCommandLine.str.contains(r'/r', case=False) | CommandLine.str.contains(r'/c', case=False) | CommandLine.str.contains(r'/k', case=False) | CommandLine.str.contains(r'/r', case=False)) & (ParentCommandLine=='/../../' | CommandLine.str.contains(r'/../../', case=False)) & ~ CommandLine.str.contains(r'\\\\Tasktop\\\\keycloak\\\\bin\\\\/../../jre\\\\bin\\\\java', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - EDRSilencer Execution",
        "id": "eb2d07d4-49cb-4523-801a-da002df36602",
        "status": "test",
        "description": "Detects the execution of EDRSilencer, a tool that leverages Windows Filtering Platform (WFP) to block Endpoint Detection and Response (EDR) agents from reporting security events to the server based on PE metadata information.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\EDRSilencer.exe', case=False) | OriginalFileName=='EDRSilencer.exe' | Description.str.contains(r'EDRSilencer', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Desktopimgdownldr Command",
        "id": "bb58aa4a-b80b-415a-a2c0-2f65a4c81009",
        "status": "test",
        "description": "Detects a suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' /lockscreenurl:', case=False) & ~ (CommandLine.str.contains(r'.jpg', case=False) | CommandLine.str.contains(r'.jpeg', case=False) | CommandLine.str.contains(r'.png', case=False)) | CommandLine.str.contains(r'reg delete', case=False) & CommandLine.str.contains(r'\\\\PersonalizationCSP', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Execution From Parent Process In Public Folder",
        "id": "69bd9b97-2be2-41b6-9816-fb08757a4d1a",
        "status": "test",
        "description": "Detects a potentially suspicious execution of a parent process located in the \"\\Users\\Public\" folder executing a child process containing references to shell or scripting binaries and commandlines.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1564",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r':\\\\Users\\\\Public\\\\', case=False) & (Image.str.contains(r'\\\\bitsadmin.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | CommandLine.str.contains(r'bitsadmin', case=False) | CommandLine.str.contains(r'certutil', case=False) | CommandLine.str.contains(r'cscript', case=False) | CommandLine.str.contains(r'mshta', case=False) | CommandLine.str.contains(r'powershell', case=False) | CommandLine.str.contains(r'regsvr32', case=False) | CommandLine.str.contains(r'rundll32', case=False) | CommandLine.str.contains(r'wscript', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Msiexec Execute Arbitrary DLL",
        "id": "6f4191bb-912b-48a8-9ce7-682769541e6d",
        "status": "test",
        "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.007"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\msiexec.exe', case=False) & (CommandLine.str.contains(r' -y', case=False) | CommandLine.str.contains(r' /y', case=False) | CommandLine.str.contains(r' \u2013y', case=False) | CommandLine.str.contains(r' \u2014y', case=False) | CommandLine.str.contains(r' \u2015y', case=False)) & ~ (CommandLine.str.contains(r'\\\\MsiExec.exe\" /Y \"C:\\\\Program Files\\\\Bonjour\\\\mdnsNSP.dll', case=False) | CommandLine.str.contains(r'\\\\MsiExec.exe\" /Y \"C:\\\\Program Files (x86)\\\\Bonjour\\\\mdnsNSP.dll', case=False) | CommandLine.str.contains(r'\\\\MsiExec.exe\" /Y \"C:\\\\Program Files (x86)\\\\Apple Software Update\\\\ScriptingObjectModel.dll', case=False) | CommandLine.str.contains(r'\\\\MsiExec.exe\" /Y \"C:\\\\Program Files (x86)\\\\Apple Software Update\\\\SoftwareUpdateAdmin.dll', case=False) | CommandLine.str.contains(r'\\\\MsiExec.exe\" /Y \"C:\\\\Windows\\\\CCM\\\\', case=False) | CommandLine.str.contains(r'\\\\MsiExec.exe\" /Y C:\\\\Windows\\\\CCM\\\\', case=False) | CommandLine.str.contains(r'\\\\MsiExec.exe\" -Y \"C:\\\\Program Files\\\\Bonjour\\\\mdnsNSP.dll', case=False) | CommandLine.str.contains(r'\\\\MsiExec.exe\" -Y \"C:\\\\Program Files (x86)\\\\Bonjour\\\\mdnsNSP.dll', case=False) | CommandLine.str.contains(r'\\\\MsiExec.exe\" -Y \"C:\\\\Program Files (x86)\\\\Apple Software Update\\\\ScriptingObjectModel.dll', case=False) | CommandLine.str.contains(r'\\\\MsiExec.exe\" -Y \"C:\\\\Program Files (x86)\\\\Apple Software Update\\\\SoftwareUpdateAdmin.dll', case=False) | CommandLine.str.contains(r'\\\\MsiExec.exe\" -Y \"C:\\\\Windows\\\\CCM\\\\', case=False) | CommandLine.str.contains(r'\\\\MsiExec.exe\" -Y C:\\\\Windows\\\\CCM\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using NTFS Reparse Point - Process",
        "id": "39ed3c80-e6a1-431b-9df3-911ac53d08a7",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\"C:\\\\Windows\\\\system32\\\\wusa.exe\"  /quiet C:\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\update.msu', case=False) & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288']) | ParentCommandLine=='\"C:\\\\Windows\\\\system32\\\\dism.exe\" /online /quiet /norestart /add-package /packagepath:\"C:\\\\Windows\\\\system32\\\\pe386\" /ignorecheck' & (IntegrityLevel==['High', 'System']) & CommandLine.str.contains(r'C:\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) & CommandLine.str.contains(r'\\\\dismhost.exe {', case=False) & Image.str.contains(r'\\\\DismHost.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "VMToolsd Suspicious Child Process",
        "id": "5687f942-867b-4578-ade7-1e341c46e99a",
        "status": "test",
        "description": "Detects suspicious child process creations of VMware Tools process which may indicate persistence setup",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\vmtoolsd.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | OriginalFileName==['Cmd.Exe', 'cscript.exe', 'MSHTA.EXE', 'PowerShell.EXE', 'pwsh.dll', 'REGSVR32.EXE', 'RUNDLL32.EXE', 'wscript.exe']) & ~ (Image.str.contains(r'\\\\cmd.exe', case=False) & (CommandLine.str.contains(r'\\\\VMware\\\\VMware Tools\\\\poweron-vm-default.bat', case=False) | CommandLine.str.contains(r'\\\\VMware\\\\VMware Tools\\\\poweroff-vm-default.bat', case=False) | CommandLine.str.contains(r'\\\\VMware\\\\VMware Tools\\\\resume-vm-default.bat', case=False) | CommandLine.str.contains(r'\\\\VMware\\\\VMware Tools\\\\suspend-vm-default.bat', case=False)) | Image.str.contains(r'\\\\cmd.exe', case=False) & CommandLine=='' | Image.str.contains(r'\\\\cmd.exe', case=False) & CommandLine is null)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Service StartupType Change Via PowerShell Set-Service",
        "id": "62b20d44-1546-4e61-afce-8e175eb9473c",
        "status": "test",
        "description": "Detects the use of the PowerShell \"Set-Service\" cmdlet to change the startup type of a service to \"disabled\" or \"manual\"",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | OriginalFileName=='PowerShell.EXE') & CommandLine.str.contains(r'Set-Service', case=False) & CommandLine.str.contains(r'-StartupType', case=False) & (CommandLine.str.contains(r'Disabled', case=False) | CommandLine.str.contains(r'Manual', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Logon Scripts - CommandLine",
        "id": "21d856f9-9281-4ded-9377-51a1a6e2a432",
        "status": "test",
        "description": "Detects the addition of a new LogonScript to the registry value \"UserInitMprLogonScript\" for potential persistence",
        "tags": [
            "attack.persistence",
            "attack.t1037.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'UserInitMprLogonScript', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed NirCmd.EXE Execution",
        "id": "264982dc-dbad-4dce-b707-1e0d3e0f73d9",
        "status": "test",
        "description": "Detects the execution of a renamed \"NirCmd.exe\" binary based on the PE metadata fields.",
        "tags": [
            "attack.execution",
            "attack.t1059",
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & OriginalFileName=='NirCmd.exe' & ~ (Image.str.contains(r'\\\\nircmd.exe', case=False) | Image.str.contains(r'\\\\nircmdc.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Mpclient.DLL Sideloading Via Defender Binaries",
        "id": "7002aa10-b8d4-47ae-b5ba-51ab07e228b9",
        "status": "test",
        "description": "Detects potential sideloading of \"mpclient.dll\" by Windows Defender processes (\"MpCmdRun\" and \"NisSrv\") from their non-default directory.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\MpCmdRun.exe', case=False) | Image.str.contains(r'\\\\NisSrv.exe', case=False)) & ~ (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Windows Defender\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft Security Client\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Windows Defender\\\\', case=False) | Image.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential PowerShell Execution Policy Tampering - ProcCreation",
        "id": "cf2e938e-9a3e-4fe8-a347-411642b28a9f",
        "status": "test",
        "description": "Detects changes to the PowerShell execution policy registry key in order to bypass signing requirements for script execution from the CommandLine",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\\\\ShellIds\\\\Microsoft.PowerShell\\\\ExecutionPolicy', case=False) | CommandLine.str.contains(r'\\\\Policies\\\\Microsoft\\\\Windows\\\\PowerShell\\\\ExecutionPolicy', case=False)) & (CommandLine.str.contains(r'Bypass', case=False) | CommandLine.str.contains(r'RemoteSigned', case=False) | CommandLine.str.contains(r'Unrestricted', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Amazon SSM Agent Hijacking",
        "id": "d20ee2f4-822c-4827-9e15-41500b1fff10",
        "status": "test",
        "description": "Detects potential Amazon SSM agent hijack attempts as outlined in the Mitiga research report.",
        "tags": [
            "attack.command-and-control",
            "attack.persistence",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\amazon-ssm-agent.exe', case=False) & CommandLine.str.contains(r'-register ', case=False) & CommandLine.str.contains(r'-code ', case=False) & CommandLine.str.contains(r'-id ', case=False) & CommandLine.str.contains(r'-region ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Local File Read Using Curl.EXE",
        "id": "aa6f6ea6-0676-40dd-b510-6e46f02d8867",
        "status": "test",
        "description": "Detects execution of \"curl.exe\" with the \"file://\" protocol handler in order to read local files.",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\curl.exe', case=False) | OriginalFileName=='curl.exe') & CommandLine.str.contains(r'file:///', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SharpChisel Execution",
        "id": "cf93e05e-d798-4d9e-b522-b0248dc61eaf",
        "status": "test",
        "description": "Detects usage of the Sharp Chisel via the commandline arguments",
        "tags": [
            "attack.command-and-control",
            "attack.t1090.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SharpChisel.exe', case=False) | Product=='SharpChisel')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Network Sniffing Activity Using Network Tools",
        "id": "ba1f7802-adc7-48b4-9ecb-81e227fddfd5",
        "status": "test",
        "description": "Detects potential network sniffing via use of network tools such as \"tshark\", \"windump\".\nNetwork sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n",
        "tags": [
            "attack.credential-access",
            "attack.discovery",
            "attack.t1040"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\tshark.exe', case=False) & CommandLine.str.contains(r'-i', case=False) | Image.str.contains(r'\\\\windump.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Powershell ReverseShell Connection",
        "id": "edc2f8ae-2412-4dfd-b9d5-0c57727e70be",
        "status": "stable",
        "description": "Detects usage of the \"TcpClient\" class. Which can be abused to establish remote connections and reverse-shells. As seen used by the Nishang \"Invoke-PowerShellTcpOneLine\" reverse shell and other.",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName==['PowerShell.EXE', 'pwsh.dll'] | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & CommandLine.str.contains(r' Net.Sockets.TCPClient', case=False) & CommandLine.str.contains(r'.GetStream(', case=False) & CommandLine.str.contains(r'.Write(', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Suspicious Windows Feature Enabled - ProcCreation",
        "id": "c740d4cf-a1e9-41de-bb16-8a46a4f57918",
        "status": "test",
        "description": "Detects usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'Enable-WindowsOptionalFeature', case=False) & CommandLine.str.contains(r'-Online', case=False) & CommandLine.str.contains(r'-FeatureName', case=False) & (CommandLine.str.contains(r'TelnetServer', case=False) | CommandLine.str.contains(r'Internet-Explorer-Optional-amd64', case=False) | CommandLine.str.contains(r'TFTP', case=False) | CommandLine.str.contains(r'SMB1Protocol', case=False) | CommandLine.str.contains(r'Client-ProjFS', case=False) | CommandLine.str.contains(r'Microsoft-Windows-Subsystem-Linux', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Curl.EXE Download",
        "id": "e218595b-bbe7-4ee5-8a96-f32a24ad3468",
        "status": "test",
        "description": "Detects a suspicious curl process start on Windows and outputs the requested document to a local file",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\curl.exe', case=False) | Product=='The curl executable') & (CommandLine.str.contains(r'%AppData%', case=False) | CommandLine.str.contains(r'%Public%', case=False) | CommandLine.str.contains(r'%Temp%', case=False) | CommandLine.str.contains(r'%tmp%', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\', case=False) | CommandLine.str.contains(r'\\\\Desktop\\\\', case=False) | CommandLine.str.contains(r'\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'C:\\\\PerfLogs\\\\', case=False) | CommandLine.str.contains(r'C:\\\\ProgramData\\\\', case=False) | CommandLine.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.gif', case=False) | CommandLine.str.contains(r'.jpeg', case=False) | CommandLine.str.contains(r'.jpg', case=False) | CommandLine.str.contains(r'.png', case=False) | CommandLine.str.contains(r'.temp', case=False) | CommandLine.str.contains(r'.tmp', case=False) | CommandLine.str.contains(r'.txt', case=False) | CommandLine.str.contains(r'.vbe', case=False) | CommandLine.str.contains(r'.vbs', case=False)) & ~ (ParentImage=='C:\\\\Program Files\\\\Git\\\\usr\\\\bin\\\\sh.exe' & Image=='C:\\\\Program Files\\\\Git\\\\mingw64\\\\bin\\\\curl.exe' & CommandLine.str.contains(r'--silent --show-error --output ', case=False) & CommandLine.str.contains(r'gfw-httpget-', case=False) & CommandLine.str.contains(r'AppData', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Recon Command Output Piped To Findstr.EXE",
        "id": "ccb5742c-c248-4982-8c5c-5571b9275ad3",
        "status": "experimental",
        "description": "Detects the execution of a potential recon command where the results are piped to \"findstr\". This is meant to trigger on inline calls of \"cmd.exe\" via the \"/c\" or \"/k\" for example.\nAttackers often time use this technique to extract specific information they require in their reconnaissance phase.\n",
        "tags": [
            "attack.discovery",
            "attack.t1057"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'*ipconfig*|*find*') | CommandLine.str.contains(r'*net*|*find*') | CommandLine.str.contains(r'*netstat*|*find*') | CommandLine.str.contains(r'*ping*|*find*') | CommandLine.str.contains(r'*systeminfo*|*find*') | CommandLine.str.contains(r'*tasklist*|*find*') | CommandLine.str.contains(r'*whoami*|*find*'))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Script Run in AppData",
        "id": "ac175779-025a-4f12-98b0-acdaeb77ea85",
        "status": "test",
        "description": "Detects a suspicious command line execution that invokes PowerShell with reference to an AppData folder",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'powershell.exe', case=False) | CommandLine.str.contains(r'\\\\powershell', case=False) | CommandLine.str.contains(r'\\\\pwsh', case=False) | CommandLine.str.contains(r'pwsh.exe', case=False)) & CommandLine.str.contains(r'/c ', case=False) & CommandLine.str.contains(r'\\\\AppData\\\\', case=False) & (CommandLine.str.contains(r'Local\\\\', case=False) | CommandLine.str.contains(r'Roaming\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Process Launched Without Image Name",
        "id": "f208d6d8-d83a-4c2c-960d-877c37da84e5",
        "status": "experimental",
        "description": "Detect the use of processes with no name (\".exe\"), which can be used to evade Image-based detections.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - CrackMapExec Process Patterns",
        "id": "f26307d8-14cd-47e3-a26b-4b4769f24af6",
        "status": "test",
        "description": "Detects suspicious process patterns found in logs when CrackMapExec is used",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'tasklist /fi ', case=False) & CommandLine.str.contains(r'Imagename eq lsass.exe', case=False) & (CommandLine.str.contains(r'cmd.exe /c ', case=False) | CommandLine.str.contains(r'cmd.exe /r ', case=False) | CommandLine.str.contains(r'cmd.exe /k ', case=False) | CommandLine.str.contains(r'cmd /c ', case=False) | CommandLine.str.contains(r'cmd /r ', case=False) | CommandLine.str.contains(r'cmd /k ', case=False)) & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False)) | CommandLine.str.contains(r'do rundll32.exe C:\\\\windows\\\\System32\\\\comsvcs.dll, MiniDump', case=False) & CommandLine.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) & CommandLine.str.contains(r' full', case=False) & CommandLine.str.contains(r'%%B', case=False) | CommandLine.str.contains(r'tasklist /v /fo csv', case=False) & CommandLine.str.contains(r'findstr /i \"lsass\"', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Password Provided In Command Line Of Net.EXE",
        "id": "d4498716-1d52-438f-8084-4a603157d131",
        "status": "test",
        "description": "Detects a when net.exe is called with a password in the command line",
        "tags": [
            "attack.defense-evasion",
            "attack.initial-access",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.lateral-movement",
            "attack.t1021.002",
            "attack.t1078"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | OriginalFileName==['net.exe', 'net1.exe']) & CommandLine.str.contains(r' use ', case=False) & CommandLine.str.contains(r'*:*\\\\*') & CommandLine.str.contains(r'*/USER:* *') & ~ CommandLine.str.contains(r' ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Windows Trace ETW Session Tamper Via Logman.EXE",
        "id": "cd1f961e-0b96-436b-b7c6-38da4583ec00",
        "status": "test",
        "description": "Detects the execution of \"logman\" utility in order to disable or delete Windows trace sessions",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001",
            "attack.t1070.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\logman.exe', case=False) | OriginalFileName=='Logman.exe') & (CommandLine.str.contains(r'stop ', case=False) | CommandLine.str.contains(r'delete ', case=False)) & (CommandLine.str.contains(r'Circular Kernel Context Logger', case=False) | CommandLine.str.contains(r'EventLog-', case=False) | CommandLine.str.contains(r'SYSMON TRACE', case=False) | CommandLine.str.contains(r'SysmonDnsEtwSession', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed Mavinject.EXE Execution",
        "id": "e6474a1b-5390-49cd-ab41-8d88655f7394",
        "status": "test",
        "description": "Detects the execution of a renamed version of the \"Mavinject\" process. Which can be abused to perform process injection using the \"/INJECTRUNNING\" flag",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055.001",
            "attack.t1218.013"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName==['mavinject32.exe', 'mavinject64.exe']) & ~ (Image.str.contains(r'\\\\mavinject32.exe', case=False) | Image.str.contains(r'\\\\mavinject64.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Downloaded From File-Sharing Website Via Certutil.EXE",
        "id": "42a5f1e7-9603-4f6d-97ae-3f37d130d794",
        "status": "experimental",
        "description": "Detects the execution of certutil with certain flags that allow the utility to download files from file-sharing websites.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certutil.exe', case=False) | OriginalFileName=='CertUtil.exe') & (CommandLine.str.contains(r'urlcache ', case=False) | CommandLine.str.contains(r'verifyctl ', case=False)) & (CommandLine.str.contains(r'.githubusercontent.com', case=False) | CommandLine.str.contains(r'anonfiles.com', case=False) | CommandLine.str.contains(r'cdn.discordapp.com', case=False) | CommandLine.str.contains(r'ddns.net', case=False) | CommandLine.str.contains(r'dl.dropboxusercontent.com', case=False) | CommandLine.str.contains(r'ghostbin.co', case=False) | CommandLine.str.contains(r'glitch.me', case=False) | CommandLine.str.contains(r'gofile.io', case=False) | CommandLine.str.contains(r'hastebin.com', case=False) | CommandLine.str.contains(r'mediafire.com', case=False) | CommandLine.str.contains(r'mega.nz', case=False) | CommandLine.str.contains(r'onrender.com', case=False) | CommandLine.str.contains(r'pages.dev', case=False) | CommandLine.str.contains(r'paste.ee', case=False) | CommandLine.str.contains(r'pastebin.com', case=False) | CommandLine.str.contains(r'pastebin.pl', case=False) | CommandLine.str.contains(r'pastetext.net', case=False) | CommandLine.str.contains(r'privatlab.com', case=False) | CommandLine.str.contains(r'privatlab.net', case=False) | CommandLine.str.contains(r'send.exploit.in', case=False) | CommandLine.str.contains(r'sendspace.com', case=False) | CommandLine.str.contains(r'storage.googleapis.com', case=False) | CommandLine.str.contains(r'storjshare.io', case=False) | CommandLine.str.contains(r'supabase.co', case=False) | CommandLine.str.contains(r'temp.sh', case=False) | CommandLine.str.contains(r'transfer.sh', case=False) | CommandLine.str.contains(r'trycloudflare.com', case=False) | CommandLine.str.contains(r'ufile.io', case=False) | CommandLine.str.contains(r'w3spaces.com', case=False) | CommandLine.str.contains(r'workers.dev', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Binary In User Directory Spawned From Office Application",
        "id": "aa3a6f94-890e-4e22-b634-ffdfd54792cc",
        "status": "test",
        "description": "Detects an executable in the users directory started from one of the Microsoft Office suite applications (Word, Excel, PowerPoint, Publisher, Visio)",
        "tags": [
            "attack.execution",
            "attack.t1204.002",
            "attack.g0046",
            "car.2013-05-002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\WINWORD.EXE', case=False) | ParentImage.str.contains(r'\\\\EXCEL.EXE', case=False) | ParentImage.str.contains(r'\\\\POWERPNT.exe', case=False) | ParentImage.str.contains(r'\\\\MSPUB.exe', case=False) | ParentImage.str.contains(r'\\\\VISIO.exe', case=False) | ParentImage.str.contains(r'\\\\MSACCESS.exe', case=False) | ParentImage.str.contains(r'\\\\EQNEDT32.exe', case=False)) & Image.str.contains(r'C:\\\\users\\\\', case=False) & Image.str.contains(r'.exe', case=False) & ~ Image.str.contains(r'\\\\Teams.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - PPID Spoofing SelectMyParent Tool Execution",
        "id": "52ff7941-8211-46f9-84f8-9903efb7077d",
        "status": "test",
        "description": "Detects the use of parent process ID spoofing tools like Didier Stevens tool SelectMyParent",
        "tags": [
            "attack.defense-evasion",
            "attack.t1134.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SelectMyParent.exe', case=False) | CommandLine.str.contains(r'PPID-spoof', case=False) | CommandLine.str.contains(r'ppid_spoof', case=False) | CommandLine.str.contains(r'spoof-ppid', case=False) | CommandLine.str.contains(r'spoof_ppid', case=False) | CommandLine.str.contains(r'ppidspoof', case=False) | CommandLine.str.contains(r'spoofppid', case=False) | CommandLine.str.contains(r'spoofedppid', case=False) | CommandLine.str.contains(r' -spawnto ', case=False) | OriginalFileName.str.contains(r'PPID-spoof', case=False) | OriginalFileName.str.contains(r'ppid_spoof', case=False) | OriginalFileName.str.contains(r'spoof-ppid', case=False) | OriginalFileName.str.contains(r'spoof_ppid', case=False) | OriginalFileName.str.contains(r'ppidspoof', case=False) | OriginalFileName.str.contains(r'spoofppid', case=False) | OriginalFileName.str.contains(r'spoofedppid', case=False) | Description=='SelectMyParent' | Hashes.str.contains(r'IMPHASH=04D974875BD225F00902B4CAD9AF3FBC', case=False) | Hashes.str.contains(r'IMPHASH=A782AF154C9E743DDF3F3EB2B8F3D16E', case=False) | Hashes.str.contains(r'IMPHASH=89059503D7FBF470E68F7E63313DA3AD', case=False) | Hashes.str.contains(r'IMPHASH=CA28337632625C8281AB8A130B3D6BAD', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SharpImpersonation Execution",
        "id": "f89b08d0-77ad-4728-817b-9b16c5a69c7a",
        "status": "test",
        "description": "Detects execution of the SharpImpersonation tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1134.001",
            "attack.t1134.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SharpImpersonation.exe', case=False) | OriginalFileName=='SharpImpersonation.exe' | CommandLine.str.contains(r' user:', case=False) & CommandLine.str.contains(r' binary:', case=False) | CommandLine.str.contains(r' user:', case=False) & CommandLine.str.contains(r' shellcode:', case=False) | CommandLine.str.contains(r' technique:CreateProcessAsUserW', case=False) | CommandLine.str.contains(r' technique:ImpersonateLoggedOnuser', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Data Export From MSSQL Table Via BCP.EXE",
        "id": "c615d676-f655-46b9-b913-78729021e5d7",
        "status": "experimental",
        "description": "Detects the execution of the BCP utility in order to export data from the database.\nAttackers were seen saving their malware to a database column or table and then later extracting it via \"bcp.exe\" into a file.\n",
        "tags": [
            "attack.execution",
            "attack.t1048"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\bcp.exe', case=False) | OriginalFileName=='BCP.exe') & (CommandLine.str.contains(r' out ', case=False) | CommandLine.str.contains(r' queryout ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Esentutl Steals Browser Information",
        "id": "6a69f62d-ce75-4b57-8dce-6351eb55b362",
        "status": "test",
        "description": "One way Qbot steals sensitive information is by extracting browser data from Internet Explorer and Microsoft Edge by using the built-in utility esentutl.exe",
        "tags": [
            "attack.collection",
            "attack.t1005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\esentutl.exe', case=False) | OriginalFileName=='esentutl.exe') & (CommandLine.str.contains(r'-r', case=False) | CommandLine.str.contains(r'/r', case=False) | CommandLine.str.contains(r'\u2013r', case=False) | CommandLine.str.contains(r'\u2014r', case=False) | CommandLine.str.contains(r'\u2015r', case=False)) & CommandLine.str.contains(r'\\\\Windows\\\\WebCache', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Fast Reverse Proxy (FRP) Execution",
        "id": "32410e29-5f94-4568-b6a3-d91a8adad863",
        "status": "test",
        "description": "Detects the use of Fast Reverse Proxy. frp is a fast reverse proxy to help you expose a local server behind a NAT or firewall to the Internet.",
        "tags": [
            "attack.command-and-control",
            "attack.t1090"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\frpc.exe', case=False) | Image.str.contains(r'\\\\frps.exe', case=False) | CommandLine.str.contains(r'\\\\frpc.ini', case=False) | Hashes.str.contains(r'MD5=7D9C233B8C9E3F0EA290D2B84593C842', case=False) | Hashes.str.contains(r'SHA1=06DDC9280E1F1810677935A2477012960905942F', case=False) | Hashes.str.contains(r'SHA256=57B0936B8D336D8E981C169466A15A5FD21A7D5A2C7DAF62D5E142EE860E387C', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "AgentExecutor PowerShell Execution",
        "id": "7efd2c8d-8b18-45b7-947d-adfe9ed04f61",
        "status": "test",
        "description": "Detects execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image=='\\\\AgentExecutor.exe' | OriginalFileName=='AgentExecutor.exe') & (CommandLine.str.contains(r' -powershell', case=False) | CommandLine.str.contains(r' -remediationScript', case=False)) & ~ ParentImage.str.contains(r'\\\\Microsoft.Management.Services.IntuneWindowsAgent.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Deny Service Access Using Security Descriptor Tampering Via Sc.EXE",
        "id": "99cf1e02-00fb-4c0d-8375-563f978dfd37",
        "status": "test",
        "description": "Detects suspicious DACL modifications to deny access to a service that affects critical trustees. This can be used to hide services or make them unstoppable.",
        "tags": [
            "attack.persistence",
            "attack.t1543.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\sc.exe', case=False) | OriginalFileName=='sc.exe') & CommandLine.str.contains(r'sdset', case=False) & CommandLine.str.contains(r'D;', case=False) & (CommandLine.str.contains(r';IU', case=False) | CommandLine.str.contains(r';SU', case=False) | CommandLine.str.contains(r';BA', case=False) | CommandLine.str.contains(r';SY', case=False) | CommandLine.str.contains(r';WD', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious HH.EXE Execution",
        "id": "e8a95b5e-c891-46e2-b33a-93937d3abc31",
        "status": "test",
        "description": "Detects a suspicious execution of a Microsoft HTML Help (HH.exe)",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.initial-access",
            "attack.t1047",
            "attack.t1059.001",
            "attack.t1059.003",
            "attack.t1059.005",
            "attack.t1059.007",
            "attack.t1218",
            "attack.t1218.001",
            "attack.t1218.010",
            "attack.t1218.011",
            "attack.t1566",
            "attack.t1566.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='HH.exe' | Image.str.contains(r'\\\\hh.exe', case=False)) & (CommandLine.str.contains(r'.application', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Content.Outlook\\\\', case=False) | CommandLine.str.contains(r'\\\\Downloads\\\\', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "RDP Port Forwarding Rule Added Via Netsh.EXE",
        "id": "782d6f3e-4c5d-4b8c-92a3-1d05fed72e63",
        "status": "test",
        "description": "Detects the execution of netsh to configure a port forwarding of port 3389 (RDP) rule",
        "tags": [
            "attack.lateral-movement",
            "attack.defense-evasion",
            "attack.command-and-control",
            "attack.t1090"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\netsh.exe', case=False) | OriginalFileName=='netsh.exe') & CommandLine.str.contains(r' i', case=False) & CommandLine.str.contains(r' p', case=False) & CommandLine.str.contains(r'=3389', case=False) & CommandLine.str.contains(r' c', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "MpiExec Lolbin",
        "id": "729ce0ea-5d8f-4769-9762-e35de441586d",
        "status": "test",
        "description": "Detects a certain command line flag combination used by mpiexec.exe LOLBIN from HPC pack that can be used to execute any other binary",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\mpiexec.exe', case=False) | Hashes.str.contains(r'IMPHASH=d8b52ef6aaa3a81501bdfff9dbb96217', case=False)) & (CommandLine.str.contains(r' /n 1 ', case=False) | CommandLine.str.contains(r' -n 1 ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Usage Of Active Directory Diagnostic Tool (ntdsutil.exe)",
        "id": "a58353df-af43-4753-bad0-cd83ef35eef5",
        "status": "test",
        "description": "Detects execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ntdsutil.exe', case=False) | OriginalFileName=='ntdsutil.exe') & (CommandLine.str.contains(r'snapshot', case=False) & CommandLine.str.contains(r'mount ', case=False) | CommandLine.str.contains(r'ac', case=False) & CommandLine.str.contains(r' i', case=False) & CommandLine.str.contains(r' ntds', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SOAPHound Execution",
        "id": "e92a4287-e072-4a40-9739-370c106bb750",
        "status": "test",
        "description": "Detects the execution of SOAPHound, a .NET tool for collecting Active Directory data, using specific command-line arguments that may indicate an attempt to extract sensitive AD information.\n",
        "tags": [
            "attack.discovery",
            "attack.t1087"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' --buildcache ', case=False) | CommandLine.str.contains(r' --bhdump ', case=False) | CommandLine.str.contains(r' --certdump ', case=False) | CommandLine.str.contains(r' --dnsdump ', case=False)) & (CommandLine.str.contains(r' -c ', case=False) | CommandLine.str.contains(r' --cachefilename ', case=False) | CommandLine.str.contains(r' -o ', case=False) | CommandLine.str.contains(r' --outputdirectory', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Findstr GPP Passwords",
        "id": "91a2c315-9ee6-4052-a853-6f6a8238f90d",
        "status": "test",
        "description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller. This value can be decrypted with gpp-decrypt.",
        "tags": [
            "attack.credential-access",
            "attack.t1552.006"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\find.exe', case=False) | Image.str.contains(r'\\\\findstr.exe', case=False) | OriginalFileName==['FIND.EXE', 'FINDSTR.EXE']) & CommandLine.str.contains(r'cpassword', case=False) & CommandLine.str.contains(r'\\\\sysvol\\\\', case=False) & CommandLine.str.contains(r'.xml', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Execution of Sysinternals Tools",
        "id": "7cccd811-7ae9-4ebe-9afd-cb5c406b824b",
        "status": "test",
        "description": "Detects command lines that contain the 'accepteula' flag which could be a sign of execution of one of the Sysinternals tools",
        "tags": [
            "attack.resource-development",
            "attack.t1588.002"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' -accepteula', case=False) | CommandLine.str.contains(r' /accepteula', case=False) | CommandLine.str.contains(r' \u2013accepteula', case=False) | CommandLine.str.contains(r' \u2014accepteula', case=False) | CommandLine.str.contains(r' \u2015accepteula', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Process Start Locations",
        "id": "15b75071-74cc-47e0-b4c6-b43744a62a2b",
        "status": "test",
        "description": "Detects suspicious process run from unusual locations",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "car.2013-05-002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r':\\\\RECYCLER\\\\', case=False) | Image.str.contains(r':\\\\SystemVolumeInformation\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\Tasks\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\debug\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\fonts\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\help\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\drivers\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\addins\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\cursors\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\system32\\\\tasks\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Obfuscated PowerShell Code",
        "id": "8d01b53f-456f-48ee-90f6-bc28e67d4e35",
        "status": "test",
        "description": "Detects suspicious UTF16 and base64 encoded and often obfuscated PowerShell code often used in command lines",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'IAAtAGIAeABvAHIAIAAwAHgA', case=False) | CommandLine.str.contains(r'AALQBiAHgAbwByACAAMAB4A', case=False) | CommandLine.str.contains(r'gAC0AYgB4AG8AcgAgADAAeA', case=False) | CommandLine.str.contains(r'AC4ASQBuAHYAbwBrAGUAKAApACAAfAAg', case=False) | CommandLine.str.contains(r'AuAEkAbgB2AG8AawBlACgAKQAgAHwAI', case=False) | CommandLine.str.contains(r'ALgBJAG4AdgBvAGsAZQAoACkAIAB8AC', case=False) | CommandLine.str.contains(r'AHsAMQB9AHsAMAB9ACIAIAAtAGYAI', case=False) | CommandLine.str.contains(r'B7ADEAfQB7ADAAfQAiACAALQBmAC', case=False) | CommandLine.str.contains(r'AewAxAH0AewAwAH0AIgAgAC0AZgAg', case=False) | CommandLine.str.contains(r'AHsAMAB9AHsAMwB9ACIAIAAtAGYAI', case=False) | CommandLine.str.contains(r'B7ADAAfQB7ADMAfQAiACAALQBmAC', case=False) | CommandLine.str.contains(r'AewAwAH0AewAzAH0AIgAgAC0AZgAg', case=False) | CommandLine.str.contains(r'AHsAMgB9AHsAMAB9ACIAIAAtAGYAI', case=False) | CommandLine.str.contains(r'B7ADIAfQB7ADAAfQAiACAALQBmAC', case=False) | CommandLine.str.contains(r'AewAyAH0AewAwAH0AIgAgAC0AZgAg', case=False) | CommandLine.str.contains(r'AHsAMQB9AHsAMAB9ACcAIAAtAGYAI', case=False) | CommandLine.str.contains(r'B7ADEAfQB7ADAAfQAnACAALQBmAC', case=False) | CommandLine.str.contains(r'AewAxAH0AewAwAH0AJwAgAC0AZgAg', case=False) | CommandLine.str.contains(r'AHsAMAB9AHsAMwB9ACcAIAAtAGYAI', case=False) | CommandLine.str.contains(r'B7ADAAfQB7ADMAfQAnACAALQBmAC', case=False) | CommandLine.str.contains(r'AewAwAH0AewAzAH0AJwAgAC0AZgAg', case=False) | CommandLine.str.contains(r'AHsAMgB9AHsAMAB9ACcAIAAtAGYAI', case=False) | CommandLine.str.contains(r'B7ADIAfQB7ADAAfQAnACAALQBmAC', case=False) | CommandLine.str.contains(r'AewAyAH0AewAwAH0AJwAgAC0AZgAg', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Data Copied To Clipboard Via Clip.EXE",
        "id": "ddeff553-5233-4ae9-bbab-d64d2bd634be",
        "status": "test",
        "description": "Detects the execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications.",
        "tags": [
            "attack.collection",
            "attack.t1115"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\clip.exe', case=False) | OriginalFileName=='clip.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious IIS URL GlobalRules Rewrite Via AppCmd",
        "id": "7c8af9b2-dcae-41a2-a9db-b28c288b5f08",
        "status": "test",
        "description": "Detects usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\appcmd.exe', case=False) | OriginalFileName=='appcmd.exe') & CommandLine.str.contains(r'set', case=False) & CommandLine.str.contains(r'config', case=False) & CommandLine.str.contains(r'section:system.webServer/rewrite/globalRules', case=False) & CommandLine.str.contains(r'commit:', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "MMC Spawning Windows Shell",
        "id": "05a2ab7e-ce11-4b63-86db-ab32e763e11d",
        "status": "test",
        "description": "Detects a Windows command line executable started from MMC",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\mmc.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\sh.exe', case=False) | Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\reg.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\BITSADMIN', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Arbitrary File Download Via MSOHTMED.EXE",
        "id": "459f2f98-397b-4a4a-9f47-6a5ec2f1c69d",
        "status": "test",
        "description": "Detects usage of \"MSOHTMED\" to download arbitrary files",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\MSOHTMED.exe', case=False) | OriginalFileName=='MsoHtmEd.exe') & (CommandLine.str.contains(r'ftp://', case=False) | CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Compressed File Creation Via Tar.EXE",
        "id": "418a3163-3247-4b7b-9933-dcfcb7c52ea9",
        "status": "test",
        "description": "Detects execution of \"tar.exe\" in order to create a compressed file.\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration.\n",
        "tags": [
            "attack.collection",
            "attack.exfiltration",
            "attack.t1560",
            "attack.t1560.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\tar.exe', case=False) | OriginalFileName=='bsdtar') & (CommandLine.str.contains(r'-c', case=False) | CommandLine.str.contains(r'-r', case=False) | CommandLine.str.contains(r'-u', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS Exfiltration and Tunneling Tools Execution",
        "id": "98a96a5a-64a0-4c42-92c5-489da3866cb0",
        "status": "test",
        "description": "Well-known DNS Exfiltration tools execution",
        "tags": [
            "attack.exfiltration",
            "attack.t1048.001",
            "attack.command-and-control",
            "attack.t1071.004",
            "attack.t1132.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\iodine.exe', case=False) | Image.str.contains(r'\\\\dnscat2', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Conhost.exe CommandLine Path Traversal",
        "id": "ee5e119b-1f75-4b34-add8-3be976961e39",
        "status": "test",
        "description": "detects the usage of path traversal in conhost.exe indicating possible command/argument confusion/hijacking",
        "tags": [
            "attack.execution",
            "attack.t1059.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentCommandLine.str.contains(r'conhost', case=False) & CommandLine.str.contains(r'/../../', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Ransomware or Unauthorized MBR Tampering Via Bcdedit.EXE",
        "id": "c9fbe8e9-119d-40a6-9b59-dd58a5d84429",
        "status": "test",
        "description": "Detects potential malicious and unauthorized usage of bcdedit.exe",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070",
            "attack.persistence",
            "attack.t1542.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\bcdedit.exe', case=False) | OriginalFileName=='bcdedit.exe') & (CommandLine.str.contains(r'delete', case=False) | CommandLine.str.contains(r'deletevalue', case=False) | CommandLine.str.contains(r'import', case=False) | CommandLine.str.contains(r'safeboot', case=False) | CommandLine.str.contains(r'network', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Mimikatz Execution",
        "id": "a642964e-bead-4bed-8910-1bb4d63e3b4d",
        "status": "test",
        "description": "Detection well-known mimikatz command line arguments",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001",
            "attack.t1003.002",
            "attack.t1003.004",
            "attack.t1003.005",
            "attack.t1003.006"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'DumpCreds', case=False) | CommandLine.str.contains(r'mimikatz', case=False) | CommandLine.str.contains(r'::aadcookie', case=False) | CommandLine.str.contains(r'::detours', case=False) | CommandLine.str.contains(r'::memssp', case=False) | CommandLine.str.contains(r'::mflt', case=False) | CommandLine.str.contains(r'::ncroutemon', case=False) | CommandLine.str.contains(r'::ngcsign', case=False) | CommandLine.str.contains(r'::printnightmare', case=False) | CommandLine.str.contains(r'::skeleton', case=False) | CommandLine.str.contains(r'::preshutdown', case=False) | CommandLine.str.contains(r'::mstsc', case=False) | CommandLine.str.contains(r'::multirdp', case=False) | CommandLine.str.contains(r'rpc::', case=False) | CommandLine.str.contains(r'token::', case=False) | CommandLine.str.contains(r'crypto::', case=False) | CommandLine.str.contains(r'dpapi::', case=False) | CommandLine.str.contains(r'sekurlsa::', case=False) | CommandLine.str.contains(r'kerberos::', case=False) | CommandLine.str.contains(r'lsadump::', case=False) | CommandLine.str.contains(r'privilege::', case=False) | CommandLine.str.contains(r'process::', case=False) | CommandLine.str.contains(r'vault::', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Launch-VsDevShell.PS1 Proxy Execution",
        "id": "45d3a03d-f441-458c-8883-df101a3bb146",
        "status": "test",
        "description": "Detects the use of the 'Launch-VsDevShell.ps1' Microsoft signed script to execute commands.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1216.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'Launch-VsDevShell.ps1', case=False) & (CommandLine.str.contains(r'VsWherePath ', case=False) | CommandLine.str.contains(r'VsInstallationPath ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Remote Desktop Tunneling",
        "id": "8a3038e8-9c9d-46f8-b184-66234a160f6f",
        "status": "test",
        "description": "Detects potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination.",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r':3389', case=False) & (CommandLine.str.contains(r' -L ', case=False) | CommandLine.str.contains(r' -P ', case=False) | CommandLine.str.contains(r' -R ', case=False) | CommandLine.str.contains(r' -pw ', case=False) | CommandLine.str.contains(r' -ssh ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon One Time Only Scheduled Task At 00:00",
        "id": "970823b7-273b-460a-8afc-3a6811998529",
        "status": "test",
        "description": "Detects scheduled task creation events that include suspicious actions, and is run once at 00:00",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1053.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\schtasks.exe', case=False) | OriginalFileName=='schtasks.exe') & (CommandLine.str.contains(r'wscript', case=False) | CommandLine.str.contains(r'vbscript', case=False) | CommandLine.str.contains(r'cscript', case=False) | CommandLine.str.contains(r'wmic ', case=False) | CommandLine.str.contains(r'wmic.exe', case=False) | CommandLine.str.contains(r'regsvr32.exe', case=False) | CommandLine.str.contains(r'powershell', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\', case=False)) & CommandLine.str.contains(r'once', case=False) & CommandLine.str.contains(r'00:00', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Schtasks Creation Or Modification With SYSTEM Privileges",
        "id": "89ca78fd-b37c-4310-b3d3-81a023f83936",
        "status": "test",
        "description": "Detects the creation or update of a scheduled task to run with \"NT AUTHORITY\\SYSTEM\" privileges",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.t1053.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\schtasks.exe', case=False) & (CommandLine.str.contains(r' /change ', case=False) | CommandLine.str.contains(r' /create ', case=False)) & CommandLine.str.contains(r'/ru ', case=False) & (CommandLine.str.contains(r'NT AUT', case=False) | CommandLine.str.contains(r' SYSTEM ', case=False)) & ~ (Image.str.contains(r'\\\\schtasks.exe', case=False) & CommandLine.str.contains(r'/TN TVInstallRestore', case=False) & CommandLine.str.contains(r'\\\\TeamViewer_.exe', case=False) | CommandLine.str.contains(r'Subscription Heartbeat', case=False) & CommandLine.str.contains(r'\\\\HeartbeatConfig.xml', case=False) & CommandLine.str.contains(r'\\\\Microsoft Shared\\\\OFFICE', case=False) | CommandLine.str.contains(r'/Create /F /RU System /SC WEEKLY /TN AviraSystemSpeedupVerify /TR ', case=False) | CommandLine.str.contains(r':\\\\Program Files (x86)\\\\Avira\\\\System Speedup\\\\setup\\\\avira_speedup_setup.exe', case=False) | CommandLine.str.contains(r'/VERIFY /VERYSILENT /NOSTART /NODOTNET /NORESTART\" /RL HIGHEST', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Driver Install by pnputil.exe",
        "id": "a2ea3ae7-d3d0-40a0-a55c-25a45c87cac1",
        "status": "test",
        "description": "Detects when a possible suspicious driver is being installed via pnputil.exe lolbin",
        "tags": [
            "attack.persistence",
            "attack.t1547"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'-i', case=False) | CommandLine.str.contains(r'/install', case=False) | CommandLine.str.contains(r'-a', case=False) | CommandLine.str.contains(r'/add-driver', case=False) | CommandLine.str.contains(r'.inf', case=False)) & Image.str.contains(r'\\\\pnputil.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "REGISTER_APP.VBS Proxy Execution",
        "id": "1c8774a0-44d4-4db0-91f8-e792359c70bd",
        "status": "test",
        "description": "Detects the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\register_app.vbs', case=False) & CommandLine.str.contains(r'-register', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Ie4uinit Lolbin Use From Invalid Path",
        "id": "d3bf399f-b0cf-4250-8bb4-dfc192ab81dc",
        "status": "test",
        "description": "Detect use of ie4uinit.exe to execute commands from a specially prepared ie4uinit.inf file from a directory other than the usual directories",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ie4uinit.exe', case=False) | OriginalFileName=='IE4UINIT.EXE') & ~ (CurrentDirectory==['c:\\\\windows\\\\system32\\\\', 'c:\\\\windows\\\\sysWOW64\\\\'] | CurrentDirectory is null)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "AddinUtil.EXE Execution From Uncommon Directory",
        "id": "6120ac2a-a34b-42c0-a9bd-1fb9f459f348",
        "status": "test",
        "description": "Detects execution of the Add-In deployment cache updating utility (AddInutil.exe) from a non-standard directory.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\addinutil.exe', case=False) | OriginalFileName=='AddInUtil.exe') & ~ (Image.str.contains(r':\\\\Windows\\\\Microsoft.NET\\\\Framework\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\WinSxS\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE",
        "id": "07f8bdc2-c9b3-472a-9817-5a670b872f53",
        "status": "test",
        "description": "Detects usage of cmdkey to look for cached credentials on the system",
        "tags": [
            "attack.credential-access",
            "attack.t1003.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmdkey.exe', case=False) | OriginalFileName=='cmdkey.exe') & (CommandLine.str.contains(r' -l', case=False) | CommandLine.str.contains(r' /l', case=False) | CommandLine.str.contains(r' \u2013l', case=False) | CommandLine.str.contains(r' \u2014l', case=False) | CommandLine.str.contains(r' \u2015l', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Dumpert Process Dumper Execution",
        "id": "2704ab9e-afe2-4854-a3b1-0c0706d03578",
        "status": "test",
        "description": "Detects the use of Dumpert process dumper, which dumps the lsass.exe process memory",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Hashes.str.contains(r'MD5=09D278F9DE118EF09163C6140255C690', case=False) | CommandLine.str.contains(r'Dumpert.dll', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using IDiagnostic Profile",
        "id": "4cbef972-f347-4170-b62a-8253f6168e6d",
        "status": "test",
        "description": "Detects the \"IDiagnosticProfileUAC\" UAC bypass technique",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\DllHost.exe', case=False) & ParentCommandLine.str.contains(r' /Processid:{12C21EA7-2EB8-4B55-9249-AC243DA8C666}', case=False) & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential PowerShell Downgrade Attack",
        "id": "b3512211-c67e-4707-bedc-66efc7848863",
        "status": "test",
        "description": "Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\powershell.exe', case=False) & (CommandLine.str.contains(r' -version 2 ', case=False) | CommandLine.str.contains(r' -versio 2 ', case=False) | CommandLine.str.contains(r' -versi 2 ', case=False) | CommandLine.str.contains(r' -vers 2 ', case=False) | CommandLine.str.contains(r' -ver 2 ', case=False) | CommandLine.str.contains(r' -ve 2 ', case=False) | CommandLine.str.contains(r' -v 2 ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Download via CertOC.EXE",
        "id": "70ad0861-d1fe-491c-a45f-fa48148a300d",
        "status": "test",
        "description": "Detects when a user downloads a file by using CertOC.exe",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certoc.exe', case=False) | OriginalFileName=='CertOC.exe') & CommandLine.str.contains(r'-GetCACAPS', case=False) & CommandLine.str.contains(r'http', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Netsh Allow Group Policy on Microsoft Defender Firewall",
        "id": "347906f3-e207-4d18-ae5b-a9403d6bcdef",
        "status": "test",
        "description": "Adversaries may modify system firewalls in order to bypass controls limiting network usage",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\netsh.exe', case=False) | OriginalFileName=='netsh.exe') & CommandLine.str.contains(r'advfirewall', case=False) & CommandLine.str.contains(r'firewall', case=False) & CommandLine.str.contains(r'set', case=False) & CommandLine.str.contains(r'rule', case=False) & CommandLine.str.contains(r'group=', case=False) & CommandLine.str.contains(r'new', case=False) & CommandLine.str.contains(r'enable=Yes', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Usage Of Web Request Commands And Cmdlets",
        "id": "9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d",
        "status": "test",
        "description": "Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'[System.Net.WebRequest]::create', case=False) | CommandLine.str.contains(r'curl ', case=False) | CommandLine.str.contains(r'Invoke-RestMethod', case=False) | CommandLine.str.contains(r'Invoke-WebRequest', case=False) | CommandLine.str.contains(r'iwr ', case=False) | CommandLine.str.contains(r'Net.WebClient', case=False) | CommandLine.str.contains(r'Resume-BitsTransfer', case=False) | CommandLine.str.contains(r'Start-BitsTransfer', case=False) | CommandLine.str.contains(r'wget ', case=False) | CommandLine.str.contains(r'WinHttp.WinHttpRequest', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Defense Evasion Via Rename Of Highly Relevant Binaries",
        "id": "0ba1da6d-b6ce-4366-828c-18826c9de23e",
        "status": "test",
        "description": "Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.003",
            "car.2013-05-009"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description=='Execute processes remotely' | Product=='Sysinternals PsExec' | Description.str.contains(r'Windows PowerShell', case=False) | Description.str.contains(r'pwsh', case=False) | OriginalFileName==['certutil.exe', 'cmstp.exe', 'cscript.exe', 'IE4UINIT.EXE', 'mshta.exe', 'msiexec.exe', 'msxsl.exe', 'powershell_ise.exe', 'powershell.exe', 'psexec.c', 'psexec.exe', 'psexesvc.exe', 'pwsh.dll', 'reg.exe', 'regsvr32.exe', 'rundll32.exe', 'WerMgr', 'wmic.exe', 'wscript.exe']) & ~ (Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\cmstp.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\ie4uinit.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) | Image.str.contains(r'\\\\msxsl.exe', case=False) | Image.str.contains(r'\\\\powershell_ise.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\psexec.exe', case=False) | Image.str.contains(r'\\\\psexec64.exe', case=False) | Image.str.contains(r'\\\\PSEXESVC.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\reg.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wermgr.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - Simple Help Execution",
        "id": "95e60a2b-4705-444b-b7da-ba0ea81a3ee2",
        "status": "test",
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\JWrapper-Remote Access\\\\', case=False) | Image.str.contains(r'\\\\JWrapper-Remote Support\\\\', case=False)) & Image.str.contains(r'\\\\SimpleService.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Tampering With RDP Related Registry Keys Via Reg.EXE",
        "id": "0d5675be-bc88-4172-86d3-1e96a4476536",
        "status": "test",
        "description": "Detects the execution of \"reg.exe\" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\\Control\\Terminal Server' values",
        "tags": [
            "attack.defense-evasion",
            "attack.lateral-movement",
            "attack.t1021.001",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\reg.exe', case=False) | OriginalFileName=='reg.exe') & CommandLine.str.contains(r' add ', case=False) & CommandLine.str.contains(r'\\\\CurrentControlSet\\\\Control\\\\Terminal Server', case=False) & CommandLine.str.contains(r'REG_DWORD', case=False) & CommandLine.str.contains(r' /f', case=False) & (CommandLine.str.contains(r'Licensing Core', case=False) & CommandLine.str.contains(r'EnableConcurrentSessions', case=False) | CommandLine.str.contains(r'WinStations\\\\RDP-Tcp', case=False) | CommandLine.str.contains(r'MaxInstanceCount', case=False) | CommandLine.str.contains(r'fEnableWinStation', case=False) | CommandLine.str.contains(r'TSUserEnabled', case=False) | CommandLine.str.contains(r'TSEnabled', case=False) | CommandLine.str.contains(r'TSAppCompat', case=False) | CommandLine.str.contains(r'IdleWinStationPoolCount', case=False) | CommandLine.str.contains(r'TSAdvertise', case=False) | CommandLine.str.contains(r'AllowTSConnections', case=False) | CommandLine.str.contains(r'fSingleSessionPerUser', case=False) | CommandLine.str.contains(r'fDenyTSConnections', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Scheduled Task Executing Encoded Payload from Registry",
        "id": "c4eeeeae-89f4-43a7-8b48-8d1bdfa66c78",
        "status": "test",
        "description": "Detects the creation of a schtask that potentially executes a base64 encoded payload stored in the Windows Registry using PowerShell.",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.t1053.005",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\schtasks.exe', case=False) | OriginalFileName=='schtasks.exe') & CommandLine.str.contains(r'/Create', case=False) & (CommandLine.str.contains(r'FromBase64String', case=False) | CommandLine.str.contains(r'encodedcommand', case=False)) & (CommandLine.str.contains(r'Get-ItemProperty', case=False) | CommandLine.str.contains(r' gp ', case=False)) & (CommandLine.str.contains(r'HKCU:', case=False) | CommandLine.str.contains(r'HKLM:', case=False) | CommandLine.str.contains(r'registry::', case=False) | CommandLine.str.contains(r'HKEY_', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Service Security Descriptor Tampering Via Sc.EXE",
        "id": "98c5aeef-32d5-492f-b174-64a691896d25",
        "status": "test",
        "description": "Detection of sc.exe utility adding a new service with special permission which hides that service.",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\sc.exe', case=False) | OriginalFileName=='sc.exe') & CommandLine.str.contains(r'sdset', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Detect Virtualbox Driver Installation OR Starting Of VMs",
        "id": "bab049ca-7471-4828-9024-38279a4c04da",
        "status": "test",
        "description": "Adversaries can carry out malicious operations using a virtual instance to avoid detection. This rule is built to detect the registration of the Virtualbox driver or start of a Virtualbox VM.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.006",
            "attack.t1564"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'VBoxRT.dll,RTR3Init', case=False) | CommandLine.str.contains(r'VBoxC.dll', case=False) | CommandLine.str.contains(r'VBoxDrv.sys', case=False) | CommandLine.str.contains(r'startvm', case=False) | CommandLine.str.contains(r'controlvm', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Command Targeting Teams Sensitive Files",
        "id": "d2eb17db-1d39-41dc-b57f-301f6512fa75",
        "status": "test",
        "description": "Detects a commandline containing references to the Microsoft Teams database or cookies files from a process other than Teams.\nThe database might contain authentication tokens and other sensitive information about the logged in accounts.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1528"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\\\\Microsoft\\\\Teams\\\\Cookies', case=False) | CommandLine.str.contains(r'\\\\Microsoft\\\\Teams\\\\Local Storage\\\\leveldb', case=False)) & ~ Image.str.contains(r'\\\\Microsoft\\\\Teams\\\\current\\\\Teams.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Process Memory Dump Via Comsvcs.DLL",
        "id": "646ea171-dded-4578-8a4d-65e9822892e3",
        "status": "test",
        "description": "Detects a process memory dump via \"comsvcs.dll\" using rundll32, covering multiple different techniques (ordinal, minidump function, etc.)",
        "tags": [
            "attack.defense-evasion",
            "attack.credential-access",
            "attack.t1036",
            "attack.t1003.001",
            "car.2013-05-009"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE' | CommandLine.str.contains(r'rundll32', case=False)) & CommandLine.str.contains(r'comsvcs', case=False) & CommandLine.str.contains(r'full', case=False) & (CommandLine.str.contains(r'#-', case=False) | CommandLine.str.contains(r'#+', case=False) | CommandLine.str.contains(r'#24', case=False) | CommandLine.str.contains(r'24 ', case=False) | CommandLine.str.contains(r'MiniDump', case=False) | CommandLine.str.contains(r'#65560', case=False)) | CommandLine.str.contains(r'24', case=False) & CommandLine.str.contains(r'comsvcs', case=False) & CommandLine.str.contains(r'full', case=False) & (CommandLine.str.contains(r' #', case=False) | CommandLine.str.contains(r',#', case=False) | CommandLine.str.contains(r', #', case=False) | CommandLine.str.contains(r'\"#', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Htran/NATBypass Execution",
        "id": "f5e3b62f-e577-4e59-931e-0a15b2b94e1e",
        "status": "test",
        "description": "Detects executable names or flags used by Htran or Htran-like tools (e.g. NATBypass)",
        "tags": [
            "attack.command-and-control",
            "attack.t1090",
            "attack.s0040"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\htran.exe', case=False) | Image.str.contains(r'\\\\lcx.exe', case=False) | CommandLine.str.contains(r'.exe -tran ', case=False) | CommandLine.str.contains(r'.exe -slave ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - UACMe Akagi Execution",
        "id": "d38d2fa4-98e6-4a24-aff1-410b0c9ad177",
        "status": "test",
        "description": "Detects the execution of UACMe, a tool used for UAC bypasses, via default PE metadata",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Product=='UACMe' | Company==['REvol Corp', 'APT 92', 'UG North', 'Hazardous Environments', 'CD Project Rekt'] | Description==['UACMe main module', 'Pentesting utility'] | OriginalFileName==['Akagi.exe', 'Akagi64.exe'] | Image.str.contains(r'\\\\Akagi64.exe', case=False) | Image.str.contains(r'\\\\Akagi.exe', case=False) | Hashes.str.contains(r'IMPHASH=767637C23BB42CD5D7397CF58B0BE688', case=False) | Hashes.str.contains(r'IMPHASH=14C4E4C72BA075E9069EE67F39188AD8', case=False) | Hashes.str.contains(r'IMPHASH=3C782813D4AFCE07BBFC5A9772ACDBDC', case=False) | Hashes.str.contains(r'IMPHASH=7D010C6BB6A3726F327F7E239166D127', case=False) | Hashes.str.contains(r'IMPHASH=89159BA4DD04E4CE5559F132A9964EB3', case=False) | Hashes.str.contains(r'IMPHASH=6F33F4A5FC42B8CEC7314947BD13F30F', case=False) | Hashes.str.contains(r'IMPHASH=5834ED4291BDEB928270428EBBAF7604', case=False) | Hashes.str.contains(r'IMPHASH=5A8A8A43F25485E7EE1B201EDCBC7A38', case=False) | Hashes.str.contains(r'IMPHASH=DC7D30B90B2D8ABF664FBED2B1B59894', case=False) | Hashes.str.contains(r'IMPHASH=41923EA1F824FE63EA5BEB84DB7A3E74', case=False) | Hashes.str.contains(r'IMPHASH=3DE09703C8E79ED2CA3F01074719906B', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Firewall Rule Deleted Via Netsh.EXE",
        "id": "1a5fefe6-734f-452e-a07d-fc1c35bce4b2",
        "status": "test",
        "description": "Detects the removal of a port or application rule in the Windows Firewall configuration using netsh",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\netsh.exe', case=False) | OriginalFileName=='netsh.exe') & CommandLine.str.contains(r'firewall', case=False) & CommandLine.str.contains(r'delete ', case=False) & ~ (ParentImage.str.contains(r'\\\\Dropbox.exe', case=False) & CommandLine.str.contains(r'name=Dropbox', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell SAM Copy",
        "id": "1af57a4b-460a-4738-9034-db68b880c665",
        "status": "test",
        "description": "Detects suspicious PowerShell scripts accessing SAM hives",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\HarddiskVolumeShadowCopy', case=False) & CommandLine.str.contains(r'System32\\\\config\\\\sam', case=False) & (CommandLine.str.contains(r'Copy-Item', case=False) | CommandLine.str.contains(r'cp $_.', case=False) | CommandLine.str.contains(r'cpi $_.', case=False) | CommandLine.str.contains(r'copy $_.', case=False) | CommandLine.str.contains(r'.File]::Copy(', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Bad Opsec Defaults Sacrificial Processes With Improper Arguments",
        "id": "a7c3d773-caef-227e-a7e7-c2f13c622329",
        "status": "experimental",
        "description": "Detects attackers using tooling with bad opsec defaults.\nE.g. spawning a sacrificial process to inject a capability into the process without taking into account how the process is normally run.\nOne trivial example of this is using rundll32.exe without arguments as a sacrificial process (default in CS, now highlighted by c2lint), running WerFault without arguments (Kraken - credit am0nsec), and other examples.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\WerFault.exe', case=False) & CommandLine.str.contains(r'WerFault.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) & CommandLine.str.contains(r'rundll32.exe', case=False) | Image.str.contains(r'\\\\regsvcs.exe', case=False) & CommandLine.str.contains(r'regsvcs.exe', case=False) | Image.str.contains(r'\\\\regasm.exe', case=False) & CommandLine.str.contains(r'regasm.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) & CommandLine.str.contains(r'regsvr32.exe', case=False)) & ~ (ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\EdgeUpdate\\\\Install\\\\{', case=False) & Image.str.contains(r'\\\\rundll32.exe', case=False) & CommandLine.str.contains(r'rundll32.exe', case=False) | (ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\BraveSoftware\\\\Brave-Browser\\\\Application\\\\', case=False) | ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\Application\\\\', case=False)) & ParentImage.str.contains(r'\\\\Installer\\\\setup.exe', case=False) & ParentCommandLine.str.contains(r'--uninstall ', case=False) & Image.str.contains(r'\\\\rundll32.exe', case=False) & CommandLine.str.contains(r'rundll32.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious NTLM Authentication on the Printer Spooler Service",
        "id": "bb76d96b-821c-47cf-944b-7ce377864492",
        "status": "test",
        "description": "Detects a privilege elevation attempt by coercing NTLM authentication on the Printer Spooler service",
        "tags": [
            "attack.privilege-escalation",
            "attack.credential-access",
            "attack.t1212"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & CommandLine.str.contains(r'C:\\\\windows\\\\system32\\\\davclnt.dll,DavSetCookie', case=False) & CommandLine.str.contains(r'http', case=False) & (CommandLine.str.contains(r'spoolss', case=False) | CommandLine.str.contains(r'srvsvc', case=False) | CommandLine.str.contains(r'/print/pipe/', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious RunAs-Like Flag Combination",
        "id": "50d66fb0-03f8-4da0-8add-84e77d12a020",
        "status": "test",
        "description": "Detects suspicious command line flags that let the user set a target user and command as e.g. seen in PsExec-like tools",
        "tags": [
            "attack.privilege-escalation"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' -u system ', case=False) | CommandLine.str.contains(r' --user system ', case=False) | CommandLine.str.contains(r' -u NT', case=False) | CommandLine.str.contains(r' -u \"NT', case=False) | CommandLine.str.contains(r' -u \\'NT', case=False) | CommandLine.str.contains(r' --system ', case=False) | CommandLine.str.contains(r' -u administrator ', case=False)) & (CommandLine.str.contains(r' -c cmd', case=False) | CommandLine.str.contains(r' -c \"cmd', case=False) | CommandLine.str.contains(r' -c powershell', case=False) | CommandLine.str.contains(r' -c \"powershell', case=False) | CommandLine.str.contains(r' --command cmd', case=False) | CommandLine.str.contains(r' --command powershell', case=False) | CommandLine.str.contains(r' -c whoami', case=False) | CommandLine.str.contains(r' -c wscript', case=False) | CommandLine.str.contains(r' -c cscript', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Microsoft Compatibility Appraiser",
        "id": "f548a603-c9f2-4c89-b511-b089f7e94549",
        "status": "test",
        "description": "Detects manual execution of the \"Microsoft Compatibility Appraiser\" task via schtasks.\nIn order to trigger persistence stored in the \"\\AppCompatFlags\\TelemetryController\" registry key.\n",
        "tags": [
            "attack.persistence",
            "attack.t1053.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\schtasks.exe', case=False) | OriginalFileName=='schtasks.exe') & CommandLine.str.contains(r'run ', case=False) & CommandLine.str.contains(r'\\\\Application Experience\\\\Microsoft Compatibility Appraiser', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Windows Defender Registry Key Tampering Via Reg.EXE",
        "id": "452bce90-6fb0-43cc-97a5-affc283139b3",
        "status": "test",
        "description": "Detects the usage of \"reg.exe\" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\reg.exe', case=False) | OriginalFileName=='reg.exe') & (CommandLine.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows Defender\\\\', case=False) | CommandLine.str.contains(r'SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender Security Center', case=False) | CommandLine.str.contains(r'SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender\\\\', case=False)) & (CommandLine.str.contains(r' add ', case=False) & CommandLine.str.contains(r'd 0', case=False) & (CommandLine.str.contains(r'DisallowExploitProtectionOverride', case=False) | CommandLine.str.contains(r'EnableControlledFolderAccess', case=False) | CommandLine.str.contains(r'MpEnablePus', case=False) | CommandLine.str.contains(r'PUAProtection', case=False) | CommandLine.str.contains(r'SpynetReporting', case=False) | CommandLine.str.contains(r'SubmitSamplesConsent', case=False) | CommandLine.str.contains(r'TamperProtection', case=False)) | CommandLine.str.contains(r' add ', case=False) & CommandLine.str.contains(r'd 1', case=False) & (CommandLine.str.contains(r'DisableAntiSpyware', case=False) | CommandLine.str.contains(r'DisableAntiSpywareRealtimeProtection', case=False) | CommandLine.str.contains(r'DisableAntiVirus', case=False) | CommandLine.str.contains(r'DisableArchiveScanning', case=False) | CommandLine.str.contains(r'DisableBehaviorMonitoring', case=False) | CommandLine.str.contains(r'DisableBlockAtFirstSeen', case=False) | CommandLine.str.contains(r'DisableConfig', case=False) | CommandLine.str.contains(r'DisableEnhancedNotifications', case=False) | CommandLine.str.contains(r'DisableIntrusionPreventionSystem', case=False) | CommandLine.str.contains(r'DisableIOAVProtection', case=False) | CommandLine.str.contains(r'DisableOnAccessProtection', case=False) | CommandLine.str.contains(r'DisablePrivacyMode', case=False) | CommandLine.str.contains(r'DisableRealtimeMonitoring', case=False) | CommandLine.str.contains(r'DisableRoutinelyTakingAction', case=False) | CommandLine.str.contains(r'DisableScanOnRealtimeEnable', case=False) | CommandLine.str.contains(r'DisableScriptScanning', case=False) | CommandLine.str.contains(r'Notification_Suppress', case=False) | CommandLine.str.contains(r'SignatureDisableUpdateOnStartupWithoutEngine', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Always Install Elevated MSI Spawned Cmd And Powershell",
        "id": "1e53dd56-8d83-4eb4-a43e-b790a05510aa",
        "status": "test",
        "description": "Detects Windows Installer service (msiexec.exe) spawning \"cmd\" or \"powershell\"",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['Cmd.Exe', 'PowerShell.EXE', 'pwsh.dll']) & ParentImage.str.contains(r'\\\\Windows\\\\Installer\\\\', case=False) & ParentImage.str.contains(r'msi', case=False) & ParentImage.str.contains(r'tmp', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Explorer Folder Opened Using Explorer Folder Shortcut Via Shell",
        "id": "c3d76afc-93df-461e-8e67-9b2bad3f2ac4",
        "status": "experimental",
        "description": "Detects the initial execution of \"cmd.exe\" which spawns \"explorer.exe\" with the appropriate command line arguments for opening the \"My Computer\" folder.\n",
        "tags": [
            "attack.discovery",
            "attack.t1135"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\cmd.exe', case=False) | ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False)) & Image.str.contains(r'\\\\explorer.exe', case=False) & CommandLine.str.contains(r'shell:mycomputerfolder', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Process Execution From Fake Recycle.Bin Folder",
        "id": "5ce0f04e-3efc-42af-839d-5b3a543b76c0",
        "status": "test",
        "description": "Detects process execution from a fake recycle bin folder, often used to avoid security solution.",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'RECYCLERS.BIN\\\\', case=False) | Image.str.contains(r'RECYCLER.BIN\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "RunDLL32 Spawning Explorer",
        "id": "caa06de8-fdef-4c91-826a-7f9e163eef4b",
        "status": "test",
        "description": "Detects RunDLL32.exe spawning explorer.exe as child, which is very uncommon, often observes Gamarue spawning the explorer.exe process in an unusual way",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\rundll32.exe', case=False) & Image.str.contains(r'\\\\explorer.exe', case=False) & ~ ParentCommandLine.str.contains(r'\\\\shell32.dll,Control_RunDLL', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Writing Of Malicious Files To The Fonts Folder",
        "id": "ae9b0bd7-8888-4606-b444-0ed7410cb728",
        "status": "test",
        "description": "Monitors for the hiding possible malicious files in the C:\\Windows\\Fonts\\ location. This folder doesn't require admin privillege to be written and executed from.",
        "tags": [
            "attack.t1211",
            "attack.t1059",
            "attack.defense-evasion",
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'echo', case=False) | CommandLine.str.contains(r'copy', case=False) | CommandLine.str.contains(r'type', case=False) | CommandLine.str.contains(r'file createnew', case=False) | CommandLine.str.contains(r'cacls', case=False)) & CommandLine.str.contains(r'C:\\\\Windows\\\\Fonts\\\\', case=False) & (CommandLine.str.contains(r'.sh', case=False) | CommandLine.str.contains(r'.exe', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.bin', case=False) | CommandLine.str.contains(r'.bat', case=False) | CommandLine.str.contains(r'.cmd', case=False) | CommandLine.str.contains(r'.js', case=False) | CommandLine.str.contains(r'.msh', case=False) | CommandLine.str.contains(r'.reg', case=False) | CommandLine.str.contains(r'.scr', case=False) | CommandLine.str.contains(r'.ps', case=False) | CommandLine.str.contains(r'.vb', case=False) | CommandLine.str.contains(r'.jar', case=False) | CommandLine.str.contains(r'.pl', case=False) | CommandLine.str.contains(r'.inf', case=False) | CommandLine.str.contains(r'.cpl', case=False) | CommandLine.str.contains(r'.hta', case=False) | CommandLine.str.contains(r'.msi', case=False) | CommandLine.str.contains(r'.vbs', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Process Access via TrolleyExpress Exclusion",
        "id": "4c0aaedc-154c-4427-ada0-d80ef9c9deb6",
        "status": "test",
        "description": "Detects a possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011",
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'\\\\TrolleyExpress 7', case=False) | CommandLine.str.contains(r'\\\\TrolleyExpress 8', case=False) | CommandLine.str.contains(r'\\\\TrolleyExpress 9', case=False) | CommandLine.str.contains(r'\\\\TrolleyExpress.exe 7', case=False) | CommandLine.str.contains(r'\\\\TrolleyExpress.exe 8', case=False) | CommandLine.str.contains(r'\\\\TrolleyExpress.exe 9', case=False) | CommandLine.str.contains(r'\\\\TrolleyExpress.exe -ma ', case=False) | Image.str.contains(r'\\\\TrolleyExpress.exe', case=False) & ~ (OriginalFileName.str.contains(r'CtxInstall', case=False) | OriginalFileName is null))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Mstsc.EXE Execution With Local RDP File",
        "id": "6e22722b-dfb1-4508-a911-49ac840b40f8",
        "status": "test",
        "description": "Detects potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\mstsc.exe', case=False) | OriginalFileName=='mstsc.exe') & (CommandLine.str.contains(r'.rdp', case=False) | CommandLine.str.contains(r'.rdp\"', case=False)) & (CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\System32\\\\Tasks_Migrated ', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Tracing\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Downloads\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use of Remote.exe",
        "id": "4eddc365-79b4-43ff-a9d7-99422dc34b93",
        "status": "test",
        "description": "Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\remote.exe', case=False) | OriginalFileName=='remote.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PsExec Service Execution",
        "id": "fdfcbd78-48f1-4a4b-90ac-d82241e368c5",
        "status": "test",
        "description": "Detects launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image=='C:\\\\Windows\\\\PSEXESVC.exe' | OriginalFileName=='psexesvc.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Network Trace Capture Started Via Netsh.EXE",
        "id": "d3c3861d-c504-4c77-ba55-224ba82d0118",
        "status": "test",
        "description": "Detects the execution of netsh with the \"trace\" flag in order to start a network capture",
        "tags": [
            "attack.discovery",
            "attack.credential-access",
            "attack.t1040"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\netsh.exe', case=False) | OriginalFileName=='netsh.exe') & CommandLine.str.contains(r'trace', case=False) & CommandLine.str.contains(r'start', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Reg Add Open Command",
        "id": "dd3ee8cc-f751-41c9-ba53-5a32ed47e563",
        "status": "test",
        "description": "Threat actors performed dumping of SAM, SECURITY and SYSTEM registry hives using DelegateExecute key",
        "tags": [
            "attack.credential-access",
            "attack.t1003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'reg', case=False) & CommandLine.str.contains(r'add', case=False) & CommandLine.str.contains(r'hkcu\\\\software\\\\classes\\\\ms-settings\\\\shell\\\\open\\\\command', case=False) & CommandLine.str.contains(r'/ve ', case=False) & CommandLine.str.contains(r'/d', case=False) | CommandLine.str.contains(r'reg', case=False) & CommandLine.str.contains(r'add', case=False) & CommandLine.str.contains(r'hkcu\\\\software\\\\classes\\\\ms-settings\\\\shell\\\\open\\\\command', case=False) & CommandLine.str.contains(r'/v', case=False) & CommandLine.str.contains(r'DelegateExecute', case=False) | CommandLine.str.contains(r'reg', case=False) & CommandLine.str.contains(r'delete', case=False) & CommandLine.str.contains(r'hkcu\\\\software\\\\classes\\\\ms-settings', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PsExec/PAExec Escalation to LOCAL SYSTEM",
        "id": "8834e2f7-6b4b-4f09-8906-d2276470ee23",
        "status": "test",
        "description": "Detects suspicious commandline flags used by PsExec and PAExec to escalate a command line to LOCAL_SYSTEM rights",
        "tags": [
            "attack.resource-development",
            "attack.t1587.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' -s cmd', case=False) | CommandLine.str.contains(r' /s cmd', case=False) | CommandLine.str.contains(r' \u2013s cmd', case=False) | CommandLine.str.contains(r' \u2014s cmd', case=False) | CommandLine.str.contains(r' \u2015s cmd', case=False) | CommandLine.str.contains(r' -s -i cmd', case=False) | CommandLine.str.contains(r' -s /i cmd', case=False) | CommandLine.str.contains(r' -s \u2013i cmd', case=False) | CommandLine.str.contains(r' -s \u2014i cmd', case=False) | CommandLine.str.contains(r' -s \u2015i cmd', case=False) | CommandLine.str.contains(r' /s -i cmd', case=False) | CommandLine.str.contains(r' /s /i cmd', case=False) | CommandLine.str.contains(r' /s \u2013i cmd', case=False) | CommandLine.str.contains(r' /s \u2014i cmd', case=False) | CommandLine.str.contains(r' /s \u2015i cmd', case=False) | CommandLine.str.contains(r' \u2013s -i cmd', case=False) | CommandLine.str.contains(r' \u2013s /i cmd', case=False) | CommandLine.str.contains(r' \u2013s \u2013i cmd', case=False) | CommandLine.str.contains(r' \u2013s \u2014i cmd', case=False) | CommandLine.str.contains(r' \u2013s \u2015i cmd', case=False) | CommandLine.str.contains(r' \u2014s -i cmd', case=False) | CommandLine.str.contains(r' \u2014s /i cmd', case=False) | CommandLine.str.contains(r' \u2014s \u2013i cmd', case=False) | CommandLine.str.contains(r' \u2014s \u2014i cmd', case=False) | CommandLine.str.contains(r' \u2014s \u2015i cmd', case=False) | CommandLine.str.contains(r' \u2015s -i cmd', case=False) | CommandLine.str.contains(r' \u2015s /i cmd', case=False) | CommandLine.str.contains(r' \u2015s \u2013i cmd', case=False) | CommandLine.str.contains(r' \u2015s \u2014i cmd', case=False) | CommandLine.str.contains(r' \u2015s \u2015i cmd', case=False) | CommandLine.str.contains(r' -i -s cmd', case=False) | CommandLine.str.contains(r' -i /s cmd', case=False) | CommandLine.str.contains(r' -i \u2013s cmd', case=False) | CommandLine.str.contains(r' -i \u2014s cmd', case=False) | CommandLine.str.contains(r' -i \u2015s cmd', case=False) | CommandLine.str.contains(r' /i -s cmd', case=False) | CommandLine.str.contains(r' /i /s cmd', case=False) | CommandLine.str.contains(r' /i \u2013s cmd', case=False) | CommandLine.str.contains(r' /i \u2014s cmd', case=False) | CommandLine.str.contains(r' /i \u2015s cmd', case=False) | CommandLine.str.contains(r' \u2013i -s cmd', case=False) | CommandLine.str.contains(r' \u2013i /s cmd', case=False) | CommandLine.str.contains(r' \u2013i \u2013s cmd', case=False) | CommandLine.str.contains(r' \u2013i \u2014s cmd', case=False) | CommandLine.str.contains(r' \u2013i \u2015s cmd', case=False) | CommandLine.str.contains(r' \u2014i -s cmd', case=False) | CommandLine.str.contains(r' \u2014i /s cmd', case=False) | CommandLine.str.contains(r' \u2014i \u2013s cmd', case=False) | CommandLine.str.contains(r' \u2014i \u2014s cmd', case=False) | CommandLine.str.contains(r' \u2014i \u2015s cmd', case=False) | CommandLine.str.contains(r' \u2015i -s cmd', case=False) | CommandLine.str.contains(r' \u2015i /s cmd', case=False) | CommandLine.str.contains(r' \u2015i \u2013s cmd', case=False) | CommandLine.str.contains(r' \u2015i \u2014s cmd', case=False) | CommandLine.str.contains(r' \u2015i \u2015s cmd', case=False) | CommandLine.str.contains(r' -s pwsh', case=False) | CommandLine.str.contains(r' /s pwsh', case=False) | CommandLine.str.contains(r' \u2013s pwsh', case=False) | CommandLine.str.contains(r' \u2014s pwsh', case=False) | CommandLine.str.contains(r' \u2015s pwsh', case=False) | CommandLine.str.contains(r' -s -i pwsh', case=False) | CommandLine.str.contains(r' -s /i pwsh', case=False) | CommandLine.str.contains(r' -s \u2013i pwsh', case=False) | CommandLine.str.contains(r' -s \u2014i pwsh', case=False) | CommandLine.str.contains(r' -s \u2015i pwsh', case=False) | CommandLine.str.contains(r' /s -i pwsh', case=False) | CommandLine.str.contains(r' /s /i pwsh', case=False) | CommandLine.str.contains(r' /s \u2013i pwsh', case=False) | CommandLine.str.contains(r' /s \u2014i pwsh', case=False) | CommandLine.str.contains(r' /s \u2015i pwsh', case=False) | CommandLine.str.contains(r' \u2013s -i pwsh', case=False) | CommandLine.str.contains(r' \u2013s /i pwsh', case=False) | CommandLine.str.contains(r' \u2013s \u2013i pwsh', case=False) | CommandLine.str.contains(r' \u2013s \u2014i pwsh', case=False) | CommandLine.str.contains(r' \u2013s \u2015i pwsh', case=False) | CommandLine.str.contains(r' \u2014s -i pwsh', case=False) | CommandLine.str.contains(r' \u2014s /i pwsh', case=False) | CommandLine.str.contains(r' \u2014s \u2013i pwsh', case=False) | CommandLine.str.contains(r' \u2014s \u2014i pwsh', case=False) | CommandLine.str.contains(r' \u2014s \u2015i pwsh', case=False) | CommandLine.str.contains(r' \u2015s -i pwsh', case=False) | CommandLine.str.contains(r' \u2015s /i pwsh', case=False) | CommandLine.str.contains(r' \u2015s \u2013i pwsh', case=False) | CommandLine.str.contains(r' \u2015s \u2014i pwsh', case=False) | CommandLine.str.contains(r' \u2015s \u2015i pwsh', case=False) | CommandLine.str.contains(r' -i -s pwsh', case=False) | CommandLine.str.contains(r' -i /s pwsh', case=False) | CommandLine.str.contains(r' -i \u2013s pwsh', case=False) | CommandLine.str.contains(r' -i \u2014s pwsh', case=False) | CommandLine.str.contains(r' -i \u2015s pwsh', case=False) | CommandLine.str.contains(r' /i -s pwsh', case=False) | CommandLine.str.contains(r' /i /s pwsh', case=False) | CommandLine.str.contains(r' /i \u2013s pwsh', case=False) | CommandLine.str.contains(r' /i \u2014s pwsh', case=False) | CommandLine.str.contains(r' /i \u2015s pwsh', case=False) | CommandLine.str.contains(r' \u2013i -s pwsh', case=False) | CommandLine.str.contains(r' \u2013i /s pwsh', case=False) | CommandLine.str.contains(r' \u2013i \u2013s pwsh', case=False) | CommandLine.str.contains(r' \u2013i \u2014s pwsh', case=False) | CommandLine.str.contains(r' \u2013i \u2015s pwsh', case=False) | CommandLine.str.contains(r' \u2014i -s pwsh', case=False) | CommandLine.str.contains(r' \u2014i /s pwsh', case=False) | CommandLine.str.contains(r' \u2014i \u2013s pwsh', case=False) | CommandLine.str.contains(r' \u2014i \u2014s pwsh', case=False) | CommandLine.str.contains(r' \u2014i \u2015s pwsh', case=False) | CommandLine.str.contains(r' \u2015i -s pwsh', case=False) | CommandLine.str.contains(r' \u2015i /s pwsh', case=False) | CommandLine.str.contains(r' \u2015i \u2013s pwsh', case=False) | CommandLine.str.contains(r' \u2015i \u2014s pwsh', case=False) | CommandLine.str.contains(r' \u2015i \u2015s pwsh', case=False) | CommandLine.str.contains(r' -s powershell', case=False) | CommandLine.str.contains(r' /s powershell', case=False) | CommandLine.str.contains(r' \u2013s powershell', case=False) | CommandLine.str.contains(r' \u2014s powershell', case=False) | CommandLine.str.contains(r' \u2015s powershell', case=False) | CommandLine.str.contains(r' -s -i powershell', case=False) | CommandLine.str.contains(r' -s /i powershell', case=False) | CommandLine.str.contains(r' -s \u2013i powershell', case=False) | CommandLine.str.contains(r' -s \u2014i powershell', case=False) | CommandLine.str.contains(r' -s \u2015i powershell', case=False) | CommandLine.str.contains(r' /s -i powershell', case=False) | CommandLine.str.contains(r' /s /i powershell', case=False) | CommandLine.str.contains(r' /s \u2013i powershell', case=False) | CommandLine.str.contains(r' /s \u2014i powershell', case=False) | CommandLine.str.contains(r' /s \u2015i powershell', case=False) | CommandLine.str.contains(r' \u2013s -i powershell', case=False) | CommandLine.str.contains(r' \u2013s /i powershell', case=False) | CommandLine.str.contains(r' \u2013s \u2013i powershell', case=False) | CommandLine.str.contains(r' \u2013s \u2014i powershell', case=False) | CommandLine.str.contains(r' \u2013s \u2015i powershell', case=False) | CommandLine.str.contains(r' \u2014s -i powershell', case=False) | CommandLine.str.contains(r' \u2014s /i powershell', case=False) | CommandLine.str.contains(r' \u2014s \u2013i powershell', case=False) | CommandLine.str.contains(r' \u2014s \u2014i powershell', case=False) | CommandLine.str.contains(r' \u2014s \u2015i powershell', case=False) | CommandLine.str.contains(r' \u2015s -i powershell', case=False) | CommandLine.str.contains(r' \u2015s /i powershell', case=False) | CommandLine.str.contains(r' \u2015s \u2013i powershell', case=False) | CommandLine.str.contains(r' \u2015s \u2014i powershell', case=False) | CommandLine.str.contains(r' \u2015s \u2015i powershell', case=False) | CommandLine.str.contains(r' -i -s powershell', case=False) | CommandLine.str.contains(r' -i /s powershell', case=False) | CommandLine.str.contains(r' -i \u2013s powershell', case=False) | CommandLine.str.contains(r' -i \u2014s powershell', case=False) | CommandLine.str.contains(r' -i \u2015s powershell', case=False) | CommandLine.str.contains(r' /i -s powershell', case=False) | CommandLine.str.contains(r' /i /s powershell', case=False) | CommandLine.str.contains(r' /i \u2013s powershell', case=False) | CommandLine.str.contains(r' /i \u2014s powershell', case=False) | CommandLine.str.contains(r' /i \u2015s powershell', case=False) | CommandLine.str.contains(r' \u2013i -s powershell', case=False) | CommandLine.str.contains(r' \u2013i /s powershell', case=False) | CommandLine.str.contains(r' \u2013i \u2013s powershell', case=False) | CommandLine.str.contains(r' \u2013i \u2014s powershell', case=False) | CommandLine.str.contains(r' \u2013i \u2015s powershell', case=False) | CommandLine.str.contains(r' \u2014i -s powershell', case=False) | CommandLine.str.contains(r' \u2014i /s powershell', case=False) | CommandLine.str.contains(r' \u2014i \u2013s powershell', case=False) | CommandLine.str.contains(r' \u2014i \u2014s powershell', case=False) | CommandLine.str.contains(r' \u2014i \u2015s powershell', case=False) | CommandLine.str.contains(r' \u2015i -s powershell', case=False) | CommandLine.str.contains(r' \u2015i /s powershell', case=False) | CommandLine.str.contains(r' \u2015i \u2013s powershell', case=False) | CommandLine.str.contains(r' \u2015i \u2014s powershell', case=False) | CommandLine.str.contains(r' \u2015i \u2015s powershell', case=False)) & (CommandLine.str.contains(r'psexec', case=False) | CommandLine.str.contains(r'paexec', case=False) | CommandLine.str.contains(r'accepteula', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Net WebClient Casing Anomalies",
        "id": "c86133ad-4725-4bd0-8170-210788e0a7ba",
        "status": "test",
        "description": "Detects PowerShell command line contents that include a suspicious abnormal casing in the Net.Webclient (e.g. nEt.WEbCliEnT) string as used in obfuscation techniques",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r'TgBlAFQALgB3AEUAQg', case=False) | CommandLine.str.contains(r'4AZQBUAC4AdwBFAEIA', case=False) | CommandLine.str.contains(r'OAGUAVAAuAHcARQBCA', case=False) | CommandLine.str.contains(r'bgBFAHQALgB3AGUAYg', case=False) | CommandLine.str.contains(r'4ARQB0AC4AdwBlAGIA', case=False) | CommandLine.str.contains(r'uAEUAdAAuAHcAZQBiA', case=False) | CommandLine.str.contains(r'TgBFAHQALgB3AGUAYg', case=False) | CommandLine.str.contains(r'OAEUAdAAuAHcAZQBiA', case=False) | CommandLine.str.contains(r'bgBlAFQALgB3AGUAYg', case=False) | CommandLine.str.contains(r'4AZQBUAC4AdwBlAGIA', case=False) | CommandLine.str.contains(r'uAGUAVAAuAHcAZQBiA', case=False) | CommandLine.str.contains(r'TgBlAFQALgB3AGUAYg', case=False) | CommandLine.str.contains(r'OAGUAVAAuAHcAZQBiA', case=False) | CommandLine.str.contains(r'bgBFAFQALgB3AGUAYg', case=False) | CommandLine.str.contains(r'4ARQBUAC4AdwBlAGIA', case=False) | CommandLine.str.contains(r'uAEUAVAAuAHcAZQBiA', case=False) | CommandLine.str.contains(r'bgBlAHQALgBXAGUAYg', case=False) | CommandLine.str.contains(r'4AZQB0AC4AVwBlAGIA', case=False) | CommandLine.str.contains(r'uAGUAdAAuAFcAZQBiA', case=False) | CommandLine.str.contains(r'bgBFAHQALgBXAGUAYg', case=False) | CommandLine.str.contains(r'4ARQB0AC4AVwBlAGIA', case=False) | CommandLine.str.contains(r'uAEUAdAAuAFcAZQBiA', case=False) | CommandLine.str.contains(r'TgBFAHQALgBXAGUAYg', case=False) | CommandLine.str.contains(r'OAEUAdAAuAFcAZQBiA', case=False) | CommandLine.str.contains(r'bgBlAFQALgBXAGUAYg', case=False) | CommandLine.str.contains(r'4AZQBUAC4AVwBlAGIA', case=False) | CommandLine.str.contains(r'uAGUAVAAuAFcAZQBiA', case=False) | CommandLine.str.contains(r'TgBlAFQALgBXAGUAYg', case=False) | CommandLine.str.contains(r'OAGUAVAAuAFcAZQBiA', case=False) | CommandLine.str.contains(r'bgBFAFQALgBXAGUAYg', case=False) | CommandLine.str.contains(r'4ARQBUAC4AVwBlAGIA', case=False) | CommandLine.str.contains(r'uAEUAVAAuAFcAZQBiA', case=False) | CommandLine.str.contains(r'bgBlAHQALgB3AEUAYg', case=False) | CommandLine.str.contains(r'4AZQB0AC4AdwBFAGIA', case=False) | CommandLine.str.contains(r'uAGUAdAAuAHcARQBiA', case=False) | CommandLine.str.contains(r'TgBlAHQALgB3AEUAYg', case=False) | CommandLine.str.contains(r'OAGUAdAAuAHcARQBiA', case=False) | CommandLine.str.contains(r'bgBFAHQALgB3AEUAYg', case=False) | CommandLine.str.contains(r'4ARQB0AC4AdwBFAGIA', case=False) | CommandLine.str.contains(r'uAEUAdAAuAHcARQBiA', case=False) | CommandLine.str.contains(r'TgBFAHQALgB3AEUAYg', case=False) | CommandLine.str.contains(r'OAEUAdAAuAHcARQBiA', case=False) | CommandLine.str.contains(r'bgBlAFQALgB3AEUAYg', case=False) | CommandLine.str.contains(r'4AZQBUAC4AdwBFAGIA', case=False) | CommandLine.str.contains(r'uAGUAVAAuAHcARQBiA', case=False) | CommandLine.str.contains(r'TgBlAFQALgB3AEUAYg', case=False) | CommandLine.str.contains(r'OAGUAVAAuAHcARQBiA', case=False) | CommandLine.str.contains(r'bgBFAFQALgB3AEUAYg', case=False) | CommandLine.str.contains(r'4ARQBUAC4AdwBFAGIA', case=False) | CommandLine.str.contains(r'uAEUAVAAuAHcARQBiA', case=False) | CommandLine.str.contains(r'TgBFAFQALgB3AEUAYg', case=False) | CommandLine.str.contains(r'OAEUAVAAuAHcARQBiA', case=False) | CommandLine.str.contains(r'bgBlAHQALgBXAEUAYg', case=False) | CommandLine.str.contains(r'4AZQB0AC4AVwBFAGIA', case=False) | CommandLine.str.contains(r'uAGUAdAAuAFcARQBiA', case=False) | CommandLine.str.contains(r'TgBlAHQALgBXAEUAYg', case=False) | CommandLine.str.contains(r'OAGUAdAAuAFcARQBiA', case=False) | CommandLine.str.contains(r'bgBFAHQALgBXAEUAYg', case=False) | CommandLine.str.contains(r'4ARQB0AC4AVwBFAGIA', case=False) | CommandLine.str.contains(r'uAEUAdAAuAFcARQBiA', case=False) | CommandLine.str.contains(r'TgBFAHQALgBXAEUAYg', case=False) | CommandLine.str.contains(r'OAEUAdAAuAFcARQBiA', case=False) | CommandLine.str.contains(r'bgBlAFQALgBXAEUAYg', case=False) | CommandLine.str.contains(r'4AZQBUAC4AVwBFAGIA', case=False) | CommandLine.str.contains(r'uAGUAVAAuAFcARQBiA', case=False) | CommandLine.str.contains(r'TgBlAFQALgBXAEUAYg', case=False) | CommandLine.str.contains(r'OAGUAVAAuAFcARQBiA', case=False) | CommandLine.str.contains(r'bgBFAFQALgBXAEUAYg', case=False) | CommandLine.str.contains(r'4ARQBUAC4AVwBFAGIA', case=False) | CommandLine.str.contains(r'uAEUAVAAuAFcARQBiA', case=False) | CommandLine.str.contains(r'TgBFAFQALgBXAEUAYg', case=False) | CommandLine.str.contains(r'OAEUAVAAuAFcARQBiA', case=False) | CommandLine.str.contains(r'bgBlAHQALgB3AGUAQg', case=False) | CommandLine.str.contains(r'4AZQB0AC4AdwBlAEIA', case=False) | CommandLine.str.contains(r'uAGUAdAAuAHcAZQBCA', case=False) | CommandLine.str.contains(r'TgBlAHQALgB3AGUAQg', case=False) | CommandLine.str.contains(r'OAGUAdAAuAHcAZQBCA', case=False) | CommandLine.str.contains(r'bgBFAHQALgB3AGUAQg', case=False) | CommandLine.str.contains(r'4ARQB0AC4AdwBlAEIA', case=False) | CommandLine.str.contains(r'uAEUAdAAuAHcAZQBCA', case=False) | CommandLine.str.contains(r'TgBFAHQALgB3AGUAQg', case=False) | CommandLine.str.contains(r'OAEUAdAAuAHcAZQBCA', case=False) | CommandLine.str.contains(r'bgBlAFQALgB3AGUAQg', case=False) | CommandLine.str.contains(r'4AZQBUAC4AdwBlAEIA', case=False) | CommandLine.str.contains(r'uAGUAVAAuAHcAZQBCA', case=False) | CommandLine.str.contains(r'TgBlAFQALgB3AGUAQg', case=False) | CommandLine.str.contains(r'OAGUAVAAuAHcAZQBCA', case=False) | CommandLine.str.contains(r'bgBFAFQALgB3AGUAQg', case=False) | CommandLine.str.contains(r'4ARQBUAC4AdwBlAEIA', case=False) | CommandLine.str.contains(r'uAEUAVAAuAHcAZQBCA', case=False) | CommandLine.str.contains(r'TgBFAFQALgB3AGUAQg', case=False) | CommandLine.str.contains(r'OAEUAVAAuAHcAZQBCA', case=False) | CommandLine.str.contains(r'bgBlAHQALgBXAGUAQg', case=False) | CommandLine.str.contains(r'4AZQB0AC4AVwBlAEIA', case=False) | CommandLine.str.contains(r'uAGUAdAAuAFcAZQBCA', case=False) | CommandLine.str.contains(r'TgBlAHQALgBXAGUAQg', case=False) | CommandLine.str.contains(r'OAGUAdAAuAFcAZQBCA', case=False) | CommandLine.str.contains(r'bgBFAHQALgBXAGUAQg', case=False) | CommandLine.str.contains(r'4ARQB0AC4AVwBlAEIA', case=False) | CommandLine.str.contains(r'uAEUAdAAuAFcAZQBCA', case=False) | CommandLine.str.contains(r'TgBFAHQALgBXAGUAQg', case=False) | CommandLine.str.contains(r'OAEUAdAAuAFcAZQBCA', case=False) | CommandLine.str.contains(r'bgBlAFQALgBXAGUAQg', case=False) | CommandLine.str.contains(r'4AZQBUAC4AVwBlAEIA', case=False) | CommandLine.str.contains(r'uAGUAVAAuAFcAZQBCA', case=False) | CommandLine.str.contains(r'TgBlAFQALgBXAGUAQg', case=False) | CommandLine.str.contains(r'OAGUAVAAuAFcAZQBCA', case=False) | CommandLine.str.contains(r'bgBFAFQALgBXAGUAQg', case=False) | CommandLine.str.contains(r'4ARQBUAC4AVwBlAEIA', case=False) | CommandLine.str.contains(r'uAEUAVAAuAFcAZQBCA', case=False) | CommandLine.str.contains(r'TgBFAFQALgBXAGUAQg', case=False) | CommandLine.str.contains(r'OAEUAVAAuAFcAZQBCA', case=False) | CommandLine.str.contains(r'bgBlAHQALgB3AEUAQg', case=False) | CommandLine.str.contains(r'4AZQB0AC4AdwBFAEIA', case=False) | CommandLine.str.contains(r'uAGUAdAAuAHcARQBCA', case=False) | CommandLine.str.contains(r'TgBlAHQALgB3AEUAQg', case=False) | CommandLine.str.contains(r'OAGUAdAAuAHcARQBCA', case=False) | CommandLine.str.contains(r'bgBFAHQALgB3AEUAQg', case=False) | CommandLine.str.contains(r'4ARQB0AC4AdwBFAEIA', case=False) | CommandLine.str.contains(r'uAEUAdAAuAHcARQBCA', case=False) | CommandLine.str.contains(r'TgBFAHQALgB3AEUAQg', case=False) | CommandLine.str.contains(r'OAEUAdAAuAHcARQBCA', case=False) | CommandLine.str.contains(r'bgBlAFQALgB3AEUAQg', case=False) | CommandLine.str.contains(r'uAGUAVAAuAHcARQBCA', case=False) | CommandLine.str.contains(r'bgBFAFQALgB3AEUAQg', case=False) | CommandLine.str.contains(r'4ARQBUAC4AdwBFAEIA', case=False) | CommandLine.str.contains(r'uAEUAVAAuAHcARQBCA', case=False) | CommandLine.str.contains(r'TgBFAFQALgB3AEUAQg', case=False) | CommandLine.str.contains(r'OAEUAVAAuAHcARQBCA', case=False) | CommandLine.str.contains(r'TgBlAHQALgBXAEUAQg', case=False) | CommandLine.str.contains(r'4AZQB0AC4AVwBFAEIA', case=False) | CommandLine.str.contains(r'OAGUAdAAuAFcARQBCA', case=False) | CommandLine.str.contains(r'bgBFAHQALgBXAEUAQg', case=False) | CommandLine.str.contains(r'4ARQB0AC4AVwBFAEIA', case=False) | CommandLine.str.contains(r'uAEUAdAAuAFcARQBCA', case=False) | CommandLine.str.contains(r'TgBFAHQALgBXAEUAQg', case=False) | CommandLine.str.contains(r'OAEUAdAAuAFcARQBCA', case=False) | CommandLine.str.contains(r'bgBlAFQALgBXAEUAQg', case=False) | CommandLine.str.contains(r'4AZQBUAC4AVwBFAEIA', case=False) | CommandLine.str.contains(r'uAGUAVAAuAFcARQBCA', case=False) | CommandLine.str.contains(r'TgBlAFQALgBXAEUAQg', case=False) | CommandLine.str.contains(r'OAGUAVAAuAFcARQBCA', case=False) | CommandLine.str.contains(r'bgBFAFQALgBXAEUAQg', case=False) | CommandLine.str.contains(r'4ARQBUAC4AVwBFAEIA', case=False) | CommandLine.str.contains(r'uAEUAVAAuAFcARQBCA', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential PowerShell Command Line Obfuscation",
        "id": "d7bcd677-645d-4691-a8d4-7a5602b780d1",
        "status": "test",
        "description": "Detects the PowerShell command lines with special characters",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1027",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r'\\\\+.*\\\\+.*\\\\+.*\\\\+.*\\\\+.*\\\\+.*\\\\+.*\\\\+.*\\\\+.*\\\\+.*\\\\+.*\\\\+.*\\\\+.*\\\\+') | CommandLine.str.contains(r'\\\\{.*\\\\{.*\\\\{.*\\\\{.*\\\\{.*\\\\{.*\\\\{.*\\\\{.*\\\\{.*\\\\{') | CommandLine.str.contains(r'\\\\^.*\\\\^.*\\\\^.*\\\\^.*\\\\^') | CommandLine.str.contains(r'`.*`.*`.*`.*`')) & ~ (ParentImage=='C:\\\\Program Files\\\\Amazon\\\\SSM\\\\ssm-document-worker.exe' | CommandLine.str.contains(r'new EventSource(\"Microsoft.Windows.Sense.Client.Management\"', case=False) | CommandLine.str.contains(r'public static extern bool InstallELAMCertificateInfo(SafeFileHandle handle);', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Userinit Child Process",
        "id": "0a98a10c-685d-4ab0-bddc-b6bdd1d48458",
        "status": "test",
        "description": "Detects uncommon \"userinit.exe\" child processes, which could be a sign of uncommon shells or login scripts used for persistence.",
        "tags": [
            "attack.t1037.001",
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\userinit.exe', case=False) & ~ Image.str.contains(r':\\\\WINDOWS\\\\explorer.exe', case=False) & ~ (CommandLine.str.contains(r'netlogon.bat', case=False) | CommandLine.str.contains(r'UsrLogon.cmd', case=False) | CommandLine=='PowerShell.exe' | Image.str.contains(r':\\\\Windows\\\\System32\\\\proquota.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\proquota.exe', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Citrix\\\\HDX\\\\bin\\\\cmstart.exe', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Citrix\\\\HDX\\\\bin\\\\icast.exe', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Citrix\\\\System32\\\\icast.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\Citrix\\\\HDX\\\\bin\\\\cmstart.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\Citrix\\\\HDX\\\\bin\\\\icast.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\Citrix\\\\System32\\\\icast.exe', case=False) | Image is null)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Security Privileges Enumeration Via Whoami.EXE",
        "id": "97a80ec7-0e2f-4d05-9ef4-65760e634f6b",
        "status": "test",
        "description": "Detects a whoami.exe executed with the /priv command line flag instructing the tool to show all current user privileges. This is often used after a privilege escalation attempt.",
        "tags": [
            "attack.privilege-escalation",
            "attack.discovery",
            "attack.t1033"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\whoami.exe', case=False) | OriginalFileName=='whoami.exe') & (CommandLine.str.contains(r' /priv', case=False) | CommandLine.str.contains(r' -priv', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious CMD Shell Output Redirect",
        "id": "8e0bb260-d4b2-4fff-bb8d-3f82118e6892",
        "status": "test",
        "description": "Detects inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location.\nThis technique is sometimes used by malicious actors in order to redirect the output of reconnaissance commands such as \"hostname\" and \"dir\" to files for future exfiltration.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & (CommandLine.str.contains(r'*>*%APPDATA%\\\\*') | CommandLine.str.contains(r'*>*%TEMP%\\\\*') | CommandLine.str.contains(r'*>*%TMP%\\\\*') | CommandLine.str.contains(r'*>*%USERPROFILE%\\\\*') | CommandLine.str.contains(r'*>*C:\\\\ProgramData\\\\*') | CommandLine.str.contains(r'*>*C:\\\\Temp\\\\*') | CommandLine.str.contains(r'*>*C:\\\\Users\\\\Public\\\\*') | CommandLine.str.contains(r'*>*C:\\\\Windows\\\\Temp\\\\*') | (CommandLine.str.contains(r' >', case=False) | CommandLine.str.contains(r'\">', case=False) | CommandLine.str.contains(r'\\'>', case=False)) & CommandLine.str.contains(r'C:\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sysinternals PsSuspend Execution",
        "id": "48bbc537-b652-4b4e-bd1d-281172df448f",
        "status": "test",
        "description": "Detects usage of Sysinternals PsSuspend which can be abused to suspend critical processes",
        "tags": [
            "attack.discovery",
            "attack.persistence",
            "attack.t1543.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='pssuspend.exe' | Image.str.contains(r'\\\\pssuspend.exe', case=False) | Image.str.contains(r'\\\\pssuspend64.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Hardware Model Reconnaissance Via Wmic.EXE",
        "id": "3e3ceccd-6c06-48b8-b5ff-ab1d25db8c1d",
        "status": "test",
        "description": "Detects the execution of WMIC with the \"csproduct\" which is used to obtain information such as hardware models and vendor information",
        "tags": [
            "attack.execution",
            "attack.t1047",
            "car.2016-03-002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wmic.exe', case=False) | OriginalFileName=='wmic.exe') & CommandLine.str.contains(r'csproduct', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Fake Instance Of Hxtsr.EXE Executed",
        "id": "4e762605-34a8-406d-b72e-c1a089313320",
        "status": "test",
        "description": "HxTsr.exe is a Microsoft compressed executable file called Microsoft Outlook Communications.\nHxTsr.exe is part of Outlook apps, because it resides in a hidden \"WindowsApps\" subfolder of \"C:\\Program Files\".\nAny instances of hxtsr.exe not in this folder may be malware camouflaging itself as HxTsr.exe\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\hxtsr.exe', case=False) & ~ (Image.str.contains(r':\\\\program files\\\\windowsapps\\\\microsoft.windowscommunicationsapps_', case=False) & Image.str.contains(r'\\\\hxtsr.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Fsutil Suspicious Invocation",
        "id": "add64136-62e5-48ea-807e-88638d02df1e",
        "status": "stable",
        "description": "Detects suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc).\nMight be used by ransomwares during the attack (seen by NotPetya and others).\n",
        "tags": [
            "attack.defense-evasion",
            "attack.impact",
            "attack.t1070",
            "attack.t1485"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\fsutil.exe', case=False) | OriginalFileName=='fsutil.exe') & (CommandLine.str.contains(r'deletejournal', case=False) | CommandLine.str.contains(r'createjournal', case=False) | CommandLine.str.contains(r'setZeroData', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Active Directory Structure Export Via Ldifde.EXE",
        "id": "4f7a6757-ff79-46db-9687-66501a02d9ec",
        "status": "test",
        "description": "Detects the execution of \"ldifde.exe\" in order to export organizational Active Directory structure.",
        "tags": [
            "attack.exfiltration"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ldifde.exe', case=False) | OriginalFileName=='ldifde.exe') & CommandLine.str.contains(r'-f', case=False) & ~ CommandLine.str.contains(r' -i', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Adidnsdump Execution",
        "id": "26d3f0a2-f514-4a3f-a8a7-e7e48a8d9160",
        "status": "test",
        "description": "This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks Python 3 and python.exe must be installed,\nUsee to Query/modify DNS records for Active Directory integrated DNS via LDAP\n",
        "tags": [
            "attack.discovery",
            "attack.t1018"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\python.exe', case=False) & CommandLine.str.contains(r'adidnsdump', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Process Created Via Wmic.EXE",
        "id": "3c89a1e8-0fba-449e-8f1b-8409d6267ec8",
        "status": "test",
        "description": "Detects WMIC executing \"process call create\" with suspicious calls to processes such as \"rundll32\", \"regsrv32\", etc.",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'process ', case=False) & CommandLine.str.contains(r'call ', case=False) & CommandLine.str.contains(r'create ', case=False) & (CommandLine.str.contains(r'rundll32', case=False) | CommandLine.str.contains(r'bitsadmin', case=False) | CommandLine.str.contains(r'regsvr32', case=False) | CommandLine.str.contains(r'cmd.exe /c ', case=False) | CommandLine.str.contains(r'cmd.exe /k ', case=False) | CommandLine.str.contains(r'cmd.exe /r ', case=False) | CommandLine.str.contains(r'cmd /c ', case=False) | CommandLine.str.contains(r'cmd /k ', case=False) | CommandLine.str.contains(r'cmd /r ', case=False) | CommandLine.str.contains(r'powershell', case=False) | CommandLine.str.contains(r'pwsh', case=False) | CommandLine.str.contains(r'certutil', case=False) | CommandLine.str.contains(r'cscript', case=False) | CommandLine.str.contains(r'wscript', case=False) | CommandLine.str.contains(r'mshta', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | CommandLine.str.contains(r'%temp%', case=False) | CommandLine.str.contains(r'%tmp%', case=False) | CommandLine.str.contains(r'%ProgramData%', case=False) | CommandLine.str.contains(r'%appdata%', case=False) | CommandLine.str.contains(r'%comspec%', case=False) | CommandLine.str.contains(r'%localappdata%', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed PAExec Execution",
        "id": "c4e49831-1496-40cf-8ce1-b53f942b02f9",
        "status": "test",
        "description": "Detects execution of renamed version of PAExec. Often used by attackers",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description=='PAExec Application' | OriginalFileName=='PAExec.exe' | Product.str.contains(r'PAExec', case=False) | Hashes.str.contains(r'IMPHASH=11D40A7B7876288F919AB819CC2D9802', case=False) | Hashes.str.contains(r'IMPHASH=6444f8a34e99b8f7d9647de66aabe516', case=False) | Hashes.str.contains(r'IMPHASH=dfd6aa3f7b2b1035b76b718f1ddc689f', case=False) | Hashes.str.contains(r'IMPHASH=1a6cca4d5460b1710a12dea39e4a592c', case=False)) & ~ (Image.str.contains(r'\\\\paexec.exe', case=False) | Image.str.contains(r'C:\\\\Windows\\\\PAExec-', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Winrar Compressing Dump Files",
        "id": "1ac14d38-3dfc-4635-92c7-e3fd1c5f5bfc",
        "status": "test",
        "description": "Detects execution of WinRAR in order to compress a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration.",
        "tags": [
            "attack.collection",
            "attack.t1560.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rar.exe', case=False) | Image.str.contains(r'\\\\winrar.exe', case=False) | Description=='Command line RAR') & (CommandLine.str.contains(r'.dmp', case=False) | CommandLine.str.contains(r'.dump', case=False) | CommandLine.str.contains(r'.hdmp', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Windows Defender AV Bypass Via Dump64.EXE Rename",
        "id": "129966c9-de17-4334-a123-8b58172e664d",
        "status": "test",
        "description": "Detects when a user is potentially trying to bypass the Windows Defender AV by renaming a tool to dump64.exe and placing it in the Visual Studio folder.\nCurrently the rule is covering only usage of procdump but other utilities can be added in order to increase coverage.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r':\\\\Program Files', case=False) & Image.str.contains(r'\\\\Microsoft Visual Studio\\\\', case=False) & Image.str.contains(r'\\\\dump64.exe', case=False) & (OriginalFileName=='procdump' | CommandLine.str.contains(r' -ma ', case=False) | CommandLine.str.contains(r' -mp ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - NimScan Execution",
        "id": "4fd6b1c7-19b8-4488-97f6-00f0924991a3",
        "status": "test",
        "description": "Detects usage of NimScan, a portscanner utility.\nIn early 2025, adversaries were observed using this utility to scan for open ports on remote hosts in a compromised environment.\nThis rule identifies the execution of NimScan based on the process image name and specific hash values associated with different versions of the tool.\n",
        "tags": [
            "attack.discovery",
            "attack.t1046"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\NimScan.exe', case=False) | Hashes.str.contains(r'IMPHASH=41BB1C7571B3A724EB83A1D2B96DBB8C', case=False) | Hashes.str.contains(r'IMPHASH=B1B6ADACB172795480179EFD18A29549', case=False) | Hashes.str.contains(r'IMPHASH=0D1F896DC7642AD8384F9042F30279C2', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Credential Manager Access via VaultCmd",
        "id": "58f50261-c53b-4c88-bd12-1d71f12eda4c",
        "status": "test",
        "description": "List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe",
        "tags": [
            "attack.credential-access",
            "attack.t1555.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\VaultCmd.exe', case=False) | OriginalFileName=='VAULTCMD.EXE') & CommandLine.str.contains(r'/listcreds:', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Ruby Inline Command Execution",
        "id": "20a5ffa1-3848-4584-b6f8-c7c7fd9f69c8",
        "status": "test",
        "description": "Detects execution of ruby using the \"-e\" flag. This is could be used as a way to launch a reverse shell or execute live ruby code.",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ruby.exe', case=False) | OriginalFileName=='ruby.exe') & CommandLine.str.contains(r' -e', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Add SafeBoot Keys Via Reg Utility",
        "id": "d7662ff6-9e97-4596-a61d-9839e32dee8d",
        "status": "test",
        "description": "Detects execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys. Often used by attacker to allow the ransomware to work in safe mode as some security products do not",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\reg.exe', case=False) | OriginalFileName=='reg.exe') & CommandLine.str.contains(r'\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\SafeBoot', case=False) & (CommandLine.str.contains(r' copy ', case=False) | CommandLine.str.contains(r' add ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LOL-Binary Copied From System Directory",
        "id": "f5d19838-41b5-476c-98d8-ba8af4929ee2",
        "status": "test",
        "description": "Detects a suspicious copy operation that tries to copy a known LOLBIN from system (System32, SysWOW64, WinSxS) directories to another on disk in order to bypass detections based on locations.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) & CommandLine.str.contains(r'copy ', case=False) | (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & (CommandLine.str.contains(r'copy-item', case=False) | CommandLine.str.contains(r' copy ', case=False) | CommandLine.str.contains(r'cpi ', case=False) | CommandLine.str.contains(r' cp ', case=False)) | Image.str.contains(r'\\\\robocopy.exe', case=False) | Image.str.contains(r'\\\\xcopy.exe', case=False) | OriginalFileName==['robocopy.exe', 'XCOPY.EXE']) & (CommandLine.str.contains(r'\\\\System32', case=False) | CommandLine.str.contains(r'\\\\SysWOW64', case=False) | CommandLine.str.contains(r'\\\\WinSxS', case=False)) & (CommandLine.str.contains(r'\\\\bitsadmin.exe', case=False) | CommandLine.str.contains(r'\\\\calc.exe', case=False) | CommandLine.str.contains(r'\\\\certutil.exe', case=False) | CommandLine.str.contains(r'\\\\cmdl32.exe', case=False) | CommandLine.str.contains(r'\\\\cscript.exe', case=False) | CommandLine.str.contains(r'\\\\mshta.exe', case=False) | CommandLine.str.contains(r'\\\\rundll32.exe', case=False) | CommandLine.str.contains(r'\\\\wscript.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass WSReset",
        "id": "89a9a0e0-f61a-42e5-8957-b1479565a658",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass via WSReset usable by default sysmon-config",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\wsreset.exe', case=False) & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Rundll32.EXE Execution of UDL File",
        "id": "0ea52357-cd59-4340-9981-c46c7e900428",
        "status": "experimental",
        "description": "Detects the execution of rundll32.exe with the oledb32.dll library to open a UDL file.\nThreat actors can abuse this technique as a phishing vector to capture authentication credentials or other sensitive data.\n",
        "tags": [
            "attack.execution",
            "attack.t1218.011",
            "attack.t1071"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\explorer.exe', case=False) & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & CommandLine.str.contains(r'oledb32.dll', case=False) & CommandLine.str.contains(r',OpenDSLFile ', case=False) & CommandLine.str.contains(r'*\\\\Users\\\\*\\\\Downloads\\\\*') & CommandLine.str.contains(r'.udl', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Network Command",
        "id": "a29c1813-ab1f-4dde-b489-330b952e91ae",
        "status": "test",
        "description": "Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems",
        "tags": [
            "attack.discovery",
            "attack.t1016"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'ipconfig /all', case=False) | CommandLine.str.contains(r'netsh interface show interface', case=False) | CommandLine.str.contains(r'arp -a', case=False) | CommandLine.str.contains(r'nbtstat -n', case=False) | CommandLine.str.contains(r'net config', case=False) | CommandLine.str.contains(r'route print', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Signing Bypass Via Windows Developer Features",
        "id": "a383dec4-deec-4e6e-913b-ed9249670848",
        "status": "test",
        "description": "Detects when a user enable developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SystemSettingsAdminFlows.exe', case=False) | OriginalFileName=='SystemSettingsAdminFlows.EXE') & CommandLine.str.contains(r'TurnOnDeveloperFeatures', case=False) & (CommandLine.str.contains(r'DeveloperUnlock', case=False) | CommandLine.str.contains(r'EnableSideloading', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "System Network Connections Discovery Via Net.EXE",
        "id": "1c67a717-32ba-409b-a45d-0fb704a73a81",
        "status": "test",
        "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.",
        "tags": [
            "attack.discovery",
            "attack.t1049"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | OriginalFileName==['net.exe', 'net1.exe']) & (CommandLine.str.contains(r' use', case=False) | CommandLine.str.contains(r' sessions', case=False) | CommandLine.str.contains(r' use ', case=False) | CommandLine.str.contains(r' sessions ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "MSExchange Transport Agent Installation",
        "id": "83809e84-4475-4b69-bc3e-4aad8568612f",
        "status": "test",
        "description": "Detects the Installation of a Exchange Transport Agent",
        "tags": [
            "attack.persistence",
            "attack.t1505.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'Install-TransportAgent', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious SYSVOL Domain Group Policy Access",
        "id": "05f3c945-dcc8-4393-9f3d-af65077a8f86",
        "status": "test",
        "description": "Detects Access to Domain Group Policies stored in SYSVOL",
        "tags": [
            "attack.credential-access",
            "attack.t1552.006"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\SYSVOL\\\\', case=False) & CommandLine.str.contains(r'\\\\policies\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New DNS ServerLevelPluginDll Installed Via Dnscmd.EXE",
        "id": "f63b56ee-3f79-4b8a-97fb-5c48007e8573",
        "status": "test",
        "description": "Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\dnscmd.exe', case=False) & CommandLine.str.contains(r'/config', case=False) & CommandLine.str.contains(r'/serverlevelplugindll', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sysmon Configuration Update",
        "id": "87911521-7098-470b-a459-9a57fc80bdfd",
        "status": "test",
        "description": "Detects updates to Sysmon's configuration. Attackers might update or replace the Sysmon configuration with a bare bone one to avoid monitoring without shutting down the service completely",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Sysmon64.exe', case=False) | Image.str.contains(r'\\\\Sysmon.exe', case=False) | Description=='System activity monitor') & (CommandLine.str.contains(r'-c', case=False) | CommandLine.str.contains(r'/c', case=False) | CommandLine.str.contains(r'\u2013c', case=False) | CommandLine.str.contains(r'\u2014c', case=False) | CommandLine.str.contains(r'\u2015c', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Kernel Dump Using Dtrace",
        "id": "7124aebe-4cd7-4ccb-8df0-6d6b93c96795",
        "status": "test",
        "description": "Detects suspicious way to dump the kernel on Windows systems using dtrace.exe, which is available on Windows systems since Windows 10 19H1",
        "tags": [
            "attack.discovery",
            "attack.t1082"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\dtrace.exe', case=False) & CommandLine.str.contains(r'lkd(0)', case=False) | CommandLine.str.contains(r'syscall:::return', case=False) & CommandLine.str.contains(r'lkd(', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "SQLite Chromium Profile Data DB Access",
        "id": "24c77512-782b-448a-8950-eddb0785fc71",
        "status": "test",
        "description": "Detect usage of the \"sqlite\" binary to query databases in Chromium-based browsers for potential data stealing.",
        "tags": [
            "attack.credential-access",
            "attack.t1539",
            "attack.t1555.003",
            "attack.collection",
            "attack.t1005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Product=='SQLite' | Image.str.contains(r'\\\\sqlite.exe', case=False) | Image.str.contains(r'\\\\sqlite3.exe', case=False)) & (CommandLine.str.contains(r'\\\\User Data\\\\', case=False) | CommandLine.str.contains(r'\\\\Opera Software\\\\', case=False) | CommandLine.str.contains(r'\\\\ChromiumViewer\\\\', case=False)) & (CommandLine.str.contains(r'Login Data', case=False) | CommandLine.str.contains(r'Cookies', case=False) | CommandLine.str.contains(r'Web Data', case=False) | CommandLine.str.contains(r'History', case=False) | CommandLine.str.contains(r'Bookmarks', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - WinPwn Execution",
        "id": "d557dc06-62e8-4468-a8e8-7984124908ce",
        "status": "test",
        "description": "Detects commandline keywords indicative of potential usge of the tool WinPwn. A tool for Windows and Active Directory reconnaissance and exploitation.\n",
        "tags": [
            "attack.credential-access",
            "attack.defense-evasion",
            "attack.discovery",
            "attack.execution",
            "attack.privilege-escalation",
            "attack.t1046",
            "attack.t1082",
            "attack.t1106",
            "attack.t1518",
            "attack.t1548.002",
            "attack.t1552.001",
            "attack.t1555",
            "attack.t1555.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'Offline_Winpwn', case=False) | CommandLine.str.contains(r'WinPwn ', case=False) | CommandLine.str.contains(r'WinPwn.exe', case=False) | CommandLine.str.contains(r'WinPwn.ps1', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Invoke-Obfuscation COMPRESS OBFUSCATION",
        "id": "7eedcc9d-9fdb-4d94-9c54-474e8affc0c7",
        "status": "test",
        "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'new-object', case=False) & CommandLine.str.contains(r'text.encoding]::ascii', case=False) & (CommandLine.str.contains(r'system.io.compression.deflatestream', case=False) | CommandLine.str.contains(r'system.io.streamreader', case=False) | CommandLine.str.contains(r'readtoend(', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Download From Browser Process Via Inline URL",
        "id": "94771a71-ba41-4b6e-a757-b531372eaab6",
        "status": "test",
        "description": "Detects execution of a browser process with a URL argument pointing to a file with a potentially interesting extension. This can be abused to download arbitrary files or to hide from the user for example by launching the browser in a minimized state.",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\brave.exe', case=False) | Image.str.contains(r'\\\\chrome.exe', case=False) | Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False)) & CommandLine.str.contains(r'http', case=False) & (CommandLine.str.contains(r'.7z', case=False) | CommandLine.str.contains(r'.dat', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.exe', case=False) | CommandLine.str.contains(r'.hta', case=False) | CommandLine.str.contains(r'.ps1', case=False) | CommandLine.str.contains(r'.psm1', case=False) | CommandLine.str.contains(r'.txt', case=False) | CommandLine.str.contains(r'.vbe', case=False) | CommandLine.str.contains(r'.vbs', case=False) | CommandLine.str.contains(r'.zip', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential ShellDispatch.DLL Functionality Abuse",
        "id": "82343930-652f-43f5-ab70-2ee9fdd6d5e9",
        "status": "test",
        "description": "Detects potential \"ShellDispatch.dll\" functionality abuse to execute arbitrary binaries via \"ShellExecute\"",
        "tags": [
            "attack.execution",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & CommandLine.str.contains(r'RunDll_ShellExecuteW', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Execute Pcwrun.EXE To Leverage Follina",
        "id": "6004abd0-afa4-4557-ba90-49d172e0a299",
        "status": "test",
        "description": "Detects indirect command execution via Program Compatibility Assistant \"pcwrun.exe\" leveraging the follina (CVE-2022-30190) vulnerability",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\pcwrun.exe', case=False) & CommandLine.str.contains(r'../', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Usage Of Qemu",
        "id": "5fc297ae-25b6-488a-8f25-cc12ac29b744",
        "status": "experimental",
        "description": "Detects potentially suspicious execution of the Qemu utility in a Windows environment.\nThreat actors have leveraged this utility and this technique for achieving network access as reported by Kaspersky.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1090",
            "attack.t1572"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'-m 1M', case=False) | CommandLine.str.contains(r'-m 2M', case=False) | CommandLine.str.contains(r'-m 3M', case=False)) & CommandLine.str.contains(r'restrict=off', case=False) & CommandLine.str.contains(r'-netdev ', case=False) & CommandLine.str.contains(r'connect=', case=False) & CommandLine.str.contains(r'-nographic', case=False) & ~ (CommandLine.str.contains(r' -cdrom ', case=False) | CommandLine.str.contains(r' type=virt ', case=False) | CommandLine.str.contains(r' -blockdev ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Persistence Via VMwareToolBoxCmd.EXE VM State Change Script",
        "id": "236d8e89-ed95-4789-a982-36f4643738ba",
        "status": "test",
        "description": "Detects execution of the \"VMwareToolBoxCmd.exe\" with the \"script\" and \"set\" flag to setup a specific script that's located in a potentially suspicious location to run for a specific VM state",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\VMwareToolBoxCmd.exe', case=False) | OriginalFileName=='toolbox-cmd.exe') & CommandLine.str.contains(r' script ', case=False) & CommandLine.str.contains(r' set ', case=False) & (CommandLine.str.contains(r':\\\\PerfLogs\\\\', case=False) | CommandLine.str.contains(r':\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\System32\\\\Tasks\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Stop Windows Service Via Sc.EXE",
        "id": "81bcb81b-5b1f-474b-b373-52c871aaa7b1",
        "status": "test",
        "description": "Detects the stopping of a Windows service via the \"sc.exe\" utility",
        "tags": [
            "attack.impact",
            "attack.t1489"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='sc.exe' | Image.str.contains(r'\\\\sc.exe', case=False)) & CommandLine.str.contains(r' stop ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Base64 Encoded IEX Cmdlet",
        "id": "88f680b8-070e-402c-ae11-d2914f2257f1",
        "status": "test",
        "description": "Detects usage of a base64 encoded \"IEX\" cmdlet in a process command line",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'SUVYIChb', case=False) | CommandLine.str.contains(r'lFWCAoW', case=False) | CommandLine.str.contains(r'JRVggKF', case=False) | CommandLine.str.contains(r'aWV4IChb', case=False) | CommandLine.str.contains(r'lleCAoW', case=False) | CommandLine.str.contains(r'pZXggKF', case=False) | CommandLine.str.contains(r'aWV4IChOZX', case=False) | CommandLine.str.contains(r'lleCAoTmV3', case=False) | CommandLine.str.contains(r'pZXggKE5ld', case=False) | CommandLine.str.contains(r'SUVYIChOZX', case=False) | CommandLine.str.contains(r'lFWCAoTmV3', case=False) | CommandLine.str.contains(r'JRVggKE5ld', case=False) | CommandLine.str.contains(r'SUVYKF', case=False) | CommandLine.str.contains(r'lFWChb', case=False) | CommandLine.str.contains(r'JRVgoW', case=False) | CommandLine.str.contains(r'aWV4KF', case=False) | CommandLine.str.contains(r'lleChb', case=False) | CommandLine.str.contains(r'pZXgoW', case=False) | CommandLine.str.contains(r'aWV4KE5ld', case=False) | CommandLine.str.contains(r'lleChOZX', case=False) | CommandLine.str.contains(r'pZXgoTmV3', case=False) | CommandLine.str.contains(r'SUVYKE5ld', case=False) | CommandLine.str.contains(r'lFWChOZX', case=False) | CommandLine.str.contains(r'JRVgoTmV3', case=False) | CommandLine.str.contains(r'SUVYKCgn', case=False) | CommandLine.str.contains(r'lFWCgoJ', case=False) | CommandLine.str.contains(r'JRVgoKC', case=False) | CommandLine.str.contains(r'aWV4KCgn', case=False) | CommandLine.str.contains(r'lleCgoJ', case=False) | CommandLine.str.contains(r'pZXgoKC', case=False) | CommandLine.str.contains(r'SQBFAFgAIAAoAFsA', case=False) | CommandLine.str.contains(r'kARQBYACAAKABbA', case=False) | CommandLine.str.contains(r'JAEUAWAAgACgAWw', case=False) | CommandLine.str.contains(r'aQBlAHgAIAAoAFsA', case=False) | CommandLine.str.contains(r'kAZQB4ACAAKABbA', case=False) | CommandLine.str.contains(r'pAGUAeAAgACgAWw', case=False) | CommandLine.str.contains(r'aQBlAHgAIAAoAE4AZQB3A', case=False) | CommandLine.str.contains(r'kAZQB4ACAAKABOAGUAdw', case=False) | CommandLine.str.contains(r'pAGUAeAAgACgATgBlAHcA', case=False) | CommandLine.str.contains(r'SQBFAFgAIAAoAE4AZQB3A', case=False) | CommandLine.str.contains(r'kARQBYACAAKABOAGUAdw', case=False) | CommandLine.str.contains(r'JAEUAWAAgACgATgBlAHcA', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - KrbRelay Execution",
        "id": "e96253b8-6b3b-4f90-9e59-3b24b99cf9b4",
        "status": "test",
        "description": "Detects the use of KrbRelay, a Kerberos relaying tool",
        "tags": [
            "attack.credential-access",
            "attack.t1558.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\KrbRelay.exe', case=False) | OriginalFileName=='KrbRelay.exe' | CommandLine.str.contains(r' -spn ', case=False) & CommandLine.str.contains(r' -clsid ', case=False) & CommandLine.str.contains(r' -rbcd ', case=False) | CommandLine.str.contains(r'shadowcred', case=False) & CommandLine.str.contains(r'clsid', case=False) & CommandLine.str.contains(r'spn', case=False) | CommandLine.str.contains(r'spn ', case=False) & CommandLine.str.contains(r'session ', case=False) & CommandLine.str.contains(r'clsid ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Control Panel DLL Load",
        "id": "d7eb979b-c2b5-4a6f-a3a7-c87ce6763819",
        "status": "test",
        "description": "Detects suspicious Rundll32 execution from control.exe as used by Equation Group and Exploit Kits",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\System32\\\\control.exe', case=False) & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & ~ CommandLine.str.contains(r'Shell32.dll', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "XBAP Execution From Uncommon Locations Via PresentationHost.EXE",
        "id": "d22e2925-cfd8-463f-96f6-89cec9d9bc5f",
        "status": "test",
        "description": "Detects the execution of \".xbap\" (Browser Applications) files via PresentationHost.EXE from an uncommon location. These files can be abused to run malicious \".xbap\" files any bypass AWL\n",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\presentationhost.exe', case=False) | OriginalFileName=='PresentationHost.exe') & CommandLine.str.contains(r'.xbap', case=False) & ~ (CommandLine.str.contains(r' C:\\\\Windows\\\\', case=False) | CommandLine.str.contains(r' C:\\\\Program Files', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - NPS Tunneling Tool Execution",
        "id": "68d37776-61db-42f5-bf54-27e87072d17e",
        "status": "test",
        "description": "Detects the use of NPS, a port forwarding and intranet penetration proxy server",
        "tags": [
            "attack.command-and-control",
            "attack.t1090"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\npc.exe', case=False) | CommandLine.str.contains(r' -server=', case=False) & CommandLine.str.contains(r' -vkey=', case=False) & CommandLine.str.contains(r' -password=', case=False) | CommandLine.str.contains(r' -config=npc', case=False) | Hashes.str.contains(r'MD5=AE8ACF66BFE3A44148964048B826D005', case=False) | Hashes.str.contains(r'SHA1=CEA49E9B9B67F3A13AD0BE1C2655293EA3C18181', case=False) | Hashes.str.contains(r'SHA256=5A456283392FFCEEEACA3D3426C306EB470304637520D72FED1CC1FEBBBD6856', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Application Terminated Via Wmic.EXE",
        "id": "49d9671b-0a0a-4c09-8280-d215bfd30662",
        "status": "test",
        "description": "Detects calls to the \"terminate\" function via wmic in order to kill an application",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\WMIC.exe', case=False) | OriginalFileName=='wmic.exe') & CommandLine.str.contains(r'call', case=False) & CommandLine.str.contains(r'terminate', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - UltraViewer Execution",
        "id": "88656cec-6c3b-487c-82c0-f73ebb805503",
        "status": "test",
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Product=='UltraViewer' | Company=='DucFabulous Co,ltd' | OriginalFileName=='UltraViewer_Desktop.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Compress Data and Lock With Password for Exfiltration With 7-ZIP",
        "id": "9fbf5927-5261-4284-a71d-f681029ea574",
        "status": "test",
        "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities",
        "tags": [
            "attack.collection",
            "attack.t1560.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description.str.contains(r'7-Zip', case=False) | Image.str.contains(r'\\\\7z.exe', case=False) | Image.str.contains(r'\\\\7zr.exe', case=False) | Image.str.contains(r'\\\\7za.exe', case=False) | OriginalFileName==['7z.exe', '7za.exe']) & CommandLine.str.contains(r' -p', case=False) & (CommandLine.str.contains(r' a ', case=False) | CommandLine.str.contains(r' u ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - DInjector PowerShell Cradle Execution",
        "id": "d78b5d61-187d-44b6-bf02-93486a80de5a",
        "status": "test",
        "description": "Detects the use of the Dinject PowerShell cradle based on the specific flags",
        "tags": [
            "attack.defense-evasion",
            "attack.t1055"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r' /am51', case=False) & CommandLine.str.contains(r' /password', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Rundll32 Activity Invoking Sys File",
        "id": "731231b9-0b5d-4219-94dd-abb6959aa7ea",
        "status": "test",
        "description": "Detects suspicious process related to rundll32 based on command line that includes a *.sys file as seen being used by UNC2452",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'rundll32.exe', case=False) & (CommandLine.str.contains(r'.sys,', case=False) | CommandLine.str.contains(r'.sys ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Execute Code with Pester.bat as Parent",
        "id": "18988e1b-9087-4f8a-82fe-0414dce49878",
        "status": "test",
        "description": "Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.defense-evasion",
            "attack.t1216"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False)) & ParentCommandLine.str.contains(r'\\\\WindowsPowerShell\\\\Modules\\\\Pester\\\\', case=False) & (ParentCommandLine.str.contains(r'{ Invoke-Pester -EnableExit ;', case=False) | ParentCommandLine.str.contains(r'{ Get-Help \"', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - AnyDesk Piped Password Via CLI",
        "id": "b1377339-fda6-477a-b455-ac0923f9ec2c",
        "status": "test",
        "description": "Detects piping the password to an anydesk instance via CMD and the '--set-password' flag.",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'/c ', case=False) & CommandLine.str.contains(r'echo ', case=False) & CommandLine.str.contains(r'.exe --set-password', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Dropping Of Password Filter DLL",
        "id": "b7966f4a-b333-455b-8370-8ca53c229762",
        "status": "test",
        "description": "Detects dropping of dll files in system32 that may be used to retrieve user credentials from LSASS",
        "tags": [
            "attack.credential-access",
            "attack.t1556.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa', case=False) & CommandLine.str.contains(r'scecli\\\\0', case=False) & CommandLine.str.contains(r'reg add', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Crassus Execution",
        "id": "2c32b543-1058-4808-91c6-5b31b8bed6c5",
        "status": "test",
        "description": "Detects Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics.",
        "tags": [
            "attack.discovery",
            "attack.t1590.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Crassus.exe', case=False) | OriginalFileName=='Crassus.exe' | Description.str.contains(r'Crassus', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Rundll32 UNC Path Execution",
        "id": "5cdb711b-5740-4fb2-ba88-f7945027afac",
        "status": "test",
        "description": "Detects rundll32 execution where the DLL is located on a remote location (share)",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1021.002",
            "attack.t1218.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE' | CommandLine.str.contains(r'rundll32', case=False)) & CommandLine.str.contains(r' \\\\\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Modify Group Policy Settings",
        "id": "ada4b0c4-758b-46ac-9033-9004613a150d",
        "status": "test",
        "description": "Detect malicious GPO modifications can be used to implement many other malicious behaviors.",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1484.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\reg.exe', case=False) | OriginalFileName=='reg.exe') & CommandLine.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\System', case=False) & (CommandLine.str.contains(r'GroupPolicyRefreshTimeDC', case=False) | CommandLine.str.contains(r'GroupPolicyRefreshTimeOffsetDC', case=False) | CommandLine.str.contains(r'GroupPolicyRefreshTime', case=False) | CommandLine.str.contains(r'GroupPolicyRefreshTimeOffset', case=False) | CommandLine.str.contains(r'EnableSmartScreen', case=False) | CommandLine.str.contains(r'ShellSmartScreenLevel', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Arbitrary File Download Via ConfigSecurityPolicy.EXE",
        "id": "1f0f6176-6482-4027-b151-00071af39d7e",
        "status": "test",
        "description": "Detects the execution of \"ConfigSecurityPolicy.EXE\", a binary part of Windows Defender used to manage settings in Windows Defender.\nUsers can configure different pilot collections for each of the co-management workloads.\nIt can be abused by attackers in order to upload or download files.\n",
        "tags": [
            "attack.exfiltration",
            "attack.t1567"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'ConfigSecurityPolicy.exe', case=False) | Image.str.contains(r'\\\\ConfigSecurityPolicy.exe', case=False) | OriginalFileName=='ConfigSecurityPolicy.exe') & (CommandLine.str.contains(r'ftp://', case=False) | CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Copy .DMP/.DUMP Files From Remote Share Via Cmd.EXE",
        "id": "044ba588-dff4-4918-9808-3f95e8160606",
        "status": "test",
        "description": "Detects usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share",
        "tags": [
            "attack.credential-access"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & CommandLine.str.contains(r'copy ', case=False) & CommandLine.str.contains(r' \\\\\\\\', case=False) & (CommandLine.str.contains(r'.dmp', case=False) | CommandLine.str.contains(r'.dump', case=False) | CommandLine.str.contains(r'.hdmp', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Bloodhound/Sharphound Execution",
        "id": "f376c8a7-a2d0-4ddc-aa0c-16c17236d962",
        "status": "test",
        "description": "Detects command line parameters used by Bloodhound and Sharphound hack tools",
        "tags": [
            "attack.discovery",
            "attack.t1087.001",
            "attack.t1087.002",
            "attack.t1482",
            "attack.t1069.001",
            "attack.t1069.002",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Product.str.contains(r'SharpHound', case=False) | Description.str.contains(r'SharpHound', case=False) | Company.str.contains(r'SpecterOps', case=False) | Company.str.contains(r'evil corp', case=False) | Image.str.contains(r'\\\\Bloodhound.exe', case=False) | Image.str.contains(r'\\\\SharpHound.exe', case=False) | CommandLine.str.contains(r' -CollectionMethod All ', case=False) | CommandLine.str.contains(r' --CollectionMethods Session ', case=False) | CommandLine.str.contains(r' --Loop --Loopduration ', case=False) | CommandLine.str.contains(r' --PortScanTimeout ', case=False) | CommandLine.str.contains(r'.exe -c All -d ', case=False) | CommandLine.str.contains(r'Invoke-Bloodhound', case=False) | CommandLine.str.contains(r'Get-BloodHoundData', case=False) | CommandLine.str.contains(r' -JsonFolder ', case=False) & CommandLine.str.contains(r' -ZipFileName ', case=False) | CommandLine.str.contains(r' DCOnly ', case=False) & CommandLine.str.contains(r' --NoSaveCache ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Scheduled Task Executing Payload from Registry",
        "id": "86588b36-c6d3-465f-9cee-8f9093e07798",
        "status": "test",
        "description": "Detects the creation of a schtasks that potentially executes a payload stored in the Windows Registry using PowerShell.",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.t1053.005",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\schtasks.exe', case=False) | OriginalFileName=='schtasks.exe') & CommandLine.str.contains(r'/Create', case=False) & (CommandLine.str.contains(r'Get-ItemProperty', case=False) | CommandLine.str.contains(r' gp ', case=False)) & (CommandLine.str.contains(r'HKCU:', case=False) | CommandLine.str.contains(r'HKLM:', case=False) | CommandLine.str.contains(r'registry::', case=False) | CommandLine.str.contains(r'HKEY_', case=False)) & ~ (CommandLine.str.contains(r'FromBase64String', case=False) | CommandLine.str.contains(r'encodedcommand', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via VMwareToolBoxCmd.EXE VM State Change Script",
        "id": "7aa4e81a-a65c-4e10-9f81-b200eb229d7d",
        "status": "test",
        "description": "Detects execution of the \"VMwareToolBoxCmd.exe\" with the \"script\" and \"set\" flag to setup a specific script to run for a specific VM state",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\VMwareToolBoxCmd.exe', case=False) | OriginalFileName=='toolbox-cmd.exe') & CommandLine.str.contains(r' script ', case=False) & CommandLine.str.contains(r' set ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Web Download",
        "id": "6e897651-f157-4d8f-aaeb-df8151488385",
        "status": "test",
        "description": "Detects suspicious ways to download files or content using PowerShell",
        "tags": [
            "attack.command-and-control",
            "attack.execution",
            "attack.t1059.001",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'.DownloadString(', case=False) | CommandLine.str.contains(r'.DownloadFile(', case=False) | CommandLine.str.contains(r'Invoke-WebRequest ', case=False) | CommandLine.str.contains(r'iwr ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Reconnaissance Activity",
        "id": "e6313acd-208c-44fc-a0ff-db85d572e90e",
        "status": "test",
        "description": "Detects a set of suspicious network related commands often used in recon stages",
        "tags": [
            "attack.discovery",
            "attack.t1087",
            "attack.t1082",
            "car.2016-03-001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'nslookup', case=False) & CommandLine.str.contains(r'_ldap._tcp.dc._msdcs.', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Outlook EnableUnsafeClientMailRules Setting Enabled",
        "id": "55f0a3a1-846e-40eb-8273-677371b8d912",
        "status": "test",
        "description": "Detects an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros",
        "tags": [
            "attack.execution",
            "attack.t1059",
            "attack.t1202"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\Outlook\\\\Security\\\\EnableUnsafeClientMailRules', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed Gpg.EXE Execution",
        "id": "ec0722a3-eb5c-4a56-8ab2-bf6f20708592",
        "status": "test",
        "description": "Detects the execution of a renamed \"gpg.exe\". Often used by ransomware and loaders to decrypt/encrypt data.",
        "tags": [
            "attack.impact",
            "attack.t1486"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & OriginalFileName=='gpg.exe' & ~ (Image.str.contains(r'\\\\gpg.exe', case=False) | Image.str.contains(r'\\\\gpg2.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious MsiExec Embedding Parent",
        "id": "4a2a2c3e-209f-4d01-b513-4155a540b469",
        "status": "test",
        "description": "Adversaries may abuse msiexec.exe to proxy the execution of malicious payloads",
        "tags": [
            "attack.t1218.007",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False)) & ParentCommandLine.str.contains(r'MsiExec.exe', case=False) & ParentCommandLine.str.contains(r'-Embedding ', case=False) & ~ (Image.str.contains(r':\\\\Windows\\\\System32\\\\cmd.exe', case=False) & CommandLine.str.contains(r'C:\\\\Program Files\\\\SplunkUniversalForwarder\\\\bin\\\\', case=False) | CommandLine.str.contains(r'\\\\DismFoDInstall.cmd', case=False) | ParentCommandLine.str.contains(r'\\\\MsiExec.exe -Embedding ', case=False) & ParentCommandLine.str.contains(r'Global\\\\MSI0000', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SharpView Execution",
        "id": "b2317cfa-4a47-4ead-b3ff-297438c0bc2d",
        "status": "test",
        "description": "Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems",
        "tags": [
            "attack.discovery",
            "attack.t1049",
            "attack.t1069.002",
            "attack.t1482",
            "attack.t1135",
            "attack.t1033"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='SharpView.exe' | Image.str.contains(r'\\\\SharpView.exe', case=False) | CommandLine.str.contains(r'Add-RemoteConnection', case=False) | CommandLine.str.contains(r'Convert-ADName', case=False) | CommandLine.str.contains(r'ConvertFrom-SID', case=False) | CommandLine.str.contains(r'ConvertFrom-UACValue', case=False) | CommandLine.str.contains(r'Convert-SidToName', case=False) | CommandLine.str.contains(r'Export-PowerViewCSV', case=False) | CommandLine.str.contains(r'Find-DomainObjectPropertyOutlier', case=False) | CommandLine.str.contains(r'Find-DomainProcess', case=False) | CommandLine.str.contains(r'Find-DomainShare', case=False) | CommandLine.str.contains(r'Find-DomainUserEvent', case=False) | CommandLine.str.contains(r'Find-DomainUserLocation', case=False) | CommandLine.str.contains(r'Find-ForeignGroup', case=False) | CommandLine.str.contains(r'Find-ForeignUser', case=False) | CommandLine.str.contains(r'Find-GPOComputerAdmin', case=False) | CommandLine.str.contains(r'Find-GPOLocation', case=False) | CommandLine.str.contains(r'Find-Interesting', case=False) | CommandLine.str.contains(r'Find-LocalAdminAccess', case=False) | CommandLine.str.contains(r'Find-ManagedSecurityGroups', case=False) | CommandLine.str.contains(r'Get-CachedRDPConnection', case=False) | CommandLine.str.contains(r'Get-DFSshare', case=False) | CommandLine.str.contains(r'Get-DomainComputer', case=False) | CommandLine.str.contains(r'Get-DomainController', case=False) | CommandLine.str.contains(r'Get-DomainDFSShare', case=False) | CommandLine.str.contains(r'Get-DomainDNSRecord', case=False) | CommandLine.str.contains(r'Get-DomainFileServer', case=False) | CommandLine.str.contains(r'Get-DomainForeign', case=False) | CommandLine.str.contains(r'Get-DomainGPO', case=False) | CommandLine.str.contains(r'Get-DomainGroup', case=False) | CommandLine.str.contains(r'Get-DomainGUIDMap', case=False) | CommandLine.str.contains(r'Get-DomainManagedSecurityGroup', case=False) | CommandLine.str.contains(r'Get-DomainObject', case=False) | CommandLine.str.contains(r'Get-DomainOU', case=False) | CommandLine.str.contains(r'Get-DomainPolicy', case=False) | CommandLine.str.contains(r'Get-DomainSID', case=False) | CommandLine.str.contains(r'Get-DomainSite', case=False) | CommandLine.str.contains(r'Get-DomainSPNTicket', case=False) | CommandLine.str.contains(r'Get-DomainSubnet', case=False) | CommandLine.str.contains(r'Get-DomainTrust', case=False) | CommandLine.str.contains(r'Get-DomainUserEvent', case=False) | CommandLine.str.contains(r'Get-ForestDomain', case=False) | CommandLine.str.contains(r'Get-ForestGlobalCatalog', case=False) | CommandLine.str.contains(r'Get-ForestTrust', case=False) | CommandLine.str.contains(r'Get-GptTmpl', case=False) | CommandLine.str.contains(r'Get-GroupsXML', case=False) | CommandLine.str.contains(r'Get-LastLoggedOn', case=False) | CommandLine.str.contains(r'Get-LoggedOnLocal', case=False) | CommandLine.str.contains(r'Get-NetComputer', case=False) | CommandLine.str.contains(r'Get-NetDomain', case=False) | CommandLine.str.contains(r'Get-NetFileServer', case=False) | CommandLine.str.contains(r'Get-NetForest', case=False) | CommandLine.str.contains(r'Get-NetGPO', case=False) | CommandLine.str.contains(r'Get-NetGroupMember', case=False) | CommandLine.str.contains(r'Get-NetLocalGroup', case=False) | CommandLine.str.contains(r'Get-NetLoggedon', case=False) | CommandLine.str.contains(r'Get-NetOU', case=False) | CommandLine.str.contains(r'Get-NetProcess', case=False) | CommandLine.str.contains(r'Get-NetRDPSession', case=False) | CommandLine.str.contains(r'Get-NetSession', case=False) | CommandLine.str.contains(r'Get-NetShare', case=False) | CommandLine.str.contains(r'Get-NetSite', case=False) | CommandLine.str.contains(r'Get-NetSubnet', case=False) | CommandLine.str.contains(r'Get-NetUser', case=False) | CommandLine.str.contains(r'Get-PathAcl', case=False) | CommandLine.str.contains(r'Get-PrincipalContext', case=False) | CommandLine.str.contains(r'Get-RegistryMountedDrive', case=False) | CommandLine.str.contains(r'Get-RegLoggedOn', case=False) | CommandLine.str.contains(r'Get-WMIRegCachedRDPConnection', case=False) | CommandLine.str.contains(r'Get-WMIRegLastLoggedOn', case=False) | CommandLine.str.contains(r'Get-WMIRegMountedDrive', case=False) | CommandLine.str.contains(r'Get-WMIRegProxy', case=False) | CommandLine.str.contains(r'Invoke-ACLScanner', case=False) | CommandLine.str.contains(r'Invoke-CheckLocalAdminAccess', case=False) | CommandLine.str.contains(r'Invoke-Kerberoast', case=False) | CommandLine.str.contains(r'Invoke-MapDomainTrust', case=False) | CommandLine.str.contains(r'Invoke-RevertToSelf', case=False) | CommandLine.str.contains(r'Invoke-Sharefinder', case=False) | CommandLine.str.contains(r'Invoke-UserImpersonation', case=False) | CommandLine.str.contains(r'Remove-DomainObjectAcl', case=False) | CommandLine.str.contains(r'Remove-RemoteConnection', case=False) | CommandLine.str.contains(r'Request-SPNTicket', case=False) | CommandLine.str.contains(r'Set-DomainObject', case=False) | CommandLine.str.contains(r'Test-AdminAccess', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Privilege Escalation Using Symlink Between Osk and Cmd",
        "id": "e9b61244-893f-427c-b287-3e708f321c6b",
        "status": "test",
        "description": "Detects the creation of a symbolic link between \"cmd.exe\" and the accessibility on-screen keyboard binary (osk.exe) using \"mklink\". This technique provides an elevated command prompt to the user from the login screen without the need to log in.",
        "tags": [
            "attack.privilege-escalation",
            "attack.persistence",
            "attack.t1546.008"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & CommandLine.str.contains(r'mklink', case=False) & CommandLine.str.contains(r'\\\\osk.exe', case=False) & CommandLine.str.contains(r'\\\\cmd.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DLL Execution via Rasautou.exe",
        "id": "cd3d1298-eb3b-476c-ac67-12847de55813",
        "status": "test",
        "description": "Detects using Rasautou.exe for loading arbitrary .DLL specified in -d option and executes the export specified in -p.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rasautou.exe', case=False) | OriginalFileName=='rasdlui.exe') & CommandLine.str.contains(r' -d ', case=False) & CommandLine.str.contains(r' -p ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SharpDPAPI Execution",
        "id": "c7d33b50-f690-4b51-8cfb-0fb912a31e57",
        "status": "experimental",
        "description": "Detects the execution of the SharpDPAPI tool based on CommandLine flags and PE metadata.\nSharpDPAPI is a C# port of some DPAPI functionality from the Mimikatz project.\n",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1134.001",
            "attack.t1134.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SharpDPAPI.exe', case=False) | OriginalFileName=='SharpDPAPI.exe' | (CommandLine.str.contains(r' backupkey ', case=False) | CommandLine.str.contains(r' blob ', case=False) | CommandLine.str.contains(r' certificates ', case=False) | CommandLine.str.contains(r' credentials ', case=False) | CommandLine.str.contains(r' keepass ', case=False) | CommandLine.str.contains(r' masterkeys ', case=False) | CommandLine.str.contains(r' rdg ', case=False) | CommandLine.str.contains(r' vaults ', case=False)) & (CommandLine.str.contains(r' {', case=False) & CommandLine.str.contains(r'}:', case=False) | CommandLine.str.contains(r' /file:', case=False) | CommandLine.str.contains(r' /machine', case=False) | CommandLine.str.contains(r' /mkfile:', case=False) | CommandLine.str.contains(r' /password:', case=False) | CommandLine.str.contains(r' /pvk:', case=False) | CommandLine.str.contains(r' /server:', case=False) | CommandLine.str.contains(r' /target:', case=False) | CommandLine.str.contains(r' /unprotect', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Process Execution From A Potentially Suspicious Folder",
        "id": "3dfd06d2-eaf4-4532-9555-68aca59f57c4",
        "status": "test",
        "description": "Detects a potentially suspicious execution from an uncommon folder.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r':\\\\Perflogs\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\All Users\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\Default\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\NetworkService\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\addins\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\debug\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Fonts\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Help\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\IME\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Media\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\repair\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\security\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\Tasks\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False) | Image.str.contains(r'$Recycle.bin', case=False) | Image.str.contains(r'\\\\config\\\\systemprofile\\\\', case=False) | Image.str.contains(r'\\\\Intel\\\\Logs\\\\', case=False) | Image.str.contains(r'\\\\RSA\\\\MachineKeys\\\\', case=False)) & ~ (Image.str.contains(r'C:\\\\Users\\\\Public\\\\IBM\\\\ClientSolutions\\\\Start_Programs\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\config\\\\systemprofile\\\\Citrix\\\\UpdaterBinaries\\\\', case=False) & Image.str.contains(r'\\\\CitrixReceiverUpdater.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Process Patterns NTDS.DIT Exfil",
        "id": "8bc64091-6875-4881-aaf9-7bd25b5dda08",
        "status": "test",
        "description": "Detects suspicious process patterns used in NTDS.DIT exfiltration",
        "tags": [
            "attack.credential-access",
            "attack.t1003.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\NTDSDump.exe', case=False) | Image.str.contains(r'\\\\NTDSDumpEx.exe', case=False) | CommandLine.str.contains(r'ntds.dit', case=False) & CommandLine.str.contains(r'system.hiv', case=False) | CommandLine.str.contains(r'NTDSgrab.ps1', case=False) | CommandLine.str.contains(r'ac i ntds', case=False) & CommandLine.str.contains(r'create full', case=False) | CommandLine.str.contains(r'/c copy ', case=False) & CommandLine.str.contains(r'\\\\windows\\\\ntds\\\\ntds.dit', case=False) | CommandLine.str.contains(r'activate instance ntds', case=False) & CommandLine.str.contains(r'create full', case=False) | CommandLine.str.contains(r'powershell', case=False) & CommandLine.str.contains(r'ntds.dit', case=False) | CommandLine.str.contains(r'ntds.dit', case=False) & (ParentImage.str.contains(r'\\\\apache', case=False) | ParentImage.str.contains(r'\\\\tomcat', case=False) | ParentImage.str.contains(r'\\\\AppData\\\\', case=False) | ParentImage.str.contains(r'\\\\Temp\\\\', case=False) | ParentImage.str.contains(r'\\\\Public\\\\', case=False) | ParentImage.str.contains(r'\\\\PerfLogs\\\\', case=False) | Image.str.contains(r'\\\\apache', case=False) | Image.str.contains(r'\\\\tomcat', case=False) | Image.str.contains(r'\\\\AppData\\\\', case=False) | Image.str.contains(r'\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\PerfLogs\\\\', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "AspNetCompiler Execution",
        "id": "a01b8329-5953-4f73-ae2d-aa01e1f35f00",
        "status": "test",
        "description": "Detects execution of \"aspnet_compiler.exe\" which can be abused to compile and execute C# code.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'C:\\\\Windows\\\\Microsoft.NET\\\\Framework\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\', case=False)) & Image.str.contains(r'\\\\aspnet_compiler.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Netcat Suspicious Execution",
        "id": "e31033fc-33f0-4020-9a16-faf9b31cbf08",
        "status": "test",
        "description": "Detects execution of Netcat. Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network",
        "tags": [
            "attack.command-and-control",
            "attack.t1095"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\nc.exe', case=False) | Image.str.contains(r'\\\\ncat.exe', case=False) | Image.str.contains(r'\\\\netcat.exe', case=False) | CommandLine.str.contains(r' -lvp ', case=False) | CommandLine.str.contains(r' -lvnp', case=False) | CommandLine.str.contains(r' -l -v -p ', case=False) | CommandLine.str.contains(r' -lv -p ', case=False) | CommandLine.str.contains(r' -l --proxy-type http ', case=False) | CommandLine.str.contains(r' -vnl --exec ', case=False) | CommandLine.str.contains(r' -vnl -e ', case=False) | CommandLine.str.contains(r' --lua-exec ', case=False) | CommandLine.str.contains(r' --sh-exec ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed CreateDump Utility Execution",
        "id": "1a1ed54a-2ba4-4221-94d5-01dee560d71e",
        "status": "test",
        "description": "Detects uses of a renamed legitimate createdump.exe LOLOBIN utility to dump process memory",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='FX_VER_INTERNALNAME_STR' | CommandLine.str.contains(r' -u ', case=False) & CommandLine.str.contains(r' -f ', case=False) & CommandLine.str.contains(r'.dmp', case=False) | CommandLine.str.contains(r' --full ', case=False) & CommandLine.str.contains(r' --name ', case=False) & CommandLine.str.contains(r'.dmp', case=False)) & ~ Image.str.contains(r'\\\\createdump.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Arbitrary MSI Download Via Devinit.EXE",
        "id": "90d50722-0483-4065-8e35-57efaadd354d",
        "status": "test",
        "description": "Detects a certain command line flag combination used by \"devinit.exe\", which can be abused as a LOLBIN to download arbitrary MSI packages on a Windows system",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r' -t msi-install ', case=False) & CommandLine.str.contains(r' -i http', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed ZOHO Dctask64 Execution",
        "id": "340a090b-c4e9-412e-bb36-b4b16fe96f9b",
        "status": "test",
        "description": "Detects a renamed \"dctask64.exe\" execution, a signed binary by ZOHO Corporation part of ManageEngine Endpoint Central.\nThis binary can be abused for DLL injection, arbitrary command and process execution.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.t1055.001",
            "attack.t1202",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Hashes.str.contains(r'IMPHASH=6834B1B94E49701D77CCB3C0895E1AFD', case=False) | Hashes.str.contains(r'IMPHASH=1BB6F93B129F398C7C4A76BB97450BBA', case=False) | Hashes.str.contains(r'IMPHASH=FAA2AC19875FADE461C8D89DCF2710A3', case=False) | Hashes.str.contains(r'IMPHASH=F1039CED4B91572AB7847D26032E6BBF', case=False)) & ~ Image.str.contains(r'\\\\dctask64.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Python Function Execution Security Warning Disabled In Excel",
        "id": "023c654f-8f16-44d9-bb2b-00ff36a62af9",
        "status": "test",
        "description": "Detects changes to the registry value \"PythonFunctionWarnings\" that would prevent any warnings or alerts from showing when Python functions are about to be executed.\nThreat actors could run malicious code through the new Microsoft Excel feature that allows Python to run within the spreadsheet.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\Microsoft\\\\Office\\\\', case=False) & CommandLine.str.contains(r'\\\\Excel\\\\Security', case=False) & CommandLine.str.contains(r'PythonFunctionWarnings', case=False) & CommandLine.str.contains(r' 0', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Service Binary Directory",
        "id": "883faa95-175a-4e22-8181-e5761aeb373c",
        "status": "test",
        "description": "Detects a service binary running in a suspicious directory",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\$Recycle.bin', case=False) | Image.str.contains(r'\\\\Users\\\\All Users\\\\', case=False) | Image.str.contains(r'\\\\Users\\\\Default\\\\', case=False) | Image.str.contains(r'\\\\Users\\\\Contacts\\\\', case=False) | Image.str.contains(r'\\\\Users\\\\Searches\\\\', case=False) | Image.str.contains(r'C:\\\\Perflogs\\\\', case=False) | Image.str.contains(r'\\\\config\\\\systemprofile\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\Fonts\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\IME\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\addins\\\\', case=False)) & (ParentImage.str.contains(r'\\\\services.exe', case=False) | ParentImage.str.contains(r'\\\\svchost.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Security Service Disabled Via Reg.EXE",
        "id": "5e95028c-5229-4214-afae-d653d573d0ec",
        "status": "test",
        "description": "Detects execution of \"reg.exe\" to disable security services such as Windows Defender.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'reg', case=False) & CommandLine.str.contains(r'add', case=False) & CommandLine.str.contains(r'd 4', case=False) & CommandLine.str.contains(r'v Start', case=False) & (CommandLine.str.contains(r'\\\\AppIDSvc', case=False) | CommandLine.str.contains(r'\\\\MsMpSvc', case=False) | CommandLine.str.contains(r'\\\\NisSrv', case=False) | CommandLine.str.contains(r'\\\\SecurityHealthService', case=False) | CommandLine.str.contains(r'\\\\Sense', case=False) | CommandLine.str.contains(r'\\\\UsoSvc', case=False) | CommandLine.str.contains(r'\\\\WdBoot', case=False) | CommandLine.str.contains(r'\\\\WdFilter', case=False) | CommandLine.str.contains(r'\\\\WdNisDrv', case=False) | CommandLine.str.contains(r'\\\\WdNisSvc', case=False) | CommandLine.str.contains(r'\\\\WinDefend', case=False) | CommandLine.str.contains(r'\\\\wscsvc', case=False) | CommandLine.str.contains(r'\\\\wuauserv', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Rar Usage with Password and Compression Level",
        "id": "faa48cae-6b25-4f00-a094-08947fef582f",
        "status": "test",
        "description": "Detects the use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level. This is pretty indicative of malicious actions.",
        "tags": [
            "attack.collection",
            "attack.t1560.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r' -hp', case=False) & (CommandLine.str.contains(r' -m', case=False) | CommandLine.str.contains(r' a ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Processes Spawned by WinRM",
        "id": "5cc2cda8-f261-4d88-a2de-e9e193c86716",
        "status": "test",
        "description": "Detects suspicious processes including shells spawnd from WinRM host process",
        "tags": [
            "attack.t1190",
            "attack.initial-access",
            "attack.persistence",
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\wsmprovhost.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\sh.exe', case=False) | Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wsl.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\whoami.exe', case=False) | Image.str.contains(r'\\\\bitsadmin.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Non-privileged Usage of Reg or Powershell",
        "id": "8f02c935-effe-45b3-8fc9-ef8696a9e41d",
        "status": "test",
        "description": "Search for usage of reg or Powershell by non-privileged users to modify service configuration in registry",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'reg ', case=False) & CommandLine.str.contains(r'add', case=False) | CommandLine.str.contains(r'powershell', case=False) | CommandLine.str.contains(r'set-itemproperty', case=False) | CommandLine.str.contains(r' sp ', case=False) | CommandLine.str.contains(r'new-itemproperty', case=False)) & (IntegrityLevel==['Medium', 'S-1-16-8192']) & CommandLine.str.contains(r'ControlSet', case=False) & CommandLine.str.contains(r'Services', case=False) & (CommandLine.str.contains(r'ImagePath', case=False) | CommandLine.str.contains(r'FailureCommand', case=False) | CommandLine.str.contains(r'ServiceDLL', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious MSHTA Child Process",
        "id": "03cc0c25-389f-4bf8-b48d-11878079f1ca",
        "status": "test",
        "description": "Detects a suspicious process spawning from an \"mshta.exe\" process, which could be indicative of a malicious HTA script execution",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.005",
            "car.2013-02-003",
            "car.2013-03-001",
            "car.2014-04-003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\mshta.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\sh.exe', case=False) | Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\reg.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\bitsadmin.exe', case=False) | OriginalFileName==['Cmd.Exe', 'PowerShell.EXE', 'pwsh.dll', 'wscript.exe', 'cscript.exe', 'Bash.exe', 'reg.exe', 'REGSVR32.EXE', 'bitsadmin.exe'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Privilege Escalation To LOCAL SYSTEM",
        "id": "207b0396-3689-42d9-8399-4222658efc99",
        "status": "test",
        "description": "Detects unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
        "tags": [
            "attack.resource-development",
            "attack.t1587.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' -s cmd', case=False) | CommandLine.str.contains(r' /s cmd', case=False) | CommandLine.str.contains(r' \u2013s cmd', case=False) | CommandLine.str.contains(r' \u2014s cmd', case=False) | CommandLine.str.contains(r' \u2015s cmd', case=False) | CommandLine.str.contains(r' -s -i cmd', case=False) | CommandLine.str.contains(r' -s /i cmd', case=False) | CommandLine.str.contains(r' -s \u2013i cmd', case=False) | CommandLine.str.contains(r' -s \u2014i cmd', case=False) | CommandLine.str.contains(r' -s \u2015i cmd', case=False) | CommandLine.str.contains(r' /s -i cmd', case=False) | CommandLine.str.contains(r' /s /i cmd', case=False) | CommandLine.str.contains(r' /s \u2013i cmd', case=False) | CommandLine.str.contains(r' /s \u2014i cmd', case=False) | CommandLine.str.contains(r' /s \u2015i cmd', case=False) | CommandLine.str.contains(r' \u2013s -i cmd', case=False) | CommandLine.str.contains(r' \u2013s /i cmd', case=False) | CommandLine.str.contains(r' \u2013s \u2013i cmd', case=False) | CommandLine.str.contains(r' \u2013s \u2014i cmd', case=False) | CommandLine.str.contains(r' \u2013s \u2015i cmd', case=False) | CommandLine.str.contains(r' \u2014s -i cmd', case=False) | CommandLine.str.contains(r' \u2014s /i cmd', case=False) | CommandLine.str.contains(r' \u2014s \u2013i cmd', case=False) | CommandLine.str.contains(r' \u2014s \u2014i cmd', case=False) | CommandLine.str.contains(r' \u2014s \u2015i cmd', case=False) | CommandLine.str.contains(r' \u2015s -i cmd', case=False) | CommandLine.str.contains(r' \u2015s /i cmd', case=False) | CommandLine.str.contains(r' \u2015s \u2013i cmd', case=False) | CommandLine.str.contains(r' \u2015s \u2014i cmd', case=False) | CommandLine.str.contains(r' \u2015s \u2015i cmd', case=False) | CommandLine.str.contains(r' -i -s cmd', case=False) | CommandLine.str.contains(r' -i /s cmd', case=False) | CommandLine.str.contains(r' -i \u2013s cmd', case=False) | CommandLine.str.contains(r' -i \u2014s cmd', case=False) | CommandLine.str.contains(r' -i \u2015s cmd', case=False) | CommandLine.str.contains(r' /i -s cmd', case=False) | CommandLine.str.contains(r' /i /s cmd', case=False) | CommandLine.str.contains(r' /i \u2013s cmd', case=False) | CommandLine.str.contains(r' /i \u2014s cmd', case=False) | CommandLine.str.contains(r' /i \u2015s cmd', case=False) | CommandLine.str.contains(r' \u2013i -s cmd', case=False) | CommandLine.str.contains(r' \u2013i /s cmd', case=False) | CommandLine.str.contains(r' \u2013i \u2013s cmd', case=False) | CommandLine.str.contains(r' \u2013i \u2014s cmd', case=False) | CommandLine.str.contains(r' \u2013i \u2015s cmd', case=False) | CommandLine.str.contains(r' \u2014i -s cmd', case=False) | CommandLine.str.contains(r' \u2014i /s cmd', case=False) | CommandLine.str.contains(r' \u2014i \u2013s cmd', case=False) | CommandLine.str.contains(r' \u2014i \u2014s cmd', case=False) | CommandLine.str.contains(r' \u2014i \u2015s cmd', case=False) | CommandLine.str.contains(r' \u2015i -s cmd', case=False) | CommandLine.str.contains(r' \u2015i /s cmd', case=False) | CommandLine.str.contains(r' \u2015i \u2013s cmd', case=False) | CommandLine.str.contains(r' \u2015i \u2014s cmd', case=False) | CommandLine.str.contains(r' \u2015i \u2015s cmd', case=False) | CommandLine.str.contains(r' -s pwsh', case=False) | CommandLine.str.contains(r' /s pwsh', case=False) | CommandLine.str.contains(r' \u2013s pwsh', case=False) | CommandLine.str.contains(r' \u2014s pwsh', case=False) | CommandLine.str.contains(r' \u2015s pwsh', case=False) | CommandLine.str.contains(r' -s -i pwsh', case=False) | CommandLine.str.contains(r' -s /i pwsh', case=False) | CommandLine.str.contains(r' -s \u2013i pwsh', case=False) | CommandLine.str.contains(r' -s \u2014i pwsh', case=False) | CommandLine.str.contains(r' -s \u2015i pwsh', case=False) | CommandLine.str.contains(r' /s -i pwsh', case=False) | CommandLine.str.contains(r' /s /i pwsh', case=False) | CommandLine.str.contains(r' /s \u2013i pwsh', case=False) | CommandLine.str.contains(r' /s \u2014i pwsh', case=False) | CommandLine.str.contains(r' /s \u2015i pwsh', case=False) | CommandLine.str.contains(r' \u2013s -i pwsh', case=False) | CommandLine.str.contains(r' \u2013s /i pwsh', case=False) | CommandLine.str.contains(r' \u2013s \u2013i pwsh', case=False) | CommandLine.str.contains(r' \u2013s \u2014i pwsh', case=False) | CommandLine.str.contains(r' \u2013s \u2015i pwsh', case=False) | CommandLine.str.contains(r' \u2014s -i pwsh', case=False) | CommandLine.str.contains(r' \u2014s /i pwsh', case=False) | CommandLine.str.contains(r' \u2014s \u2013i pwsh', case=False) | CommandLine.str.contains(r' \u2014s \u2014i pwsh', case=False) | CommandLine.str.contains(r' \u2014s \u2015i pwsh', case=False) | CommandLine.str.contains(r' \u2015s -i pwsh', case=False) | CommandLine.str.contains(r' \u2015s /i pwsh', case=False) | CommandLine.str.contains(r' \u2015s \u2013i pwsh', case=False) | CommandLine.str.contains(r' \u2015s \u2014i pwsh', case=False) | CommandLine.str.contains(r' \u2015s \u2015i pwsh', case=False) | CommandLine.str.contains(r' -i -s pwsh', case=False) | CommandLine.str.contains(r' -i /s pwsh', case=False) | CommandLine.str.contains(r' -i \u2013s pwsh', case=False) | CommandLine.str.contains(r' -i \u2014s pwsh', case=False) | CommandLine.str.contains(r' -i \u2015s pwsh', case=False) | CommandLine.str.contains(r' /i -s pwsh', case=False) | CommandLine.str.contains(r' /i /s pwsh', case=False) | CommandLine.str.contains(r' /i \u2013s pwsh', case=False) | CommandLine.str.contains(r' /i \u2014s pwsh', case=False) | CommandLine.str.contains(r' /i \u2015s pwsh', case=False) | CommandLine.str.contains(r' \u2013i -s pwsh', case=False) | CommandLine.str.contains(r' \u2013i /s pwsh', case=False) | CommandLine.str.contains(r' \u2013i \u2013s pwsh', case=False) | CommandLine.str.contains(r' \u2013i \u2014s pwsh', case=False) | CommandLine.str.contains(r' \u2013i \u2015s pwsh', case=False) | CommandLine.str.contains(r' \u2014i -s pwsh', case=False) | CommandLine.str.contains(r' \u2014i /s pwsh', case=False) | CommandLine.str.contains(r' \u2014i \u2013s pwsh', case=False) | CommandLine.str.contains(r' \u2014i \u2014s pwsh', case=False) | CommandLine.str.contains(r' \u2014i \u2015s pwsh', case=False) | CommandLine.str.contains(r' \u2015i -s pwsh', case=False) | CommandLine.str.contains(r' \u2015i /s pwsh', case=False) | CommandLine.str.contains(r' \u2015i \u2013s pwsh', case=False) | CommandLine.str.contains(r' \u2015i \u2014s pwsh', case=False) | CommandLine.str.contains(r' \u2015i \u2015s pwsh', case=False) | CommandLine.str.contains(r' -s powershell', case=False) | CommandLine.str.contains(r' /s powershell', case=False) | CommandLine.str.contains(r' \u2013s powershell', case=False) | CommandLine.str.contains(r' \u2014s powershell', case=False) | CommandLine.str.contains(r' \u2015s powershell', case=False) | CommandLine.str.contains(r' -s -i powershell', case=False) | CommandLine.str.contains(r' -s /i powershell', case=False) | CommandLine.str.contains(r' -s \u2013i powershell', case=False) | CommandLine.str.contains(r' -s \u2014i powershell', case=False) | CommandLine.str.contains(r' -s \u2015i powershell', case=False) | CommandLine.str.contains(r' /s -i powershell', case=False) | CommandLine.str.contains(r' /s /i powershell', case=False) | CommandLine.str.contains(r' /s \u2013i powershell', case=False) | CommandLine.str.contains(r' /s \u2014i powershell', case=False) | CommandLine.str.contains(r' /s \u2015i powershell', case=False) | CommandLine.str.contains(r' \u2013s -i powershell', case=False) | CommandLine.str.contains(r' \u2013s /i powershell', case=False) | CommandLine.str.contains(r' \u2013s \u2013i powershell', case=False) | CommandLine.str.contains(r' \u2013s \u2014i powershell', case=False) | CommandLine.str.contains(r' \u2013s \u2015i powershell', case=False) | CommandLine.str.contains(r' \u2014s -i powershell', case=False) | CommandLine.str.contains(r' \u2014s /i powershell', case=False) | CommandLine.str.contains(r' \u2014s \u2013i powershell', case=False) | CommandLine.str.contains(r' \u2014s \u2014i powershell', case=False) | CommandLine.str.contains(r' \u2014s \u2015i powershell', case=False) | CommandLine.str.contains(r' \u2015s -i powershell', case=False) | CommandLine.str.contains(r' \u2015s /i powershell', case=False) | CommandLine.str.contains(r' \u2015s \u2013i powershell', case=False) | CommandLine.str.contains(r' \u2015s \u2014i powershell', case=False) | CommandLine.str.contains(r' \u2015s \u2015i powershell', case=False) | CommandLine.str.contains(r' -i -s powershell', case=False) | CommandLine.str.contains(r' -i /s powershell', case=False) | CommandLine.str.contains(r' -i \u2013s powershell', case=False) | CommandLine.str.contains(r' -i \u2014s powershell', case=False) | CommandLine.str.contains(r' -i \u2015s powershell', case=False) | CommandLine.str.contains(r' /i -s powershell', case=False) | CommandLine.str.contains(r' /i /s powershell', case=False) | CommandLine.str.contains(r' /i \u2013s powershell', case=False) | CommandLine.str.contains(r' /i \u2014s powershell', case=False) | CommandLine.str.contains(r' /i \u2015s powershell', case=False) | CommandLine.str.contains(r' \u2013i -s powershell', case=False) | CommandLine.str.contains(r' \u2013i /s powershell', case=False) | CommandLine.str.contains(r' \u2013i \u2013s powershell', case=False) | CommandLine.str.contains(r' \u2013i \u2014s powershell', case=False) | CommandLine.str.contains(r' \u2013i \u2015s powershell', case=False) | CommandLine.str.contains(r' \u2014i -s powershell', case=False) | CommandLine.str.contains(r' \u2014i /s powershell', case=False) | CommandLine.str.contains(r' \u2014i \u2013s powershell', case=False) | CommandLine.str.contains(r' \u2014i \u2014s powershell', case=False) | CommandLine.str.contains(r' \u2014i \u2015s powershell', case=False) | CommandLine.str.contains(r' \u2015i -s powershell', case=False) | CommandLine.str.contains(r' \u2015i /s powershell', case=False) | CommandLine.str.contains(r' \u2015i \u2013s powershell', case=False) | CommandLine.str.contains(r' \u2015i \u2014s powershell', case=False) | CommandLine.str.contains(r' \u2015i \u2015s powershell', case=False)) & ~ (CommandLine.str.contains(r'paexec', case=False) | CommandLine.str.contains(r'PsExec', case=False) | CommandLine.str.contains(r'accepteula', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Injection Via AccCheckConsole",
        "id": "0f6da907-5854-4be6-859a-e9958747b0aa",
        "status": "test",
        "description": "Detects the execution \"AccCheckConsole\" a command-line tool for verifying the accessibility implementation of an application's UI.\nOne of the tests that this checker can run are called \"verification routine\", which tests for things like Consistency, Navigation, etc.\nThe tool allows a user to provide a DLL that can contain a custom \"verification routine\". An attacker can build such DLLs and pass it via the CLI, which would then be loaded in the context of the \"AccCheckConsole\" utility.\n",
        "tags": [
            "attack.execution",
            "detection.threat-hunting"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\AccCheckConsole.exe', case=False) | OriginalFileName=='AccCheckConsole.exe') & (CommandLine.str.contains(r' -hwnd', case=False) | CommandLine.str.contains(r' -process ', case=False) | CommandLine.str.contains(r' -window ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Regsvr32 Execution From Remote Share",
        "id": "88a87a10-384b-4ad7-8871-2f9bf9259ce5",
        "status": "test",
        "description": "Detects REGSVR32.exe to execute DLL hosted on remote shares",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.010"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\regsvr32.exe', case=False) | OriginalFileName=='\\\\REGSVR32.EXE') & CommandLine.str.contains(r' \\\\\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Regsvr32 DLL Execution With Uncommon Extension",
        "id": "50919691-7302-437f-8e10-1fe088afa145",
        "status": "test",
        "description": "Detects a \"regsvr32\" execution where the DLL doesn't contain a common file extension.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574",
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\regsvr32.exe', case=False) | OriginalFileName=='REGSVR32.EXE') & ~ (CommandLine.str.contains(r'.ax', case=False) | CommandLine.str.contains(r'.cpl', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.ocx', case=False) | CommandLine is null | CommandLine=='') & ~ (CommandLine.str.contains(r'.ppl', case=False) | CommandLine.str.contains(r'.bav', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Mavinject Inject DLL Into Running Process",
        "id": "4f73421b-5a0b-4bbf-a892-5a7fb99bea66",
        "status": "test",
        "description": "Detects process injection using the signed Windows tool \"Mavinject\" via the \"INJECTRUNNING\" flag",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055.001",
            "attack.t1218.013"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r' /INJECTRUNNING ', case=False) & ~ ParentImage=='C:\\\\Windows\\\\System32\\\\AppVClient.exe'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Download Via InstallUtil.EXE",
        "id": "75edd216-1939-4c73-8d61-7f3a0d85b5cc",
        "status": "test",
        "description": "Detects use of .NET InstallUtil.exe in order to download arbitrary files. The files will be written to \"%LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE\\\"\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\InstallUtil.exe', case=False) | OriginalFileName=='InstallUtil.exe') & (CommandLine.str.contains(r'ftp://', case=False) | CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Shell/Scripting Processes Spawning Suspicious Programs",
        "id": "3a6586ad-127a-4d3b-a677-1e6eacdf8fde",
        "status": "test",
        "description": "Detects suspicious child processes of a Windows shell and scripting processes such as wscript, rundll32, powershell, mshta...etc.",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1059.005",
            "attack.t1059.001",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\mshta.exe', case=False) | ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False) | ParentImage.str.contains(r'\\\\rundll32.exe', case=False) | ParentImage.str.contains(r'\\\\cscript.exe', case=False) | ParentImage.str.contains(r'\\\\wscript.exe', case=False) | ParentImage.str.contains(r'\\\\wmiprvse.exe', case=False) | ParentImage.str.contains(r'\\\\regsvr32.exe', case=False)) & (Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\nslookup.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\bitsadmin.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False)) & ~ (CurrentDirectory.str.contains(r'\\\\ccmcache\\\\', case=False) | ParentCommandLine.str.contains(r'\\\\Program Files\\\\Amazon\\\\WorkSpacesConfig\\\\Scripts\\\\setup-scheduledtask.ps1', case=False) | ParentCommandLine.str.contains(r'\\\\Program Files\\\\Amazon\\\\WorkSpacesConfig\\\\Scripts\\\\set-selfhealing.ps1', case=False) | ParentCommandLine.str.contains(r'\\\\Program Files\\\\Amazon\\\\WorkSpacesConfig\\\\Scripts\\\\check-workspacehealth.ps1', case=False) | ParentCommandLine.str.contains(r'\\\\nessus_', case=False) | CommandLine.str.contains(r'\\\\nessus_', case=False) | ParentImage.str.contains(r'\\\\mshta.exe', case=False) & Image.str.contains(r'\\\\mshta.exe', case=False) & ParentCommandLine.str.contains(r'C:\\\\MEM_Configmgr_', case=False) & ParentCommandLine.str.contains(r'\\\\splash.hta', case=False) & ParentCommandLine.str.contains(r'{1E460BD7-F1C3-4B2E-88BF-4E770A288AF5}', case=False) & CommandLine.str.contains(r'C:\\\\MEM_Configmgr_', case=False) & CommandLine.str.contains(r'\\\\SMSSETUP\\\\BIN\\\\', case=False) & CommandLine.str.contains(r'\\\\autorun.hta', case=False) & CommandLine.str.contains(r'{1E460BD7-F1C3-4B2E-88BF-4E770A288AF5}', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - WebBrowserPassView Execution",
        "id": "d0dae994-26c6-4d2d-83b5-b3c8b79ae513",
        "status": "test",
        "description": "Detects the execution of WebBrowserPassView.exe. A password recovery tool that reveals the passwords stored by the following Web browsers, Internet Explorer (Version 4.0 - 11.0), Mozilla Firefox (All Versions), Google Chrome, Safari, and Opera",
        "tags": [
            "attack.credential-access",
            "attack.t1555.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description=='Web Browser Password Viewer' | Image.str.contains(r'\\\\WebBrowserPassView.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Copying Sensitive Files with Credential Data",
        "id": "e7be6119-fc37-43f0-ad4f-1f3f99be2f9f",
        "status": "test",
        "description": "Files with well-known filenames (sensitive files with credential data) copying",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002",
            "attack.t1003.003",
            "car.2013-07-001",
            "attack.s0404"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\esentutl.exe', case=False) | OriginalFileName=='\\\\esentutl.exe') & (CommandLine.str.contains(r'vss', case=False) | CommandLine.str.contains(r' -m ', case=False) | CommandLine.str.contains(r' /m ', case=False) | CommandLine.str.contains(r' \u2013m ', case=False) | CommandLine.str.contains(r' \u2014m ', case=False) | CommandLine.str.contains(r' \u2015m ', case=False) | CommandLine.str.contains(r' -y ', case=False) | CommandLine.str.contains(r' /y ', case=False) | CommandLine.str.contains(r' \u2013y ', case=False) | CommandLine.str.contains(r' \u2014y ', case=False) | CommandLine.str.contains(r' \u2015y ', case=False)) | CommandLine.str.contains(r'\\\\config\\\\RegBack\\\\sam', case=False) | CommandLine.str.contains(r'\\\\config\\\\RegBack\\\\security', case=False) | CommandLine.str.contains(r'\\\\config\\\\RegBack\\\\system', case=False) | CommandLine.str.contains(r'\\\\config\\\\sam', case=False) | CommandLine.str.contains(r'\\\\config\\\\security', case=False) | CommandLine.str.contains(r'\\\\config\\\\system ', case=False) | CommandLine.str.contains(r'\\\\repair\\\\sam', case=False) | CommandLine.str.contains(r'\\\\repair\\\\security', case=False) | CommandLine.str.contains(r'\\\\repair\\\\system', case=False) | CommandLine.str.contains(r'\\\\windows\\\\ntds\\\\ntds.dit', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Delete All Scheduled Tasks",
        "id": "220457c1-1c9f-4c2e-afe6-9598926222c1",
        "status": "test",
        "description": "Detects the usage of schtasks with the delete flag and the asterisk symbol to delete all tasks from the schedule of the local computer, including tasks scheduled by other users.",
        "tags": [
            "attack.impact",
            "attack.t1489"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\schtasks.exe', case=False) & CommandLine.str.contains(r' /delete ', case=False) & CommandLine.str.contains(r'/tn \\*', case=False) & CommandLine.str.contains(r' /f', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Child Processes Of SndVol.exe",
        "id": "ba42babc-0666-4393-a4f7-ceaf5a69191e",
        "status": "test",
        "description": "Detects potentially uncommon child processes of SndVol.exe (the Windows volume mixer)",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\SndVol.exe', case=False) & ~ (Image.str.contains(r'\\\\rundll32.exe', case=False) & CommandLine.str.contains(r' shell32.dll,Control_RunDLL ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SharpUp PrivEsc Tool Execution",
        "id": "c484e533-ee16-4a93-b6ac-f0ea4868b2f1",
        "status": "test",
        "description": "Detects the use of SharpUp, a tool for local privilege escalation",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1615",
            "attack.t1569.002",
            "attack.t1574.005"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SharpUp.exe', case=False) | Description=='SharpUp' | CommandLine.str.contains(r'HijackablePaths', case=False) | CommandLine.str.contains(r'UnquotedServicePath', case=False) | CommandLine.str.contains(r'ProcessDLLHijack', case=False) | CommandLine.str.contains(r'ModifiableServiceBinaries', case=False) | CommandLine.str.contains(r'ModifiableScheduledTask', case=False) | CommandLine.str.contains(r'DomainGPPPassword', case=False) | CommandLine.str.contains(r'CachedGPPPassword', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "MSHTA Suspicious Execution 01",
        "id": "cc7abbd0-762b-41e3-8a26-57ad50d2eea3",
        "status": "test",
        "description": "Detection for mshta.exe suspicious execution patterns sometimes involving file polyglotism",
        "tags": [
            "attack.defense-evasion",
            "attack.t1140",
            "attack.t1218.005",
            "attack.execution",
            "attack.t1059.007",
            "cve.2020-1599"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\mshta.exe', case=False) & (CommandLine.str.contains(r'vbscript', case=False) | CommandLine.str.contains(r'.jpg', case=False) | CommandLine.str.contains(r'.png', case=False) | CommandLine.str.contains(r'.lnk', case=False) | CommandLine.str.contains(r'.xls', case=False) | CommandLine.str.contains(r'.doc', case=False) | CommandLine.str.contains(r'.zip', case=False) | CommandLine.str.contains(r'.dll', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SharpEvtMute Execution",
        "id": "bedfc8ad-d1c7-4e37-a20e-e2b0dbee759c",
        "status": "test",
        "description": "Detects the use of SharpEvtHook, a tool that tampers with the Windows event logs",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SharpEvtMute.exe', case=False) | Description=='SharpEvtMute' | CommandLine.str.contains(r'--Filter \"rule ', case=False) | CommandLine.str.contains(r'--Encoded --Filter \\\\\"', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Recon Activity Using DriverQuery.EXE",
        "id": "9fc3072c-dc8f-4bf7-b231-18950000fadd",
        "status": "test",
        "description": "Detect usage of the \"driverquery\" utility to perform reconnaissance on installed drivers",
        "tags": [
            "attack.discovery"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'driverquery.exe', case=False) | OriginalFileName=='drvqry.exe') & (ParentImage.str.contains(r'\\\\cscript.exe', case=False) | ParentImage.str.contains(r'\\\\mshta.exe', case=False) | ParentImage.str.contains(r'\\\\regsvr32.exe', case=False) | ParentImage.str.contains(r'\\\\rundll32.exe', case=False) | ParentImage.str.contains(r'\\\\wscript.exe', case=False) | ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | ParentImage.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | ParentImage.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Lolbin Runexehelper Use As Proxy",
        "id": "cd71385d-fd9b-4691-9b98-2b1f7e508714",
        "status": "test",
        "description": "Detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\runexehelper.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Monitoring For Persistence Via BITS",
        "id": "b9cbbc17-d00d-4e3d-a827-b06d03d2380d",
        "status": "test",
        "description": "BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished.\nWhen the job runs on the system the command specified in the BITS job will be executed.\nThis can be abused by actors to create a backdoor within the system and for persistence.\nIt will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1197"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\bitsadmin.exe', case=False) | OriginalFileName=='bitsadmin.exe') & (CommandLine.str.contains(r'/SetNotifyCmdLine', case=False) & (CommandLine.str.contains(r'%COMSPEC%', case=False) | CommandLine.str.contains(r'cmd.exe', case=False) | CommandLine.str.contains(r'regsvr32.exe', case=False)) | CommandLine.str.contains(r'/Addfile', case=False) & (CommandLine.str.contains(r'http:', case=False) | CommandLine.str.contains(r'https:', case=False) | CommandLine.str.contains(r'ftp:', case=False) | CommandLine.str.contains(r'ftps:', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious XOR Encoded PowerShell Command",
        "id": "bb780e0c-16cf-4383-8383-1e5471db6cf9",
        "status": "test",
        "description": "Detects presence of a potentially xor encoded powershell command",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1059.001",
            "attack.t1140",
            "attack.t1027"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll'] | Description=='Windows PowerShell' | Product=='PowerShell Core 6') & CommandLine.str.contains(r'bxor', case=False) & (CommandLine.str.contains(r'ForEach', case=False) | CommandLine.str.contains(r'for(', case=False) | CommandLine.str.contains(r'for ', case=False) | CommandLine.str.contains(r'-join ', case=False) | CommandLine.str.contains(r'-join\\'', case=False) | CommandLine.str.contains(r'-join\"', case=False) | CommandLine.str.contains(r'-join`', case=False) | CommandLine.str.contains(r'::Join', case=False) | CommandLine.str.contains(r'[char]', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious FromBase64String Usage On Gzip Archive - Process Creation",
        "id": "d75d6b6b-adb9-48f7-824b-ac2e786efe1f",
        "status": "test",
        "description": "Detects attempts of decoding a base64 Gzip archive via PowerShell. This technique is often used as a method to load malicious content into memory afterward.",
        "tags": [
            "attack.command-and-control",
            "attack.t1132.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'FromBase64String', case=False) & CommandLine.str.contains(r'MemoryStream', case=False) & CommandLine.str.contains(r'H4sI', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "System File Execution Location Anomaly",
        "id": "e4a6b256-3e47-40fc-89d2-7a477edd6915",
        "status": "experimental",
        "description": "Detects the execution of a Windows system binary that is usually located in the system folder from an uncommon location.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\atbroker.exe', case=False) | Image.str.contains(r'\\\\audiodg.exe', case=False) | Image.str.contains(r'\\\\bcdedit.exe', case=False) | Image.str.contains(r'\\\\bitsadmin.exe', case=False) | Image.str.contains(r'\\\\certreq.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\cmstp.exe', case=False) | Image.str.contains(r'\\\\conhost.exe', case=False) | Image.str.contains(r'\\\\consent.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\csrss.exe', case=False) | Image.str.contains(r'\\\\dashost.exe', case=False) | Image.str.contains(r'\\\\defrag.exe', case=False) | Image.str.contains(r'\\\\dfrgui.exe', case=False) | Image.str.contains(r'\\\\dism.exe', case=False) | Image.str.contains(r'\\\\dllhost.exe', case=False) | Image.str.contains(r'\\\\dllhst3g.exe', case=False) | Image.str.contains(r'\\\\dwm.exe', case=False) | Image.str.contains(r'\\\\eventvwr.exe', case=False) | Image.str.contains(r'\\\\logonui.exe', case=False) | Image.str.contains(r'\\\\LsaIso.exe', case=False) | Image.str.contains(r'\\\\lsass.exe', case=False) | Image.str.contains(r'\\\\lsm.exe', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) | Image.str.contains(r'\\\\ntoskrnl.exe', case=False) | Image.str.contains(r'\\\\powershell_ise.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\runonce.exe', case=False) | Image.str.contains(r'\\\\RuntimeBroker.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\services.exe', case=False) | Image.str.contains(r'\\\\sihost.exe', case=False) | Image.str.contains(r'\\\\smartscreen.exe', case=False) | Image.str.contains(r'\\\\smss.exe', case=False) | Image.str.contains(r'\\\\spoolsv.exe', case=False) | Image.str.contains(r'\\\\svchost.exe', case=False) | Image.str.contains(r'\\\\taskhost.exe', case=False) | Image.str.contains(r'\\\\Taskmgr.exe', case=False) | Image.str.contains(r'\\\\userinit.exe', case=False) | Image.str.contains(r'\\\\wininit.exe', case=False) | Image.str.contains(r'\\\\winlogon.exe', case=False) | Image.str.contains(r'\\\\winver.exe', case=False) | Image.str.contains(r'\\\\wlanext.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\wsl.exe', case=False) | Image.str.contains(r'\\\\wsmprovhost.exe', case=False)) & ~ (Image.str.contains(r'C:\\\\$WINDOWS.~BT\\\\', case=False) | Image.str.contains(r'C:\\\\$WinREAgent\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SoftwareDistribution\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SystemTemp\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\uus\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False) | Image==['C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', 'C:\\\\Program Files\\\\PowerShell\\\\7-preview\\\\pwsh.exe'] | Image.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\MicrosoftCorporationII.WindowsSubsystemForLinux', case=False) & Image.str.contains(r'\\\\wsl.exe', case=False)) & ~ Image.str.contains(r'\\\\SystemRoot\\\\System32\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Diantz Download and Compress Into a CAB File",
        "id": "185d7418-f250-42d0-b72e-0c8b70661e93",
        "status": "test",
        "description": "Download and compress a remote file and store it in a cab file on local machine.",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'diantz.exe', case=False) & CommandLine.str.contains(r' \\\\\\\\', case=False) & CommandLine.str.contains(r'.cab', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed PsExec Service Execution",
        "id": "51ae86a2-e2e1-4097-ad85-c46cb6851de4",
        "status": "test",
        "description": "Detects suspicious launch of a renamed version of the PSEXESVC service with, which is not often used by legitimate administrators",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & OriginalFileName=='psexesvc.exe' & ~ Image=='C:\\\\Windows\\\\PSEXESVC.exe'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Arbitrary Binary Execution Using GUP Utility",
        "id": "d65aee4d-2292-4cea-b832-83accd6cfa43",
        "status": "test",
        "description": "Detects execution of the Notepad++ updater (gup) to launch other commands or executables",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\gup.exe', case=False) & Image.str.contains(r'\\\\explorer.exe', case=False) & ~ (Image.str.contains(r'\\\\explorer.exe', case=False) & CommandLine.str.contains(r'\\\\Notepad++\\\\notepad++.exe', case=False) | ParentImage.str.contains(r'\\\\Notepad++\\\\updater\\\\', case=False) | CommandLine is null)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential SysInternals ProcDump Evasion",
        "id": "79b06761-465f-4f88-9ef2-150e24d3d737",
        "status": "test",
        "description": "Detects uses of the SysInternals ProcDump utility in which ProcDump or its output get renamed, or a dump file is moved or copied to a different name",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'copy procdump', case=False) | CommandLine.str.contains(r'move procdump', case=False) | CommandLine.str.contains(r'copy ', case=False) & CommandLine.str.contains(r'.dmp ', case=False) & (CommandLine.str.contains(r'2.dmp', case=False) | CommandLine.str.contains(r'lsass', case=False) | CommandLine.str.contains(r'out.dmp', case=False)) | CommandLine.str.contains(r'copy lsass.exe_', case=False) | CommandLine.str.contains(r'move lsass.exe_', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Tap Installer Execution",
        "id": "99793437-3e16-439b-be0f-078782cf953d",
        "status": "test",
        "description": "Well-known TAP software installation. Possible preparation for data exfiltration using tunneling techniques",
        "tags": [
            "attack.exfiltration",
            "attack.t1048"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\tapinstall.exe', case=False) & ~ (Image.str.contains(r':\\\\Program Files\\\\Avast Software\\\\SecureLine VPN\\\\', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Avast Software\\\\SecureLine VPN\\\\', case=False) | Image.str.contains(r':\\\\Program Files\\\\OpenVPN Connect\\\\drivers\\\\tap\\\\', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Proton Technologies\\\\ProtonVPNTap\\\\installer\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sticky Key Like Backdoor Execution",
        "id": "2fdefcb3-dbda-401e-ae23-f0db027628bc",
        "status": "test",
        "description": "Detects the usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen",
        "tags": [
            "attack.privilege-escalation",
            "attack.persistence",
            "attack.t1546.008",
            "car.2014-11-003",
            "car.2014-11-008"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\winlogon.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\wt.exe', case=False)) & (CommandLine.str.contains(r'sethc.exe', case=False) | CommandLine.str.contains(r'utilman.exe', case=False) | CommandLine.str.contains(r'osk.exe', case=False) | CommandLine.str.contains(r'Magnify.exe', case=False) | CommandLine.str.contains(r'Narrator.exe', case=False) | CommandLine.str.contains(r'DisplaySwitch.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Run PowerShell Script from ADS",
        "id": "45a594aa-1fbd-4972-a809-ff5a99dd81b8",
        "status": "test",
        "description": "Detects PowerShell script execution from Alternate Data Stream (ADS)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False)) & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & CommandLine.str.contains(r'Get-Content', case=False) & CommandLine.str.contains(r'-Stream', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Recursive Takeown",
        "id": "554601fb-9b71-4bcc-abf4-21a611be4fde",
        "status": "test",
        "description": "Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders",
        "tags": [
            "attack.defense-evasion",
            "attack.t1222.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\takeown.exe', case=False) & CommandLine.str.contains(r'/f ', case=False) & CommandLine.str.contains(r'/r', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code",
        "id": "36475a7d-0f6d-4dce-9b01-6aeb473bbaf1",
        "status": "test",
        "description": "Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1216"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\SyncAppvPublishingServer.vbs', case=False) & CommandLine.str.contains(r';', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Splwow64 Without Params",
        "id": "1f1a8509-2cbb-44f5-8751-8e1571518ce2",
        "status": "test",
        "description": "Detects suspicious Splwow64.exe process without any command line parameters",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\splwow64.exe', case=False) & CommandLine.str.contains(r'splwow64.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Forfiles.EXE Child Process Masquerading",
        "id": "f53714ec-5077-420e-ad20-907ff9bb2958",
        "status": "test",
        "description": "Detects the execution of \"forfiles\" from a non-default location, in order to potentially spawn a custom \"cmd.exe\" from the current working directory.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentCommandLine.str.contains(r'.exe', case=False) | ParentCommandLine.str.contains(r'.exe\"', case=False)) & Image.str.contains(r'\\\\cmd.exe', case=False) & CommandLine.str.contains(r'/c echo \"', case=False) & ~ ((ParentImage.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | ParentImage.str.contains(r':\\\\Windows\\\\SysWOW64\\\\', case=False)) & ParentImage.str.contains(r'\\\\forfiles.exe', case=False) & (Image.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\', case=False)) & Image.str.contains(r'\\\\cmd.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Recovery From Backup Via Wbadmin.EXE",
        "id": "6fe4aa1e-0531-4510-8be2-782154b73b48",
        "status": "experimental",
        "description": "Detects the recovery of files from backups via \"wbadmin.exe\".\nAttackers can restore sensitive files such as NTDS.DIT or Registry Hives from backups in order to potentially extract credentials.\n",
        "tags": [
            "attack.impact",
            "attack.t1490"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wbadmin.exe', case=False) | OriginalFileName=='WBADMIN.EXE') & CommandLine.str.contains(r' recovery', case=False) & CommandLine.str.contains(r'recoveryTarget', case=False) & CommandLine.str.contains(r'itemtype:File', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed Whoami Execution",
        "id": "f1086bf7-a0c4-4a37-9102-01e573caf4a0",
        "status": "test",
        "description": "Detects the execution of whoami that has been renamed to a different name to avoid detection",
        "tags": [
            "attack.discovery",
            "attack.t1033",
            "car.2016-03-001"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & OriginalFileName=='whoami.exe' & ~ Image.str.contains(r'\\\\whoami.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Tor Client/Browser Execution",
        "id": "62f7c9bf-9135-49b2-8aeb-1e54a6ecc13c",
        "status": "test",
        "description": "Detects the use of Tor or Tor-Browser to connect to onion routing networks",
        "tags": [
            "attack.command-and-control",
            "attack.t1090.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\tor.exe', case=False) | Image.str.contains(r'\\\\Tor Browser\\\\Browser\\\\firefox.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed AutoHotkey.EXE Execution",
        "id": "0f16d9cf-0616-45c8-8fad-becc11b5a41c",
        "status": "test",
        "description": "Detects execution of a renamed autohotkey.exe binary based on PE metadata fields",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Product.str.contains(r'AutoHotkey', case=False) | Description.str.contains(r'AutoHotkey', case=False) | OriginalFileName==['AutoHotkey.exe', 'AutoHotkey.rc']) & ~ (Image.str.contains(r'\\\\AutoHotkey.exe', case=False) | Image.str.contains(r'\\\\AutoHotkey32.exe', case=False) | Image.str.contains(r'\\\\AutoHotkey32_UIA.exe', case=False) | Image.str.contains(r'\\\\AutoHotkey64.exe', case=False) | Image.str.contains(r'\\\\AutoHotkey64_UIA.exe', case=False) | Image.str.contains(r'\\\\AutoHotkeyA32.exe', case=False) | Image.str.contains(r'\\\\AutoHotkeyA32_UIA.exe', case=False) | Image.str.contains(r'\\\\AutoHotkeyU32.exe', case=False) | Image.str.contains(r'\\\\AutoHotkeyU32_UIA.exe', case=False) | Image.str.contains(r'\\\\AutoHotkeyU64.exe', case=False) | Image.str.contains(r'\\\\AutoHotkeyU64_UIA.exe', case=False) | Image.str.contains(r'\\\\AutoHotkey', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Binary Proxy Execution Via Dotnet-Trace.EXE",
        "id": "9257c05b-4a4a-48e5-a670-b7b073cf401b",
        "status": "test",
        "description": "Detects commandline arguments for executing a child process via dotnet-trace.exe",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\dotnet-trace.exe', case=False) | OriginalFileName=='dotnet-trace.dll') & CommandLine.str.contains(r'-- ', case=False) & CommandLine.str.contains(r'collect', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Invoke-WebRequest Execution With DirectIP",
        "id": "1edff897-9146-48d2-9066-52e8d8f80a2f",
        "status": "test",
        "description": "Detects calls to PowerShell with Invoke-WebRequest cmdlet using direct IP access",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r'curl ', case=False) | CommandLine.str.contains(r'Invoke-WebRequest', case=False) | CommandLine.str.contains(r'iwr ', case=False) | CommandLine.str.contains(r'wget ', case=False)) & (CommandLine.str.contains(r'://1', case=False) | CommandLine.str.contains(r'://2', case=False) | CommandLine.str.contains(r'://3', case=False) | CommandLine.str.contains(r'://4', case=False) | CommandLine.str.contains(r'://5', case=False) | CommandLine.str.contains(r'://6', case=False) | CommandLine.str.contains(r'://7', case=False) | CommandLine.str.contains(r'://8', case=False) | CommandLine.str.contains(r'://9', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Firewall Disabled via Netsh.EXE",
        "id": "57c4bf16-227f-4394-8ec7-1b745ee061c3",
        "status": "test",
        "description": "Detects netsh commands that turns off the Windows firewall",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004",
            "attack.s0108"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\netsh.exe', case=False) | OriginalFileName=='netsh.exe') & (CommandLine.str.contains(r'firewall', case=False) & CommandLine.str.contains(r'set', case=False) & CommandLine.str.contains(r'opmode', case=False) & CommandLine.str.contains(r'disable', case=False) | CommandLine.str.contains(r'advfirewall', case=False) & CommandLine.str.contains(r'set', case=False) & CommandLine.str.contains(r'state', case=False) & CommandLine.str.contains(r'off', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using Windows Media Player - Process",
        "id": "0058b9e5-bcd7-40d4-9205-95ca5a16d7b2",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image=='C:\\\\Program Files\\\\Windows Media Player\\\\osk.exe' | Image=='C:\\\\Windows\\\\System32\\\\cmd.exe' & ParentCommandLine=='\"C:\\\\Windows\\\\system32\\\\mmc.exe\" \"C:\\\\Windows\\\\system32\\\\eventvwr.msc\" /s') & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sysmon Driver Unloaded Via Fltmc.EXE",
        "id": "4d7cda18-1b12-4e52-b45c-d28653210df8",
        "status": "test",
        "description": "Detects possible Sysmon filter driver unloaded via fltmc.exe",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070",
            "attack.t1562",
            "attack.t1562.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\fltMC.exe', case=False) | OriginalFileName=='fltMC.exe') & CommandLine.str.contains(r'unload', case=False) & CommandLine.str.contains(r'sysmon', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DirLister Execution",
        "id": "b4dc61f5-6cce-468e-a608-b48b469feaa2",
        "status": "test",
        "description": "Detect the usage of \"DirLister.exe\" a utility for quickly listing folder or drive contents. It was seen used by BlackCat ransomware to create a list of accessible directories and files.",
        "tags": [
            "attack.discovery",
            "attack.t1083"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='DirLister.exe' | Image.str.contains(r'\\\\dirlister.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Windows Update Agent Empty Cmdline",
        "id": "52d097e2-063e-4c9c-8fbb-855c8948d135",
        "status": "test",
        "description": "Detects suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Wuauclt.exe', case=False) | OriginalFileName=='Wuauclt.exe') & (CommandLine.str.contains(r'Wuauclt', case=False) | CommandLine.str.contains(r'Wuauclt.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Suspicious Registry File Imported Via Reg.EXE",
        "id": "62e0298b-e994-4189-bc87-bc699aa62d97",
        "status": "test",
        "description": "Detects the import of '.reg' files from suspicious paths using the 'reg.exe' utility",
        "tags": [
            "attack.t1112",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\reg.exe', case=False) | OriginalFileName=='reg.exe') & CommandLine.str.contains(r' import ', case=False) & (CommandLine.str.contains(r'C:\\\\Users\\\\', case=False) | CommandLine.str.contains(r'%temp%', case=False) | CommandLine.str.contains(r'%tmp%', case=False) | CommandLine.str.contains(r'%appdata%', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'C:\\\\ProgramData\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Arbitrary DLL or Csproj Code Execution Via Dotnet.EXE",
        "id": "d80d5c81-04ba-45b4-84e4-92eba40e0ad3",
        "status": "test",
        "description": "Detects execution of arbitrary DLLs or unsigned code via a \".csproj\" files via Dotnet.EXE.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\dotnet.exe', case=False) | OriginalFileName=='.NET Host') & (CommandLine.str.contains(r'.csproj', case=False) | CommandLine.str.contains(r'.csproj\"', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.dll\"', case=False) | CommandLine.str.contains(r'.csproj\\'', case=False) | CommandLine.str.contains(r'.dll\\'', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed SysInternals DebugView Execution",
        "id": "cd764533-2e07-40d6-a718-cfeec7f2da7f",
        "status": "test",
        "description": "Detects suspicious renamed SysInternals DebugView execution",
        "tags": [
            "attack.resource-development",
            "attack.t1588.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Product=='Sysinternals DebugView' & ~ (OriginalFileName=='Dbgview.exe' & Image.str.contains(r'\\\\Dbgview.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New ActiveScriptEventConsumer Created Via Wmic.EXE",
        "id": "ebef4391-1a81-4761-a40a-1db446c0e625",
        "status": "test",
        "description": "Detects WMIC executions in which an event consumer gets created. This could be used to establish persistence",
        "tags": [
            "attack.persistence",
            "attack.t1546.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'ActiveScriptEventConsumer', case=False) & CommandLine.str.contains(r' CREATE ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Processes Suspicious Parent Directory",
        "id": "96036718-71cc-4027-a538-d1587e0006a7",
        "status": "test",
        "description": "Detect suspicious parent processes of well-known Windows processes",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.003",
            "attack.t1036.005"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\svchost.exe', case=False) | Image.str.contains(r'\\\\taskhost.exe', case=False) | Image.str.contains(r'\\\\lsm.exe', case=False) | Image.str.contains(r'\\\\lsass.exe', case=False) | Image.str.contains(r'\\\\services.exe', case=False) | Image.str.contains(r'\\\\lsaiso.exe', case=False) | Image.str.contains(r'\\\\csrss.exe', case=False) | Image.str.contains(r'\\\\wininit.exe', case=False) | Image.str.contains(r'\\\\winlogon.exe', case=False)) & ~ (ParentImage.str.contains(r'\\\\SavService.exe', case=False) | ParentImage.str.contains(r'\\\\ngen.exe', case=False) | ParentImage.str.contains(r'\\\\System32\\\\', case=False) | ParentImage.str.contains(r'\\\\SysWOW64\\\\', case=False) | (ParentImage.str.contains(r'\\\\Windows Defender\\\\', case=False) | ParentImage.str.contains(r'\\\\Microsoft Security Client\\\\', case=False)) & ParentImage.str.contains(r'\\\\MsMpEng.exe', case=False) | ParentImage is null | ParentImage=='-')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious MSDT Parent Process",
        "id": "7a74da6b-ea76-47db-92cc-874ad90df734",
        "status": "test",
        "description": "Detects msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\cmd.exe', case=False) | ParentImage.str.contains(r'\\\\cscript.exe', case=False) | ParentImage.str.contains(r'\\\\mshta.exe', case=False) | ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False) | ParentImage.str.contains(r'\\\\regsvr32.exe', case=False) | ParentImage.str.contains(r'\\\\rundll32.exe', case=False) | ParentImage.str.contains(r'\\\\schtasks.exe', case=False) | ParentImage.str.contains(r'\\\\wmic.exe', case=False) | ParentImage.str.contains(r'\\\\wscript.exe', case=False) | ParentImage.str.contains(r'\\\\wsl.exe', case=False)) & (Image.str.contains(r'\\\\msdt.exe', case=False) | OriginalFileName=='msdt.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - LogMeIn Execution",
        "id": "d85873ef-a0f8-4c48-a53a-6b621f11729d",
        "status": "test",
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description=='LMIGuardianSvc' | Product=='LMIGuardianSvc' | Company=='LogMeIn, Inc.')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Microsoft OneNote Child Process",
        "id": "c27515df-97a9-4162-8a60-dc0eeb51b775",
        "status": "test",
        "description": "Detects suspicious child processes of the Microsoft OneNote application. This may indicate an attempt to execute malicious embedded objects from a .one file.",
        "tags": [
            "attack.t1566",
            "attack.t1566.001",
            "attack.initial-access"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\onenote.exe', case=False) & (OriginalFileName==['bitsadmin.exe', 'CertOC.exe', 'CertUtil.exe', 'Cmd.Exe', 'CMSTP.EXE', 'cscript.exe', 'curl.exe', 'HH.exe', 'IEExec.exe', 'InstallUtil.exe', 'javaw.exe', 'Microsoft.Workflow.Compiler.exe', 'msdt.exe', 'MSHTA.EXE', 'msiexec.exe', 'Msxsl.exe', 'odbcconf.exe', 'pcalua.exe', 'PowerShell.EXE', 'RegAsm.exe', 'RegSvcs.exe', 'REGSVR32.exe', 'RUNDLL32.exe', 'schtasks.exe', 'ScriptRunner.exe', 'wmic.exe', 'WorkFolders.exe', 'wscript.exe'] | Image.str.contains(r'\\\\AppVLP.exe', case=False) | Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\bitsadmin.exe', case=False) | Image.str.contains(r'\\\\certoc.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cmstp.exe', case=False) | Image.str.contains(r'\\\\control.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\curl.exe', case=False) | Image.str.contains(r'\\\\forfiles.exe', case=False) | Image.str.contains(r'\\\\hh.exe', case=False) | Image.str.contains(r'\\\\ieexec.exe', case=False) | Image.str.contains(r'\\\\installutil.exe', case=False) | Image.str.contains(r'\\\\javaw.exe', case=False) | Image.str.contains(r'\\\\mftrace.exe', case=False) | Image.str.contains(r'\\\\Microsoft.Workflow.Compiler.exe', case=False) | Image.str.contains(r'\\\\msbuild.exe', case=False) | Image.str.contains(r'\\\\msdt.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\msidb.exe', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) | Image.str.contains(r'\\\\msxsl.exe', case=False) | Image.str.contains(r'\\\\odbcconf.exe', case=False) | Image.str.contains(r'\\\\pcalua.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regasm.exe', case=False) | Image.str.contains(r'\\\\regsvcs.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\scrcons.exe', case=False) | Image.str.contains(r'\\\\scriptrunner.exe', case=False) | Image.str.contains(r'\\\\sh.exe', case=False) | Image.str.contains(r'\\\\svchost.exe', case=False) | Image.str.contains(r'\\\\verclsid.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\workfolders.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\explorer.exe', case=False) & (CommandLine.str.contains(r'.hta', case=False) | CommandLine.str.contains(r'.vb', case=False) | CommandLine.str.contains(r'.wsh', case=False) | CommandLine.str.contains(r'.js', case=False) | CommandLine.str.contains(r'.ps', case=False) | CommandLine.str.contains(r'.scr', case=False) | CommandLine.str.contains(r'.pif', case=False) | CommandLine.str.contains(r'.bat', case=False) | CommandLine.str.contains(r'.cmd', case=False)) | Image.str.contains(r'\\\\AppData\\\\', case=False) | Image.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\ProgramData\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\Tasks\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\System32\\\\Tasks\\\\', case=False)) & ~ (Image.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\current\\\\Teams.exe', case=False) & CommandLine.str.contains(r'-Embedding', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\', case=False) & Image.str.contains(r'\\\\FileCoAuth.exe', case=False) & CommandLine.str.contains(r'-Embedding', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Arbitrary File Download Via MSEDGE_PROXY.EXE",
        "id": "e84d89c4-f544-41ca-a6af-4b92fd38b023",
        "status": "test",
        "description": "Detects usage of \"msedge_proxy.exe\" to download arbitrary files",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\msedge_proxy.exe', case=False) | OriginalFileName=='msedge_proxy.exe') & (CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious SysAidServer Child",
        "id": "60bfeac3-0d35-4302-8efb-1dd16f715bc6",
        "status": "test",
        "description": "Detects suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions)",
        "tags": [
            "attack.lateral-movement",
            "attack.t1210"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\java.exe', case=False) | ParentImage.str.contains(r'\\\\javaw.exe', case=False)) & ParentCommandLine.str.contains(r'SysAidServer', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Cscript/Wscript Potentially Suspicious Child Process",
        "id": "b6676963-0353-4f88-90f5-36c20d443c6a",
        "status": "test",
        "description": "Detects potentially suspicious child processes of Wscript/Cscript. These include processes such as rundll32 with uncommon exports or PowerShell spawning rundll32 or regsvr32.\nMalware such as Pikabot and Qakbot were seen using similar techniques as well as many others.\n",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\wscript.exe', case=False) | ParentImage.str.contains(r'\\\\cscript.exe', case=False)) & (Image.str.contains(r'\\\\rundll32.exe', case=False) | (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & (CommandLine.str.contains(r'mshta', case=False) & CommandLine.str.contains(r'http', case=False) | CommandLine.str.contains(r'rundll32', case=False) | CommandLine.str.contains(r'regsvr32', case=False) | CommandLine.str.contains(r'msiexec', case=False))) & ~ (Image.str.contains(r'\\\\rundll32.exe', case=False) & (CommandLine.str.contains(r'UpdatePerUserSystemParameters', case=False) | CommandLine.str.contains(r'PrintUIEntry', case=False) | CommandLine.str.contains(r'ClearMyTracksByProcess', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Commandline Obfuscation Using Escape Characters",
        "id": "f0cdd048-82dc-4f7a-8a7a-b87a52b6d0fd",
        "status": "test",
        "description": "Detects potential commandline obfuscation using known escape characters",
        "tags": [
            "attack.defense-evasion",
            "attack.t1140"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'h^t^t^p', case=False) | CommandLine.str.contains(r'h\"t\"t\"p', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Download And Execution Via IEExec.EXE",
        "id": "9801abb8-e297-4dbf-9fbd-57dde0e830ad",
        "status": "test",
        "description": "Detects execution of the IEExec utility to download and execute files",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\IEExec.exe', case=False) | OriginalFileName=='IEExec.exe') & (CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use Icacls to Hide File to Everyone",
        "id": "4ae81040-fc1c-4249-bfa3-938d260214d9",
        "status": "test",
        "description": "Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='iCACLS.EXE' | Image.str.contains(r'\\\\icacls.exe', case=False)) & CommandLine.str.contains(r'/deny', case=False) & CommandLine.str.contains(r'S-1-1-0:', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Hashcat Password Cracker Execution",
        "id": "39b31e81-5f5f-4898-9c0e-2160cfc0f9bf",
        "status": "test",
        "description": "Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against",
        "tags": [
            "attack.credential-access",
            "attack.t1110.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\hashcat.exe', case=False) | CommandLine.str.contains(r'-a ', case=False) & CommandLine.str.contains(r'-m 1000 ', case=False) & CommandLine.str.contains(r'-r ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Jlaive In-Memory Assembly Execution",
        "id": "0a99eb3e-1617-41bd-b095-13dc767f3def",
        "status": "test",
        "description": "Detects the use of Jlaive to execute assemblies in a copied PowerShell",
        "tags": [
            "attack.execution",
            "attack.t1059.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\cmd.exe', case=False) & ParentCommandLine.str.contains(r'.bat', case=False) & (Image.str.contains(r'\\\\xcopy.exe', case=False) & CommandLine.str.contains(r'powershell.exe', case=False) & CommandLine.str.contains(r'.bat.exe', case=False) | Image.str.contains(r'\\\\xcopy.exe', case=False) & CommandLine.str.contains(r'pwsh.exe', case=False) & CommandLine.str.contains(r'.bat.exe', case=False) | Image.str.contains(r'\\\\attrib.exe', case=False) & CommandLine.str.contains(r'+s', case=False) & CommandLine.str.contains(r'+h', case=False) & CommandLine.str.contains(r'.bat.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious WMIC Execution Via Office Process",
        "id": "e1693bc8-7168-4eab-8718-cdcaa68a1738",
        "status": "test",
        "description": "Office application called wmic to proxye execution through a LOLBIN process. This is often used to break suspicious parent-child chain (Office app spawns LOLBin).",
        "tags": [
            "attack.t1204.002",
            "attack.t1047",
            "attack.t1218.010",
            "attack.execution",
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\WINWORD.EXE', case=False) | ParentImage.str.contains(r'\\\\EXCEL.EXE', case=False) | ParentImage.str.contains(r'\\\\POWERPNT.exe', case=False) | ParentImage.str.contains(r'\\\\MSPUB.exe', case=False) | ParentImage.str.contains(r'\\\\VISIO.exe', case=False) | ParentImage.str.contains(r'\\\\MSACCESS.EXE', case=False) | ParentImage.str.contains(r'\\\\EQNEDT32.EXE', case=False) | ParentImage.str.contains(r'\\\\ONENOTE.EXE', case=False) | ParentImage.str.contains(r'\\\\wordpad.exe', case=False) | ParentImage.str.contains(r'\\\\wordview.exe', case=False)) & (Image.str.contains(r'\\\\wbem\\\\WMIC.exe', case=False) | OriginalFileName=='wmic.exe') & CommandLine.str.contains(r'process', case=False) & CommandLine.str.contains(r'create', case=False) & CommandLine.str.contains(r'call', case=False) & (CommandLine.str.contains(r'regsvr32', case=False) | CommandLine.str.contains(r'rundll32', case=False) | CommandLine.str.contains(r'msiexec', case=False) | CommandLine.str.contains(r'mshta', case=False) | CommandLine.str.contains(r'verclsid', case=False) | CommandLine.str.contains(r'wscript', case=False) | CommandLine.str.contains(r'cscript', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Microsoft IIS Service Account Password Dumped",
        "id": "2d3cdeec-c0db-45b4-aa86-082f7eb75701",
        "status": "test",
        "description": "Detects the Internet Information Services (IIS) command-line tool, AppCmd, being used to list passwords",
        "tags": [
            "attack.credential-access",
            "attack.t1003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\appcmd.exe', case=False) | OriginalFileName=='appcmd.exe') & CommandLine.str.contains(r'list ', case=False) & (CommandLine.str.contains(r' /config', case=False) | CommandLine.str.contains(r' /xml', case=False) | CommandLine.str.contains(r' -config', case=False) | CommandLine.str.contains(r' -xml', case=False) | (CommandLine.str.contains(r' /@t', case=False) | CommandLine.str.contains(r' /text', case=False) | CommandLine.str.contains(r' /show', case=False) | CommandLine.str.contains(r' -@t', case=False) | CommandLine.str.contains(r' -text', case=False) | CommandLine.str.contains(r' -show', case=False)) & (CommandLine.str.contains(r':\\*', case=False) | CommandLine.str.contains(r'password', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Fsutil Behavior Set SymlinkEvaluation",
        "id": "c0b2768a-dd06-4671-8339-b16ca8d1f27f",
        "status": "test",
        "description": "A symbolic link is a type of file that contains a reference to another file.\nThis is probably done to make sure that the ransomware is able to follow shortcuts on the machine in order to find the original file to encrypt\n",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\fsutil.exe', case=False) | OriginalFileName=='fsutil.exe') & CommandLine.str.contains(r'behavior ', case=False) & CommandLine.str.contains(r'set ', case=False) & CommandLine.str.contains(r'SymlinkEvaluation', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WMIC Remote Command Execution",
        "id": "7773b877-5abb-4a3e-b9c9-fd0369b59b00",
        "status": "test",
        "description": "Detects the execution of WMIC to query information on a remote system",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\WMIC.exe', case=False) | OriginalFileName=='wmic.exe') & CommandLine.str.contains(r'/node:', case=False) & ~ (CommandLine.str.contains(r'/node:127.0.0.1 ', case=False) | CommandLine.str.contains(r'/node:localhost ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Invocation of Active Directory Diagnostic Tool (ntdsutil.exe)",
        "id": "2afafd61-6aae-4df4-baed-139fa1f4c345",
        "status": "test",
        "description": "Detects execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT)",
        "tags": [
            "attack.credential-access",
            "attack.t1003.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\ntdsutil.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using DismHost",
        "id": "853e74f9-9392-4935-ad3b-2e8c040dae86",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'C:\\\\Users\\\\', case=False) & ParentImage.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) & ParentImage.str.contains(r'\\\\DismHost.exe', case=False) & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Proxy Execution Via Wuauclt.EXE",
        "id": "af77cf95-c469-471c-b6a0-946c685c4798",
        "status": "test",
        "description": "Detects the use of the Windows Update Client binary (wuauclt.exe) for proxy execution.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wuauclt.exe', case=False) | OriginalFileName=='wuauclt.exe') & CommandLine.str.contains(r'UpdateDeploymentProvider', case=False) & CommandLine.str.contains(r'RunHandlerComServer', case=False) & ~ (CommandLine.str.contains(r' /UpdateDeploymentProvider UpdateDeploymentProvider.dll ', case=False) | CommandLine.str.contains(r' wuaueng.dll ', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\UUS\\\\Packages\\\\Preview\\\\amd64\\\\updatedeploy.dll /ClassId', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\UUS\\\\amd64\\\\UpdateDeploy.dll /ClassId', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\WinSxS\\\\', case=False) & CommandLine.str.contains(r'\\\\UpdateDeploy.dll /ClassId ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed NetSupport RAT Execution",
        "id": "0afbd410-de03-4078-8491-f132303cb67d",
        "status": "test",
        "description": "Detects the execution of a renamed \"client32.exe\" (NetSupport RAT) via Imphash, Product and OriginalFileName strings",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Product.str.contains(r'NetSupport Remote Control', case=False) | OriginalFileName.str.contains(r'client32.exe', case=False) | Hashes.str.contains(r'IMPHASH=A9D50692E95B79723F3E76FCF70D023E', case=False)) & ~ Image.str.contains(r'\\\\client32.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Child Process Of Appvlp.EXE",
        "id": "9c7e131a-0f2c-4ae0-9d43-b04f4e266d43",
        "status": "test",
        "description": "Detects uncommon child processes of Appvlp.EXE\nAppvlp or the Application Virtualization Utility is included with Microsoft Office. Attackers are able to abuse \"AppVLP\" to execute shell commands.\nNormally, this binary is used for Application Virtualization, but it can also be abused to circumvent the ASR file path rule folder\nor to mark a file as a system file.\n",
        "tags": [
            "attack.t1218",
            "attack.defense-evasion",
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\appvlp.exe', case=False) & ~ (Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\rundll32.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\rundll32.exe', case=False)) & ~ (Image.str.contains(r':\\\\Program Files\\\\Microsoft Office', case=False) & Image.str.contains(r'\\\\msoasb.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\Microsoft Office', case=False) & Image.str.contains(r'\\\\SkypeSrv\\\\', case=False) & Image.str.contains(r'\\\\SKYPESERVER.EXE', case=False) | Image.str.contains(r':\\\\Program Files\\\\Microsoft Office', case=False) & Image.str.contains(r'\\\\MSOUC.EXE', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Port Forwarding Rule Added Via Netsh.EXE",
        "id": "322ed9ec-fcab-4f67-9a34-e7c6aef43614",
        "status": "test",
        "description": "Detects the execution of netsh commands that configure a new port forwarding (PortProxy) rule",
        "tags": [
            "attack.lateral-movement",
            "attack.defense-evasion",
            "attack.command-and-control",
            "attack.t1090"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\netsh.exe', case=False) | OriginalFileName=='netsh.exe') & (CommandLine.str.contains(r'interface', case=False) & CommandLine.str.contains(r'portproxy', case=False) & CommandLine.str.contains(r'add', case=False) & CommandLine.str.contains(r'v4tov4', case=False) | CommandLine.str.contains(r'i ', case=False) & CommandLine.str.contains(r'p ', case=False) & CommandLine.str.contains(r'a ', case=False) & CommandLine.str.contains(r'v ', case=False) | CommandLine.str.contains(r'connectp', case=False) & CommandLine.str.contains(r'listena', case=False) & CommandLine.str.contains(r'c=', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Files Added To An Archive Using Rar.EXE",
        "id": "6f3e2987-db24-4c78-a860-b4f4095a7095",
        "status": "test",
        "description": "Detects usage of \"rar\" to add files to an archive for potential compression. An adversary may compress data (e.g. sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.",
        "tags": [
            "attack.collection",
            "attack.t1560.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\rar.exe', case=False) & CommandLine.str.contains(r' a ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - RunXCmd Execution",
        "id": "93199800-b52a-4dec-b762-75212c196542",
        "status": "test",
        "description": "Detects the use of the RunXCmd tool to execute commands with System or TrustedInstaller accounts",
        "tags": [
            "attack.execution",
            "attack.t1569.002",
            "attack.s0029"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' /account=system ', case=False) | CommandLine.str.contains(r' /account=ti ', case=False)) & CommandLine.str.contains(r'/exec=', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Certipy Execution",
        "id": "6938366d-8954-4ddc-baff-c830b3ba8fcd",
        "status": "test",
        "description": "Detects Certipy execution, a tool for Active Directory Certificate Services enumeration and abuse based on PE metadata characteristics and common command line arguments.\n",
        "tags": [
            "attack.discovery",
            "attack.credential-access",
            "attack.t1649"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Certipy.exe', case=False) | OriginalFileName=='Certipy.exe' | Description.str.contains(r'Certipy', case=False) | (CommandLine.str.contains(r' account ', case=False) | CommandLine.str.contains(r' auth ', case=False) | CommandLine.str.contains(r' cert ', case=False) | CommandLine.str.contains(r' find ', case=False) | CommandLine.str.contains(r' forge ', case=False) | CommandLine.str.contains(r' ptt ', case=False) | CommandLine.str.contains(r' relay ', case=False) | CommandLine.str.contains(r' req ', case=False) | CommandLine.str.contains(r' shadow ', case=False) | CommandLine.str.contains(r' template ', case=False)) & (CommandLine.str.contains(r' -bloodhound', case=False) | CommandLine.str.contains(r' -ca-pfx ', case=False) | CommandLine.str.contains(r' -dc-ip ', case=False) | CommandLine.str.contains(r' -kirbi', case=False) | CommandLine.str.contains(r' -old-bloodhound', case=False) | CommandLine.str.contains(r' -pfx ', case=False) | CommandLine.str.contains(r' -target', case=False) | CommandLine.str.contains(r' -template', case=False) | CommandLine.str.contains(r' -username ', case=False) | CommandLine.str.contains(r' -vulnerable', case=False) | CommandLine.str.contains(r'auth -pfx', case=False) | CommandLine.str.contains(r'shadow auto', case=False) | CommandLine.str.contains(r'shadow list', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Obfuscated IP Download Activity",
        "id": "cb5a2333-56cf-4562-8fcb-22ba1bca728d",
        "status": "test",
        "description": "Detects use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command",
        "tags": [
            "attack.discovery"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'Invoke-WebRequest', case=False) | CommandLine.str.contains(r'iwr ', case=False) | CommandLine.str.contains(r'wget ', case=False) | CommandLine.str.contains(r'curl ', case=False) | CommandLine.str.contains(r'DownloadFile', case=False) | CommandLine.str.contains(r'DownloadString', case=False)) & (CommandLine.str.contains(r' 0x', case=False) | CommandLine.str.contains(r'//0x', case=False) | CommandLine.str.contains(r'.0x', case=False) | CommandLine.str.contains(r'.00x', case=False) | CommandLine.str.contains(r'http://%', case=False) & CommandLine.str.contains(r'%2e', case=False) | CommandLine.str.contains(r'https?://[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.0[0-9]{3,4}') | CommandLine.str.contains(r'https?://[0-9]{1,3}\\\\.0[0-9]{3,7}') | CommandLine.str.contains(r'https?://0[0-9]{3,11}') | CommandLine.str.contains(r'https?://(0[0-9]{1,11}\\\\.){3}0[0-9]{1,11}') | CommandLine.str.contains(r'https?://0[0-9]{1,11}') | CommandLine.str.contains(r' [0-7]{7,13}')) & ~ CommandLine.str.contains(r'https?://((25[0-5]|(2[0-4]|1\\\\d|[1-9])?\\\\d)(\\\\.|\\\\b)){4}')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious VBoxDrvInst.exe Parameters",
        "id": "b7b19cb6-9b32-4fc4-a108-73f19acfe262",
        "status": "test",
        "description": "Detect VBoxDrvInst.exe run with parameters allowing processing INF file.\nThis allows to create values in the registry and install drivers.\nFor example one could use this technique to obtain persistence via modifying one of Run or RunOnce registry keys\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\VBoxDrvInst.exe', case=False) & CommandLine.str.contains(r'driver', case=False) & CommandLine.str.contains(r'executeinf', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious GoogleUpdate Child Process",
        "id": "84b1ecf9-6eff-4004-bafb-bae5c0e251b2",
        "status": "test",
        "description": "Detects potentially suspicious child processes of \"GoogleUpdate.exe\"",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\GoogleUpdate.exe', case=False) & ~ (Image.str.contains(r'\\\\Google', case=False) | Image.str.contains(r'\\\\setup.exe', case=False) | Image.str.contains(r'chrome_updater.exe', case=False) | Image.str.contains(r'chrome_installer.exe', case=False) | Image is null)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Python Spawning Pretty TTY on Windows",
        "id": "480e7e51-e797-47e3-8d72-ebfce65b6d8d",
        "status": "test",
        "description": "Detects python spawning a pretty tty",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'python.exe', case=False) | Image.str.contains(r'python3.exe', case=False) | Image.str.contains(r'python2.exe', case=False)) & (CommandLine.str.contains(r'import pty', case=False) & CommandLine.str.contains(r'.spawn(', case=False) | CommandLine.str.contains(r'from pty import spawn', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Sliver C2 Implant Activity Pattern",
        "id": "42333b2c-b425-441c-b70e-99404a17170f",
        "status": "test",
        "description": "Detects process activity patterns as seen being used by Sliver C2 framework implants",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'-NoExit -Command [Console]::OutputEncoding=[Text.UTF8Encoding]::UTF8', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Provlaunch.EXE Child Process",
        "id": "f9999590-1f94-4a34-a91e-951e47bedefd",
        "status": "test",
        "description": "Detects suspicious child processes of \"provlaunch.exe\" which might indicate potential abuse to proxy execution.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\provlaunch.exe', case=False) & (Image.str.contains(r'\\\\calc.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\notepad.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r':\\\\PerfLogs\\\\', case=False) | Image.str.contains(r':\\\\Temp\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\System32\\\\Tasks\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\Tasks\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Stracciatella Execution",
        "id": "7a4d9232-92fc-404d-8ce1-4c92e7caf539",
        "status": "test",
        "description": "Detects Stracciatella which executes a Powershell runspace from within C# (aka SharpPick technique) with AMSI, ETW and Script Block Logging disabled based on PE metadata characteristics.",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1059",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\Stracciatella.exe', case=False) | OriginalFileName=='Stracciatella.exe' | Description=='Stracciatella' | Hashes.str.contains(r'SHA256=9d25e61ec1527e2a69d7c2a4e3fe2fe15890710c198a66a9f25d99fdf6c7b956', case=False) | Hashes.str.contains(r'SHA256=fd16609bd9830c63b9413671678bb159b89c357d21942ddbb6b93add808d121a', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Tools Using ComputerDefaults",
        "id": "3c05e90d-7eba-4324-9972-5d7f711a60a8",
        "status": "test",
        "description": "Detects tools such as UACMe used to bypass UAC with computerdefaults.exe (UACMe 59)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288']) & Image=='C:\\\\Windows\\\\System32\\\\ComputerDefaults.exe' & ~ (ParentImage.str.contains(r':\\\\Windows\\\\System32', case=False) | ParentImage.str.contains(r':\\\\Program Files', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Add New Download Source To Winget",
        "id": "05ebafc8-7aa2-4bcd-a269-2aec93f9e842",
        "status": "test",
        "description": "Detects usage of winget to add new additional download sources",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\winget.exe', case=False) | OriginalFileName=='winget.exe') & CommandLine.str.contains(r'source ', case=False) & CommandLine.str.contains(r'add ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Mftrace.EXE Abuse",
        "id": "3d48c9d3-1aa6-418d-98d3-8fd3c01a564e",
        "status": "test",
        "description": "Detects child processes of the \"Trace log generation tool for Media Foundation Tools\" (Mftrace.exe) which can abused to execute arbitrary binaries.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\mftrace.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Child Process Of Wermgr.EXE",
        "id": "396f6630-f3ac-44e3-bfc8-1b161bc00c4e",
        "status": "experimental",
        "description": "Detects suspicious Windows Error Reporting manager (wermgr.exe) child process",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055",
            "attack.t1036"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\wermgr.exe', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\ipconfig.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | Image.str.contains(r'\\\\netstat.exe', case=False) | Image.str.contains(r'\\\\nslookup.exe', case=False) | Image.str.contains(r'\\\\powershell_ise.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\systeminfo.exe', case=False) | Image.str.contains(r'\\\\whoami.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False)) & ~ (Image.str.contains(r'\\\\rundll32.exe', case=False) & CommandLine.str.contains(r'C:\\\\Windows\\\\system32\\\\WerConCpl.dll', case=False) & CommandLine.str.contains(r'LaunchErcApp ', case=False) & (CommandLine.str.contains(r'-queuereporting', case=False) | CommandLine.str.contains(r'-responsepester', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DumpMinitool Execution",
        "id": "dee0a7a3-f200-4112-a99b-952196d81e42",
        "status": "test",
        "description": "Detects the use of \"DumpMinitool.exe\" a tool that allows the dump of process memory via the use of the \"MiniDumpWriteDump\"",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.t1003.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\DumpMinitool.exe', case=False) | Image.str.contains(r'\\\\DumpMinitool.x86.exe', case=False) | Image.str.contains(r'\\\\DumpMinitool.arm64.exe', case=False) | OriginalFileName==['DumpMinitool.exe', 'DumpMinitool.x86.exe', 'DumpMinitool.arm64.exe']) & (CommandLine.str.contains(r' Full', case=False) | CommandLine.str.contains(r' Mini', case=False) | CommandLine.str.contains(r' WithHeap', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use of VisualUiaVerifyNative.exe",
        "id": "b30a8bc5-e21b-4ca2-9420-0a94019ac56a",
        "status": "test",
        "description": "VisualUiaVerifyNative.exe is a Windows SDK that can be used for AWL bypass and is listed in Microsoft's recommended block rules.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\VisualUiaVerifyNative.exe', case=False) | OriginalFileName=='VisualUiaVerifyNative.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Sideloading Via DeviceEnroller.EXE",
        "id": "e173ad47-4388-4012-ae62-bd13f71c18a8",
        "status": "test",
        "description": "Detects the use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist. This non-existent DLL file is named \"ShellChromeAPI.dll\".\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\deviceenroller.exe', case=False) | OriginalFileName=='deviceenroller.exe') & CommandLine.str.contains(r'/PhoneDeepLink', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LSA PPL Protection Disabled Via Reg.EXE",
        "id": "8c0eca51-0f88-4db2-9183-fdfb10c703f9",
        "status": "test",
        "description": "Detects the usage of the \"reg.exe\" utility to disable PPL protection on the LSA process",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.010"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\reg.exe', case=False) | OriginalFileName=='reg.exe') & CommandLine.str.contains(r'SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa', case=False) & CommandLine.str.contains(r' add ', case=False) & CommandLine.str.contains(r' /d 0', case=False) & CommandLine.str.contains(r' /v RunAsPPL ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Manage-bde.wsf Abuse To Proxy Execution",
        "id": "c363385c-f75d-4753-a108-c1a8e28bdbda",
        "status": "test",
        "description": "Detects potential abuse of the \"manage-bde.wsf\" script as a LOLBIN to proxy execution",
        "tags": [
            "attack.defense-evasion",
            "attack.t1216"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\wscript.exe', case=False) | OriginalFileName=='wscript.exe') & CommandLine.str.contains(r'manage-bde.wsf', case=False) | (ParentImage.str.contains(r'\\\\cscript.exe', case=False) | ParentImage.str.contains(r'\\\\wscript.exe', case=False)) & ParentCommandLine.str.contains(r'manage-bde.wsf', case=False) & ~ Image.str.contains(r'\\\\cmd.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Child Process Of Defaultpack.EXE",
        "id": "b2309017-4235-44fe-b5af-b15363011957",
        "status": "test",
        "description": "Detects uncommon child processes of \"DefaultPack.EXE\" binary as a proxy to launch other programs",
        "tags": [
            "attack.t1218",
            "attack.defense-evasion",
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\DefaultPack.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DLL Injection Or Execution Using Tracker.exe",
        "id": "148431ce-4b70-403d-8525-fcc2993f29ea",
        "status": "test",
        "description": "Detects potential DLL injection and execution using \"Tracker.exe\"",
        "tags": [
            "attack.defense-evasion",
            "attack.t1055.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\tracker.exe', case=False) | Description=='Tracker') & (CommandLine.str.contains(r' /d ', case=False) | CommandLine.str.contains(r' /c ', case=False)) & ~ (CommandLine.str.contains(r' /ERRORREPORT:PROMPT ', case=False) | ParentImage.str.contains(r'\\\\Msbuild\\\\Current\\\\Bin\\\\MSBuild.exe', case=False) | ParentImage.str.contains(r'\\\\Msbuild\\\\Current\\\\Bin\\\\amd64\\\\MSBuild.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Shadow Copies Creation Using Operating Systems Utilities",
        "id": "b17ea6f7-6e90-447e-a799-e6c0a493d6ce",
        "status": "test",
        "description": "Shadow Copies creation using operating systems utilities, possible credential access",
        "tags": [
            "attack.credential-access",
            "attack.t1003",
            "attack.t1003.002",
            "attack.t1003.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\vssadmin.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll', 'wmic.exe', 'VSSADMIN.EXE']) & CommandLine.str.contains(r'shadow', case=False) & CommandLine.str.contains(r'create', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Process Hacker Execution",
        "id": "811e0002-b13b-4a15-9d00-a613fce66e42",
        "status": "test",
        "description": "Detects the execution of Process Hacker based on binary metadata information (Image, Hash, Imphash, etc).\nProcess Hacker is a tool to view and manipulate processes, kernel options and other low level options.\nThreat actors abused older vulnerable versions to manipulate system processes.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.discovery",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1622",
            "attack.t1564",
            "attack.t1543"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ProcessHacker_', case=False) | Image.str.contains(r'\\\\ProcessHacker.exe', case=False) | OriginalFileName==['ProcessHacker.exe', 'Process Hacker'] | Description=='Process Hacker' | Product=='Process Hacker' | Hashes.str.contains(r'MD5=68F9B52895F4D34E74112F3129B3B00D', case=False) | Hashes.str.contains(r'MD5=B365AF317AE730A67C936F21432B9C71', case=False) | Hashes.str.contains(r'SHA1=A0BDFAC3CE1880B32FF9B696458327CE352E3B1D', case=False) | Hashes.str.contains(r'SHA1=C5E2018BF7C0F314FED4FD7FE7E69FA2E648359E', case=False) | Hashes.str.contains(r'SHA256=D4A0FE56316A2C45B9BA9AC1005363309A3EDC7ACF9E4DF64D326A0FF273E80F', case=False) | Hashes.str.contains(r'SHA256=BD2C2CF0631D881ED382817AFCCE2B093F4E412FFB170A719E2762F250ABFEA4', case=False) | Hashes.str.contains(r'IMPHASH=3695333C60DEDECDCAFF1590409AA462', case=False) | Hashes.str.contains(r'IMPHASH=04DE0AD9C37EB7BD52043D2ECAC958DF', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Interesting Service Enumeration Via Sc.EXE",
        "id": "e83e8899-c9b2-483b-b355-5decc942b959",
        "status": "test",
        "description": "Detects the enumeration and query of interesting and in some cases sensitive services on the system via \"sc.exe\".\nAttackers often try to enumerate the services currently running on a system in order to find different attack vectors.\n",
        "tags": [
            "attack.t1003"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\sc.exe', case=False) | OriginalFileName=='sc.exe') & CommandLine.str.contains(r'query', case=False) & CommandLine.str.contains(r'termservice', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Usage Of ShellExec_RunDLL",
        "id": "d87bd452-6da1-456e-8155-7dc988157b7d",
        "status": "test",
        "description": "Detects suspicious usage of the ShellExec_RunDLL function to launch other commands as seen in the the raspberry-robin attack",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'ShellExec_RunDLL', case=False) & (CommandLine.str.contains(r'\\\\Desktop\\\\', case=False) | CommandLine.str.contains(r'\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'comspec', case=False) | CommandLine.str.contains(r'iex', case=False) | CommandLine.str.contains(r'Invoke-', case=False) | CommandLine.str.contains(r'msiexec', case=False) | CommandLine.str.contains(r'odbcconf', case=False) | CommandLine.str.contains(r'regsvr32', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Vsls-Agent Command With AgentExtensionPath Load",
        "id": "43103702-5886-11ed-9b6a-0242ac120002",
        "status": "test",
        "description": "Detects Microsoft Visual Studio vsls-agent.exe lolbin execution with a suspicious library load using the --agentExtensionPath parameter",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\vsls-agent.exe', case=False) & CommandLine.str.contains(r'--agentExtensionPath', case=False) & ~ CommandLine.str.contains(r'Microsoft.VisualStudio.LiveShare.Agent.', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - HandleKatz LSASS Dumper Execution",
        "id": "ca621ba5-54ab-4035-9942-d378e6fcde3c",
        "status": "test",
        "description": "Detects the use of HandleKatz, a tool that demonstrates the usage of cloned handles to Lsass in order to create an obfuscated memory dump of the same",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\loader.exe', case=False) & CommandLine.str.contains(r'--pid:', case=False) | Hashes.str.contains(r'IMPHASH=38D9E015591BBFD4929E0D0F47FA0055', case=False) | Hashes.str.contains(r'IMPHASH=0E2216679CA6E1094D63322E3412D650', case=False) | CommandLine.str.contains(r'--pid:', case=False) & CommandLine.str.contains(r'--outfile:', case=False) & (CommandLine.str.contains(r'.dmp', case=False) | CommandLine.str.contains(r'lsass', case=False) | CommandLine.str.contains(r'.obf', case=False) | CommandLine.str.contains(r'dump', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Download From IP Via Wget.EXE",
        "id": "17f0c0a8-8bd5-4ee0-8c5f-a342c0199f35",
        "status": "test",
        "description": "Detects potentially suspicious file downloads directly from IP addresses using Wget.exe",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wget.exe', case=False) | OriginalFileName=='wget.exe') & CommandLine.str.contains(r'://[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}') & CommandLine.str.contains(r'http', case=False) & (CommandLine.str.contains(r'\\\\s-O\\\\s') | CommandLine.str.contains(r'--output-document', case=False)) & (CommandLine.str.contains(r'.ps1', case=False) | CommandLine.str.contains(r'.ps1\\'', case=False) | CommandLine.str.contains(r'.ps1\"', case=False) | CommandLine.str.contains(r'.dat', case=False) | CommandLine.str.contains(r'.dat\\'', case=False) | CommandLine.str.contains(r'.dat\"', case=False) | CommandLine.str.contains(r'.msi', case=False) | CommandLine.str.contains(r'.msi\\'', case=False) | CommandLine.str.contains(r'.msi\"', case=False) | CommandLine.str.contains(r'.bat', case=False) | CommandLine.str.contains(r'.bat\\'', case=False) | CommandLine.str.contains(r'.bat\"', case=False) | CommandLine.str.contains(r'.exe', case=False) | CommandLine.str.contains(r'.exe\\'', case=False) | CommandLine.str.contains(r'.exe\"', case=False) | CommandLine.str.contains(r'.vbs', case=False) | CommandLine.str.contains(r'.vbs\\'', case=False) | CommandLine.str.contains(r'.vbs\"', case=False) | CommandLine.str.contains(r'.vbe', case=False) | CommandLine.str.contains(r'.vbe\\'', case=False) | CommandLine.str.contains(r'.vbe\"', case=False) | CommandLine.str.contains(r'.hta', case=False) | CommandLine.str.contains(r'.hta\\'', case=False) | CommandLine.str.contains(r'.hta\"', case=False) | CommandLine.str.contains(r'.dll', case=False) | CommandLine.str.contains(r'.dll\\'', case=False) | CommandLine.str.contains(r'.dll\"', case=False) | CommandLine.str.contains(r'.psm1', case=False) | CommandLine.str.contains(r'.psm1\\'', case=False) | CommandLine.str.contains(r'.psm1\"', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Msbuild Execution By Uncommon Parent Process",
        "id": "33be4333-2c6b-44f4-ae28-102cdbde0a31",
        "status": "test",
        "description": "Detects suspicious execution of 'Msbuild.exe' by a uncommon parent process",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\MSBuild.exe', case=False) | OriginalFileName=='MSBuild.exe') & ~ (ParentImage.str.contains(r'\\\\devenv.exe', case=False) | ParentImage.str.contains(r'\\\\cmd.exe', case=False) | ParentImage.str.contains(r'\\\\msbuild.exe', case=False) | ParentImage.str.contains(r'\\\\python.exe', case=False) | ParentImage.str.contains(r'\\\\explorer.exe', case=False) | ParentImage.str.contains(r'\\\\nuget.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious EventLog Recon Activity Using Log Query Utilities",
        "id": "beaa66d6-aa1b-4e3c-80f5-e0145369bfaf",
        "status": "experimental",
        "description": "Detects execution of different log query utilities and commands to search and dump the content of specific event logs or look for specific event IDs.\nThis technique is used by threat actors in order to extract sensitive information from events logs such as usernames, IP addresses, hostnames, etc.\n",
        "tags": [
            "attack.credential-access",
            "attack.discovery",
            "attack.t1552"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'Microsoft-Windows-PowerShell', case=False) | CommandLine.str.contains(r'Microsoft-Windows-Security-Auditing', case=False) | CommandLine.str.contains(r'Microsoft-Windows-TerminalServices-LocalSessionManager', case=False) | CommandLine.str.contains(r'Microsoft-Windows-TerminalServices-RemoteConnectionManager', case=False) | CommandLine.str.contains(r'Microsoft-Windows-Windows Defender', case=False) | CommandLine.str.contains(r'PowerShellCore', case=False) | CommandLine.str.contains(r'Security', case=False) | CommandLine.str.contains(r'Windows PowerShell', case=False) | CommandLine.str.contains(r'*-InstanceId 462**') | CommandLine.str.contains(r'*.eventid -eq 462**') | CommandLine.str.contains(r'*EventCode=*462**') | CommandLine.str.contains(r'*EventIdentifier=*462**') | CommandLine.str.contains(r'*System[EventID=462*]*') | CommandLine.str.contains(r'-InstanceId 4778', case=False) | CommandLine.str.contains(r'.eventid -eq 4778', case=False) | CommandLine.str.contains(r'System[EventID=4778]', case=False) | CommandLine.str.contains(r'*EventCode=*4778**') | CommandLine.str.contains(r'*EventIdentifier=*4778**') | CommandLine.str.contains(r'-InstanceId 25', case=False) | CommandLine.str.contains(r'.eventid -eq 25', case=False) | CommandLine.str.contains(r'System[EventID=25]', case=False) | CommandLine.str.contains(r'*EventCode=*25**') | CommandLine.str.contains(r'*EventIdentifier=*25**')) & (CommandLine.str.contains(r'Select', case=False) & CommandLine.str.contains(r'Win32_NTLogEvent', case=False) | (Image.str.contains(r'\\\\wevtutil.exe', case=False) | OriginalFileName=='wevtutil.exe') & (CommandLine.str.contains(r' qe ', case=False) | CommandLine.str.contains(r' query-events ', case=False)) | (Image.str.contains(r'\\\\wmic.exe', case=False) | OriginalFileName=='wmic.exe') & CommandLine.str.contains(r' ntevent', case=False) | CommandLine.str.contains(r'Get-WinEvent ', case=False) | CommandLine.str.contains(r'get-eventlog ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Rundll32 Setupapi.dll Activity",
        "id": "285b85b1-a555-4095-8652-a8a4106af63f",
        "status": "test",
        "description": "setupapi.dll library provide InstallHinfSection function for processing INF files. INF file may contain instructions allowing to create values in the registry, modify files and install drivers. This technique could be used to obtain persistence via modifying one of Run or RunOnce registry keys, run process or use other DLLs chain calls (see references) InstallHinfSection function in setupapi.dll calls runonce.exe executable regardless of actual content of INF file.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\runonce.exe', case=False) & ParentImage.str.contains(r'\\\\rundll32.exe', case=False) & ParentCommandLine.str.contains(r'setupapi.dll', case=False) & ParentCommandLine.str.contains(r'InstallHinfSection', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Rundll32 Activity",
        "id": "e593cf51-88db-4ee1-b920-37e89012a3c9",
        "status": "test",
        "description": "Detects suspicious execution of rundll32, with specific calls to some DLLs with known LOLBIN functionalities",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'javascript:', case=False) & CommandLine.str.contains(r'.RegisterXLL', case=False) | CommandLine.str.contains(r'url.dll', case=False) & CommandLine.str.contains(r'OpenURL', case=False) | CommandLine.str.contains(r'url.dll', case=False) & CommandLine.str.contains(r'OpenURLA', case=False) | CommandLine.str.contains(r'url.dll', case=False) & CommandLine.str.contains(r'FileProtocolHandler', case=False) | CommandLine.str.contains(r'zipfldr.dll', case=False) & CommandLine.str.contains(r'RouteTheCall', case=False) | CommandLine.str.contains(r'shell32.dll', case=False) & CommandLine.str.contains(r'Control_RunDLL', case=False) | CommandLine.str.contains(r'shell32.dll', case=False) & CommandLine.str.contains(r'ShellExec_RunDLL', case=False) | CommandLine.str.contains(r'mshtml.dll', case=False) & CommandLine.str.contains(r'PrintHTML', case=False) | CommandLine.str.contains(r'advpack.dll', case=False) & CommandLine.str.contains(r'LaunchINFSection', case=False) | CommandLine.str.contains(r'advpack.dll', case=False) & CommandLine.str.contains(r'RegisterOCX', case=False) | CommandLine.str.contains(r'ieadvpack.dll', case=False) & CommandLine.str.contains(r'LaunchINFSection', case=False) | CommandLine.str.contains(r'ieadvpack.dll', case=False) & CommandLine.str.contains(r'RegisterOCX', case=False) | CommandLine.str.contains(r'ieframe.dll', case=False) & CommandLine.str.contains(r'OpenURL', case=False) | CommandLine.str.contains(r'shdocvw.dll', case=False) & CommandLine.str.contains(r'OpenURL', case=False) | CommandLine.str.contains(r'syssetup.dll', case=False) & CommandLine.str.contains(r'SetupInfObjectInstallAction', case=False) | CommandLine.str.contains(r'setupapi.dll', case=False) & CommandLine.str.contains(r'InstallHinfSection', case=False) | CommandLine.str.contains(r'pcwutl.dll', case=False) & CommandLine.str.contains(r'LaunchApplication', case=False) | CommandLine.str.contains(r'dfshim.dll', case=False) & CommandLine.str.contains(r'ShOpenVerbApplication', case=False) | CommandLine.str.contains(r'dfshim.dll', case=False) & CommandLine.str.contains(r'ShOpenVerbShortcut', case=False) | CommandLine.str.contains(r'scrobj.dll', case=False) & CommandLine.str.contains(r'GenerateTypeLib', case=False) & CommandLine.str.contains(r'http', case=False) | CommandLine.str.contains(r'shimgvw.dll', case=False) & CommandLine.str.contains(r'ImageView_Fullscreen', case=False) & CommandLine.str.contains(r'http', case=False) | CommandLine.str.contains(r'comsvcs.dll', case=False) & CommandLine.str.contains(r'MiniDump', case=False)) & ~ (CommandLine.str.contains(r'shell32.dll,Control_RunDLL desk.cpl,screensaver,@screensaver', case=False) | ParentImage=='C:\\\\Windows\\\\System32\\\\control.exe' & ParentCommandLine.str.contains(r'.cpl', case=False) & CommandLine.str.contains(r'Shell32.dll', case=False) & CommandLine.str.contains(r'Control_RunDLL', case=False) & CommandLine.str.contains(r'.cpl', case=False) | ParentImage=='C:\\\\Windows\\\\System32\\\\control.exe' & CommandLine.str.contains(r'\"C:\\\\Windows\\\\system32\\\\rundll32.exe\" Shell32.dll,Control_RunDLL \"C:\\\\Windows\\\\System32\\\\', case=False) & CommandLine.str.contains(r'.cpl\",', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - ScreenConnect Potential Suspicious Remote Command Execution",
        "id": "7b582f1a-b318-4c6a-bf4e-66fe49bf55a5",
        "status": "test",
        "description": "Detects potentially suspicious child processes launched via the ScreenConnect client service.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentCommandLine.str.contains(r':\\\\Windows\\\\TEMP\\\\ScreenConnect\\\\', case=False) & ParentCommandLine.str.contains(r'run.cmd', case=False) & (Image.str.contains(r'\\\\bitsadmin.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\curl.exe', case=False) | Image.str.contains(r'\\\\dllhost.exe', case=False) | Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\nltest.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wevtutil.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Nltest.EXE Execution",
        "id": "903076ff-f442-475a-b667-4f246bcc203b",
        "status": "test",
        "description": "Detects nltest commands that can be used for information discovery",
        "tags": [
            "attack.discovery",
            "attack.t1016",
            "attack.t1018",
            "attack.t1482"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\nltest.exe', case=False) | OriginalFileName=='nltestrk.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Chromium Browser Headless Execution To Mockbin Like Site",
        "id": "1c526788-0abe-4713-862f-b520da5e5316",
        "status": "test",
        "description": "Detects the execution of a Chromium based browser process with the \"headless\" flag and a URL pointing to the mockbin.org service (which can be used to exfiltrate data).",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\brave.exe', case=False) | Image.str.contains(r'\\\\chrome.exe', case=False) | Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False)) & CommandLine.str.contains(r'--headless', case=False) & (CommandLine.str.contains(r'://run.mocky', case=False) | CommandLine.str.contains(r'://mockbin', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Insensitive Subfolder Search Via Findstr.EXE",
        "id": "04936b66-3915-43ad-a8e5-809eadfd1141",
        "status": "test",
        "description": "Detects execution of findstr with the \"s\" and \"i\" flags for a \"subfolder\" and \"insensitive\" search respectively. Attackers sometimes leverage this built-in utility to search the system for interesting files or filter through results of commands.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1564.004",
            "attack.t1552.001",
            "attack.t1105"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'findstr', case=False) | Image.str.contains(r'findstr.exe', case=False) | OriginalFileName=='FINDSTR.EXE') & (CommandLine.str.contains(r' -s ', case=False) | CommandLine.str.contains(r' /s ', case=False) | CommandLine.str.contains(r' \u2013s ', case=False) | CommandLine.str.contains(r' \u2014s ', case=False) | CommandLine.str.contains(r' \u2015s ', case=False)) & (CommandLine.str.contains(r' -i ', case=False) | CommandLine.str.contains(r' /i ', case=False) | CommandLine.str.contains(r' \u2013i ', case=False) | CommandLine.str.contains(r' \u2014i ', case=False) | CommandLine.str.contains(r' \u2015i ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use of W32tm as Timer",
        "id": "6da2c9f5-7c53-401b-aacb-92c040ce1215",
        "status": "test",
        "description": "When configured with suitable command line arguments, w32tm can act as a delay mechanism",
        "tags": [
            "attack.discovery",
            "attack.t1124"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\w32tm.exe', case=False) | OriginalFileName=='w32time.dll') & CommandLine.str.contains(r'/stripchart', case=False) & CommandLine.str.contains(r'/computer:', case=False) & CommandLine.str.contains(r'/period:', case=False) & CommandLine.str.contains(r'/dataonly', case=False) & CommandLine.str.contains(r'/samples:', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Process Injection Via Msra.EXE",
        "id": "744a188b-0415-4792-896f-11ddb0588dbc",
        "status": "test",
        "description": "Detects potential process injection via Microsoft Remote Asssistance (Msra.exe) by looking at suspicious child processes spawned from the aforementioned process. It has been a target used by many threat actors and used for discovery and persistence tactics",
        "tags": [
            "attack.defense-evasion",
            "attack.t1055"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\msra.exe', case=False) & ParentCommandLine.str.contains(r'msra.exe', case=False) & (Image.str.contains(r'\\\\arp.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\netstat.exe', case=False) | Image.str.contains(r'\\\\nslookup.exe', case=False) | Image.str.contains(r'\\\\route.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\whoami.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential PowerShell Obfuscation Via Reversed Commands",
        "id": "b6b49cd1-34d6-4ead-b1bf-176e9edba9a4",
        "status": "test",
        "description": "Detects the presence of reversed PowerShell commands in the CommandLine. This is often used as a method of obfuscation by attackers",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r'hctac', case=False) | CommandLine.str.contains(r'kaerb', case=False) | CommandLine.str.contains(r'dnammoc', case=False) | CommandLine.str.contains(r'ekovn', case=False) | CommandLine.str.contains(r'eliFd', case=False) | CommandLine.str.contains(r'rahc', case=False) | CommandLine.str.contains(r'etirw', case=False) | CommandLine.str.contains(r'golon', case=False) | CommandLine.str.contains(r'tninon', case=False) | CommandLine.str.contains(r'eddih', case=False) | CommandLine.str.contains(r'tpircS', case=False) | CommandLine.str.contains(r'ssecorp', case=False) | CommandLine.str.contains(r'llehsrewop', case=False) | CommandLine.str.contains(r'esnopser', case=False) | CommandLine.str.contains(r'daolnwod', case=False) | CommandLine.str.contains(r'tneilCbeW', case=False) | CommandLine.str.contains(r'tneilc', case=False) | CommandLine.str.contains(r'ptth', case=False) | CommandLine.str.contains(r'elifotevas', case=False) | CommandLine.str.contains(r'46esab', case=False) | CommandLine.str.contains(r'htaPpmeTteG', case=False) | CommandLine.str.contains(r'tcejbO', case=False) | CommandLine.str.contains(r'maerts', case=False) | CommandLine.str.contains(r'hcaerof', case=False) | CommandLine.str.contains(r'retupmoc', case=False)) & ~ (CommandLine.str.contains(r' -EncodedCommand ', case=False) | CommandLine.str.contains(r' -enc ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Rundll32 Registered COM Objects",
        "id": "f1edd233-30b5-4823-9e6a-c4171b24d316",
        "status": "test",
        "description": "load malicious registered COM objects",
        "tags": [
            "attack.privilege-escalation",
            "attack.persistence",
            "attack.t1546.015"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & (CommandLine.str.contains(r'-sta ', case=False) | CommandLine.str.contains(r'-localserver ', case=False)) & CommandLine.str.contains(r'{', case=False) & CommandLine.str.contains(r'}', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Bypass UAC via Fodhelper.exe",
        "id": "7f741dcf-fc22-4759-87b4-9ae8376676a2",
        "status": "test",
        "description": "Identifies use of Fodhelper.exe to bypass User Account Control. Adversaries use this technique to execute privileged processes.",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\fodhelper.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use of Pcalua For Execution",
        "id": "0955e4e1-c281-4fb9-9ee1-5ee7b4b754d2",
        "status": "test",
        "description": "Detects execition of commands and binaries from the context of The program compatibility assistant (Pcalua.exe). This can be used as a LOLBIN in order to bypass application whitelisting.",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\pcalua.exe', case=False) & CommandLine.str.contains(r' -a', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - GoToAssist Execution",
        "id": "b6d98a4f-cef0-4abf-bbf6-24132854a83d",
        "status": "test",
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description=='GoTo Opener' | Product=='GoTo Opener' | Company=='LogMeIn, Inc.')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Explorer NOUACCHECK Flag",
        "id": "534f2ef7-e8a2-4433-816d-c91bccde289b",
        "status": "test",
        "description": "Detects suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows to run all sub processes of that newly started explorer.exe without any UAC checks",
        "tags": [
            "attack.defense-evasion",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\explorer.exe', case=False) & CommandLine.str.contains(r'/NOUACCHECK', case=False) & ~ (ParentCommandLine=='C:\\\\Windows\\\\system32\\\\svchost.exe -k netsvcs -p -s Schedule' | ParentImage=='C:\\\\Windows\\\\System32\\\\svchost.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential LSASS Process Dump Via Procdump",
        "id": "5afee48e-67dd-4e03-a783-f74259dcf998",
        "status": "stable",
        "description": "Detects suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process.\nThis way we are also able to catch cases in which the attacker has renamed the procdump executable.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.credential-access",
            "attack.t1003.001",
            "car.2013-05-009"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' -ma ', case=False) | CommandLine.str.contains(r' /ma ', case=False) | CommandLine.str.contains(r' \u2013ma ', case=False) | CommandLine.str.contains(r' \u2014ma ', case=False) | CommandLine.str.contains(r' \u2015ma ', case=False)) & CommandLine.str.contains(r' ls', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Powershell Base64 Encoded MpPreference Cmdlet",
        "id": "c6fb44c6-71f5-49e6-9462-1425d328aee3",
        "status": "test",
        "description": "Detects base64 encoded \"MpPreference\" PowerShell cmdlet code that tries to modifies or tamper with Windows Defender AV",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'QWRkLU1wUHJlZmVyZW5jZS', case=False) | CommandLine.str.contains(r'FkZC1NcFByZWZlcmVuY2Ug', case=False) | CommandLine.str.contains(r'BZGQtTXBQcmVmZXJlbmNlI', case=False) | CommandLine.str.contains(r'U2V0LU1wUHJlZmVyZW5jZS', case=False) | CommandLine.str.contains(r'NldC1NcFByZWZlcmVuY2Ug', case=False) | CommandLine.str.contains(r'TZXQtTXBQcmVmZXJlbmNlI', case=False) | CommandLine.str.contains(r'YWRkLW1wcHJlZmVyZW5jZS', case=False) | CommandLine.str.contains(r'FkZC1tcHByZWZlcmVuY2Ug', case=False) | CommandLine.str.contains(r'hZGQtbXBwcmVmZXJlbmNlI', case=False) | CommandLine.str.contains(r'c2V0LW1wcHJlZmVyZW5jZS', case=False) | CommandLine.str.contains(r'NldC1tcHByZWZlcmVuY2Ug', case=False) | CommandLine.str.contains(r'zZXQtbXBwcmVmZXJlbmNlI', case=False) | CommandLine.str.contains(r'QQBkAGQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgA', case=False) | CommandLine.str.contains(r'EAZABkAC0ATQBwAFAAcgBlAGYAZQByAGUAbgBjAGUAIA', case=False) | CommandLine.str.contains(r'BAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAA', case=False) | CommandLine.str.contains(r'UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgA', case=False) | CommandLine.str.contains(r'MAZQB0AC0ATQBwAFAAcgBlAGYAZQByAGUAbgBjAGUAIA', case=False) | CommandLine.str.contains(r'TAGUAdAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAA', case=False) | CommandLine.str.contains(r'YQBkAGQALQBtAHAAcAByAGUAZgBlAHIAZQBuAGMAZQAgA', case=False) | CommandLine.str.contains(r'EAZABkAC0AbQBwAHAAcgBlAGYAZQByAGUAbgBjAGUAIA', case=False) | CommandLine.str.contains(r'hAGQAZAAtAG0AcABwAHIAZQBmAGUAcgBlAG4AYwBlACAA', case=False) | CommandLine.str.contains(r'cwBlAHQALQBtAHAAcAByAGUAZgBlAHIAZQBuAGMAZQAgA', case=False) | CommandLine.str.contains(r'MAZQB0AC0AbQBwAHAAcgBlAGYAZQByAGUAbgBjAGUAIA', case=False) | CommandLine.str.contains(r'zAGUAdAAtAG0AcABwAHIAZQBmAGUAcgBlAG4AYwBlACAA', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Process Created Via Wmic.EXE",
        "id": "526be59f-a573-4eea-b5f7-f0973207634d",
        "status": "test",
        "description": "Detects new process creation using WMIC via the \"process call create\" flag",
        "tags": [
            "attack.execution",
            "attack.t1047",
            "car.2016-03-002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wmic.exe', case=False) | OriginalFileName=='wmic.exe') & CommandLine.str.contains(r'process', case=False) & CommandLine.str.contains(r'call', case=False) & CommandLine.str.contains(r'create', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Node Process Executions",
        "id": "df1f26d3-bea7-4700-9ea2-ad3e990cf90e",
        "status": "test",
        "description": "Detects the execution of other scripts using the Node executable packaged with Adobe Creative Cloud",
        "tags": [
            "attack.defense-evasion",
            "attack.t1127",
            "attack.t1059.007"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\Adobe Creative Cloud Experience\\\\libs\\\\node.exe', case=False) & ~ CommandLine.str.contains(r'Adobe Creative Cloud Experience\\\\js', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use of Scriptrunner.exe",
        "id": "64760eef-87f7-4ed3-93fd-655668ea9420",
        "status": "test",
        "description": "The \"ScriptRunner.exe\" binary can be abused to proxy execution through it and bypass possible whitelisting",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ScriptRunner.exe', case=False) | OriginalFileName=='ScriptRunner.exe') & CommandLine.str.contains(r' -appvscript ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Operator Bloopers Cobalt Strike Modules",
        "id": "4f154fb6-27d1-4813-a759-78b93e0b9c48",
        "status": "test",
        "description": "Detects Cobalt Strike module/commands accidentally entered in CMD shell",
        "tags": [
            "attack.execution",
            "attack.t1059.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='Cmd.Exe' | Image.str.contains(r'\\\\cmd.exe', case=False)) & (CommandLine.str.contains(r'Invoke-UserHunter', case=False) | CommandLine.str.contains(r'Invoke-ShareFinder', case=False) | CommandLine.str.contains(r'Invoke-Kerberoast', case=False) | CommandLine.str.contains(r'Invoke-SMBAutoBrute', case=False) | CommandLine.str.contains(r'Invoke-Nightmare', case=False) | CommandLine.str.contains(r'zerologon', case=False) | CommandLine.str.contains(r'av_query', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Service Creation Using PowerShell",
        "id": "c02e96b7-c63a-4c47-bd83-4a9f74afcfb2",
        "status": "test",
        "description": "Detects the creation of a new service using powershell.",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1543.003"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'New-Service', case=False) & CommandLine.str.contains(r'-BinaryPathName', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Run PowerShell Script from Redirected Input Stream",
        "id": "c83bf4b5-cdf0-437c-90fa-43d734f7c476",
        "status": "test",
        "description": "Detects PowerShell script execution via input stream redirect",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & CommandLine.str.contains(r'\\\\s-\\\\s*<')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - ScreenConnect Execution",
        "id": "57bff678-25d1-4d6c-8211-8ca106d12053",
        "status": "test",
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description=='ScreenConnect Service' | Product=='ScreenConnect' | Company=='ScreenConnect Software')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Pubprn.vbs Proxy Execution",
        "id": "1fb76ab8-fa60-4b01-bddd-71e89bf555da",
        "status": "test",
        "description": "Detects the use of the 'Pubprn.vbs' Microsoft signed script to execute commands.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1216.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\pubprn.vbs', case=False) & CommandLine.str.contains(r'script:', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Abused Debug Privilege by Arbitrary Parent Processes",
        "id": "d522eca2-2973-4391-a3e0-ef0374321dae",
        "status": "test",
        "description": "Detection of unusual child processes by different system processes",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1548"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\winlogon.exe', case=False) | ParentImage.str.contains(r'\\\\services.exe', case=False) | ParentImage.str.contains(r'\\\\lsass.exe', case=False) | ParentImage.str.contains(r'\\\\csrss.exe', case=False) | ParentImage.str.contains(r'\\\\smss.exe', case=False) | ParentImage.str.contains(r'\\\\wininit.exe', case=False) | ParentImage.str.contains(r'\\\\spoolsv.exe', case=False) | ParentImage.str.contains(r'\\\\searchindexer.exe', case=False)) & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False)) & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll', 'Cmd.Exe']) & ~ (CommandLine.str.contains(r' route ', case=False) & CommandLine.str.contains(r' ADD ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Scheduled Task Creation Via Schtasks.EXE",
        "id": "92626ddd-662c-49e3-ac59-f6535f12d189",
        "status": "test",
        "description": "Detects the creation of scheduled tasks by user accounts via the \"schtasks\" utility.",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1053.005",
            "attack.s0111",
            "car.2013-08-001",
            "stp.1u"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\schtasks.exe', case=False) & CommandLine.str.contains(r' /create ', case=False) & ~ (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Unquoted Service Path Reconnaissance Via Wmic.EXE",
        "id": "68bcd73b-37ef-49cb-95fc-edc809730be6",
        "status": "test",
        "description": "Detects known WMI recon method to look for unquoted service paths using wmic. Often used by pentester and attacker enumeration scripts",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='wmic.exe' | Image.str.contains(r'\\\\WMIC.exe', case=False)) & CommandLine.str.contains(r' service get ', case=False) & CommandLine.str.contains(r'name,displayname,pathname,startmode', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Dism Remove Online Package",
        "id": "43e32da2-fdd0-4156-90de-50dfd62636f9",
        "status": "test",
        "description": "Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\DismHost.exe', case=False) & ParentCommandLine.str.contains(r'/Online', case=False) & ParentCommandLine.str.contains(r'/Disable-Feature', case=False) | Image.str.contains(r'\\\\Dism.exe', case=False) & CommandLine.str.contains(r'/Online', case=False) & CommandLine.str.contains(r'/Disable-Feature', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Webshell Detection With Command Line Keywords",
        "id": "bed2a484-9348-4143-8a8a-b801c979301c",
        "status": "test",
        "description": "Detects certain command line parameters often used during reconnaissance activity via web shells",
        "tags": [
            "attack.persistence",
            "attack.t1505.003",
            "attack.t1018",
            "attack.t1033",
            "attack.t1087"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\w3wp.exe', case=False) | ParentImage.str.contains(r'\\\\php-cgi.exe', case=False) | ParentImage.str.contains(r'\\\\nginx.exe', case=False) | ParentImage.str.contains(r'\\\\httpd.exe', case=False) | ParentImage.str.contains(r'\\\\caddy.exe', case=False) | ParentImage.str.contains(r'\\\\ws_tomcatservice.exe', case=False) | (ParentImage.str.contains(r'\\\\java.exe', case=False) | ParentImage.str.contains(r'\\\\javaw.exe', case=False)) & (ParentImage.str.contains(r'-tomcat-', case=False) | ParentImage.str.contains(r'\\\\tomcat', case=False)) | (ParentImage.str.contains(r'\\\\java.exe', case=False) | ParentImage.str.contains(r'\\\\javaw.exe', case=False)) & (CommandLine.str.contains(r'catalina.jar', case=False) | CommandLine.str.contains(r'CATALINA_HOME', case=False))) & ((OriginalFileName==['net.exe', 'net1.exe']) & (CommandLine.str.contains(r' user ', case=False) | CommandLine.str.contains(r' use ', case=False) | CommandLine.str.contains(r' group ', case=False)) | OriginalFileName=='ping.exe' & CommandLine.str.contains(r' -n ', case=False) | CommandLine.str.contains(r'&cd&echo', case=False) | CommandLine.str.contains(r'cd /d ', case=False) | OriginalFileName=='wmic.exe' & CommandLine.str.contains(r' /node:', case=False) | (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & (CommandLine.str.contains(r' -enc ', case=False) | CommandLine.str.contains(r' -EncodedCommand ', case=False) | CommandLine.str.contains(r' -w hidden ', case=False) | CommandLine.str.contains(r' -windowstyle hidden', case=False) | CommandLine.str.contains(r'.WebClient).Download', case=False)) | Image.str.contains(r'\\\\dsquery.exe', case=False) | Image.str.contains(r'\\\\find.exe', case=False) | Image.str.contains(r'\\\\findstr.exe', case=False) | Image.str.contains(r'\\\\ipconfig.exe', case=False) | Image.str.contains(r'\\\\netstat.exe', case=False) | Image.str.contains(r'\\\\nslookup.exe', case=False) | Image.str.contains(r'\\\\pathping.exe', case=False) | Image.str.contains(r'\\\\quser.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\systeminfo.exe', case=False) | Image.str.contains(r'\\\\tasklist.exe', case=False) | Image.str.contains(r'\\\\tracert.exe', case=False) | Image.str.contains(r'\\\\ver.exe', case=False) | Image.str.contains(r'\\\\wevtutil.exe', case=False) | Image.str.contains(r'\\\\whoami.exe', case=False) | OriginalFileName==['dsquery.exe', 'find.exe', 'findstr.exe', 'ipconfig.exe', 'netstat.exe', 'nslookup.exe', 'pathping.exe', 'quser.exe', 'schtasks.exe', 'sysinfo.exe', 'tasklist.exe', 'tracert.exe', 'ver.exe', 'VSSADMIN.EXE', 'wevtutil.exe', 'whoami.exe'] | CommandLine.str.contains(r' Test-NetConnection ', case=False) | CommandLine.str.contains(r'dir \\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Download From IP Via Wget.EXE - Paths",
        "id": "40aa399c-7b02-4715-8e5f-73572b493f33",
        "status": "test",
        "description": "Detects potentially suspicious file downloads directly from IP addresses and stored in suspicious locations using Wget.exe",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wget.exe', case=False) | OriginalFileName=='wget.exe') & CommandLine.str.contains(r'://[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}') & CommandLine.str.contains(r'http', case=False) & (CommandLine.str.contains(r'\\\\s-O\\\\s') | CommandLine.str.contains(r'--output-document', case=False)) & (CommandLine.str.contains(r':\\\\PerfLogs\\\\', case=False) | CommandLine.str.contains(r':\\\\Temp\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Help\\\\', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\Temporary Internet', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Favorites\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Favourites\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Contacts\\\\', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\Pictures\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SecurityXploded Execution",
        "id": "7679d464-4f74-45e2-9e01-ac66c5eb041a",
        "status": "stable",
        "description": "Detects the execution of SecurityXploded Tools",
        "tags": [
            "attack.credential-access",
            "attack.t1555"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Company=='SecurityXploded' | Image.str.contains(r'PasswordDump.exe', case=False) | OriginalFileName.str.contains(r'PasswordDump.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Child Process Of Setres.EXE",
        "id": "835e75bf-4bfd-47a4-b8a6-b766cac8bcb7",
        "status": "test",
        "description": "Detects uncommon child process of Setres.EXE.\nSetres.EXE is a Windows server only process and tool that can be used to set the screen resolution.\nIt can potentially be abused in order to launch any arbitrary file with a name containing the word \"choice\" from the current execution path.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1202"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\setres.exe', case=False) & Image.str.contains(r'\\\\choice', case=False) & ~ (Image.str.contains(r'C:\\\\Windows\\\\System32\\\\choice.exe', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\choice.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LSASS Dump Keyword In CommandLine",
        "id": "ffa6861c-4461-4f59-8a41-578c39f3f23e",
        "status": "test",
        "description": "Detects the presence of the keywords \"lsass\" and \".dmp\" in the commandline, which could indicate a potential attempt to dump or create a dump of the lsass process.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'lsass.dmp', case=False) | CommandLine.str.contains(r'lsass.zip', case=False) | CommandLine.str.contains(r'lsass.rar', case=False) | CommandLine.str.contains(r'Andrew.dmp', case=False) | CommandLine.str.contains(r'Coredump.dmp', case=False) | CommandLine.str.contains(r'NotLSASS.zip', case=False) | CommandLine.str.contains(r'lsass_2', case=False) | CommandLine.str.contains(r'lsassdump', case=False) | CommandLine.str.contains(r'lsassdmp', case=False) | CommandLine.str.contains(r'lsass', case=False) & CommandLine.str.contains(r'.dmp', case=False) | CommandLine.str.contains(r'SQLDmpr', case=False) & CommandLine.str.contains(r'.mdmp', case=False) | CommandLine.str.contains(r'nanodump', case=False) & CommandLine.str.contains(r'.dmp', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Download/Upload Activity Using Type Command",
        "id": "aa0b3a82-eacc-4ec3-9150-b5a9a3e3f82f",
        "status": "test",
        "description": "Detects usage of the \"type\" command to download/upload data from WebDAV server",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'type ', case=False) & CommandLine.str.contains(r' > \\\\\\\\', case=False) | CommandLine.str.contains(r'type \\\\\\\\', case=False) & CommandLine.str.contains(r' > ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Raccine Uninstall",
        "id": "a31eeaed-3fd5-478e-a8ba-e62c6b3f9ecc",
        "status": "test",
        "description": "Detects commands that indicate a Raccine removal from an end system. Raccine is a free ransomware protection tool.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'taskkill ', case=False) & CommandLine.str.contains(r'RaccineSettings.exe', case=False) | CommandLine.str.contains(r'reg.exe', case=False) & CommandLine.str.contains(r'delete', case=False) & CommandLine.str.contains(r'Raccine Tray', case=False) | CommandLine.str.contains(r'schtasks', case=False) & CommandLine.str.contains(r'/DELETE', case=False) & CommandLine.str.contains(r'Raccine Rules Updater', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WMI Persistence - Script Event Consumer",
        "id": "ec1d5e28-8f3b-4188-a6f8-6e8df81dc28e",
        "status": "test",
        "description": "Detects WMI script event consumers",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1546.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image=='C:\\\\WINDOWS\\\\system32\\\\wbem\\\\scrcons.exe' & ParentImage=='C:\\\\Windows\\\\System32\\\\svchost.exe'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Suspicious Browser Launch From Document Reader Process",
        "id": "1193d960-2369-499f-a158-7b50a31df682",
        "status": "experimental",
        "description": "Detects when a browser process or browser tab is launched from an application that handles document files such as Adobe, Microsoft Office, etc. And connects to a web application over http(s), this could indicate a possible phishing attempt.\n",
        "tags": [
            "attack.execution",
            "attack.t1204.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'Acrobat Reader', case=False) | ParentImage.str.contains(r'Microsoft Office', case=False) | ParentImage.str.contains(r'PDF Reader', case=False)) & (Image.str.contains(r'\\\\brave.exe', case=False) | Image.str.contains(r'\\\\chrome.exe', case=False) | Image.str.contains(r'\\\\firefox.exe', case=False) | Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\maxthon.exe', case=False) | Image.str.contains(r'\\\\seamonkey.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False) | Image.str.contains(r'', case=False)) & CommandLine.str.contains(r'http', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Port Forwarding Activity Via SSH.EXE",
        "id": "327f48c1-a6db-4eb8-875a-f6981f1b0183",
        "status": "test",
        "description": "Detects port forwarding activity via SSH.exe",
        "tags": [
            "attack.command-and-control",
            "attack.lateral-movement",
            "attack.t1572",
            "attack.t1021.001",
            "attack.t1021.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\ssh.exe', case=False) & (CommandLine.str.contains(r' -R ', case=False) | CommandLine.str.contains(r' /R ', case=False) | CommandLine.str.contains(r' \u2013R ', case=False) | CommandLine.str.contains(r' \u2014R ', case=False) | CommandLine.str.contains(r' \u2015R ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Write Protect For Storage Disabled",
        "id": "75f7a0e2-7154-4c4d-9eae-5cdb4e0a5c13",
        "status": "test",
        "description": "Detects applications trying to modify the registry in order to disable any write-protect property for storage devices.\nThis could be a precursor to a ransomware attack and has been an observed technique used by cypherpunk group.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'\\\\System\\\\CurrentControlSet\\\\Control', case=False) & CommandLine.str.contains(r'Write Protection', case=False) & CommandLine.str.contains(r'0', case=False) & CommandLine.str.contains(r'storage', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "IIS Native-Code Module Command Line Installation",
        "id": "9465ddf4-f9e4-4ebd-8d98-702df3a93239",
        "status": "test",
        "description": "Detects suspicious IIS native-code module installations via command line",
        "tags": [
            "attack.persistence",
            "attack.t1505.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\appcmd.exe', case=False) | OriginalFileName=='appcmd.exe') & CommandLine.str.contains(r'install', case=False) & CommandLine.str.contains(r'module', case=False) & (CommandLine.str.contains(r'-name:', case=False) | CommandLine.str.contains(r'/name:', case=False) | CommandLine.str.contains(r'\u2013name:', case=False) | CommandLine.str.contains(r'\u2014name:', case=False) | CommandLine.str.contains(r'\u2015name:', case=False)) & ~ ParentImage=='C:\\\\Windows\\\\System32\\\\inetsrv\\\\iissetup.exe'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Download Using ProtocolHandler.exe",
        "id": "104cdb48-a7a8-4ca7-a453-32942c6e5dcb",
        "status": "test",
        "description": "Detects usage of \"ProtocolHandler\" to download files. Downloaded files will be located in the cache folder (for example - %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE)\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\protocolhandler.exe', case=False) | OriginalFileName=='ProtocolHandler.exe') & (CommandLine.str.contains(r'ftp://', case=False) | CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CMSTP UAC Bypass via COM Object Access",
        "id": "4b60e6f2-bf39-47b4-b4ea-398e33cfe253",
        "status": "stable",
        "description": "Detects UAC Bypass Attempt Using Microsoft Connection Manager Profile Installer Autoelevate-capable COM Objects (e.g. UACMe ID of 41, 43, 58 or 65)",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002",
            "attack.t1218.003",
            "attack.g0069",
            "car.2019-04-001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\DllHost.exe', case=False) & (ParentCommandLine.str.contains(r' /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}', case=False) | ParentCommandLine.str.contains(r' /Processid:{3E000D72-A845-4CD9-BD83-80C07C3B881F}', case=False) | ParentCommandLine.str.contains(r' /Processid:{BD54C901-076B-434E-B6C7-17C531F4AB41}', case=False) | ParentCommandLine.str.contains(r' /Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}', case=False) | ParentCommandLine.str.contains(r' /Processid:{E9495B87-D950-4AB5-87A5-FF6D70BF3E90}', case=False)) & (IntegrityLevel==['High', 'System', 'S-1-16-16384', 'S-1-16-12288'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious CustomShellHost Execution",
        "id": "84b14121-9d14-416e-800b-f3b829c5a14d",
        "status": "test",
        "description": "Detects the execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe'",
        "tags": [
            "attack.defense-evasion",
            "attack.t1216"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\CustomShellHost.exe', case=False) & ~ Image=='C:\\\\Windows\\\\explorer.exe'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Loaded Module Enumeration Via Tasklist.EXE",
        "id": "34275eb8-fa19-436b-b959-3d9ecd53fa1f",
        "status": "test",
        "description": "Detects the enumeration of a specific DLL or EXE being used by a binary via \"tasklist.exe\".\nThis is often used by attackers in order to find the specific process identifier (PID) that is using the DLL in question.\nIn order to dump the process memory or perform other nefarious actions.\n",
        "tags": [
            "attack.t1003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\tasklist.exe', case=False) | OriginalFileName=='tasklist.exe') & (CommandLine.str.contains(r'-m', case=False) | CommandLine.str.contains(r'/m', case=False) | CommandLine.str.contains(r'\u2013m', case=False) | CommandLine.str.contains(r'\u2014m', case=False) | CommandLine.str.contains(r'\u2015m', case=False)) & CommandLine.str.contains(r'rdpcorets.dll', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious ScreenSave Change by Reg.exe",
        "id": "0fc35fc3-efe6-4898-8a37-0b233339524f",
        "status": "test",
        "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity.\nScreensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension\n",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1546.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\reg.exe', case=False) & (CommandLine.str.contains(r'HKEY_CURRENT_USER\\\\Control Panel\\\\Desktop', case=False) | CommandLine.str.contains(r'HKCU\\\\Control Panel\\\\Desktop', case=False)) & (CommandLine.str.contains(r'/v ScreenSaveActive', case=False) & CommandLine.str.contains(r'/t REG_SZ', case=False) & CommandLine.str.contains(r'/d 1', case=False) & CommandLine.str.contains(r'/f', case=False) | CommandLine.str.contains(r'/v ScreenSaveTimeout', case=False) & CommandLine.str.contains(r'/t REG_SZ', case=False) & CommandLine.str.contains(r'/d ', case=False) & CommandLine.str.contains(r'/f', case=False) | CommandLine.str.contains(r'/v ScreenSaverIsSecure', case=False) & CommandLine.str.contains(r'/t REG_SZ', case=False) & CommandLine.str.contains(r'/d 0', case=False) & CommandLine.str.contains(r'/f', case=False) | CommandLine.str.contains(r'/v SCRNSAVE.EXE', case=False) & CommandLine.str.contains(r'/t REG_SZ', case=False) & CommandLine.str.contains(r'/d ', case=False) & CommandLine.str.contains(r'.scr', case=False) & CommandLine.str.contains(r'/f', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "SafeBoot Registry Key Deleted Via Reg.EXE",
        "id": "fc0e89b5-adb0-43c1-b749-c12a10ec37de",
        "status": "test",
        "description": "Detects execution of \"reg.exe\" commands with the \"delete\" flag on safe boot registry keys. Often used by attacker to prevent safeboot execution of security products",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'reg.exe', case=False) | OriginalFileName=='reg.exe') & CommandLine.str.contains(r' delete ', case=False) & CommandLine.str.contains(r'\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\SafeBoot', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WSL Child Process Anomaly",
        "id": "2267fe65-0681-42ad-9a6d-46553d3f3480",
        "status": "test",
        "description": "Detects uncommon or suspicious child processes spawning from a WSL process. This could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\wsl.exe', case=False) | ParentImage.str.contains(r'\\\\wslhost.exe', case=False)) & (Image.str.contains(r'\\\\calc.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Image.str.contains(r'C:\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False) | Image.str.contains(r'C:\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\Downloads\\\\', case=False) | Image.str.contains(r'\\\\Desktop\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential AMSI Bypass Using NULL Bits",
        "id": "92a974db-ab84-457f-9ec0-55db83d7a825",
        "status": "test",
        "description": "Detects usage of special strings/null bits in order to potentially bypass AMSI functionalities",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'if(0){{{0}}}\\' -f $(0 -as [char]) +', case=False) | CommandLine.str.contains(r'#<NULL>', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - AdvancedRun Suspicious Execution",
        "id": "fa00b701-44c6-4679-994d-5a18afa8a707",
        "status": "test",
        "description": "Detects the execution of AdvancedRun utility in the context of the TrustedInstaller, SYSTEM, Local Service or Network Service accounts",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1134.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'/EXEFilename', case=False) | CommandLine.str.contains(r'/CommandLine', case=False)) & (CommandLine.str.contains(r' /RunAs 8 ', case=False) | CommandLine.str.contains(r' /RunAs 4 ', case=False) | CommandLine.str.contains(r' /RunAs 10 ', case=False) | CommandLine.str.contains(r' /RunAs 11 ', case=False) | CommandLine.str.contains(r'/RunAs 8', case=False) | CommandLine.str.contains(r'/RunAs 4', case=False) | CommandLine.str.contains(r'/RunAs 10', case=False) | CommandLine.str.contains(r'/RunAs 11', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UtilityFunctions.ps1 Proxy Dll",
        "id": "0403d67d-6227-4ea8-8145-4e72db7da120",
        "status": "test",
        "description": "Detects the use of a Microsoft signed script executing a managed DLL with PowerShell.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1216"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'UtilityFunctions.ps1', case=False) | CommandLine.str.contains(r'RegSnapin ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Stop Windows Service Via Net.EXE",
        "id": "88872991-7445-4a22-90b2-a3adadb0e827",
        "status": "test",
        "description": "Detects the stopping of a Windows service via the \"net\" utility.",
        "tags": [
            "attack.impact",
            "attack.t1489"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName==['net.exe', 'net1.exe'] | Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False)) & CommandLine.str.contains(r' stop ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - CleanWipe Execution",
        "id": "f44800ac-38ec-471f-936e-3fa7d9c53100",
        "status": "test",
        "description": "Detects the use of CleanWipe a tool usually used to delete Symantec antivirus.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\SepRemovalToolNative_x64.exe', case=False) | Image.str.contains(r'\\\\CATClean.exe', case=False) & CommandLine.str.contains(r'--uninstall', case=False) | Image.str.contains(r'\\\\NetInstaller.exe', case=False) & CommandLine.str.contains(r'-r', case=False) | Image.str.contains(r'\\\\WFPUnins.exe', case=False) & CommandLine.str.contains(r'/uninstall', case=False) & CommandLine.str.contains(r'/enterprise', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "COM Object Execution via Xwizard.EXE",
        "id": "53d4bb30-3f36-4e8a-b078-69d36c4a79ff",
        "status": "test",
        "description": "Detects the execution of Xwizard tool with the \"RunWizard\" flag and a GUID like argument.\nThis utility can be abused in order to run custom COM object created in the registry.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine=='RunWizard' & CommandLine.str.contains(r'\\\\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\\\}')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use of OpenConsole",
        "id": "814c95cc-8192-4378-a70a-f1aafd877af1",
        "status": "test",
        "description": "Detects usage of OpenConsole binary as a LOLBIN to launch other binaries to bypass application Whitelisting",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='OpenConsole.exe' | Image.str.contains(r'\\\\OpenConsole.exe', case=False)) & ~ Image.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\Microsoft.WindowsTerminal', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Event Viewer Child Process",
        "id": "be344333-921d-4c4d-8bb8-e584cf584780",
        "status": "test",
        "description": "Detects uncommon or suspicious child processes of \"eventvwr.exe\" which might indicate a UAC bypass attempt",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002",
            "car.2019-04-001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\eventvwr.exe', case=False) & ~ (Image.str.contains(r':\\\\Windows\\\\System32\\\\mmc.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\WerFault.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\WerFault.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Office Document Executed From Trusted Location",
        "id": "f99abdf0-6283-4e71-bd2b-b5c048a94743",
        "status": "test",
        "description": "Detects the execution of an Office application that points to a document that is located in a trusted location. Attackers often used this to avoid macro security and execute their malicious code.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\explorer.exe', case=False) | ParentImage.str.contains(r'\\\\dopus.exe', case=False)) & (Image.str.contains(r'\\\\EXCEL.EXE', case=False) | Image.str.contains(r'\\\\POWERPNT.EXE', case=False) | Image.str.contains(r'\\\\WINWORD.exe', case=False) | OriginalFileName==['Excel.exe', 'POWERPNT.EXE', 'WinWord.exe']) & (CommandLine.str.contains(r'\\\\AppData\\\\Roaming\\\\Microsoft\\\\Templates', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\Roaming\\\\Microsoft\\\\Word\\\\Startup\\\\', case=False) | CommandLine.str.contains(r'\\\\Microsoft Office\\\\root\\\\Templates\\\\', case=False) | CommandLine.str.contains(r'\\\\Microsoft Office\\\\Templates\\\\', case=False)) & ~ (CommandLine.str.contains(r'.dotx', case=False) | CommandLine.str.contains(r'.xltx', case=False) | CommandLine.str.contains(r'.potx', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Runscripthelper.exe",
        "id": "eca49c87-8a75-4f13-9c73-a5a29e845f03",
        "status": "test",
        "description": "Detects execution of powershell scripts via Runscripthelper.exe",
        "tags": [
            "attack.execution",
            "attack.t1059",
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\Runscripthelper.exe', case=False) & CommandLine.str.contains(r'surfacecheck', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Winrar Execution in Non-Standard Folder",
        "id": "4ede543c-e098-43d9-a28f-dd784a13132f",
        "status": "test",
        "description": "Detects a suspicious winrar execution in a folder which is not the default installation folder",
        "tags": [
            "attack.collection",
            "attack.t1560.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rar.exe', case=False) | Image.str.contains(r'\\\\winrar.exe', case=False) | Description=='Command line RAR') & ~ (Image.str.contains(r'\\\\UnRAR.exe', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\WinRAR\\\\', case=False) | Image.str.contains(r':\\\\Program Files\\\\WinRAR\\\\', case=False)) & ~ Image.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - CrackMapExec Execution",
        "id": "42a993dd-bb3e-48c8-b372-4d6684c4106c",
        "status": "test",
        "description": "This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.credential-access",
            "attack.discovery",
            "attack.t1047",
            "attack.t1053",
            "attack.t1059.003",
            "attack.t1059.001",
            "attack.t1110",
            "attack.t1201"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\crackmapexec.exe', case=False) | CommandLine.str.contains(r' -M pe_inject ', case=False) | CommandLine.str.contains(r' --local-auth', case=False) & CommandLine.str.contains(r' -u ', case=False) & CommandLine.str.contains(r' -x ', case=False) | CommandLine.str.contains(r' --local-auth', case=False) & CommandLine.str.contains(r' -u ', case=False) & CommandLine.str.contains(r' -p ', case=False) & CommandLine.str.contains(r' -H \\'NTHASH\\'', case=False) | CommandLine.str.contains(r' mssql ', case=False) & CommandLine.str.contains(r' -u ', case=False) & CommandLine.str.contains(r' -p ', case=False) & CommandLine.str.contains(r' -M ', case=False) & CommandLine.str.contains(r' -d ', case=False) | CommandLine.str.contains(r' smb ', case=False) & CommandLine.str.contains(r' -u ', case=False) & CommandLine.str.contains(r' -H ', case=False) & CommandLine.str.contains(r' -M ', case=False) & CommandLine.str.contains(r' -o ', case=False) | CommandLine.str.contains(r' smb ', case=False) & CommandLine.str.contains(r' -u ', case=False) & CommandLine.str.contains(r' -p ', case=False) & CommandLine.str.contains(r' --local-auth', case=False) | CommandLine.str.contains(r' --local-auth', case=False) & CommandLine.str.contains(r' -u ', case=False) & CommandLine.str.contains(r' -p ', case=False) & CommandLine.str.contains(r' 10.', case=False) & CommandLine.str.contains(r' 192.168.', case=False) & CommandLine.str.contains(r'/24 ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Firewall Disabled via PowerShell",
        "id": "12f6b752-042d-483e-bf9c-915a6d06ad75",
        "status": "test",
        "description": "Detects attempts to disable the Windows Firewall using PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\powershell_ise.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & CommandLine.str.contains(r'Set-NetFirewallProfile ', case=False) & CommandLine.str.contains(r' -Enabled ', case=False) & CommandLine.str.contains(r' False', case=False) & (CommandLine.str.contains(r' -All ', case=False) | CommandLine.str.contains(r'Public', case=False) | CommandLine.str.contains(r'Domain', case=False) | CommandLine.str.contains(r'Private', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Windows App Activity",
        "id": "f91ed517-a6ba-471d-9910-b3b4a398c0f3",
        "status": "test",
        "description": "Detects potentially suspicious child process of applications launched from inside the WindowsApps directory. This could be a sign of a rogue \".appx\" package installation/execution",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | CommandLine.str.contains(r'cmd /c', case=False) | CommandLine.str.contains(r'Invoke-', case=False) | CommandLine.str.contains(r'Base64', case=False)) & ~ (ParentImage.str.contains(r':\\\\Program Files\\\\WindowsApps\\\\Microsoft.WindowsTerminal', case=False) & ParentImage.str.contains(r'\\\\WindowsTerminal.exe', case=False) & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed Microsoft Teams Execution",
        "id": "88f46b67-14d4-4f45-ac2c-d66984f22191",
        "status": "experimental",
        "description": "Detects the execution of a renamed Microsoft Teams binary.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName==['msteams.exe', 'teams.exe']) & ~ (Image.str.contains(r'\\\\msteams.exe', case=False) | Image.str.contains(r'\\\\teams.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Read Contents From Stdin Via Cmd.EXE",
        "id": "241e802a-b65e-484f-88cd-c2dc10f9206d",
        "status": "test",
        "description": "Detect the use of \"<\" to read and potentially execute a file via cmd.exe",
        "tags": [
            "attack.execution",
            "attack.t1059.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='Cmd.Exe' | Image.str.contains(r'\\\\cmd.exe', case=False)) & CommandLine.str.contains(r'<', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Call To Win32_NTEventlogFile Class",
        "id": "caf201a9-c2ce-4a26-9c3a-2b9525413711",
        "status": "test",
        "description": "Detects usage of the WMI class \"Win32_NTEventlogFile\" in a potentially suspicious way (delete, backup, change permissions, etc.) from a PowerShell script",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'Win32_NTEventlogFile', case=False) & (CommandLine.str.contains(r'.BackupEventlog(', case=False) | CommandLine.str.contains(r'.ChangeSecurityPermissions(', case=False) | CommandLine.str.contains(r'.ChangeSecurityPermissionsEx(', case=False) | CommandLine.str.contains(r'.ClearEventLog(', case=False) | CommandLine.str.contains(r'.Delete(', case=False) | CommandLine.str.contains(r'.DeleteEx(', case=False) | CommandLine.str.contains(r'.Rename(', case=False) | CommandLine.str.contains(r'.TakeOwnerShip(', case=False) | CommandLine.str.contains(r'.TakeOwnerShipEx(', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Eventlog Clearing or Configuration Change Activity",
        "id": "cc36992a-4671-4f21-a91d-6c2b72a2edf5",
        "status": "stable",
        "description": "Detects the clearing or configuration tampering of EventLog using utilities such as \"wevtutil\", \"powershell\" and \"wmic\".\nThis technique were seen used by threat actors and ransomware strains in order to evade defenses.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.001",
            "attack.t1562.002",
            "car.2016-04-002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wevtutil.exe', case=False) & (CommandLine.str.contains(r'clear-log ', case=False) | CommandLine.str.contains(r' cl ', case=False) | CommandLine.str.contains(r'set-log ', case=False) | CommandLine.str.contains(r' sl ', case=False) | CommandLine.str.contains(r'lfn:', case=False)) | (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & (CommandLine.str.contains(r'Clear-EventLog ', case=False) | CommandLine.str.contains(r'Remove-EventLog ', case=False) | CommandLine.str.contains(r'Limit-EventLog ', case=False) | CommandLine.str.contains(r'Clear-WinEvent ', case=False)) | (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False)) & CommandLine.str.contains(r'ClearEventLog', case=False)) & ~ ((ParentImage==['C:\\\\Windows\\\\SysWOW64\\\\msiexec.exe', 'C:\\\\Windows\\\\System32\\\\msiexec.exe']) & CommandLine.str.contains(r' sl ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed Msdt.EXE Execution",
        "id": "bd1c6866-65fc-44b2-be51-5588fcff82b9",
        "status": "test",
        "description": "Detects the execution of a renamed \"Msdt.exe\" binary",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & OriginalFileName=='msdt.exe' & ~ Image.str.contains(r'\\\\msdt.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Changing Existing Service ImagePath Value Via Reg.EXE",
        "id": "9b0b7ac3-6223-47aa-a3fd-e8f211e637db",
        "status": "test",
        "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.\nAdversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.\nWindows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services\n",
        "tags": [
            "attack.persistence",
            "attack.t1574.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\reg.exe', case=False) & CommandLine.str.contains(r'add ', case=False) & CommandLine.str.contains(r'SYSTEM\\\\CurrentControlSet\\\\Services\\\\', case=False) & CommandLine.str.contains(r' ImagePath ', case=False) & (CommandLine.str.contains(r' -d ', case=False) | CommandLine.str.contains(r' /d ', case=False) | CommandLine.str.contains(r' \u2013d ', case=False) | CommandLine.str.contains(r' \u2014d ', case=False) | CommandLine.str.contains(r' \u2015d ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Rundll32 InstallScreenSaver Execution",
        "id": "15bd98ea-55f4-4d37-b09a-e7caa0fa2221",
        "status": "test",
        "description": "An attacker may execute an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver",
        "tags": [
            "attack.t1218.011",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.EXE') & CommandLine.str.contains(r'InstallScreenSaver', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Process Proxy Execution Via Squirrel.EXE",
        "id": "45239e6a-b035-4aaf-b339-8ad379fcb67e",
        "status": "test",
        "description": "Detects the usage of the \"Squirrel.exe\" binary to execute arbitrary processes. This binary is part of multiple Electron based software installations (Slack, Teams, Discord, etc.)\n",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\squirrel.exe', case=False) | Image.str.contains(r'\\\\update.exe', case=False)) & (CommandLine.str.contains(r'--processStart', case=False) | CommandLine.str.contains(r'--processStartAndWait', case=False) | CommandLine.str.contains(r'--createShortcut', case=False)) & ~ (CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Discord\\\\Update.exe', case=False) & CommandLine.str.contains(r' --processStart', case=False) & CommandLine.str.contains(r'Discord.exe', case=False) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\GitHubDesktop\\\\Update.exe', case=False) & CommandLine.str.contains(r'GitHubDesktop.exe', case=False) & (CommandLine.str.contains(r'--createShortcut', case=False) | CommandLine.str.contains(r'--processStartAndWait', case=False)) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\Update.exe', case=False) & CommandLine.str.contains(r'Teams.exe', case=False) & (CommandLine.str.contains(r'--processStart', case=False) | CommandLine.str.contains(r'--createShortcut', case=False)) | CommandLine.str.contains(r':\\\\Users\\\\', case=False) & CommandLine.str.contains(r'\\\\AppData\\\\Local\\\\yammerdesktop\\\\Update.exe', case=False) & CommandLine.str.contains(r'Yammer.exe', case=False) & (CommandLine.str.contains(r'--processStart', case=False) | CommandLine.str.contains(r'--createShortcut', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Crypto Mining Activity",
        "id": "66c3b204-9f88-4d0a-a7f7-8a57d521ca55",
        "status": "stable",
        "description": "Detects command line parameters or strings often used by crypto miners",
        "tags": [
            "attack.impact",
            "attack.t1496"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r' --cpu-priority=', case=False) | CommandLine.str.contains(r'--donate-level=0', case=False) | CommandLine.str.contains(r' -o pool.', case=False) | CommandLine.str.contains(r' --nicehash', case=False) | CommandLine.str.contains(r' --algo=rx/0 ', case=False) | CommandLine.str.contains(r'stratum+tcp://', case=False) | CommandLine.str.contains(r'stratum+udp://', case=False) | CommandLine.str.contains(r'LS1kb25hdGUtbGV2ZWw9', case=False) | CommandLine.str.contains(r'0tZG9uYXRlLWxldmVsP', case=False) | CommandLine.str.contains(r'tLWRvbmF0ZS1sZXZlbD', case=False) | CommandLine.str.contains(r'c3RyYXR1bSt0Y3A6Ly', case=False) | CommandLine.str.contains(r'N0cmF0dW0rdGNwOi8v', case=False) | CommandLine.str.contains(r'zdHJhdHVtK3RjcDovL', case=False) | CommandLine.str.contains(r'c3RyYXR1bSt1ZHA6Ly', case=False) | CommandLine.str.contains(r'N0cmF0dW0rdWRwOi8v', case=False) | CommandLine.str.contains(r'zdHJhdHVtK3VkcDovL', case=False)) & ~ (CommandLine.str.contains(r' pool.c ', case=False) | CommandLine.str.contains(r' pool.o ', case=False) | CommandLine.str.contains(r'gcc -', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "VeeamBackup Database Credentials Dump Via Sqlcmd.EXE",
        "id": "b57ba453-b384-4ab9-9f40-1038086b4e53",
        "status": "test",
        "description": "Detects dump of credentials in VeeamBackup dbo",
        "tags": [
            "attack.collection",
            "attack.t1005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\sqlcmd.exe', case=False) & CommandLine.str.contains(r'SELECT', case=False) & CommandLine.str.contains(r'TOP', case=False) & CommandLine.str.contains(r'[VeeamBackup].[dbo].[Credentials]', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Arbitrary File Download Via GfxDownloadWrapper.EXE",
        "id": "eee00933-a761-4cd0-be70-c42fe91731e7",
        "status": "test",
        "description": "Detects execution of GfxDownloadWrapper.exe with a URL as an argument to download file.",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\GfxDownloadWrapper.exe', case=False) & (CommandLine.str.contains(r'http://', case=False) | CommandLine.str.contains(r'https://', case=False)) & ~ CommandLine.str.contains(r'https://gameplayapi.intel.com/', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Execution of Powershell Script in Public Folder",
        "id": "fb9d3ff7-7348-46ab-af8c-b55f5fbf39b4",
        "status": "test",
        "description": "This rule detects execution of PowerShell scripts located in the \"C:\\Users\\Public\" folder",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & (CommandLine.str.contains(r'-f C:\\\\Users\\\\Public', case=False) | CommandLine.str.contains(r'-f \"C:\\\\Users\\\\Public', case=False) | CommandLine.str.contains(r'-f %Public%', case=False) | CommandLine.str.contains(r'-fi C:\\\\Users\\\\Public', case=False) | CommandLine.str.contains(r'-fi \"C:\\\\Users\\\\Public', case=False) | CommandLine.str.contains(r'-fi %Public%', case=False) | CommandLine.str.contains(r'-fil C:\\\\Users\\\\Public', case=False) | CommandLine.str.contains(r'-fil \"C:\\\\Users\\\\Public', case=False) | CommandLine.str.contains(r'-fil %Public%', case=False) | CommandLine.str.contains(r'-file C:\\\\Users\\\\Public', case=False) | CommandLine.str.contains(r'-file \"C:\\\\Users\\\\Public', case=False) | CommandLine.str.contains(r'-file %Public%', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Set-Acl On Windows Folder",
        "id": "0944e002-e3f6-4eb5-bf69-3a3067b53d73",
        "status": "test",
        "description": "Detects PowerShell scripts to set the ACL to a file in the Windows folder",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName==['PowerShell.EXE', 'pwsh.dll'] | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & CommandLine.str.contains(r'Set-Acl ', case=False) & CommandLine.str.contains(r'-AclObject ', case=False) & (CommandLine.str.contains(r'-Path \"C:\\\\Windows', case=False) | CommandLine.str.contains(r'-Path \\'C:\\\\Windows', case=False) | CommandLine.str.contains(r'-Path %windir%', case=False) | CommandLine.str.contains(r'-Path $env:windir', case=False)) & (CommandLine.str.contains(r'FullControl', case=False) | CommandLine.str.contains(r'Allow', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Active Directory Database Snapshot Via ADExplorer",
        "id": "ef61af62-bc74-4f58-b49b-626448227652",
        "status": "test",
        "description": "Detects the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database to a suspicious directory.",
        "tags": [
            "attack.credential-access",
            "attack.t1552.001",
            "attack.t1003.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\ADExplorer.exe', case=False) | OriginalFileName=='AdExp') & CommandLine.str.contains(r'snapshot', case=False) & (CommandLine.str.contains(r'\\\\Downloads\\\\', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'\\\\AppData\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Product Class Reconnaissance Via Wmic.EXE",
        "id": "e568650b-5dcd-4658-8f34-ded0b1e13992",
        "status": "test",
        "description": "Detects the execution of WMIC in order to get a list of firewall and antivirus products",
        "tags": [
            "attack.execution",
            "attack.t1047",
            "car.2016-03-002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wmic.exe', case=False) | OriginalFileName=='wmic.exe') & (CommandLine.str.contains(r'AntiVirusProduct', case=False) | CommandLine.str.contains(r'FirewallProduct', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Possible Privilege Escalation via Weak Service Permissions",
        "id": "d937b75f-a665-4480-88a5-2f20e9f9b22a",
        "status": "test",
        "description": "Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\sc.exe', case=False) & (IntegrityLevel==['Medium', 'S-1-16-8192']) & (CommandLine.str.contains(r'config', case=False) & CommandLine.str.contains(r'binPath', case=False) | CommandLine.str.contains(r'failure', case=False) & CommandLine.str.contains(r'command', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UEFI Persistence Via Wpbbin - ProcessCreation",
        "id": "4abc0ec4-db5a-412f-9632-26659cddf145",
        "status": "test",
        "description": "Detects execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.t1542.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image=='C:\\\\Windows\\\\System32\\\\wpbbin.exe'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious GrpConv Execution",
        "id": "f14e169e-9978-4c69-acb3-1cff8200bc36",
        "status": "test",
        "description": "Detects the suspicious execution of a utility to convert Windows 3.x .grp files or for persistence purposes by malicious software or actors",
        "tags": [
            "attack.persistence",
            "attack.t1547"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'grpconv.exe -o', case=False) | CommandLine.str.contains(r'grpconv -o', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Private Keys Reconnaissance Via CommandLine Tools",
        "id": "213d6a77-3d55-4ce8-ba74-fcfef741974e",
        "status": "test",
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credential",
        "tags": [
            "attack.credential-access",
            "attack.t1552.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'.key', case=False) | CommandLine.str.contains(r'.pgp', case=False) | CommandLine.str.contains(r'.gpg', case=False) | CommandLine.str.contains(r'.ppk', case=False) | CommandLine.str.contains(r'.p12', case=False) | CommandLine.str.contains(r'.pem', case=False) | CommandLine.str.contains(r'.pfx', case=False) | CommandLine.str.contains(r'.cer', case=False) | CommandLine.str.contains(r'.p7b', case=False) | CommandLine.str.contains(r'.asc', case=False)) & ((Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & CommandLine.str.contains(r'dir ', case=False) | (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & CommandLine.str.contains(r'Get-ChildItem ', case=False) | Image.str.contains(r'\\\\findstr.exe', case=False) | OriginalFileName=='FINDSTR.EXE')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - Team Viewer Session Started On Windows Host",
        "id": "ab70c354-d9ac-4e11-bbb6-ec8e3b153357",
        "status": "test",
        "description": "Detects the command line executed when TeamViewer starts a session started by a remote host.\nOnce a connection has been started, an investigator can verify the connection details by viewing the \"incoming_connections.txt\" log file in the TeamViewer folder.\n",
        "tags": [
            "attack.initial-access",
            "attack.t1133"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image=='TeamViewer_Desktop.exe' & ParentImage=='TeamViewer_Service.exe' & CommandLine.str.contains(r'TeamViewer_Desktop.exe --IPCport 5939 --Module 1', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential PowerShell Execution Via DLL",
        "id": "6812a10b-60ea-420c-832f-dfcc33b646ba",
        "status": "test",
        "description": "Detects potential PowerShell execution from a DLL instead of the usual PowerShell process as seen used in PowerShdll.\nThis detection assumes that PowerShell commands are passed via the CommandLine.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\InstallUtil.exe', case=False) | Image.str.contains(r'\\\\RegAsm.exe', case=False) | Image.str.contains(r'\\\\RegSvcs.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName==['InstallUtil.exe', 'RegAsm.exe', 'RegSvcs.exe', 'REGSVR32.EXE', 'RUNDLL32.EXE']) & (CommandLine.str.contains(r'Default.GetString', case=False) | CommandLine.str.contains(r'DownloadString', case=False) | CommandLine.str.contains(r'FromBase64String', case=False) | CommandLine.str.contains(r'ICM ', case=False) | CommandLine.str.contains(r'IEX ', case=False) | CommandLine.str.contains(r'Invoke-Command', case=False) | CommandLine.str.contains(r'Invoke-Expression', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use Of The SFTP.EXE Binary As A LOLBIN",
        "id": "a85ffc3a-e8fd-4040-93bf-78aff284d801",
        "status": "test",
        "description": "Detects the usage of the \"sftp.exe\" binary as a LOLBIN by abusing the \"-D\" flag",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\sftp.exe', case=False) & (CommandLine.str.contains(r' -D ..', case=False) | CommandLine.str.contains(r' -D C:\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Execution Of PDQDeployRunner",
        "id": "12b8e9f5-96b2-41e1-9a42-8c6779a5c184",
        "status": "test",
        "description": "Detects suspicious execution of \"PDQDeployRunner\" which is part of the PDQDeploy service stack that is responsible for executing commands and packages on a remote machines",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\PDQDeployRunner-', case=False) & (Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\csc.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\dllhost.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\scriptrunner.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\wsl.exe', case=False) | Image.str.contains(r':\\\\ProgramData\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\TEMP\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Temp', case=False) | CommandLine.str.contains(r' -decode ', case=False) | CommandLine.str.contains(r' -enc ', case=False) | CommandLine.str.contains(r' -encodedcommand ', case=False) | CommandLine.str.contains(r' -w hidden', case=False) | CommandLine.str.contains(r'DownloadString', case=False) | CommandLine.str.contains(r'FromBase64String', case=False) | CommandLine.str.contains(r'http', case=False) | CommandLine.str.contains(r'iex ', case=False) | CommandLine.str.contains(r'Invoke-', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Execute Code with Pester.bat",
        "id": "59e938ff-0d6d-4dc3-b13f-36cc28734d4e",
        "status": "test",
        "description": "Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.defense-evasion",
            "attack.t1216"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & CommandLine.str.contains(r'Pester', case=False) & CommandLine.str.contains(r'Get-Help', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) & CommandLine.str.contains(r'pester', case=False) & CommandLine.str.contains(r';', case=False) & (CommandLine.str.contains(r'help', case=False) | CommandLine.str.contains(r'?', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Unsigned AppX Installation Attempt Using Add-AppxPackage",
        "id": "37651c2a-42cd-4a69-ae0d-22a4349aa04a",
        "status": "test",
        "description": "Detects usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r'Add-AppPackage ', case=False) | CommandLine.str.contains(r'Add-AppxPackage ', case=False)) & CommandLine.str.contains(r' -AllowUnsigned', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Invoke-Obfuscation STDIN+ Launcher",
        "id": "6c96fc76-0eb1-11eb-adc1-0242ac120002",
        "status": "test",
        "description": "Detects Obfuscated use of stdin to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'cmd.{0,5}(?:/c|/r).+powershell.+(?:\\\\$\\\\{?input\\\\}?|noexit).+\\\\\"')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Execution via WorkFolders.exe",
        "id": "0bbc6369-43e3-453d-9944-cae58821c173",
        "status": "test",
        "description": "Detects using WorkFolders.exe to execute an arbitrary control.exe",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\control.exe', case=False) & ParentImage.str.contains(r'\\\\WorkFolders.exe', case=False) & ~ Image=='C:\\\\Windows\\\\System32\\\\control.exe'"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Rundll32 Execution With Image Extension",
        "id": "4aa6040b-3f28-44e3-a769-9208e5feb5ec",
        "status": "test",
        "description": "Detects the execution of Rundll32.exe with DLL files masquerading as image files",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rundll32.exe', case=False) | OriginalFileName=='RUNDLL32.exe') & (CommandLine.str.contains(r'.bmp', case=False) | CommandLine.str.contains(r'.cr2', case=False) | CommandLine.str.contains(r'.eps', case=False) | CommandLine.str.contains(r'.gif', case=False) | CommandLine.str.contains(r'.ico', case=False) | CommandLine.str.contains(r'.jpeg', case=False) | CommandLine.str.contains(r'.jpg', case=False) | CommandLine.str.contains(r'.nef', case=False) | CommandLine.str.contains(r'.orf', case=False) | CommandLine.str.contains(r'.png', case=False) | CommandLine.str.contains(r'.raw', case=False) | CommandLine.str.contains(r'.sr2', case=False) | CommandLine.str.contains(r'.tif', case=False) | CommandLine.str.contains(r'.tiff', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Permission Misconfiguration Reconnaissance Via Findstr.EXE",
        "id": "47e4bab7-c626-47dc-967b-255608c9a920",
        "status": "test",
        "description": "Detects usage of findstr with the \"EVERYONE\" or \"BUILTIN\" keywords.\nThis was seen being used in combination with \"icacls\" and other utilities to spot misconfigured files or folders permissions.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1552.006"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ((Image.str.contains(r'\\\\find.exe', case=False) | Image.str.contains(r'\\\\findstr.exe', case=False) | OriginalFileName==['FIND.EXE', 'FINDSTR.EXE']) & (CommandLine.str.contains(r'\"Everyone\"', case=False) | CommandLine.str.contains(r'\\'Everyone\\'', case=False) | CommandLine.str.contains(r'\"BUILTIN\\\\\"', case=False) | CommandLine.str.contains(r'\\'BUILTIN\\\\\\'', case=False)) | CommandLine.str.contains(r'icacls ', case=False) & CommandLine.str.contains(r'findstr ', case=False) & CommandLine.str.contains(r'Everyone', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PDQ Deploy Remote Adminstartion Tool Execution",
        "id": "d679950c-abb7-43a6-80fb-2a480c4fc450",
        "status": "test",
        "description": "Detect use of PDQ Deploy remote admin tool",
        "tags": [
            "attack.execution",
            "attack.lateral-movement",
            "attack.t1072"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Description=='PDQ Deploy Console' | Product=='PDQ Deploy' | Company=='PDQ.com' | OriginalFileName=='PDQDeployConsole.exe')"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Process Execution Proxy Via CL_Invocation.ps1",
        "id": "a0459f02-ac51-4c09-b511-b8c9203fc429",
        "status": "test",
        "description": "Detects calls to \"SyncInvoke\" that is part of the \"CL_Invocation.ps1\" script to proxy execution using \"System.Diagnostics.Process\"",
        "tags": [
            "attack.defense-evasion",
            "attack.t1216"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'SyncInvoke ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Process By Web Server Process",
        "id": "8202070f-edeb-4d31-a010-a26c72ac5600",
        "status": "test",
        "description": "Detects potentially suspicious processes being spawned by a web server process which could be the result of a successfully placed web shell or exploitation\n",
        "tags": [
            "attack.persistence",
            "attack.t1505.003",
            "attack.t1190"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\caddy.exe', case=False) | ParentImage.str.contains(r'\\\\httpd.exe', case=False) | ParentImage.str.contains(r'\\\\nginx.exe', case=False) | ParentImage.str.contains(r'\\\\php-cgi.exe', case=False) | ParentImage.str.contains(r'\\\\php.exe', case=False) | ParentImage.str.contains(r'\\\\tomcat.exe', case=False) | ParentImage.str.contains(r'\\\\UMWorkerProcess.exe', case=False) | ParentImage.str.contains(r'\\\\w3wp.exe', case=False) | ParentImage.str.contains(r'\\\\ws_TomcatService.exe', case=False) | (ParentImage.str.contains(r'\\\\java.exe', case=False) | ParentImage.str.contains(r'\\\\javaw.exe', case=False)) & (ParentImage.str.contains(r'-tomcat-', case=False) | ParentImage.str.contains(r'\\\\tomcat', case=False)) | (ParentImage.str.contains(r'\\\\java.exe', case=False) | ParentImage.str.contains(r'\\\\javaw.exe', case=False)) & (ParentCommandLine.str.contains(r'CATALINA_HOME', case=False) | ParentCommandLine.str.contains(r'catalina.home', case=False) | ParentCommandLine.str.contains(r'catalina.jar', case=False))) & (Image.str.contains(r'\\\\arp.exe', case=False) | Image.str.contains(r'\\\\at.exe', case=False) | Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\bitsadmin.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\dsget.exe', case=False) | Image.str.contains(r'\\\\hostname.exe', case=False) | Image.str.contains(r'\\\\nbtstat.exe', case=False) | Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | Image.str.contains(r'\\\\netdom.exe', case=False) | Image.str.contains(r'\\\\netsh.exe', case=False) | Image.str.contains(r'\\\\nltest.exe', case=False) | Image.str.contains(r'\\\\ntdsutil.exe', case=False) | Image.str.contains(r'\\\\powershell_ise.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\qprocess.exe', case=False) | Image.str.contains(r'\\\\query.exe', case=False) | Image.str.contains(r'\\\\qwinsta.exe', case=False) | Image.str.contains(r'\\\\reg.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\sc.exe', case=False) | Image.str.contains(r'\\\\sh.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\wusa.exe', case=False)) & ~ (ParentImage.str.contains(r'\\\\java.exe', case=False) & CommandLine.str.contains(r'Windows\\\\system32\\\\cmd.exe /c C:\\\\ManageEngine\\\\ADManager \"Plus\\\\ES\\\\bin\\\\elasticsearch.bat -Enode.name=RMP-NODE1 -pelasticsearch-pid.txt', case=False) | ParentImage.str.contains(r'\\\\java.exe', case=False) & CommandLine.str.contains(r'sc query', case=False) & CommandLine.str.contains(r'ADManager Plus', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Kernel Memory Dump Via LiveKD",
        "id": "c7746f1c-47d3-43d6-8c45-cd1e54b6b0a2",
        "status": "test",
        "description": "Detects execution of LiveKD with the \"-m\" flag to potentially dump the kernel memory",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\livekd.exe', case=False) | Image.str.contains(r'\\\\livekd64.exe', case=False) | OriginalFileName=='livekd.exe') & (CommandLine.str.contains(r' -m', case=False) | CommandLine.str.contains(r' /m', case=False) | CommandLine.str.contains(r' \u2013m', case=False) | CommandLine.str.contains(r' \u2014m', case=False) | CommandLine.str.contains(r' \u2015m', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Get-Process LSASS",
        "id": "b2815d0d-7481-4bf0-9b6c-a4c48a94b349",
        "status": "test",
        "description": "Detects a \"Get-Process\" cmdlet and it's aliases on lsass process, which is in almost all cases a sign of malicious activity",
        "tags": [
            "attack.credential-access",
            "attack.t1552.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'Get-Process lsas', case=False) | CommandLine.str.contains(r'ps lsas', case=False) | CommandLine.str.contains(r'gps lsas', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Enumeration for Credentials in Registry",
        "id": "e0b0c2ab-3d52-46d9-8cb7-049dc775fbd1",
        "status": "test",
        "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials.\nThe Windows Registry stores configuration information that can be used by the system or other programs.\nAdversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services\n",
        "tags": [
            "attack.credential-access",
            "attack.t1552.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\reg.exe', case=False) & CommandLine.str.contains(r' query ', case=False) & CommandLine.str.contains(r'/t ', case=False) & CommandLine.str.contains(r'REG_SZ', case=False) & CommandLine.str.contains(r'/s', case=False) & (CommandLine.str.contains(r'/f ', case=False) & CommandLine.str.contains(r'HKLM', case=False) | CommandLine.str.contains(r'/f ', case=False) & CommandLine.str.contains(r'HKCU', case=False) | CommandLine.str.contains(r'HKCU\\\\Software\\\\SimonTatham\\\\PuTTY\\\\Sessions', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Git Clone",
        "id": "aef9d1f1-7396-4e92-a927-4567c7a495c1",
        "status": "test",
        "description": "Detects execution of \"git\" in order to clone a remote repository that contain suspicious keywords which might be suspicious",
        "tags": [
            "attack.reconnaissance",
            "attack.t1593.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\git.exe', case=False) | Image.str.contains(r'\\\\git-remote-https.exe', case=False) | OriginalFileName=='git.exe') & (CommandLine.str.contains(r' clone ', case=False) | CommandLine.str.contains(r'git-remote-https ', case=False)) & (CommandLine.str.contains(r'exploit', case=False) | CommandLine.str.contains(r'Vulns', case=False) | CommandLine.str.contains(r'vulnerability', case=False) | CommandLine.str.contains(r'RemoteCodeExecution', case=False) | CommandLine.str.contains(r'Invoke-', case=False) | CommandLine.str.contains(r'CVE-', case=False) | CommandLine.str.contains(r'poc-', case=False) | CommandLine.str.contains(r'ProofOfConcept', case=False) | CommandLine.str.contains(r'proxyshell', case=False) | CommandLine.str.contains(r'log4shell', case=False) | CommandLine.str.contains(r'eternalblue', case=False) | CommandLine.str.contains(r'eternal-blue', case=False) | CommandLine.str.contains(r'MS17-', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Execution of Suspicious File Type Extension",
        "id": "c09dad97-1c78-4f71-b127-7edb2b8e491a",
        "status": "test",
        "description": "Detects whether the image specified in a process creation event doesn't refer to an \".exe\" (or other known executable extension) file. This can be caused by process ghosting or other unorthodox methods to start a process.\nThis rule might require some initial baselining to align with some third party tooling in the user environment.\n",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ~ (Image.str.contains(r'.bin', case=False) | Image.str.contains(r'.cgi', case=False) | Image.str.contains(r'.com', case=False) | Image.str.contains(r'.exe', case=False) | Image.str.contains(r'.scr', case=False) | Image.str.contains(r'.tmp', case=False)) & ~ (Image==['System', 'Registry', 'MemCompression', 'vmmem'] | Image.str.contains(r':\\\\Windows\\\\Installer\\\\MSI', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\DriverStore\\\\FileRepository\\\\', case=False) | Image.str.contains(r':\\\\Config.Msi\\\\', case=False) & (Image.str.contains(r'.rbf', case=False) | Image.str.contains(r'.rbs', case=False)) | ParentImage.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | Image.str.contains(r':\\\\$Extend\\\\$Deleted\\\\', case=False) | Image==['-', ''] | Image is null) & ~ (ParentImage.str.contains(r':\\\\ProgramData\\\\Avira\\\\', case=False) | Image.str.contains(r'NVIDIA\\\\NvBackend\\\\', case=False) & Image.str.contains(r'.dat', case=False) | (Image.str.contains(r':\\\\Program Files (x86)\\\\WINPAKPRO\\\\', case=False) | Image.str.contains(r':\\\\Program Files\\\\WINPAKPRO\\\\', case=False)) & Image.str.contains(r'.ngn', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\MyQ\\\\Server\\\\pcltool.dll', case=False) | Image.str.contains(r':\\\\Program Files\\\\MyQ\\\\Server\\\\pcltool.dll', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Packages\\\\', case=False) & Image.str.contains(r'\\\\LocalState\\\\rootfs\\\\', case=False) | Image.str.contains(r'\\\\LZMA_EXE', case=False) | Image.str.contains(r':\\\\Program Files\\\\Mozilla Firefox\\\\', case=False) | ParentImage=='C:\\\\Windows\\\\System32\\\\services.exe' & Image.str.contains(r'com.docker.service', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Unusual Parent Process For Cmd.EXE",
        "id": "4b991083-3d0e-44ce-8fc4-b254025d8d4b",
        "status": "test",
        "description": "Detects suspicious parent process for cmd.exe",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\cmd.exe', case=False) & (ParentImage.str.contains(r'\\\\csrss.exe', case=False) | ParentImage.str.contains(r'\\\\ctfmon.exe', case=False) | ParentImage.str.contains(r'\\\\dllhost.exe', case=False) | ParentImage.str.contains(r'\\\\epad.exe', case=False) | ParentImage.str.contains(r'\\\\FlashPlayerUpdateService.exe', case=False) | ParentImage.str.contains(r'\\\\GoogleUpdate.exe', case=False) | ParentImage.str.contains(r'\\\\jucheck.exe', case=False) | ParentImage.str.contains(r'\\\\jusched.exe', case=False) | ParentImage.str.contains(r'\\\\LogonUI.exe', case=False) | ParentImage.str.contains(r'\\\\lsass.exe', case=False) | ParentImage.str.contains(r'\\\\regsvr32.exe', case=False) | ParentImage.str.contains(r'\\\\SearchIndexer.exe', case=False) | ParentImage.str.contains(r'\\\\SearchProtocolHost.exe', case=False) | ParentImage.str.contains(r'\\\\SIHClient.exe', case=False) | ParentImage.str.contains(r'\\\\sihost.exe', case=False) | ParentImage.str.contains(r'\\\\slui.exe', case=False) | ParentImage.str.contains(r'\\\\spoolsv.exe', case=False) | ParentImage.str.contains(r'\\\\sppsvc.exe', case=False) | ParentImage.str.contains(r'\\\\taskhostw.exe', case=False) | ParentImage.str.contains(r'\\\\unsecapp.exe', case=False) | ParentImage.str.contains(r'\\\\WerFault.exe', case=False) | ParentImage.str.contains(r'\\\\wermgr.exe', case=False) | ParentImage.str.contains(r'\\\\wlanext.exe', case=False) | ParentImage.str.contains(r'\\\\WUDFHost.exe', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Powershell Defender Exclusion",
        "id": "17769c90-230e-488b-a463-e05c08e9d48f",
        "status": "test",
        "description": "Detects requests to exclude files, folders or processes from Antivirus scanning using PowerShell cmdlets",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'Add-MpPreference ', case=False) | CommandLine.str.contains(r'Set-MpPreference ', case=False)) & (CommandLine.str.contains(r' -ExclusionPath ', case=False) | CommandLine.str.contains(r' -ExclusionExtension ', case=False) | CommandLine.str.contains(r' -ExclusionProcess ', case=False) | CommandLine.str.contains(r' -ExclusionIpAddress ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed Vmnat.exe Execution",
        "id": "7b4f794b-590a-4ad4-ba18-7964a2832205",
        "status": "test",
        "description": "Detects renamed vmnat.exe or portable version that can be used for DLL side-loading",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & OriginalFileName=='vmnat.exe' & ~ Image.str.contains(r'vmnat.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Gpresult Display Group Policy Information",
        "id": "e56d3073-83ff-4021-90fe-c658e0709e72",
        "status": "test",
        "description": "Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information",
        "tags": [
            "attack.discovery",
            "attack.t1615"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\gpresult.exe', case=False) & (CommandLine.str.contains(r'/z', case=False) | CommandLine.str.contains(r'/v', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious GUP Usage",
        "id": "0a4f6091-223b-41f6-8743-f322ec84930b",
        "status": "test",
        "description": "Detects execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\GUP.exe', case=False) & ~ (Image.str.contains(r'\\\\Program Files\\\\Notepad++\\\\updater\\\\GUP.exe', case=False) | Image.str.contains(r'\\\\Program Files (x86)\\\\Notepad++\\\\updater\\\\GUP.exe', case=False) | Image.str.contains(r'\\\\Users\\\\', case=False) & (Image.str.contains(r'\\\\AppData\\\\Local\\\\Notepad++\\\\updater\\\\GUP.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Roaming\\\\Notepad++\\\\updater\\\\GUP.exe', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential UAC Bypass Via Sdclt.EXE",
        "id": "40f9af16-589d-4984-b78d-8c2aec023197",
        "status": "test",
        "description": "A General detection for sdclt being spawned as an elevated process. This could be an indicator of sdclt being used for bypass UAC techniques.",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1548.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'sdclt.exe', case=False) & (IntegrityLevel==['High', 'S-1-16-12288'])"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Encoded And Obfuscated Reflection Assembly Load Function Call",
        "id": "9c0295ce-d60d-40bd-bd74-84673b7592b1",
        "status": "test",
        "description": "Detects suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\"",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1059.001",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ', case=False) | CommandLine.str.contains(r'oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA', case=False) | CommandLine.str.contains(r'6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA', case=False) | CommandLine.str.contains(r'OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ', case=False) | CommandLine.str.contains(r'oAOgAoACIATABvACIAKwAiAGEAZAAiACkA', case=False) | CommandLine.str.contains(r'6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA', case=False) | CommandLine.str.contains(r'OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ', case=False) | CommandLine.str.contains(r'oAOgAoACIATABvAGEAIgArACIAZAAiACkA', case=False) | CommandLine.str.contains(r'6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA', case=False) | CommandLine.str.contains(r'OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ', case=False) | CommandLine.str.contains(r'oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA', case=False) | CommandLine.str.contains(r'6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA', case=False) | CommandLine.str.contains(r'OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ', case=False) | CommandLine.str.contains(r'oAOgAoACcATABvACcAKwAnAGEAZAAnACkA', case=False) | CommandLine.str.contains(r'6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA', case=False) | CommandLine.str.contains(r'OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ', case=False) | CommandLine.str.contains(r'oAOgAoACcATABvAGEAJwArACcAZAAnACkA', case=False) | CommandLine.str.contains(r'6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Active Directory Enumeration Using AD Module - ProcCreation",
        "id": "70bc5215-526f-4477-963c-a47a5c9ebd12",
        "status": "test",
        "description": "Detects usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dl\" DLL. Which is often used by attackers to perform AD enumeration.",
        "tags": [
            "attack.reconnaissance",
            "attack.discovery",
            "attack.impact"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | OriginalFileName==['PowerShell.EXE', 'pwsh.dll']) & (CommandLine.str.contains(r'Import-Module ', case=False) | CommandLine.str.contains(r'ipmo ', case=False)) & CommandLine.str.contains(r'Microsoft.ActiveDirectory.Management.dll', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Console CodePage Lookup Via CHCP",
        "id": "7090adee-82e2-4269-bd59-80691e7c6338",
        "status": "test",
        "description": "Detects use of chcp to look up the system locale value as part of host discovery",
        "tags": [
            "attack.discovery",
            "attack.t1614.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\cmd.exe', case=False) & (ParentCommandLine.str.contains(r' -c ', case=False) | ParentCommandLine.str.contains(r' /c ', case=False) | ParentCommandLine.str.contains(r' \u2013c ', case=False) | ParentCommandLine.str.contains(r' \u2014c ', case=False) | ParentCommandLine.str.contains(r' \u2015c ', case=False) | ParentCommandLine.str.contains(r' -r ', case=False) | ParentCommandLine.str.contains(r' /r ', case=False) | ParentCommandLine.str.contains(r' \u2013r ', case=False) | ParentCommandLine.str.contains(r' \u2014r ', case=False) | ParentCommandLine.str.contains(r' \u2015r ', case=False) | ParentCommandLine.str.contains(r' -k ', case=False) | ParentCommandLine.str.contains(r' /k ', case=False) | ParentCommandLine.str.contains(r' \u2013k ', case=False) | ParentCommandLine.str.contains(r' \u2014k ', case=False) | ParentCommandLine.str.contains(r' \u2015k ', case=False)) & Image.str.contains(r'\\\\chcp.com', case=False) & (CommandLine.str.contains(r'chcp', case=False) | CommandLine.str.contains(r'chcp ', case=False) | CommandLine.str.contains(r'chcp  ', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Change Default File Association Via Assoc",
        "id": "3d3aa6cd-6272-44d6-8afc-7e88dfef7061",
        "status": "test",
        "description": "Detects file association changes using the builtin \"assoc\" command.\nWhen a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n",
        "tags": [
            "attack.persistence",
            "attack.t1546.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & CommandLine.str.contains(r'assoc', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Provlaunch.EXE Binary Proxy Execution Abuse",
        "id": "7f5d1c9a-3e83-48df-95a7-2b98aae6c13c",
        "status": "test",
        "description": "Detects child processes of \"provlaunch.exe\" which might indicate potential abuse to proxy execution.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage.str.contains(r'\\\\provlaunch.exe', case=False) & ~ (Image.str.contains(r'\\\\calc.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\notepad.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r':\\\\PerfLogs\\\\', case=False) | Image.str.contains(r':\\\\Temp\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\System32\\\\Tasks\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\Tasks\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Execute Files with Msdeploy.exe",
        "id": "646bc99f-6682-4b47-a73a-17b1b64c9d34",
        "status": "test",
        "description": "Detects file execution using the msdeploy.exe lolbin",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r'verb:sync', case=False) & CommandLine.str.contains(r'-source:RunCommand', case=False) & CommandLine.str.contains(r'-dest:runCommand', case=False) & Image.str.contains(r'\\\\msdeploy.exe', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Scripting/CommandLine Process Spawned Regsvr32",
        "id": "ab37a6ec-6068-432b-a64e-2c7bf95b1d22",
        "status": "test",
        "description": "Detects various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.010"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\cmd.exe', case=False) | ParentImage.str.contains(r'\\\\cscript.exe', case=False) | ParentImage.str.contains(r'\\\\mshta.exe', case=False) | ParentImage.str.contains(r'\\\\powershell_ise.exe', case=False) | ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False) | ParentImage.str.contains(r'\\\\wscript.exe', case=False)) & Image.str.contains(r'\\\\regsvr32.exe', case=False) & ~ (ParentImage=='C:\\\\Windows\\\\System32\\\\cmd.exe' & CommandLine.str.contains(r' /s C:\\\\Windows\\\\System32\\\\RpcProxy\\\\RpcProxy.dll', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed CURL.EXE Execution",
        "id": "7530cd3d-7671-43e3-b209-976966f6ea48",
        "status": "test",
        "description": "Detects the execution of a renamed \"CURL.exe\" binary based on the PE metadata fields",
        "tags": [
            "attack.execution",
            "attack.t1059",
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='curl.exe' | Description=='The curl executable') & ~ Image.str.contains(r'\\\\curl', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Webshell Hacking Activity Patterns",
        "id": "4ebc877f-4612-45cb-b3a5-8e3834db36c9",
        "status": "test",
        "description": "Detects certain parent child patterns found in cases in which a web shell is used to perform certain credential dumping or exfiltration activities on a compromised system\n",
        "tags": [
            "attack.persistence",
            "attack.t1505.003",
            "attack.t1018",
            "attack.t1033",
            "attack.t1087"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\caddy.exe', case=False) | ParentImage.str.contains(r'\\\\httpd.exe', case=False) | ParentImage.str.contains(r'\\\\nginx.exe', case=False) | ParentImage.str.contains(r'\\\\php-cgi.exe', case=False) | ParentImage.str.contains(r'\\\\w3wp.exe', case=False) | ParentImage.str.contains(r'\\\\ws_tomcatservice.exe', case=False) | (ParentImage.str.contains(r'\\\\java.exe', case=False) | ParentImage.str.contains(r'\\\\javaw.exe', case=False)) & (ParentImage.str.contains(r'-tomcat-', case=False) | ParentImage.str.contains(r'\\\\tomcat', case=False)) | (ParentImage.str.contains(r'\\\\java.exe', case=False) | ParentImage.str.contains(r'\\\\javaw.exe', case=False)) & (CommandLine.str.contains(r'catalina.jar', case=False) | CommandLine.str.contains(r'CATALINA_HOME', case=False))) & (CommandLine.str.contains(r'rundll32', case=False) & CommandLine.str.contains(r'comsvcs', case=False) | CommandLine.str.contains(r' -hp', case=False) & CommandLine.str.contains(r' a ', case=False) & CommandLine.str.contains(r' -m', case=False) | CommandLine.str.contains(r'net', case=False) & CommandLine.str.contains(r' user ', case=False) & CommandLine.str.contains(r' /add', case=False) | CommandLine.str.contains(r'net', case=False) & CommandLine.str.contains(r' localgroup ', case=False) & CommandLine.str.contains(r' administrators ', case=False) & CommandLine.str.contains(r'/add', case=False) | Image.str.contains(r'\\\\ntdsutil.exe', case=False) | Image.str.contains(r'\\\\ldifde.exe', case=False) | Image.str.contains(r'\\\\adfind.exe', case=False) | Image.str.contains(r'\\\\procdump.exe', case=False) | Image.str.contains(r'\\\\Nanodump.exe', case=False) | Image.str.contains(r'\\\\vssadmin.exe', case=False) | Image.str.contains(r'\\\\fsutil.exe', case=False) | CommandLine.str.contains(r' -decode ', case=False) | CommandLine.str.contains(r' -NoP ', case=False) | CommandLine.str.contains(r' -W Hidden ', case=False) | CommandLine.str.contains(r' /decode ', case=False) | CommandLine.str.contains(r' /ticket:', case=False) | CommandLine.str.contains(r' sekurlsa', case=False) | CommandLine.str.contains(r'.dmp full', case=False) | CommandLine.str.contains(r'.downloadfile(', case=False) | CommandLine.str.contains(r'.downloadstring(', case=False) | CommandLine.str.contains(r'FromBase64String', case=False) | CommandLine.str.contains(r'process call create', case=False) | CommandLine.str.contains(r'reg save ', case=False) | CommandLine.str.contains(r'whoami /priv', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious PowerShell Parameter Substring",
        "id": "36210e0d-5b19-485d-a087-c096088885f0",
        "status": "test",
        "description": "Detects suspicious PowerShell invocation with a parameter substring",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & (CommandLine.str.contains(r' -windowstyle h ', case=False) | CommandLine.str.contains(r' -windowstyl h', case=False) | CommandLine.str.contains(r' -windowsty h', case=False) | CommandLine.str.contains(r' -windowst h', case=False) | CommandLine.str.contains(r' -windows h', case=False) | CommandLine.str.contains(r' -windo h', case=False) | CommandLine.str.contains(r' -wind h', case=False) | CommandLine.str.contains(r' -win h', case=False) | CommandLine.str.contains(r' -wi h', case=False) | CommandLine.str.contains(r' -win h ', case=False) | CommandLine.str.contains(r' -win hi ', case=False) | CommandLine.str.contains(r' -win hid ', case=False) | CommandLine.str.contains(r' -win hidd ', case=False) | CommandLine.str.contains(r' -win hidde ', case=False) | CommandLine.str.contains(r' -NoPr ', case=False) | CommandLine.str.contains(r' -NoPro ', case=False) | CommandLine.str.contains(r' -NoProf ', case=False) | CommandLine.str.contains(r' -NoProfi ', case=False) | CommandLine.str.contains(r' -NoProfil ', case=False) | CommandLine.str.contains(r' -nonin ', case=False) | CommandLine.str.contains(r' -nonint ', case=False) | CommandLine.str.contains(r' -noninte ', case=False) | CommandLine.str.contains(r' -noninter ', case=False) | CommandLine.str.contains(r' -nonintera ', case=False) | CommandLine.str.contains(r' -noninterac ', case=False) | CommandLine.str.contains(r' -noninteract ', case=False) | CommandLine.str.contains(r' -noninteracti ', case=False) | CommandLine.str.contains(r' -noninteractiv ', case=False) | CommandLine.str.contains(r' -ec ', case=False) | CommandLine.str.contains(r' -encodedComman ', case=False) | CommandLine.str.contains(r' -encodedComma ', case=False) | CommandLine.str.contains(r' -encodedComm ', case=False) | CommandLine.str.contains(r' -encodedCom ', case=False) | CommandLine.str.contains(r' -encodedCo ', case=False) | CommandLine.str.contains(r' -encodedC ', case=False) | CommandLine.str.contains(r' -encoded ', case=False) | CommandLine.str.contains(r' -encode ', case=False) | CommandLine.str.contains(r' -encod ', case=False) | CommandLine.str.contains(r' -enco ', case=False) | CommandLine.str.contains(r' -en ', case=False) | CommandLine.str.contains(r' -executionpolic ', case=False) | CommandLine.str.contains(r' -executionpoli ', case=False) | CommandLine.str.contains(r' -executionpol ', case=False) | CommandLine.str.contains(r' -executionpo ', case=False) | CommandLine.str.contains(r' -executionp ', case=False) | CommandLine.str.contains(r' -execution bypass', case=False) | CommandLine.str.contains(r' -executio bypass', case=False) | CommandLine.str.contains(r' -executi bypass', case=False) | CommandLine.str.contains(r' -execut bypass', case=False) | CommandLine.str.contains(r' -execu bypass', case=False) | CommandLine.str.contains(r' -exec bypass', case=False) | CommandLine.str.contains(r' -exe bypass', case=False) | CommandLine.str.contains(r' -ex bypass', case=False) | CommandLine.str.contains(r' -ep bypass', case=False) | CommandLine.str.contains(r' /windowstyle h ', case=False) | CommandLine.str.contains(r' /windowstyl h', case=False) | CommandLine.str.contains(r' /windowsty h', case=False) | CommandLine.str.contains(r' /windowst h', case=False) | CommandLine.str.contains(r' /windows h', case=False) | CommandLine.str.contains(r' /windo h', case=False) | CommandLine.str.contains(r' /wind h', case=False) | CommandLine.str.contains(r' /win h', case=False) | CommandLine.str.contains(r' /wi h', case=False) | CommandLine.str.contains(r' /win h ', case=False) | CommandLine.str.contains(r' /win hi ', case=False) | CommandLine.str.contains(r' /win hid ', case=False) | CommandLine.str.contains(r' /win hidd ', case=False) | CommandLine.str.contains(r' /win hidde ', case=False) | CommandLine.str.contains(r' /NoPr ', case=False) | CommandLine.str.contains(r' /NoPro ', case=False) | CommandLine.str.contains(r' /NoProf ', case=False) | CommandLine.str.contains(r' /NoProfi ', case=False) | CommandLine.str.contains(r' /NoProfil ', case=False) | CommandLine.str.contains(r' /nonin ', case=False) | CommandLine.str.contains(r' /nonint ', case=False) | CommandLine.str.contains(r' /noninte ', case=False) | CommandLine.str.contains(r' /noninter ', case=False) | CommandLine.str.contains(r' /nonintera ', case=False) | CommandLine.str.contains(r' /noninterac ', case=False) | CommandLine.str.contains(r' /noninteract ', case=False) | CommandLine.str.contains(r' /noninteracti ', case=False) | CommandLine.str.contains(r' /noninteractiv ', case=False) | CommandLine.str.contains(r' /ec ', case=False) | CommandLine.str.contains(r' /encodedComman ', case=False) | CommandLine.str.contains(r' /encodedComma ', case=False) | CommandLine.str.contains(r' /encodedComm ', case=False) | CommandLine.str.contains(r' /encodedCom ', case=False) | CommandLine.str.contains(r' /encodedCo ', case=False) | CommandLine.str.contains(r' /encodedC ', case=False) | CommandLine.str.contains(r' /encoded ', case=False) | CommandLine.str.contains(r' /encode ', case=False) | CommandLine.str.contains(r' /encod ', case=False) | CommandLine.str.contains(r' /enco ', case=False) | CommandLine.str.contains(r' /en ', case=False) | CommandLine.str.contains(r' /executionpolic ', case=False) | CommandLine.str.contains(r' /executionpoli ', case=False) | CommandLine.str.contains(r' /executionpol ', case=False) | CommandLine.str.contains(r' /executionpo ', case=False) | CommandLine.str.contains(r' /executionp ', case=False) | CommandLine.str.contains(r' /execution bypass', case=False) | CommandLine.str.contains(r' /executio bypass', case=False) | CommandLine.str.contains(r' /executi bypass', case=False) | CommandLine.str.contains(r' /execut bypass', case=False) | CommandLine.str.contains(r' /execu bypass', case=False) | CommandLine.str.contains(r' /exec bypass', case=False) | CommandLine.str.contains(r' /exe bypass', case=False) | CommandLine.str.contains(r' /ex bypass', case=False) | CommandLine.str.contains(r' /ep bypass', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File In Suspicious Location Encoded To Base64 Via Certutil.EXE",
        "id": "82a6714f-4899-4f16-9c1e-9a333544d4c3",
        "status": "test",
        "description": "Detects the execution of certutil with the \"encode\" flag to encode a file to base64 where the files are located in potentially suspicious locations",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\certutil.exe', case=False) | OriginalFileName=='CertUtil.exe') & (CommandLine.str.contains(r'-encode', case=False) | CommandLine.str.contains(r'/encode', case=False) | CommandLine.str.contains(r'\u2013encode', case=False) | CommandLine.str.contains(r'\u2014encode', case=False) | CommandLine.str.contains(r'\u2015encode', case=False)) & (CommandLine.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False) | CommandLine.str.contains(r'\\\\Desktop\\\\', case=False) | CommandLine.str.contains(r'\\\\Local\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'\\\\PerfLogs\\\\', case=False) | CommandLine.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | CommandLine.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | CommandLine.str.contains(r'$Recycle.Bin', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Hiding User Account Via SpecialAccounts Registry Key - CommandLine",
        "id": "9ec9fb1b-e059-4489-9642-f270c207923d",
        "status": "experimental",
        "description": "Detects changes to the registry key \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" where the value is set to \"0\" in order to hide user account from being listed on the logon screen.\n",
        "tags": [
            "attack.t1564.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\reg.exe', case=False) & CommandLine.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\SpecialAccounts\\\\UserList', case=False) & CommandLine.str.contains(r'add', case=False) & CommandLine.str.contains(r'/v', case=False) & CommandLine.str.contains(r'/d 0', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New User Created Via Net.EXE With Never Expire Option",
        "id": "b9f0e6f5-09b4-4358-bae4-08408705bd5c",
        "status": "test",
        "description": "Detects creation of local users via the net.exe command with the option \"never expire\"",
        "tags": [
            "attack.persistence",
            "attack.t1136.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | OriginalFileName==['net.exe', 'net1.exe']) & CommandLine.str.contains(r'user', case=False) & CommandLine.str.contains(r'add', case=False) & CommandLine.str.contains(r'expires:never', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Dumping Process via Sqldumper.exe",
        "id": "23ceaf5c-b6f1-4a32-8559-f2ff734be516",
        "status": "test",
        "description": "Detects process dump via legitimate sqldumper.exe binary",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\sqldumper.exe', case=False) & (CommandLine.str.contains(r'0x0110', case=False) | CommandLine.str.contains(r'0x01100:40', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Process Parents",
        "id": "cbec226f-63d9-4eca-9f52-dfb6652f24df",
        "status": "test",
        "description": "Detects suspicious parent processes that should not have any children or should only have a single possible child program",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (ParentImage.str.contains(r'\\\\minesweeper.exe', case=False) | ParentImage.str.contains(r'\\\\winver.exe', case=False) | ParentImage.str.contains(r'\\\\bitsadmin.exe', case=False) | (ParentImage.str.contains(r'\\\\csrss.exe', case=False) | ParentImage.str.contains(r'\\\\certutil.exe', case=False) | ParentImage.str.contains(r'\\\\eventvwr.exe', case=False) | ParentImage.str.contains(r'\\\\calc.exe', case=False) | ParentImage.str.contains(r'\\\\notepad.exe', case=False)) & ~ (Image.str.contains(r'\\\\WerFault.exe', case=False) | Image.str.contains(r'\\\\wermgr.exe', case=False) | Image.str.contains(r'\\\\conhost.exe', case=False) | Image.str.contains(r'\\\\mmc.exe', case=False) | Image.str.contains(r'\\\\win32calc.exe', case=False) | Image.str.contains(r'\\\\notepad.exe', case=False) | Image is null))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PsExec Service Child Process Execution as LOCAL SYSTEM",
        "id": "7c0dcd3d-acf8-4f71-9570-f448b0034f94",
        "status": "test",
        "description": "Detects suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with highest privileges and not only the privileges of the login user account (e.g. the administrator account)",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & ParentImage=='C:\\\\Windows\\\\PSEXESVC.exe' & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Capture Session Launched Via DXCap.EXE",
        "id": "60f16a96-db70-42eb-8f76-16763e333590",
        "status": "test",
        "description": "Detects the execution of \"DXCap.EXE\" with the \"-c\" flag, which allows a user to launch any arbitrary binary or windows package through DXCap itself. This can be abused to potentially bypass application whitelisting.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\DXCap.exe', case=False) | OriginalFileName=='DXCap.exe') & CommandLine.str.contains(r' -c ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Recon Information for Export with Command Prompt",
        "id": "aa2efee7-34dd-446e-8a37-40790a66efd7",
        "status": "test",
        "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data.",
        "tags": [
            "attack.collection",
            "attack.t1119"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\tree.com', case=False) | Image.str.contains(r'\\\\WMIC.exe', case=False) | Image.str.contains(r'\\\\doskey.exe', case=False) | Image.str.contains(r'\\\\sc.exe', case=False) | OriginalFileName==['wmic.exe', 'DOSKEY.EXE', 'sc.exe']) & (ParentCommandLine.str.contains(r' > %TEMP%\\\\', case=False) | ParentCommandLine.str.contains(r' > %TMP%\\\\', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - WinRM Access Via Evil-WinRM",
        "id": "a197e378-d31b-41c0-9635-cfdf1c1bb423",
        "status": "test",
        "description": "Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.006"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & Image.str.contains(r'\\\\ruby.exe', case=False) & CommandLine.str.contains(r'-i ', case=False) & CommandLine.str.contains(r'-u ', case=False) & CommandLine.str.contains(r'-p ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Use NTFS Short Name in Image",
        "id": "3ef5605c-9eb9-47b0-9a71-b727e6aa5c3b",
        "status": "test",
        "description": "Detect use of the Windows 8.3 short name. Which could be used as a method to avoid Image based detection",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'~1.bat', case=False) | Image.str.contains(r'~1.dll', case=False) | Image.str.contains(r'~1.exe', case=False) | Image.str.contains(r'~1.hta', case=False) | Image.str.contains(r'~1.js', case=False) | Image.str.contains(r'~1.msi', case=False) | Image.str.contains(r'~1.ps1', case=False) | Image.str.contains(r'~1.tmp', case=False) | Image.str.contains(r'~1.vbe', case=False) | Image.str.contains(r'~1.vbs', case=False) | Image.str.contains(r'~2.bat', case=False) | Image.str.contains(r'~2.dll', case=False) | Image.str.contains(r'~2.exe', case=False) | Image.str.contains(r'~2.hta', case=False) | Image.str.contains(r'~2.js', case=False) | Image.str.contains(r'~2.msi', case=False) | Image.str.contains(r'~2.ps1', case=False) | Image.str.contains(r'~2.tmp', case=False) | Image.str.contains(r'~2.vbe', case=False) | Image.str.contains(r'~2.vbs', case=False)) & ~ ParentImage=='C:\\\\Windows\\\\explorer.exe' & ~ (ParentImage.str.contains(r'\\\\WebEx\\\\WebexHost.exe', case=False) | ParentImage.str.contains(r'\\\\thor\\\\thor64.exe', case=False) | Image=='C:\\\\PROGRA~1\\\\WinZip\\\\WZPREL~1.EXE' | Image.str.contains(r'\\\\VCREDI~1.EXE', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Unmount Share Via Net.EXE",
        "id": "cb7c4a03-2871-43c0-9bbb-18bbdb079896",
        "status": "test",
        "description": "Detects when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.005"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\net.exe', case=False) | Image.str.contains(r'\\\\net1.exe', case=False) | OriginalFileName==['net.exe', 'net1.exe']) & CommandLine.str.contains(r'share', case=False) & CommandLine.str.contains(r'/delete', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File And SubFolder Enumeration Via Dir Command",
        "id": "7c9340a9-e2ee-4e43-94c5-c54ebbea1006",
        "status": "test",
        "description": "Detects usage of the \"dir\" command part of Widows CMD with the \"/S\" command line flag in order to enumerate files in a specified directory and all subdirectories.\n",
        "tags": [
            "attack.discovery",
            "attack.t1217"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\cmd.exe', case=False) | OriginalFileName=='Cmd.Exe') & (CommandLine.str.contains(r'*dir*-s*') | CommandLine.str.contains(r'*dir*/s*') | CommandLine.str.contains(r'*dir*\u2013s*') | CommandLine.str.contains(r'*dir*\u2014s*') | CommandLine.str.contains(r'*dir*\u2015s*'))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Product Reconnaissance Via Wmic.EXE",
        "id": "15434e33-5027-4914-88d5-3d4145ec25a9",
        "status": "test",
        "description": "Detects the execution of WMIC in order to get a list of firewall and antivirus products",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\wmic.exe', case=False) | OriginalFileName=='wmic.exe') & CommandLine.str.contains(r'Product', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - NirCmd Execution As LOCAL SYSTEM",
        "id": "d9047477-0359-48c9-b8c7-792cedcdc9c4",
        "status": "test",
        "description": "Detects the use of NirCmd tool for command execution as SYSTEM user",
        "tags": [
            "attack.execution",
            "attack.t1569.002",
            "attack.s0029"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & CommandLine.str.contains(r' runassystem ', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Potential PE Metadata Tamper Using Rcedit",
        "id": "0c92f2e6-f08f-4b73-9216-ecb0ca634689",
        "status": "test",
        "description": "Detects the use of rcedit to potentially alter executable PE metadata properties, which could conceal efforts to rename system utilities for defense evasion.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.003",
            "attack.t1036",
            "attack.t1027.005",
            "attack.t1027"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\rcedit-x64.exe', case=False) | Image.str.contains(r'\\\\rcedit-x86.exe', case=False) | Description=='Edit resources of exe' | Product=='rcedit') & CommandLine.str.contains(r'--set-', case=False) & (CommandLine.str.contains(r'OriginalFileName', case=False) | CommandLine.str.contains(r'CompanyName', case=False) | CommandLine.str.contains(r'FileDescription', case=False) | CommandLine.str.contains(r'ProductName', case=False) | CommandLine.str.contains(r'ProductVersion', case=False) | CommandLine.str.contains(r'LegalCopyright', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Use of PsLogList",
        "id": "aae1243f-d8af-40d8-ab20-33fc6d0c55bc",
        "status": "test",
        "description": "Detects usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs",
        "tags": [
            "attack.discovery",
            "attack.t1087",
            "attack.t1087.001",
            "attack.t1087.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (OriginalFileName=='psloglist.exe' | Image.str.contains(r'\\\\psloglist.exe', case=False) | Image.str.contains(r'\\\\psloglist64.exe', case=False)) & (CommandLine.str.contains(r' security', case=False) | CommandLine.str.contains(r' application', case=False) | CommandLine.str.contains(r' system', case=False)) & (CommandLine.str.contains(r' -d', case=False) | CommandLine.str.contains(r' /d', case=False) | CommandLine.str.contains(r' \u2013d', case=False) | CommandLine.str.contains(r' \u2014d', case=False) | CommandLine.str.contains(r' \u2015d', case=False) | CommandLine.str.contains(r' -x', case=False) | CommandLine.str.contains(r' /x', case=False) | CommandLine.str.contains(r' \u2013x', case=False) | CommandLine.str.contains(r' \u2014x', case=False) | CommandLine.str.contains(r' \u2015x', case=False) | CommandLine.str.contains(r' -s', case=False) | CommandLine.str.contains(r' /s', case=False) | CommandLine.str.contains(r' \u2013s', case=False) | CommandLine.str.contains(r' \u2014s', case=False) | CommandLine.str.contains(r' \u2015s', case=False) | CommandLine.str.contains(r' -c', case=False) | CommandLine.str.contains(r' /c', case=False) | CommandLine.str.contains(r' \u2013c', case=False) | CommandLine.str.contains(r' \u2014c', case=False) | CommandLine.str.contains(r' \u2015c', case=False) | CommandLine.str.contains(r' -g', case=False) | CommandLine.str.contains(r' /g', case=False) | CommandLine.str.contains(r' \u2013g', case=False) | CommandLine.str.contains(r' \u2014g', case=False) | CommandLine.str.contains(r' \u2015g', case=False))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Rclone Execution",
        "id": "e37db05d-d1f9-49c8-b464-cee1a4b11638",
        "status": "test",
        "description": "Detects execution of RClone utility for exfiltration as used by various ransomwares strains like REvil, Conti, FiveHands, etc",
        "tags": [
            "attack.exfiltration",
            "attack.t1567.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (CommandLine.str.contains(r'--config ', case=False) & CommandLine.str.contains(r'--no-check-certificate ', case=False) & CommandLine.str.contains(r' copy ', case=False) | (Image.str.contains(r'\\\\rclone.exe', case=False) | Description=='Rsync for cloud storage') & (CommandLine.str.contains(r'pass', case=False) | CommandLine.str.contains(r'user', case=False) | CommandLine.str.contains(r'copy', case=False) | CommandLine.str.contains(r'sync', case=False) | CommandLine.str.contains(r'config', case=False) | CommandLine.str.contains(r'lsd', case=False) | CommandLine.str.contains(r'remote', case=False) | CommandLine.str.contains(r'ls', case=False) | CommandLine.str.contains(r'mega', case=False) | CommandLine.str.contains(r'pcloud', case=False) | CommandLine.str.contains(r'ftp', case=False) | CommandLine.str.contains(r'ignore-existing', case=False) | CommandLine.str.contains(r'auto-confirm', case=False) | CommandLine.str.contains(r'transfers', case=False) | CommandLine.str.contains(r'multi-thread-streams', case=False) | CommandLine.str.contains(r'no-check-certificate ', case=False)))"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Arbitrary DLL Load Using Winword",
        "id": "f7375e28-5c14-432f-b8d1-1db26c832df3",
        "status": "test",
        "description": "Detects potential DLL sideloading using the Microsoft Office winword process via the '/l' flag.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==1 & (Image.str.contains(r'\\\\WINWORD.exe', case=False) | OriginalFileName=='WinWord.exe') & CommandLine.str.contains(r'/l ', case=False) & CommandLine.str.contains(r'.dll', case=False)"
        ],
        "logsource": {
            "category": "process_creation",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Vulnerable HackSys Extreme Vulnerable Driver Load",
        "id": "295c9289-acee-4503-a571-8eacaef36b28",
        "status": "test",
        "description": "Detects the load of HackSys Extreme Vulnerable Driver which is an intentionally vulnerable Windows driver developed for security enthusiasts to learn and polish their exploitation skills at Kernel level and often abused by threat actors",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==6 & (ImageLoaded.str.contains(r'\\\\HEVD.sys', case=False) | Hashes.str.contains(r'IMPHASH=f26d0b110873a1c7d8c4f08fbeab89c5', case=False) | Hashes.str.contains(r'IMPHASH=c46ea2e651fd5f7f716c8867c6d13594', case=False))"
        ],
        "logsource": {
            "category": "driver_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Malicious Driver Load",
        "id": "05296024-fe8a-4baf-8f3d-9a5f5624ceb2",
        "status": "test",
        "description": "Detects loading of known malicious drivers via their hash.",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543.003",
            "attack.t1068"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==6 & (Hashes.str.contains(r'MD5=5be61a24f50eb4c94d98b8a82ef58dcf', case=False) | Hashes.str.contains(r'MD5=d70a80fc73dd43469934a7b1cc623c76', case=False) | Hashes.str.contains(r'MD5=3b71eab204a5f7ed77811e41fed73105', case=False) | Hashes.str.contains(r'MD5=528ce5ce19eb34f401ef024de7ddf222', case=False) | Hashes.str.contains(r'MD5=ae548418b491cd3f31618eb9e5730973', case=False) | Hashes.str.contains(r'MD5=72f53f55898548767e0276c472be41e8', case=False) | Hashes.str.contains(r'MD5=508faa4647f305a97ed7167abc4d1330', case=False) | Hashes.str.contains(r'MD5=ed2b653d55c03f0bffa250372d682b75', case=False) | Hashes.str.contains(r'MD5=0d2ba47286f1c68e87622b3a16bf9d92', case=False) | Hashes.str.contains(r'MD5=3164bd6c12dd0fe1bdf3b833d56323b9', case=False) | Hashes.str.contains(r'MD5=70fd7209ce5c013a1f9e699b5cc86cdc', case=False) | Hashes.str.contains(r'MD5=c71be7b112059d2dc84c0f952e04e6cc', case=False) | Hashes.str.contains(r'MD5=acac842a46f3501fe407b1db1b247a0b', case=False) | Hashes.str.contains(r'MD5=01c2e4d8234258451083d6ce4e8910b7', case=False) | Hashes.str.contains(r'MD5=c8541a9cef64589593e999968a0385b9', case=False) | Hashes.str.contains(r'MD5=e172a38ade3aa0a2bc1bf9604a54a3b5', case=False) | Hashes.str.contains(r'MD5=6fcf56f6ca3210ec397e55f727353c4a', case=False) | Hashes.str.contains(r'MD5=2b80be31fbb11d4c1ef6d6a80b2e0c16', case=False) | Hashes.str.contains(r'MD5=07056573d464b0f5284f7e3acedd4a3f', case=False) | Hashes.str.contains(r'MD5=c7b7f1edb9bbef174e6506885561d85d', case=False) | Hashes.str.contains(r'MD5=d5918d735a23f746f0e83f724c4f26e5', case=False) | Hashes.str.contains(r'MD5=84763d8ca9fe5c3bff9667b2adf667de', case=False) | Hashes.str.contains(r'MD5=fb593b1f1f80d20fc7f4b818065c64b6', case=False) | Hashes.str.contains(r'MD5=909f3fc221acbe999483c87d9ead024a', case=False) | Hashes.str.contains(r'MD5=e29f6311ae87542b3d693c1f38e4e3ad', case=False) | Hashes.str.contains(r'MD5=aeb0801f22d71c7494e884d914446751', case=False) | Hashes.str.contains(r'MD5=3f11a94f1ac5efdd19767c6976da9ba4', case=False) | Hashes.str.contains(r'MD5=be6318413160e589080df02bb3ca6e6a', case=False) | Hashes.str.contains(r'MD5=0b311af53d2f4f77d30f1aed709db257', case=False) | Hashes.str.contains(r'MD5=d075d56dfce6b9b13484152b1ef40f93', case=False) | Hashes.str.contains(r'MD5=27384ec4c634701012a2962c30badad2', case=False) | Hashes.str.contains(r'MD5=5eb2c576597dd21a6b44557c237cf896', case=False) | Hashes.str.contains(r'MD5=f56db4eba3829c0918413b5c0b42f00f', case=False) | Hashes.str.contains(r'MD5=e27b2486aa5c256b662812b465b6036c', case=False) | Hashes.str.contains(r'MD5=db86dfd7aefbb5be6728a63461b0f5f3', case=False) | Hashes.str.contains(r'MD5=04a88f5974caa621cee18f34300fc08a', case=False) | Hashes.str.contains(r'MD5=5129d8fd53d6a4aba81657ab2aa5d243', case=False) | Hashes.str.contains(r'MD5=cd2c641788d5d125c316ed739c69bb59', case=False) | Hashes.str.contains(r'MD5=7073cd0085fcba1cd7d3568f9e6d652c', case=False) | Hashes.str.contains(r'MD5=24f0f2b4b3cdae11de1b81c537df41c7', case=False) | Hashes.str.contains(r'MD5=88bea56ae9257b40063785cf47546024', case=False) | Hashes.str.contains(r'MD5=63060b756377fce2ce4ab9d079ca732f', case=False) | Hashes.str.contains(r'MD5=50b39072d0ee9af5ef4824eca34be6e3', case=False) | Hashes.str.contains(r'MD5=57c18a8f5d1ba6d015e4d5bc698e3624', case=False) | Hashes.str.contains(r'MD5=7d26985a5048bad57d9c223362f3d55c', case=False) | Hashes.str.contains(r'MD5=ba54a0dbe2685e66e21d41b4529b3528', case=False) | Hashes.str.contains(r'MD5=4ad8fd9e83d7200bd7f8d0d4a9abfb11', case=False) | Hashes.str.contains(r'MD5=b52f51bbe6b49d0b475d943c29c4d4cb', case=False) | Hashes.str.contains(r'MD5=a837302307dace2a00d07202b661bce2', case=False) | Hashes.str.contains(r'MD5=78a122d926ccc371d60c861600c310f3', case=False) | Hashes.str.contains(r'MD5=bdb305aa0806f8b38b7ce43c927fe919', case=False) | Hashes.str.contains(r'MD5=27053e964667318e1b370150cbca9138', case=False) | Hashes.str.contains(r'MD5=6a4fbcfb44717eae2145c761c1c99b6a', case=False) | Hashes.str.contains(r'MD5=d13c1b76b4a1ca3ff5ab63678b51df6d', case=False) | Hashes.str.contains(r'MD5=6a066d2be83cf83f343d0550b0b8f206', case=False) | Hashes.str.contains(r'MD5=7108b0d4021af4c41de2c223319cd4c1', case=False) | Hashes.str.contains(r'MD5=1cd158a64f3d886357535382a6fdad75', case=False) | Hashes.str.contains(r'MD5=e939448b28a4edc81f1f974cebf6e7d2', case=False) | Hashes.str.contains(r'MD5=4198d3db44d7c4b3ba9072d258a4fc2d', case=False) | Hashes.str.contains(r'MD5=4a27a2bdc6fbe39eeec6455fb1e0ef20', case=False) | Hashes.str.contains(r'MD5=30ca3cc19f001a8f12c619daa8c6b6e3', case=False) | Hashes.str.contains(r'MD5=fe9004353b25640f6a879e57f07122d7', case=False) | Hashes.str.contains(r'MD5=06c7fcf3523235cf52b3eee083ec07b2', case=False) | Hashes.str.contains(r'MD5=364605ad21b9275681cffef607fac273', case=False) | Hashes.str.contains(r'MD5=968ddb06af90ef83c5f20fbdd4eee62e', case=False) | Hashes.str.contains(r'MD5=ba50bd645d7c81416bb26a9d39998296', case=False) | Hashes.str.contains(r'MD5=29e03f4811b64969e48a99300978f58c', case=False) | Hashes.str.contains(r'MD5=b0770094c3c64250167b55e4db850c04', case=False) | Hashes.str.contains(r'MD5=40b968ecdbe9e967d92c5da51c390eee', case=False) | Hashes.str.contains(r'MD5=b6b530dd25c5eb66499968ec82e8791e', case=False) | Hashes.str.contains(r'MD5=f209cb0e468ca0b76d879859d5c8c54e', case=False) | Hashes.str.contains(r'MD5=76f8607fc4fb9e828d613a7214436b66', case=False) | Hashes.str.contains(r'MD5=4b058945c9f2b8d8ebc485add1101ba5', case=False) | Hashes.str.contains(r'MD5=faae7f5f69fde12303dd1c0c816b72b7', case=False) | Hashes.str.contains(r'MD5=89d294ef7fefcdf1a6ca0ab96a856f57', case=False) | Hashes.str.contains(r'MD5=ef0e1725aaf0c6c972593f860531a2ea', case=False) | Hashes.str.contains(r'MD5=bbdbffebfc753b11897de2da7c9912a5', case=False) | Hashes.str.contains(r'MD5=5ebfc0af031130ba9de1d5d3275734b3', case=False) | Hashes.str.contains(r'MD5=22949977ce5cd96ba674b403a9c81285', case=False) | Hashes.str.contains(r'MD5=77cfd3943cc34d9f5279c330cd8940bc', case=False) | Hashes.str.contains(r'MD5=311de109df18e485d4a626b5dbe19bc6', case=False) | Hashes.str.contains(r'MD5=2730cc25ad385acc7213a1261b21c12d', case=False) | Hashes.str.contains(r'MD5=87dc81ebe85f20c1a7970e495a778e60', case=False) | Hashes.str.contains(r'MD5=154b45f072fe844676e6970612fd39c7', case=False) | Hashes.str.contains(r'MD5=5a4fe297c7d42539303137b6d75b150d', case=False) | Hashes.str.contains(r'MD5=d6a1dd7b2c06f058b408b3613c13d413', case=False) | Hashes.str.contains(r'MD5=a6e9d6505f6d2326a8a9214667c61c67', case=False) | Hashes.str.contains(r'MD5=7fad9f2ef803496f482ce4728578a57a', case=False) | Hashes.str.contains(r'MD5=5076fba3d90e346fd17f78db0a4aa12c', case=False) | Hashes.str.contains(r'MD5=79df0eabbf2895e4e2dae15a4772868c', case=False) | Hashes.str.contains(r'MD5=14580bd59c55185115fd3abe73b016a2', case=False) | Hashes.str.contains(r'MD5=1f2888e57fdd6aee466962c25ba7d62d', case=False) | Hashes.str.contains(r'MD5=5e9231e85cecfc6141e3644fda12a734', case=False) | Hashes.str.contains(r'MD5=dc564bac7258e16627b9de0ce39fae25', case=False) | Hashes.str.contains(r'MD5=4e4c068c06331130334f23957fca9e3c', case=False) | Hashes.str.contains(r'MD5=1ee9f6326649cd23381eb9d7dfdeddf7', case=False) | Hashes.str.contains(r'MD5=4e1f656001af3677856f664e96282a6f', case=False) | Hashes.str.contains(r'MD5=36f44643178c505ea0384e0fb241e904', case=False) | Hashes.str.contains(r'MD5=6b480fac7caca2f85be9a0cfe79aedfc', case=False) | Hashes.str.contains(r'MD5=c1ab425977d467b64f437a6c5ad82b44', case=False) | Hashes.str.contains(r'MD5=fe508caa54ffeb2285d9f00df547fe4a', case=False) | Hashes.str.contains(r'MD5=d3af70287de8757cebc6f8d45bb21a20', case=False) | Hashes.str.contains(r'MD5=990b949894b7dc82a8cf1131b063cb1a', case=False) | Hashes.str.contains(r'MD5=c62209b8a5daf3f32ad876ad6cefda1b', case=False) | Hashes.str.contains(r'MD5=c159fb0f345a8771e56aab8e16927361', case=False) | Hashes.str.contains(r'MD5=19b15eeccab0752c6793f782ca665a45', case=False) | Hashes.str.contains(r'MD5=1d51029dfbd616bf121b40a0d1efeb10', case=False) | Hashes.str.contains(r'MD5=157a22689629ec876337f5f9409918d5', case=False) | Hashes.str.contains(r'MD5=3dd829fb27353622eff34be1eabb8f18', case=False) | Hashes.str.contains(r'MD5=8636fe3724f2bcba9399daffd6ef3c7e', case=False) | Hashes.str.contains(r'MD5=3d0b3e19262099ade884b75ba86ca7e8', case=False) | Hashes.str.contains(r'MD5=97539c78d6e2b5356ce79e40bcd4d570', case=False) | Hashes.str.contains(r'MD5=0308b6888e0f197db6704ca20203eee4', case=False) | Hashes.str.contains(r'MD5=091a6bd4880048514c5dd3bede15eba5', case=False) | Hashes.str.contains(r'MD5=7e92f98b809430622b04e88441b2eb04', case=False) | Hashes.str.contains(r'MD5=bb5bda8889d8d27ef984dbd6ad82c946', case=False) | Hashes.str.contains(r'MD5=b76aee508f68b5b6dccd6e1f66f4cf8b', case=False) | Hashes.str.contains(r'MD5=a822b9e6eedf69211013e192967bf523', case=False) | Hashes.str.contains(r'MD5=df52f8a85eb64bc69039243d9680d8e4', case=False) | Hashes.str.contains(r'MD5=bfbdea0589fb77c7a7095cf5cd6e8b7a', case=False) | Hashes.str.contains(r'MD5=44857ca402a15ab51dc5afe47abdfa44', case=False) | Hashes.str.contains(r'MD5=f9844524fb0009e5b784c21c7bad4220', case=False) | Hashes.str.contains(r'MD5=d34b218c386bfe8b1f9c941e374418d7', case=False) | Hashes.str.contains(r'MD5=0ca010a32a9b0aeae1e46d666b83b659', case=False) | Hashes.str.contains(r'MD5=93496a436c5546156a69deb255a9fed0', case=False) | Hashes.str.contains(r'MD5=1cd5e231064e03c596e819b6ff48daf9', case=False) | Hashes.str.contains(r'MD5=70a71fe86df717ac59dbf856d7ac5789', case=False) | Hashes.str.contains(r'MD5=a33089d4e50f7d2ea8b52ca95d26ebf3', case=False) | Hashes.str.contains(r'MD5=e0cc9b415d884f85c45be145872892b8', case=False) | Hashes.str.contains(r'MD5=a42249a046182aaaf3a7a7db98bfa69d', case=False) | Hashes.str.contains(r'MD5=c5ae6ca044bd03c3506c132b033be1dc', case=False) | Hashes.str.contains(r'MD5=7ebe606acd81abf1f8cb0767c974164b', case=False) | Hashes.str.contains(r'MD5=b5dcc869a91efcc6e8ea0c3c07605d63', case=False) | Hashes.str.contains(r'MD5=62c18d61ed324088f963510bae43b831', case=False) | Hashes.str.contains(r'MD5=093a2a635c3a27aac50efd6463f4efa1', case=False) | Hashes.str.contains(r'MD5=28102acca39ad0199f262ba9958be3f4', case=False) | Hashes.str.contains(r'MD5=650ef9dd70cb192027e536754d6e0f63', case=False) | Hashes.str.contains(r'MD5=32eb3d2bf2c5b3da2d2a1f20fffbac44', case=False) | Hashes.str.contains(r'MD5=6771b13a53b9c7449d4891e427735ea2', case=False) | Hashes.str.contains(r'MD5=072ba2309b825ce1dba37d8d924ea8ed', case=False) | Hashes.str.contains(r'MD5=2d37d2fb9b9f8ac52bc02cba4487e3cb', case=False) | Hashes.str.contains(r'MD5=1325ec39e98225e487b40043faee8052', case=False) | Hashes.str.contains(r'MD5=4484f4007de2c3ee4581a2cff77ca3b4', case=False) | Hashes.str.contains(r'MD5=a236e7d654cd932b7d11cb604629a2d0', case=False) | Hashes.str.contains(r'MD5=17509f0a98dc5c5d52c3f9ac1428a21b', case=False) | Hashes.str.contains(r'MD5=840a5edf2534dd23a082cf7b28cbfc4d', case=False) | Hashes.str.contains(r'MD5=77a7ed4798d02ef6636cd0fd07fc382a', case=False) | Hashes.str.contains(r'MD5=a9df5964635ef8bd567ae487c3d214c4', case=False) | Hashes.str.contains(r'MD5=8b75047199825c8e62fdcc1c915db8bd', case=False) | Hashes.str.contains(r'MD5=d416494232c4197cb36a914df2e17677', case=False) | Hashes.str.contains(r'MD5=4cf14a96485a1270fed97bb8000e4f86', case=False) | Hashes.str.contains(r'MD5=35e512f9bedc89dca5ce81f35820714c', case=False) | Hashes.str.contains(r'MD5=40f35792e7565aa047796758a3ce1b77', case=False) | Hashes.str.contains(r'MD5=f7f31bccc9b7b2964ac85106831022b1', case=False) | Hashes.str.contains(r'MD5=26aedc10d4215ba997495d3a68355f4a', case=False) | Hashes.str.contains(r'MD5=10f3679384a03cb487bda9621ceb5f90', case=False) | Hashes.str.contains(r'MD5=80219fb6b5954c33e16bac5ecdac651b', case=False) | Hashes.str.contains(r'MD5=cee36b5c6362993fa921435979bfbe4a', case=False) | Hashes.str.contains(r'MD5=e37a08f516b8a7ca64163f5d9e68fe5a', case=False) | Hashes.str.contains(r'MD5=49518f7375a5f995ebe9423d8f19cfe4', case=False) | Hashes.str.contains(r'MD5=920df6e42cf91bbe19707f5a86e3c5c5', case=False) | Hashes.str.contains(r'MD5=2ec877e425bd7eddb663627216e3491e', case=False) | Hashes.str.contains(r'MD5=550b7991d93534bc510bc4f237155a7a', case=False) | Hashes.str.contains(r'MD5=98d53f6b3bec0a3417a04fbb9e17fa06', case=False) | Hashes.str.contains(r'MD5=13a57a4ef721440c7c9208b51f7c05de', case=False) | Hashes.str.contains(r'MD5=c5fc3605194e033bdf3781ff2adaeb61', case=False) | Hashes.str.contains(r'MD5=6e625ec04c20a9dbd48c7060efbf5e92', case=False) | Hashes.str.contains(r'MD5=0b9b78d1281c7d4ab50497cf6ea7452a', case=False) | Hashes.str.contains(r'MD5=4e906fcb13e2793c98f47291fd69391b', case=False) | Hashes.str.contains(r'MD5=2bb353891d65c9e267eb98a3a2b694c3', case=False) | Hashes.str.contains(r'MD5=7d86cdda7f49f91fdb69901a002b34e7', case=False) | Hashes.str.contains(r'MD5=f69b06ca7c34d16f26ea1c6861edf62a', case=False) | Hashes.str.contains(r'MD5=ee6b1a79cb6641aa44c762ee90786fe0', case=False) | Hashes.str.contains(r'MD5=1fc7aeeff3ab19004d2e53eae8160ab1', case=False) | Hashes.str.contains(r'MD5=24d3ea54f25e32832ac20335a1ce1062', case=False) | Hashes.str.contains(r'MD5=c94f405c5929cfcccc8ad00b42c95083', case=False) | Hashes.str.contains(r'MD5=b164daf106566f444dfb280d743bc2f7', case=False) | Hashes.str.contains(r'MD5=93130909e562925597110a617f05e2a9', case=False) | Hashes.str.contains(r'MD5=f589d4bf547c140b6ec8a511ea47c658', case=False) | Hashes.str.contains(r'MD5=bf445ac375977ecf551bc2a912c58e8a', case=False) | Hashes.str.contains(r'MD5=629ee55e4b5a225d048fbcd5f0a1d18b', case=False) | Hashes.str.contains(r'MD5=0023ca0ca16a62d93ef51f3df98b2f94', case=False) | Hashes.str.contains(r'MD5=a3d69c7e24300389b56782aa63b0e357', case=False) | Hashes.str.contains(r'MD5=cbd8d370462503508e44dba023bdf9bc', case=False) | Hashes.str.contains(r'MD5=67daa04716803a15fc11c9e353d77c2f', case=False) | Hashes.str.contains(r'MD5=c9d4214c850e0cedf033dc8f0cd3aace', case=False) | Hashes.str.contains(r'MD5=bd5b0514f3b40f139d8079138d01b5f6', case=False) | Hashes.str.contains(r'MD5=19bdd9b799e3c2c54c0d7fff68b31c20', case=False) | Hashes.str.contains(r'MD5=f242cffd9926c0ccf94af3bf16b6e527', case=False) | Hashes.str.contains(r'MD5=5aeab9427d85951def146b4c0a44fc63', case=False) | Hashes.str.contains(r'MD5=40170485cca576adb5266cf5b0d3b0bd', case=False) | Hashes.str.contains(r'MD5=c277c4386a78fae1b7e17eaecf4f472b', case=False) | Hashes.str.contains(r'MD5=58c37866cbc3d1338e4fc58ada924ffe', case=False) | Hashes.str.contains(r'MD5=0f16a43f7989034641fd2de3eb268bf1', case=False) | Hashes.str.contains(r'MD5=0ae30291c6cbfa7be39320badd6e8de0', case=False) | Hashes.str.contains(r'MD5=05dd59bd4f175304480affd8f1305c37', case=False) | Hashes.str.contains(r'MD5=f838f4eb36f1e7036238776c7a70f0b0', case=False) | Hashes.str.contains(r'MD5=85093bb9f027027c2c61aee50796de30', case=False) | Hashes.str.contains(r'MD5=ae338d91d1b05a72559b7f6ed717362d', case=False) | Hashes.str.contains(r'MD5=bd91787b5dcb2189b856804e85dfa1d9', case=False) | Hashes.str.contains(r'MD5=6b3c1511e12f4d27a4ea3b18020d7b84', case=False) | Hashes.str.contains(r'MD5=97264fd62d4907bdac917917a07b3b7a', case=False) | Hashes.str.contains(r'MD5=6ececf26ff8b03ed7ffbddadec9a9dab', case=False) | Hashes.str.contains(r'MD5=47e6ac52431ca47da17248d80bf71389', case=False) | Hashes.str.contains(r'MD5=eb57f03b7603f0b235af62e8cd5be8c2', case=False) | Hashes.str.contains(r'MD5=e1a9aa4c14669b1fb1f67a7266f87e82', case=False) | Hashes.str.contains(r'MD5=29047f0b7790e524b09a06852d31a117', case=False) | Hashes.str.contains(r'MD5=4dd6250eb2d368f500949952eb013964', case=False) | Hashes.str.contains(r'MD5=fb7c61ef427f9b2fdff3574ee6b1819b', case=False) | Hashes.str.contains(r'MD5=844af8c877f5da723c1b82cf6e213fc1', case=False) | Hashes.str.contains(r'MD5=e39152eadd76751b1d7485231b280948', case=False) | Hashes.str.contains(r'MD5=ac6e29f535b2c42999c50d2fc32f2c9c', case=False) | Hashes.str.contains(r'MD5=2406ea37152d2154be3fef6d69ada2c6', case=False) | Hashes.str.contains(r'MD5=0ea8389589c603a8b05146bd06020597', case=False) | Hashes.str.contains(r'MD5=754e21482baf18b8b0ed0f4be462ba03', case=False) | Hashes.str.contains(r'MD5=c4a517a02ba9f6eac5cf06e3629cc076', case=False) | Hashes.str.contains(r'MD5=32282e07db321e8d7849f2287bb6a14f', case=False) | Hashes.str.contains(r'MD5=32b67a6cd6dd998b9f563ed13d54a8bc', case=False) | Hashes.str.contains(r'MD5=3359e1d4244a7d724949c63e89689ef8', case=False) | Hashes.str.contains(r'MD5=5917e415a5bf30b3fcbcbcb8a4f20ee0', case=False) | Hashes.str.contains(r'MD5=0bdd51cc33e88b5265dfb7d88c5dc8d6', case=False) | Hashes.str.contains(r'MD5=a90236e4962620949b720f647a91f101', case=False) | Hashes.str.contains(r'MD5=ccde8c94439f9fc9c42761e4b9a23d97', case=False) | Hashes.str.contains(r'MD5=68caf620ef8deaf06819cf8c80d3367b', case=False) | Hashes.str.contains(r'MD5=5fec28e8f4f76e5ede24beb32a32b9d7', case=False) | Hashes.str.contains(r'MD5=e8eac6642b882a6196555539149c73f2', case=False) | Hashes.str.contains(r'MD5=aa98b95f5cbae8260122de06a215ee10', case=False) | Hashes.str.contains(r'MD5=a5bcaa2fc87b42e2e5d62a2e5dfcbc80', case=False) | Hashes.str.contains(r'MD5=abc168fdca7169bf9dc40cec9761018d', case=False) | Hashes.str.contains(r'MD5=7f9309f5e4defec132b622fadbcad511', case=False) | Hashes.str.contains(r'MD5=4748696211bd56c2d93c21cab91e82a5', case=False) | Hashes.str.contains(r'MD5=48394dce30bb8da5ae089cb8f41b86dc', case=False) | Hashes.str.contains(r'MD5=65f800e1112864bf41eb815649f428d5', case=False) | Hashes.str.contains(r'MD5=bd25be845c151370ff177509d95d5add', case=False) | Hashes.str.contains(r'MD5=a37ed7663073319d02f2513575a22995', case=False) | Hashes.str.contains(r'MD5=2c39f6172fbc967844cac12d7ab2fa55', case=False) | Hashes.str.contains(r'MD5=491aec2249ad8e2020f9f9b559ab68a8', case=False) | Hashes.str.contains(r'MD5=1e0eb80347e723fa31fce2abb0301d44', case=False) | Hashes.str.contains(r'MD5=a26363e7b02b13f2b8d697abb90cd5c3', case=False) | Hashes.str.contains(r'MD5=4118b86e490aed091b1a219dba45f332', case=False) | Hashes.str.contains(r'MD5=6d131a7462e568213b44ef69156f10a5', case=False) | Hashes.str.contains(r'MD5=10c2ea775c9e76e7774ab89e38f38287', case=False) | Hashes.str.contains(r'SHA1=994e3f5dd082f5d82f9cc84108a60d359910ba79', case=False) | Hashes.str.contains(r'SHA1=4f7989ad92b8c47c004d3731b7602ce0934d7a23', case=False) | Hashes.str.contains(r'SHA1=f2fe02e28cf418d935ec63168caf4dff6a9fbdfe', case=False) | Hashes.str.contains(r'SHA1=af42afda54d150810a60baa7987f9f09d49d1317', case=False) | Hashes.str.contains(r'SHA1=09375f13521fc0cacf2cf0a28b2a9248f71498d7', case=False) | Hashes.str.contains(r'SHA1=c75e8fceed74a4024d38ca7002d42e1ecf982462', case=False) | Hashes.str.contains(r'SHA1=03e82eae4d8b155e22ffdafe7ba0c4ab74e8c1a7', case=False) | Hashes.str.contains(r'SHA1=e730eb971ecb493b69de2308b6412836303f733a', case=False) | Hashes.str.contains(r'SHA1=6a95860594cd8b7e3636bafa8f812e05359a64ca', case=False) | Hashes.str.contains(r'SHA1=5fef884a901e81ac173d63ade3f5c51694decf74', case=False) | Hashes.str.contains(r'SHA1=a8ddb7565b61bc021cd2543a137e00627f999dcc', case=False) | Hashes.str.contains(r'SHA1=6451522b1fb428e549976d0742df5034f8124b17', case=False) | Hashes.str.contains(r'SHA1=8ad0919629731b9a8062f7d3d4a727b28f22e81a', case=False) | Hashes.str.contains(r'SHA1=cc65bf60600b64feece5575f21ab89e03a728332', case=False) | Hashes.str.contains(r'SHA1=bbc8bd714c917bb1033f37e4808b4b002cd04166', case=False) | Hashes.str.contains(r'SHA1=4f2d9a70ea24121ae01df8a76ffba1f9cc0fde4a', case=False) | Hashes.str.contains(r'SHA1=f6a18fc9c4abe4a82c1ab28abc0a7259df8de7a3', case=False) | Hashes.str.contains(r'SHA1=c42178977bd7bbefe084da0129ed808cb7266204', case=False) | Hashes.str.contains(r'SHA1=766949d4599fbf8f45e888c9d6fedf21e04fb333', case=False) | Hashes.str.contains(r'SHA1=b7ff8536553cb236ea2607941e634b23aadb59ee', case=False) | Hashes.str.contains(r'SHA1=76789196eebfd4203f477a5a6c75eefc12d9a837', case=False) | Hashes.str.contains(r'SHA1=e5566684a9e0c1afadae80c3a8be6636f6cad7cf', case=False) | Hashes.str.contains(r'SHA1=7638c048af5beae44352764390deea597cc3e7b1', case=False) | Hashes.str.contains(r'SHA1=6a6fe0d69e0ea34d695c3b525e6db639f9ad6ac5', case=False) | Hashes.str.contains(r'SHA1=08dd35dde6187af579a1210e00eadbcea29e66d2', case=False) | Hashes.str.contains(r'SHA1=9ee31f1f25f675a12b7bad386244a9fbfa786a87', case=False) | Hashes.str.contains(r'SHA1=3ef30c95e40a854cc4ded94fc503d0c3dc3e620e', case=False) | Hashes.str.contains(r'SHA1=a804ebec7e341b4d98d9e94f6e4860a55ea1638d', case=False) | Hashes.str.contains(r'SHA1=505546d82aab56889a923004654b9afdec54efe6', case=False) | Hashes.str.contains(r'SHA1=0fe2d22bd2e6b7874f4f2b6279e2ca05edd1222a', case=False) | Hashes.str.contains(r'SHA1=8aa0e832e5ca2eb79dafabadbe9948a191008383', case=False) | Hashes.str.contains(r'SHA1=844d7bcd1a928d340255ff42971cca6244a459bf', case=False) | Hashes.str.contains(r'SHA1=9e2ebc489c50b6bbae3b08473e007baa65ff208f', case=False) | Hashes.str.contains(r'SHA1=7e836dadc2e149a0b758c7e22c989cbfcce18684', case=False) | Hashes.str.contains(r'SHA1=2480549ec8564cd37519a419ab2380cf3e8bab9e', case=False) | Hashes.str.contains(r'SHA1=8b9dd4c001f17e7835fdaf0d87a2f3e026557e84', case=False) | Hashes.str.contains(r'SHA1=d3f6c3ea2ef7124403c0fb6e7e3a0558729b5285', case=False) | Hashes.str.contains(r'SHA1=40df7a55c200371853cc3fd3cc03b5ac932f5cd6', case=False) | Hashes.str.contains(r'SHA1=607387cc90b93d58d6c9a432340261fde846b1d9', case=False) | Hashes.str.contains(r'SHA1=2779c54ccd1c008cd80e88c2b454d76f4fa18c07', case=False) | Hashes.str.contains(r'SHA1=46c9a474a1a62c25a05bc7661b75a80b471616e6', case=False) | Hashes.str.contains(r'SHA1=a2fe7de67b3f7d4b1def88ce4ba080f473c0fbc6', case=False) | Hashes.str.contains(r'SHA1=b8b123a413b7bccfa8433deba4f88669c969b543', case=False) | Hashes.str.contains(r'SHA1=bf2f8ada4e80aed4710993cedf4c5d32c95cd509', case=False) | Hashes.str.contains(r'SHA1=e3a1e7ce9e9452966885371e4c7fb48a2efdef22', case=False) | Hashes.str.contains(r'SHA1=c7f0423ac5569f13d2b195e02741ad7eed839c6d', case=False) | Hashes.str.contains(r'SHA1=a111dc6ae5575977feba71ee69b790e056846a02', case=False) | Hashes.str.contains(r'SHA1=ac4ace1c21c5cb72c6edf6f2f0cc3513d7c942c3', case=False) | Hashes.str.contains(r'SHA1=d4304bc75c2cb9917bb10a1dc630b75af194f7b2', case=False) | Hashes.str.contains(r'SHA1=0de86ec7d7f16a3680df89256548301eed970393', case=False) | Hashes.str.contains(r'SHA1=b2fb5036b29b12bcec04c3152b65b67ca14d61f2', case=False) | Hashes.str.contains(r'SHA1=0883a9c54e8442a551994989db6fc694f1086d41', case=False) | Hashes.str.contains(r'SHA1=01cf1fe3937fb6585ffb468b116a3af8ddf9ef16', case=False) | Hashes.str.contains(r'SHA1=98c4406fede34c3704afd8cf536ec20d93df9a10', case=False) | Hashes.str.contains(r'SHA1=1048f641adf3988d882a159bf1332eeb6d6a7f09', case=False) | Hashes.str.contains(r'SHA1=867652e062eb6bd1b9fc29e74dea3edd611ef40c', case=False) | Hashes.str.contains(r'SHA1=78fd06c82d3ba765c38bad8f48d1821a06280e39', case=False) | Hashes.str.contains(r'SHA1=6debce728bcff73d9d1d334df0c6b1c3735e295c', case=False) | Hashes.str.contains(r'SHA1=fdbcebb6cafda927d384d7be2e8063a4377d884f', case=False) | Hashes.str.contains(r'SHA1=994dc79255aeb662a672a1814280de73d405617a', case=False) | Hashes.str.contains(r'SHA1=6abc7979ba044f31884517827afb7b4bdaa0dcc1', case=False) | Hashes.str.contains(r'SHA1=1768f9c780fe7cf66928cfceaef8ed7d985e18f5', case=False) | Hashes.str.contains(r'SHA1=5fa527e679d25a15ecc913ce6a8d0218e2ff174b', case=False) | Hashes.str.contains(r'SHA1=f11188c540eada726766e0b0b2f9dd3ae2679c61', case=False) | Hashes.str.contains(r'SHA1=8416ee8fd88c3d069fbba90e959507c69a0ee3e9', case=False) | Hashes.str.contains(r'SHA1=ab4399647ebd16c02728c702534a30eb0b7ccbe7', case=False) | Hashes.str.contains(r'SHA1=98588b1d1b63747fa6ee406983bf50ad48a2208b', case=False) | Hashes.str.contains(r'SHA1=86e6669dbbce8228e94b2a9f86efdf528f0714fd', case=False) | Hashes.str.contains(r'SHA1=c9e9198d52d94771cb14711a5f6aaf8d82b602a2', case=False) | Hashes.str.contains(r'SHA1=17fa047c1f979b180644906fe9265f21af5b0509', case=False) | Hashes.str.contains(r'SHA1=1b526cbcba09b8d663e82004cf24ef44343030d3', case=False) | Hashes.str.contains(r'SHA1=4e0f5576804dab14abb29a29edb9616a1dbe280a', case=False) | Hashes.str.contains(r'SHA1=eb76de59ebc5b2258cff0567577ff8c9d0042048', case=False) | Hashes.str.contains(r'SHA1=d4f5323da704ff2f25d6b97f38763c147f2a0e6f', case=False) | Hashes.str.contains(r'SHA1=6802e2d2d4e6ee38aa513dafd6840e864310513b', case=False) | Hashes.str.contains(r'SHA1=ac18c7847c32957abe8155bcbe71c1f35753b527', case=False) | Hashes.str.contains(r'SHA1=beed6fb6a96996e9b016fa7f2cf7702a49c8f130', case=False) | Hashes.str.contains(r'SHA1=7d453dccb25bf36c411c92e2744c24f9b801225d', case=False) | Hashes.str.contains(r'SHA1=9648ad90ec683c63cc02a99111a002f9b00478d1', case=False) | Hashes.str.contains(r'SHA1=31cc8718894d6e6ce8c132f68b8caaba39b5ba7a', case=False) | Hashes.str.contains(r'SHA1=31fac347aa26e92db4d8c9e1ba37a7c7a2234f08', case=False) | Hashes.str.contains(r'SHA1=fde0fff1c3e4c053148748504d4b9e0cc97f37ec', case=False) | Hashes.str.contains(r'SHA1=73bac306292b4e9107147db94d0d836fdb071e33', case=False) | Hashes.str.contains(r'SHA1=9382981b05b1fb950245313992444bfa0db5f881', case=False) | Hashes.str.contains(r'SHA1=acb8e45ebd1252313ece94198df47edf9294e7d3', case=False) | Hashes.str.contains(r'SHA1=9c36600c2640007d3410dea8017573a113374873', case=False) | Hashes.str.contains(r'SHA1=53f776d9a183c42b93960b270dddeafba74eb3fb', case=False) | Hashes.str.contains(r'SHA1=1fdb2474908bdd2ee1e9bd3f224626f9361caab7', case=False) | Hashes.str.contains(r'SHA1=3533d0a54c7ccd83afd6be24f6582b30e4ca0aab', case=False) | Hashes.str.contains(r'SHA1=cb25a5125fb353496b59b910263209f273f3552d', case=False) | Hashes.str.contains(r'SHA1=a5f1b56615bdaabf803219613f43671233f2001c', case=False) | Hashes.str.contains(r'SHA1=6c7663de88a0fba1f63a984f926c6ef449059e38', case=False) | Hashes.str.contains(r'SHA1=e514dfadbeb4d2305988c3281bf105d252dee3a7', case=False) | Hashes.str.contains(r'SHA1=632c80a3c95cf589b03812539dea59594eaefae0', case=False) | Hashes.str.contains(r'SHA1=e6966e360038be3b9d8c9b2582eba4e263796084', case=False) | Hashes.str.contains(r'SHA1=675cc00de7c1ef508ccd0c91770c82342c0ad4ab', case=False) | Hashes.str.contains(r'SHA1=6ae26bde7ec27bd0fa971de6c7500eee34ee9b51', case=False) | Hashes.str.contains(r'SHA1=80e4808a7fe752cac444676dbbee174367fa2083', case=False) | Hashes.str.contains(r'SHA1=77b4f0c0b06e3dc2474d5e250b772dacaac14dd0', case=False) | Hashes.str.contains(r'SHA1=7277d965b9de91b4d8ea5eb8ae7fa3899eef63a2', case=False) | Hashes.str.contains(r'SHA1=3825ebb0b0664b5f0789371240f65231693be37d', case=False) | Hashes.str.contains(r'SHA1=de9469a5d01fb84afd41d176f363a66e410d46da', case=False) | Hashes.str.contains(r'SHA1=91568d7a82cc7677f6b13f11bea5c40cf12d281b', case=False) | Hashes.str.contains(r'SHA1=4b882748faf2c6c360884c6812dd5bcbce75ebff', case=False) | Hashes.str.contains(r'SHA1=599de57a5c05e27bb72c7b8a677e531d8e4bf8b5', case=False) | Hashes.str.contains(r'SHA1=1d373361d3129d11bc43f9b6dfa81d06e5ca8358', case=False) | Hashes.str.contains(r'SHA1=c5bd9f2b3a51ba0da08d7c84bab1f2d03a95e405', case=False) | Hashes.str.contains(r'SHA1=89165bbb761d6742ac2a6f5efbffc80c17990bd8', case=False) | Hashes.str.contains(r'SHA1=97812f334a077c40e8e642bb9872ac2c49ddb9a2', case=False) | Hashes.str.contains(r'SHA1=d417c0be261b0c6f44afdec3d5432100e420c3ed', case=False) | Hashes.str.contains(r'SHA1=37e6450c7cd6999d080da94b867ba23faa8c32fe', case=False) | Hashes.str.contains(r'SHA1=9481cd590c69544c197b4ee055056302978a7191', case=False) | Hashes.str.contains(r'SHA1=ff3e19cd461ddf67529a765cbec9cb81d84dc7da', case=False) | Hashes.str.contains(r'SHA1=6972314b6d6b0109b9d0a951eb06041f531f589b', case=False) | Hashes.str.contains(r'SHA1=dd94a2436994ac35db91e0ec9438b95e438d38c5', case=False) | Hashes.str.contains(r'SHA1=dcc852461895311b56e3ae774c8e90782a79c0b4', case=False) | Hashes.str.contains(r'SHA1=3489ed43bdd11ccbfc892baaeae8102ff7d22f25', case=False) | Hashes.str.contains(r'SHA1=e38e1efd98cd8a3cdb327d386db8df79ea08dccc', case=False) | Hashes.str.contains(r'SHA1=d4cf9296271a9c5c40b0fa34f69b6125c2d14457', case=False) | Hashes.str.contains(r'SHA1=10fb4ba6b2585ea02e7afb53ff34bf184eeb1a5d', case=False) | Hashes.str.contains(r'SHA1=f6793243ad20359d8be40d3accac168a15a327fb', case=False) | Hashes.str.contains(r'SHA1=b34a012887ddab761b2298f882858fa1ff4d99f1', case=False) | Hashes.str.contains(r'SHA1=71469dce9c2f38d0e0243a289f915131bf6dd2a8', case=False) | Hashes.str.contains(r'SHA1=10115219e3595b93204c70eec6db3e68a93f3144', case=False) | Hashes.str.contains(r'SHA1=161bae224cf184ed6c09c77fae866d42412c6d25', case=False) | Hashes.str.contains(r'SHA1=07f78a47f447e4d8a72ad4bc6a26427b9577ec82', case=False) | Hashes.str.contains(r'SHA1=2929de0b5b5e1ba1cce1908e9d800aa21f448b3d', case=False) | Hashes.str.contains(r'SHA1=745335bcdf02fb42df7d890a24858e16094f48fd', case=False) | Hashes.str.contains(r'SHA1=2a202830db58d5e942e4f6609228b14095ed2cab', case=False) | Hashes.str.contains(r'SHA1=0167259abd9231c29bec32e6106ca93a13999f90', case=False) | Hashes.str.contains(r'SHA1=c23eeb6f18f626ce1fd840227f351fa7543bb167', case=False) | Hashes.str.contains(r'SHA1=613a9df389ad612a5187632d679da11d60f6046a', case=False) | Hashes.str.contains(r'SHA1=1ce17c54c6884b0319d5aabbe7f96221f4838514', case=False) | Hashes.str.contains(r'SHA1=025c4e1a9c58bf10be99f6562476b7a0166c6b86', case=False) | Hashes.str.contains(r'SHA1=c3aafe8f67c6738489377031cb5a1197e99b202d', case=False) | Hashes.str.contains(r'SHA1=50c6b3cafc35462009d02c10f2e79373936dd7bb', case=False) | Hashes.str.contains(r'SHA1=6df35a0c2f6d7d39d24277137ea840078dafb812', case=False) | Hashes.str.contains(r'SHA1=f92faed3ef92fa5bc88ebc1725221be5d7425528', case=False) | Hashes.str.contains(r'SHA1=3bd1a88cc7dae701bc7085639e1c26ded3f8ccb3', case=False) | Hashes.str.contains(r'SHA1=a3ed5cbfbc17b58243289f3cf575bf04be49591d', case=False) | Hashes.str.contains(r'SHA1=552730553a1dea0290710465fb8189bdd0eaad42', case=False) | Hashes.str.contains(r'SHA1=0291d0457acaf0fe8ed5c3137302390469ce8b35', case=False) | Hashes.str.contains(r'SHA1=07f282db28771838d0e75d6618f70d76acfe6082', case=False) | Hashes.str.contains(r'SHA1=e6765d8866cad6193df1507c18f31fa7f723ca3e', case=False) | Hashes.str.contains(r'SHA1=22c9da04847c26188226c3a345e2126ef00aa19e', case=False) | Hashes.str.contains(r'SHA1=43501832ce50ccaba2706be852813d51de5a900f', case=False) | Hashes.str.contains(r'SHA1=cb3f30809b05cf02bc29d4a7796fb0650271e542', case=False) | Hashes.str.contains(r'SHA1=ed86bb62893e6ffcdfd2ecae2dea77fdf6bf9bde', case=False) | Hashes.str.contains(r'SHA1=3b6b35bca1b05fafbfc883a844df6d52af44ccdc', case=False) | Hashes.str.contains(r'SHA1=928b5971a0f7525209d599e2ef15c31717047022', case=False) | Hashes.str.contains(r'SHA1=b5696e2183d9387776820ef3afa388200f08f5a6', case=False) | Hashes.str.contains(r'SHA1=ebd8b7e964b8c692eea4a8c406b9cd0be621ebe2', case=False) | Hashes.str.contains(r'SHA1=fe18c58fbd0a83d67920e037d522c176704d2ca3', case=False) | Hashes.str.contains(r'SHA1=9c1c9032aa1e33461f35dbf79b6f2d061bfc6774', case=False) | Hashes.str.contains(r'SHA1=8e126f4f35e228fdd3aa78d533225db7122d8945', case=False) | Hashes.str.contains(r'SHA1=064de88dbbea67c149e779aac05228e5405985c7', case=False) | Hashes.str.contains(r'SHA1=30a80f560f18609c1123636a8a1a1ef567fa67a7', case=False) | Hashes.str.contains(r'SHA1=98130128685c8640a8a8391cb4718e98dd8fe542', case=False) | Hashes.str.contains(r'SHA1=a5914161f8a885702427cf75443fb08d28d904f0', case=False) | Hashes.str.contains(r'SHA1=48f03a13b0f6d3d929a86514ce48a9352ffef5ad', case=False) | Hashes.str.contains(r'SHA1=fff4f28287677caabc60c8ab36786c370226588d', case=False) | Hashes.str.contains(r'SHA1=bb5b17cff0b9e15f1648b4136e95bd20d899aef5', case=False) | Hashes.str.contains(r'SHA1=b2f5d3318aab69e6e0ca8da4a4733849e3f1cee2', case=False) | Hashes.str.contains(r'SHA1=635a39ff5066e1ac7c1c5995d476d8c233966dda', case=False) | Hashes.str.contains(r'SHA1=5ed22c0033aed380aa154e672e8db3a2d4c195c4', case=False) | Hashes.str.contains(r'SHA1=87e20486e804bfff393cc9ad9659858e130402a2', case=False) | Hashes.str.contains(r'SHA1=4dd86ff6f7180abebcb92e556a486abe7132754c', case=False) | Hashes.str.contains(r'SHA1=39169c9b79502251ca2155c8f1cd7e63fd9a42e9', case=False) | Hashes.str.contains(r'SHA1=7f7d144cc80129d0db3159ea5d4294c34b79b20a', case=False) | Hashes.str.contains(r'SHA1=8692274681e8d10c26ddf2b993f31974b04f5bf0', case=False) | Hashes.str.contains(r'SHA1=ea4a405445bb6e58c16b81f6d5d2c9a9edde419b', case=False) | Hashes.str.contains(r'SHA1=da970a01cecff33a99c217a42297cec4d1fe66d6', case=False) | Hashes.str.contains(r'SHA1=1f3799fed3cf43254fe30dcdfdb8dc02d82e662b', case=False) | Hashes.str.contains(r'SHA1=3d2309f7c937bfcae86097d716a8ef66c1337a3c', case=False) | Hashes.str.contains(r'SHA1=02a9314109e47c5ce52fa553ea57070bf0f8186a', case=False) | Hashes.str.contains(r'SHA1=91f832f46e4c38ecc9335460d46f6f71352cffed', case=False) | Hashes.str.contains(r'SHA1=76568d987f8603339b8d1958f76de2b957811f66', case=False) | Hashes.str.contains(r'SHA1=e841c8494b715b27b33be6f800ca290628507aba', case=False) | Hashes.str.contains(r'SHA1=b555aad38df7605985462f3899572931ee126259', case=False) | Hashes.str.contains(r'SHA1=115edd175c346fd3fbc9f113ee5ccd03b5511ee1', case=False) | Hashes.str.contains(r'SHA1=3d27013557b5e68e7212a2f78dfe60c5a2a46327', case=False) | Hashes.str.contains(r'SHA1=bb6ef5518df35d9508673d5011138add8c30fc27', case=False) | Hashes.str.contains(r'SHA1=9086e670e3a4518c0bcdf0da131748d4085ef42b', case=False) | Hashes.str.contains(r'SHA1=f6728821eddd14a21a9536e0f138c6d71cbd9307', case=False) | Hashes.str.contains(r'SHA1=34b677fba9dcab9a9016332b3332ce57f5796860', case=False) | Hashes.str.contains(r'SHA1=a63e9ecdebaf4ef9c9ec3362ff110b8859cc396d', case=False) | Hashes.str.contains(r'SHA1=8cd9df52b20b8f792ac53f57763dc147d7782b1e', case=False) | Hashes.str.contains(r'SHA1=fcae2ea5990189f6f230b51e398e3000b71897f2', case=False) | Hashes.str.contains(r'SHA1=27371f45f42383029c3c2e6d64a22e35dc772a72', case=False) | Hashes.str.contains(r'SHA1=b6eb40ea52b47f03edb8f45e2e431b5f666df8c5', case=False) | Hashes.str.contains(r'SHA1=9f27987c32321f8da099efc1dc60a73f8f629d3a', case=False) | Hashes.str.contains(r'SHA1=40372b4de2db020ce2659e1de806d4338fd7ebef', case=False) | Hashes.str.contains(r'SHA1=18693de1487c55e374b46a7728b5bf43300d4f69', case=False) | Hashes.str.contains(r'SHA1=b2f955b3e6107f831ebe67997f8586d4fe9f3e98', case=False) | Hashes.str.contains(r'SHA1=005754dab657ddc6dae28eee313ca2cc6a0c375c', case=False) | Hashes.str.contains(r'SHA1=0bec69c1b22603e9a385495fbe94700ac36b28e5', case=False) | Hashes.str.contains(r'SHA1=bd39ef9c758e2d9d6037e067fbb2c1f2ac7feac8', case=False) | Hashes.str.contains(r'SHA1=23f562f8d5650b2fb92382d228013f2e36e35d6c', case=False) | Hashes.str.contains(r'SHA1=a48aa80942fc8e0699f518de4fd6512e341d4196', case=False) | Hashes.str.contains(r'SHA1=e42bd2f585c00a1d6557df405246081f89542d15', case=False) | Hashes.str.contains(r'SHA1=bf5515fcf120c2548355d607cfd57e9b3e0af6e9', case=False) | Hashes.str.contains(r'SHA1=89a74d0e9fd03129082c5b868f5ad62558ca34fd', case=False) | Hashes.str.contains(r'SHA1=948368fe309652e8d88088d23e1df39e9c2b6649', case=False) | Hashes.str.contains(r'SHA1=a14cd928c60495777629be283c1d5b8ebbab8c0d', case=False) | Hashes.str.contains(r'SHA1=1f25f54e9b289f76604e81e98483309612c5a471', case=False) | Hashes.str.contains(r'SHA1=25bf4e30a94df9b8f8ab900d1a43fd056d285c9d', case=False) | Hashes.str.contains(r'SHA1=d1fb740210c1fa2a52f6748b0588ae77de590b9d', case=False) | Hashes.str.contains(r'SHA1=dac68b8ee002d5bb61be3d59908a61a26efb7c09', case=False) | Hashes.str.contains(r'SHA1=a56598e841ae694ac78c37bf4f8c09f9eaf3271f', case=False) | Hashes.str.contains(r'SHA1=465abe9634c199a5f80f8a4f77ec3118c0d69652', case=False) | Hashes.str.contains(r'SHA1=a0cefb5b55f7a7a145b549613e26b6805515a1ad', case=False) | Hashes.str.contains(r'SHA1=36dca91fb4595de38418dffc3506dc78d7388c2c', case=False) | Hashes.str.contains(r'SHA1=92138cfc14f9e2271f641547e031d5d63c6de19a', case=False) | Hashes.str.contains(r'SHA1=fcf9978cf1af2e9b1e2eaf509513664dfcc1847b', case=False) | Hashes.str.contains(r'SHA1=d02403f85be6f243054395a873b41ef8a17ea279', case=False) | Hashes.str.contains(r'SHA1=4da007dd298723f920e194501bb49bab769dfb14', case=False) | Hashes.str.contains(r'SHA1=85076aa3bffb40339021286b73d72dd5a8e4396a', case=False) | Hashes.str.contains(r'SHA1=221717a48ee8e2d19470579c987674f661869e17', case=False) | Hashes.str.contains(r'SHA1=a249278a668d4df30af9f5d67ebb7d2cd160beaa', case=False) | Hashes.str.contains(r'SHA1=6b5aa51f4717d123a468e9e9d3d154e20ca39d56', case=False) | Hashes.str.contains(r'SHA1=b5a8e2104d76dbb04cd9ffe86784113585822375', case=False) | Hashes.str.contains(r'SHA1=02534b5b510d978bac823461a39f76b4f0ac5aa3', case=False) | Hashes.str.contains(r'SHA1=538bb45f30035f39d41bd13818fe0c0061182cfe', case=False) | Hashes.str.contains(r'SHA1=6d09d826581baa1817be6fbd44426db9b05f1909', case=False) | Hashes.str.contains(r'SHA1=197811ec137e9916e6692fc5c28f6d6609ffc20e', case=False) | Hashes.str.contains(r'SHA1=c3ca396b5af2064c6f7d05fa0fb697e68d0b9631', case=False) | Hashes.str.contains(r'SHA1=cf9baf57e16b73d7a4a99dd0c092870deba1a997', case=False) | Hashes.str.contains(r'SHA1=0320534df24a37a245a0b09679a5adb27018fb5f', case=False) | Hashes.str.contains(r'SHA1=4c8349c6345c8d6101fb896ea0a74d0484c56df0', case=False) | Hashes.str.contains(r'SHA1=9b2ef5f7429d62342163e001c7c13fb866dbe1ef', case=False) | Hashes.str.contains(r'SHA1=6abbc3003c7aa69ce79cbbcd2e3210b07f21d202', case=False) | Hashes.str.contains(r'SHA1=062457182ab08594c631a3f897aeb03c6097eb77', case=False) | Hashes.str.contains(r'SHA1=947c76c8c8ba969797f56afd1fa1d1c4a1e3ed25', case=False) | Hashes.str.contains(r'SHA1=d6de8211dba7074d92b5830618176a3eb8eb6670', case=False) | Hashes.str.contains(r'SHA1=8302802b709ad242a81b939b6c90b3230e1a1f1e', case=False) | Hashes.str.contains(r'SHA1=492e40b01a9a6cec593691db4838f20b3eaeacc5', case=False) | Hashes.str.contains(r'SHA1=83506de48bd0c50ea00c9e889fe980f56e6c6e1b', case=False) | Hashes.str.contains(r'SHA1=fe54a1acc5438883e5c1bba87b78bb7322e2c739', case=False) | Hashes.str.contains(r'SHA1=020580278d74d0fe741b0f786d8dca7554359997', case=False) | Hashes.str.contains(r'SHA1=3c1c3f5f5081127229ba0019fbf0efc2a9c1d677', case=False) | Hashes.str.contains(r'SHA1=e2d98e0e178880f10434059096f936b2c06ed8f4', case=False) | Hashes.str.contains(r'SHA1=03506a2f87d1523e844fba22e7617ab2a218b4b7', case=False) | Hashes.str.contains(r'SHA1=fee00dde8080c278a4c4a6d85a5601edc85a1b3d', case=False) | Hashes.str.contains(r'SHA1=ba430f3c77e58a4dc1a9a9619457d1c45a19617f', case=False) | Hashes.str.contains(r'SHA1=c257aa4094539719a3c7b7950598ef872dbf9518', case=False) | Hashes.str.contains(r'SHA1=bc62fe2b38008f154fc9ea65d851947581b52f49', case=False) | Hashes.str.contains(r'SHA1=fe237869b2b496deb52c0bc718ada47b36fc052e', case=False) | Hashes.str.contains(r'SHA1=0a62c574603158d2d0c3be2a43c6bb0074ed297c', case=False) | Hashes.str.contains(r'SHA1=86f34eaea117f629297218a4d196b5729e72d7b9', case=False) | Hashes.str.contains(r'SHA1=e0b263f2d9c08f27c6edf5a25aa67a65c88692b0', case=False) | Hashes.str.contains(r'SHA256=9dc7beb60a0a6e7238fc8589b6c2665331be1e807b4d2b3ddd1c258dbbd3e2f7', case=False) | Hashes.str.contains(r'SHA256=06ddf49ac8e06e6b83fccba1141c90ea01b65b7db592c54ffe8aa6d30a75c0b8', case=False) | Hashes.str.contains(r'SHA256=822982c568b6f44b610f8dc4ab5d94795c33ae08a6a608050941264975c1ecdb', case=False) | Hashes.str.contains(r'SHA256=082a79311da64b6adc3655e79aa090a9262acaac3b917a363b9571f520a17f6a', case=False) | Hashes.str.contains(r'SHA256=618b15970671700188f4102e5d0638184e2723e8f57f7e917fa49792daebdadb', case=False) | Hashes.str.contains(r'SHA256=5b932eab6c67f62f097a3249477ac46d80ddccdc52654f8674060b4ddf638e5d', case=False) | Hashes.str.contains(r'SHA256=82ac05fefaa8c7ee622d11d1a378f1d255b647ab2f3200fd323cc374818a83f2', case=False) | Hashes.str.contains(r'SHA256=29d765e29d2f06eb511ee88b2e514c9df1a9020a768ddd3d2278d9045e9cdb4a', case=False) | Hashes.str.contains(r'SHA256=f461414a2596555cece5cfee65a3c22648db0082ca211f6238af8230e41b3212', case=False) | Hashes.str.contains(r'SHA256=beef40f1b4ce0ff2ee5c264955e6b2a0de6fe4089307510378adc83fad77228b', case=False) | Hashes.str.contains(r'SHA256=9a42fa1870472c38a56c0a70f62e57a3cdc0f5bc142f3a400d897b85d65800ac', case=False) | Hashes.str.contains(r'SHA256=f03f0fb3a26bb83e8f8fa426744cf06f2e6e29f5220663b1d64265952b8de1a1', case=False) | Hashes.str.contains(r'SHA256=50819a1add4c81c0d53203592d6803f022443440935ff8260ff3b6d5253c0c76', case=False) | Hashes.str.contains(r'SHA256=6b5cf41512255237064e9274ca8f8a3fef820c45aa6067c9c6a0e6f5751a0421', case=False) | Hashes.str.contains(r'SHA256=575e58b62afab094c20c296604dc3b7dd2e1a50f5978d8ee24b7dca028e97316', case=False) | Hashes.str.contains(r'SHA256=26bea3b3ab2001d91202f289b7e41499d810474607db7a0893ceab74f5532f47', case=False) | Hashes.str.contains(r'SHA256=b169a5f643524d59330fafe6e3e328e2179fc5116ee6fae5d39581467d53ac03', case=False) | Hashes.str.contains(r'SHA256=b8807e365be2813b7eccd2e4c49afb0d1e131086715638b7a6307cd7d7e9556c', case=False) | Hashes.str.contains(r'SHA256=28f5aa194a384680a08c0467e94a8fc40f8b0f3f2ac5deb42e0f51a80d27b553', case=False) | Hashes.str.contains(r'SHA256=9bb09752cf3a464455422909edef518ac18fe63cf5e1e8d9d6c2e68db62e0c87', case=False) | Hashes.str.contains(r'SHA256=8578bff36e3b02cc71495b647db88c67c3c5ca710b5a2bd539148550595d0330', case=False) | Hashes.str.contains(r'SHA256=a32dc2218fb1f538fba33701dfd9ca34267fda3181e82eb58b971ae8b78f0852', case=False) | Hashes.str.contains(r'SHA256=2c14bea0d85c9cad5c5f5c8d0e5442f6deb9e93fe3ad8ea5e8e147821c6f9304', case=False) | Hashes.str.contains(r'SHA256=23e89fd30a1c7db37f3ea81b779ce9acf8a4294397cbb54cff350d54afcfd931', case=False) | Hashes.str.contains(r'SHA256=f6c316e2385f2694d47e936b0ac4bc9b55e279d530dd5e805f0d963cb47c3c0d', case=False) | Hashes.str.contains(r'SHA256=b0a27ac1a8173413de13860d2b2e34cb6bc4d1149f94b62d319042e11d8b004c', case=False) | Hashes.str.contains(r'SHA256=897f2bbe81fc3b1ae488114b93f3eb0133a85678d061c7a6f718507971f33736', case=False) | Hashes.str.contains(r'SHA256=497a836693be1b330993e2be64f6c71bf290c127faca1c056abd0dc374654830', case=False) | Hashes.str.contains(r'SHA256=8e035beb02a411f8a9e92d4cf184ad34f52bbd0a81a50c222cdd4706e4e45104', case=False) | Hashes.str.contains(r'SHA256=f9f2091fccb289bcf6a945f6b38676ec71dedb32f3674262928ccaf840ca131a', case=False) | Hashes.str.contains(r'SHA256=40556dd9b79b755cc0b48d3d024ceb15bd2c0e04960062ab2a85cd7d4d1b724a', case=False) | Hashes.str.contains(r'SHA256=ac5fb90e88d8870cd5569e661bea98cf6b001d83ab7c65a5196ea3743146939a', case=False) | Hashes.str.contains(r'SHA256=12b0000698b79ea3c8178b9e87801cc34bad096a151a8779559519deafd4e3f0', case=False) | Hashes.str.contains(r'SHA256=9e56e96df36237e65b3d7dbc490afdc826215158f6278cd579c576c4b455b392', case=False) | Hashes.str.contains(r'SHA256=ec96b15ce218f97ec1d8f07f13b052d274c4c8438f31daf246ccfaaee5e1bebd', case=False) | Hashes.str.contains(r'SHA256=da70fa44290f949e9b3e0fcfe0503de46e82e0472e8e3c360da3fd2bfa364eee', case=False) | Hashes.str.contains(r'SHA256=accb1a6604efb1b3ce9345c9fd62fe717a84c3e089e09c638e461df89193ef01', case=False) | Hashes.str.contains(r'SHA256=083f821d90e607ed93221e71d4742673e74f573d0755a96ad17d1403f65a2254', case=False) | Hashes.str.contains(r'SHA256=c7bccc6f38403def4690e00a0b31eda05973d82be8953a3379e331658c51b231', case=False) | Hashes.str.contains(r'SHA256=0740359baef32cbb0b14a9d1bd3499ea2e770ff9b1c85898cfac8fd9aca4fa39', case=False) | Hashes.str.contains(r'SHA256=32882949ea084434a376451ff8364243a50485a3b4af2f2240bb5f20c164543d', case=False) | Hashes.str.contains(r'SHA256=3ca5d47d076e99c312578ef6499e1fa7b9db88551cfc0f138da11105aca7c5e1', case=False) | Hashes.str.contains(r'SHA256=f8236fc01d4efaa48f032e301be2ebba4036b2cd945982a29046eca03944d2ae', case=False) | Hashes.str.contains(r'SHA256=05b146a48a69dd62a02759487e769bd30d39f16374bc76c86453b4ae59e7ffa4', case=False) | Hashes.str.contains(r'SHA256=8922be14c657e603179f1dd94dc32de7c99d2268ac92d429c4fdda7396c32e50', case=False) | Hashes.str.contains(r'SHA256=aafa642ca3d906138150059eeddb6f6b4fe9ad90c6174386cfe13a13e8be47d9', case=False) | Hashes.str.contains(r'SHA256=087270d57f1626f29ba9c25750ca19838a869b73a1f71af50bdf37d6ff776212', case=False) | Hashes.str.contains(r'SHA256=008fa89822b7a1f91e5843169083202ea580f7b06eb6d5cae091ba844d035f25', case=False) | Hashes.str.contains(r'SHA256=b2486f9359c94d7473ad8331b87a9c17ca9ba6e4109fd26ce92dff01969eaa09', case=False) | Hashes.str.contains(r'SHA256=dfc80e0d468a2c115a902aa332a97e3d279b1fc3d32083e8cf9a4aadf3f54ad1', case=False) | Hashes.str.contains(r'SHA256=0d10c4b2f56364b475b60bd2933273c8b1ed2176353e59e65f968c61e93b7d99', case=False) | Hashes.str.contains(r'SHA256=5bc3994612624da168750455b363f2964e1861dba4f1c305df01b970ac02a7ae', case=False) | Hashes.str.contains(r'SHA256=36c65aeb255c06898ffe32e301030e0b74c8bca6fe7be593584b8fdaacd4e475', case=False) | Hashes.str.contains(r'SHA256=30e083cd7616b1b969a92fd18cf03097735596cce7fcf3254b2ca344e526acc2', case=False) | Hashes.str.contains(r'SHA256=15cf366f7b3ee526db7ce2b5253ffebcbfaa4f33a82b459237c049f854a97c0c', case=False) | Hashes.str.contains(r'SHA256=be70be9d84ae14ea1fa5ec68e2a61f6acfe576d965fe51c6bac78fba01a744fb', case=False) | Hashes.str.contains(r'SHA256=7b846b0a717665e4d9fb313f25d1f6a5b782e495387aea45cf87ad3c049ac0db', case=False) | Hashes.str.contains(r'SHA256=85b9d7344bf847349b5d58ebe4d44fd63679a36164505271593ef1076aa163b2', case=False) | Hashes.str.contains(r'SHA256=749b0e8c8c8b7dda8c2063c708047cfe95afa0a4d86886b31a12f3018396e67c', case=False) | Hashes.str.contains(r'SHA256=4999541c47abd4a7f2a002c180ae8d31c19804ce538b85870b8db53d3652862b', case=False) | Hashes.str.contains(r'SHA256=56066ed07bad3b5c1474e8fae5ee2543d17d7977369b34450bd0775517e3b25c', case=False) | Hashes.str.contains(r'SHA256=e6a7b0bc01a627a7d0ffb07faddb3a4dd96b6f5208ac26107bdaeb3ab1ec8217', case=False) | Hashes.str.contains(r'SHA256=0f58e09651d48d2b1bcec7b9f7bb85a2d1a7b65f7a51db281fe0c4f058a48597', case=False) | Hashes.str.contains(r'SHA256=cf9451c9ccc5509b9912965f79c2b95eb89d805b2a186d7521d3a262cf5a7a37', case=False) | Hashes.str.contains(r'SHA256=2456a7921fa8ab7b9779e5665e6b42fccc019feb9e49a9a28a33ec0a4bb323c4', case=False) | Hashes.str.contains(r'SHA256=7a7e8df7173387aec593e4fe2b45520ea3156c5f810d2bb1b2784efd1c922376', case=False) | Hashes.str.contains(r'SHA256=eab9b5b7e5fab1c2d7d44cd28f13ae8bb083d9362d2b930d43354a3dfd38e05a', case=False) | Hashes.str.contains(r'SHA256=c7cd14c71bcac5420872c3d825ff6d4be6a86f3d6a8a584f1a756541efff858e', case=False) | Hashes.str.contains(r'SHA256=ece76b79feafb38ae4371e104b6dcbb4253ff3b2acbe5bd14ce6e47525c24f4a', case=False) | Hashes.str.contains(r'SHA256=42b22faa489b5de936db33f12184f6233198bdf851a18264d31210207827ba25', case=False) | Hashes.str.contains(r'SHA256=d7aa8abdda8a68b8418e86bef50c19ef2f34bc66e7b139e43c2a99ab48c933be', case=False) | Hashes.str.contains(r'SHA256=4af8192870afe18c77381dfaf8478f8914fa32906812bb53073da284a49ae4c7', case=False) | Hashes.str.contains(r'SHA256=21617210249d2a35016e8ca6bd7a1edda25a12702a2294d56010ee8148637f5a', case=False) | Hashes.str.contains(r'SHA256=c0d88db11d0f529754d290ed5f4c34b4dba8c4f2e5c4148866daabeab0d25f9c', case=False) | Hashes.str.contains(r'SHA256=19dfacea1b9f19c0379f89b2424ceb028f2ce59b0db991ba83ae460027584987', case=False) | Hashes.str.contains(r'SHA256=4136f1eb11cc463a858393ea733d5f1c220a3187537626f7f5d63eccf7c5a03f', case=False) | Hashes.str.contains(r'SHA256=f6157e033a12520c73dcedf8e49cd42d103e5874c34d6527bb9de25a5d26e5ad', case=False) | Hashes.str.contains(r'SHA256=e7af7bcb86bd6bab1835f610671c3921441965a839673ac34444cf0ce7b2164e', case=False) | Hashes.str.contains(r'SHA256=f9b01406864ab081aa77eef4ad15cb2dd2f830d1ef54f52622a59ff1aeb05ba5', case=False) | Hashes.str.contains(r'SHA256=a2d32c28eb5945b85872697d7cfbe87813c09a0e1be28611563755f68b9cb88b', case=False) | Hashes.str.contains(r'SHA256=569fe70bedd0df8585689b0e88ad8bd0544fdf88b9dbfc2076f4bdbcf89c28aa', case=False) | Hashes.str.contains(r'SHA256=a78c9871da09fab21aec9b88a4e880f81ecb1ed0fa941f31cc2f041067e8e972', case=False) | Hashes.str.contains(r'SHA256=b8c71e1844e987cd6f9c2baf28d9520d4ccdd8593ce7051bb1b3c9bf1d97076a', case=False) | Hashes.str.contains(r'SHA256=af7ca247bf229950fb48674b21712761ac650d33f13a4dca44f61c59f4c9ac46', case=False) | Hashes.str.contains(r'SHA256=6908ebf52eb19c6719a0b508d1e2128f198d10441551cbfb9f4031d382f5229f', case=False) | Hashes.str.contains(r'SHA256=06a0ec9a316eb89cb041b1907918e3ad3b03842ec65f004f6fa74d57955573a4', case=False) | Hashes.str.contains(r'SHA256=fd223833abffa9cd6cc1848d77599673643585925a7ee51259d67c44d361cce8', case=False) | Hashes.str.contains(r'SHA256=31b66a57fae0cc28a6a236d72a35c8b6244f997e700f9464f9cbf800dbf8bee6', case=False) | Hashes.str.contains(r'SHA256=2fd43a749b5040ebfafd7cdbd088e27ef44341d121f313515ebde460bf3aaa21', case=False) | Hashes.str.contains(r'SHA256=773b4a1efb9932dd5116c93d06681990759343dfe13c0858d09245bc610d5894', case=False) | Hashes.str.contains(r'SHA256=52f3905bbd97dcd2dbd22890e5e8413b9487088f1ee2fa828030a6a45b3975fd', case=False) | Hashes.str.contains(r'SHA256=86047bb1969d1db455493955fd450d18c62a3f36294d0a6c3732c88dfbcc4f62', case=False) | Hashes.str.contains(r'SHA256=aaf04d89fd15bc61265e545f8e1da80e20f59f90058ed343c62ee24358e3af9e', case=False) | Hashes.str.contains(r'SHA256=e5ddfa39540d4e7ada56cdc1ebd2eb8c85a408ec078337488a81d1c3f2aaa4ff', case=False) | Hashes.str.contains(r'SHA256=8b30b2dc36d5e8f1ffc7281352923773fb821cdf66eb6516f82c697a524b599b', case=False) | Hashes.str.contains(r'SHA256=469713c76c7a887826611b8c7180209a8bb6250f91d0f1eb84ac4d450ef15870', case=False) | Hashes.str.contains(r'SHA256=a906251667a103a484a6888dca3e9c8c81f513b8f037b98dfc11440802b0d640', case=False) | Hashes.str.contains(r'SHA256=49c827cf48efb122a9d6fd87b426482b7496ccd4a2dbca31ebbf6b2b80c98530', case=False) | Hashes.str.contains(r'SHA256=bcca03ce1dd040e67eb71a7be0b75576316f0b6587b2058786fda8b6f0a5adfd', case=False) | Hashes.str.contains(r'SHA256=0aab2deae90717a8876d46d257401d265cf90a5db4c57706e4003c19eee33550', case=False) | Hashes.str.contains(r'SHA256=406b844f4b5c82caf26056c67f9815ad8ecf1e6e5b07d446b456e5ff4a1476f9', case=False) | Hashes.str.contains(r'SHA256=10ad50fcb360dcab8539ea322aaf2270565dc835b7535790937348523d723d6b', case=False) | Hashes.str.contains(r'SHA256=c4f041de66ec8cc5ab4a03bbc46f99e073157a4e915a9ab4069162de834ffc5c', case=False) | Hashes.str.contains(r'SHA256=139f8412a7c6fdc43dcfbbcdba256ee55654eb36a40f338249d5162a1f69b988', case=False) | Hashes.str.contains(r'SHA256=793b78e70b3ae3bb400c5a8bc4d2d89183f1d7fc70954aed43df7287248b6875', case=False) | Hashes.str.contains(r'SHA256=492113a223d6a3fc110059fe46a180d82bb8e002ef2cd76cbf0c1d1eb8243263', case=False) | Hashes.str.contains(r'SHA256=b34e2d9f3d4ef59cf7af18e17133a6a06509373e69e33c8eecb2e30501d0d9e4', case=False) | Hashes.str.contains(r'SHA256=f936ec4c8164cbd31add659b61c16cb3a717eac90e74d89c47afb96b60120280', case=False) | Hashes.str.contains(r'SHA256=60ee78a2b070c830fabb54c6bde0d095dff8fad7f72aa719758b3c41c72c2aa9', case=False) | Hashes.str.contains(r'SHA256=c8ae217860f793fce3ad0239d7b357dba562824dd7177c9d723ca4d4a7f99a12', case=False) | Hashes.str.contains(r'SHA256=29348ebe12d872c5f40e316a0043f7e5babe583374487345a79bad0ba93fbdfe', case=False) | Hashes.str.contains(r'SHA256=5f6fec8f7890d032461b127332759c88a1b7360aa10c6bd38482572f59d2ba8b', case=False) | Hashes.str.contains(r'SHA256=e8ec06b1fa780f577ff0e8c713e0fd9688a48e0329c8188320f9eb62dfc0667f', case=False) | Hashes.str.contains(r'SHA256=770f33259d6fb10f4a32d8a57d0d12953e8455c72bb7b60cb39ce505c507013a', case=False) | Hashes.str.contains(r'SHA256=b0b80a11802b4a8ca69c818a03e76e7ef57c2e293de456439401e8e6073f8719', case=False) | Hashes.str.contains(r'SHA256=bc49cb96f3136c3e552bf29f808883abb9e651040415484c1736261b52756908', case=False) | Hashes.str.contains(r'SHA256=4c89c907b7525b39409af1ad11cc7d2400263601edafc41c935715ef5bd145de', case=False) | Hashes.str.contains(r'SHA256=0440ef40c46fdd2b5d86e7feef8577a8591de862cfd7928cdbcc8f47b8fa3ffc', case=False) | Hashes.str.contains(r'SHA256=200f98655d1f46d2599c2c8605ebb7e335fee3883a32135ca1a81e09819bc64a', case=False) | Hashes.str.contains(r'SHA256=b0eb4d999e4e0e7c2e33ff081e847c87b49940eb24a9e0794c6aa9516832c427', case=False) | Hashes.str.contains(r'SHA256=673bbc7fa4154f7d99af333014e888599c27ead02710f7bc7199184b30b38653', case=False) | Hashes.str.contains(r'SHA256=4b97d63ebdeda6941bb8cef5e94741c6cca75237ca830561f2262034805f0919', case=False) | Hashes.str.contains(r'SHA256=d50cb5f4b28c6c26f17b9d44211e515c3c0cc2c0c4bf24cd8f9ed073238053ad', case=False) | Hashes.str.contains(r'SHA256=62764ddc2dce74f2620cd2efd97a2950f50c8ac5a1f2c1af00dc5912d52f6920', case=False) | Hashes.str.contains(r'SHA256=6994b32e3f3357f4a1d0abe81e8b62dd54e36b17816f2f1a80018584200a1b77', case=False) | Hashes.str.contains(r'SHA256=751e9376cb7cb9de63e1808d43579d787d3f6d659173038fe44a2d7fdb4fd17e', case=False) | Hashes.str.contains(r'SHA256=87565ff08a93a8ff41ea932bf55dec8e0c7e79aba036507ea45df9d81cb36105', case=False) | Hashes.str.contains(r'SHA256=2da2b883e48e929f5365480d487590957d9e6582cc6da2c0b42699ba85e54fe2', case=False) | Hashes.str.contains(r'SHA256=627e13da6a45006fff4711b14754f9ccfac9a5854d275da798a22f3a68dd1eaa', case=False) | Hashes.str.contains(r'SHA256=94ba4bcbdb55d6faf9f33642d0072109510f5c57e8c963d1a3eb4f9111f30112', case=False) | Hashes.str.contains(r'SHA256=704c6ffe786bc83a73fbdcd2edd50f47c3b5053da7da6aa4c10324d389a31db4', case=False) | Hashes.str.contains(r'SHA256=d41e39215c2c1286e4cd3b1dc0948adefb161f22bc3a78756a027d41614ee4ff', case=False) | Hashes.str.contains(r'SHA256=0f7bfa10075bf5c193345866333d415509433dbfe5a7d45664b88d72216ff7c3', case=False) | Hashes.str.contains(r'SHA256=14b89298134696f2fd1b1df0961d36fa6354721ea92498a349dc421e79447925', case=False) | Hashes.str.contains(r'SHA256=3b2cd65a4fbdd784a6466e5196bc614c17d1dbaed3fd991d242e3be3e9249da6', case=False) | Hashes.str.contains(r'SHA256=2ce4f8089b02017cbe86a5f25d6bc69dd8b6f5060c918a64a4123a5f3be1e878', case=False) | Hashes.str.contains(r'SHA256=e99580e25f419b5ad90669e0c274cf63d30efa08065d064a863e655bdf77fb59', case=False) | Hashes.str.contains(r'SHA256=a74e8f94d2c140646a8bb12e3e322c49a97bd1b8a2e4327863d3623f43d65c66', case=False) | Hashes.str.contains(r'SHA256=47356707e610cfd0be97595fbe55246b96a69141e1da579e6f662ddda6dc5280', case=False) | Hashes.str.contains(r'SHA256=18c909a2b8c5e16821d6ef908f56881aa0ecceeaccb5fa1e54995935fcfd12f7', case=False) | Hashes.str.contains(r'SHA256=95e5b5500e63c31c6561161a82f7f9373f99b5b1f54b018c4866df4f2a879167', case=False) | Hashes.str.contains(r'SHA256=5c1585b1a1c956c7755429544f3596515dfdf928373620c51b0606a520c6245a', case=False) | Hashes.str.contains(r'SHA256=82b7fa34ad07dbf9afa63b2f6ed37973a1b4fe35dee90b3cf5c788c15c9f08f7', case=False) | Hashes.str.contains(r'SHA256=a85d3fd59bb492a290552e5124bfe3f9e26a3086d69d42ccc44737b5a66673ec', case=False) | Hashes.str.contains(r'SHA256=ea50f22daade04d3ca06dedb497b905215cba31aae7b4cab4b533fda0c5be620', case=False) | Hashes.str.contains(r'SHA256=d032001eab6cad4fbef19aab418650ded00152143bd14507e17d62748297c23f', case=False) | Hashes.str.contains(r'SHA256=4d42678df3917c37f44a1506307f1677b9a689efcf350b1acce7e6f64b514905', case=False) | Hashes.str.contains(r'SHA256=30061ef383e18e74bb067fbca69544f1a7544e8dc017d4e7633d8379aff4c3c3', case=False) | Hashes.str.contains(r'SHA256=7433f14b40c674c5e87b6210c330d5bcaf2f6f52d632ae29e9b7cf3ca405665b', case=False) | Hashes.str.contains(r'SHA256=818787057fc60ac8b957aa37d750aa4bace8e6a07d3d28b070022ee6dcd603ab', case=False) | Hashes.str.contains(r'SHA256=c4fb31e3f24e40742a1b9855a2d67048fe64b26d8d2dbcec77d2d5deeded2bcc', case=False) | Hashes.str.contains(r'SHA256=5295080de37d4838e15dec4e3682545033d479d3d9ac28d74747c086559fb968', case=False) | Hashes.str.contains(r'SHA256=7824931e55249a501074a258b4f65cd66157ee35672ba17d1c0209f5b0384a28', case=False) | Hashes.str.contains(r'SHA256=07759750fbb93c77b5c3957c642a9498fcff3946a5c69317db8d6be24098a4a0', case=False) | Hashes.str.contains(r'SHA256=51805bb537befaac8ce28f2221624cb4d9cefdc0260bc1afd5e0bc97bf1f9f93', case=False) | Hashes.str.contains(r'SHA256=e6f764c3b5580cd1675cbf184938ad5a201a8c096607857869bd7c3399df0d12', case=False) | Hashes.str.contains(r'SHA256=2faf95a3405578d0e613c8d88d534aa7233da0a6217ce8475890140ab8fb33c8', case=False) | Hashes.str.contains(r'SHA256=af4f42197f5ce2d11993434725c81ecb6f54025110dedf56be8ffc0e775d9895', case=False) | Hashes.str.contains(r'SHA256=baf7fbc4743a81eb5e4511023692b2dfdc32ba670ba3e4ed8c09db7a19bd82d3', case=False) | Hashes.str.contains(r'SHA256=a42f4ae69b8755a957256b57eb3d319678eab81705f0ffea0d649ace7321108f', case=False) | Hashes.str.contains(r'SHA256=4bca0a401b364a5cc1581a184116c5bafa224e13782df13272bc1b748173d1be', case=False) | Hashes.str.contains(r'SHA256=e4b2c0aa28aac5e197312a061b05363e2e0387338b28b23272b5b6659d29b1d8', case=False) | Hashes.str.contains(r'SHA256=69866557566c59772f203c11f5fba30271448e231b65806a66e48f41e3804d7f', case=False) | Hashes.str.contains(r'SHA256=93aa3066ae831cdf81505e1bc5035227dc0e8f06ebbbb777832a17920c6a02fe', case=False) | Hashes.str.contains(r'SHA256=bed4285d0f8d18f17ddaa53a98a475c87c04c4d167499e24c770da788e5d45f4', case=False) | Hashes.str.contains(r'SHA256=fa9abb3e7e06f857be191a1e049dd37642ec41fb2520c105df2227fcac3de5d5', case=False) | Hashes.str.contains(r'SHA256=07beac65e28ee124f1da354293a3d6ad7250ed1ce29b8342acfd22252548a5af', case=False) | Hashes.str.contains(r'SHA256=9a67626fb468d3f114c23ac73fd8057f43d06393d3eca04da1d6676f89da2d40', case=False) | Hashes.str.contains(r'SHA256=7f4555a940ce1156c9bcea9a2a0b801f9a5e44ec9400b61b14a7b1a6404ffdf6', case=False) | Hashes.str.contains(r'SHA256=7a84703552ae032a0d1699a081e422ed6c958bbe56d5b41839c8bfa6395bee1d', case=False) | Hashes.str.contains(r'SHA256=ddf427ce55b36db522f638ba38e34cd7b96a04cb3c47849b91e7554bfd09a69a', case=False) | Hashes.str.contains(r'SHA256=64d4370843a07e25d4ceb68816015efcaeca9429bb5bb692a88e615b48c7da96', case=False) | Hashes.str.contains(r'SHA256=c8f9e1ad7b8cce62fba349a00bc168c849d42cfb2ca5b2c6cc4b51d054e0c497', case=False) | Hashes.str.contains(r'SHA256=fefc070a5f6a9c0415e1c6f44512a33e8d163024174b30a61423d00d1e8f9bf2', case=False) | Hashes.str.contains(r'SHA256=8d9a2363b757d3f127b9c6ed8f7b8b018e652369bc070aa3500b3a978feaa6ce', case=False) | Hashes.str.contains(r'SHA256=d43520128871c83b904f3136542ea46644ac81a62d51ae9d3c3a3f32405aad96', case=False) | Hashes.str.contains(r'SHA256=efa56907b9d0ec4430a5d581f490b6b9052b1e979da4dab6a110ab92e17d4576', case=False) | Hashes.str.contains(r'SHA256=1d23ab46ad547e7eef409b40756aae9246fbdf545d13946f770643f19c715e80', case=False) | Hashes.str.contains(r'SHA256=62036cdf3663097534adf3252b921eed06b73c2562655eae36b126c7d3d83266', case=False) | Hashes.str.contains(r'SHA256=6661320f779337b95bbbe1943ee64afb2101c92f92f3d1571c1bf4201c38c724', case=False) | Hashes.str.contains(r'SHA256=3033ff03e6f523726638b43d954bc666cdd26483fa5abcf98307952ff88f80ee', case=False) | Hashes.str.contains(r'SHA256=6964a5d85639baee288555797992861232e75817f93028b50b8c6d34aa38b05b', case=False) | Hashes.str.contains(r'SHA256=06c5ebd0371342d18bc81a96f5e5ce28de64101e3c2fd0161d0b54d8368d2f1f', case=False) | Hashes.str.contains(r'SHA256=1485c0ed3e875cbdfc6786a5bd26d18ea9d31727deb8df290a1c00c780419a4e', case=False) | Hashes.str.contains(r'SHA256=6839fcae985774427c65fe38e773aa96ec451a412caa5354ad9e2b9b54ffe6c1', case=False) | Hashes.str.contains(r'SHA256=deade507504d385d8cae11365a2ac9b5e2773ff9b61624d75ffa882d6bb28952', case=False) | Hashes.str.contains(r'SHA256=c42c1e5c3c04163bf61c3b86b04a5ec7d302af7e254990cef359ac80474299da', case=False) | Hashes.str.contains(r'SHA256=8dafe5f3d0527b66f6857559e3c81872699003e0f2ffda9202a1b5e29db2002e', case=False) | Hashes.str.contains(r'SHA256=88076e98d45ed3adf0c5355411fe8ca793eb7cec1a1c61f5e1ec337eae267463', case=False) | Hashes.str.contains(r'SHA256=b0f1fbadc1d7a77557d3d836f7698bd986a3ec9fc5d534ad3403970f071176f7', case=False) | Hashes.str.contains(r'SHA256=bcb774b6f6ff504d2db58096601bc5cb419c169bfbeaa3af852417e87d9b2aa0', case=False) | Hashes.str.contains(r'SHA256=4dc24fd07f8fb854e685bc540359c59f177de5b91231cc44d6231e33c9e932b1', case=False) | Hashes.str.contains(r'SHA256=82b0e1d7a27b67f0e6dc39dc41e880bdaef5d1f69fcec38e08da2ed78e805ef9', case=False) | Hashes.str.contains(r'SHA256=ad938d15ecfd70083c474e1642a88b078c3cea02cdbddf66d4fb1c01b9b29d9a', case=False) | Hashes.str.contains(r'SHA256=443c0ba980d4db9213b654a45248fd855855c1cc81d18812cae9d16729ff9a85', case=False) | Hashes.str.contains(r'SHA256=f3ec3f22639d45b3c865bb1ed7622db32e04e1dbc456298be02bf1f3875c3aac', case=False) | Hashes.str.contains(r'SHA256=0181d60506b1f3609217487c2c737621d637e1232f243f68c662d045f44d4873', case=False) | Hashes.str.contains(r'SHA256=c13f5bc4edfbe8f1884320c5d76ca129d00de41a1e61d45195738f125dfe60a7', case=False) | Hashes.str.contains(r'SHA256=8684aec77b4c3cafc1a6594de7e95695fa698625d4206a6c4b201875f76a5b38', case=False) | Hashes.str.contains(r'SHA256=c4c9c84b211899ceb0d18a839afa497537a7c7c01ab481965a09788a9e16590c', case=False) | Hashes.str.contains(r'SHA256=d37996abc8efb29f1ccbb4335ce9ba9158bec86cc4775f0177112e87e4e3be5c', case=False) | Hashes.str.contains(r'SHA256=1a5c08d40a5e73b9fe63ea5761eaec8f41d916ca3da2acbc4e6e799b06af5524', case=False) | Hashes.str.contains(r'SHA256=9c2f3e9811f7d0c7463eaa1ee6f39c23f902f3797b80891590b43bbe0fdf0e51', case=False) | Hashes.str.contains(r'SHA256=bb2422e96ea993007f25c71d55b2eddfa1e940c89e895abb50dd07d7c17ca1df', case=False) | Hashes.str.contains(r'SHA256=94c71954ac0b1fd9fa2bd5c506a16302100ba75d9f84f39ee9b333546c714601', case=False) | Hashes.str.contains(r'SHA256=6d68d8a71a11458ddf0cbb73c0f145bee46ef29ce03ad7ece6bd6aa9d31db9b7', case=False) | Hashes.str.contains(r'SHA256=80e4c83cfa9d675a6746ab846fa5da76d79e87a9297e94e595a2d781e02673b3', case=False) | Hashes.str.contains(r'SHA256=e858de280bd72d7538386a73e579580a6d5edba87b66b3671dc180229368be19', case=False) | Hashes.str.contains(r'SHA256=ee7b8eb150df2788bb9d5fe468327899d9f60d6731c379fd75143730a83b1c55', case=False) | Hashes.str.contains(r'SHA256=8206ce9c42582ac980ff5d64f8e3e310bc2baa42d1a206dd831c6ab397fbd8fe', case=False) | Hashes.str.contains(r'SHA256=4f02aed3750bc6a924c75e774404f259f721d8f4081ed68aa01cf73ca5430f85', case=False) | Hashes.str.contains(r'SHA256=81c7bb39100d358f8286da5e9aa838606c98dfcc263e9a82ed91cd438cb130d1', case=False) | Hashes.str.contains(r'SHA256=0f98492c92e35042b09032e3d9aedc357e4df94fc840217fa1091046f9248a06', case=False) | Hashes.str.contains(r'SHA256=9b1b15a3aacb0e786a608726c3abfc94968915cedcbd239ddf903c4a54bfcf0c', case=False) | Hashes.str.contains(r'SHA256=b9dad0131c51e2645e761b74a71ebad2bf175645fa9f42a4ab0e6921b83306e3', case=False) | Hashes.str.contains(r'SHA256=26ef7b27d1afb685e0c136205a92d29b1091e3dcf6b7b39a4ec03fbbdb57cb55', case=False) | Hashes.str.contains(r'SHA256=a1e6b431534258954db07039117b3159e889c6b9e757329bbd4126383c60c778', case=False) | Hashes.str.contains(r'SHA256=d25b5e4d07f594c640dcd93cfc8ab3f0a38348150bd0bfae89f404fbb0d811c6', case=False) | Hashes.str.contains(r'SHA256=1ef7afea0cf2ef246ade6606ef8b7195de9cd7a3cd7570bff90ba1e2422276f6', case=False) | Hashes.str.contains(r'SHA256=083a311875173f8c4653e9bbbabb689d14aa86b852e7fa9f5512fc60e0fd2c43', case=False) | Hashes.str.contains(r'SHA256=89698cad598a56f9e45efffd15d1841e494a2409cc12279150a03842cd6bb7f3', case=False) | Hashes.str.contains(r'SHA256=a7a665a695ec3c0f862a0d762ad55aff6ce6014359647e7c7f7e3c4dc3be81b7', case=False) | Hashes.str.contains(r'SHA256=02ebf848fa618eba27065db366b15ee6629d98f551d20612ac38b9f655f37715', case=False) | Hashes.str.contains(r'SHA256=8b32fc8b15363915605c127ccbf5cbe71778f8dfbf821a25455496e969a01434', case=False) | Hashes.str.contains(r'SHA256=ee525b90053bb30908b5d7bf4c5e9b8b9d6b7b5c9091a26fa25d30d3ad8ef5d0', case=False) | Hashes.str.contains(r'SHA256=41ad660820c41fc8b1860b13dc1fea8bc8cb2faceb36ed3e29d40d28079d2b1f', case=False) | Hashes.str.contains(r'SHA256=42ff11ddb46dfe5fa895e7babf88ee27790cde53a9139fc384346a89e802a327', case=False) | Hashes.str.contains(r'SHA256=36f45a42ebf2de6962db92aaf8845d7f9fd6895bedc31422adcf31c59a79602d', case=False) | Hashes.str.contains(r'SHA256=4bd4715d2a7af627da11513e32fab925c872babebdb7ff5675a75815fbf95021', case=False) | Hashes.str.contains(r'SHA256=4734a0a5d88f44a4939b8d812364cab6ca5f611b9b8ceebe27df6c1ed3a6d8a4', case=False) | Hashes.str.contains(r'SHA256=e8743094f002239a8a9d6d7852c7852e0bb63cd411b007bd8c194bcba159ef15', case=False) | Hashes.str.contains(r'SHA256=f0474e76cfd36e37e32cfe5c0a9e05ddee17dd5014d7aa8817ea3634a3540a3f', case=False) | Hashes.str.contains(r'SHA256=a0931e16cf7b18d15579e36e0a69edad1717b07527b5407f2c105a2f554224b2', case=False) | Hashes.str.contains(r'SHA256=52d5c35325ce701516f8b04380c9fbdb78ec6bcc13b444f758fdb03d545b0677', case=False) | Hashes.str.contains(r'SHA256=e1cb86386757b947b39086cc8639da988f6e8018ca9995dd669bdc03c8d39d7d', case=False) | Hashes.str.contains(r'SHA256=7662187c236003308a7951c2f49c0768636c492f8935292d02f69e59b01d236d', case=False) | Hashes.str.contains(r'SHA256=24c900024d213549502301c366d18c318887630f04c96bf0a3d6ba74e0df164f', case=False) | Hashes.str.contains(r'SHA256=b7956e31c2fcc0a84bcedf30e5f8115f4e74eed58916253a0c05c8be47283c57', case=False) | Hashes.str.contains(r'SHA256=96bf3ee7c6673b69c6aa173bb44e21fa636b1c2c73f4356a7599c121284a51cc', case=False) | Hashes.str.contains(r'SHA256=d7c81b0f3c14844f6424e8bdd31a128e773cb96cccef6d05cbff473f0ccb9f9c', case=False) | Hashes.str.contains(r'SHA256=0d676baac43d9e2d05b577d5e0c516fba250391ab0cb11232a4b17fd97a51e35', case=False) | Hashes.str.contains(r'SHA256=888491196bd8ff528b773a3e453eae49063ad31fb4ca0f9f2e433f8d35445440', case=False) | Hashes.str.contains(r'IMPHASH=8d070a93a45ed8ba6dba6bfbe0d084e7', case=False) | Hashes.str.contains(r'IMPHASH=7641a0c227f0a3a45b80bb8af43cd152', case=False) | Hashes.str.contains(r'IMPHASH=7df0d3ee663fc0e7c72a95e44ba4c82c', case=False) | Hashes.str.contains(r'IMPHASH=70e1caa5a322b56fd7951f1b2caacb0d', case=False) | Hashes.str.contains(r'IMPHASH=beceab354c66949088c9e5ed1f1ff2a4', case=False) | Hashes.str.contains(r'IMPHASH=caa08a0ba5f679b1e5bbae747cb9d626', case=False) | Hashes.str.contains(r'IMPHASH=420625b024fba72a24025defdf95b303', case=False) | Hashes.str.contains(r'IMPHASH=65ccc2c578a984c31880b6c5e65257d3', case=False) | Hashes.str.contains(r'IMPHASH=e717abe060bc5c34925fe3120ac22f45', case=False) | Hashes.str.contains(r'IMPHASH=41113a3a832353963112b94f4635a383', case=False) | Hashes.str.contains(r'IMPHASH=3866dd9fe63de457bdbf893bf7050ddf', case=False) | Hashes.str.contains(r'IMPHASH=3fd33d5b3b52e2db91983ac4b1d7a3c4', case=False) | Hashes.str.contains(r'IMPHASH=a998fe47a44bfbf2399968e21cfdf7ca', case=False) | Hashes.str.contains(r'IMPHASH=c9a6e83d931286d1604d1add8403e1e5', case=False) | Hashes.str.contains(r'IMPHASH=cf0eb2dce2ba2c9ff5dd0da794b8b372', case=False) | Hashes.str.contains(r'IMPHASH=ea37e43ffc7cfcba181c5cff37a9be1f', case=False) | Hashes.str.contains(r'IMPHASH=8e35c9460537092672b3c7c14bccc7e0', case=False) | Hashes.str.contains(r'IMPHASH=7bf14377888c429897eb10a85f70266c', case=False) | Hashes.str.contains(r'IMPHASH=b351627263648b1d220bb488e7ec7202', case=False) | Hashes.str.contains(r'IMPHASH=ce10082e1aa4c1c2bd953b4a7208e56a', case=False) | Hashes.str.contains(r'IMPHASH=a7bd820fa5b895fab06f20739c9f24b8', case=False) | Hashes.str.contains(r'IMPHASH=be0dd8b8e045356d600ee55a64d9d197', case=False) | Hashes.str.contains(r'IMPHASH=63fd1582ac2edee50f7ec7eedde38ee8', case=False) | Hashes.str.contains(r'IMPHASH=6c8d5c79a850eecc2fb0291cebda618d', case=False) | Hashes.str.contains(r'IMPHASH=c32d9a9af7f702814e1368c689877f3a', case=False) | Hashes.str.contains(r'IMPHASH=6b387c029257f024a43a73f38afb2629', case=False) | Hashes.str.contains(r'IMPHASH=df43355c636583e56e92142dcc69cc58', case=False) | Hashes.str.contains(r'IMPHASH=e3ee9131742bf9c9d43cb9a425e497dd', case=False) | Hashes.str.contains(r'IMPHASH=c214aac08575c139e48d04f5aee21585', case=False) | Hashes.str.contains(r'IMPHASH=3c5d2ffd06074f1b09c89465cc8bfbf7', case=False) | Hashes.str.contains(r'IMPHASH=059c6bd84285f4960e767f032b33f19b', case=False) | Hashes.str.contains(r'IMPHASH=a09170ef09c55cdca9472c02cb1f2647', case=False) | Hashes.str.contains(r'IMPHASH=fca0f3c7b6d79f494034b9d2a1f5921a', case=False) | Hashes.str.contains(r'IMPHASH=0262d4147f21d681f8519ab2af79283f', case=False) | Hashes.str.contains(r'IMPHASH=832219eb71b8bdb771f1d29d27b0acf4', case=False) | Hashes.str.contains(r'IMPHASH=514298d18002920ee5a917fc34426417', case=False) | Hashes.str.contains(r'IMPHASH=26ceec6572c630bdad60c984e51b7da4', case=False) | Hashes.str.contains(r'IMPHASH=dbf09dd3e675f15c7cc9b4d2b8e6cd90', case=False) | Hashes.str.contains(r'IMPHASH=4b47f6031c558106eee17655f8f8a32f', case=False) | Hashes.str.contains(r'IMPHASH=a6c4a7369500900fc172f9557cff22cf', case=False) | Hashes.str.contains(r'IMPHASH=3b49942ec6cef1898e97f741b2b5df8a', case=False) | Hashes.str.contains(r'IMPHASH=28dc68bb6d6bf4f6b2db8dd7588b2511', case=False) | Hashes.str.contains(r'IMPHASH=27f6dc8a247a22308dd1beba5086b302', case=False) | Hashes.str.contains(r'IMPHASH=7d017945bf90936a6c40f73f91ed02c2', case=False) | Hashes.str.contains(r'IMPHASH=d51f0f6034eb5e45f0ed4e9b7bbc9c97', case=False) | Hashes.str.contains(r'IMPHASH=0ad7da35304c75ccf859bc29fe9ed09e', case=False) | Hashes.str.contains(r'IMPHASH=bf9d32a6ab9effcd2fd6a734e5be98f9', case=False) | Hashes.str.contains(r'IMPHASH=87fd2b54ed568e2294300e164b8c46f7', case=False) | Hashes.str.contains(r'IMPHASH=2de3451f3e7b02970582bb8f9fd8c73a', case=False) | Hashes.str.contains(r'IMPHASH=e97dc162f416bf06745bf9ffdf78a0ff', case=False) | Hashes.str.contains(r'IMPHASH=2a008187d4a73284ddcc43f1b727b513', case=False) | Hashes.str.contains(r'IMPHASH=f8e4844312e81dbdb4e8e95e2ad2c127', case=False) | Hashes.str.contains(r'IMPHASH=4c7cc13a110ccdbb932bb9d7d42efdf4', case=False) | Hashes.str.contains(r'IMPHASH=45bfe170e0cd654bc1e2ae3fca3ac3f4', case=False) | Hashes.str.contains(r'IMPHASH=3db9de43d5d530c10d0cd2d43c7a0771', case=False))"
        ],
        "logsource": {
            "category": "driver_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Vulnerable WinRing0 Driver Load",
        "id": "1a42dfa6-6cb2-4df9-9b48-295be477e835",
        "status": "test",
        "description": "Detects the load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==6 & (Hashes.str.contains(r'IMPHASH=D41FA95D4642DC981F10DE36F4DC8CD7', case=False) | ImageLoaded.str.contains(r'\\\\WinRing0x64.sys', case=False) | ImageLoaded.str.contains(r'\\\\WinRing0.sys', case=False) | ImageLoaded.str.contains(r'\\\\WinRing0.dll', case=False) | ImageLoaded.str.contains(r'\\\\WinRing0x64.dll', case=False) | ImageLoaded.str.contains(r'\\\\winring00x64.sys', case=False))"
        ],
        "logsource": {
            "category": "driver_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WinDivert Driver Load",
        "id": "679085d5-f427-4484-9f58-1dc30a7c426d",
        "status": "test",
        "description": "Detects the load of the Windiver driver, a powerful user-mode capture/sniffing/modification/blocking/re-injection package for Windows",
        "tags": [
            "attack.collection",
            "attack.defense-evasion",
            "attack.t1599.001",
            "attack.t1557.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==6 & (ImageLoaded.str.contains(r'\\\\WinDivert.sys', case=False) | ImageLoaded.str.contains(r'\\\\WinDivert64.sys', case=False) | ImageLoaded.str.contains(r'\\\\NordDivert.sys', case=False) | ImageLoaded.str.contains(r'\\\\lingtiwfp.sys', case=False) | ImageLoaded.str.contains(r'\\\\eswfp.sys', case=False) | Hashes.str.contains(r'IMPHASH=0604bb7cb4bb851e2168d5c7d9399087', case=False) | Hashes.str.contains(r'IMPHASH=2e5f0e649d97f32b03c09e4686d0574f', case=False) | Hashes.str.contains(r'IMPHASH=52f8aa269f69f0edad9e8fcdaedce276', case=False) | Hashes.str.contains(r'IMPHASH=c0e5d314da39dbf65a2dbff409cc2c76', case=False) | Hashes.str.contains(r'IMPHASH=58623490691babe8330adc81cd04a663', case=False) | Hashes.str.contains(r'IMPHASH=8ee39b48656e4d6b8459d7ba7da7438b', case=False) | Hashes.str.contains(r'IMPHASH=45ee545ae77e8d43fc70ede9efcd4c96', case=False) | Hashes.str.contains(r'IMPHASH=a1b2e245acd47e4a348e1a552a02859a', case=False) | Hashes.str.contains(r'IMPHASH=2a5f85fe4609461c6339637594fa9b0a', case=False) | Hashes.str.contains(r'IMPHASH=6b2c6f95233c2914d1d488ee27531acc', case=False) | Hashes.str.contains(r'IMPHASH=9f2fdd3f9ab922bbb0560a7df46f4342', case=False) | Hashes.str.contains(r'IMPHASH=d8a719865c448b1bd2ec241e46ac1c88', case=False) | Hashes.str.contains(r'IMPHASH=0ea54f8c9af4a2fe8367fa457f48ed38', case=False) | Hashes.str.contains(r'IMPHASH=9d519ae0a0864d6d6ae3f8b6c9c70af6', case=False) | Hashes.str.contains(r'IMPHASH=a74929edfc3289895e3f2885278947ae', case=False) | Hashes.str.contains(r'IMPHASH=a66b476c2d06c370f0a53b5537f2f11e', case=False) | Hashes.str.contains(r'IMPHASH=bdcd836a46bc2415773f6b5ea77a46e4', case=False) | Hashes.str.contains(r'IMPHASH=c28cd6ccd83179e79dac132a553693d9', case=False))"
        ],
        "logsource": {
            "category": "driver_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Vulnerable Driver Load By Name",
        "id": "72cd00d6-490c-4650-86ff-1d11f491daa1",
        "status": "test",
        "description": "Detects the load of known vulnerable drivers via the file name of the drivers.",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543.003",
            "attack.t1068"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==6 & (ImageLoaded.str.contains(r'\\\\panmonfltx64.sys', case=False) | ImageLoaded.str.contains(r'\\\\dbutil.sys', case=False) | ImageLoaded.str.contains(r'\\\\fairplaykd.sys', case=False) | ImageLoaded.str.contains(r'\\\\nvaudio.sys', case=False) | ImageLoaded.str.contains(r'\\\\superbmc.sys', case=False) | ImageLoaded.str.contains(r'\\\\bsmi.sys', case=False) | ImageLoaded.str.contains(r'\\\\smarteio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\bwrsh.sys', case=False) | ImageLoaded.str.contains(r'\\\\agent64.sys', case=False) | ImageLoaded.str.contains(r'\\\\asmmap64.sys', case=False) | ImageLoaded.str.contains(r'\\\\dellbios.sys', case=False) | ImageLoaded.str.contains(r'\\\\chaos-rootkit.sys', case=False) | ImageLoaded.str.contains(r'\\\\wcpu.sys', case=False) | ImageLoaded.str.contains(r'\\\\dh_kernel.sys', case=False) | ImageLoaded.str.contains(r'\\\\sbiosio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\bw.sys', case=False) | ImageLoaded.str.contains(r'\\\\asrdrv102.sys', case=False) | ImageLoaded.str.contains(r'\\\\nt6.sys', case=False) | ImageLoaded.str.contains(r'\\\\mhyprot3.sys', case=False) | ImageLoaded.str.contains(r'\\\\winio64c.sys', case=False) | ImageLoaded.str.contains(r'\\\\asupio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\blackbonedrv10.sys', case=False) | ImageLoaded.str.contains(r'\\\\d.sys', case=False) | ImageLoaded.str.contains(r'\\\\driver7-x86.sys', case=False) | ImageLoaded.str.contains(r'\\\\sfdrvx32.sys', case=False) | ImageLoaded.str.contains(r'\\\\enetechio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\gdrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\sysinfodetectorx64.sys', case=False) | ImageLoaded.str.contains(r'\\\\fh-ethercat_dio.sys', case=False) | ImageLoaded.str.contains(r'\\\\asromgdrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\my.sys', case=False) | ImageLoaded.str.contains(r'\\\\dcprotect.sys', case=False) | ImageLoaded.str.contains(r'\\\\irec.sys', case=False) | ImageLoaded.str.contains(r'\\\\gedevdrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\winio32a.sys', case=False) | ImageLoaded.str.contains(r'\\\\gvcidrv64.sys', case=False) | ImageLoaded.str.contains(r'\\\\winio32.sys', case=False) | ImageLoaded.str.contains(r'\\\\bs_hwmio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\nstr.sys', case=False) | ImageLoaded.str.contains(r'\\\\inpoutx64.sys', case=False) | ImageLoaded.str.contains(r'\\\\hw.sys', case=False) | ImageLoaded.str.contains(r'\\\\winio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\hpportiox64.sys', case=False) | ImageLoaded.str.contains(r'\\\\iobitunlocker.sys', case=False) | ImageLoaded.str.contains(r'\\\\b1.sys', case=False) | ImageLoaded.str.contains(r'\\\\aoddriver.sys', case=False) | ImageLoaded.str.contains(r'\\\\elbycdio.sys', case=False) | ImageLoaded.str.contains(r'\\\\protects.sys', case=False) | ImageLoaded.str.contains(r'\\\\kprocesshacker.sys', case=False) | ImageLoaded.str.contains(r'\\\\speedfan.sys', case=False) | ImageLoaded.str.contains(r'\\\\radhwmgr.sys', case=False) | ImageLoaded.str.contains(r'\\\\iscflashx64.sys', case=False) | ImageLoaded.str.contains(r'\\\\black.sys', case=False) | ImageLoaded.str.contains(r'\\\\b4.sys', case=False) | ImageLoaded.str.contains(r'\\\\hwos2ec10x64.sys', case=False) | ImageLoaded.str.contains(r'\\\\winflash64.sys', case=False) | ImageLoaded.str.contains(r'\\\\corsairllaccess64.sys', case=False) | ImageLoaded.str.contains(r'\\\\bs_i2cio.sys', case=False) | ImageLoaded.str.contains(r'\\\\d3.sys', case=False) | ImageLoaded.str.contains(r'\\\\windows-xp-64.sys', case=False) | ImageLoaded.str.contains(r'\\\\aswvmm.sys', case=False) | ImageLoaded.str.contains(r'\\\\bs_i2c64.sys', case=False) | ImageLoaded.str.contains(r'\\\\1.sys', case=False) | ImageLoaded.str.contains(r'\\\\nchgbios2x64.sys', case=False) | ImageLoaded.str.contains(r'\\\\cpuz141.sys', case=False) | ImageLoaded.str.contains(r'\\\\segwindrvx64.sys', case=False) | ImageLoaded.str.contains(r'\\\\tdeio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\ntiolib.sys', case=False) | ImageLoaded.str.contains(r'\\\\gtckmdfbs.sys', case=False) | ImageLoaded.str.contains(r'\\\\iomap64.sys', case=False) | ImageLoaded.str.contains(r'\\\\avalueio.sys', case=False) | ImageLoaded.str.contains(r'\\\\semav6msr.sys', case=False) | ImageLoaded.str.contains(r'\\\\lgdcatcher.sys', case=False) | ImageLoaded.str.contains(r'\\\\b.sys', case=False) | ImageLoaded.str.contains(r'\\\\hwdetectng.sys', case=False) | ImageLoaded.str.contains(r'\\\\nt4.sys', case=False) | ImageLoaded.str.contains(r'\\\\tgsafe.sys', case=False) | ImageLoaded.str.contains(r'\\\\mydrivers.sys', case=False) | ImageLoaded.str.contains(r'\\\\eneio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\procexp.sys', case=False) | ImageLoaded.str.contains(r'\\\\viragt64.sys', case=False) | ImageLoaded.str.contains(r'\\\\fpcie2com.sys', case=False) | ImageLoaded.str.contains(r'\\\\lenovodiagnosticsdriver.sys', case=False) | ImageLoaded.str.contains(r'\\\\cp2x72c.sys', case=False) | ImageLoaded.str.contains(r'\\\\kerneld.amd64', case=False) | ImageLoaded.str.contains(r'\\\\bs_def64.sys', case=False) | ImageLoaded.str.contains(r'\\\\piddrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\amifldrv64.sys', case=False) | ImageLoaded.str.contains(r'\\\\cpuz_x64.sys', case=False) | ImageLoaded.str.contains(r'\\\\proxy32.sys', case=False) | ImageLoaded.str.contains(r'\\\\wsdkd.sys', case=False) | ImageLoaded.str.contains(r'\\\\t8.sys', case=False) | ImageLoaded.str.contains(r'\\\\ucorew64.sys', case=False) | ImageLoaded.str.contains(r'\\\\atszio.sys', case=False) | ImageLoaded.str.contains(r'\\\\lmiinfo.sys', case=False) | ImageLoaded.str.contains(r'\\\\80.sys', case=False) | ImageLoaded.str.contains(r'\\\\nt3.sys', case=False) | ImageLoaded.str.contains(r'\\\\ngiodriver.sys', case=False) | ImageLoaded.str.contains(r'\\\\lv561av.sys', case=False) | ImageLoaded.str.contains(r'\\\\gpcidrv64.sys', case=False) | ImageLoaded.str.contains(r'\\\\fd3b7234419fafc9bdd533f48896ed73_b816c5cd.sys', case=False) | ImageLoaded.str.contains(r'\\\\rtport.sys', case=False) | ImageLoaded.str.contains(r'\\\\full.sys', case=False) | ImageLoaded.str.contains(r'\\\\viragt.sys', case=False) | ImageLoaded.str.contains(r'\\\\fiddrv64.sys', case=False) | ImageLoaded.str.contains(r'\\\\cupfixerx64.sys', case=False) | ImageLoaded.str.contains(r'\\\\cpupress.sys', case=False) | ImageLoaded.str.contains(r'\\\\hwos2ec7x64.sys', case=False) | ImageLoaded.str.contains(r'\\\\driver7-x86-withoutdbg.sys', case=False) | ImageLoaded.str.contains(r'\\\\asrdrv10.sys', case=False) | ImageLoaded.str.contains(r'\\\\nvflsh64.sys', case=False) | ImageLoaded.str.contains(r'\\\\asrrapidstartdrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\tmcomm.sys', case=False) | ImageLoaded.str.contains(r'\\\\wiseunlo.sys', case=False) | ImageLoaded.str.contains(r'\\\\rwdrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\asio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\nvoclock.sys', case=False) | ImageLoaded.str.contains(r'\\\\panio.sys', case=False) | ImageLoaded.str.contains(r'\\\\mtcbsv64.sys', case=False) | ImageLoaded.str.contains(r'\\\\amigendrv64.sys', case=False) | ImageLoaded.str.contains(r'\\\\capcom.sys', case=False) | ImageLoaded.str.contains(r'\\\\netflt.sys', case=False) | ImageLoaded.str.contains(r'\\\\phlashnt.sys', case=False) | ImageLoaded.str.contains(r'\\\\dbutil_2_3.sys', case=False) | ImageLoaded.str.contains(r'\\\\ni.sys', case=False) | ImageLoaded.str.contains(r'\\\\ntiolib_x64.sys', case=False) | ImageLoaded.str.contains(r'\\\\atszio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\lgcoretemp.sys', case=False) | ImageLoaded.str.contains(r'\\\\lha.sys', case=False) | ImageLoaded.str.contains(r'\\\\phymem64.sys', case=False) | ImageLoaded.str.contains(r'\\\\dbutildrv2.sys', case=False) | ImageLoaded.str.contains(r'\\\\asrdrv103.sys', case=False) | ImageLoaded.str.contains(r'\\\\rtcore64.sys', case=False) | ImageLoaded.str.contains(r'\\\\bs_hwmio64_w10.sys', case=False) | ImageLoaded.str.contains(r'\\\\ene.sys', case=False) | ImageLoaded.str.contains(r'\\\\winio64b.sys', case=False) | ImageLoaded.str.contains(r'\\\\piddrv64.sys', case=False) | ImageLoaded.str.contains(r'\\\\directio32.sys', case=False) | ImageLoaded.str.contains(r'\\\\monitor_win10_x64.sys', case=False) | ImageLoaded.str.contains(r'\\\\nt5.sys', case=False) | ImageLoaded.str.contains(r'\\\\asrsmartconnectdrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\rtif.sys', case=False) | ImageLoaded.str.contains(r'\\\\atillk64.sys', case=False) | ImageLoaded.str.contains(r'\\\\directio.sys', case=False) | ImageLoaded.str.contains(r'\\\\asribdrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\kfeco11x64.sys', case=False) | ImageLoaded.str.contains(r'\\\\citmdrv_ia64.sys', case=False) | ImageLoaded.str.contains(r'\\\\sysdrv3s.sys', case=False) | ImageLoaded.str.contains(r'\\\\amp.sys', case=False) | ImageLoaded.str.contains(r'\\\\vboxdrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\adv64drv.sys', case=False) | ImageLoaded.str.contains(r'\\\\hostnt.sys', case=False) | ImageLoaded.str.contains(r'\\\\phymem_ext64.sys', case=False) | ImageLoaded.str.contains(r'\\\\echo_driver.sys', case=False) | ImageLoaded.str.contains(r'\\\\winiodrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\pdfwkrnl.sys', case=False) | ImageLoaded.str.contains(r'\\\\glckio2.sys', case=False) | ImageLoaded.str.contains(r'\\\\asrdrv106.sys', case=False) | ImageLoaded.str.contains(r'\\\\nscm.sys', case=False) | ImageLoaded.str.contains(r'\\\\bs_rcio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\ncpl.sys', case=False) | ImageLoaded.str.contains(r'\\\\sandra.sys', case=False) | ImageLoaded.str.contains(r'\\\\fiddrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\hwrwdrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\mhyprot.sys', case=False) | ImageLoaded.str.contains(r'\\\\asrsetupdrv103.sys', case=False) | ImageLoaded.str.contains(r'\\\\iqvw64.sys', case=False) | ImageLoaded.str.contains(r'\\\\b3.sys', case=False) | ImageLoaded.str.contains(r'\\\\ssport.sys', case=False) | ImageLoaded.str.contains(r'\\\\bs_def.sys', case=False) | ImageLoaded.str.contains(r'\\\\computerz.sys', case=False) | ImageLoaded.str.contains(r'\\\\windows8-10-32.sys', case=False) | ImageLoaded.str.contains(r'\\\\nstrwsk.sys', case=False) | ImageLoaded.str.contains(r'\\\\lurker.sys', case=False) | ImageLoaded.str.contains(r'\\\\bsmemx64.sys', case=False) | ImageLoaded.str.contains(r'\\\\wyproxy64.sys', case=False) | ImageLoaded.str.contains(r'\\\\asio.sys', case=False) | ImageLoaded.str.contains(r'\\\\t3.sys', case=False) | ImageLoaded.str.contains(r'\\\\cpuz.sys', case=False) | ImageLoaded.str.contains(r'\\\\rtkio.sys', case=False) | ImageLoaded.str.contains(r'\\\\driver7-x64.sys', case=False) | ImageLoaded.str.contains(r'\\\\netfilterdrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\ioaccess.sys', case=False) | ImageLoaded.str.contains(r'\\\\testbone.sys', case=False) | ImageLoaded.str.contains(r'\\\\gameink.sys', case=False) | ImageLoaded.str.contains(r'\\\\kevp64.sys', case=False) | ImageLoaded.str.contains(r'\\\\mhyprot2.sys', case=False) | ImageLoaded.str.contains(r'\\\\se64a.sys', case=False) | ImageLoaded.str.contains(r'\\\\vboxusb.sys', case=False) | ImageLoaded.str.contains(r'\\\\windows7-32.sys', case=False) | ImageLoaded.str.contains(r'\\\\vproeventmonitor.sys', case=False) | ImageLoaded.str.contains(r'\\\\winio64a.sys', case=False) | ImageLoaded.str.contains(r'\\\\asrdrv101.sys', case=False) | ImageLoaded.str.contains(r'\\\\netproxydriver.sys', case=False) | ImageLoaded.str.contains(r'\\\\elrawdsk.sys', case=False) | ImageLoaded.str.contains(r'\\\\zam64.sys', case=False) | ImageLoaded.str.contains(r'\\\\cg6kwin2k.sys', case=False) | ImageLoaded.str.contains(r'\\\\asupio.sys', case=False) | ImageLoaded.str.contains(r'\\\\stdcdrvws64.sys', case=False) | ImageLoaded.str.contains(r'\\\\81.sys', case=False) | ImageLoaded.str.contains(r'\\\\citmdrv_amd64.sys', case=False) | ImageLoaded.str.contains(r'\\\\amdryzenmasterdriver.sys', case=False) | ImageLoaded.str.contains(r'\\\\vmdrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\sysinfo.sys', case=False) | ImageLoaded.str.contains(r'\\\\alsysio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\directio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\rzpnk.sys', case=False) | ImageLoaded.str.contains(r'\\\\amdpowerprofiler.sys', case=False) | ImageLoaded.str.contains(r'\\\\truesight.sys', case=False) | ImageLoaded.str.contains(r'\\\\wirwadrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\phymemx64.sys', case=False) | ImageLoaded.str.contains(r'\\\\msio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\sepdrv3_1.sys', case=False) | ImageLoaded.str.contains(r'\\\\gametersafe.sys', case=False) | ImageLoaded.str.contains(r'\\\\bs_rcio.sys', case=False) | ImageLoaded.str.contains(r'\\\\d4.sys', case=False) | ImageLoaded.str.contains(r'\\\\t.sys', case=False) | ImageLoaded.str.contains(r'\\\\eio.sys', case=False) | ImageLoaded.str.contains(r'\\\\nt2.sys', case=False) | ImageLoaded.str.contains(r'\\\\winring0.sys', case=False) | ImageLoaded.str.contains(r'\\\\physmem.sys', case=False) | ImageLoaded.str.contains(r'\\\\libnicm.sys', case=False) | ImageLoaded.str.contains(r'\\\\msio32.sys', case=False) | ImageLoaded.str.contains(r'\\\\asrautochkupddrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\asio32.sys', case=False) | ImageLoaded.str.contains(r'\\\\etdsupp.sys', case=False) | ImageLoaded.str.contains(r'\\\\smep_namco.sys', case=False) | ImageLoaded.str.contains(r'\\\\bandai.sys', case=False) | ImageLoaded.str.contains(r'\\\\d2.sys', case=False) | ImageLoaded.str.contains(r'\\\\magdrvamd64.sys', case=False) | ImageLoaded.str.contains(r'\\\\nvflash.sys', case=False) | ImageLoaded.str.contains(r'\\\\goad.sys', case=False) | ImageLoaded.str.contains(r'\\\\proxy64.sys', case=False) | ImageLoaded.str.contains(r'\\\\amsdk.sys', case=False) | ImageLoaded.str.contains(r'\\\\kbdcap64.sys', case=False) | ImageLoaded.str.contains(r'\\\\vdbsv64.sys', case=False) | ImageLoaded.str.contains(r'\\\\pchunter.sys', case=False) | ImageLoaded.str.contains(r'\\\\sysconp.sys', case=False) | ImageLoaded.str.contains(r'\\\\dh_kernel_10.sys', case=False) | ImageLoaded.str.contains(r'\\\\msrhook.sys', case=False) | ImageLoaded.str.contains(r'\\\\bedaisy.sys', case=False) | ImageLoaded.str.contains(r'\\\\dcr.sys', case=False) | ImageLoaded.str.contains(r'\\\\panmonflt.sys', case=False) | ImageLoaded.str.contains(r'\\\\bsmixp64.sys', case=False) | ImageLoaded.str.contains(r'\\\\otipcibus.sys', case=False) | ImageLoaded.str.contains(r'\\\\fidpcidrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\kfeco10x64.sys', case=False) | ImageLoaded.str.contains(r'\\\\asrdrv104.sys', case=False) | ImageLoaded.str.contains(r'\\\\c.sys', case=False) | ImageLoaded.str.contains(r'\\\\tdklib64.sys', case=False) | ImageLoaded.str.contains(r'\\\\bsmix64.sys', case=False) | ImageLoaded.str.contains(r'\\\\bs_flash64.sys', case=False) | ImageLoaded.str.contains(r'\\\\stdcdrv64.sys', case=False) | ImageLoaded.str.contains(r'\\\\naldrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\ctiio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\bwrs.sys', case=False) | ImageLoaded.str.contains(r'\\\\nicm.sys', case=False) | ImageLoaded.str.contains(r'\\\\winio32b.sys', case=False) | ImageLoaded.str.contains(r'\\\\paniox64.sys', case=False) | ImageLoaded.str.contains(r'\\\\ecsiodriverx64.sys', case=False) | ImageLoaded.str.contains(r'\\\\iomem64.sys', case=False) | ImageLoaded.str.contains(r'\\\\fidpcidrv64.sys', case=False) | ImageLoaded.str.contains(r'\\\\aswarpot.sys', case=False) | ImageLoaded.str.contains(r'\\\\bs_rciow1064.sys', case=False) | ImageLoaded.str.contains(r'\\\\asmio64.sys', case=False) | ImageLoaded.str.contains(r'\\\\openlibsys.sys', case=False) | ImageLoaded.str.contains(r'\\\\viraglt64.sys', case=False) | ImageLoaded.str.contains(r'\\\\dbk64.sys', case=False) | ImageLoaded.str.contains(r'\\\\t7.sys', case=False) | ImageLoaded.str.contains(r'\\\\atlaccess.sys', case=False) | ImageLoaded.str.contains(r'\\\\nbiolib_x64.sys', case=False) | ImageLoaded.str.contains(r'\\\\smep_capcom.sys', case=False) | ImageLoaded.str.contains(r'\\\\iqvw64e.sys', case=False))"
        ],
        "logsource": {
            "category": "driver_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Vulnerable Driver Load",
        "id": "7aaaf4b8-e47c-4295-92ee-6ed40a6f60c8",
        "status": "test",
        "description": "Detects loading of known vulnerable drivers via their hash.",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543.003",
            "attack.t1068"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==6 & (Hashes.str.contains(r'MD5=c996d7971c49252c582171d9380360f2', case=False) | Hashes.str.contains(r'MD5=da7e98b23b49b7293ee06713032c74f6', case=False) | Hashes.str.contains(r'MD5=9496585198d726000ea505abc39dbfe9', case=False) | Hashes.str.contains(r'MD5=649ff59b8e571c1fc6535b31662407aa', case=False) | Hashes.str.contains(r'MD5=4429f85e2415742c7cf8c9f54905c4b9', case=False) | Hashes.str.contains(r'MD5=a610cd4c762b5af8575285dafb9baa8f', case=False) | Hashes.str.contains(r'MD5=d5e76d125d624f8025d534f49e3c4162', case=False) | Hashes.str.contains(r'MD5=9c8fffef24fc480917236f9a20b80a47', case=False) | Hashes.str.contains(r'MD5=65b979bcab915c3922578fe77953d789', case=False) | Hashes.str.contains(r'MD5=598f8fb2317350e5f90b7bd16baf5738', case=False) | Hashes.str.contains(r'MD5=6691e873354f1914692df104718eebad', case=False) | Hashes.str.contains(r'MD5=4814205270caa80d35569eee8081838e', case=False) | Hashes.str.contains(r'MD5=7f9128654c3def08c28e0e13efff0fee', case=False) | Hashes.str.contains(r'MD5=ce952204558ea66ec1a9632dcbdde8bd', case=False) | Hashes.str.contains(r'MD5=0c0195c48b6b8582fa6f6373032118da', case=False) | Hashes.str.contains(r'MD5=370a4ca29a7cf1d6bc0744afc12b236c', case=False) | Hashes.str.contains(r'MD5=67e03f83c503c3f11843942df32efe5a', case=False) | Hashes.str.contains(r'MD5=8a70921638ff82bb924456deadcd20e6', case=False) | Hashes.str.contains(r'MD5=8a212a246b3c41f3ddce5888aaaaacd6', case=False) | Hashes.str.contains(r'MD5=a346417e9ae2c17a8fbf73302eeb611d', case=False) | Hashes.str.contains(r'MD5=d4f7c14e92b36c341c41ae93159407dd', case=False) | Hashes.str.contains(r'MD5=748cf64b95ca83abc35762ad2c25458f', case=False) | Hashes.str.contains(r'MD5=79ab228766c76cfdf42a64722821711e', case=False) | Hashes.str.contains(r'MD5=ce67e51b8c0370d1bfe421b79fa8b656', case=False) | Hashes.str.contains(r'MD5=25190f667f31318dd9a2e36383d5709f', case=False) | Hashes.str.contains(r'MD5=1f263a57c5ef46c8577744ecb32c9548', case=False) | Hashes.str.contains(r'MD5=c6cfa2d6e4c443e673c2c12417ea3001', case=False) | Hashes.str.contains(r'MD5=cceb3a7e3bd0203c807168b393a65a74', case=False) | Hashes.str.contains(r'MD5=56b54823a79a53747cbe11f8c4db7b1e', case=False) | Hashes.str.contains(r'MD5=988dabdcf990b134b0ac1e00512c30c4', case=False) | Hashes.str.contains(r'MD5=09e77d71d626574e6142894caca6e6dd', case=False) | Hashes.str.contains(r'MD5=c832a4313ff082258240b61b88efa025', case=False) | Hashes.str.contains(r'MD5=44499d3cab387aa78a4a6eca2ac181fb', case=False) | Hashes.str.contains(r'MD5=6ff59faea912903af0ba8e80e58612bc', case=False) | Hashes.str.contains(r'MD5=7461f0f9b931044a9d5f1d44eb4e8e09', case=False) | Hashes.str.contains(r'MD5=08bac71557df8a9b1381c8c165f64520', case=False) | Hashes.str.contains(r'MD5=fea9319d67177ed6f36438d2bd9392fb', case=False) | Hashes.str.contains(r'MD5=6dd82d91f981893be57ff90101a7f7f1', case=False) | Hashes.str.contains(r'MD5=d4119a5cb07ce945c6549eae74e39731', case=False) | Hashes.str.contains(r'MD5=cf1113723e3c1c71af80d228f040c198', case=False) | Hashes.str.contains(r'MD5=0e625b7a7c3f75524e307b160f8db337', case=False) | Hashes.str.contains(r'MD5=6e1faeee0ebfcb384208772410fe1e86', case=False) | Hashes.str.contains(r'MD5=58a92520dda53166e322118ee0503364', case=False) | Hashes.str.contains(r'MD5=916ba55fc004b85939ee0cc86a5191c5', case=False) | Hashes.str.contains(r'MD5=f16b44cca74d3c3645e4c0a6bb5c0cb9', case=False) | Hashes.str.contains(r'MD5=db2fc89098ac722dabe3c37ed23de340', case=False) | Hashes.str.contains(r'MD5=6f5cf7feb9bb8108b68f169b8e625ffe', case=False) | Hashes.str.contains(r'MD5=d2588631d8aae2a3e54410eaf54f0679', case=False) | Hashes.str.contains(r'MD5=72acbdd8fac58b71b301980eab3ebfc8', case=False) | Hashes.str.contains(r'MD5=9cc757a18b86408efc1ce3ed20cbcdac', case=False) | Hashes.str.contains(r'MD5=230fd3749904ca045ea5ec0aa14006e9', case=False) | Hashes.str.contains(r'MD5=79329e2917623181888605bc5b302711', case=False) | Hashes.str.contains(r'MD5=3e4a1384a27013ab7b767a88b8a1bd34', case=False) | Hashes.str.contains(r'MD5=bafd6bad121e42f940a0b8abc587eadf', case=False) | Hashes.str.contains(r'MD5=02a1d77ef13bd41cad04abcce896d0b9', case=False) | Hashes.str.contains(r'MD5=de331f863627dc489f547725d7292bbd', case=False) | Hashes.str.contains(r'MD5=29122f970a9e766ef01a73e0616d68b3', case=False) | Hashes.str.contains(r'MD5=2b8814cff6351c2b775387770053bdec', case=False) | Hashes.str.contains(r'MD5=332db70d2c5c332768ab063ba6ac8433', case=False) | Hashes.str.contains(r'MD5=40f39a98fb513411dacdfc5b2d972206', case=False) | Hashes.str.contains(r'MD5=644d687c9f96c82ea2974ccacd8cd549', case=False) | Hashes.str.contains(r'MD5=825703c494e0d270f797f1ecf070f698', case=False) | Hashes.str.contains(r'MD5=afae2a21e36158f5cf4f76f896649c75', case=False) | Hashes.str.contains(r'MD5=dd050e79c515e4a6d1ae36cac5545025', case=False) | Hashes.str.contains(r'MD5=6133e1008f8c6fc32d4b1a60941bab85', case=False) | Hashes.str.contains(r'MD5=0e2fc7e7f85c980eb698b9e468c20366', case=False) | Hashes.str.contains(r'MD5=94c80490b02cc655d2d80597c3aef08f', case=False) | Hashes.str.contains(r'MD5=4d487f77be4471900d6ccbc47242cc25', case=False) | Hashes.str.contains(r'MD5=2e3dbb01b282a526bdc3031e0663c41c', case=False) | Hashes.str.contains(r'MD5=93a23503e26773c27ed1da06bb79e7a4', case=False) | Hashes.str.contains(r'MD5=ffd0c87d9bf894af26823fbde94c71b6', case=False) | Hashes.str.contains(r'MD5=a86150f2e29b35369afa2cafd7aa9764', case=False) | Hashes.str.contains(r'MD5=6126065af2fc2639473d12ee3c0c198e', case=False) | Hashes.str.contains(r'MD5=c1d3a6bb423739a5e781f7eee04c9cfd', case=False) | Hashes.str.contains(r'MD5=f0db5af13c457a299a64cf524c64b042', case=False) | Hashes.str.contains(r'MD5=e5e8ecb20bc5630414707295327d755e', case=False) | Hashes.str.contains(r'MD5=659a59d7e26b7730361244e12201378e', case=False) | Hashes.str.contains(r'MD5=8f47af49c330c9fcf3451ad2252b9e04', case=False) | Hashes.str.contains(r'MD5=dd9596c18818288845423c68f3f39800', case=False) | Hashes.str.contains(r'MD5=a7d3ebfb3843ee28d9ca18b496bd0eb2', case=False) | Hashes.str.contains(r'MD5=20125794b807116617d43f02b616e092', case=False) | Hashes.str.contains(r'MD5=46cae59443ae41f4dbb42e050a9b501a', case=False) | Hashes.str.contains(r'MD5=21e13f2cb269defeae5e1d09887d47bb', case=False) | Hashes.str.contains(r'MD5=5bab40019419a2713298a5c9173e5d30', case=False) | Hashes.str.contains(r'MD5=7314c2bc19c6608d511ef36e17a12c98', case=False) | Hashes.str.contains(r'MD5=24061b0958874c1cb2a5a8e9d25482d4', case=False) | Hashes.str.contains(r'MD5=31a4631d77b2357ac9618e2a60021f11', case=False) | Hashes.str.contains(r'MD5=130c5aec46bdec8d534df7222d160fdb', case=False) | Hashes.str.contains(r'MD5=592065b29131af32aa18a9e546be9617', case=False) | Hashes.str.contains(r'MD5=2d64d681d79e0d26650928259530c075', case=False) | Hashes.str.contains(r'MD5=1ce19950e23c975f677b80ff59d04fae', case=False) | Hashes.str.contains(r'MD5=318e309e11199ec69d8928c46a4d901b', case=False) | Hashes.str.contains(r'MD5=d78a29306f42d42cd48ad6bc6c6a7602', case=False) | Hashes.str.contains(r'MD5=6a094d8e4b00dd1d93eb494099e98478', case=False) | Hashes.str.contains(r'MD5=0be80db5d9368fdb29fe9d9bfdd02e7c', case=False) | Hashes.str.contains(r'MD5=ba23266992ad964eff6d358d946b76bd', case=False) | Hashes.str.contains(r'MD5=560069dc51d3cc7f9cf1f4e940f93cae', case=False) | Hashes.str.contains(r'MD5=a785b3bc4309d2eb111911c1b55e793f', case=False) | Hashes.str.contains(r'MD5=ac591a3b4df82a589edbb236263ec70a', case=False) | Hashes.str.contains(r'MD5=a664904f69756834049e9e272abb6fea', case=False) | Hashes.str.contains(r'MD5=19f32bf24b725f103f49dc3fa2f4f0bd', case=False) | Hashes.str.contains(r'MD5=2509a71a02296aa65a3428ddfac22180', case=False) | Hashes.str.contains(r'MD5=9988fc825675d4d3e2298537fc78e303', case=False) | Hashes.str.contains(r'MD5=dab9142dc12480bb39f25c9911df6c6c', case=False) | Hashes.str.contains(r'MD5=2c47725db0c5eb5c2ecc32ff208bceb6', case=False) | Hashes.str.contains(r'MD5=bdfe1f0346c066971e1f3d96f7fdaa2c', case=False) | Hashes.str.contains(r'MD5=7644bed8b74dc294ac77bf406df8ad77', case=False) | Hashes.str.contains(r'MD5=9ade14e58996a6abbfe2409d6cddba6a', case=False) | Hashes.str.contains(r'MD5=5212e0957468d3f94d90fa7a0f06b58f', case=False) | Hashes.str.contains(r'MD5=96e10a2904fff9491762a4fb549ad580', case=False) | Hashes.str.contains(r'MD5=0c55128c301921ce71991a6d546756ad', case=False) | Hashes.str.contains(r'MD5=97e90c869b5b0f493b833710931c39ed', case=False) | Hashes.str.contains(r'MD5=f36b8094c2fbf57f99870bfaeeacb25c', case=False) | Hashes.str.contains(r'MD5=b3d6378185356326fd8ee4329b0b7698', case=False) | Hashes.str.contains(r'MD5=9321a61a25c7961d9f36852ecaa86f55', case=False) | Hashes.str.contains(r'MD5=f758e7d53184faab5bc51f751937fa36', case=False) | Hashes.str.contains(r'MD5=1f7b2a00fe0c55d17d1b04c5e0507970', case=False) | Hashes.str.contains(r'MD5=239224202ccdea1f09813a70be8413ee', case=False) | Hashes.str.contains(r'MD5=996ded363410dfd38af50c76bd5b4fbc', case=False) | Hashes.str.contains(r'MD5=0fc2653b1c45f08ca0abd1eb7772e3c0', case=False) | Hashes.str.contains(r'MD5=79b8119b012352d255961e76605567d6', case=False) | Hashes.str.contains(r'MD5=2e1f8a2a80221deb93496a861693c565', case=False) | Hashes.str.contains(r'MD5=697bbd86ee1d386ae1e99759b1e38919', case=False) | Hashes.str.contains(r'MD5=ddc2ffe0ab3fcd48db898ab13c38d88d', case=False) | Hashes.str.contains(r'MD5=2971d4ee95f640d2818e38d8877c8984', case=False) | Hashes.str.contains(r'MD5=962a33a191dbe56915fd196e3a868cf0', case=False) | Hashes.str.contains(r'MD5=7575b35fee4ec8dbd0a61dbca3b972e3', case=False) | Hashes.str.contains(r'MD5=2d7f1c02b94d6f0f3e10107e5ea8e141', case=False) | Hashes.str.contains(r'MD5=057ec65bac5e786affeb97c0a0d1db15', case=False) | Hashes.str.contains(r'MD5=483abeee17e4e30a760ec8c0d6d31d6d', case=False) | Hashes.str.contains(r'MD5=f23b2adcfab58e33872e5c2d0041ad88', case=False) | Hashes.str.contains(r'MD5=2601cf769ad6ffee727997679693f774', case=False) | Hashes.str.contains(r'MD5=b4598c05d5440250633e25933fff42b0', case=False) | Hashes.str.contains(r'MD5=2e5f016ff9378be41fe98fa62f99b12d', case=False) | Hashes.str.contains(r'MD5=75d6c3469347de1cdfa3b1b9f1544208', case=False) | Hashes.str.contains(r'MD5=828bb9cb1dd449cd65a29b18ec46055f', case=False) | Hashes.str.contains(r'MD5=1bd38ac06ef8709ad23af666622609c9', case=False) | Hashes.str.contains(r'MD5=e747f164fc89566f934f9ec5627cd8c3', case=False) | Hashes.str.contains(r'MD5=a01c412699b6f21645b2885c2bae4454', case=False) | Hashes.str.contains(r'MD5=a216803d691d92acc44ac77d981aa767', case=False) | Hashes.str.contains(r'MD5=112b4a6d8c205c1287c66ad0009c3226', case=False) | Hashes.str.contains(r'MD5=68dde686d6999ad2e5d182b20403240b', case=False) | Hashes.str.contains(r'MD5=2d854c6772f0daa8d1fde4168d26c36b', case=False) | Hashes.str.contains(r'MD5=9a9dbf5107848c254381be67a4c1b1dd', case=False) | Hashes.str.contains(r'MD5=3ecd3ca61ffc54b0d93f8b19161b83da', case=False) | Hashes.str.contains(r'MD5=1ad400766530669d14a077514599e7f3', case=False) | Hashes.str.contains(r'MD5=4f27c09cc8680e06b04d6a9c34ca1e08', case=False) | Hashes.str.contains(r'MD5=eaea9ccb40c82af8f3867cd0f4dd5e9d', case=False) | Hashes.str.contains(r'MD5=043d5a1fc66662a3f91b8a9c027f9be9', case=False) | Hashes.str.contains(r'MD5=a0e2223868b6133c5712ba5ed20c3e8a', case=False) | Hashes.str.contains(r'MD5=2b3e0db4f00d4b3d0b4d178234b02e72', case=False) | Hashes.str.contains(r'MD5=1610342659cb8eb4a0361dbc047a2221', case=False) | Hashes.str.contains(r'MD5=c842827d4704a5ef53a809463254e1cc', case=False) | Hashes.str.contains(r'MD5=bf2a954160cb155df0df433929e9102b', case=False) | Hashes.str.contains(r'MD5=81b72492d45982cd7a4a138676329fd6', case=False) | Hashes.str.contains(r'MD5=2a2867e1f323320fdeef40c1da578a9a', case=False) | Hashes.str.contains(r'MD5=b3f132ce34207b7be899f4978276b66d', case=False) | Hashes.str.contains(r'MD5=3247014ba35d406475311a2eab0c4657', case=False) | Hashes.str.contains(r'MD5=88d5fc86f0dd3a8b42463f8d5503a570', case=False) | Hashes.str.contains(r'MD5=0be5c6476dd58072c93af4fca62ee4b3', case=False) | Hashes.str.contains(r'MD5=3cf7a55ec897cc938aebb8161cb8e74f', case=False) | Hashes.str.contains(r'MD5=931d4f01b5a88027ef86437f1b862000', case=False) | Hashes.str.contains(r'MD5=d253c19194a18030296ae62a10821640', case=False) | Hashes.str.contains(r'MD5=c5f5d109f11aadebae94c77b27cb026f', case=False) | Hashes.str.contains(r'MD5=15dd3ef7df34f9b464e9b38c2deb0793', case=False) | Hashes.str.contains(r'MD5=e913a51f66e380837ffe8da6707d4cc4', case=False) | Hashes.str.contains(r'MD5=c552dae8eaadd708a38704e8d62cf64d', case=False) | Hashes.str.contains(r'MD5=1f8a9619ab644728ce4cf86f3ad879ea', case=False) | Hashes.str.contains(r'MD5=f7edd110de10f9a50c2922f1450819aa', case=False) | Hashes.str.contains(r'MD5=be17a598e0f5314748ade0871ad343e7', case=False) | Hashes.str.contains(r'MD5=aa1ed3917928f04d97d8a217fe9b5cb1', case=False) | Hashes.str.contains(r'MD5=880686bceaf66bfde3c80569eb1ebfa7', case=False) | Hashes.str.contains(r'MD5=bc1eeb4993a601e6f7776233028ac095', case=False) | Hashes.str.contains(r'MD5=9ab9f3b75a2eb87fafb1b7361be9dfb3', case=False) | Hashes.str.contains(r'MD5=3a1ba5cd653a9ddce30c58e7c8ae28ae', case=False) | Hashes.str.contains(r'MD5=5054083cf29649a76c94658ba7ff5bce', case=False) | Hashes.str.contains(r'MD5=dedd07993780d973c22c93e77ab69fa3', case=False) | Hashes.str.contains(r'MD5=3aacaa62758fa6d178043d78ba89bebc', case=False) | Hashes.str.contains(r'MD5=f1a203406a680cc7e4017844b129dcbf', case=False) | Hashes.str.contains(r'MD5=2399e6f7f868d05623be03a616b4811e', case=False) | Hashes.str.contains(r'MD5=0d5774527af6e30905317839686b449d', case=False) | Hashes.str.contains(r'MD5=5bbe4e52bd33f1cdd4cf38c7c65f80ae', case=False) | Hashes.str.contains(r'MD5=047c06d4d38ea443c9af23a501c4480d', case=False) | Hashes.str.contains(r'MD5=a72e10ecea2fdeb8b9d4f45d0294086b', case=False) | Hashes.str.contains(r'MD5=c9c25778efe890baa4087e32937016a0', case=False) | Hashes.str.contains(r'MD5=0ba6afe0ea182236f98365bd977adfdf', case=False) | Hashes.str.contains(r'MD5=e626956c883c7ff3aeb0414570135a58', case=False) | Hashes.str.contains(r'MD5=3e796eb95aca7e620d6a0c2118d6871b', case=False) | Hashes.str.contains(r'MD5=f3f5c518bc3715492cb0b7c59e94c357', case=False) | Hashes.str.contains(r'MD5=4e92f1c677e08fd09b57032c5b47ca46', case=False) | Hashes.str.contains(r'MD5=f22740ba54a400fd2be7690bb204aa08', case=False) | Hashes.str.contains(r'MD5=3467b0d996251dc56a72fc51a536dd6b', case=False) | Hashes.str.contains(r'MD5=198b723e13a270bb664dcb9fb6ed42e6', case=False) | Hashes.str.contains(r'MD5=bdc3b6b83dde7111d5d6b9a2aadf233f', case=False) | Hashes.str.contains(r'MD5=3651a6990fe38711ebb285143f867a43', case=False) | Hashes.str.contains(r'MD5=7db75077d53a63531ef2742d98ca6acc', case=False) | Hashes.str.contains(r'MD5=55c36d43dd930069148008902f431ea5', case=False) | Hashes.str.contains(r'MD5=f026460a7a720d0b8394f28a1f9203dc', case=False) | Hashes.str.contains(r'MD5=cb22776d06f1e81cc87faeb0245acde8', case=False) | Hashes.str.contains(r'MD5=b994110f069d197222508a724d8afdac', case=False) | Hashes.str.contains(r'MD5=e6eaee1b3e41f404c289e22df66ef66b', case=False) | Hashes.str.contains(r'MD5=29872c7376c42e2a64fa838dad98aa11', case=False) | Hashes.str.contains(r'MD5=d21fba3d09e5b060bd08796916166218', case=False) | Hashes.str.contains(r'MD5=880611326b768c4922e9da8a8effc582', case=False) | Hashes.str.contains(r'MD5=9c3c250646e11052b1e38500ee0e467b', case=False) | Hashes.str.contains(r'MD5=178cc9403816c082d22a1d47fa1f9c85', case=False) | Hashes.str.contains(r'MD5=2c1045bb133b7c9f5115e7f2b20c267a', case=False) | Hashes.str.contains(r'MD5=707ab1170389eba44ffd4cfad01b5969', case=False) | Hashes.str.contains(r'MD5=ddf2655068467d981242ea96e3b88614', case=False) | Hashes.str.contains(r'MD5=7907e14f9bcf3a4689c9a74a1a873cb6', case=False) | Hashes.str.contains(r'MD5=b3424a229d845a88340045c29327c529', case=False) | Hashes.str.contains(r'MD5=0b0447072ada1636a14087574a512c82', case=False) | Hashes.str.contains(r'MD5=0be4a11bc261f3cd8b4dbfebee88c209', case=False) | Hashes.str.contains(r'MD5=7dd538bcaa98d6c063ead8606066333f', case=False) | Hashes.str.contains(r'MD5=8a108158431e9a7d08e330fd7a46d175', case=False) | Hashes.str.contains(r'MD5=e6ea0e8d2edcc6cad3c414a889d17ac4', case=False) | Hashes.str.contains(r'MD5=288471f132c7249f598032d03575f083', case=False) | Hashes.str.contains(r'MD5=11fb599312cb1cf43ca5e879ed6fb71e', case=False) | Hashes.str.contains(r'MD5=2348508499406dec3b508f349949cb51', case=False) | Hashes.str.contains(r'MD5=fe820a5f99b092c3660762c6fc6c64e0', case=False) | Hashes.str.contains(r'MD5=c508d28487121828c3a1c2b57acb05be', case=False) | Hashes.str.contains(r'MD5=91755cc5c3ccf97313dc2bece813b4d9', case=False) | Hashes.str.contains(r'MD5=2f8653034a35526df88ea0c62b035a42', case=False) | Hashes.str.contains(r'MD5=3dbf69f935ea48571ea6b0f5a2878896', case=False) | Hashes.str.contains(r'MD5=7e3a6f880486a4782b896e6dbd9cc26f', case=False) | Hashes.str.contains(r'MD5=2850608430dd089f24386f3336c84729', case=False) | Hashes.str.contains(r'MD5=a711e6ab17802fabf2e69e0cd57c54cd', case=False) | Hashes.str.contains(r'MD5=2eec12c17d6b8deeeac485f47131d150', case=False) | Hashes.str.contains(r'MD5=e7ab83a655b0cd934a19d94ac81e4eec', case=False) | Hashes.str.contains(r'MD5=a91a1bc393971a662a3210dac8c17dfd', case=False) | Hashes.str.contains(r'MD5=2fed983ec44d1e7cffb0d516407746f2', case=False) | Hashes.str.contains(r'MD5=18439fe2aaeddfd355ef88091cb6c15f', case=False) | Hashes.str.contains(r'MD5=592756f68ab8ae590662b0c4212a3bb9', case=False) | Hashes.str.contains(r'MD5=d63c9c1a427a134461258b7b8742858f', case=False) | Hashes.str.contains(r'MD5=6e25148bb384469f3d5386dc5217548a', case=False) | Hashes.str.contains(r'MD5=700d6a0331befd4ed9cfbb3234b335e7', case=False) | Hashes.str.contains(r'MD5=e68972cd9f28f0be0f9df7207aba9d1d', case=False) | Hashes.str.contains(r'MD5=b2a9ac0600b12ec9819e049d7a6a0b75', case=False) | Hashes.str.contains(r'MD5=c796a92a66ec725b7b7febbdc13dc69b', case=False) | Hashes.str.contains(r'MD5=5b6c21e8366220f7511e6904ffeeced9', case=False) | Hashes.str.contains(r'MD5=8741e6df191c805028b92cec44b1ba88', case=False) | Hashes.str.contains(r'MD5=b47dee29b5e6e1939567a926c7a3e6a4', case=False) | Hashes.str.contains(r'MD5=dff6c75c9754a6be61a47a273364cdf7', case=False) | Hashes.str.contains(r'MD5=d86269ba823c9ecf49a145540cd0b3df', case=False) | Hashes.str.contains(r'MD5=3c55092900343d3d28564e2d34e7be2c', case=False) | Hashes.str.contains(r'MD5=fef9dd9ea587f8886ade43c1befbdafe', case=False) | Hashes.str.contains(r'MD5=96c5900331bd17344f338d006888bae5', case=False) | Hashes.str.contains(r'MD5=7e7e3f5532b6af24dcc252ac4b240311', case=False) | Hashes.str.contains(r'MD5=c6f8983dd3d75640c072a8459b8fa55a', case=False) | Hashes.str.contains(r'MD5=1caf5070493459ba029d988dbb2c7422', case=False) | Hashes.str.contains(r'MD5=2b653950483196f0d175ba6bc35f1125', case=False) | Hashes.str.contains(r'MD5=15814b675e9d08953f2c64e4e5ccb4f4', case=False) | Hashes.str.contains(r'MD5=de4001f89ed139d1ed6ae5586d48997a', case=False) | Hashes.str.contains(r'MD5=dc943bf367ae77016ae399df8e71d38a', case=False) | Hashes.str.contains(r'MD5=524cd77f4c100cf20af4004f740b0268', case=False) | Hashes.str.contains(r'MD5=e5f8fcdfb52155ed4dffd8a205b3d091', case=False) | Hashes.str.contains(r'MD5=925ee3f3227c3b63e141ba16bd83f024', case=False) | Hashes.str.contains(r'MD5=fbf729350ca08a7673b115ce9c9eb7e5', case=False) | Hashes.str.contains(r'MD5=eb0a8eeb444033ebf9b4b304f114f2c8', case=False) | Hashes.str.contains(r'MD5=c7a57cd4bea07dadba2e2fb914379910', case=False) | Hashes.str.contains(r'MD5=384370c812acb7181f972d57dc77c324', case=False) | Hashes.str.contains(r'MD5=d43dcba796b40234267ad2862fa52600', case=False) | Hashes.str.contains(r'MD5=b0954711c133d284a171dd560c8f492a', case=False) | Hashes.str.contains(r'MD5=262969a3fab32b9e17e63e2d17a57744', case=False) | Hashes.str.contains(r'MD5=05a6f843c43d75fbce8e885bb8656aa4', case=False) | Hashes.str.contains(r'MD5=992ded5b623be3c228f32edb4ca3f2d2', case=False) | Hashes.str.contains(r'MD5=13a0d3f9d5f39adaca0a8d3bb327eb31', case=False) | Hashes.str.contains(r'MD5=f5051c756035ef5de9c4c48bacb0612b', case=False) | Hashes.str.contains(r'MD5=1276f735d22cf04676a719edc6b0df18', case=False) | Hashes.str.contains(r'MD5=d4a299c595d35264b5cfd12490a138dc', case=False) | Hashes.str.contains(r'MD5=f4e1997192d5a95a38965c9e15c687fc', case=False) | Hashes.str.contains(r'MD5=05369fa594a033e48b7921018b3263fb', case=False) | Hashes.str.contains(r'MD5=ed07f1a8038596574184e09211dfc30f', case=False) | Hashes.str.contains(r'MD5=e1ebc6c5257a277115a7e61ee3e5e42f', case=False) | Hashes.str.contains(r'MD5=821adf5ba68fd8cc7f4f1bc915fe47de', case=False) | Hashes.str.contains(r'MD5=b12d1630fd50b2a21fd91e45d522ba3a', case=False) | Hashes.str.contains(r'MD5=729dd4df669dc96e74f4180c6ee2a64b', case=False) | Hashes.str.contains(r'MD5=c6b5a3ae07b165a6e5fff7e31ff91016', case=False) | Hashes.str.contains(r'MD5=e36f6f7401ae11e11f69d744703914db', case=False) | Hashes.str.contains(r'MD5=9ba7c30177d2897bb3f7b3dc2f95ae0a', case=False) | Hashes.str.contains(r'MD5=b5326548762bfaae7a42d5b0898dfeac', case=False) | Hashes.str.contains(r'MD5=f2f728d2f69765f5dfda913d407783d2', case=False) | Hashes.str.contains(r'MD5=637cf50b06bc53deae846b252d56bbdc', case=False) | Hashes.str.contains(r'MD5=c37b575c3a96b9788c26cefcf43f3542', case=False) | Hashes.str.contains(r'MD5=e4266262a77fffdea2584283f6c4f51d', case=False) | Hashes.str.contains(r'MD5=054299e09cea38df2b84e6b29348b418', case=False) | Hashes.str.contains(r'MD5=4cc3ddd5ae268d9a154a426af2c23ef9', case=False) | Hashes.str.contains(r'MD5=d717f8de642b65f029829c34fbd13a45', case=False) | Hashes.str.contains(r'MD5=e79c91c27df3eaf82fb7bd1280172517', case=False) | Hashes.str.contains(r'MD5=fd7de498a72b2daf89f321d23948c3c4', case=False) | Hashes.str.contains(r'MD5=6682176866d6bd6b4ea3c8e398bd3aae', case=False) | Hashes.str.contains(r'MD5=eb525d99a31eb4fff09814e83593a494', case=False) | Hashes.str.contains(r'MD5=e323413de3caec7f7730b43c551f26a0', case=False) | Hashes.str.contains(r'MD5=353e5d424668d785f13c904fde3bac84', case=False) | Hashes.str.contains(r'MD5=3b9698a9ee85f0b4edf150deef790ccd', case=False) | Hashes.str.contains(r'MD5=3f8cdaf7413000d34d6a1a1d5341a11b', case=False) | Hashes.str.contains(r'MD5=dcd966874b4c8c952662d2d16ddb4d7c', case=False) | Hashes.str.contains(r'MD5=3fda3d414c31ad73efd8ccceeaa3bdc2', case=False) | Hashes.str.contains(r'MD5=ca6931fcbc1492d7283aa9dc0149032e', case=False) | Hashes.str.contains(r'MD5=084bd27e151fef55b5d80025c3114d35', case=False) | Hashes.str.contains(r'MD5=7c887f2b1a56b84d86828529604957db', case=False) | Hashes.str.contains(r'MD5=c24800c382b38707e556af957e9e94fd', case=False) | Hashes.str.contains(r'MD5=f84da507b3067f019c340b737cd68d32', case=False) | Hashes.str.contains(r'MD5=d3026938514218766cb6d3b36ccfa322', case=False) | Hashes.str.contains(r'MD5=6917ef5d483ed30be14f8085eaef521b', case=False) | Hashes.str.contains(r'MD5=945ef111161bae49075107e5bc11a23f', case=False) | Hashes.str.contains(r'MD5=44a3b9cc0a8e89c11544932b295ea113', case=False) | Hashes.str.contains(r'MD5=6cc3c3be2de12310a35a6ab2aed141d6', case=False) | Hashes.str.contains(r'MD5=085d3423f3c12a17119920f1a293ab4d', case=False) | Hashes.str.contains(r'MD5=547971da89a47b6ad6459cd7d7854e12', case=False) | Hashes.str.contains(r'MD5=aa5dd4beca6f67733e04d9d050ecd523', case=False) | Hashes.str.contains(r'MD5=903c149851e9929ec45daefc544fcd99', case=False) | Hashes.str.contains(r'MD5=ba5f0f6347780c2ed911bbf888e75bef', case=False) | Hashes.str.contains(r'MD5=1873a2ce2df273d409c47094bc269285', case=False) | Hashes.str.contains(r'MD5=97e3a44ec4ae58c8cc38eefc613e950e', case=False) | Hashes.str.contains(r'MD5=1cb26adeca26aefb5a61065e990402da', case=False) | Hashes.str.contains(r'MD5=17fe96af33f1fe475957689aeb5f816e', case=False) | Hashes.str.contains(r'MD5=c5b8e612360277ac70aa328432a99fd6', case=False) | Hashes.str.contains(r'MD5=62f8d7f884366df6100c7e892e3d70bf', case=False) | Hashes.str.contains(r'MD5=a5deee418b7b580ca89db8a871dc1645', case=False) | Hashes.str.contains(r'MD5=5f44a01ccc530b34051b9d0ccb5bb842', case=False) | Hashes.str.contains(r'MD5=25ede0fd525a30d31998ea62876961ec', case=False) | Hashes.str.contains(r'MD5=1c61eb82f1269d8d6be8de2411133811', case=False) | Hashes.str.contains(r'MD5=338a98e1c27bc76f09331fcd7ae413a5', case=False) | Hashes.str.contains(r'MD5=f66b96aa7ae430b56289409241645099', case=False) | Hashes.str.contains(r'MD5=8ea94766cd7890483449dc193d267993', case=False) | Hashes.str.contains(r'MD5=75fa19142531cbf490770c2988a7db64', case=False) | Hashes.str.contains(r'MD5=ee3b74cdfed959782dff84153e3d5a6e', case=False) | Hashes.str.contains(r'MD5=fdf975524d4cdb4f127d79aac571ae9e', case=False) | Hashes.str.contains(r'MD5=688a10e87af9bcf0e40277d927923a00', case=False) | Hashes.str.contains(r'MD5=62792c30836ae7861c3ca2409cd35c02', case=False) | Hashes.str.contains(r'MD5=b62e2371158a082e239f5883bd6000d1', case=False) | Hashes.str.contains(r'MD5=1f01257d9730f805b2a1d69099ef891d', case=False) | Hashes.str.contains(r'MD5=b934322c68c30dceca96c0274a51f7b0', case=False) | Hashes.str.contains(r'MD5=76355d5eafdfa3e9b7580b9153de1f30', case=False) | Hashes.str.contains(r'MD5=9fdcd543574a712a80d62da8bfd8331c', case=False) | Hashes.str.contains(r'MD5=1440c0da81c700bd61142bc569477d81', case=False) | Hashes.str.contains(r'MD5=4c76554d9a72653c6156ca0024d21a8e', case=False) | Hashes.str.contains(r'MD5=148bd10da8c8d64928a213c7bf1f2fca', case=False) | Hashes.str.contains(r'MD5=95e4c7b0384da89dce8ea6f31c3613d9', case=False) | Hashes.str.contains(r'MD5=e6cb1728c50bd020e531d19a14904e1c', case=False) | Hashes.str.contains(r'MD5=62f02339fe267dc7438f603bfb5431a1', case=False) | Hashes.str.contains(r'MD5=0a4e6bd5cc2e9172e461408be47c3149', case=False) | Hashes.str.contains(r'MD5=28cb0b64134ad62c2acf77db8501a619', case=False) | Hashes.str.contains(r'MD5=4ecfb46fcdce95623f994bd29bbe59cb', case=False) | Hashes.str.contains(r'MD5=7ee0c884e7d282958c5b3a9e47f23e13', case=False) | Hashes.str.contains(r'MD5=dbc415304403be25ac83047c170b0ec2', case=False) | Hashes.str.contains(r'MD5=0c7f66cd219817eaab41f36d4bc0d4cd', case=False) | Hashes.str.contains(r'MD5=3c9c537167923723429c86ab38743e7d', case=False) | Hashes.str.contains(r'MD5=a57b47489febc552515778dd0fd1e51c', case=False) | Hashes.str.contains(r'MD5=680dcb5c39c1ec40ac3897bb3e9f27b9', case=False) | Hashes.str.contains(r'MD5=5f9785e7535f8f602cb294a54962c9e7', case=False) | Hashes.str.contains(r'MD5=e4ea7ebfa142d20a92fbe468a77eafa6', case=False) | Hashes.str.contains(r'MD5=32365e3e64d28cc94756ac9a09b67f06', case=False) | Hashes.str.contains(r'MD5=be9eeea2a8cac5f6cd92c97f234e2fe1', case=False) | Hashes.str.contains(r'MD5=5bd30b502168013c9ea03a5c2f1c9776', case=False) | Hashes.str.contains(r'MD5=ba21bfa3d05661ba216873a9ef66a6e2', case=False) | Hashes.str.contains(r'MD5=dad8f40626ed4702e0e8502562d93d7c', case=False) | Hashes.str.contains(r'MD5=8fbb1ffc6f13f9d5ee8480b36baffc52', case=False) | Hashes.str.contains(r'MD5=bedc99bbcedaf89e2ee1aa574c5a2fa4', case=False) | Hashes.str.contains(r'MD5=9dd414590e695ea208139c23db8a5aa3', case=False) | Hashes.str.contains(r'MD5=270052c61f4de95ebfbf3a49fb39235f', case=False) | Hashes.str.contains(r'MD5=19c0c18384d6a6d65462be891692df9c', case=False) | Hashes.str.contains(r'MD5=a26e600652c33dd054731b4693bf5b01', case=False) | Hashes.str.contains(r'MD5=8b779fe1d71839ad361226f66f1b3fe5', case=False) | Hashes.str.contains(r'MD5=8ad9dfc971df71cd43788ade6acf8e7d', case=False) | Hashes.str.contains(r'MD5=2dbc09c853c4bf2e058d29aaa21fa803', case=False) | Hashes.str.contains(r'MD5=13ee349c15ee5d6cf640b3d0111ffc0e', case=False) | Hashes.str.contains(r'MD5=fef60a37301e1f5a3020fa3487fb2cd7', case=False) | Hashes.str.contains(r'MD5=4353b713487a2945b823423bbbf709bd', case=False) | Hashes.str.contains(r'MD5=875c44411674b75feb07592aeffa09c1', case=False) | Hashes.str.contains(r'MD5=b971b79bdca77e8755e615909a1c7a9f', case=False) | Hashes.str.contains(r'MD5=ad03f225247b58a57584b40a4d1746d3', case=False) | Hashes.str.contains(r'MD5=2229d5a9a92b62df4df9cf51f48436f7', case=False) | Hashes.str.contains(r'MD5=5bb840db439eb281927588dbce5f5418', case=False) | Hashes.str.contains(r'MD5=fd80c3d38669b302de4b4b736941c0d1', case=False) | Hashes.str.contains(r'MD5=d1440503d1528c55fdc569678a663667', case=False) | Hashes.str.contains(r'MD5=d1e57c74bafa56e8e2641290d153f4d2', case=False) | Hashes.str.contains(r'MD5=c9b046a6961957cc6c93a5192d3e61e3', case=False) | Hashes.str.contains(r'MD5=ff795e4f387c3e22291083b7d6b92ffb', case=False) | Hashes.str.contains(r'MD5=782f165b1d2db23f78e82fee0127cc14', case=False) | Hashes.str.contains(r'MD5=002a58b90a589913a07012253662c98c', case=False) | Hashes.str.contains(r'MD5=0211ab46b73a2623b86c1cfcb30579ab', case=False) | Hashes.str.contains(r'MD5=d0a5b98788e480c12afc65ad3e6d4478', case=False) | Hashes.str.contains(r'MD5=d6cc5709aca6a6b868962a6506d48abc', case=False) | Hashes.str.contains(r'MD5=08001b0cdb0946433366032827d7a187', case=False) | Hashes.str.contains(r'MD5=8fc6cafd4e63a3271edf6a1897a892ae', case=False) | Hashes.str.contains(r'MD5=0e207ef80361b3d047a2358d0e2206b4', case=False) | Hashes.str.contains(r'MD5=b10b210c5944965d0dc85e70a0b19a42', case=False) | Hashes.str.contains(r'MD5=006d9d615cdcc105f642ab599b66f94e', case=False) | Hashes.str.contains(r'MD5=b32497762d916dba6c827e31205b67dd', case=False) | Hashes.str.contains(r'MD5=f766a9bb7cd46ba8c871484058f908f0', case=False) | Hashes.str.contains(r'MD5=546db985012d988e4482acfae4a935a8', case=False) | Hashes.str.contains(r'MD5=700e9902b0a28979724582f116288bad', case=False) | Hashes.str.contains(r'MD5=0395b4e0eb21693590ad1cfdf7044b8b', case=False) | Hashes.str.contains(r'MD5=d95c9a241e52b4f967fa4cdb7b99fc80', case=False) | Hashes.str.contains(r'MD5=ee91da973bebe6442527b3d1abcc3c80', case=False) | Hashes.str.contains(r'MD5=1a234f4643f5658bab07bfa611282267', case=False) | Hashes.str.contains(r'MD5=1898ceda3247213c084f43637ef163b3', case=False) | Hashes.str.contains(r'MD5=1b5c3c458e31bede55145d0644e88d75', case=False) | Hashes.str.contains(r'MD5=42132c7a755064f94314b01afb80e73c', case=False) | Hashes.str.contains(r'MD5=1b76363059fef4f7da752eb0dfb0c1e1', case=False) | Hashes.str.contains(r'MD5=cc8855fe30a9cdef895177a4cf1a3dad', case=False) | Hashes.str.contains(r'MD5=6d4159694e1754f262e326b52a3b305a', case=False) | Hashes.str.contains(r'MD5=b7ca4c32c844df9b61634052ae276387', case=False) | Hashes.str.contains(r'MD5=361a598d8bb92c13b18abb7cac850b01', case=False) | Hashes.str.contains(r'MD5=27bcbeec8a466178a6057b64bef66512', case=False) | Hashes.str.contains(r'MD5=f310b453ac562f2c53d30aa6e35506bb', case=False) | Hashes.str.contains(r'MD5=14add4f16d80595e6e816abf038141e5', case=False) | Hashes.str.contains(r'MD5=ab53d07f18a9697139ddc825b466f696', case=False) | Hashes.str.contains(r'MD5=278761b706276f9b49e1e2fd21b9cb07', case=False) | Hashes.str.contains(r'MD5=60e84516c6ec6dfdae7b422d1f7cab06', case=False) | Hashes.str.contains(r'MD5=20afd54ca260e2bf6589fac72935fecf', case=False) | Hashes.str.contains(r'MD5=3ad7b36a584504b3c70b5f552ba33015', case=False) | Hashes.str.contains(r'MD5=9f3b5de6fe46429bed794813c6ae8421', case=False) | Hashes.str.contains(r'MD5=7b9717c608a5f5a1c816128a609e9575', case=False) | Hashes.str.contains(r'MD5=798de15f187c1f013095bbbeb6fb6197', case=False) | Hashes.str.contains(r'MD5=66066d9852bc65988fb4777f0ff3fbb4', case=False) | Hashes.str.contains(r'MD5=13dda15ef67eb265869fc371c72d6ef0', case=False) | Hashes.str.contains(r'MD5=63e333d64a8716e1ae59f914cb686ae8', case=False) | Hashes.str.contains(r'MD5=3411fdf098aa20193eee5ffa36ba43b2', case=False) | Hashes.str.contains(r'MD5=ad6d5177656dfc5b43def5d13d32f9f6', case=False) | Hashes.str.contains(r'MD5=97221e16e7a99a00592ca278c49ffbfc', case=False) | Hashes.str.contains(r'MD5=010c0e5ac584e3ab97a2daf84cf436f5', case=False) | Hashes.str.contains(r'MD5=29b1ddc69e89b160cc3722e5e0738fd8', case=False) | Hashes.str.contains(r'MD5=aad4fb47cb39a9ab4159662a29e1ee88', case=False) | Hashes.str.contains(r'MD5=4e093256b034925ecd6b29473ff16858', case=False) | Hashes.str.contains(r'MD5=51c233297c3aa16c4222e35ded1139b6', case=False) | Hashes.str.contains(r'MD5=9945823e9846724c70d2f8d66a403300', case=False) | Hashes.str.contains(r'MD5=aa2ef08d48b66bd814280976614468a7', case=False) | Hashes.str.contains(r'MD5=33fc573c0e8bedfe3614e17219273429', case=False) | Hashes.str.contains(r'MD5=c08063f052308b6f5882482615387f30', case=False) | Hashes.str.contains(r'MD5=c8c6fadcb7cb85f197ab77e6a7b67aa9', case=False) | Hashes.str.contains(r'MD5=3f29f651a3c4ff5ce16d61deccf46618', case=False) | Hashes.str.contains(r'MD5=08c1bce6627764c9f8c79439555c5636', case=False) | Hashes.str.contains(r'MD5=1da1cfe6aa15325c9ecf8f8c9b2cd12d', case=False) | Hashes.str.contains(r'MD5=c1d063c9422a19944cdaa6714623f2ec', case=False) | Hashes.str.contains(r'MD5=b0809d8adc254c52f9d06362489ce474', case=False) | Hashes.str.contains(r'MD5=a22626febc924eb219a953f1ee2b9600', case=False) | Hashes.str.contains(r'MD5=5a615f4641287e5e88968f5455627d45', case=False) | Hashes.str.contains(r'MD5=de2aac9468158c73880e31509924d7e0', case=False) | Hashes.str.contains(r'MD5=dd38cc344d2a0da1c03e92eb4b89a193', case=False) | Hashes.str.contains(r'MD5=c1fce7aac4e9dd7a730997e2979fa1e2', case=False) | Hashes.str.contains(r'MD5=0634299fc837b47b531e4762d946b2ae', case=False) | Hashes.str.contains(r'MD5=e4ff4edce076f21f5f8d082a62c9db8b', case=False) | Hashes.str.contains(r'MD5=43ed1d08c19626688db34f63e55114fb', case=False) | Hashes.str.contains(r'MD5=6c28461e78f8d908ca9a66bad2e212f7', case=False) | Hashes.str.contains(r'MD5=8aa9d47ec9a0713c56b6dec3d601d105', case=False) | Hashes.str.contains(r'MD5=c9390a8f3ca511c1306a039ca5d80997', case=False) | Hashes.str.contains(r'MD5=c60a4bc4fec820d88113afb1da6e4db3', case=False) | Hashes.str.contains(r'MD5=6b3abe55c4d39e305a11b4d1091dfaac', case=False) | Hashes.str.contains(r'MD5=f4a31e08f89e5f002ef3cf7b1224af5f', case=False) | Hashes.str.contains(r'MD5=d7cf689e6c63d37bc071499f687300dd', case=False) | Hashes.str.contains(r'MD5=7c0b186d1912686cfcb8cd9cdebabe58', case=False) | Hashes.str.contains(r'MD5=8cb2ffb8bb0bbf8cd0dd685611854637', case=False) | Hashes.str.contains(r'MD5=9b359b722ac80c4e0a5235264e1e0156', case=False) | Hashes.str.contains(r'MD5=09927915aba84c8acd91efdaac674b86', case=False) | Hashes.str.contains(r'MD5=e4b50e44d1f12a47e18259b41074f126', case=False) | Hashes.str.contains(r'MD5=0ec361f2fba49c73260af351c39ff9cb', case=False) | Hashes.str.contains(r'MD5=65ad6a7c43f8d566afd5676f9447b6c1', case=False) | Hashes.str.contains(r'MD5=ddb7da975d90b2a9c9c58e1af55f0285', case=False) | Hashes.str.contains(r'MD5=8291dcbcbccc2ce28195d04ac616a1b5', case=False) | Hashes.str.contains(r'MD5=2da269863ed99be7b6b8ec2adc710648', case=False) | Hashes.str.contains(r'MD5=2ab9f5a66d75adb01171bb04ab4380f2', case=False) | Hashes.str.contains(r'MD5=3a7c69293fcd5688cc398691093ec06a', case=False) | Hashes.str.contains(r'MD5=13a2b915f6d93e52505656773d53096f', case=False) | Hashes.str.contains(r'MD5=7bd840ff7f15df79a9a71fec7db1243e', case=False) | Hashes.str.contains(r'MD5=0a6a1c9a7f80a2a5dcced5c4c0473765', case=False) | Hashes.str.contains(r'MD5=a1547e8b2ca0516d0d9191a55b8536c0', case=False) | Hashes.str.contains(r'MD5=e04ff937f6fd273b774f23aed5dd8c13', case=False) | Hashes.str.contains(r'MD5=fac8eb49e2fd541b81fcbdeb98a199cb', case=False) | Hashes.str.contains(r'MD5=cb31f1b637056a3d374e22865c41e6d9', case=False) | Hashes.str.contains(r'MD5=c69c292e0b76b25a5fa0e16136770e11', case=False) | Hashes.str.contains(r'MD5=cebf532d1e3c109418687cb9207516ad', case=False) | Hashes.str.contains(r'MD5=eeb8e039f6d942538eb4b0252117899a', case=False) | Hashes.str.contains(r'MD5=4d99d02f49e027332a0a9c31c674e13b', case=False) | Hashes.str.contains(r'MD5=e9a30edef1105b8a64218f892b2e56ed', case=False) | Hashes.str.contains(r'MD5=dd04cd3de0c19bede84e9c95a86b3ca8', case=False) | Hashes.str.contains(r'MD5=70196d88c03f2ea557281b24dad85de5', case=False) | Hashes.str.contains(r'MD5=708ac9f7b12b6ca4553fd8d0c7299296', case=False) | Hashes.str.contains(r'MD5=cafbf85b902f189ba35f3d7823aad195', case=False) | Hashes.str.contains(r'MD5=d48f681f70e19d2fa521df63bc72ab9e', case=False) | Hashes.str.contains(r'MD5=6ae9d25e02b54367a4e93c2492b8b02e', case=False) | Hashes.str.contains(r'MD5=f14359ceb3705d77353b244bb795b552', case=False) | Hashes.str.contains(r'MD5=0d992b69029d1f23a872ff5a3352fb5b', case=False) | Hashes.str.contains(r'MD5=9993a2a45c745bb0139bf3e8decd626c', case=False) | Hashes.str.contains(r'MD5=6d67da13cf84f15f6797ed929dd8cf5d', case=False) | Hashes.str.contains(r'MD5=c2eb4539a4f6ab6edd01bdc191619975', case=False) | Hashes.str.contains(r'MD5=349fa788a4a7b57e37e426aca9b736d5', case=False) | Hashes.str.contains(r'MD5=4c016fd76ed5c05e84ca8cab77993961', case=False) | Hashes.str.contains(r'MD5=ea14899d1bfba397bc731770765768d1', case=False) | Hashes.str.contains(r'MD5=4ec08e0bcdf3e880e7f5a7d78a73440c', case=False) | Hashes.str.contains(r'MD5=e65fa439efa9e5ad1d2c9aee40c7238e', case=False) | Hashes.str.contains(r'MD5=0898af0888d8f7a9544ef56e5e16354e', case=False) | Hashes.str.contains(r'MD5=10e681ce84afdd642e59ddfdb28284e9', case=False) | Hashes.str.contains(r'MD5=b5f96dd5cc7d14a9860ab99d161bf171', case=False) | Hashes.str.contains(r'MD5=37c3a9fef349d13685ec9c2acaaeafce', case=False) | Hashes.str.contains(r'MD5=027e10a5048b135862d638b9085d1402', case=False) | Hashes.str.contains(r'MD5=b0baac4d6cbac384a633c71858b35a2e', case=False) | Hashes.str.contains(r'MD5=d0a5f9ace1f0c459cef714156db1de02', case=False) | Hashes.str.contains(r'MD5=b34361d151c793415ef92ee5d368c053', case=False) | Hashes.str.contains(r'MD5=f0fdfdf3303e2f7c141aa3a24d523af1', case=False) | Hashes.str.contains(r'MD5=d424f369f7e010249619f0ecbe5f3805', case=False) | Hashes.str.contains(r'MD5=639252292bb40b3f10f8a6842aee3cd4', case=False) | Hashes.str.contains(r'MD5=7e6e2ed880c7ab115fca68136051f9ce', case=False) | Hashes.str.contains(r'MD5=f8dce1eb0f9fcaf07f68fe290aa629e4', case=False) | Hashes.str.contains(r'MD5=fa222bed731713904320723b9c085b11', case=False) | Hashes.str.contains(r'MD5=aa69b4255e786d968adbd75ba5cf3e93', case=False) | Hashes.str.contains(r'MD5=06ffbb2cbf5ac9ef95773b4f5c4c896a', case=False) | Hashes.str.contains(r'MD5=00685003005b0b437af929f0499545e4', case=False) | Hashes.str.contains(r'MD5=85e606523ce390f7fcd8370d5f4b812a', case=False) | Hashes.str.contains(r'MD5=23cf3da010497eb2bf39a5c5a57e437c', case=False) | Hashes.str.contains(r'MD5=dc9be271f403e2278071d6ece408ff28', case=False) | Hashes.str.contains(r'MD5=6b16512bffe88146a7915f749bd81641', case=False) | Hashes.str.contains(r'MD5=c2585e2696e21e25c05122e37e75a947', case=False) | Hashes.str.contains(r'MD5=165178829b5587a628977bfca6fd6900', case=False) | Hashes.str.contains(r'MD5=24156523b923fd9dcfdd0ac684dcdb20', case=False) | Hashes.str.contains(r'MD5=750d1f07ea9d10b38a33636036c30cca', case=False) | Hashes.str.contains(r'MD5=fc90bcc43daa48882be359a17b71abf7', case=False) | Hashes.str.contains(r'MD5=09672532194b4bff5e0f7a7d782c7bf2', case=False) | Hashes.str.contains(r'MD5=212bfd1ef00e199a365aeb74a8182609', case=False) | Hashes.str.contains(r'MD5=e3d290406de40c32095bd76dc88179fb', case=False) | Hashes.str.contains(r'MD5=715572dfe6fb10b16f980bfa242f3fa5', case=False) | Hashes.str.contains(r'MD5=c8f88ca47b393da6acf87fa190e81333', case=False) | Hashes.str.contains(r'MD5=d0c2caa17c7b6d2200e1b5aa9d07135e', case=False) | Hashes.str.contains(r'MD5=16a8e8437b94d6207af2f25fd4801b6d', case=False) | Hashes.str.contains(r'MD5=7bdf418a65ec33ec8ff47e7de705a4e1', case=False) | Hashes.str.contains(r'MD5=31f34de4374a6ed0e70a022a0efa2570', case=False) | Hashes.str.contains(r'MD5=cfad9185ffcf5850b5810c28b24d5fc8', case=False) | Hashes.str.contains(r'MD5=6ba221afb17342a3c81245a4958516a2', case=False) | Hashes.str.contains(r'MD5=f44f6ec546850ceb796a2cb528928a91', case=False) | Hashes.str.contains(r'MD5=34a7fab63a4ed5a0b61eb204828e08e5', case=False) | Hashes.str.contains(r'MD5=a92bf3c219a5fa82087b6c31bdf36ff3', case=False) | Hashes.str.contains(r'MD5=fa0d1fca7c5b44ce3b799389434fcaa5', case=False) | Hashes.str.contains(r'MD5=affe4764d880e78b2afb2643b15b8d41', case=False) | Hashes.str.contains(r'MD5=f80ceb0dbb889663f0bee058b109ce0e', case=False) | Hashes.str.contains(r'MD5=25ebe6f757129adbe78ec312a5f1800b', case=False) | Hashes.str.contains(r'MD5=7f7b8cde26c4943c9465e412adbb790f', case=False) | Hashes.str.contains(r'MD5=bfe96411cf67edb3cee2b9894b910cd5', case=False) | Hashes.str.contains(r'MD5=6e2178dc5f9e37e6b4b6cbdaef1b12b1', case=False) | Hashes.str.contains(r'MD5=0420fa6704fd0590c5ce7176fdada650', case=False) | Hashes.str.contains(r'MD5=7ed6030f14e66e743241f2c1fa783e69', case=False) | Hashes.str.contains(r'MD5=61e8367fb57297a949c9a80c2e0e5a38', case=False) | Hashes.str.contains(r'MD5=7951fa3096c99295d681acb0742506bf', case=False) | Hashes.str.contains(r'MD5=bcd60bf152fdec05cd40562b466be252', case=False) | Hashes.str.contains(r'MD5=376b1e8957227a3639ec1482900d9b97', case=False) | Hashes.str.contains(r'MD5=7331720a5522d5cd972623326cf87a3f', case=False) | Hashes.str.contains(r'MD5=8e78ab9b9709bafb11695a0a6eddeff9', case=False) | Hashes.str.contains(r'MD5=8abbb12e61045984eda19e2dc77b235e', case=False) | Hashes.str.contains(r'MD5=0199a59af05d9986842ecbdee3884f0c', case=False) | Hashes.str.contains(r'MD5=729afa54490443da66c2685bd77cb1f0', case=False) | Hashes.str.contains(r'MD5=95c88d25e211a4d52a82c53e5d93e634', case=False) | Hashes.str.contains(r'MD5=aa55dd14064cb808613d09195e3ba749', case=False) | Hashes.str.contains(r'MD5=ef1afb3a5ddad6795721f824690b4a69', case=False) | Hashes.str.contains(r'MD5=db46c56849bbce9a55a03283efc8c280', case=False) | Hashes.str.contains(r'MD5=991230087394738976dbd44f92516cae', case=False) | Hashes.str.contains(r'MD5=3af19d325f9dcdf360276ae5e7c136ea', case=False) | Hashes.str.contains(r'MD5=98763a3dee3cf03de334f00f95fc071a', case=False) | Hashes.str.contains(r'MD5=4b194021d6bd6650cbd1aed9370b2329', case=False) | Hashes.str.contains(r'MD5=517d484bdbad4637188ec7a908335b86', case=False) | Hashes.str.contains(r'MD5=2ddd3c0e23bc0fd63702910c597298b4', case=False) | Hashes.str.contains(r'MD5=120b5bbb9d2eb35ff4f62d79507ea63a', case=False) | Hashes.str.contains(r'MD5=6bada94085b6709694f8327c211d12e1', case=False) | Hashes.str.contains(r'MD5=5c5f1c2dc6c2479bafec7c010c41c6ec', case=False) | Hashes.str.contains(r'MD5=ab81264493c218a0e875a0d50104ac9f', case=False) | Hashes.str.contains(r'MD5=ea2ff60fcce3b9ffe0bd77658b88512d', case=False) | Hashes.str.contains(r'MD5=76d1d4d285f74059f32b8ad19a146d0c', case=False) | Hashes.str.contains(r'MD5=b9cf3294c13cdea624ab95ca3e2e483f', case=False) | Hashes.str.contains(r'MD5=0cd0fe9d16b62415b116686a2f414f8c', case=False) | Hashes.str.contains(r'MD5=2503c4cf31588f0b011eb992ca3ee7ff', case=False) | Hashes.str.contains(r'MD5=f0470f82ba58bc4309f83a0f2aefa4d5', case=False) | Hashes.str.contains(r'MD5=db72def618cbc3c5f9aa82f091b54250', case=False) | Hashes.str.contains(r'MD5=2ff629de3667fcd606a0693951f1c1a9', case=False) | Hashes.str.contains(r'MD5=119f0656ab4bb872f79ee5d421e2b9f9', case=False) | Hashes.str.contains(r'MD5=55a7c51dc2aa959c41e391db8f6b8b4f', case=False) | Hashes.str.contains(r'MD5=009876ab9cf3a3d4e3fc3afe13ae839e', case=False) | Hashes.str.contains(r'MD5=f8a13d4413a93dd005fad116cbd6b6f7', case=False) | Hashes.str.contains(r'MD5=5093f38d597532d59d4df9018056f0d1', case=False) | Hashes.str.contains(r'MD5=00f887e74faad40e6e97d9d0e9c71370', case=False) | Hashes.str.contains(r'MD5=0215d0681979987fe908fb19dab83399', case=False) | Hashes.str.contains(r'MD5=7962d91b1f53ce55c7338788bd4eb378', case=False) | Hashes.str.contains(r'MD5=1bca427ab8e67a9db833eb8f0ff92196', case=False) | Hashes.str.contains(r'MD5=a730b97ab977aa444fa261902822a905', case=False) | Hashes.str.contains(r'MD5=a453083b8f4ca7cb60cac327e97edbe2', case=False) | Hashes.str.contains(r'MD5=afc2448b4080f695e76e059a96958cab', case=False) | Hashes.str.contains(r'MD5=4f963d716a60737e5b59299f00daf285', case=False) | Hashes.str.contains(r'MD5=ee59b64ae296a87bf7a6aee38ad09617', case=False) | Hashes.str.contains(r'MD5=1c9d2a993e99054050b596d88b307d95', case=False) | Hashes.str.contains(r'MD5=5cd0ec261c8c2a39d9105fbbcad4e5b9', case=False) | Hashes.str.contains(r'MD5=4c6d311e0b13c4f469f717db4ab4d0e7', case=False) | Hashes.str.contains(r'MD5=84fb76ee319073e77fb364bbbbff5461', case=False) | Hashes.str.contains(r'MD5=d660fc7255646d5014d45c3bca9c6e20', case=False) | Hashes.str.contains(r'MD5=ecccbf1e7c727f923c9d709707800e6c', case=False) | Hashes.str.contains(r'MD5=94ccef76fda12ab0b8270f9b2980552b', case=False) | Hashes.str.contains(r'MD5=f853abe0dc162601e66e4a346faed854', case=False) | Hashes.str.contains(r'MD5=154fd286c96665946d55a7d49923ad7e', case=False) | Hashes.str.contains(r'MD5=a5afd20e34bcd634ebd25b3ab2ff3403', case=False) | Hashes.str.contains(r'MD5=c9c7113f5e15f70fcc576e835c859d56', case=False) | Hashes.str.contains(r'MD5=ad22a7b010de6f9c6f39c350a471a440', case=False) | Hashes.str.contains(r'MD5=7a6a6d6921cd1a4e1d61f9672a4560d6', case=False) | Hashes.str.contains(r'MD5=9af5ae780b6a9ea485fa15f28ddb20a7', case=False) | Hashes.str.contains(r'MD5=1f15a513abc039533ca996552ba27e51', case=False) | Hashes.str.contains(r'MD5=d1bac75205c389d6d5d6418f0457c29b', case=False) | Hashes.str.contains(r'MD5=36527fdb70ed6f74b70a98129f82ad62', case=False) | Hashes.str.contains(r'MD5=3d5164e85d740bce0391e2b81d49d308', case=False) | Hashes.str.contains(r'MD5=30550db8f400b1e11593dffd644abb67', case=False) | Hashes.str.contains(r'MD5=b17fb1ad5e880467cf7e61b1ee8e3448', case=False) | Hashes.str.contains(r'MD5=6f5d54ab483659ac78672440422ae3f1', case=False) | Hashes.str.contains(r'MD5=f042e8318cf20957c2339d96690c3186', case=False) | Hashes.str.contains(r'MD5=5158f786afa19945d19bee9179065e4d', case=False) | Hashes.str.contains(r'MD5=328a2cb2da464b0c2beb898ff9ae9f3a', case=False) | Hashes.str.contains(r'MD5=e7273e17ac85dc4272c4c4400091a19e', case=False) | Hashes.str.contains(r'MD5=d74d202646e5a6d0d2c4207e1f949826', case=False) | Hashes.str.contains(r'MD5=9ce1b0e5cfa8223cec3be1c7616e9f63', case=False) | Hashes.str.contains(r'MD5=55cd6b46ac25bbe01245f2270a0d6cb8', case=False) | Hashes.str.contains(r'MD5=b8b6686324f7aa77f570bc019ec214e6', case=False) | Hashes.str.contains(r'MD5=d104621c93213942b7b43d65b5d8d33e', case=False) | Hashes.str.contains(r'MD5=8cc5a4045a80a822cbc1e9eadff8e533', case=False) | Hashes.str.contains(r'MD5=ef18d594c862d6d3704b777fa3445ac2', case=False) | Hashes.str.contains(r'MD5=b941c8364308990ee4cc6eadf7214e0f', case=False) | Hashes.str.contains(r'MD5=2ca1044a04cb2f0ce5bd0a5832981e04', case=False) | Hashes.str.contains(r'MD5=f8fe655b7d63dbdc53b0983a0d143028', case=False) | Hashes.str.contains(r'MD5=cd9f0fcecf1664facb3671c0130dc8bb', case=False) | Hashes.str.contains(r'MD5=3e9ee8418f22a8ae0e2bf6ff293988fa', case=False) | Hashes.str.contains(r'MD5=3bf217f8ef018ca5ea20947bfdfc0a4d', case=False) | Hashes.str.contains(r'MD5=778b7feea3c750d44745d3bf294bd4ce', case=False) | Hashes.str.contains(r'MD5=4514a0e8bcab7de4cff55999cdf00cd1', case=False) | Hashes.str.contains(r'MD5=5228b7a738dc90a06ae4f4a7412cb1e9', case=False) | Hashes.str.contains(r'MD5=159f89d9870e208abd8b912c3d1d3ae9', case=False) | Hashes.str.contains(r'MD5=e425c66663c96d5a9f030b0ad4d219a8', case=False) | Hashes.str.contains(r'MD5=85b756463ab0c000f816260d49923cde', case=False) | Hashes.str.contains(r'MD5=acd221ff7cf10b6117fd609929cde395', case=False) | Hashes.str.contains(r'MD5=a87689b1067edacc48fddf90020dee23', case=False) | Hashes.str.contains(r'MD5=0d123be07e2dfd2b2ade49ad2a905a5b', case=False) | Hashes.str.contains(r'MD5=3ae11bde32cdbd8637124ada866a5a7e', case=False) | Hashes.str.contains(r'MD5=cc35379f0421b907004a9099611ee2cd', case=False) | Hashes.str.contains(r'MD5=23b807c09b9b6ea85ed5c508aab200b7', case=False) | Hashes.str.contains(r'MD5=26d973d6d9a0d133dfda7d8c1adc04b7', case=False) | Hashes.str.contains(r'MD5=eba6b88bc7bca21658bda9533f0bbff8', case=False) | Hashes.str.contains(r'MD5=9eb524c5f92e5b80374b8261292fdeb5', case=False) | Hashes.str.contains(r'MD5=4a23e0f2c6f926a41b28d574cbc6ac30', case=False) | Hashes.str.contains(r'MD5=c61876aaca6ce822be18adb9d9bd4260', case=False) | Hashes.str.contains(r'MD5=aae268c4b593156bdae25af5a2a4af21', case=False) | Hashes.str.contains(r'MD5=de711decdd763a73098372f752bf5a1c', case=False) | Hashes.str.contains(r'MD5=1b32c54b95121ab1683c7b83b2db4b96', case=False) | Hashes.str.contains(r'MD5=9aa7ed7809eec0d8bc6c545a1d18107a', case=False) | Hashes.str.contains(r'MD5=07493c774aa406478005e8fe52c788b2', case=False) | Hashes.str.contains(r'MD5=9b9d367cb53df0a2e0850760c840d016', case=False) | Hashes.str.contains(r'MD5=70c2c29643ee1edd3bbcd2ef1ffc9a73', case=False) | Hashes.str.contains(r'MD5=766f9ea38918827df59a6aed204d2b09', case=False) | Hashes.str.contains(r'MD5=f670d1570c75ab1d8e870c1c6e3baba1', case=False) | Hashes.str.contains(r'MD5=34edf3464c3f5605c1ca3a071f12e28c', case=False) | Hashes.str.contains(r'MD5=bae1f127c4ff21d8fe45e2bbfc59c180', case=False) | Hashes.str.contains(r'MD5=31469f1313871690e8dc2e8ee4799b22', case=False) | Hashes.str.contains(r'MD5=79483cb29a0c428e1362ec8642109eee', case=False) | Hashes.str.contains(r'MD5=c607c37af638fa4eac751976a6afbaa6', case=False) | Hashes.str.contains(r'MD5=fb7637cfe8562095937f4d6cff420784', case=False) | Hashes.str.contains(r'MD5=d98d2f80b94f70780b46d1f079a38d93', case=False) | Hashes.str.contains(r'MD5=35fbc4c04c31c1a40e666be6529c6321', case=False) | Hashes.str.contains(r'MD5=969f1d19449dc5c2535dd5786093f651', case=False) | Hashes.str.contains(r'MD5=986f083e5fd01eea4ec3b2575a110a95', case=False) | Hashes.str.contains(r'MD5=ccf523b951afaa0147f22e2a7aae4976', case=False) | Hashes.str.contains(r'MD5=978cd6d9666627842340ef774fd9e2ac', case=False) | Hashes.str.contains(r'MD5=9d8cb58b9a9e177ddd599791a58a654d', case=False) | Hashes.str.contains(r'MD5=e3fda6120dfa016a76d975fdab7954f6', case=False) | Hashes.str.contains(r'MD5=e99e86480d4206beb898dda82b71ca44', case=False) | Hashes.str.contains(r'MD5=a2be99e4904264baa5649c4d4cd13a17', case=False) | Hashes.str.contains(r'MD5=563b33cfc3c815feff659caaa94edc33', case=False) | Hashes.str.contains(r'MD5=18b4bbeae6b07d2e21729b8698bbd25a', case=False) | Hashes.str.contains(r'MD5=f51065667fb127cf6de984daea2f6b24', case=False) | Hashes.str.contains(r'MD5=35c8fdf881909fa28c92b1c2741ac60b', case=False) | Hashes.str.contains(r'MD5=477e02a8e31cde2e76a8fb020df095c2', case=False) | Hashes.str.contains(r'MD5=6b6dfb6d952a2e36efd4a387fdb94637', case=False) | Hashes.str.contains(r'MD5=f7d963c14a691a022301afa31de9ecef', case=False) | Hashes.str.contains(r'MD5=9638f265b1ddd5da6ecdf5c0619dcbe6', case=False) | Hashes.str.contains(r'MD5=2e48c3b8042fdcef0ed435562407bd21', case=False) | Hashes.str.contains(r'MD5=ada5f19423f91795c0372ff39d745acf', case=False) | Hashes.str.contains(r'MD5=702d5606cf2199e0edea6f0e0d27cd10', case=False) | Hashes.str.contains(r'MD5=0809f48fd30845d983d569b847fa83cf', case=False) | Hashes.str.contains(r'MD5=743c403d20a89db5ed84c874768b7119', case=False) | Hashes.str.contains(r'MD5=ed6348707f177629739df73b97ba1b6e', case=False) | Hashes.str.contains(r'MD5=f33c3f08536f988aac84d72d83b139a6', case=False) | Hashes.str.contains(r'MD5=34686a4b10f239d781772e9e94486c1a', case=False) | Hashes.str.contains(r'MD5=d77fb9fb256b0c2ec0258c39b80dc513', case=False) | Hashes.str.contains(r'MD5=b2e4e588ce7b993cc31c18a0721d904d', case=False) | Hashes.str.contains(r'MD5=eda6e97b453388bb51ce84b8a11d9d13', case=False) | Hashes.str.contains(r'MD5=d90cdd8f2826e5ea3faf8e258f20dc40', case=False) | Hashes.str.contains(r'MD5=736c4b85ce346ddf3b49b1e3abb4e72a', case=False) | Hashes.str.contains(r'MD5=b5ada7fd226d20ec6634fc24768f9e22', case=False) | Hashes.str.contains(r'MD5=843e39865b29bb3df825bd273f195a98', case=False) | Hashes.str.contains(r'MD5=7671bbf15b7a8c8f59a0c42a1765136a', case=False) | Hashes.str.contains(r'MD5=6c5e50ef2069896f408cdaaddd307893', case=False) | Hashes.str.contains(r'MD5=67b5b8607234bf63ce1e6a52b4a05f87', case=False) | Hashes.str.contains(r'MD5=24589081b827989b52d954dcd88035d0', case=False) | Hashes.str.contains(r'MD5=8fcf90cb5f9cb7205c075c662720f762', case=False) | Hashes.str.contains(r'MD5=812e960977116bf6d6c1ccf8b5dd351f', case=False) | Hashes.str.contains(r'MD5=a4fda97f452b8f8705695a729f5969f7', case=False) | Hashes.str.contains(r'MD5=6f7125540e5e90957ba5f8d755a8d570', case=False) | Hashes.str.contains(r'MD5=5a1ee9e6a177f305765f09b0ae6ac1c5', case=False) | Hashes.str.contains(r'MD5=4b42a7a6327827a8dbdecf367832c0cd', case=False) | Hashes.str.contains(r'MD5=663f2fb92608073824ee3106886120f3', case=False) | Hashes.str.contains(r'MD5=d6c4baecff632d6ad63c45fc39e04b2f', case=False) | Hashes.str.contains(r'MD5=4ae55080ec8aed49343e40d08370195c', case=False) | Hashes.str.contains(r'MD5=21be10f66bb65c1d406407faa0b9ba95', case=False) | Hashes.str.contains(r'MD5=e9ccb6bac8715918a2ac35d8f0b4e1e6', case=False) | Hashes.str.contains(r'MD5=a223f8584bcb978c003dd451b1439f8d', case=False) | Hashes.str.contains(r'MD5=f30db62d02a69c36ccb01ac9d41dc085', case=False) | Hashes.str.contains(r'MD5=d396332f9d7b71c10b3b83da030690f0', case=False) | Hashes.str.contains(r'MD5=715ac0756234a203cb7ce8524b6ddc0d', case=False) | Hashes.str.contains(r'MD5=b94ffce20e36b2930eb3ac72f72c00d6', case=False) | Hashes.str.contains(r'MD5=efb4ed2040b9b3d408aab8dc15df5a06', case=False) | Hashes.str.contains(r'MD5=8f1255efd2ed0d3b03a02c6b236c06d6', case=False) | Hashes.str.contains(r'MD5=530feb1e37831302f58b7c219be6b844', case=False) | Hashes.str.contains(r'MD5=2e219df70fccb79351f0452cba86623e', case=False) | Hashes.str.contains(r'MD5=99c131567c10c25589e741e69a8f8aa3', case=False) | Hashes.str.contains(r'MD5=6fb3d42a4f07d8115d59eb2ea6504de5', case=False) | Hashes.str.contains(r'MD5=839cbbc86453960e9eb6db814b776a40', case=False) | Hashes.str.contains(r'MD5=3c1f92a1386fa6cf1ba51bae5e9a98dd', case=False) | Hashes.str.contains(r'MD5=46edb648c1b5c3abd76bd5e912dac026', case=False) | Hashes.str.contains(r'MD5=bd067efb8cafd971142bc964b4f85df1', case=False) | Hashes.str.contains(r'MD5=3db2afc15e7cc78bd11f4c726060db5c', case=False) | Hashes.str.contains(r'MD5=01f092be2a36a5574005e25368426ad2', case=False) | Hashes.str.contains(r'MD5=65c069af3875494ec686afbb0c3da399', case=False) | Hashes.str.contains(r'MD5=ce65b7adcf954eb36df62ea3d4a628c7', case=False) | Hashes.str.contains(r'MD5=ae5eb2759305402821aeddc52ba9a6d6', case=False) | Hashes.str.contains(r'MD5=048549f7e9978aff602a24dea98ee48a', case=False) | Hashes.str.contains(r'MD5=da8437200af5f3f790e301b9958993d2', case=False) | Hashes.str.contains(r'MD5=590875a0b2eeb171403fc7d0f5110cb2', case=False) | Hashes.str.contains(r'MD5=bc71da7c055e3172226090ba5d8e2248', case=False) | Hashes.str.contains(r'MD5=d76b56b79b1c95e8dcd7ee88cb0d25ab', case=False) | Hashes.str.contains(r'MD5=14eead4d42728e9340ec8399a225c124', case=False) | Hashes.str.contains(r'MD5=1b2e3b7f2966f2f6e6a1bb89f97228e5', case=False) | Hashes.str.contains(r'MD5=5e9d5c59ba1f1060f53909c129df3355', case=False) | Hashes.str.contains(r'MD5=0ac31915ec9a6b7d4d4bba8fe6d60ff7', case=False) | Hashes.str.contains(r'MD5=6909b5e86e00b4033fedfca1775b0e33', case=False) | Hashes.str.contains(r'MD5=2b4e66fac6503494a2c6f32bb6ab3826', case=False) | Hashes.str.contains(r'MD5=a125390293d50091b643cfa096c2148c', case=False) | Hashes.str.contains(r'MD5=79bfbeb4e8cfdd0cb1d73612360bd811', case=False) | Hashes.str.contains(r'MD5=389823db299b350f2ee830d47376eeac', case=False) | Hashes.str.contains(r'MD5=a17c403c4b74d4fa920c3887066daeb2', case=False) | Hashes.str.contains(r'MD5=1793e1d4247b29313325d1462dec81e2', case=False) | Hashes.str.contains(r'MD5=c31610f4c383204a1fc105c54b7403c9', case=False) | Hashes.str.contains(r'MD5=0ec31f45e2e698a83131b4443f9a6dd7', case=False) | Hashes.str.contains(r'MD5=4885e1bf1971c8fa9e7686fd5199f500', case=False) | Hashes.str.contains(r'MD5=f83c61adbb154d46dd8f77923aa7e9c3', case=False) | Hashes.str.contains(r'MD5=5cc5c26fc99175997d84fe95c61ab2c2', case=False) | Hashes.str.contains(r'MD5=49832b4f726cdff825257bee33ad8451', case=False) | Hashes.str.contains(r'MD5=1493d342e7a36553c56b2adea150949e', case=False) | Hashes.str.contains(r'MD5=df9953fa93e1793456a8d428ba7e5700', case=False) | Hashes.str.contains(r'MD5=40bc58b7615d00eb55ad9ba700c340c1', case=False) | Hashes.str.contains(r'MD5=ba2c0fa201c74621cddd8638497b3c70', case=False) | Hashes.str.contains(r'MD5=3c9f9c1b802f66cf03cbe82dec2bd454', case=False) | Hashes.str.contains(r'MD5=7d84a4ed0fcca3d098881a3f3283724b', case=False) | Hashes.str.contains(r'MD5=0e14b69dcf67c20343f85f9fdb5b9300', case=False) | Hashes.str.contains(r'MD5=17b97fbe2e8834d7ad30211635e1b271', case=False) | Hashes.str.contains(r'MD5=7fbd3b4488a12eab56c54e7bb91516f3', case=False) | Hashes.str.contains(r'MD5=9007c94c9d91ccff8d7f5d4cdddcc403', case=False) | Hashes.str.contains(r'MD5=260eef181a9bf2849bfec54c1736613b', case=False) | Hashes.str.contains(r'MD5=dbde0572d702d0a05c0d509d5624a4d7', case=False) | Hashes.str.contains(r'MD5=5c5973d2caf86e96311f6399513ab8df', case=False) | Hashes.str.contains(r'MD5=0703c1e07186cb98837a2ae76f50d42e', case=False) | Hashes.str.contains(r'MD5=5970e8de1b337ca665114511b9d10806', case=False) | Hashes.str.contains(r'MD5=2580fb4131353ec417b0df59811f705c', case=False) | Hashes.str.contains(r'MD5=fa63a634189bd4d6570964e2161426b0', case=False) | Hashes.str.contains(r'MD5=ee57cbe6ec6a703678eaa6c59542ff57', case=False) | Hashes.str.contains(r'MD5=e140cb81bd27434fc4fd9080b7551922', case=False) | Hashes.str.contains(r'MD5=49fe3d1f3d5c2e50a0df0f6e8436d778', case=False) | Hashes.str.contains(r'MD5=a3af4a4fa6cba27284f8289436c2f074', case=False) | Hashes.str.contains(r'MD5=192519661fe6d132f233d0355c3f4a6d', case=False) | Hashes.str.contains(r'MD5=394e290aff9d4e78e504cedfb2d99350', case=False) | Hashes.str.contains(r'MD5=2e7d824a49d731da9fc96262a29c85ce', case=False) | Hashes.str.contains(r'MD5=f7cbbb5eb263ec9a35a1042f52e82ca4', case=False) | Hashes.str.contains(r'MD5=2d8e4f38b36c334d0a32a7324832501d', case=False) | Hashes.str.contains(r'MD5=443689645455987cb347154b391f734d', case=False) | Hashes.str.contains(r'MD5=9258e3cb20e24a93d4afdee9f5a0299c', case=False) | Hashes.str.contains(r'MD5=0067c788e1cb174f008c325ebde56c22', case=False) | Hashes.str.contains(r'MD5=79f7e6f98a5d3ab6601622be4471027f', case=False) | Hashes.str.contains(r'MD5=1c31d4e9ad2d2b5600ae9d0c0969fe59', case=False) | Hashes.str.contains(r'MD5=2f1ebc14bd8a29b89896737ca4076002', case=False) | Hashes.str.contains(r'MD5=43830326cd5fae66f5508e27cbec39a0', case=False) | Hashes.str.contains(r'MD5=df5f8e118a97d1b38833fcdf7127ab29', case=False) | Hashes.str.contains(r'MD5=8de7dcade65a1f51605a076c1d2b3456', case=False) | Hashes.str.contains(r'MD5=fadf9c1365981066c39489397840f848', case=False) | Hashes.str.contains(r'MD5=2c957aa79231fad8e221e035db6d0d81', case=False) | Hashes.str.contains(r'MD5=fd81af62964f5dd5eb4a828543a33dcf', case=False) | Hashes.str.contains(r'MD5=045ef7a39288ba1f4b8d6eca43def44f', case=False) | Hashes.str.contains(r'MD5=90f8c1b76f786814d03ef4c51d4abb6d', case=False) | Hashes.str.contains(r'MD5=17719a7f571d4cd08223f0b30f71b8b8', case=False) | Hashes.str.contains(r'MD5=bdd8dc8880dfbc19d729ca51071de288', case=False) | Hashes.str.contains(r'MD5=d79b8b7bed8d30387c22663b24e8c191', case=False) | Hashes.str.contains(r'MD5=57cd52ed992b634e74d2ddf9853a73b3', case=False) | Hashes.str.contains(r'MD5=1c294146fc77565030603878fd0106f9', case=False) | Hashes.str.contains(r'MD5=b7946feaeae34d51f045c4f986fa62ce', case=False) | Hashes.str.contains(r'MD5=86fd54c56dcafe2de918c36f8dfda67e', case=False) | Hashes.str.contains(r'MD5=adc1e141b57505fd011bc1efb1ae6967', case=False) | Hashes.str.contains(r'MD5=6822566b28be75b2a76446a57064369f', case=False) | Hashes.str.contains(r'MD5=d9ce18960c23f38706ae9c6584d9ac90', case=False) | Hashes.str.contains(r'MD5=935a7df222f19ac532e831e6bf9e8e45', case=False) | Hashes.str.contains(r'MD5=664ad9cf500916c94fc2c0020660ac4e', case=False) | Hashes.str.contains(r'MD5=356bda2bf0f6899a2c08b2da3ec69f13', case=False) | Hashes.str.contains(r'MD5=dacb62578b3ea191ea37486d15f4f83c', case=False) | Hashes.str.contains(r'MD5=89c7bd12495e29413038224cb61db02e', case=False) | Hashes.str.contains(r'MD5=f60a9b88c6ff07d4990d8653d0025683', case=False) | Hashes.str.contains(r'MD5=710b290a00598fbb1bcc49b30174b2c9', case=False) | Hashes.str.contains(r'MD5=5c9f240e0b83df758993837d18859cbe', case=False) | Hashes.str.contains(r'MD5=cb0c5d3639fcd810cde94b7b990aa51c', case=False) | Hashes.str.contains(r'MD5=4d17b32be70ef39eae5d5edeb5e89877', case=False) | Hashes.str.contains(r'MD5=0d4306983e694c1f34920bae12d887e6', case=False) | Hashes.str.contains(r'MD5=2751c7fd7f09479fa2b15168695adebc', case=False) | Hashes.str.contains(r'MD5=84ba7af6ada1b3ea5efb9871a0613fc6', case=False) | Hashes.str.contains(r'MD5=0a653d9d0594b152ca835d0b2593269f', case=False) | Hashes.str.contains(r'MD5=02198692732722681f246c1b33f7a9d9', case=False) | Hashes.str.contains(r'MD5=9d884ecd3b6c3f2509851ea15ffefbef', case=False) | Hashes.str.contains(r'MD5=3473faea65fba5d4fbe54c0898a3c044', case=False) | Hashes.str.contains(r'MD5=013719e840e955c2e4cd9d18c94a2625', case=False) | Hashes.str.contains(r'MD5=5e71c0814287763d529822d0a022e693', case=False) | Hashes.str.contains(r'MD5=9f94028cbcf6789103cb5bb6fcef355d', case=False) | Hashes.str.contains(r'MD5=0d8daf471d871deb90225d2953c0eb95', case=False) | Hashes.str.contains(r'MD5=ad612a7eb913b5f7d25703cd44953c35', case=False) | Hashes.str.contains(r'MD5=fe3fb6719e86481a3514ab9e00a55bcf', case=False) | Hashes.str.contains(r'MD5=3e87e3346441539d3a90278a120766df', case=False) | Hashes.str.contains(r'MD5=fa173832dca1b1faeba095e5c82a1559', case=False) | Hashes.str.contains(r'MD5=6ab7b8ef0c44e7d2d5909fdb58d37fa5', case=False) | Hashes.str.contains(r'MD5=803a371a78d528a44ef8777f67443b16', case=False) | Hashes.str.contains(r'MD5=257483d5d8b268d0d679956c7acdf02d', case=False) | Hashes.str.contains(r'MD5=02fc655279b8ea3ef37237c488b675cc', case=False) | Hashes.str.contains(r'MD5=94999245e9580c6228b22ac44c66044c', case=False) | Hashes.str.contains(r'MD5=88aada8325a3659736b3a7201c825664', case=False) | Hashes.str.contains(r'MD5=92927c47d6ff139c9b19674c9d0088f6', case=False) | Hashes.str.contains(r'MD5=05bf59560656c8a9a3191812b0e1235b', case=False) | Hashes.str.contains(r'MD5=c098f8aeb67eeb2262dbf681690a9306', case=False) | Hashes.str.contains(r'MD5=eb61616a7bc58e3f5b8cf855d04808c3', case=False) | Hashes.str.contains(r'MD5=e3aaa0c1c3a5e99eb9970ebe4b5a3183', case=False) | Hashes.str.contains(r'MD5=5efbbfcc6adac121c8e2fe76641ed329', case=False) | Hashes.str.contains(r'MD5=4eb4069c230a5dc40cd5d60d2cb3e0d0', case=False) | Hashes.str.contains(r'MD5=e0528f756bbb2ab83c60f9fd6f541e42', case=False) | Hashes.str.contains(r'MD5=eb4de413782193e824773723d790cfc4', case=False) | Hashes.str.contains(r'MD5=5ca1922ed5ee2b533b5f3dd9be20fd9a', case=False) | Hashes.str.contains(r'MD5=97580157f65612f765f39af594b86697', case=False) | Hashes.str.contains(r'MD5=21e72a43aedefcd70ca8999cc353b51b', case=False) | Hashes.str.contains(r'MD5=d6b259b2dfe80bdf4d026063accd752c', case=False) | Hashes.str.contains(r'MD5=ca7b41ce335051bf9dd7fa4a55581296', case=False) | Hashes.str.contains(r'MD5=084a13f18856d610d44d3109a9d2acde', case=False) | Hashes.str.contains(r'MD5=a5f637d61719d37a5b4868c385e363c0', case=False) | Hashes.str.contains(r'MD5=1392b92179b07b672720763d9b1028a5', case=False) | Hashes.str.contains(r'MD5=1a5a95d6bedbe29e5acf5eb6a727c634', case=False) | Hashes.str.contains(r'MD5=a71020c6d6d42c5000e9993425247e06', case=False) | Hashes.str.contains(r'MD5=a9f220b1507a3c9a327a99995ff99c82', case=False) | Hashes.str.contains(r'MD5=7c40ec9ed020cc9404de8fe3a5361a09', case=False) | Hashes.str.contains(r'MD5=fe937e1ed4c8f1d4eac12b065093ae63', case=False) | Hashes.str.contains(r'MD5=4ca0dba9e224473d664c25e411f5a3bd', case=False) | Hashes.str.contains(r'MD5=2a8662e91a51d8e04a94fa580c7d3828', case=False) | Hashes.str.contains(r'MD5=942c6a8332d5dd06d8f4b2a9cb386ff4', case=False) | Hashes.str.contains(r'MD5=0283b43c6bc965175a1c92b255d39556', case=False) | Hashes.str.contains(r'MD5=2d91d45cd09dfc3f8e89da1c261fd1ac', case=False) | Hashes.str.contains(r'MD5=187ddca26d119573223cf0a32ba55a61', case=False) | Hashes.str.contains(r'MD5=1549e6cbce408acaddeb4d24796f2eaf', case=False) | Hashes.str.contains(r'MD5=6beb1d8146f5a4aaa2f7b8c0c9bced30', case=False) | Hashes.str.contains(r'MD5=6cce5bb9c8c2a8293df2d3b1897941a2', case=False) | Hashes.str.contains(r'MD5=e0fb44aba5e7798f2dc637c6d1f6ca84', case=False) | Hashes.str.contains(r'MD5=de1cc5c266140bff9d964fab87a29421', case=False) | Hashes.str.contains(r'MD5=66e0db8a5b0425459d0430547ecbb3db', case=False) | Hashes.str.contains(r'MD5=03ca3b1cff154ab8855043abadd07956', case=False) | Hashes.str.contains(r'MD5=2a5fb925125af951bd76c00579d61666', case=False) | Hashes.str.contains(r'MD5=a2c5f994e9b4a74b2f5b51c7a44c4401', case=False) | Hashes.str.contains(r'MD5=5c55fcfe39336de769bfa258ab4c901d', case=False) | Hashes.str.contains(r'MD5=aa12c1cb47c443c6108bfe7fc1a34d98', case=False) | Hashes.str.contains(r'MD5=8407ddfab85ae664e507c30314090385', case=False) | Hashes.str.contains(r'MD5=be54aabf09c3fa4671b6efacafa389e3', case=False) | Hashes.str.contains(r'MD5=296bde4d0ed32c6069eb90c502187d0d', case=False) | Hashes.str.contains(r'MD5=1d768959aaa194d60e4524ce47708377', case=False) | Hashes.str.contains(r'MD5=dca1c62c793f84bb2d8e41ca50efbff1', case=False) | Hashes.str.contains(r'MD5=2a5ccd95292f03f0dd4899d18b55b428', case=False) | Hashes.str.contains(r'MD5=1f950cfd5ed8dd9de3de004f5416fe20', case=False) | Hashes.str.contains(r'MD5=35493772986f610753be29121cd68234', case=False) | Hashes.str.contains(r'MD5=6212832f13b296ddbc85b24e22edb5ec', case=False) | Hashes.str.contains(r'MD5=9b157f1261a8a42e4ef5ec23dd4cda9e', case=False) | Hashes.str.contains(r'MD5=b89b097b8b8aecb8341d05136f334ebb', case=False) | Hashes.str.contains(r'MD5=8942e9fa2459b1e179a6535ca16a2fb4', case=False) | Hashes.str.contains(r'MD5=64efbffaa153b0d53dc1bccda4279299', case=False) | Hashes.str.contains(r'MD5=70dcd07d38017b43f710061f37cb4a91', case=False) | Hashes.str.contains(r'MD5=537e2c3020b1d48b125da593e66508ec', case=False) | Hashes.str.contains(r'MD5=05b4463677e2566414ad53434ad9e7e5', case=False) | Hashes.str.contains(r'MD5=7be3a7a743f2013c3e90355219626c2c', case=False) | Hashes.str.contains(r'MD5=7f258c0161e9edca8e7f85ac0dd68e46', case=False) | Hashes.str.contains(r'MD5=81df475ab8d37343f0ad2a55b1397a8f', case=False) | Hashes.str.contains(r'MD5=f0aeb731d83f7ab6008c92c97faf6233', case=False) | Hashes.str.contains(r'MD5=507a649eb585d8d0447eab0532ef0c73', case=False) | Hashes.str.contains(r'MD5=5c5e3c7ca39d9472099ea81c329b7d75', case=False) | Hashes.str.contains(r'MD5=a31246180e61140ad7ff9dd7edf1f6a1', case=False) | Hashes.str.contains(r'MD5=9226339848e359f5e4cd519bef7dcd39', case=False) | Hashes.str.contains(r'MD5=f544f9925cab71786e57241c10e08633', case=False) | Hashes.str.contains(r'MD5=88d2143ae62878dada3aa0a6d8f7cea8', case=False) | Hashes.str.contains(r'MD5=c06dda757b92e79540551efd00b99d4b', case=False) | Hashes.str.contains(r'MD5=41ce6b172542a9a227e34a45881e1d2a', case=False) | Hashes.str.contains(r'MD5=9bcb97a1697a70f59405786759af63b8', case=False) | Hashes.str.contains(r'MD5=17c7bcae7ebabb95af2f7c91b19c361c', case=False) | Hashes.str.contains(r'MD5=aaa8999a169e39fb8b48ae49cd6ac30a', case=False) | Hashes.str.contains(r'MD5=9a5a35112c4f8016abcc6363b44d3385', case=False) | Hashes.str.contains(r'MD5=6b2df08bacf640cc2ac6f20c76af07ee', case=False) | Hashes.str.contains(r'MD5=ab4656d1ec4d4cc83c76f639a5340e84', case=False) | Hashes.str.contains(r'MD5=697f698b59f32f66cd8166e43a5c49c7', case=False) | Hashes.str.contains(r'MD5=4e90cd77509738d30d3181a4d0880bfa', case=False) | Hashes.str.contains(r'MD5=e3bdb307b32b13b8f7e621e8d5cc8cd3', case=False) | Hashes.str.contains(r'MD5=16472fca75ab4b5647c99de608949cde', case=False) | Hashes.str.contains(r'MD5=24fe18891c173a7c76426d08d2b0630e', case=False) | Hashes.str.contains(r'MD5=2faa725dd9bb22b2100e3010f8a72182', case=False) | Hashes.str.contains(r'MD5=251e1ce4e8e9b9418830ed3dc8edd5e3', case=False) | Hashes.str.contains(r'MD5=1f3522c5db7b9dcdd7729148f105018e', case=False) | Hashes.str.contains(r'MD5=d5a642329cce4df94b8dc1ba9660ae34', case=False) | Hashes.str.contains(r'MD5=b2600502a5b962b8cdfac2ead24b17b4', case=False) | Hashes.str.contains(r'MD5=c9cb486b4f652c9cfb8411803f8ed5f0', case=False) | Hashes.str.contains(r'MD5=73c98438ac64a68e88b7b0afd11ba140', case=False) | Hashes.str.contains(r'MD5=ab7b28b532beba6a6c0217bc406b80ee', case=False) | Hashes.str.contains(r'MD5=75dbd5db9892d7451d0429bec1aabe1a', case=False) | Hashes.str.contains(r'MD5=d4a10447fdaff7a001715191c1f914b6', case=False) | Hashes.str.contains(r'MD5=31eca8c0b32135850d5a50aee11fec87', case=False) | Hashes.str.contains(r'MD5=2cc65e805757cfc4f87889cdceb546cd', case=False) | Hashes.str.contains(r'MD5=96b463b6fa426ae42c414177af550ba2', case=False) | Hashes.str.contains(r'MD5=ef5ba21690c2f4ba7e62bf022b2df1f7', case=False) | Hashes.str.contains(r'MD5=f406c5536bcf9bacbeb7ce8a3c383bfa', case=False) | Hashes.str.contains(r'MD5=1ed043249c21ab201edccb37f1d40af9', case=False) | Hashes.str.contains(r'MD5=86635fdc8e28957e6c01fc483fe7b020', case=False) | Hashes.str.contains(r'MD5=520c18f50d3cb2ce162767c4c1998b86', case=False) | Hashes.str.contains(r'MD5=569676d3d45b0964ac6dd0815be8ff8c', case=False) | Hashes.str.contains(r'MD5=3f39f013168428c8e505a7b9e6cba8a2', case=False) | Hashes.str.contains(r'MD5=68726474c69b738eac3a62e06b33addc', case=False) | Hashes.str.contains(r'MD5=c04a5cdcb446dc708d9302be4e91e46d', case=False) | Hashes.str.contains(r'MD5=a179c4093d05a3e1ee73f6ff07f994aa', case=False) | Hashes.str.contains(r'MD5=1a22a85489a94db6ff68cd624ef43bad', case=False) | Hashes.str.contains(r'MD5=4ad30223df1361726ff64417f8515272', case=False) | Hashes.str.contains(r'MD5=4cee9945f9a3e8f2433f5aa8c58671fb', case=False) | Hashes.str.contains(r'MD5=f56f30ac68c35dd4680054cdfd8f3f00', case=False) | Hashes.str.contains(r'MD5=31a331a88c6280555859455518a95c35', case=False) | Hashes.str.contains(r'MD5=650f6531db6fb0ed25d7fc70be35a4da', case=False) | Hashes.str.contains(r'MD5=82854a57630059d1ce2870159dc2f86b', case=False) | Hashes.str.contains(r'MD5=d556cb79967e92b5cc69686d16c1d846', case=False) | Hashes.str.contains(r'MD5=5b1e1a9dade81f1e80fdc0a2d3f9006e', case=False) | Hashes.str.contains(r'MD5=d9e7e5bcc5b01915dbcef7762a7fc329', case=False) | Hashes.str.contains(r'MD5=a60c9173563b940203cf4ad38ccf2082', case=False) | Hashes.str.contains(r'MD5=95a95e28cf5ee4ece6ffbaf169358192', case=False) | Hashes.str.contains(r'MD5=397580c24c544d477688fcfca9c9b542', case=False) | Hashes.str.contains(r'MD5=c5d1f8ed329ebb86ddd01e414a6a1718', case=False) | Hashes.str.contains(r'MD5=ab4ee84e09b09012ac86d3a875af9d43', case=False) | Hashes.str.contains(r'MD5=c9a293762319d73c8ee84bcaaf81b7b3', case=False) | Hashes.str.contains(r'MD5=a641e3dccba765a10718c9cb0da7879e', case=False) | Hashes.str.contains(r'MD5=dd39a86852b498b891672ffbcd071c03', case=False) | Hashes.str.contains(r'MD5=715f8efab1d1c660e4188055c4b28eed', case=False) | Hashes.str.contains(r'MD5=c046ca4da48db1524ddf3a49a8d02b65', case=False) | Hashes.str.contains(r'MD5=f5e6ef0dcbb3d4a608e9e0bba4d80d0a', case=False) | Hashes.str.contains(r'MD5=bf581e9eb91bace0b02a2c5a54bf1419', case=False) | Hashes.str.contains(r'MD5=d6c2e061b21c32c585aca5f38335c21c', case=False) | Hashes.str.contains(r'MD5=7aa34cd9ea5649c24a814e292b270b6f', case=False) | Hashes.str.contains(r'MD5=5eabc87416f59e894adfde065d0405fa', case=False) | Hashes.str.contains(r'MD5=7ffdd78d63ca7307a96843cfe806799e', case=False) | Hashes.str.contains(r'MD5=bbbc9a6cc488cfb0f6c6934b193891eb', case=False) | Hashes.str.contains(r'MD5=113056ec5c679b6f74c9556339ebf962', case=False) | Hashes.str.contains(r'MD5=f7745b42882dec947f6629ab9b7c39b7', case=False) | Hashes.str.contains(r'MD5=4b60ef388071e0baf299496e3d6590ae', case=False) | Hashes.str.contains(r'MD5=c006d1844f20b91d0ea52bf32d611f30', case=False) | Hashes.str.contains(r'MD5=a0074303fe697a36d9397c0122e04973', case=False) | Hashes.str.contains(r'MD5=ff7b31fa6e9ab923bce8af31d1be5bb2', case=False) | Hashes.str.contains(r'MD5=2e887e52e45bba3c47ccd0e75fc5266f', case=False) | Hashes.str.contains(r'MD5=7eeb4c0cb786a409b94066986addf315', case=False) | Hashes.str.contains(r'MD5=e28ce623e3e5fa1d2fe16c721efad4c2', case=False) | Hashes.str.contains(r'MD5=0eb3dfeffb49d32310d96f3aa3e8ca61', case=False) | Hashes.str.contains(r'MD5=a15235fcec1c9b65d736661d4bec0d38', case=False) | Hashes.str.contains(r'MD5=0ad87bba19f0b71ccb2d32239abd49ec', case=False) | Hashes.str.contains(r'MD5=1c9001dcd34b4db414f0c54242fedf49', case=False) | Hashes.str.contains(r'MD5=490b1f404c4f31f4538b36736c990136', case=False) | Hashes.str.contains(r'MD5=1dc94a6a82697c62a04e461d7a94d0b0', case=False) | Hashes.str.contains(r'MD5=555446a3ca8d9237403471d4744e39f4', case=False) | Hashes.str.contains(r'MD5=100fe0bc0c183d16e1f08d1a2ad624a8', case=False) | Hashes.str.contains(r'MD5=37086ae5244442ba552803984a11d6cb', case=False) | Hashes.str.contains(r'MD5=5d4df0bac74e9ac62af6bc99440b050b', case=False) | Hashes.str.contains(r'MD5=94cdf2cf363be5a8749670bea4db65cd', case=False) | Hashes.str.contains(r'MD5=3a48f0e4297947663fbb11702aa1d728', case=False) | Hashes.str.contains(r'MD5=98583b2f2efe12d2a167217a3838c498', case=False) | Hashes.str.contains(r'MD5=7437d4070b5c018e05354c179f1d5e2a', case=False) | Hashes.str.contains(r'MD5=7d46d0ddaf8c7e1776a70c220bf47524', case=False) | Hashes.str.contains(r'MD5=3c4154866f3d483fdc9f4f64ef868888', case=False) | Hashes.str.contains(r'MD5=91203acddac81511d17a68a030d063a8', case=False) | Hashes.str.contains(r'MD5=7d87a9c54e49943bf18574c6f02788ee', case=False) | Hashes.str.contains(r'MD5=8d63e1a9ff4cafee1af179c0c544365c', case=False) | Hashes.str.contains(r'MD5=34069a15ae3aa0e879cd0d81708e4bcc', case=False) | Hashes.str.contains(r'MD5=e4788e5b3e5f0a0bbb318a9c426c2812', case=False) | Hashes.str.contains(r'MD5=1c591efa8660d4d36a75db9b82474174', case=False) | Hashes.str.contains(r'MD5=e9e786bdba458b8b4f9e93d034f73d00', case=False) | Hashes.str.contains(r'MD5=d5db81974ffda566fa821400419f59be', case=False) | Hashes.str.contains(r'MD5=a926b64be7c27ccb96e687a3924de298', case=False) | Hashes.str.contains(r'MD5=1c4acf27317a2b5eaedff3ce6094794d', case=False) | Hashes.str.contains(r'MD5=cd1c8a66e885b7a8b464094395566a46', case=False) | Hashes.str.contains(r'MD5=edfa69e9132a56778d6363cd41843893', case=False) | Hashes.str.contains(r'MD5=1ed08a6264c5c92099d6d1dae5e8f530', case=False) | Hashes.str.contains(r'MD5=f690bfc0799e51a626ba3931960c3173', case=False) | Hashes.str.contains(r'MD5=7c983b4e66c4697ad3ce7efc9166b505', case=False) | Hashes.str.contains(r'MD5=4a06bcd96ef0b90a1753a805b4235f28', case=False) | Hashes.str.contains(r'MD5=c28b4a60ebd4b8c12861829cc13aa6ff', case=False) | Hashes.str.contains(r'MD5=e700a820f117f65e813b216fccbf78c9', case=False) | Hashes.str.contains(r'MD5=515c75d77c64909690c18c08ef3fc310', case=False) | Hashes.str.contains(r'MD5=7056549baa6da18910151b08121e2c94', case=False) | Hashes.str.contains(r'MD5=61b068b10abfa0776f3b96a208d75bf9', case=False) | Hashes.str.contains(r'MD5=c901887f28bbb55a10eb934755b47227', case=False) | Hashes.str.contains(r'MD5=0761c357aed5f591142edaefdf0c89c8', case=False) | Hashes.str.contains(r'MD5=f141db170bb4c6e088f30ddc58404ad3', case=False) | Hashes.str.contains(r'MD5=6d97ee5b3300d0f7fa359f2712834c40', case=False) | Hashes.str.contains(r'MD5=53f103e490bc11624ef6a51a6d3bdc05', case=False) | Hashes.str.contains(r'MD5=3482acba11c71e45026747dbe366a7d9', case=False) | Hashes.str.contains(r'MD5=7475bfea6ea1cd54029208ed59b96c6b', case=False) | Hashes.str.contains(r'MD5=d011d5fecdc94754bf02014cb229d6bc', case=False) | Hashes.str.contains(r'MD5=42f7cc4be348c3efd98b0f1233cf2d69', case=False) | Hashes.str.contains(r'MD5=45c2d133d41d2732f3653ed615a745c8', case=False) | Hashes.str.contains(r'MD5=71fffc05cff351a6f26f78441cfebe26', case=False) | Hashes.str.contains(r'MD5=da6f7407c4656a2dbaf16a407aff1a38', case=False) | Hashes.str.contains(r'MD5=5dd25029499cd5656927e9c559955b07', case=False) | Hashes.str.contains(r'MD5=a82c01606dc27d05d9d3bfb6bb807e32', case=False) | Hashes.str.contains(r'MD5=8a973be665923e9708974e72228f9805', case=False) | Hashes.str.contains(r'MD5=312e31851e0fc2072dbf9a128557d6ef', case=False) | Hashes.str.contains(r'MD5=4ff880566f22919ed94ffae215d39da5', case=False) | Hashes.str.contains(r'MD5=fcc5de75c1837b631ed77ea4638704b9', case=False) | Hashes.str.contains(r'MD5=279f3b94c2b9ab5911515bc3e0ecf175', case=False) | Hashes.str.contains(r'MD5=61d6b1c71ad94f8485e966bebc36d092', case=False) | Hashes.str.contains(r'MD5=300c5b1795c9b6cc1bc4d7d55c7bbe85', case=False) | Hashes.str.contains(r'MD5=4a829b8cf1f8fdb69e1d58ae04e6106e', case=False) | Hashes.str.contains(r'MD5=e4d4a22cbf94e6b0a92fc36d46741f56', case=False) | Hashes.str.contains(r'MD5=e4a0bba88605d4c07b58a2cc3fac0fe9', case=False) | Hashes.str.contains(r'MD5=272446de15c63095940a3dad0b426f21', case=False) | Hashes.str.contains(r'MD5=f160ecce1500a5a5877c123584e86b17', case=False) | Hashes.str.contains(r'MD5=0a2ec9e3e236698185978a5fc76e74e6', case=False) | Hashes.str.contains(r'MD5=21ca6a013a75fcf6f930d4b08803973a', case=False) | Hashes.str.contains(r'MD5=e432956d19714c65723f9c407ffea0c5', case=False) | Hashes.str.contains(r'MD5=4e4b9bdcc6b8d97828ae1972d750a08d', case=False) | Hashes.str.contains(r'MD5=67e3b720cee8184c714585a85f8058a0', case=False) | Hashes.str.contains(r'MD5=03c9d5f24fd65ad57de2d8a2c7960a70', case=False) | Hashes.str.contains(r'MD5=f65e545771fd922693f0ec68b2141012', case=False) | Hashes.str.contains(r'MD5=7a16fca3d56c6038c692ec75b2bfee15', case=False) | Hashes.str.contains(r'MD5=5adebdb94abb4c76dad2b7ecb1384a9d', case=False) | Hashes.str.contains(r'MD5=003dc41d148ec3286dc7df404ba3f2aa', case=False) | Hashes.str.contains(r'MD5=0490f5961e0980792f5cb5aedf081dd7', case=False) | Hashes.str.contains(r'MD5=d3e40644a91327da2b1a7241606fe559', case=False) | Hashes.str.contains(r'MD5=49938383844ceec33dba794fb751c9a5', case=False) | Hashes.str.contains(r'MD5=f7393fb917aed182e4cbef25ce8af950', case=False) | Hashes.str.contains(r'MD5=549e5148be5e7be17f9d416d8a0e333e', case=False) | Hashes.str.contains(r'MD5=9a237fa07ce3ed06ea924a9bed4a6b99', case=False) | Hashes.str.contains(r'MD5=96fb2101f85fa81871256107bdd25169', case=False) | Hashes.str.contains(r'MD5=aa9adcf64008e13d7e68b56fdd307ead', case=False) | Hashes.str.contains(r'MD5=62eed4173c566a248531fb6f20a5900d', case=False) | Hashes.str.contains(r'MD5=87982977500b93330df08bf372435641', case=False) | Hashes.str.contains(r'MD5=9e0af1fe4d6dd2ca4721810ed1c930d6', case=False) | Hashes.str.contains(r'MD5=9b5533c4af38759d167d5399e83b475f', case=False) | Hashes.str.contains(r'MD5=bd5d4d07ae09e9f418d6b4ac6d9f2ed5', case=False) | Hashes.str.contains(r'MD5=22ca5fe8fb0e5e22e6fb0848108c03f4', case=False) | Hashes.str.contains(r'MD5=7b43dfd84de5e81162ebcfafb764b769', case=False) | Hashes.str.contains(r'MD5=ccb09eb78e047c931708149992c2e435', case=False) | Hashes.str.contains(r'MD5=8c1d181480796d7d3366a9381fd7782d', case=False) | Hashes.str.contains(r'MD5=b5192270857c1f17f7290acbaadf097d', case=False) | Hashes.str.contains(r'MD5=fe71c99a5830f94d77a8792741d6e6c7', case=False) | Hashes.str.contains(r'MD5=238769fd8379ec476c1114bd2bd28ca6', case=False) | Hashes.str.contains(r'MD5=cf7aeedd674417b648fc334d179c94ae', case=False) | Hashes.str.contains(r'MD5=52b7cd123f6d1b9ed76b08f2ee7d9433', case=False) | Hashes.str.contains(r'MD5=8d14b013fc2b555e404b1c3301150c34', case=False) | Hashes.str.contains(r'MD5=2e492f14a1087374368562d01cd609aa', case=False) | Hashes.str.contains(r'MD5=65e6718a547495c692e090d7887d247b', case=False) | Hashes.str.contains(r'MD5=51e7b58f6e9b776568ffbd4dd9972a60', case=False) | Hashes.str.contains(r'MD5=84c4d8ae023ca9bb60694fa467141247', case=False) | Hashes.str.contains(r'MD5=69ac6165912cb263a656497cc70155e6', case=False) | Hashes.str.contains(r'MD5=30efb7d485fc9c28fe82a97deac29626', case=False) | Hashes.str.contains(r'MD5=f4b2580cf0477493908b7ed81e4482f8', case=False) | Hashes.str.contains(r'MD5=fc6dadb97bd3b7a61d06f20d0d2e1bac', case=False) | Hashes.str.contains(r'MD5=595363661db3e50acc4de05b0215cc6f', case=False) | Hashes.str.contains(r'MD5=cec257dcac9e708cefb17f8984dd0a70', case=False) | Hashes.str.contains(r'MD5=0e51d96a3b878b396708535f49a6d7cb', case=False) | Hashes.str.contains(r'MD5=f34489c0f0d0a16b4db8a17281b57eba', case=False) | Hashes.str.contains(r'MD5=80b4041695810f98e1c71ff0cf420b6d', case=False) | Hashes.str.contains(r'MD5=7978d858168fadd05c17779da5f4695a', case=False) | Hashes.str.contains(r'MD5=557fd33ee99db6fe263cfcb82b7866b3', case=False) | Hashes.str.contains(r'MD5=7b9e1e5e8ff4f18f84108bb9f7b5d108', case=False) | Hashes.str.contains(r'MD5=9b91a44a488e4d539f2e55476b216024', case=False) | Hashes.str.contains(r'MD5=3b23808de1403961205352e94b8f2f9b', case=False) | Hashes.str.contains(r'MD5=13bd61916343d94ebefc9a7911d7bf88', case=False) | Hashes.str.contains(r'MD5=936729b8dc2282037bc1504c2680e3ad', case=False) | Hashes.str.contains(r'MD5=9f70cd5edcc4efc48ae21e04fb03be9d', case=False) | Hashes.str.contains(r'MD5=75e50ae2e0f783e0caf912f45e15248a', case=False) | Hashes.str.contains(r'MD5=444f538daa9f7b340cfd43974ed43690', case=False) | Hashes.str.contains(r'MD5=8b47c5580b130dd3f580af09323bc949', case=False) | Hashes.str.contains(r'MD5=daf11013cf4c879a54ed6a86a05bee3c', case=False) | Hashes.str.contains(r'MD5=eff3a9cc3e99ef3ddae57df72807f0c7', case=False) | Hashes.str.contains(r'MD5=9982da703f13140997e137b1e745a2e3', case=False) | Hashes.str.contains(r'MD5=f778489c7105a63e9e789a02412aaa5f', case=False) | Hashes.str.contains(r'MD5=723381977ce7df57ec623db52b84f426', case=False) | Hashes.str.contains(r'MD5=1db988eb9ac5f99756c33b91830a9cf6', case=False) | Hashes.str.contains(r'MD5=c02f70960fa934b8defa16a03d7f6556', case=False) | Hashes.str.contains(r'MD5=5e35c049bc8076406910da36edf9212d', case=False) | Hashes.str.contains(r'MD5=241a095631570a9cef4f126c87605c60', case=False) | Hashes.str.contains(r'MD5=bbe4f5f8b0c0f32f384a83ae31f49a00', case=False) | Hashes.str.contains(r'MD5=b418293e25632c5f377bf034bb450e57', case=False) | Hashes.str.contains(r'MD5=4f191abc652d8f7442ca2636725e1ed6', case=False) | Hashes.str.contains(r'MD5=34e55ccceec34a8567c8b95d662ba886', case=False) | Hashes.str.contains(r'MD5=4f5ca81806098204c4dea0927a8fec66', case=False) | Hashes.str.contains(r'MD5=8b287636041792f640f92e77e560725e', case=False) | Hashes.str.contains(r'MD5=56a515173b211832e20fbc64e5a0447c', case=False) | Hashes.str.contains(r'MD5=2315a8919cfb167e718d8c788ed3ceca', case=False) | Hashes.str.contains(r'MD5=2d465b4487dc81effaa84f122b71c24f', case=False) | Hashes.str.contains(r'MD5=29ccff428e5eb70ae429c3da8968e1ec', case=False) | Hashes.str.contains(r'MD5=28d6b138adc174a86c0f6248d8a88275', case=False) | Hashes.str.contains(r'MD5=9beecfb3146f19400880da61476ef940', case=False) | Hashes.str.contains(r'MD5=d5556c54c474cf0bff25804bfbe788d3', case=False) | Hashes.str.contains(r'MD5=f7a09ac4a91a6390f8d00bf09f53ae37', case=False) | Hashes.str.contains(r'MD5=0d6fef14f8e1ce5753424bd22c46b1ce', case=False) | Hashes.str.contains(r'MD5=06897b431c07886454e0681723dd53e6', case=False) | Hashes.str.contains(r'MD5=c533d6d64b474ffc3169a0e0fc0a701a', case=False) | Hashes.str.contains(r'MD5=c52dce2bee8ec88748411e470ff531f6', case=False) | Hashes.str.contains(r'MD5=71858fa117e6f3309606d5cdb57e6e09', case=False) | Hashes.str.contains(r'MD5=259381daae0357fbfefe1d92188c496a', case=False) | Hashes.str.contains(r'MD5=ceac1347acae9ad9496d4b0593256522', case=False) | Hashes.str.contains(r'MD5=4124de3cb72f5dfd7288389862b03f2a', case=False) | Hashes.str.contains(r'MD5=edbf206c27c3aa7d1890899dffcc03ec', case=False) | Hashes.str.contains(r'MD5=a5ff71e189b462d2b1f0e9e8c4668d79', case=False) | Hashes.str.contains(r'MD5=c49a1956a6a25ffc25ad97d6762b0989', case=False) | Hashes.str.contains(r'MD5=c475c7d0f2d934f150b6c32c01479134', case=False) | Hashes.str.contains(r'MD5=eb7f6d01c97783013115ad1a2833401a', case=False) | Hashes.str.contains(r'MD5=e98f4cc2cbf9ec23fd84da30c0625884', case=False) | Hashes.str.contains(r'MD5=bf74d0706f5ab9c34067192260f4efb0', case=False) | Hashes.str.contains(r'MD5=0752f113d983030939b4ab98b0812cf0', case=False) | Hashes.str.contains(r'MD5=7c22b7686c75a2bb7409b3c392cc791a', case=False) | Hashes.str.contains(r'MD5=07efb8259b42975d502a058db8a3fd21', case=False) | Hashes.str.contains(r'MD5=def0da6c95d14f7020e533028224250e', case=False) | Hashes.str.contains(r'MD5=d4a9f80ecb448da510e5bf82c4a699ee', case=False) | Hashes.str.contains(r'MD5=c5e7e8ca0d76a13a568901b6b304c3ba', case=False) | Hashes.str.contains(r'MD5=59f6320772a2e6b0b3587536be4cc022', case=False) | Hashes.str.contains(r'MD5=0cd2504a2e0a8ad81d9a3a6a1fad7306', case=False) | Hashes.str.contains(r'MD5=0ccc4e9396e0be9c4639faec53715831', case=False) | Hashes.str.contains(r'MD5=c15eb30e806ad5e771b23423fd2040b0', case=False) | Hashes.str.contains(r'MD5=f3d14fcdb86db8d75416ce173c6061af', case=False) | Hashes.str.contains(r'MD5=637f2708da54e792c27f1141d5bb09cd', case=False) | Hashes.str.contains(r'MD5=779af226b7b72ff9d78ce1f03d4a3389', case=False) | Hashes.str.contains(r'MD5=a17c58c0582ee560c72f60764ed63224', case=False) | Hashes.str.contains(r'MD5=c2c1b8c00b99e913d992a870ed478a24', case=False) | Hashes.str.contains(r'MD5=2b6a17ec50d3a21e030ed78f7acbd2af', case=False) | Hashes.str.contains(r'MD5=76bb1a4332666222a8e3e1339e267179', case=False) | Hashes.str.contains(r'MD5=0ef05030abd55ba6b02faa2c0970f67f', case=False) | Hashes.str.contains(r'MD5=56a9e9b5334f8698a0ede27c64140982', case=False) | Hashes.str.contains(r'MD5=9e0659d443a2b9d1afc75a160f500605', case=False) | Hashes.str.contains(r'MD5=bc6ff00fb3a14437c94b37ac9a2101d4', case=False) | Hashes.str.contains(r'MD5=2da209dde8188076a9579bd256dc90d0', case=False) | Hashes.str.contains(r'MD5=11dc5523bb559f8d2ce637f6a2b70dea', case=False) | Hashes.str.contains(r'MD5=12908c285b9d68ee1f39186110df0f1e', case=False) | Hashes.str.contains(r'MD5=73a40e29f61e5d142c8f42b28a351190', case=False) | Hashes.str.contains(r'MD5=0797bb21d7a0210fedf4f3533ee82494', case=False) | Hashes.str.contains(r'MD5=6846c2035b4c56b488d2ce2c69a57261', case=False) | Hashes.str.contains(r'MD5=dbf11f3fad1db3eb08e2ee24b5ebfb95', case=False) | Hashes.str.contains(r'MD5=41339c852c6e8e4c94323f500c87a79c', case=False) | Hashes.str.contains(r'MD5=ce57844fb185d0cdd9d3ce9e5b6a891d', case=False) | Hashes.str.contains(r'MD5=3ab94fba7196e84a97e83b15f7bcb270', case=False) | Hashes.str.contains(r'MD5=0291ced808eafe406d3d9b56d2fc0c26', case=False) | Hashes.str.contains(r'MD5=3836e2db9034543f63943cdbb52a691a', case=False) | Hashes.str.contains(r'MD5=0dff47f3b14fb1c1bad47cc517f0581a', case=False) | Hashes.str.contains(r'MD5=e8ebba56ea799e1e62748c59e1a4c586', case=False) | Hashes.str.contains(r'MD5=2c54859a67306e20bfdc8887b537de72', case=False) | Hashes.str.contains(r'MD5=4e67277648c63b79563360dac22b5492', case=False) | Hashes.str.contains(r'MD5=26ce59f9fc8639fd7fed53ce3b785015', case=False) | Hashes.str.contains(r'MD5=2927eac51c46944ab69ba81462fb9045', case=False) | Hashes.str.contains(r'MD5=1a6e12c2d11e208bdf72a8962120fae7', case=False) | Hashes.str.contains(r'MD5=daf800da15b33bf1a84ee7afc59f0656', case=False) | Hashes.str.contains(r'MD5=9cbdb5fb6dc63cb13f10b6333407cbb9', case=False) | Hashes.str.contains(r'MD5=9650db2ef0a44984845841ab24972ced', case=False) | Hashes.str.contains(r'MD5=96a8b535b5e14b582ca5679a3e2a5946', case=False) | Hashes.str.contains(r'MD5=33b3842172f21ba22982bfb6bffbda27', case=False) | Hashes.str.contains(r'MD5=2391fb461b061d0e5fccb050d4af7941', case=False) | Hashes.str.contains(r'MD5=8bf290b5eda99fc2697373a87f4e1927', case=False) | Hashes.str.contains(r'MD5=5fade7137c14a94b323f3b7886fba2a9', case=False) | Hashes.str.contains(r'MD5=a89ca92145fc330adced0dd005421183', case=False) | Hashes.str.contains(r'MD5=96421b56dbda73e9b965f027a3bda7ba', case=False) | Hashes.str.contains(r'MD5=d6e9f6c67d9b3d790d592557a7d57c3c', case=False) | Hashes.str.contains(r'MD5=6fa271b6816affaef640808fc51ac8af', case=False) | Hashes.str.contains(r'MD5=94d45bb36b13f4e936badb382fc133fe', case=False) | Hashes.str.contains(r'MD5=e027daa2f81961d09aef88093e107d93', case=False) | Hashes.str.contains(r'MD5=b1b8e6b85dd03c7f1290b1a071fc79c1', case=False) | Hashes.str.contains(r'MD5=07fc1e043654fdde56da98d93523635c', case=False) | Hashes.str.contains(r'MD5=118f3fdba730094d17aa1b259586aef6', case=False) | Hashes.str.contains(r'MD5=2714c93eb240375a2893ed7f8818004f', case=False) | Hashes.str.contains(r'MD5=641243746597fbd650e5000d95811ea3', case=False) | Hashes.str.contains(r'MD5=449bb1c656fa30de7702f17e35b11cd3', case=False) | Hashes.str.contains(r'MD5=96c850e53caca0469e1c4604e6c1aad1', case=False) | Hashes.str.contains(r'MD5=12cecc3c14160f32b21279c1a36b8338', case=False) | Hashes.str.contains(r'MD5=949ef0df929a71d6cc77494dfcb1ddeb', case=False) | Hashes.str.contains(r'MD5=8065a7659562005127673ac52898675f', case=False) | Hashes.str.contains(r'MD5=1033f0849180aac4b101a914bc8c53b4', case=False) | Hashes.str.contains(r'MD5=8f73c1c48ffddfca7d1a98faf83d18ff', case=False) | Hashes.str.contains(r'MD5=648adec580746afbbf59904c1e150c73', case=False) | Hashes.str.contains(r'MD5=e84605c8e290de6b92ce81d2f6a175d2', case=False) | Hashes.str.contains(r'MD5=300d6ac47a146eb8eb159f51bc13f7cf', case=False) | Hashes.str.contains(r'MD5=392d7180653b0ca77a78bdf15953d865', case=False) | Hashes.str.contains(r'MD5=f0e21ababe63668fb3fbd02e90cd1fa9', case=False) | Hashes.str.contains(r'MD5=e0bfbdf3793ea2742c03f5a82cb305a5', case=False) | Hashes.str.contains(r'MD5=00143c457c8885fd935fc5d5a6ba07a4', case=False) | Hashes.str.contains(r'MD5=c8d3784a3ab7a04ad34ea0aba32289ca', case=False) | Hashes.str.contains(r'MD5=9532893c1d358188d66b0d7b0784bb6b', case=False) | Hashes.str.contains(r'MD5=564d84a799db39b381a582a0b2f738c4', case=False) | Hashes.str.contains(r'MD5=fd3b7234419fafc9bdd533f48896ed73', case=False) | Hashes.str.contains(r'MD5=be5f46fd1056f02a7a241e052fa5888f', case=False) | Hashes.str.contains(r'MD5=2128e6c044ee86f822d952a261af0b48', case=False) | Hashes.str.contains(r'MD5=4b817d0e7714b9d43db43ae4a22a161e', case=False) | Hashes.str.contains(r'MD5=eaec88a63db9cf9cee53471263afe6fb', case=False) | Hashes.str.contains(r'MD5=ecdc79141b7002b246770d01606504f2', case=False) | Hashes.str.contains(r'MD5=ad866d83b4f0391aecceb4e507011831', case=False) | Hashes.str.contains(r'MD5=88a6d84f4f1cc188741271ac1999a4e9', case=False) | Hashes.str.contains(r'MD5=8580165a2803591e007380db9097bbcc', case=False) | Hashes.str.contains(r'MD5=5c4df33951d20253a98aa7b5e78e571a', case=False) | Hashes.str.contains(r'MD5=27d21eeff199ed555a29ca0ea4453cfb', case=False) | Hashes.str.contains(r'MD5=43bfc857406191963f4f3d9f1b76a7bf', case=False) | Hashes.str.contains(r'MD5=0fbf893691a376b168d8cdf427b89945', case=False) | Hashes.str.contains(r'MD5=1762105b28eb90d19e9ab3acde16ead6', case=False) | Hashes.str.contains(r'MD5=b41dcdb2e710dffba2d8ea1defb0f087', case=False) | Hashes.str.contains(r'MD5=c42caa9cdcc50c01cb2fed985a03fe23', case=False) | Hashes.str.contains(r'MD5=c516acb873c7f8c24a0431df8287756e', case=False) | Hashes.str.contains(r'MD5=343ada10d948db29251f2d9c809af204', case=False) | Hashes.str.contains(r'MD5=790ccca8341919bb8bb49262a21fca0e', case=False) | Hashes.str.contains(r'MD5=51207adb8dab983332d6b22c29fe8129', case=False) | Hashes.str.contains(r'MD5=f1e054333cc40f79cfa78e5fbf3b54c2', case=False) | Hashes.str.contains(r'MD5=7c4e513702a0322b0e3bce29dea9e3e9', case=False) | Hashes.str.contains(r'MD5=8ac6d458abbe4f5280996eb90235377c', case=False) | Hashes.str.contains(r'MD5=6a1ff4806c1a6e897208f48a1f5b062f', case=False) | Hashes.str.contains(r'MD5=a4531040276080441974d9e00d8d4cfa', case=False) | Hashes.str.contains(r'MD5=d1f9ffe5569642c8f8c10ed7ee5d9391', case=False) | Hashes.str.contains(r'MD5=09b3d078ffa3b4ed0ad2e477a2ee341f', case=False) | Hashes.str.contains(r'MD5=83601bbe5563d92c1fdb4e960d84dc77', case=False) | Hashes.str.contains(r'MD5=1414629b1ee93d2652ff49b2eb829940', case=False) | Hashes.str.contains(r'MD5=84b17daba8715089542641990c1ea3c2', case=False) | Hashes.str.contains(r'MD5=6ae4dec687ac6d1b635a4e351dddf73e', case=False) | Hashes.str.contains(r'MD5=9dfd73dadb2f1c7e9c9d2542981aaa63', case=False) | Hashes.str.contains(r'MD5=1e1a3d43bd598b231207ff3e70f78454', case=False) | Hashes.str.contains(r'MD5=07f83829e7429e60298440cd1e601a6a', case=False) | Hashes.str.contains(r'MD5=7c72a7e1d42b0790773efd8700e24952', case=False) | Hashes.str.contains(r'MD5=f41eea88057d3dd1a56027c4174eed22', case=False) | Hashes.str.contains(r'MD5=f53fa44c7b591a2be105344790543369', case=False) | Hashes.str.contains(r'MD5=08e06b839499cb4b752347399db41b57', case=False) | Hashes.str.contains(r'MD5=c3fea895fe95ea7a57d9f4d7abed5e71', case=False) | Hashes.str.contains(r'MD5=785045f8b25cd2e937ddc6b09debe01a', case=False) | Hashes.str.contains(r'MD5=53bb10742e10991af4ad280fcb134151', case=False) | Hashes.str.contains(r'MD5=76c643ab29d497317085e5db8c799960', case=False) | Hashes.str.contains(r'MD5=bce7f34912ff59a3926216b206deb09f', case=False) | Hashes.str.contains(r'MD5=c4f5619ce04d4bee38024d08513c77fd', case=False) | Hashes.str.contains(r'MD5=2a3ce41bb2a7894d939fbd1b20dae5a0', case=False) | Hashes.str.contains(r'MD5=86bec99cd121b0386a5acc1c368a9d49', case=False) | Hashes.str.contains(r'MD5=e076dadf37dd43a6b36aeed957abee9e', case=False) | Hashes.str.contains(r'MD5=4a85754636c694572ca9f440d254f5ce', case=False) | Hashes.str.contains(r'MD5=f4b7b84a6828d2f9205b55cf8cfc7742', case=False) | Hashes.str.contains(r'MD5=8f5b84350bfc4fe3a65d921b4bd0e737', case=False) | Hashes.str.contains(r'MD5=f9d04e99e4cab90973226a4555bc6d57', case=False) | Hashes.str.contains(r'MD5=bc5366760098dc14ec00ae36c359f42b', case=False) | Hashes.str.contains(r'MD5=b79475c4783efdd8122694c6b5669a79', case=False) | Hashes.str.contains(r'MD5=5f4a232d92480a1bebbe025ef64dc760', case=False) | Hashes.str.contains(r'MD5=1cff7b947f8c3dea1d34dc791fc78cdc', case=False) | Hashes.str.contains(r'MD5=69ba501a268f09f694ff0e8e208aa20e', case=False) | Hashes.str.contains(r'MD5=030c8432981e4d41b191624b3e07afe2', case=False) | Hashes.str.contains(r'MD5=c56a9ed0192c5a2b39691e54f2132a2f', case=False) | Hashes.str.contains(r'SHA1=38a863bcd37c9c56d53274753d5b0e614ba6c8bb', case=False) | Hashes.str.contains(r'SHA1=87d2b638e5dfab1e37961d27ca734b83ece02804', case=False) | Hashes.str.contains(r'SHA1=1a56614ea7d335c844b7fc6edd5feb59b8df7b55', case=False) | Hashes.str.contains(r'SHA1=f02af84393e9627ba808d4159841854a6601cf80', case=False) | Hashes.str.contains(r'SHA1=75649b228a22ce1e2a306844e0d48f714fb03f28', case=False) | Hashes.str.contains(r'SHA1=b242b0332b9c9e8e17ec27ef10d75503d20d97b6', case=False) | Hashes.str.contains(r'SHA1=eb93d2f564fea9b3dc350f386b45de2cd9a3e001', case=False) | Hashes.str.contains(r'SHA1=388068adc9ec46a0bbc8173bcb0d5f9cf8af6ea5', case=False) | Hashes.str.contains(r'SHA1=fce3a95b222c810c56e7ed5a3d7fb059eb693682', case=False) | Hashes.str.contains(r'SHA1=f4728f490d741b04b611164a7d997e34458e3a5e', case=False) | Hashes.str.contains(r'SHA1=4d516b1c9b7a81de2836ab24ba6b880c11807255', case=False) | Hashes.str.contains(r'SHA1=bda26e533ef971d501095950010081b772920afc', case=False) | Hashes.str.contains(r'SHA1=ec4cc6de4c779bb1ca1dd32ee3a03f7e8d633a9b', case=False) | Hashes.str.contains(r'SHA1=30a224b22592d952fbe2e6ad97eda4a8f2c734e0', case=False) | Hashes.str.contains(r'SHA1=b82c034e41d463f4e68b0a7d334f2d7611049bcb', case=False) | Hashes.str.contains(r'SHA1=8795df6494b724d9f279f007db33c24c27a91d08', case=False) | Hashes.str.contains(r'SHA1=b8d19cd28788ce4570623a5433b091a5fbd4c26d', case=False) | Hashes.str.contains(r'SHA1=10e15ba8ff8ed926ddd3636cec66a0f08c9860a4', case=False) | Hashes.str.contains(r'SHA1=72f16e6a18ba87248dd72f52445c916ad2e4edc2', case=False) | Hashes.str.contains(r'SHA1=c0568bcdf57db1fa43cdee5a2a12b768a0064622', case=False) | Hashes.str.contains(r'SHA1=ddbe809b731a0962e404a045ab9e65a0b64917ad', case=False) | Hashes.str.contains(r'SHA1=f1c8c3926d0370459a1b7f0cf3d17b22ff9d0c7f', case=False) | Hashes.str.contains(r'SHA1=0edf51a0fac3b90f6961c2b20bbaeb4ccfc1ea84', case=False) | Hashes.str.contains(r'SHA1=6102b73489e1d319c0db7b84cb2c426c5f680120', case=False) | Hashes.str.contains(r'SHA1=c16d7b2fbe69a28ccbcf87348903277f22805bf3', case=False) | Hashes.str.contains(r'SHA1=c21510569fd84a5fe04508aa28e3cf9c8cc45b7a', case=False) | Hashes.str.contains(r'SHA1=2207cdee7deaba1492ae2349392864f19eb4dfaf', case=False) | Hashes.str.contains(r'SHA1=2f86a4828ba86034f0c043db3e3db33aa2cf5da5', case=False) | Hashes.str.contains(r'SHA1=569f4605c65c2a217b28aefeb8570f9ea663e4b7', case=False) | Hashes.str.contains(r'SHA1=cd828ee0725f6185861fd0a9d3bd78f1d96e55bf', case=False) | Hashes.str.contains(r'SHA1=c8d87f3cd34c572870e63a696cf771580e6ea81b', case=False) | Hashes.str.contains(r'SHA1=af6e1f2cfb230907476e8b2d676129b6d6657124', case=False) | Hashes.str.contains(r'SHA1=7877bd7da617ec92a5c47f0da1f0abcf6484d905', case=False) | Hashes.str.contains(r'SHA1=3adea4a3a91504dc2e3c5e9247c6427cd5c73bab', case=False) | Hashes.str.contains(r'SHA1=55015f64783ddd148674a74d8137bcd6ccd6231d', case=False) | Hashes.str.contains(r'SHA1=f8d7369527cc6976283cc73cd761f93bd1cec49d', case=False) | Hashes.str.contains(r'SHA1=8fb149fc476cf5bf18dc575334edad7caf210996', case=False) | Hashes.str.contains(r'SHA1=091df975fa983e4ad44435ca092dbf84911f28a5', case=False) | Hashes.str.contains(r'SHA1=928d26cce64ad458e1f602cc2aea848e0b04eaaf', case=False) | Hashes.str.contains(r'SHA1=a7baff6666fc2d259c22f986b8a153c7b1d1d8be', case=False) | Hashes.str.contains(r'SHA1=90d73db752eac6ffc53555281fc5aa92297285ec', case=False) | Hashes.str.contains(r'SHA1=282bb241bda5c4c1b8eb9bf56d018896649ca0e1', case=False) | Hashes.str.contains(r'SHA1=a0bf00e4ef2b1a79ccf2361c6b303688641ed94c', case=False) | Hashes.str.contains(r'SHA1=4a2bb97d395634b67194856d79a1ee5209aa06a7', case=False) | Hashes.str.contains(r'SHA1=e0ee5ea6693c26f21b143ef9b133f53efe443b1e', case=False) | Hashes.str.contains(r'SHA1=c70989ed7a6ad9d7cd40ae970e90f3c3f2f84860', case=False) | Hashes.str.contains(r'SHA1=c9cbfdd0be7b35751a017ec59ff7237ffdc4df1f', case=False) | Hashes.str.contains(r'SHA1=c05df2e56e05b97e3ca8c6a61865cae722ed3066', case=False) | Hashes.str.contains(r'SHA1=dbf6e72c08824fe49c29b7660c9965c37d983e93', case=False) | Hashes.str.contains(r'SHA1=bed323603a33fa8b2fc7568149345184690f0390', case=False) | Hashes.str.contains(r'SHA1=2365a66c1eddfcf8385d9ff38ba8bd5f6f2e4fc2', case=False) | Hashes.str.contains(r'SHA1=59b0b8e3478f3d21213a8afda84181c4ed0a79a7', case=False) | Hashes.str.contains(r'SHA1=297fdf58e60d54bcddf2694c21ceb9da9ec17915', case=False) | Hashes.str.contains(r'SHA1=bfe55cacc7c56c9f7bd75bdb4b352c0b745d071b', case=False) | Hashes.str.contains(r'SHA1=adf9328e60c714ff0b98083bcf2f4ee2d58b960b', case=False) | Hashes.str.contains(r'SHA1=78834ff75e2ff8b7456e85114802e58bc9fda457', case=False) | Hashes.str.contains(r'SHA1=0a5ef5b72e621a639860c03f1cac499567082f39', case=False) | Hashes.str.contains(r'SHA1=aadaec4c31d661c249e4cf455ec752fffa3e5cfc', case=False) | Hashes.str.contains(r'SHA1=492a47426b04f00c0d5b711ad8c872aad3aa3a1d', case=False) | Hashes.str.contains(r'SHA1=064847af77afca8a879a9bf34cb87b64b5e69165', case=False) | Hashes.str.contains(r'SHA1=468cc011807704c04892ed209cf81d7896a12a0c', case=False) | Hashes.str.contains(r'SHA1=1013d5a0fd6074a8c40dbf3a88e3e06fbf3bcf41', case=False) | Hashes.str.contains(r'SHA1=fc62b746e0e726537bf848b48212f46db585af6d', case=False) | Hashes.str.contains(r'SHA1=dc0e97adb756c0f30b41840a59b85218cbdd198f', case=False) | Hashes.str.contains(r'SHA1=eceb51233f013e04406da11482324d45e70281c7', case=False) | Hashes.str.contains(r'SHA1=ff9887cfd695916a06319b3a96f7ab2e6343a20e', case=False) | Hashes.str.contains(r'SHA1=67e87ca093da64a23cf0fc0be2b35e03d1bf1543', case=False) | Hashes.str.contains(r'SHA1=b9807b8840327c6d7fbdde45fc27de921f1f1a82', case=False) | Hashes.str.contains(r'SHA1=62244c704b0f227444d3a515ea0dc1003418a028', case=False) | Hashes.str.contains(r'SHA1=4d6e532830058fadd861ff9eac16de8cfc6974ce', case=False) | Hashes.str.contains(r'SHA1=ebced350ea447df8e10ebb080e3a3e5b32aca348', case=False) | Hashes.str.contains(r'SHA1=6de3d5c2e33d91eef975a30bc07b0e53a68e77b8', case=False) | Hashes.str.contains(r'SHA1=d5fd9fe10405c4f90235e583526164cd0902ed86', case=False) | Hashes.str.contains(r'SHA1=0be77bb3720283c9a970a97dab25d2a312e86110', case=False) | Hashes.str.contains(r'SHA1=213ba055863d4226da26a759e8a254062ea77814', case=False) | Hashes.str.contains(r'SHA1=9099482b26e9ba8e1d303418afc9111a3bffd6b3', case=False) | Hashes.str.contains(r'SHA1=623cd2abef6c92255f79cbbd3309cb59176771da', case=False) | Hashes.str.contains(r'SHA1=f6b3577ea4b1a5641ae3421151a26268434c3db8', case=False) | Hashes.str.contains(r'SHA1=01a578a3a39697c4de8e3dab04dba55a4c35163e', case=False) | Hashes.str.contains(r'SHA1=461882bd59887617cadc1c7b2b22d0a45458c070', case=False) | Hashes.str.contains(r'SHA1=f6d826d73bf819dbc9a058f2b55c88d6d4b634e3', case=False) | Hashes.str.contains(r'SHA1=8278db134d3b505c735306393fdf104d014fb3bf', case=False) | Hashes.str.contains(r'SHA1=22c909898f5babe37cc421b4f5ed0522196f8127', case=False) | Hashes.str.contains(r'SHA1=e8311ba74bc6b35b1171b81056d0148913b1d61c', case=False) | Hashes.str.contains(r'SHA1=3eea0f5fb180c6f865fc83ac75ef3ad5b1376775', case=False) | Hashes.str.contains(r'SHA1=8e2511ae90643584ceb0d98f0f780cd6b7290604', case=False) | Hashes.str.contains(r'SHA1=8a922499f7a1b978555b46c30f90de1339760c74', case=False) | Hashes.str.contains(r'SHA1=2540205480ea3d59e4031de3c6632e3ce2596459', case=False) | Hashes.str.contains(r'SHA1=8edcd4b35f5ae88d14e83252390659c6fc79eae3', case=False) | Hashes.str.contains(r'SHA1=aaffdc89befa42e375f822366bbded8c245baf94', case=False) | Hashes.str.contains(r'SHA1=1d9fd846e12104ae31fd6f6040b93fc689abf047', case=False) | Hashes.str.contains(r'SHA1=3d3b42d7b0af68da01019274e341b03d7c54f752', case=False) | Hashes.str.contains(r'SHA1=88811e1a542f33431b9f8b74cb8bf27209b27f17', case=False) | Hashes.str.contains(r'SHA1=67b45c1e204d44824cd7858455e1acedbd7ffbb3', case=False) | Hashes.str.contains(r'SHA1=fff7ee0febb8c93539220ca49d4206616e15c666', case=False) | Hashes.str.contains(r'SHA1=205c69f078a563f54f4c0da2d02a25e284370251', case=False) | Hashes.str.contains(r'SHA1=d302ae7f016299af323a3542d840004888ab91ff', case=False) | Hashes.str.contains(r'SHA1=15d1a6a904c8409fb47a82aefa42f8c3c7d8c370', case=False) | Hashes.str.contains(r'SHA1=228b1ff5cd519faa15d9c2f8cfefd7e683bc3f2b', case=False) | Hashes.str.contains(r'SHA1=63cf021c8662fa23ce3e4075a4f849431e473058', case=False) | Hashes.str.contains(r'SHA1=ca4d2bd6022f71e1a48b08728c0ac83c68e91281', case=False) | Hashes.str.contains(r'SHA1=d43b2ac1221f2eaf2c170788280255cfef3edd72', case=False) | Hashes.str.contains(r'SHA1=db3ce886a47027c09bb668c7049362ab86c82ceb', case=False) | Hashes.str.contains(r'SHA1=e5114fd50904c7fb75d8c86367b9a2dd4f79dfb1', case=False) | Hashes.str.contains(r'SHA1=745bad097052134548fe159f158c04be5616afc2', case=False) | Hashes.str.contains(r'SHA1=a7d827a41b2c4b7638495cd1d77926f1ba902978', case=False) | Hashes.str.contains(r'SHA1=0e47bd9b67500a67ce18c24328d6d0db8ae2c493', case=False) | Hashes.str.contains(r'SHA1=ef95f500b60c49f40ed6ce3014ffdb294b301e95', case=False) | Hashes.str.contains(r'SHA1=2ee7b3f6bcc9e95a9ae60bcb9bbc483b0400077d', case=False) | Hashes.str.contains(r'SHA1=b3f5185d7824ea2c2d931c292f4d8f77903a4d2a', case=False) | Hashes.str.contains(r'SHA1=029c678674f482ababe8bbfdb93152392457109d', case=False) | Hashes.str.contains(r'SHA1=aadebbcbde0e7edd35e29d98871289a75e744aad', case=False) | Hashes.str.contains(r'SHA1=a88546fb61a2fa7dab978a9cb678469e8f0ed475', case=False) | Hashes.str.contains(r'SHA1=90abd7670c84c47e6ffc45c67d676db8c12b1939', case=False) | Hashes.str.contains(r'SHA1=4fe873544c34243826489997a5ff14ed39dd090d', case=False) | Hashes.str.contains(r'SHA1=d06d119579156b1ec732c50f0f64358762eb631a', case=False) | Hashes.str.contains(r'SHA1=27eab595ec403580236e04101172247c4f5d5426', case=False) | Hashes.str.contains(r'SHA1=d1670bd08cfd376fc2b70c6193f3099078f1d72f', case=False) | Hashes.str.contains(r'SHA1=7ee675f0106e36d9159c5507b96c3237fb9348cd', case=False) | Hashes.str.contains(r'SHA1=fde6ab389a6e0a9b2ef1713df9d43cca5f1f3da8', case=False) | Hashes.str.contains(r'SHA1=d61acd857242185a56e101642d15b9b5f0558c26', case=False) | Hashes.str.contains(r'SHA1=9d44260558807daff61a0cc0c6a8719c3adacd2d', case=False) | Hashes.str.contains(r'SHA1=3f17ff83dc8a5f875fb1b3a5d3b9fcbe407a99f0', case=False) | Hashes.str.contains(r'SHA1=4a235f0b84ff615e2879fa9e0ec0d745fcfdaa5c', case=False) | Hashes.str.contains(r'SHA1=a951953e3c1bb08653ed7b0daec38be7b0169c27', case=False) | Hashes.str.contains(r'SHA1=35f803d483af51762bee3ec130de6a03362ce920', case=False) | Hashes.str.contains(r'SHA1=ed3f11383a47710fa840e13a7a9286227fa1474c', case=False) | Hashes.str.contains(r'SHA1=004d9353f334e42c79a12c3a31785a96f330bbef', case=False) | Hashes.str.contains(r'SHA1=0b77242d4e920f2fcb2b506502cfe3985381defc', case=False) | Hashes.str.contains(r'SHA1=8146ed4a9c9a2f7e7aeae0a0539610c3c1cd3563', case=False) | Hashes.str.contains(r'SHA1=2261198385d62d2117f50f631652eded0ecc71db', case=False) | Hashes.str.contains(r'SHA1=947db58d6f36a8df9fa2a1057f3a7f653ccbc42e', case=False) | Hashes.str.contains(r'SHA1=ef0504dd90eb451f51d2c4f987fb7833c91c755b', case=False) | Hashes.str.contains(r'SHA1=34b2986f1ff5146f7145433f1ef5dfe6210131d0', case=False) | Hashes.str.contains(r'SHA1=472cc191937349a712aabcbc4d118c1c982ab7c9', case=False) | Hashes.str.contains(r'SHA1=7c43d43d95232e37aa09c5e2bcd3a7699d6b7479', case=False) | Hashes.str.contains(r'SHA1=de2c073c8b4db6ffd11a99784d307f880444e5d3', case=False) | Hashes.str.contains(r'SHA1=e88259de797573fa515603ad3354aed0bce572f1', case=False) | Hashes.str.contains(r'SHA1=f70eb454c0e9ea67a18c625faf7a666665801035', case=False) | Hashes.str.contains(r'SHA1=4a2e034d2702aba6bca5d9405ba533ed1274ff0c', case=False) | Hashes.str.contains(r'SHA1=8788f4b39cbf037270904bdb8118c8b037ee6562', case=False) | Hashes.str.contains(r'SHA1=d94f2fb3198e14bfe69b44fb9f00f2551f7248b2', case=False) | Hashes.str.contains(r'SHA1=ac600a2bc06b312d92e649b7b55e3e91e9d63451', case=False) | Hashes.str.contains(r'SHA1=4b009e91bae8d27b160dc195f10c095f8a2441e1', case=False) | Hashes.str.contains(r'SHA1=5b866f522bcdf80e6a9fda71b385f917317f6551', case=False) | Hashes.str.contains(r'SHA1=4a7d66874a0472a47087fabaa033a85d47413379', case=False) | Hashes.str.contains(r'SHA1=517504aaf8afc9748d6aec657d46a6f7bbc60c09', case=False) | Hashes.str.contains(r'SHA1=f0d6b0bcd5f47b41d3c3192e244314d99d1df409', case=False) | Hashes.str.contains(r'SHA1=3f43412c563889a5f5350f415f7040a71cc25221', case=False) | Hashes.str.contains(r'SHA1=8031ecbff95f299b53113ccd105582defad38d7b', case=False) | Hashes.str.contains(r'SHA1=a6fe4f30ca7cb94d74bc6d42cdd09a136056952e', case=False) | Hashes.str.contains(r'SHA1=55c64235d223baeb8577a2445fdaa6bedcde23db', case=False) | Hashes.str.contains(r'SHA1=12154f58b68902a40a7165035d37974128deb902', case=False) | Hashes.str.contains(r'SHA1=fa60a89980aad30db3a358fb1c1536a4d31dff6c', case=False) | Hashes.str.contains(r'SHA1=d0d39e1061f30946141b6ecfa0957f8cc3ddeb63', case=False) | Hashes.str.contains(r'SHA1=9310239b75394b75a963336fbd154038fc13c4e3', case=False) | Hashes.str.contains(r'SHA1=7673cebd15488cbbb4ca65209f92faab3f933205', case=False) | Hashes.str.contains(r'SHA1=3a3342f4ca8cc45c6b86f64b1a7d7659020b429f', case=False) | Hashes.str.contains(r'SHA1=190c20e130a9156442eebcf913746c69b9485eec', case=False) | Hashes.str.contains(r'SHA1=3c9c86c0b215ecbab0eeb4479c204dba65258b8e', case=False) | Hashes.str.contains(r'SHA1=8dc2097a90eb7e9d6ee31a7c7a95e7a0b2093b89', case=False) | Hashes.str.contains(r'SHA1=c00ad2a252b53cf2d0dc74b53d1af987982e1ad1', case=False) | Hashes.str.contains(r'SHA1=3f223581409492172a1e875f130f3485b90fbe5f', case=False) | Hashes.str.contains(r'SHA1=ea877092d57373cb466b44e7dbcad4ce9a547344', case=False) | Hashes.str.contains(r'SHA1=7cd4aea9c1f82111bf7f9d4934be95e9bb6f8ae0', case=False) | Hashes.str.contains(r'SHA1=d32408c3b79b1f007331d2a3c78b1a7e96f37f79', case=False) | Hashes.str.contains(r'SHA1=a6a71fb4f91080aff2a3a42811b4bd86fb22168d', case=False) | Hashes.str.contains(r'SHA1=a0c7c913d7b5724a46581b6e00dd72c26c37794d', case=False) | Hashes.str.contains(r'SHA1=6f8b0e1c7d7bd7beed853e0d51ca03f143e5b703', case=False) | Hashes.str.contains(r'SHA1=91ee32b464f6385fc8c44b867ca3dec665cbe886', case=False) | Hashes.str.contains(r'SHA1=976777d39d73034df6b113dfce1aa6e1d00ffcfd', case=False) | Hashes.str.contains(r'SHA1=75dd52e28c40cd22e38ae2a74b52eb0cddfcb2c4', case=False) | Hashes.str.contains(r'SHA1=14bf0eaa90e012169745b3e30c281a327751e316', case=False) | Hashes.str.contains(r'SHA1=f9cced7ccdc1f149ad8ad13a264c4425aee89b8e', case=False) | Hashes.str.contains(r'SHA1=4e826430a1389032f3fe06e2cc292f643fb0c417', case=False) | Hashes.str.contains(r'SHA1=e4e40032376279e29487afc18527804dce792883', case=False) | Hashes.str.contains(r'SHA1=bebf97411946749b9050989d9c40352dbe8269ea', case=False) | Hashes.str.contains(r'SHA1=cfcecf6207d16aeb0af29aac8a4a2f104483018e', case=False) | Hashes.str.contains(r'SHA1=b21cba198d721737aabd882ada6c91295a5975ed', case=False) | Hashes.str.contains(r'SHA1=8f540936f2484d020e270e41529624407b7e107e', case=False) | Hashes.str.contains(r'SHA1=32888d789edc91095da2e0a5d6c564c2aebcee68', case=False) | Hashes.str.contains(r'SHA1=10fc6933deb7de9813e07d864ce03334a4f489d9', case=False) | Hashes.str.contains(r'SHA1=09d3ff3c57f5154735e676f2c0a10b5e51336bb3', case=False) | Hashes.str.contains(r'SHA1=d022f5e3c1bba43871af254a16ab0e378ea66184', case=False) | Hashes.str.contains(r'SHA1=6c445ceb38d5b1212ce2e7498888dd9562a57875', case=False) | Hashes.str.contains(r'SHA1=cf9b4d606467108e4b845ecb8ede2f5865bd6c33', case=False) | Hashes.str.contains(r'SHA1=c4ce0bb8a939c4f4cff955d9b3cdd9eb52746cc9', case=False) | Hashes.str.contains(r'SHA1=8325e8d7fd2edc126dcf1089dee8da64e79fb12e', case=False) | Hashes.str.contains(r'SHA1=2bb68b195f66f53f90f17b364928929d5b2883b5', case=False) | Hashes.str.contains(r'SHA1=d3a6f86245212e1ef9e0e906818027ec14a239cb', case=False) | Hashes.str.contains(r'SHA1=5672e2212c3b427c1aef83fcd725b587a3d3f979', case=False) | Hashes.str.contains(r'SHA1=7cee31d3aaee8771c872626feedeeb5d09db008c', case=False) | Hashes.str.contains(r'SHA1=a00e444120449e35641d58e62ed64bb9c9f518d2', case=False) | Hashes.str.contains(r'SHA1=4f0d9122f57f4f8df41f3c3950359eb1284b9ab5', case=False) | Hashes.str.contains(r'SHA1=59c4960851af9240dded4173c4f823727af19512', case=False) | Hashes.str.contains(r'SHA1=ace6b9e34e3e2e73fe584f3bbdb4e4ec106e0a7d', case=False) | Hashes.str.contains(r'SHA1=9393698058ce1187eb87e8c148cfe4804761142d', case=False) | Hashes.str.contains(r'SHA1=ed219d966a6e74275895cc0b975b79397760ea9f', case=False) | Hashes.str.contains(r'SHA1=4dba2ac32ed58ead57dd36b18d1cb30cc1c7b9aa', case=False) | Hashes.str.contains(r'SHA1=d2be76e79741454b4611675b58446e10fc3d0c6c', case=False) | Hashes.str.contains(r'SHA1=e83458c4a6383223759cd8024e60c17be4e7c85f', case=False) | Hashes.str.contains(r'SHA1=6b54b8f7edca5fb25a8ef1a1d31e14b9738db579', case=False) | Hashes.str.contains(r'SHA1=52d9bbe41eea0b60507c469f7810d80343c03c2b', case=False) | Hashes.str.contains(r'SHA1=f7330a6a4d9df2f35ab93a28c8ee1eb14a74be6e', case=False) | Hashes.str.contains(r'SHA1=589a7d4df869395601ba7538a65afae8c4616385', case=False) | Hashes.str.contains(r'SHA1=61d44c9a1ef992bc29502f725d1672d551b9bc3f', case=False) | Hashes.str.contains(r'SHA1=da689e8e0e3fc4c7114b44d185eef4c768e15946', case=False) | Hashes.str.contains(r'SHA1=170a50139f95ad1ec94d51fdd94c1966dbed0e47', case=False) | Hashes.str.contains(r'SHA1=05c0c49e8bcf11b883d41441ce87a2ee7a3aba1d', case=False) | Hashes.str.contains(r'SHA1=bfff0073c936b9a7e2ad6848deb6f9bf03205488', case=False) | Hashes.str.contains(r'SHA1=1586f121d38cc42e5d04fe2f56091e91c6cdd8fa', case=False) | Hashes.str.contains(r'SHA1=96ec8c16f6a54b48e9a7f0d0416a529f4bf9ac11', case=False) | Hashes.str.contains(r'SHA1=bbc1e5fd826961d93b76abd161314cb3592c4436', case=False) | Hashes.str.contains(r'SHA1=4d4535c111c7b568cb8a3bece27a97d738512a6b', case=False) | Hashes.str.contains(r'SHA1=258f1cdc79bd20c2e6630a0865abfe60473b98d5', case=False) | Hashes.str.contains(r'SHA1=4789b910023a667bee70ff1f1a8f369cffb10fe8', case=False) | Hashes.str.contains(r'SHA1=2c2fc258871499b206963c0f933583cedcdf9ea2', case=False) | Hashes.str.contains(r'SHA1=6a2912c8e2aa4373852585bc1134b83c637bc9fd', case=False) | Hashes.str.contains(r'SHA1=9923c8f1e565a05b3c738d283cf5c0ed61a0b90f', case=False) | Hashes.str.contains(r'SHA1=1951ae94c6ee63fa801208771b5784f021c70c60', case=False) | Hashes.str.contains(r'SHA1=8b53284fb23d34ca144544b19f8fba63700830d8', case=False) | Hashes.str.contains(r'SHA1=6bfeac43be3ebd8d95a5eba963e18d97d76d2b05', case=False) | Hashes.str.contains(r'SHA1=2ae1456bb0fa5a016954b03967878fb6db4d81eb', case=False) | Hashes.str.contains(r'SHA1=63f9ee1e7aefd961cf36eeffd455977f1b940f6c', case=False) | Hashes.str.contains(r'SHA1=ac13941f436139b909d105ad55637e1308f49d9a', case=False) | Hashes.str.contains(r'SHA1=baa94f0f816d7a41a63e7f1aa9dd3d64a9450ed0', case=False) | Hashes.str.contains(r'SHA1=c52cef5b9e1d4a78431b7af56a6fdb6aa1bcad65', case=False) | Hashes.str.contains(r'SHA1=bff4c3696d81002c56f473a8ab353ef0e45854c0', case=False) | Hashes.str.contains(r'SHA1=64df813dc0774ef57d21141dcb38d08059fd8660', case=False) | Hashes.str.contains(r'SHA1=bdfb1a2b08d823009c912808425b357d22480ecc', case=False) | Hashes.str.contains(r'SHA1=470633a3a1e1b1f13c3f6c5192ce881efd206d7c', case=False) | Hashes.str.contains(r'SHA1=65f6a4a23846277914d90ba6c12742eecf1be22d', case=False) | Hashes.str.contains(r'SHA1=ed40c1f7da98634869b415530e250f4a665a8c48', case=False) | Hashes.str.contains(r'SHA1=1ab702c495cb7832d4cc1ff896277fa56ed8f30d', case=False) | Hashes.str.contains(r'SHA1=684786de4b3b3f53816eae9df5f943a22c89601f', case=False) | Hashes.str.contains(r'SHA1=b3b523504af5228c49060ec8dea9f8adce05e117', case=False) | Hashes.str.contains(r'SHA1=108575d8f0b98fed29514a54052f7bf5a8cb3ff0', case=False) | Hashes.str.contains(r'SHA1=8fafd70bae94bbc22786c9328ee9126fed54dbae', case=False) | Hashes.str.contains(r'SHA1=d3b23a0b70d6d279abd8db109f08a8b0721ce327', case=False) | Hashes.str.contains(r'SHA1=190ec384e6eb1dafca80df05055ead620b2502ba', case=False) | Hashes.str.contains(r'SHA1=6b25acbcb41a593aca6314885572fc22d16582a2', case=False) | Hashes.str.contains(r'SHA1=341225961c15a969c62de38b4ec1938f65fda178', case=False) | Hashes.str.contains(r'SHA1=faa870b0cb15c9ac2b9bba5d0470bd501ccd4326', case=False) | Hashes.str.contains(r'SHA1=5812387783d61c6ab5702213bb968590a18065e3', case=False) | Hashes.str.contains(r'SHA1=e700fcfae0582275dbaee740f4f44b081703d20d', case=False) | Hashes.str.contains(r'SHA1=a2167b723dfb24bf8565cbe2de0ecce77307fb9e', case=False) | Hashes.str.contains(r'SHA1=7cf7644e38746c9be4537b395285888d5572ae1b', case=False) | Hashes.str.contains(r'SHA1=3b8ddf860861cc4040dea2d2d09f80582547d105', case=False) | Hashes.str.contains(r'SHA1=1a17cc64e47d3db7085a4dc365049a2d4552dc8a', case=False) | Hashes.str.contains(r'SHA1=9b3f57693f0f69d3729762d59a10439e738b9031', case=False) | Hashes.str.contains(r'SHA1=63bb17160115f16b3fca1f028b13033af4e468c6', case=False) | Hashes.str.contains(r'SHA1=631fdd1ef2d6f2d98e36f8fc7adbf90fbfb0a1e8', case=False) | Hashes.str.contains(r'SHA1=06ec56736c2fc070066079bb628c17b089b58f6c', case=False) | Hashes.str.contains(r'SHA1=d1ba4c95697a25ec265a3908acbff269e29e760c', case=False) | Hashes.str.contains(r'SHA1=e40182c106f6f09fd79494686329b95477d6beb5', case=False) | Hashes.str.contains(r'SHA1=c74f6293be68533995e4b95469e6dddedd1c3905', case=False) | Hashes.str.contains(r'SHA1=ec457a53ea03287cbbd1edcd5f27835a518ef144', case=False) | Hashes.str.contains(r'SHA1=1a01f3bdbfae4f8111674068a001aaf3363f21ea', case=False) | Hashes.str.contains(r'SHA1=ce1d0ebaeaa4fe3ecb49242f1e80bc7a4e43fd8c', case=False) | Hashes.str.contains(r'SHA1=f77413ec3bd9ed3f31fc53a4c755dc4123e0068f', case=False) | Hashes.str.contains(r'SHA1=17614fdee3b89272e99758983b99111cbb1b312c', case=False) | Hashes.str.contains(r'SHA1=8b63eb0f5dbb844ee5f6682f0badef872ae569bf', case=False) | Hashes.str.contains(r'SHA1=c4d7fb9db3c3459f7e8c0e3d48c95c7c9c4cff60', case=False) | Hashes.str.contains(r'SHA1=c8674fe95460a37819e06d9df304254931033ca7', case=False) | Hashes.str.contains(r'SHA1=273634ac170d1a6abd32e0db597376a6f62eb59e', case=False) | Hashes.str.contains(r'SHA1=dd4cd182192b43d4105786ba87f55a036ec45ef2', case=False) | Hashes.str.contains(r'SHA1=f9eb4c942a89b4ba39d2bdbfd23716937ccb9925', case=False) | Hashes.str.contains(r'SHA1=94144619920bd086028bb5647b1649a35438028c', case=False) | Hashes.str.contains(r'SHA1=2871a631f36cd1ea2fd268036087d28070ef2c52', case=False) | Hashes.str.contains(r'SHA1=57cf65b024d9e2831729def42db2362d7c90dcfa', case=False) | Hashes.str.contains(r'SHA1=d3daa971580b9f94002f7257de44fcef13bb1673', case=False) | Hashes.str.contains(r'SHA1=8ac5703e67c3e6e0585cb8dbb86d196c5362f9bb', case=False) | Hashes.str.contains(r'SHA1=756fd2b82bf92538786b1bd283c6ef2f9794761e', case=False) | Hashes.str.contains(r'SHA1=c775ca665ed4858acc3f7e75e025cbbda1f8c687', case=False) | Hashes.str.contains(r'SHA1=a8be6203c5a87ecc3ae1c452b7b6dbdf3a9f82ae', case=False) | Hashes.str.contains(r'SHA1=085c0ea6980cb93a3afa076764b7866467ac987c', case=False) | Hashes.str.contains(r'SHA1=09f117d83f2f206ee37f1eb19eea576a0ac9bdcc', case=False) | Hashes.str.contains(r'SHA1=c41ff2067634a1cce6b8ec657cdfd87e7f6974e3', case=False) | Hashes.str.contains(r'SHA1=ddec18909571a9d5992f93636628756b7aa9b9a2', case=False) | Hashes.str.contains(r'SHA1=fbf8b0613a2f7039aeb9fa09bd3b40c8ff49ded2', case=False) | Hashes.str.contains(r'SHA1=06ec62c590ca0f1f2575300c151c84640d2523c0', case=False) | Hashes.str.contains(r'SHA1=f95b59cab63408343ecbdb0e71db34e83f75b503', case=False) | Hashes.str.contains(r'SHA1=1f7501e01d84a2297c85cb39880ec4e40ac3fe8a', case=False) | Hashes.str.contains(r'SHA1=9360774a37906e3b3c9fab39721cb9400dd31c46', case=False) | Hashes.str.contains(r'SHA1=2a6e6bd51c7062ad24c02a4d2c1b5e948908d131', case=False) | Hashes.str.contains(r'SHA1=dc393d30453daa1f853f47797e48c142ac77a37b', case=False) | Hashes.str.contains(r'SHA1=b70321d078f2e9c9826303bdc87ba9b7be290807', case=False) | Hashes.str.contains(r'SHA1=4cd5bf02edf6883a08dfed7702267612e21ed56e', case=False) | Hashes.str.contains(r'SHA1=910cb12aa49e9f35ecc4907e8304adf0dcca8cf1', case=False) | Hashes.str.contains(r'SHA1=296757d5663290f172e99e60b9059f989cba4c4e', case=False) | Hashes.str.contains(r'SHA1=0caf4e86b14aaab7e10815389fcd635988bc6637', case=False) | Hashes.str.contains(r'SHA1=449ff4f5ce2fdddac05a6c82e45a7e802b1c1305', case=False) | Hashes.str.contains(r'SHA1=2dfcb799b3c42ecb0472e27c19b24ac7532775ce', case=False) | Hashes.str.contains(r'SHA1=f5696fb352a3fbd14fb1a89ad21a71776027f9ab', case=False) | Hashes.str.contains(r'SHA1=4818d7517054d5cba38b679bdf7f8495fd152729', case=False) | Hashes.str.contains(r'SHA1=47df454cb030c1f4f7002d46b1308a32b03148e7', case=False) | Hashes.str.contains(r'SHA1=28fa0e9429af24197134306b6c7189263e939136', case=False) | Hashes.str.contains(r'SHA1=186b6523e8e2fa121d6d3b8cb106e9a5b918af4f', case=False) | Hashes.str.contains(r'SHA1=9dbd255ee29be0e552f7f5f30d6ffb97e6cd0b0d', case=False) | Hashes.str.contains(r'SHA1=76a756cc61653abcadd63db4a74c48d92607a861', case=False) | Hashes.str.contains(r'SHA1=15df139494d2c40a645fb010908551185c27f3c5', case=False) | Hashes.str.contains(r'SHA1=64879accdb4dbbaac55d91185c82f2b193f0c869', case=False) | Hashes.str.contains(r'SHA1=55777e18eb95b6c9c3e6df903f0ac36056fa83da', case=False) | Hashes.str.contains(r'SHA1=d7f7594ff084201c0d9fa2f4ef1626635b67bce5', case=False) | Hashes.str.contains(r'SHA1=135b261eb03e830c57b1729e3a4653f9c27c7522', case=False) | Hashes.str.contains(r'SHA1=deaf7d0c934cc428981ffa5bf528ca920bc692dc', case=False) | Hashes.str.contains(r'SHA1=309a799f1a00868ab05cdbb851b3297db34d9b0d', case=False) | Hashes.str.contains(r'SHA1=d5beca70469e0dcb099ba35979155e7c91876fd2', case=False) | Hashes.str.contains(r'SHA1=376d59d0b19905ebb9b89913a5bdfacde1bd5a1e', case=False) | Hashes.str.contains(r'SHA1=460008b1ffd31792a6deadfa6280fb2a30c8a5d2', case=False) | Hashes.str.contains(r'SHA1=dfd801b6c2715f5525f8ffb38e3396a5ad9b831d', case=False) | Hashes.str.contains(r'SHA1=92befb8b3d17bd3f510d09d464ec0131f8a43b8f', case=False) | Hashes.str.contains(r'SHA1=b671677079bf7c660579bee08b8875a48ff61896', case=False) | Hashes.str.contains(r'SHA1=0d6fb0cb9566b4e4ca4586f26fe0631ffa847f2c', case=False) | Hashes.str.contains(r'SHA1=bca4bbe4388ebeb834688e97fac281c09b0f3ac1', case=False) | Hashes.str.contains(r'SHA1=0b3836d5d98bc8862a380aae19caa3e77a2d93ef', case=False) | Hashes.str.contains(r'SHA1=b394f84e093cb144568e18aaf5b857dff77091fa', case=False) | Hashes.str.contains(r'SHA1=7329bb4a7ca98556fa6b05bd4f9b236186e845d1', case=False) | Hashes.str.contains(r'SHA1=0307d76750dd98d707c699aee3b626643afb6936', case=False) | Hashes.str.contains(r'SHA1=e22495d92ac3dcae5eeb1980549a9ead8155f98a', case=False) | Hashes.str.contains(r'SHA1=2740cd167a9ccb81c8e8719ce0d2ae31babc631c', case=False) | Hashes.str.contains(r'SHA1=77a011b5d5d5aaf421a543fcee22cb7979807c60', case=False) | Hashes.str.contains(r'SHA1=a197a02025946aca96d6e74746f84774df31249e', case=False) | Hashes.str.contains(r'SHA1=82ba5513c33e056c3f54152c8555abf555f3e745', case=False) | Hashes.str.contains(r'SHA1=c71597c89bd8e937886e3390bc8ac4f17cdeae7c', case=False) | Hashes.str.contains(r'SHA1=4a705af959af61bad48ef7579f839cb5ebd654d2', case=False) | Hashes.str.contains(r'SHA1=e71caa502d0fe3a7383ce26285a6022e63acda97', case=False) | Hashes.str.contains(r'SHA1=446130c61555e5c9224197963d32e108cd899ea0', case=False) | Hashes.str.contains(r'SHA1=218e4bbdd5ce810c48b938307d01501c442b75f4', case=False) | Hashes.str.contains(r'SHA1=57511ef5ff8162a9d793071b5bf7ebe8371759de', case=False) | Hashes.str.contains(r'SHA1=0cb14c1049c0e81c8655ab7ee7d698c11758ea06', case=False) | Hashes.str.contains(r'SHA1=f3c20ce4282587c920e9ff5da2150fac7858172e', case=False) | Hashes.str.contains(r'SHA1=dd49a71f158c879fb8d607cc558b507c7c8bc5b9', case=False) | Hashes.str.contains(r'SHA1=7d34bb240cb5dec51ffcc7bf062c8d613819ac30', case=False) | Hashes.str.contains(r'SHA1=0b01c4c1f18d72eb622be2553114f32edfe7b7aa', case=False) | Hashes.str.contains(r'SHA1=7d7c03e22049a725ace2a9812c72b53a66c2548b', case=False) | Hashes.str.contains(r'SHA1=4186ac693003f92fdf1efbd27fb8f6473a7cc53e', case=False) | Hashes.str.contains(r'SHA1=01b95ae502aa09aabc69a0482fcc8198f7765950', case=False) | Hashes.str.contains(r'SHA1=4c18754dca481f107f0923fb8ef5e149d128525d', case=False) | Hashes.str.contains(r'SHA1=55ab7e27412eca433d76513edc7e6e03bcdd7eda', case=False) | Hashes.str.contains(r'SHA1=c614ab686e844c7a7d2b20bc7061ab15290e2cfd', case=False) | Hashes.str.contains(r'SHA1=2cf75df00c69d907cfe683cb25077015d05be65d', case=False) | Hashes.str.contains(r'SHA1=f9feb60b23ca69072ce42264cd821fe588a186a6', case=False) | Hashes.str.contains(r'SHA1=a528cdeed550844ca7d31c9e231a700b4185d0da', case=False) | Hashes.str.contains(r'SHA1=8ec28d7da81cf202f03761842738d740c0bb2fed', case=False) | Hashes.str.contains(r'SHA1=e606282505af817698206672db632332e8c3d3ff', case=False) | Hashes.str.contains(r'SHA1=47830d6d3ee2d2a643abf46a72738d77f14114bc', case=False) | Hashes.str.contains(r'SHA1=57ea07ab767f11c81c6468b1f8a3d5f4618b800b', case=False) | Hashes.str.contains(r'SHA1=34b0f1b2038a1572ee6381022a24333357b033c4', case=False) | Hashes.str.contains(r'SHA1=2c5ff272bd345962ed41ab8869aef41da0dfe697', case=False) | Hashes.str.contains(r'SHA1=a14d96b65d3968181d57b57ee60c533cb621b707', case=False) | Hashes.str.contains(r'SHA1=cd248648eafca6ef77c1b76237a6482f449f13be', case=False) | Hashes.str.contains(r'SHA1=6100eb82a25d64a7a7702e94c2b21333bc15bd08', case=False) | Hashes.str.contains(r'SHA1=64ff172bafc33f14ca5f2e35f9753d41e239a5e4', case=False) | Hashes.str.contains(r'SHA1=74bf2ec32cb881424a79e99709071870148d242d', case=False) | Hashes.str.contains(r'SHA1=943593e880b4d340f2548548e6e673ef6f61eed3', case=False) | Hashes.str.contains(r'SHA1=3c81cdfd99d91c7c9de7921607be12233ed0dfd8', case=False) | Hashes.str.contains(r'SHA1=c1a5aacf05c00080e04d692a99c46ab445bf8b6e', case=False) | Hashes.str.contains(r'SHA1=1768fb2b4796f624fa52b95dfdfbfb922ac21019', case=False) | Hashes.str.contains(r'SHA1=5e6ddd2b39a3de0016385cbd7aa50e49451e376d', case=False) | Hashes.str.contains(r'SHA1=6df6d5b30d04b9adb9d2c99de18ed108b011d52b', case=False) | Hashes.str.contains(r'SHA1=8589a284f1a087ad5b548fb1a933289781b4cedc', case=False) | Hashes.str.contains(r'SHA1=0f780b7ada5dd8464d9f2cc537d973f5ac804e9c', case=False) | Hashes.str.contains(r'SHA1=ecb4d096a9c58643b02f328d2c7742a38e017cf0', case=False) | Hashes.str.contains(r'SHA1=f5bafebfbfb67a022452870289ac7849e9ee1f61', case=False) | Hashes.str.contains(r'SHA1=5965ca5462cd9f24c67a1a1c4ef277fab8ea81d3', case=False) | Hashes.str.contains(r'SHA1=804013a12f2f6ba2e55c4542cbdc50ca01761905', case=False) | Hashes.str.contains(r'SHA1=30c6e1da8745c3d53df696af407ef095a8398273', case=False) | Hashes.str.contains(r'SHA1=2fed7eddd63f10ed4649d9425b94f86140f91385', case=False) | Hashes.str.contains(r'SHA1=8626ab1da6bfbdf61bd327eb944b39fd9df33d1d', case=False) | Hashes.str.contains(r'SHA1=5ce273aa80ed3b0394e593a999059096682736ae', case=False) | Hashes.str.contains(r'SHA1=36397c6879978223ba52acd97da99e8067ab7f05', case=False) | Hashes.str.contains(r'SHA1=8a23735d9a143ad526bf73c6553e36e8a8d2e561', case=False) | Hashes.str.contains(r'SHA1=2f991435a6f58e25c103a657d24ed892b99690b8', case=False) | Hashes.str.contains(r'SHA1=f2ce790bf47b01a7e1ef5291d8fa341d5f66883a', case=False) | Hashes.str.contains(r'SHA1=f52c2d897fa00910d5566503dd5a297970f13dc6', case=False) | Hashes.str.contains(r'SHA1=256d285347acd715ed8920e41e5ec928ae9201a8', case=False) | Hashes.str.contains(r'SHA1=58fe23f1bb9d4bcc1b07b102222a7d776cc90f6c', case=False) | Hashes.str.contains(r'SHA1=55d84fd3e5db4bdbd3fb6c56a84b6b8a320c7c58', case=False) | Hashes.str.contains(r'SHA1=a71c17bfeefd76a9f89e74a52a2b6fdd3efbabe2', case=False) | Hashes.str.contains(r'SHA1=83b5e60943a92050fccb8acef7aa464c8f81d38e', case=False) | Hashes.str.contains(r'SHA1=152b6bb9ffd2ffec00cc46f5c6e29362d0e66e67', case=False) | Hashes.str.contains(r'SHA1=b4d014b5edd6e19ce0e8395a64faedf49688ecb5', case=False) | Hashes.str.contains(r'SHA1=9db1585c0fab6a9feb411c39267ac4ad29171696', case=False) | Hashes.str.contains(r'SHA1=2eddb10eecef740ec2f9158fa39410ec32262fc3', case=False) | Hashes.str.contains(r'SHA1=ad60e40a148accec0950d8d13bf7182c2bd5dfef', case=False) | Hashes.str.contains(r'SHA1=a21c84c6bf2e21d69fa06daaf19b4cc34b589347', case=False) | Hashes.str.contains(r'SHA1=5a7bcb1864d1e8ecde0b58d21b98518ca4b2f1f2', case=False) | Hashes.str.contains(r'SHA1=d6de8983dbd9c4c83f514f4edf1ac7be7f68632f', case=False) | Hashes.str.contains(r'SHA1=07f60b2b0e56cb15aad3ca8a96d9fe3a91491329', case=False) | Hashes.str.contains(r'SHA1=6b90a6eeef66bb9302665081e30bf9802ca956cc', case=False) | Hashes.str.contains(r'SHA1=634b1e9d0aafac1ec4373291cefb52c121e8d265', case=False) | Hashes.str.contains(r'SHA1=af50109b112995f8c82be8ef3a88be404510cdde', case=False) | Hashes.str.contains(r'SHA1=ec04d8c814f6884c009a7b51c452e73895794e64', case=False) | Hashes.str.contains(r'SHA1=fdf4a0af89f0c8276ad6d540c75beece380703ab', case=False) | Hashes.str.contains(r'SHA1=76046978d8e4409e53d8126a8dcfc3bf8602c37f', case=False) | Hashes.str.contains(r'SHA1=13df48ab4cd412651b2604829ce9b61d39a791bb', case=False) | Hashes.str.contains(r'SHA1=cb25d537f4e2872e5fcbd893da8ce3807137df80', case=False) | Hashes.str.contains(r'SHA1=2b4d0dead4c1a7cc95543748b3565cfa802e5256', case=False) | Hashes.str.contains(r'SHA1=34c85afe6d84cd3deec02c0a72e5abfa7a2886c3', case=False) | Hashes.str.contains(r'SHA1=c1fe7870e202733123715cacae9b02c29494d94d', case=False) | Hashes.str.contains(r'SHA1=9c256edd10823ca76c0443a330e523027b70522d', case=False) | Hashes.str.contains(r'SHA1=079627e0f5b1ad1fb3fe64038a09bc6e8b8d289d', case=False) | Hashes.str.contains(r'SHA1=e3c1dd569aa4758552566b0213ee4d1fe6382c4b', case=False) | Hashes.str.contains(r'SHA1=291b4a88ffd2ac1d6bf812ecaedc2d934dc503cb', case=False) | Hashes.str.contains(r'SHA1=3f338ab65bac9550b8749bb1208edb0f7d7bcb81', case=False) | Hashes.str.contains(r'SHA1=723fd9dd0957403ed131c72340e1996648f77a48', case=False) | Hashes.str.contains(r'SHA1=e0d83953a9efef81ba0fa9de1e3446b6f0a23cc6', case=False) | Hashes.str.contains(r'SHA1=1d5d2c5853619c25518ba0c55fd7477050e708fb', case=False) | Hashes.str.contains(r'SHA1=838823f25436cadc9a145ddac076dce3e0b84d96', case=False) | Hashes.str.contains(r'SHA1=64e4ac8b9ea2f050933b7ec76a55dd04e97773b4', case=False) | Hashes.str.contains(r'SHA1=363068731e87bcee19ad5cb802e14f9248465d31', case=False) | Hashes.str.contains(r'SHA1=02a8b74899591da7b7f49c0450328d39b939d7e4', case=False) | Hashes.str.contains(r'SHA1=0d8a832b9383fcdc23e83487b188ddd30963ca82', case=False) | Hashes.str.contains(r'SHA1=db6170ee2ee0a3292deceb2fc88ef26d938ebf2d', case=False) | Hashes.str.contains(r'SHA1=a9ea84ee976c66977bb7497aa374bba4f0dd2b27', case=False) | Hashes.str.contains(r'SHA1=7859e75580570e23a1ef7208b9a76f81738043d5', case=False) | Hashes.str.contains(r'SHA1=e067024ec42b556fb1e89ca52ef6719aa09cdf89', case=False) | Hashes.str.contains(r'SHA1=0ed0c4d6c3b6b478cbfd7fb0bd1e1b5457a757cc', case=False) | Hashes.str.contains(r'SHA1=54a4772212da2025bd8fb2dc913e1c4490e7a0cd', case=False) | Hashes.str.contains(r'SHA1=68ca9c27131aa35c7f433dc914da74f4b3d8793f', case=False) | Hashes.str.contains(r'SHA1=468e2e5505a3d924b14fedee4ddf240d09393776', case=False) | Hashes.str.contains(r'SHA1=cc3e5e45aca5b670035dfb008f0a88cecfd91cf7', case=False) | Hashes.str.contains(r'SHA1=8d676504c2680cf71c0c91afb18af40ea83b6c22', case=False) | Hashes.str.contains(r'SHA1=ba5b4eaa7cab012b71a8a973899eeee47a12becc', case=False) | Hashes.str.contains(r'SHA1=1901467b6f04a93b35d3ca0727c8a14f3ce3ed52', case=False) | Hashes.str.contains(r'SHA1=8f5cd4a56e6e15935491aa40adb1ecad61eafe7c', case=False) | Hashes.str.contains(r'SHA1=116679c4b2cca6ec69453309d9d85d3793cbe05f', case=False) | Hashes.str.contains(r'SHA1=b4d1554ec19504215d27de0758e13c35ddd6db3e', case=False) | Hashes.str.contains(r'SHA1=e702221d059b86d49ed11395adffa82ef32a1bce', case=False) | Hashes.str.contains(r'SHA1=dd085542683898a680311a0d1095ea2dffe865e2', case=False) | Hashes.str.contains(r'SHA1=69849d68d1857c83b09e1956a46fe879260d2aab', case=False) | Hashes.str.contains(r'SHA1=a23a0627297a71a4414193e12a8c074e7bbb8a2e', case=False) | Hashes.str.contains(r'SHA1=91530e1e1fb25a26f3e0d6587200ddbaecb45c74', case=False) | Hashes.str.contains(r'SHA1=247065af09fc6fd56b07d3f5c26f555a5ccbfda4', case=False) | Hashes.str.contains(r'SHA1=e840904ce12cc2f94eb1ec16b0b89e2822c24805', case=False) | Hashes.str.contains(r'SHA1=e5bfb18f63fcfb7dc09b0292602112ea7837ef7a', case=False) | Hashes.str.contains(r'SHA1=dc6e62dbde5869a6adc92253fff6326b6af5c8d4', case=False) | Hashes.str.contains(r'SHA1=f9519d033d75e1ab6b82b2e156eafe9607edbcfb', case=False) | Hashes.str.contains(r'SHA1=40dba13a059679401fcaf7d4dbe80db03c9d265c', case=False) | Hashes.str.contains(r'SHA1=acb5d7e182a108ee02c5cb879fc94e0d6db7dd68', case=False) | Hashes.str.contains(r'SHA1=543933cce83f2e75d1b6a8abdb41199ddef8406c', case=False) | Hashes.str.contains(r'SHA1=0f2fdfb249c260c892334e62ab77ac88fcb8b5e4', case=False) | Hashes.str.contains(r'SHA1=81a319685d0b6112edee4bc25d14d6236f4e12da', case=False) | Hashes.str.contains(r'SHA1=05ac1c64ca16ab0517fe85d4499d08199e63df26', case=False) | Hashes.str.contains(r'SHA1=488b20ed53c2060c41b9a0cac1efb39a888df7c5', case=False) | Hashes.str.contains(r'SHA1=e1069365cb580e3525090f2fa28efd4127223588', case=False) | Hashes.str.contains(r'SHA1=c1d5cf8c43e7679b782630e93f5e6420ca1749a7', case=False) | Hashes.str.contains(r'SHA1=67dfd415c729705396ce54166bd70faf09ac7f10', case=False) | Hashes.str.contains(r'SHA1=c8ec23066a50800d42913d5e439700c5cd6a2287', case=False) | Hashes.str.contains(r'SHA1=07f62d9b6321bed0008e106e9ce4240cb3f76da2', case=False) | Hashes.str.contains(r'SHA1=a57eefa0c653b49bd60b6f46d7c441a78063b682', case=False) | Hashes.str.contains(r'SHA1=a4ae87b7802c82dfb6a4d26ab52788410af98532', case=False) | Hashes.str.contains(r'SHA1=bc949bc040333fdc9140b897b0066ef125343ef6', case=False) | Hashes.str.contains(r'SHA1=d04e5db5b6c848a29732bfd52029001f23c3da75', case=False) | Hashes.str.contains(r'SHA1=6bb68e1894bfbc1ac86bcdc048f7fe7743de2f92', case=False) | Hashes.str.contains(r'SHA1=a54ae1793e9d77e61416e0d9fb81269a4bc8f8a2', case=False) | Hashes.str.contains(r'SHA1=51b60eaa228458dee605430aae1bc26f3fc62325', case=False) | Hashes.str.contains(r'SHA1=054a50293c7b4eea064c91ef59cf120d8100f237', case=False) | Hashes.str.contains(r'SHA1=844d2345bde50bf8ee7e86117cf7b8c6e6f00be4', case=False) | Hashes.str.contains(r'SHA1=4b8c0445075f09aeef542ab1c86e5de6b06e91a3', case=False) | Hashes.str.contains(r'SHA1=d0452363b41385f6a6778f970f3744dde4701d8f', case=False) | Hashes.str.contains(r'SHA1=d72de7e8f0118153dd5cf784f724e725865fc523', case=False) | Hashes.str.contains(r'SHA1=340ce5d8859f923222bea5917f40c4259cce1bbc', case=False) | Hashes.str.contains(r'SHA1=e1bf5dd17f84bce3b2891dffa855d81a21914418', case=False) | Hashes.str.contains(r'SHA1=e4cbb48aa1aff6cf4ea94ef3b7afb6c245ac47e8', case=False) | Hashes.str.contains(r'SHA1=0e1df95042081fa2408782f14ce483f0db19d5ab', case=False) | Hashes.str.contains(r'SHA1=d2fb46277c36498e87d0f47415b7980440d40e3d', case=False) | Hashes.str.contains(r'SHA1=351cbd352b3ec0d5f4f58c84af732a0bf41b4463', case=False) | Hashes.str.contains(r'SHA1=4a887ae6b773000864f9228800aab75e6ff34240', case=False) | Hashes.str.contains(r'SHA1=283c7dc5b029dbc41027df16716ec12761a53df8', case=False) | Hashes.str.contains(r'SHA1=dcdc9b2bc8e79d44846086d0d482cb7c589f09b8', case=False) | Hashes.str.contains(r'SHA1=ec8c0b2f49756b8784b3523e70cd8821b05b95eb', case=False) | Hashes.str.contains(r'SHA1=16c6bcef489f190a48e9d3b1f35972db89516479', case=False) | Hashes.str.contains(r'SHA1=ffabdf33635bdc1ed1714bc8bbfd7b73ef78a37c', case=False) | Hashes.str.contains(r'SHA1=7c625de858710d3673f6cb0cd8d0643d5422c688', case=False) | Hashes.str.contains(r'SHA1=faa61346430aedc952d820f7b16b973c9bf133c3', case=False) | Hashes.str.contains(r'SHA1=1e959d6ae22c4d9fa5613c3a9d3b6e1b472be05d', case=False) | Hashes.str.contains(r'SHA1=f18e669127c041431cde8f2d03b15cfc20696056', case=False) | Hashes.str.contains(r'SHA1=1de9f25d189faa294468517b15947a523538ce9d', case=False) | Hashes.str.contains(r'SHA1=d8e8dcc8531b8d07f8dabc9e79c19aac6eeca793', case=False) | Hashes.str.contains(r'SHA1=7ba19a701c8af76988006d616a5f77484c13cb0a', case=False) | Hashes.str.contains(r'SHA1=6c1bb3a72ebfb5359b9e22ca44d0a1ff825a68f2', case=False) | Hashes.str.contains(r'SHA1=4786253daac6c60ffc0d2871fdd68023ec93dfb3', case=False) | Hashes.str.contains(r'SHA1=ea58d72db03df85b04d1412a9b90d88ba68ab43d', case=False) | Hashes.str.contains(r'SHA1=48a09ca5fdbc214e675083c2259e051b0629457b', case=False) | Hashes.str.contains(r'SHA1=ea63567ea8d168cb6e9aae705b80a09f927b2f77', case=False) | Hashes.str.contains(r'SHA1=8347487b32b993da87275e3d44ff3683c8130d33', case=False) | Hashes.str.contains(r'SHA1=4471935df0e68fe149425703b66f1efca3d82168', case=False) | Hashes.str.contains(r'SHA1=eaddeefe13bca118369faf95eee85b0a2a553221', case=False) | Hashes.str.contains(r'SHA1=98600e919b8579d89e232a253d7277355b652750', case=False) | Hashes.str.contains(r'SHA1=444a2b778e2fc26067c49dde0aff0dcfb85f2b64', case=False) | Hashes.str.contains(r'SHA1=89cd760e8cb19d29ee08c430fb17a5fd4455c741', case=False) | Hashes.str.contains(r'SHA1=3ee2fd08137e9262d2e911158090e4a7c7427ea0', case=False) | Hashes.str.contains(r'SHA1=6210dabb908cc750379cc7563beb884b3895e046', case=False) | Hashes.str.contains(r'SHA1=22c08d67bf687bf7ddd57056e274cbbbdb647561', case=False) | Hashes.str.contains(r'SHA1=1a8b737dff81aa9e338b1fce0dc96ee7ee467bd5', case=False) | Hashes.str.contains(r'SHA1=a9b8d7afa2e4685280aebbeb162600cfce4e48c8', case=False) | Hashes.str.contains(r'SHA1=8800a33a37c640922ce6a2996cd822ed4603b8bb', case=False) | Hashes.str.contains(r'SHA1=4f94789cffb23c301f93d6913b594748684abf6a', case=False) | Hashes.str.contains(r'SHA1=511b06898770337609ee065547dbf14ce3de5a95', case=False) | Hashes.str.contains(r'SHA1=c32e6cddc7731408c747fd47af3d62861719fd7b', case=False) | Hashes.str.contains(r'SHA1=a93197c8c1897a95c4fb0367d7451019ae9f3054', case=False) | Hashes.str.contains(r'SHA1=7eec3a1edf3b021883a4b5da450db63f7c0afeeb', case=False) | Hashes.str.contains(r'SHA1=a59006308c4b5d33bb8f34ac6fb16701814fb8dc', case=False) | Hashes.str.contains(r'SHA1=3e917f0986802d47c0ffe4d6f5944998987c4160', case=False) | Hashes.str.contains(r'SHA1=b406920634361f4b7d7c1ec3b11bb40872d85105', case=False) | Hashes.str.contains(r'SHA1=9ec6f54c74bcc48e355226c26513a7240fd9462d', case=False) | Hashes.str.contains(r'SHA1=79f1a6f5486523e6d8dcfef696bc949fc767613d', case=False) | Hashes.str.contains(r'SHA1=dce4322406004fc884d91ed9a88a36daca7ae19a', case=False) | Hashes.str.contains(r'SHA1=dbe26c67a4cabba16d339a1b256ca008effcf6c8', case=False) | Hashes.str.contains(r'SHA1=9f5453c36aa03760d935e062ac9e1f548d14e894', case=False) | Hashes.str.contains(r'SHA1=da361c56c18ea98e1c442aac7c322ff20f64486b', case=False) | Hashes.str.contains(r'SHA1=14c9cd9e2cf2b0aae56c46ff9ad1c89a8a980050', case=False) | Hashes.str.contains(r'SHA1=21e6c104fe9731c874fab5c9560c929b2857b918', case=False) | Hashes.str.contains(r'SHA1=ef80da613442047697bec35ea228cde477c09a3d', case=False) | Hashes.str.contains(r'SHA1=c834c4931b074665d56ccab437dfcc326649d612', case=False) | Hashes.str.contains(r'SHA1=aa2ea973bb248b18973e57339307cfb8d309f687', case=False) | Hashes.str.contains(r'SHA1=bf87e32a651bdfd9b9244a8cf24fca0e459eb614', case=False) | Hashes.str.contains(r'SHA1=977fd907b6a2509019d8ef4f6213039f2523f2b5', case=False) | Hashes.str.contains(r'SHA1=b89a8eef5aeae806af5ba212a8068845cafdab6f', case=False) | Hashes.str.contains(r'SHA1=a45687965357036df17b8ff380e3a43a8fbb2ca9', case=False) | Hashes.str.contains(r'SHA1=59aead65b240a163ad47b2d1cf33cdb330608317', case=False) | Hashes.str.contains(r'SHA1=8c377ab4eebc5f4d8dd7bb3f90c0187dfdd3349f', case=False) | Hashes.str.contains(r'SHA1=ddd36f96f5a509855f55eed9eb4cba9758d6339a', case=False) | Hashes.str.contains(r'SHA1=a838303cda908530ef124f8d6f7fb69938b613bc', case=False) | Hashes.str.contains(r'SHA1=84d44e166072bccf1f8e1e9eb51880ffa065a274', case=False) | Hashes.str.contains(r'SHA1=88d00eff21221f95a0307da229bc9fe1afb6861b', case=False) | Hashes.str.contains(r'SHA1=9ca90642cff9ca71c7022c0f9dfd87da2b6a0bff', case=False) | Hashes.str.contains(r'SHA1=a98734cd388f5b4b3caca5ce61cb03b05a8ad570', case=False) | Hashes.str.contains(r'SHA1=bad84fca57ab0ef0af9230a93e0cc3d149f9ccd0', case=False) | Hashes.str.contains(r'SHA1=ce5681896e7631b6e83cccb7aa056a33e72a1bbe', case=False) | Hashes.str.contains(r'SHA1=0634878c3f6048a38ec82869d7c6df2f69f3e210', case=False) | Hashes.str.contains(r'SHA1=eacfc73f5f45f229867ee8b2eb1f9649b5dd422e', case=False) | Hashes.str.contains(r'SHA1=dc8fa4648c674e3a7148dd8e8c35f668a3701a52', case=False) | Hashes.str.contains(r'SHA1=02316decf9e5165b431c599643f6856e86b95e7c', case=False) | Hashes.str.contains(r'SHA1=cc3186debacb98e0b0fb40ad82816bea10741099', case=False) | Hashes.str.contains(r'SHA1=87f313fc30ec8759b391e9d6c08f79b02f3ecebd', case=False) | Hashes.str.contains(r'SHA1=56af49e030eb85528e82849d7d1b6147f3c4973e', case=False) | Hashes.str.contains(r'SHA1=62fdb0b43c56530a6a0ba434037d131f236d1266', case=False) | Hashes.str.contains(r'SHA1=5088c71a740ef7c4156dcaa31e543052fe226e1c', case=False) | Hashes.str.contains(r'SHA1=64d0447cbb0d6a45010b94eb9d5b0b90296edcbf', case=False) | Hashes.str.contains(r'SHA1=0aecdc0b8208b81b0c37eef3b0eaea8d8ebef42e', case=False) | Hashes.str.contains(r'SHA1=2fe874274bac6842819c1e9fe9477e6d5240944d', case=False) | Hashes.str.contains(r'SHA1=33cdab3bbc8b3adce4067a1b042778607dce2acd', case=False) | Hashes.str.contains(r'SHA1=ba0938512d7abab23a72279b914d0ea0fb46e498', case=False) | Hashes.str.contains(r'SHA1=3d8cc9123be74b31c597b0014c2a72090f0c44ef', case=False) | Hashes.str.contains(r'SHA1=1f1ce28c10453acbc9d3844b4604c59c0ab0ad46', case=False) | Hashes.str.contains(r'SHA1=724dde837df2ff92b3ea7026fe8a0c4e5773898f', case=False) | Hashes.str.contains(r'SHA1=8ab7e9ba3c26bcd5d6d0646c6d2b2693e22aac1c', case=False) | Hashes.str.contains(r'SHA1=b480c54391a2a2f917a44f91a5e9e4590648b332', case=False) | Hashes.str.contains(r'SHA1=9c24dd75e4074041dbe03bf21f050c77d748b8e9', case=False) | Hashes.str.contains(r'SHA1=bea745b598dd957924d3465ebc04c5b830d5724f', case=False) | Hashes.str.contains(r'SHA1=e35a2b009d54e1a0b231d8a276251f64231b66a3', case=False) | Hashes.str.contains(r'SHA1=99bd8c1f5eeedd9f6a9252df5dbd0e42ef5999a4', case=False) | Hashes.str.contains(r'SHA1=5dd2c31c4357a8b76db095364952b3d0e3935e1d', case=False) | Hashes.str.contains(r'SHA1=2e3de9bff43d7712707ef8a0b10f7e4ad8427fd8', case=False) | Hashes.str.contains(r'SHA1=f42f28d164205d9f6dab9317c9fecad54c38d5d2', case=False) | Hashes.str.contains(r'SHA1=5520ac25d81550a255dc16a0bb89d4b275f6f809', case=False) | Hashes.str.contains(r'SHA1=d25340ae8e92a6d29f599fef426a2bc1b5217299', case=False) | Hashes.str.contains(r'SHA1=43f53a739eda1e58f470e8e9ff9aa1437e5d9546', case=False) | Hashes.str.contains(r'SHA1=879e92a7427bdbcc051a18bbb3727ac68154e825', case=False) | Hashes.str.contains(r'SHA1=be270d94744b62b0d36bef905ef6296165ffcee9', case=False) | Hashes.str.contains(r'SHA1=108439a4c4508e8dca659905128a4633d8851fd9', case=False) | Hashes.str.contains(r'SHA1=fe0afc6dd03a9bd7f6e673cc6b4af2266737e3d1', case=False) | Hashes.str.contains(r'SHA1=343ec3073fc84968e40a145dc9260a403966bcb4', case=False) | Hashes.str.contains(r'SHA1=0d9c77aca860a43cca87a0c00f69e2ab07ab0b67', case=False) | Hashes.str.contains(r'SHA1=c60cf6dea446e4a52c6b1cfc2a76e9aadd954dab', case=False) | Hashes.str.contains(r'SHA1=bd3e1d5aacac6406a7bcea3b471bbfa863efbc3d', case=False) | Hashes.str.contains(r'SHA1=aca8e53483b40a06dfdee81bb364b1622f9156fe', case=False) | Hashes.str.contains(r'SHA1=53a194e1a30ed9b2d3acd87c2752cfa6645eea76', case=False) | Hashes.str.contains(r'SHA1=06ecf73790f0277b8e27c8138e2c9ad0fc876438', case=False) | Hashes.str.contains(r'SHA1=a22c111045b4358f8279190e50851c443534fc24', case=False) | Hashes.str.contains(r'SHA1=d2c7aa9b424015f970fe7506ae5d1c69a8ac11f6', case=False) | Hashes.str.contains(r'SHA1=2eeab9786dac3f5f69e642f6e29f4e4819038551', case=False) | Hashes.str.contains(r'SHA1=8ea50d7d13ff2d1306fed30a2d136dd6245eb3bc', case=False) | Hashes.str.contains(r'SHA1=490109fa6739f114651f4199196c5121d1c6bdf2', case=False) | Hashes.str.contains(r'SHA1=877c6c36a155109888fe1f9797b93cb30b4957ef', case=False) | Hashes.str.contains(r'SHA1=66e95daee3d1244a029d7f3d91915f1f233d1916', case=False) | Hashes.str.contains(r'SHA1=175fb76c7cd8f0aeb916f4acb3b03f8b2d51846a', case=False) | Hashes.str.contains(r'SHA1=0536c9f15094ca8ddeef6dec75d93dc35366d8a9', case=False) | Hashes.str.contains(r'SHA1=65886384708d5a6c86f3c4c16a7e7cdbf68de92a', case=False) | Hashes.str.contains(r'SHA1=d7e8aef8c8feb87ce722c0b9abf34a7e6bab6eb4', case=False) | Hashes.str.contains(r'SHA1=25d812a5ece19ea375178ef9d60415841087726e', case=False) | Hashes.str.contains(r'SHA1=24b47ba7179755e3b12a59d55ae6b2c3d2bd1505', case=False) | Hashes.str.contains(r'SHA1=a547c5b1543a4c3a4f91208d377a2b513088f4a4', case=False) | Hashes.str.contains(r'SHA1=604870e76e55078dfb8055d49ae8565ed6177f7c', case=False) | Hashes.str.contains(r'SHA1=37364cb5f5cefd68e5eca56f95c0ab4aff43afcc', case=False) | Hashes.str.contains(r'SHA1=962e2ac84c28ed5e373d4d4ccb434eceee011974', case=False) | Hashes.str.contains(r'SHA1=94b014123412fbe8709b58ec72594f8053037ae9', case=False) | Hashes.str.contains(r'SHA1=c969f1f73922fd95db1992a5b552fbc488366a40', case=False) | Hashes.str.contains(r'SHA1=6dac7a8fa9589caae0db9d6775361d26011c80b2', case=False) | Hashes.str.contains(r'SHA1=cd7b0c6b6ef809e7fb1f68ba36150eceabe500f7', case=False) | Hashes.str.contains(r'SHA1=1d2ab091d5c0b6e5977f7fa5c4a7bfb8ea302dc7', case=False) | Hashes.str.contains(r'SHA1=729a8675665c61824f22f06c7b954be4d14b52c4', case=False) | Hashes.str.contains(r'SHA1=814200191551faec65b21f5f6819b46c8fc227a3', case=False) | Hashes.str.contains(r'SHA1=59c0fa0d61576d9eb839c9c7e15d57047ee7fe29', case=False) | Hashes.str.contains(r'SHA1=48be0ec2e8cb90cac2be49ef71e44390a0f648ce', case=False) | Hashes.str.contains(r'SHA1=0e030cf5e5996f0778452567e144f75936dc278f', case=False) | Hashes.str.contains(r'SHA1=6003184788cd3d2fc624ca801df291ccc4e225ee', case=False) | Hashes.str.contains(r'SHA1=6cc28df318a9420b49a252d6e8aaeda0330dc67d', case=False) | Hashes.str.contains(r'SHA1=59e6effdb23644ca03e60618095dc172a28f846e', case=False) | Hashes.str.contains(r'SHA1=df177a0c8c1113449f008f8e833105344b419834', case=False) | Hashes.str.contains(r'SHA1=5d6b9e80e12bfc595d4d26f6afb099b3cb471dd4', case=False) | Hashes.str.contains(r'SHA1=c0a8e45e57bb6d82524417d6fb7e955ab95621c0', case=False) | Hashes.str.contains(r'SHA1=3599ea2ac1fa78f423423a4cf90106ea0938dde8', case=False) | Hashes.str.contains(r'SHA1=363b907c3b4f37968e9c8e1b7eeca5a5c5d530f8', case=False) | Hashes.str.contains(r'SHA1=53f7a84a8cebe0e3f84894c6b9119466d1a8ddaf', case=False) | Hashes.str.contains(r'SHA1=7ee65bedaf7967c752831c83e26540e65358175e', case=False) | Hashes.str.contains(r'SHA1=e525f54b762c10703c975132e8fc21b6cd88d39b', case=False) | Hashes.str.contains(r'SHA1=3a1f19b7a269723e244756dac1fc27c793276fe7', case=False) | Hashes.str.contains(r'SHA1=d6b61c685cfaa36c85f1672ac95844f8293c70d0', case=False) | Hashes.str.contains(r'SHA1=6714380bc0b8ab09b9a0d2fa66d1b025b646b946', case=False) | Hashes.str.contains(r'SHA1=96523f72e4283f9816d3da8f2270690dd1dd263e', case=False) | Hashes.str.contains(r'SHA1=5db61d00a001fd493591dc919f69b14713889fc5', case=False) | Hashes.str.contains(r'SHA1=b3c111d7192cfa8824e5c9b7c0660c37978025d6', case=False) | Hashes.str.contains(r'SHA1=49b1e6a922a8d2cb2101c48155dfc08c17d09341', case=False) | Hashes.str.contains(r'SHA1=282fca60f0c37eb6d76400bca24567945e43c6d8', case=False) | Hashes.str.contains(r'SHA1=2a06006e54c62a2e8bdf14313f90f0ab5d2f8de8', case=False) | Hashes.str.contains(r'SHA1=4692730f6b56eeb0399460c72ade8a15ddd43a62', case=False) | Hashes.str.contains(r'SHA1=fe10018af723986db50701c8532df5ed98b17c39', case=False) | Hashes.str.contains(r'SHA1=b34fc245d561905c06a8058753d25244aaecbb61', case=False) | Hashes.str.contains(r'SHA1=2ade3347df84d6707f39d9b821890440bcfdb5e9', case=False) | Hashes.str.contains(r'SHA1=5e9538d76b75f87f94ca5409ae3ddc363e8aba7f', case=False) | Hashes.str.contains(r'SHA1=5a69d921926ef0abf03757edf22c0d8d30c15d4b', case=False) | Hashes.str.contains(r'SHA1=986c1fdfe7c9731f4de15680a475a72cf2245121', case=False) | Hashes.str.contains(r'SHA1=42eb220fdfb76c6e0649a3e36acccbdf36e287f1', case=False) | Hashes.str.contains(r'SHA1=7192e22e0f8343058ec29fb7b8065e09ce389a5b', case=False) | Hashes.str.contains(r'SHA1=b2b01c728e0e8ef7b2e9040d6db9828bd4a5b48d', case=False) | Hashes.str.contains(r'SHA1=b99a5396094b6b20cea72fbf0c0083030155f74e', case=False) | Hashes.str.contains(r'SHA1=628e63caf72c29042e162f5f7570105d2108e3c2', case=False) | Hashes.str.contains(r'SHA1=1fb12c5db2acad8849677e97d7ce860d2bb2329e', case=False) | Hashes.str.contains(r'SHA1=e5021a98e55d514e2376aa573d143631e5ee1c13', case=False) | Hashes.str.contains(r'SHA1=46be4e6cd8117ac13531bff30edcf564f39bcc52', case=False) | Hashes.str.contains(r'SHA1=377f7e7382908690189aede31fcdd532baa186b5', case=False) | Hashes.str.contains(r'SHA1=5b4619596c89ed17ccbe92fd5c0a823033f2f1e1', case=False) | Hashes.str.contains(r'SHA1=bda102afbc60f3f3c5bcbd5390ffbbbb89170b9c', case=False) | Hashes.str.contains(r'SHA1=ca33c88cd74e00ece898dca32a24bdfcacc3f756', case=False) | Hashes.str.contains(r'SHA1=7d1ff4096a75f9fcc67c7c9c810d99874c096b6b', case=False) | Hashes.str.contains(r'SHA1=1a83c8b63d675c940aaec10f70c0c7698e9b0165', case=False) | Hashes.str.contains(r'SHA1=f8e88630dae53e0b54edefdefa36d96c3dcbd776', case=False) | Hashes.str.contains(r'SHA1=e33eac9d3b9b5c0db3db096332f059bf315a2343', case=False) | Hashes.str.contains(r'SHA1=5635bb2478929010693bc3b23f8b7fe5fdbc3aed', case=False) | Hashes.str.contains(r'SHA1=3fd7fda9c7dfdb2a845c39971572bd090bee3b1d', case=False) | Hashes.str.contains(r'SHA1=3e790c4e893513566916c76a677b0f98bd7334dd', case=False) | Hashes.str.contains(r'SHA1=738b7918d85e5cb4395df9e3f6fc94ddad90e939', case=False) | Hashes.str.contains(r'SHA1=5ca6a52230507b1dffab7acd501540bc10f1ab81', case=False) | Hashes.str.contains(r'SHA1=820d339fd3dbb632a790d6506ddf6aee925fcffe', case=False) | Hashes.str.contains(r'SHA1=0ac0c21ca05161eaa6a042f347391a2a2fc78c96', case=False) | Hashes.str.contains(r'SHA1=c95db1e82619fb16f8eec9a8209b7b0e853a4ebe', case=False) | Hashes.str.contains(r'SHA1=4f077a95908b154ea12faa95de711cb44359c162', case=False) | Hashes.str.contains(r'SHA1=29a190727140f40cea9514a6420f5a195e36386b', case=False) | Hashes.str.contains(r'SHA1=dbf3abdc85d6a0801c4af4cd1b77c44d5f57b03e', case=False) | Hashes.str.contains(r'SHA1=de0c16e3812924212f04e15caa09763ae4770403', case=False) | Hashes.str.contains(r'SHA1=3b1f1e96fc8a7eb93b14b1213f797f164a313cee', case=False) | Hashes.str.contains(r'SHA1=cc51be79ae56bc97211f6b73cc905c3492da8f9d', case=False) | Hashes.str.contains(r'SHA1=4c021c4a5592c07d4d415ab11b23a70ba419174b', case=False) | Hashes.str.contains(r'SHA1=9d191bee98f0af4969a26113098e3ea85483ae2d', case=False) | Hashes.str.contains(r'SHA1=ac31d15851c0af14d60cfce23f00c4b7887d3cb7', case=False) | Hashes.str.contains(r'SHA1=b25170e09c9fb7c0599bfba3cf617187f6a733ac', case=False) | Hashes.str.contains(r'SHA1=5f8ae70b25b664433c6942d5963acadf2042cfe8', case=False) | Hashes.str.contains(r'SHA1=a37616f0575a683bd81a0f49fadbbc87e1525eba', case=False) | Hashes.str.contains(r'SHA1=33285b2e97a0aeb317166cce91f6733cf9c1ad53', case=False) | Hashes.str.contains(r'SHA1=c22c28a32a5e43a76514faf4fac14d135e0d4ffd', case=False) | Hashes.str.contains(r'SHA1=7c996d9ef7e47a3b197ff69798333dc29a04cc8a', case=False) | Hashes.str.contains(r'SHA1=cb0bc86d437ab78c1fbefdaf1af965522ebdd65d', case=False) | Hashes.str.contains(r'SHA1=4a1a499857accc04b4d586df3f0e0c2b3546e825', case=False) | Hashes.str.contains(r'SHA1=c3a893680cd33706546a7a3e8fbcc4bd063ce07e', case=False) | Hashes.str.contains(r'SHA1=df58f9b193c6916aaec7606c0de5eba70c8ec665', case=False) | Hashes.str.contains(r'SHA1=fc69138b9365fa60e21243369940c8dcfcca5db1', case=False) | Hashes.str.contains(r'SHA1=3fbe337b6ed1a1a63ae8b4240c01bd68ed531674', case=False) | Hashes.str.contains(r'SHA1=07c244739803f60a75d60347c17edc02d5d10b5d', case=False) | Hashes.str.contains(r'SHA1=cc0e0440adc058615e31e8a52372abadf658e6b1', case=False) | Hashes.str.contains(r'SHA1=6e191d72b980c8f08a0f60efa01f0b5bf3b34afb', case=False) | Hashes.str.contains(r'SHA1=d697a3f4993e7cb15efdeda3b1a798ae25a2d0e9', case=False) | Hashes.str.contains(r'SHA1=5cfec6aa4842e5bafff23937f5efca71f21cf7ca', case=False) | Hashes.str.contains(r'SHA1=def86c7dee1f788c717ac1917f1b5bbfada25a95', case=False) | Hashes.str.contains(r'SHA1=c22dc62e10378191840285814838fe9ed1af55d7', case=False) | Hashes.str.contains(r'SHA1=58b31fb2b623bd2c5d5c8c49b657a14a674664a4', case=False) | Hashes.str.contains(r'SHA1=80fa962bdfb76dfcb9e5d13efc38bb3d392f2e77', case=False) | Hashes.str.contains(r'SHA1=b62c5bae9c6541620379115a7ba0036ecfa19537', case=False) | Hashes.str.contains(r'SHA1=585df373a9c56072ab6074afee8f1ec3778d70f8', case=False) | Hashes.str.contains(r'SHA1=64ab599d34c26f53afe076a84c54db7ba1a53def', case=False) | Hashes.str.contains(r'SHA1=f130e82524d8f5af403c3b0e0ffa4b64fedeec92', case=False) | Hashes.str.contains(r'SHA1=bd87aecc0ac1d1c2ab72be1090d39fab657f7cc6', case=False) | Hashes.str.contains(r'SHA1=5499f1bca93a3613428e8c18ac93a93b9a7249fb', case=False) | Hashes.str.contains(r'SHA1=7ab4565ba24268f0adadb03a5506d4eb1dc7c181', case=False) | Hashes.str.contains(r'SHA1=2f9b0cd96d961e49d5d3b416028fd3a0e43d6a28', case=False) | Hashes.str.contains(r'SHA1=1da0c712ff42bd9112ac6afadb7c4d3ae2f20fb7', case=False) | Hashes.str.contains(r'SHA1=ef8de780cfe839ecf6dc0dc161ae645bff9b853c', case=False) | Hashes.str.contains(r'SHA1=feb8e6e7419713a2993c48b9758c039bd322b699', case=False) | Hashes.str.contains(r'SHA1=d9b05c5ffc5eddf65186ba802bb1ece0249cab05', case=False) | Hashes.str.contains(r'SHA1=08596732304351b311970ff96b21f451f23b1e25', case=False) | Hashes.str.contains(r'SHA1=687b8962febbbea4cf6b3c11181fd76acb7dfd5a', case=False) | Hashes.str.contains(r'SHA1=9d0b824892fbfb0b943911326f95cd0264c60f7d', case=False) | Hashes.str.contains(r'SHA1=2ed4b51429b0a3303a645effc84022512f829836', case=False) | Hashes.str.contains(r'SHA1=1a40773dc430d7cb102710812b8c61fc51dfb79b', case=False) | Hashes.str.contains(r'SHA1=4f7a8e26a97980544be634b26899afbefb0a833c', case=False) | Hashes.str.contains(r'SHA1=983a8d4b1cb68140740a7680f929d493463e32e3', case=False) | Hashes.str.contains(r'SHA1=c4b6e2351a72311a6e8f71186b218951a27fb97f', case=False) | Hashes.str.contains(r'SHA1=6b090c558b877b6abb0d1051610cadbc6335ecbb', case=False) | Hashes.str.contains(r'SHA1=fcde5275ee1913509927ce5f0f85e6681064c9d2', case=False) | Hashes.str.contains(r'SHA1=92f251358b3fe86fd5e7aa9b17330afa0d64a705', case=False) | Hashes.str.contains(r'SHA1=400f833dcc2ef0a122dd0e0b1ec4ec929340d90e', case=False) | Hashes.str.contains(r'SHA1=27aa3f1b4baccd70d95ea75a0a3e54e735728aa2', case=False) | Hashes.str.contains(r'SHA1=005ac9213a8a4a6c421787a7b25c0bc7b9f3b309', case=False) | Hashes.str.contains(r'SHA1=eb0d45aa6f537f5b2f90f3ad99013606eafcd162', case=False) | Hashes.str.contains(r'SHA1=c1777fcb7005b707f8c86b2370f3278a8ccd729f', case=False) | Hashes.str.contains(r'SHA1=00a442a4305c62cefa8105c0b4c4a9a5f4d1e93b', case=False) | Hashes.str.contains(r'SHA1=cfa85a19d9a2f7f687b0decdc4a5480b6e30cb8c', case=False) | Hashes.str.contains(r'SHA1=0e60414750c48676d7aa9c9ec81c0a3b3a4d53d0', case=False) | Hashes.str.contains(r'SHA1=7c1b25518dee1e30b5a6eaa1ea8e4a3780c24d0c', case=False) | Hashes.str.contains(r'SHA1=4268f30b79ce125a81d0d588bef0d4e2ad409bbb', case=False) | Hashes.str.contains(r'SHA1=5fb9421be8a8b08ec395d05e00fd45eb753b593a', case=False) | Hashes.str.contains(r'SHA1=540b9f9a232b9d597138b8e0f33d83f5f6e247af', case=False) | Hashes.str.contains(r'SHA1=19bf65bdd9d77f54f1e8ccf189dc114e752344b0', case=False) | Hashes.str.contains(r'SHA1=f36a47edfacd85e0c6d4d22133dd386aee4eec15', case=False) | Hashes.str.contains(r'SHA1=9f22ebcd2915471e7526f30aa53c24b557a689f5', case=False) | Hashes.str.contains(r'SHA1=562368c390b0dadf2356b8b3c747357ecef2dfc8', case=False) | Hashes.str.contains(r'SHA1=f999709e5b00a68a0f4fa912619fe6548ad0c42d', case=False) | Hashes.str.contains(r'SHA1=03a56369b8b143049a6ec9f6cc4ef91ac2775863', case=False) | Hashes.str.contains(r'SHA1=82034032b30bbb78d634d6f52c7d7770a73b1b3c', case=False) | Hashes.str.contains(r'SHA1=3059bc49e027a79ff61f0147edbc5cd56ad5fc2d', case=False) | Hashes.str.contains(r'SHA1=af5f642b105d86f82ba6d5e7a55d6404bfb50875', case=False) | Hashes.str.contains(r'SHA1=f86ae53eb61d3c7c316effe86395a4c0376b06db', case=False) | Hashes.str.contains(r'SHA1=3fd55927d5997d33f5449e9a355eb5c0452e0de3', case=False) | Hashes.str.contains(r'SHA1=d942dac4033dcd681161181d50ce3661d1e12b96', case=False) | Hashes.str.contains(r'SHA1=dd55015f5406f0051853fd7cca3ab0406b5a2d52', case=False) | Hashes.str.contains(r'SHA1=336ed563ef96c40eece92a4d13de9f9b69991c8a', case=False) | Hashes.str.contains(r'SHA1=5711c88e9e64e45b8fc4b90ab6f2dd6437dc5a8a', case=False) | Hashes.str.contains(r'SHA1=ada23b709cb2bef8bedd612dc345db2e2fdbfaca', case=False) | Hashes.str.contains(r'SHA1=bd421ffdcc074ecca954d9b2c2fbce9301e9a36c', case=False) | Hashes.str.contains(r'SHA1=42f6bfcf558ef6da9254ed263a89abf4e909b5d5', case=False) | Hashes.str.contains(r'SHA1=9eef72e0c4d5055f6ae5fe49f7f812de29afbf37', case=False) | Hashes.str.contains(r'SHA1=007b2c7d72a5a89b424095dbb7f67ff2aeddb277', case=False) | Hashes.str.contains(r'SHA1=4243dbbf6e5719d723f24d0f862afd0fcb40bc35', case=False) | Hashes.str.contains(r'SHA1=35a817d949b2eab012506bed0a3b4628dd884471', case=False) | Hashes.str.contains(r'SHA1=9d07df024ec457168bf0be7e0009619f6ac4f13c', case=False) | Hashes.str.contains(r'SHA1=5f8356ffa8201f338dd2ea979eb47881a6db9f03', case=False) | Hashes.str.contains(r'SHA1=a65fabaf64aa1934314aae23f25cdf215cbaa4b6', case=False) | Hashes.str.contains(r'SHA1=21edff2937eb5cd6f6b0acb7ee5247681f624260', case=False) | Hashes.str.contains(r'SHA1=34ec04159d2c653a583a73285e6e2ac3c7b416dd', case=False) | Hashes.str.contains(r'SHA1=4f30f64b5dfcdc889f4a5e25b039c93dd8551c71', case=False) | Hashes.str.contains(r'SHA1=13572d36428ef32cfed3af7a8bb011ee756302b0', case=False) | Hashes.str.contains(r'SHA1=17d28a90ef4d3dbb083371f99943ff938f3b39f6', case=False) | Hashes.str.contains(r'SHA1=a4b2c56c12799855162ca3b004b4b2078c6ecf77', case=False) | Hashes.str.contains(r'SHA1=3ae56ab63230d6d9552360845b4a37b5801cc5ea', case=False) | Hashes.str.contains(r'SHA1=c8a4a64b412fd8ef079661db4a4a7cd7394514ca', case=False) | Hashes.str.contains(r'SHA1=24343ec4dfec11796a8800a3059b630e8be89070', case=False) | Hashes.str.contains(r'SHA1=a55b709cec2288384b12eafa8be4930e7c075ec9', case=False) | Hashes.str.contains(r'SHA1=5853e44ea0b6b4e9844651aa57d631193c1ed0f0', case=False) | Hashes.str.contains(r'SHA1=e3266b046d278194ade4d8f677772d0cb4ecfaf1', case=False) | Hashes.str.contains(r'SHA1=717669a1e2380cb61cc4e34618e118cc9cabbcd0', case=False) | Hashes.str.contains(r'SHA1=0adc1320421f02f2324e764aa344018758514436', case=False) | Hashes.str.contains(r'SHA1=7e900b0370a1d3cb8a3ea5394d7d094f95ec5dc0', case=False) | Hashes.str.contains(r'SHA1=0c74d09da7baf7c05360346e4c3512d0cd433d59', case=False) | Hashes.str.contains(r'SHA1=68b97bfaf61294743ba15ef36357cdb8e963b56e', case=False) | Hashes.str.contains(r'SHA1=e0d12e44db3f57ee7ea723683a6fd346dacf2e3e', case=False) | Hashes.str.contains(r'SHA1=31529d0e73f7fbfbe8c28367466c404c0e3e1d5a', case=False) | Hashes.str.contains(r'SHA1=04967bfd248d30183992c6c9fd2d9e07ae8d68ad', case=False) | Hashes.str.contains(r'SHA1=4d14d25b540bf8623d09c06107b8ca7bb7625c30', case=False) | Hashes.str.contains(r'SHA1=01779ee53f999464465ed690d823d160f73f10e7', case=False) | Hashes.str.contains(r'SHA1=e83fc2331ae1ea792b6cff7e970f607fee7346be', case=False) | Hashes.str.contains(r'SHA1=c8864c0c66ea45011c1c4e79328a3a1acf7e84a9', case=False) | Hashes.str.contains(r'SHA1=a92207062fb72e6e173b2ffdb12c76834455f5d3', case=False) | Hashes.str.contains(r'SHA1=6e58421e37c022410455b1c7b01f1e3c949df1cd', case=False) | Hashes.str.contains(r'SHA1=cb22723faa5ae2809476e5c5e9b9a597b26cab9b', case=False) | Hashes.str.contains(r'SHA1=4885cd221fa1ea330b9e4c1702be955d68bd3f6a', case=False) | Hashes.str.contains(r'SHA1=f7413250e7e8ad83c350092d78f0f75fcca9f474', case=False) | Hashes.str.contains(r'SHA1=78b9481607ca6f3a80b4515c432ddfe6550b18a8', case=False) | Hashes.str.contains(r'SHA1=970af806aa5e9a57d42298ab5ffa6e0d0e46deda', case=False) | Hashes.str.contains(r'SHA1=fe02ae340dc7fe08e4ad26dab9de418924e21603', case=False) | Hashes.str.contains(r'SHA1=85941b94524da181be8aad290127aa18fc71895c', case=False) | Hashes.str.contains(r'SHA1=8183a341ba6c3ce1948bf9be49ab5320e0ee324d', case=False) | Hashes.str.contains(r'SHA1=9cc694dcb532e94554a2a1ef7c6ced3e2f86ef5a', case=False) | Hashes.str.contains(r'SHA1=398e8209e5c5fdcb6c287c5f9561e91887caca7d', case=False) | Hashes.str.contains(r'SHA1=4e56e0b1d12664c05615c69697a2f5c5d893058a', case=False) | Hashes.str.contains(r'SHA1=ee877b496777763e853dd81fefd0924509bc5be0', case=False) | Hashes.str.contains(r'SHA1=3f347117d21cd8229dd99fa03d6c92601067c604', case=False) | Hashes.str.contains(r'SHA1=61f5904e9ff0d7e83ad89f0e7a3741e7f2fbf799', case=False) | Hashes.str.contains(r'SHA1=7ce978092fadbef44441a5f8dcb434df2464f193', case=False) | Hashes.str.contains(r'SHA1=b03b1996a40bfea72e4584b82f6b845c503a9748', case=False) | Hashes.str.contains(r'SHA1=1fd7f881ea4a1dbb5c9aeb9e7ad659a85421745b', case=False) | Hashes.str.contains(r'SHA1=91d026cd98de124d281fd6a8e7c54ddf6b913804', case=False) | Hashes.str.contains(r'SHA1=db006fa522142a197686c01116a6cf60e0001ef7', case=False) | Hashes.str.contains(r'SHA1=d2e6fc9259420f0c9b6b1769be3b1f63eb36dc57', case=False) | Hashes.str.contains(r'SHA1=089411e052ea17d66033155f77ae683c50147018', case=False) | Hashes.str.contains(r'SHA1=263181bc8c2c6af06b9a06d994e4b651c3ab1849', case=False) | Hashes.str.contains(r'SHA1=30e7258a5816a6db19cdda2b2603a8c3276f05c2', case=False) | Hashes.str.contains(r'SHA1=96047b280e0d6ddde9df1c79ca5f561219a0370d', case=False) | Hashes.str.contains(r'SHA1=c6bd965300f07012d1b651a9b8776028c45b149a', case=False) | Hashes.str.contains(r'SHA1=4c6ec22bc10947d089167b19d83a26bdd69f0dd1', case=False) | Hashes.str.contains(r'SHA1=ccd547ef957189eddb6ee213e5e0136e980186f9', case=False) | Hashes.str.contains(r'SHA1=8d3be83cf3bb36dbce974654b5330adb38792c2d', case=False) | Hashes.str.contains(r'SHA1=d0216ebc81618c22d9d51f2f702c739625f40037', case=False) | Hashes.str.contains(r'SHA1=18f34a0005e82a9a1556ba40b997b0eae554d5fd', case=False) | Hashes.str.contains(r'SHA1=3784d1b09a515c8824e05e9ea422c935e693080c', case=False) | Hashes.str.contains(r'SHA1=5c94c8894799f02f19e45fcab44ee33e653a4d17', case=False) | Hashes.str.contains(r'SHA1=88839168e50a4739dd4193f2d8f93a30cd1f14d8', case=False) | Hashes.str.contains(r'SHA1=2fc6845047abcf2a918fce89ab99e4955d08e72c', case=False) | Hashes.str.contains(r'SHA1=5742ad3d30bd34c0c26c466ac6475a2b832ad59e', case=False) | Hashes.str.contains(r'SHA1=d452fc8541ed5e97a6cbc93d08892c82991cdaad', case=False) | Hashes.str.contains(r'SHA1=eac1b9e1848dc455ed780292f20cd6a0c38a3406', case=False) | Hashes.str.contains(r'SHA1=bc2f3850c7b858340d7ed27b90e63b036881fd6c', case=False) | Hashes.str.contains(r'SHA1=d48757b74eff02255f74614f35aa27abbe3f72c7', case=False) | Hashes.str.contains(r'SHA1=9c6749fc6c1127f8788bff70e0ce9062959637c9', case=False) | Hashes.str.contains(r'SHA1=08efd5e24b5ebfef63b5e488144dc9fb6524eaf1', case=False) | Hashes.str.contains(r'SHA1=cb212a826324909fdedd2b572a59a5be877f1d7d', case=False) | Hashes.str.contains(r'SHA1=b0aede5a66e13469c46acbc3b01ccf038acf222c', case=False) | Hashes.str.contains(r'SHA1=0c26ab1299adcd9a385b541ef1653728270aa23e', case=False) | Hashes.str.contains(r'SHA1=d34a7c497c603f3f7fcad546dc4097c2da17c430', case=False) | Hashes.str.contains(r'SHA1=75d0b9bdfa79e5d43ec8b4c0996f559075723de7', case=False) | Hashes.str.contains(r'SHA1=1bd4ae9a406bf010e34cdd38e823f732972b18e3', case=False) | Hashes.str.contains(r'SHA1=b74338c91c6effabc02ae0ced180428ab1024c7d', case=False) | Hashes.str.contains(r'SHA1=6679cb0907ade366cf577d55be07eabc9fb83861', case=False) | Hashes.str.contains(r'SHA1=6ce0094a9aacdc050ff568935014607b8f23ff00', case=False) | Hashes.str.contains(r'SHA1=f7b3457a6fd008656e7216b1f09db2ff062f1ca4', case=False) | Hashes.str.contains(r'SHA1=89656051126c3e97477a9985d363fbdde0bc159e', case=False) | Hashes.str.contains(r'SHA1=1ecb7b9658eb819a80b8ebdaa2e69f0d84162622', case=False) | Hashes.str.contains(r'SHA1=aaaf565fa30834aba3f29a97fc58d15e372500b5', case=False) | Hashes.str.contains(r'SHA1=b49ac8fefc6d1274d84fef44c1e5183cc7accba1', case=False) | Hashes.str.contains(r'SHA1=9f2b550c58c71d407898594b110a9320d5b15793', case=False) | Hashes.str.contains(r'SHA1=3f6a997b04d2299ba0e9f505803e8d60d0755f44', case=False) | Hashes.str.contains(r'SHA1=ec0c3c61a293a90f36db5f8ed91cbf33c2b14a19', case=False) | Hashes.str.contains(r'SHA1=d73dabcb3f55935b701542fd26875006217ebbbe', case=False) | Hashes.str.contains(r'SHA1=dda8c7e852fe07d67c110dab163354a2a85f44a5', case=False) | Hashes.str.contains(r'SHA1=643383938d5e0d4fd30d302af3e9293a4798e392', case=False) | Hashes.str.contains(r'SHA1=9e8a87401dc7cc56b3a628b554ba395b1868520f', case=False) | Hashes.str.contains(r'SHA1=35b28b15835aa0775b57f460d8a03e53dc1fb30f', case=False) | Hashes.str.contains(r'SHA1=09c567b8dd7c7f93884c2e6b71a7149fc0a7a1b5', case=False) | Hashes.str.contains(r'SHA1=9f6883e59fd6c136cfc556b7b388a4c363dc0516', case=False) | Hashes.str.contains(r'SHA1=53acd4d9e7ba0b1056cf52af0d191f226eddf312', case=False) | Hashes.str.contains(r'SHA1=9a35ae9a1f95ce4be64adc604c80079173e4a676', case=False) | Hashes.str.contains(r'SHA1=5abffd08f4939a0dee81a5d95cf1c02e2e14218c', case=False) | Hashes.str.contains(r'SHA1=ea360a9f23bb7cf67f08b88e6a185a699f0c5410', case=False) | Hashes.str.contains(r'SHA1=5eb693c9cc49c7d6a03f7960ddcfd8f468e5656b', case=False) | Hashes.str.contains(r'SHA1=4518758452af35d593e0cae80d9841a86af6d3de', case=False) | Hashes.str.contains(r'SHA1=da42cefde56d673850f5ef69e7934d39a6de3025', case=False) | Hashes.str.contains(r'SHA1=c32dfdb0ee859de618484f3ab7a43ee1d9a25d1c', case=False) | Hashes.str.contains(r'SHA1=471ca4b5bb5fe68543264dd52acb99fddd7b3c6d', case=False) | Hashes.str.contains(r'SHA1=290d6376658cf0f8182de0fae40b503098fa09fd', case=False) | Hashes.str.contains(r'SHA1=2bc9047f08a664ade481d0bbf554d3a0b49424ca', case=False) | Hashes.str.contains(r'SHA1=1f84d89dd0ae5008c827ce274848d551aff3fc33', case=False) | Hashes.str.contains(r'SHA1=6053d258096bccb07cb0057d700fe05233ab1fbb', case=False) | Hashes.str.contains(r'SHA1=cb5229acdf87493e45d54886e6371fc59fc09ee5', case=False) | Hashes.str.contains(r'SHA1=2db49bdf8029fdcda0a2f722219ae744eae918b0', case=False) | Hashes.str.contains(r'SHA1=eeff4ec4ebc12c6acd2c930dc2eaaf877cfec7ec', case=False) | Hashes.str.contains(r'SHA1=24f6e827984cca5d9aa3e4c6f3c0c5603977795a', case=False) | Hashes.str.contains(r'SHA1=db3debacd5f6152abd7a457d7910a0ec4457c0d7', case=False) | Hashes.str.contains(r'SHA1=96323381a98790b8ffac1654cb65e12dbbe6aff1', case=False) | Hashes.str.contains(r'SHA1=7241b25c3a3ee9f36b52de3db2fc27db7065af37', case=False) | Hashes.str.contains(r'SHA1=3c956b524e73586195d704b874e36d49fe42cb6a', case=False) | Hashes.str.contains(r'SHA1=fb25e6886d98fe044d0eb7bd42d24a93286266e0', case=False) | Hashes.str.contains(r'SHA1=caa0cb48368542a54949be18475d45b342fb76e5', case=False) | Hashes.str.contains(r'SHA1=4c16dcc7e6d7dd29a5f6600e50fc01a272c940e1', case=False) | Hashes.str.contains(r'SHA1=1f3a9265963b660392c4053329eb9436deeed339', case=False) | Hashes.str.contains(r'SHA1=b0c7ec472abf544c5524b644a7114cba0505951e', case=False) | Hashes.str.contains(r'SHA1=622e7bffda8c80997e149ac11492625572e386e0', case=False) | Hashes.str.contains(r'SHA1=4ffa89f8dbdade28813e12db035cf9bd8665ef72', case=False) | Hashes.str.contains(r'SHA1=5fece994f2409810a0ad050b3ca9b633c93919e4', case=False) | Hashes.str.contains(r'SHA1=f50c6b84dfb8f2d53ba3bce000a55f0a486c0e79', case=False) | Hashes.str.contains(r'SHA1=2fa92d3739735bc9ac4dc38f42d909d97cc5c2a8', case=False) | Hashes.str.contains(r'SHA1=fece30b9b862bf99ae6a41e49f524fe6f32e215e', case=False) | Hashes.str.contains(r'SHA1=ae344c123ef6d206235f2a8448d07f86433db5a6', case=False) | Hashes.str.contains(r'SHA1=ad1616ea6dc17c91d983e829aa8a6706e81a3d27', case=False) | Hashes.str.contains(r'SHA1=c127c4d0917f54cee13a61c6c0029c95ae0746cf', case=False) | Hashes.str.contains(r'SHA1=84341ed15d645c4daedcdd39863998761e4cb0e3', case=False) | Hashes.str.contains(r'SHA1=fb4ce6de14f2be00a137e8dde2c68bb5b137ab9c', case=False) | Hashes.str.contains(r'SHA1=22c905fcdd7964726b4be5e8b5a9781322687a45', case=False) | Hashes.str.contains(r'SHA1=4927d843577bada119a17b249ff4e7f5e9983a92', case=False) | Hashes.str.contains(r'SHA1=d083e69055556a36df7c6e02115cbbf90726f35c', case=False) | Hashes.str.contains(r'SHA1=f0c463d29a5914b01e4607889094f1b7d95e7aaf', case=False) | Hashes.str.contains(r'SHA1=86e59b17272a3e7d9976c980ded939bf8bf75069', case=False) | Hashes.str.contains(r'SHA1=eb0021e29488c97a0e42a084a4fe5a0695eccb7b', case=False) | Hashes.str.contains(r'SHA1=388819a7048179848425441c60b3a8390ad04a69', case=False) | Hashes.str.contains(r'SHA1=611411538b2bc9045d29bbd07e6845e918343e3c', case=False) | Hashes.str.contains(r'SHA1=43011eb72be4775fec37aa436753c4d6827395d1', case=False) | Hashes.str.contains(r'SHA1=18938e0d924ee7c0febdbf2676a099e828182c1c', case=False) | Hashes.str.contains(r'SHA1=1743b073cccf44368dc83ed3659057eb5f644b06', case=False) | Hashes.str.contains(r'SHA1=fb1570b4865083dfce1fcff2bd72e9e1b03cead5', case=False) | Hashes.str.contains(r'SHA1=96c2e1d7c9a8ad242f8f478e871f645895d3e451', case=False) | Hashes.str.contains(r'SHA1=fcd615df88645d1f57ff5702bd6758b77efea6d0', case=False) | Hashes.str.contains(r'SHA1=70258117b5efe65476f85143fd14fa0b7f148adb', case=False) | Hashes.str.contains(r'SHA1=90a76945fd2fa45fab2b7bcfdaf6563595f94891', case=False) | Hashes.str.contains(r'SHA1=24b3f962587b0062ac9a1ec71bcc3836b12306d2', case=False) | Hashes.str.contains(r'SHA1=663803d7ab5aff28be37c2e7e8c7b98b91c5733e', case=False) | Hashes.str.contains(r'SHA1=2739c2cfa8306e6f78c335c55639566b3d450644', case=False) | Hashes.str.contains(r'SHA1=2027e5e8f2cfdfbd9081f99b65af4921626d77f9', case=False) | Hashes.str.contains(r'SHA1=eb44a05f8bba3d15e38454bd92999a856e6574eb', case=False) | Hashes.str.contains(r'SHA1=d7597d27eeb2658a7c7362193f4e5c813c5013e5', case=False) | Hashes.str.contains(r'SHA1=35f1ba60ba0da8512a0b1b15ee8e30fe240d77cd', case=False) | Hashes.str.contains(r'SHA1=1e6c2763f97e4275bba581de880124d64666a2fe', case=False) | Hashes.str.contains(r'SHA1=19977d45e98b48c901596fb0a49a7623cee4c782', case=False) | Hashes.str.contains(r'SHA1=27d3ebea7655a72e6e8b95053753a25db944ec0f', case=False) | Hashes.str.contains(r'SHA1=a2e0b3162cfa336cd4ab40a2acc95abe7dc53843', case=False) | Hashes.str.contains(r'SHA1=3d6d53b0f1cc908b898610227b9f1b9352137aba', case=False) | Hashes.str.contains(r'SHA1=8d0f33d073720597164f7321603578cd13346d1f', case=False) | Hashes.str.contains(r'SHA1=229716e61f74db821d5065bac533469efb54867b', case=False) | Hashes.str.contains(r'SHA1=dc7b022f8bd149efbcb2204a48dce75c72633526', case=False) | Hashes.str.contains(r'SHA1=ccdd3a1ebe9a1c8f8a72af20a05a10f11da1d308', case=False) | Hashes.str.contains(r'SHA1=469c04cb7841eedd43227facaf60a6d55cf21fd7', case=False) | Hashes.str.contains(r'SHA1=722aa0fa468b63c5d7ea308d77230ae3169d5f83', case=False) | Hashes.str.contains(r'SHA1=bfd8568f19d4273a1288726342d7620cc9070ae5', case=False) | Hashes.str.contains(r'SHA1=17b3163aecd1f512f1603548ef6eb4947fbec95e', case=False) | Hashes.str.contains(r'SHA1=ce549714a11bd43b52be709581c6e144957136ec', case=False) | Hashes.str.contains(r'SHA1=a3224815aedc14bb46f09535e9b8ca7eaa4963bf', case=False) | Hashes.str.contains(r'SHA1=ba0d6c596b78a1fc166747d7523ca6316ef87e9f', case=False) | Hashes.str.contains(r'SHA1=f85f5e5d747433b274e53c8377bf24fbc08758b6', case=False) | Hashes.str.contains(r'SHA1=2e9466d5a814c20403be7c7a5811039ca833bd5d', case=False) | Hashes.str.contains(r'SHA1=3bb1dddb4157b6b8175fc6e1e7c33bef7870c500', case=False) | Hashes.str.contains(r'SHA1=b0032b8d8e6f4bd19a31619ce38d8e010f29a816', case=False) | Hashes.str.contains(r'SHA1=a958734d25865cbc6bcbc11090ab9d6b72799143', case=False) | Hashes.str.contains(r'SHA1=11fcaeda49848474cee9989a00d8f29cb727acb7', case=False) | Hashes.str.contains(r'SHA1=45328110873640d8fed9fc72f7d2eadd3d17ceae', case=False) | Hashes.str.contains(r'SHA1=8db869c0674221a2d3280143cbb0807fac08e0cc', case=False) | Hashes.str.contains(r'SHA1=3fd5cd30085450a509eaa6367af26f6c4b9741b6', case=False) | Hashes.str.contains(r'SHA1=f1b3bdc3beb2dca19940d53eb5a0aed85b807e30', case=False) | Hashes.str.contains(r'SHA1=948fa3149742f73bf3089893407df1b20f78a563', case=False) | Hashes.str.contains(r'SHA1=e039c9dd21494dbd073b4823fc3a17fbb951ec6c', case=False) | Hashes.str.contains(r'SHA1=5eed0ce6487d0b8d0a6989044c4fcab1bd845d9e', case=False) | Hashes.str.contains(r'SHA1=ce31292b05c0ae1dc639a6ee95bb3bc7350f2aaf', case=False) | Hashes.str.contains(r'SHA1=1a53902327bac3ab323ee63ed215234b735c64da', case=False) | Hashes.str.contains(r'SHA1=078ae07dec258db4376d5a2a05b9b508d68c0123', case=False) | Hashes.str.contains(r'SHA1=609fa1efcf61e26d64a5ceb13b044175ab2b3a13', case=False) | Hashes.str.contains(r'SHA1=f052dc35b74a1a6246842fbb35eb481577537826', case=False) | Hashes.str.contains(r'SHA1=ba3faca988ff56f4850dede2587d5a3eff7c6677', case=False) | Hashes.str.contains(r'SHA1=8f266edf9f536c7fc5bb3797a1cf9039fde8e97c', case=False) | Hashes.str.contains(r'SHA1=d57c732050d7160161e096a8b238cb05d89d1bb2', case=False) | Hashes.str.contains(r'SHA1=7480c7f7346ce1f86a7429d9728235f03a11f227', case=False) | Hashes.str.contains(r'SHA1=40abf7edb4c76fb3f22418f03198151c5363f1cb', case=False) | Hashes.str.contains(r'SHA1=43b61039f415d14189d578012b6cb1bd2303d304', case=False) | Hashes.str.contains(r'SHA1=1e7c241b9a9ea79061b50fb19b3d141dee175c27', case=False) | Hashes.str.contains(r'SHA1=a809831166a70700b59076e0dbc8975f57b14398', case=False) | Hashes.str.contains(r'SHA1=22c9cd0f5986e91b733fbd5eda377720fd76c86d', case=False) | Hashes.str.contains(r'SHA1=d7b20ac695002334f804ffc67705ce6ac5732f91', case=False) | Hashes.str.contains(r'SHA1=fe1d909ab38de1389a2a48352fd1c8415fd2eab0', case=False) | Hashes.str.contains(r'SHA1=a64354aac2d68b4fa74b5829a9d42d90d83b040c', case=False) | Hashes.str.contains(r'SHA1=72a5ac213ec1681d173bee4f1807c70a77b41bf6', case=False) | Hashes.str.contains(r'SHA1=485c0b9710a196c7177b99ee95e5ddb35b26ddd1', case=False) | Hashes.str.contains(r'SHA1=891c8d482e23222498022845a6b349fe1a186bcc', case=False) | Hashes.str.contains(r'SHA1=6a60c5dc7d881ddb5d6fe954f10b8aa10d214e72', case=False) | Hashes.str.contains(r'SHA1=b4dcdbd97f38b24d729b986f84a9cdb3fc34d59f', case=False) | Hashes.str.contains(r'SHA1=e40ea8d498328b90c4afbb0bb0e8b91b826f688e', case=False) | Hashes.str.contains(r'SHA1=356172a2e12fd3d54e758aaa4ff0759074259144', case=False) | Hashes.str.contains(r'SHA1=7115929de6fc6b9f09142a878d1a1bf358af5f24', case=False) | Hashes.str.contains(r'SHA1=1b84abffd814b9f4595296b3e5ede0c44e630967', case=False) | Hashes.str.contains(r'SHA1=40d29aa7b3fafd27c8b27c7ca7a3089ccb88d69b', case=False) | Hashes.str.contains(r'SHA1=1c3f2579310ddd7ae09ce9ca1cc537a771b83c9f', case=False) | Hashes.str.contains(r'SHA1=f3db629cfe37a73144d5258e64d9dd8b38084cf4', case=False) | Hashes.str.contains(r'SHA1=879fcc6795cebe67718388228e715c470de87dca', case=False) | Hashes.str.contains(r'SHA1=b33b99ae2653b4e675beb7d9eb2c925a1f105bd4', case=False) | Hashes.str.contains(r'SHA1=160c96b5e5db8c96b821895582b501e3c2d5d6e7', case=False) | Hashes.str.contains(r'SHA1=8b6aa5b2bff44766ef7afbe095966a71bc4183fa', case=False) | Hashes.str.contains(r'SHA1=c31049605f028a56ce939cd2f97c2e56c12d99f8', case=False) | Hashes.str.contains(r'SHA1=a380aeb3ffaecc53ca48bb1d4d622c46f1de7962', case=False) | Hashes.str.contains(r'SHA1=c4ed28fdfba7b8a8dfe39e591006f25d39990f07', case=False) | Hashes.str.contains(r'SHA1=3048f3422b2b31b74eace0dab3f5c4440bdc7bb2', case=False) | Hashes.str.contains(r'SHA1=4d41248078181c7f61e6e4906aa96bbdea320dc2', case=False) | Hashes.str.contains(r'SHA1=0ff2ad8941fbb80cbccb6db7db1990c01c2869b1', case=False) | Hashes.str.contains(r'SHA1=6d3c760251d6e6ea7ff4f4fcac14876fac829cf9', case=False) | Hashes.str.contains(r'SHA1=20cf02c95e329cf2fd4563cddcbd434aad81ccb4', case=False) | Hashes.str.contains(r'SHA1=414cd15d6c991d19fb5be02e3b9fb0e6c5ce731c', case=False) | Hashes.str.contains(r'SHA1=e835776e0dc68c994dd18e8628454520156c93e3', case=False) | Hashes.str.contains(r'SHA1=99201c9555e5faf6e8d82da793b148311f8aa4b8', case=False) | Hashes.str.contains(r'SHA1=97bc298a1d12a493bf14e6523e4ff48d64832954', case=False) | Hashes.str.contains(r'SHA1=fb349c3cde212ef33a11a9d58a622dc58dff3f74', case=False) | Hashes.str.contains(r'SHA1=8cc8974a05e81678e3d28acfe434e7804abd019c', case=False) | Hashes.str.contains(r'SHA1=b0a684474eb746876faa617a28824bee93ba24f0', case=False) | Hashes.str.contains(r'SHA1=a01c42a5be7950adbc7228a9612255ac3a06b904', case=False) | Hashes.str.contains(r'SHA1=a22dead5cdf05bd2f79a4d0066ffcf01c7d303ec', case=False) | Hashes.str.contains(r'SHA1=f7ce71891738a976cd8d4b516c8d7a8e2f6b0ad6', case=False) | Hashes.str.contains(r'SHA1=441f87633ee6fbea5dee1268d1b9b936a596464d', case=False) | Hashes.str.contains(r'SHA1=da9cea92f996f938f699902482ac5313d5e8b28e', case=False) | Hashes.str.contains(r'SHA1=32f27451c377c8b5ea66be5475c2f2733cffe306', case=False) | Hashes.str.contains(r'SHA1=58ebfb7de214ee09f6bf71c8cc9c139dd4c8b016', case=False) | Hashes.str.contains(r'SHA1=f5293ac70d75cdfe580ff6a9edcc83236012eaf1', case=False) | Hashes.str.contains(r'SHA1=2d503a2457a787014a1fdd48a2ece2e6cbe98ea7', case=False) | Hashes.str.contains(r'SHA1=0b63e76fad88ac48dbfc7cf227890332fcd994a5', case=False) | Hashes.str.contains(r'SHA1=3ccf1f3ac636a5e21b39ede48ff49fa23e05413f', case=False) | Hashes.str.contains(r'SHA1=160a237295a9e5cbb64ca686a84e47553a14f71d', case=False) | Hashes.str.contains(r'SHA1=f5d58452620b55c2931cba75eb701f4cde90a9e4', case=False) | Hashes.str.contains(r'SHA1=a24840e32071e0f64e1dff8ca540604896811587', case=False) | Hashes.str.contains(r'SHA1=fad8e308f6d2e6a9cfaf9e6189335126a3c69acb', case=False) | Hashes.str.contains(r'SHA1=6da2dd8a0b4c0e09a04613bbabfc07c0b848ec77', case=False) | Hashes.str.contains(r'SHA1=35829e096a15e559fcbabf3441d99e580ca3b26e', case=False) | Hashes.str.contains(r'SHA1=f049e68720a5f377a5c529ca82d1147fe21b4c33', case=False) | Hashes.str.contains(r'SHA1=c4454a3a4a95e6772acb8a3d998b78a329259566', case=False) | Hashes.str.contains(r'SHA1=5291b17205accf847433388fe17553e96ad434ec', case=False) | Hashes.str.contains(r'SHA1=8b037d7a7cb612eabd8e20a9ce93afd92a6db2c2', case=False) | Hashes.str.contains(r'SHA1=0cca79962d9af574169f5dec12b1f4ca8e5e1868', case=False) | Hashes.str.contains(r'SHA1=87d47340d1940eaeb788523606804855818569e3', case=False) | Hashes.str.contains(r'SHA1=272ffcda920a8e2440eb0d31dcd05485e0d597ad', case=False) | Hashes.str.contains(r'SHA1=e28b754d4d332ea57349110c019d841cf4d27356', case=False) | Hashes.str.contains(r'SHA1=d1c38145addfed1bcd1b400334ff5a5e2ef9a5c6', case=False) | Hashes.str.contains(r'SHA1=c201d5d0ab945095c3b1a356b3b228af1aa652fc', case=False) | Hashes.str.contains(r'SHA1=39e57a0bb3b349c70ad5f11592f9282860bbcc0a', case=False) | Hashes.str.contains(r'SHA1=5622caf22032e5cbef52f48077cfbcbbbe85e961', case=False) | Hashes.str.contains(r'SHA1=d8498707f295082f6a95fd9d32c9782951f5a082', case=False) | Hashes.str.contains(r'SHA1=da03799bb0025a476e3e15cc5f426e5412aeef02', case=False) | Hashes.str.contains(r'SHA1=b5dfa3396136236cc9a5c91f06514fa717508ef5', case=False) | Hashes.str.contains(r'SHA1=ba63502aaf8c5a7c2464e83295948447e938a844', case=False) | Hashes.str.contains(r'SHA1=21ce232de0f306a162d6407fe1826aff435b2a04', case=False) | Hashes.str.contains(r'SHA1=36a6f75f05ac348af357fdecbabe1a184fe8d315', case=False) | Hashes.str.contains(r'SHA1=03257294ee74f69881002c4bf764b9cb83b759d6', case=False) | Hashes.str.contains(r'SHA1=6b54f8f137778c1391285fee6150dfa58a8120b1', case=False) | Hashes.str.contains(r'SHA1=1045c63eccb54c8aee9fd83ffe48306dc7fe272c', case=False) | Hashes.str.contains(r'SHA1=8f4b79b8026da7f966d38a8ba494c113c5e3894b', case=False) | Hashes.str.contains(r'SHA1=f736ccbb44c4de97cf9e9022e1379a4f58f5a5b8', case=False) | Hashes.str.contains(r'SHA1=d612165251d5f1dcfb1f1a762c88d956f49ce344', case=False) | Hashes.str.contains(r'SHA1=fac870d438bf62ecd5d5c8c58cc9bfda6f246b8b', case=False) | Hashes.str.contains(r'SHA1=86b1186a4e282341daf2088204ab9ff2d0402d28', case=False) | Hashes.str.contains(r'SHA1=b8de3a1aeeda9deea43e3f768071125851c85bd0', case=False) | Hashes.str.contains(r'SHA1=0cac0dbaa7adb7bba6e92c7cd2d514be7e86a914', case=False) | Hashes.str.contains(r'SHA1=1b25fbab2dbee5504dc94fbcc298cd8669c097a8', case=False) | Hashes.str.contains(r'SHA1=28b1c0b91eb6afd2d26b239c9f93beb053867a1a', case=False) | Hashes.str.contains(r'SHA1=8d6d6745a2adc9e5aa025c38875554ae6440d1ad', case=False) | Hashes.str.contains(r'SHA1=f42aa04b69a2e2241958b972ef24b65f91c3af12', case=False) | Hashes.str.contains(r'SHA1=44a3a00394a6d233a27189482852babf070ffebe', case=False) | Hashes.str.contains(r'SHA1=3e406325a717d7163ca31e81beae822d03cbe3d8', case=False) | Hashes.str.contains(r'SHA1=fc154983af4a5be15ae1e4b54e2050530b8bc057', case=False) | Hashes.str.contains(r'SHA1=a3636986cdcd1d1cb8ab540f3d5c29dcc90bb8f0', case=False) | Hashes.str.contains(r'SHA1=f9c916d163b85057414300ca214ebdf751172ecf', case=False) | Hashes.str.contains(r'SHA1=195b91a1a43de8bfb52a4869fbf53d7a226a6559', case=False) | Hashes.str.contains(r'SHA1=d62fa51e520022483bdc5847141658de689c0c29', case=False) | Hashes.str.contains(r'SHA1=9329a0ce2749a3a6bea2028ce7562d74c417db64', case=False) | Hashes.str.contains(r'SHA1=cfdb2085eaf729c7967f5d4efe16da3d50d07a23', case=False) | Hashes.str.contains(r'SHA1=184729ec2ffd0928a408255a23b3f532ffb3db3d', case=False) | Hashes.str.contains(r'SHA1=45a9f95a7a018925148152b888d09d478d56bbf5', case=False) | Hashes.str.contains(r'SHA1=a5f9aef55c64722ff2db96039af3b9c7dd8163e3', case=False) | Hashes.str.contains(r'SHA1=483e58ed495e4067a7c42ca48e8a5f600b14e018', case=False) | Hashes.str.contains(r'SHA1=b9b72a5be3871ddc0446bae35548ea176c4ea613', case=False) | Hashes.str.contains(r'SHA1=18f09ec53f0b7d2b1ab64949157e0e84628d0f0a', case=False) | Hashes.str.contains(r'SHA1=de2b56ef7a30a4697e9c4cdcae0fc215d45d061d', case=False) | Hashes.str.contains(r'SHA1=e2e7a2b2550b889235aafd9ffd1966ccd20badfe', case=False) | Hashes.str.contains(r'SHA1=016aa643fbd8e10484741436bcacc0d9eee483c8', case=False) | Hashes.str.contains(r'SHA1=5c88d9fcc491c7f1078c224e1d6c9f5bda8f3d8a', case=False) | Hashes.str.contains(r'SHA1=86e893e59352fcb220768fb758fcc5bbd91dd39e', case=False) | Hashes.str.contains(r'SHA1=1568117f691b41f989f10562f354ee574a6abc2d', case=False) | Hashes.str.contains(r'SHA1=5c2262f9e160047b9f4dee53bbfd958ec27ec22e', case=False) | Hashes.str.contains(r'SHA1=cb3de54667548a5c9abf5d8fa47db4097fcee9f1', case=False) | Hashes.str.contains(r'SHA1=8db4376a86bd2164513c178a578a0bf8d90e7292', case=False) | Hashes.str.contains(r'SHA1=4a04596acf79115f15add3921ce30a96f594d7ce', case=False) | Hashes.str.contains(r'SHA1=16a091bfd1fd616d4607cac367782b1d2ab07491', case=False) | Hashes.str.contains(r'SHA1=cf664e30f8bd548444458eef6d56d5c2e2713e2a', case=False) | Hashes.str.contains(r'SHA1=0466e90bf0e83b776ca8716e01d35a8a2e5f96d3', case=False) | Hashes.str.contains(r'SHA1=f544f25104fe997ec873f5cec64c7aa722263fb4', case=False) | Hashes.str.contains(r'SHA1=be797c91768ac854bd3b82a093e55db83da0cb11', case=False) | Hashes.str.contains(r'SHA1=cea540a2864ece0a868d841ab27680ff841fcbe6', case=False) | Hashes.str.contains(r'SHA1=b4f1877156bf3157bff1170ba878848b2f22d2d5', case=False) | Hashes.str.contains(r'SHA1=55cffb0ef56e52686b0c407b94bbea3701d6eccd', case=False) | Hashes.str.contains(r'SHA1=b6543d006cb2579fb768205c479524e432c04204', case=False) | Hashes.str.contains(r'SHA1=879b32fcf78044cbc74b57717ab3ae18e77bc2fb', case=False) | Hashes.str.contains(r'SHA1=e92817a8744ebc4e4fa5383cdce2b2977f01ecd4', case=False) | Hashes.str.contains(r'SHA1=4a7324ca485973d514fd087699f6d759ff32743b', case=False) | Hashes.str.contains(r'SHA1=e41808b022656befb7dc42bbeceaf867e2fec6b2', case=False) | Hashes.str.contains(r'SHA1=1e09f3dd6ba9386fa9126f0116e49c2371401e01', case=False) | Hashes.str.contains(r'SHA1=5bdd44eb321557c5d3ab056959397f0048ac90e6', case=False) | Hashes.str.contains(r'SHA1=42bb38b0b93d83b62fe2604b154ada9314c98df7', case=False) | Hashes.str.contains(r'SHA1=c47b890dda9882f9f37eccc27d58d6a774a2901f', case=False) | Hashes.str.contains(r'SHA1=2cc70b772b42e0208f345c7c70d78f7536812f99', case=False) | Hashes.str.contains(r'SHA1=a7948a4e9a3a1a9ed0e4e41350e422464d8313cd', case=False) | Hashes.str.contains(r'SHA1=b7a2f2760f9819cb242b2e4f5b7bab0a65944c81', case=False) | Hashes.str.contains(r'SHA1=7a1689cde189378e7db84456212b0e438f9bf90a', case=False) | Hashes.str.contains(r'SHA1=1d0df45ee3fa758f0470e055915004e6eae54c95', case=False) | Hashes.str.contains(r'SHA1=c6920171fa6dff2c17eb83befb5fd28e8dddf5f0', case=False) | Hashes.str.contains(r'SHA1=0a6e0f9f3d7179a99345d40e409895c12919195b', case=False) | Hashes.str.contains(r'SHA1=2dd916cb8a9973b5890829361c1f9c0d532ba5d6', case=False) | Hashes.str.contains(r'SHA1=bb962c9a8dda93e94fef504c4159de881e4706fe', case=False) | Hashes.str.contains(r'SHA1=dcfeca5e883a084e89ecd734c4528b922a1099b9', case=False) | Hashes.str.contains(r'SHA1=f56fec3f2012cd7fc4528626debc590909ed74b6', case=False) | Hashes.str.contains(r'SHA1=d126c6974a21e9c5fdd7ff1ca60bcc37c9353b47', case=False) | Hashes.str.contains(r'SHA1=a6aa7926aa46beaf9882a93053536b75ef2c7536', case=False) | Hashes.str.contains(r'SHA1=eb1ecad3d37bb980f908bf1a912415cff32e79e6', case=False) | Hashes.str.contains(r'SHA1=3805e4e08ad342d224973ecdade8b00c40ed31be', case=False) | Hashes.str.contains(r'SHA1=7ba4607763c6fef1b2562b72044a20ca2a0303e2', case=False) | Hashes.str.contains(r'SHA1=bec66e0a4842048c25732f7ea2bbe989ea400abf', case=False) | Hashes.str.contains(r'SHA1=fd87b70f94674b02d62bb01ae6e62d75c618f5c8', case=False) | Hashes.str.contains(r'SHA1=d17656f11b899d58dca7b6c3dd6eef3d65ae88e2', case=False) | Hashes.str.contains(r'SHA1=c1c869deee6293eee3d0d84b6706d90fab8f8558', case=False) | Hashes.str.contains(r'SHA1=f56186b6a7aa3dd7832c9d821f9d2d93bc2a9360', case=False) | Hashes.str.contains(r'SHA1=e9d7d7d42fd534abf52da23c0d6ec238cefde071', case=False) | Hashes.str.contains(r'SHA1=8d0ae69fbe0c6575b6f8caf3983dd3ddc65aadb5', case=False) | Hashes.str.contains(r'SHA1=b67945815e40b1cd90708c57c57dab12ed29da83', case=False) | Hashes.str.contains(r'SHA1=806832983bb8cb1e26001e60ea3b7c3ade4d3471', case=False) | Hashes.str.contains(r'SHA1=a4e2e227f984f344d48f4bf088ca9d020c63db4e', case=False) | Hashes.str.contains(r'SHA1=a34adabde63514e1916713a588905c4019f83efb', case=False) | Hashes.str.contains(r'SHA1=3270720a066492b046d7180ca6e60602c764cac7', case=False) | Hashes.str.contains(r'SHA1=2bcb81f1b643071180e8ed8f7e42f49606669976', case=False) | Hashes.str.contains(r'SHA1=3296844d22c87dd5eba3aa378a8242b41d59db7a', case=False) | Hashes.str.contains(r'SHA1=bb1f9cc94e83c59c90b055fe13bb4604b2c624df', case=False) | Hashes.str.contains(r'SHA1=fbc6d2448739ddec35bb5d6c94b46df4148f648d', case=False) | Hashes.str.contains(r'SHA1=d702d88b12233be9413446c445f22fda4a92a1d9', case=False) | Hashes.str.contains(r'SHA1=6ecfc7ccc4843812bfccfb7e91594c018f0a0ff9', case=False) | Hashes.str.contains(r'SHA1=2b0bb408ff0e66bcdf6574f1ca52cbf4015b257b', case=False) | Hashes.str.contains(r'SHA1=c520a368c472869c3dc356a7bcfa88046352e4d9', case=False) | Hashes.str.contains(r'SHA1=254dce914e13b90003b0ae72d8705d92fe7c8dd0', case=False) | Hashes.str.contains(r'SHA1=e9f576137181c261dc3b23871d1d822731d54a12', case=False) | Hashes.str.contains(r'SHA1=ec1eafb87340b18c7ef3bc349fed1ddd5d3678f6', case=False) | Hashes.str.contains(r'SHA1=1c537fd17836283364349475c6138e6667cf1164', case=False) | Hashes.str.contains(r'SHA1=cfdf9c9125755f4e81fa7cc5410d7740fdfea4ed', case=False) | Hashes.str.contains(r'SHA1=252157ab2e33eed7aa112d1c93c720cadcee31ae', case=False) | Hashes.str.contains(r'SHA1=97f668aa01ebbbf2f5f93419d146e6608d203efd', case=False) | Hashes.str.contains(r'SHA1=9feacc95d30107ce3e1e9a491e2c12d73eef2979', case=False) | Hashes.str.contains(r'SHA1=26c4a7b392d7e7bd7f0a2a758534e45c0d9a56ab', case=False) | Hashes.str.contains(r'SHA1=0f78974194b604122b1cd4e82768155f946f6d24', case=False) | Hashes.str.contains(r'SHA1=3cd037fbba8aae82c1b111c9f8755349c98bcb3c', case=False) | Hashes.str.contains(r'SHA1=d363011d6991219d7f152609164aba63c266b740', case=False) | Hashes.str.contains(r'SHA1=89909fa481ff67d7449ee90d24c167b17b0612f1', case=False) | Hashes.str.contains(r'SHA1=db3538f324f9e52defaba7be1ab991008e43d012', case=False) | Hashes.str.contains(r'SHA1=008a292f71f49be1fb538f876de6556ce7b5603a', case=False) | Hashes.str.contains(r'SHA1=e35969966769e7760094cbcffb294d0d04a09db6', case=False) | Hashes.str.contains(r'SHA1=5236728c7562b047a9371403137a6e169e2026a6', case=False) | Hashes.str.contains(r'SHA1=862387e84baaf506c10080620cc46df2bda03eea', case=False) | Hashes.str.contains(r'SHA1=c0100f8a8697a240604b3ea88848dd94947c7fd3', case=False) | Hashes.str.contains(r'SHA1=ad05bff5fe45df9e08252717fc2bc2af57bf026f', case=False) | Hashes.str.contains(r'SHA1=a87d6eac2d70a3fbc04e59412326b28001c179de', case=False) | Hashes.str.contains(r'SHA1=637d0de7fa2a06e462dad40a575cb0fa4a38d377', case=False) | Hashes.str.contains(r'SHA1=0904b8fa4654197eefd6380c81bbb2149ffe0634', case=False) | Hashes.str.contains(r'SHA1=928b9b180ff5deb9f9dd3a38c4758bcf09298c47', case=False) | Hashes.str.contains(r'SHA1=432fa24e0ce4b3673113c90b34d6e52dc7bac471', case=False) | Hashes.str.contains(r'SHA1=bbc0b9fd67c8f4cefa3d76fcb29ff3cef996b825', case=False) | Hashes.str.contains(r'SHA1=444f96d8943aec21d26f665203f3fb80b9a2a260', case=False) | Hashes.str.contains(r'SHA1=e74b6dda8bc53bc687fc21218bd34062a78d8467', case=False) | Hashes.str.contains(r'SHA1=eba5483bb47ec6ff51d91a9bdf1eee3b6344493d', case=False) | Hashes.str.contains(r'SHA1=e3048cd05573dc1d30b1088859bc728ef67aaad0', case=False) | Hashes.str.contains(r'SHA1=537923c633d8fc94d9ae45ad9d89e5346f581f17', case=False) | Hashes.str.contains(r'SHA1=022f7aa4d0f04d594588ae9fa65c90bcc4bda833', case=False) | Hashes.str.contains(r'SHA1=d979353d04bf65cc92ad3412605bc81edbb75ec2', case=False) | Hashes.str.contains(r'SHA1=7a107291a9fad0d298a606eb34798d423c4a5683', case=False) | Hashes.str.contains(r'SHA1=12d38abbc5391369a4c14f3431715b5b76ac5a2a', case=False) | Hashes.str.contains(r'SHA1=0fd700fee341148661616ecd8af8eca5e9fa60e3', case=False) | Hashes.str.contains(r'SHA1=3aba6dd15260875eb290e9d67992066141aa0bb0', case=False) | Hashes.str.contains(r'SHA1=a5596d4d329add26b9ca9fa7005302148dfacfd8', case=False) | Hashes.str.contains(r'SHA1=e6305dddd06490d7f87e3b06d09e9d4c1c643af0', case=False) | Hashes.str.contains(r'SHA1=22fc833e07dd163315095d32ebcd3b3e377c33a4', case=False) | Hashes.str.contains(r'SHA1=558aad879b6a47d94a968f39d0a4e3a3aaef1ef1', case=False) | Hashes.str.contains(r'SHA1=c9522cf7f6d6637aaff096b4b16b0d81f6ee1c37', case=False) | Hashes.str.contains(r'SHA1=d11659145d6627f3d93975528d92fb6814171f91', case=False) | Hashes.str.contains(r'SHA1=d3d2fe8080f0b18465520785f3a955e1a24ae462', case=False) | Hashes.str.contains(r'SHA1=6afc6b04cf73dd461e4a4956365f25c1f1162387', case=False) | Hashes.str.contains(r'SHA1=ea37a4241fa4d92c168d052c4e095ccd22a83080', case=False) | Hashes.str.contains(r'SHA1=72966ca845759d239d09da0de7eebe3abe86fee3', case=False) | Hashes.str.contains(r'SHA1=93aa3bb934b74160446df3a47fa085fd7f3a6be9', case=False) | Hashes.str.contains(r'SHA1=dc69a6cdf048e2c4a370d4b5cafd717d236374ea', case=False) | Hashes.str.contains(r'SHA1=24daa825adedcbbb1d098cbe9d68c40389901b64', case=False) | Hashes.str.contains(r'SHA1=2bf6b88b84d27cdf0699d6d18b08a1b36310cdd1', case=False) | Hashes.str.contains(r'SHA1=dc55217b6043d819eadebd423ff07704ee103231', case=False) | Hashes.str.contains(r'SHA1=2ba0db7465cf4ffb272f803a9d77292b79c1e6df', case=False) | Hashes.str.contains(r'SHA1=52ea274e399df8706067fdc5ac52af0480461887', case=False) | Hashes.str.contains(r'SHA1=d8adf4f02513367c2b273abb0bc02f7eb3a5ef19', case=False) | Hashes.str.contains(r'SHA1=6887668eb41637bbbab285d41a36093c6b17a8fa', case=False) | Hashes.str.contains(r'SHA1=d6b1b3311263bfb170f2091d22f373c2215051b7', case=False) | Hashes.str.contains(r'SHA1=fad014ec98529644b5db5388d96bc4f9b77dcdc3', case=False) | Hashes.str.contains(r'SHA1=a714a2a045fa8f46d0165b78fe3eecf129c1de3a', case=False) | Hashes.str.contains(r'SHA1=a09334489fb18443c8793cb0395860518193cc3c', case=False) | Hashes.str.contains(r'SHA1=49d58f7565bacf10539bc63f1d2fe342b3c3d85a', case=False) | Hashes.str.contains(r'SHA1=e4fcb363cfe9de0e32096fa5be94a41577a89bb0', case=False) | Hashes.str.contains(r'SHA1=6a60f5fa0dfc6c1fa55b24a29df7464ee01a9717', case=False) | Hashes.str.contains(r'SHA1=8b86c99328e4eb542663164685c6926e7e54ac20', case=False) | Hashes.str.contains(r'SHA1=431550db5c160b56e801f220ceeb515dc16e68d2', case=False) | Hashes.str.contains(r'SHA1=50e2bc41f0186fdce970b80e2a2cb296353af586', case=False) | Hashes.str.contains(r'SHA1=dd893cd3520b2015790f7f48023d833f8fe81374', case=False) | Hashes.str.contains(r'SHA1=7626036baf98ddcb492a8ec34e58c022ebd70a80', case=False) | Hashes.str.contains(r'SHA1=0b8b83f245d94107cb802a285e6529161d9a834d', case=False) | Hashes.str.contains(r'SHA1=c01caaa74439af49ca81cb5b200a167e7d32343c', case=False) | Hashes.str.contains(r'SHA1=26a8ab6ea80ab64d5736b9b72a39d90121156e76', case=False) | Hashes.str.contains(r'SHA1=bdfb25cc4ed569dc0d5849545eb4abe08539029f', case=False) | Hashes.str.contains(r'SHA1=f6f7b5776001149496092a95fb10218dea5d6a6b', case=False) | Hashes.str.contains(r'SHA1=166759fd511613414d3213942fe2575b926a6226', case=False) | Hashes.str.contains(r'SHA1=cce9b82f01ec68f450f5fe4312f40d929c6a506e', case=False) | Hashes.str.contains(r'SHA1=0a89a6f6f40213356487bfcfb0b129e4f6375180', case=False) | Hashes.str.contains(r'SHA1=f640c94e71921479cc48d06b59aba41ffa50a769', case=False) | Hashes.str.contains(r'SHA1=16d7ecf09fc98798a6170e4cef2745e0bee3f5c7', case=False) | Hashes.str.contains(r'SHA1=8d59fd14a445c8f3f0f7991fa6cd717d466b3754', case=False) | Hashes.str.contains(r'SHA1=3ca51b23f8562485820883e894b448413891183a', case=False) | Hashes.str.contains(r'SHA1=8275977e4b586e485e9025222d0a582fcb9e1e8f', case=False) | Hashes.str.contains(r'SHA1=30846313e3387298f1f81c694102133568d6d48d', case=False) | Hashes.str.contains(r'SHA1=b52886433e608926a0b6e623217009e4071b107e', case=False) | Hashes.str.contains(r'SHA1=d19d1d3aa30391922989f4c6e3f7dc4937dcefbf', case=False) | Hashes.str.contains(r'SHA1=d569d4bab86e70efbcdfdac9d822139d6f477b7c', case=False) | Hashes.str.contains(r'SHA1=091a039f5f2ae1bb0fa0f83660f4c178fd3a5a10', case=False) | Hashes.str.contains(r'SHA1=6293ff11805cd33bccbcca9f0132bff3ae2e2534', case=False) | Hashes.str.contains(r'SHA1=6523b3fd87de39eb5db1332e4523ce99556077dc', case=False) | Hashes.str.contains(r'SHA1=7667b72471689151e176baeba4e1cd9cd006a09a', case=False) | Hashes.str.contains(r'SHA1=1479717fab67d98bbc3665f6b12adddfca74e0ef', case=False) | Hashes.str.contains(r'SHA1=fc8fbd92f6e64682360885c188d1bdfbc14ca579', case=False) | Hashes.str.contains(r'SHA1=3abb9d0a9d600200ae19c706e570465ef0a15643', case=False) | Hashes.str.contains(r'SHA1=6df42ea7c0e6ee02062bf9ca2aa4aa5cd3775274', case=False) | Hashes.str.contains(r'SHA1=c40ff3ebf6b5579108165be63250634823db32ec', case=False) | Hashes.str.contains(r'SHA1=cef5a329f7a36c76a546d9528e57245127f37246', case=False) | Hashes.str.contains(r'SHA1=7c46ecc5ce8e5f6e236a3b169fb46bb357ac3546', case=False) | Hashes.str.contains(r'SHA1=a32232a426c552667f710d2dcbd2fb9f9c50331d', case=False) | Hashes.str.contains(r'SHA1=755349d56cdd668ca22eebc4fc89f0cccef47327', case=False) | Hashes.str.contains(r'SHA1=e4436c8c42ba5ffabd58a3b2256f6e86ccc907ab', case=False) | Hashes.str.contains(r'SHA1=d496a8d3e71eaacd873ccef1d1f6801e54959713', case=False) | Hashes.str.contains(r'SHA1=437b56dc106d2e649d2c243c86729b6e6461d535', case=False) | Hashes.str.contains(r'SHA1=f10ec1b88c3a383c2a0c03362d31960836e3fb5f', case=False) | Hashes.str.contains(r'SHA1=f3cce7e79ab5bd055f311bb3ac44a838779270b6', case=False) | Hashes.str.contains(r'SHA1=7503a1ed7f6fbd068f8c900dd5ddb291417e3464', case=False) | Hashes.str.contains(r'SHA1=24aafe3c727c6a3bd1942db78327ada8fcb8c084', case=False) | Hashes.str.contains(r'SHA1=8453fc3198349cf0561c87efc329c81e7240c3da', case=False) | Hashes.str.contains(r'SHA1=51b9867c391be3ce56ba7e1c3cba8c76777245b2', case=False) | Hashes.str.contains(r'SHA1=a7bd05de737f8ea57857f1e0845a25677df01872', case=False) | Hashes.str.contains(r'SHA1=eb2496304073727564b513efd6387a77ce395443', case=False) | Hashes.str.contains(r'SHA1=43419df1f9a07430a18c5f3b3cc74de621be0f8e', case=False) | Hashes.str.contains(r'SHA1=736531c76b8d9c56e26561bf430e10ecabff0186', case=False) | Hashes.str.contains(r'SHA1=00b4e8b7644d1bf93f5ddb5740b444b445e81b02', case=False) | Hashes.str.contains(r'SHA1=19f3343bfad0ef3595f41d60272d21746c92ffca', case=False) | Hashes.str.contains(r'SHA1=74e4e3006b644392f5fcea4a9bae1d9d84714b57', case=False) | Hashes.str.contains(r'SHA1=5a7dd0da0aee0bdedc14c1b7831b9ce9178a0346', case=False) | Hashes.str.contains(r'SHA1=0b6ec2aedc518849a1c61a70b1f9fb068ede2bc3', case=False) | Hashes.str.contains(r'SHA1=c948ae14761095e4d76b55d9de86412258be7afd', case=False) | Hashes.str.contains(r'SHA1=80ea425e193bd0e05161e8e1dc34fb0eae5f9017', case=False) | Hashes.str.contains(r'SHA1=2e546d86d3b1e4eaa92b6ec4768de79f70eb922f', case=False) | Hashes.str.contains(r'SHA1=b91c34bb846fd5b2f13f627b7da16c78e3ee7b0f', case=False) | Hashes.str.contains(r'SHA1=a6816949cd469b6e5c35858d19273936fab1bef6', case=False) | Hashes.str.contains(r'SHA1=c02cb8256dfb37f690f2698473fe5428d17bc178', case=False) | Hashes.str.contains(r'SHA1=c2d18ce26ce2435845f534146d7f353b662ad2b9', case=False) | Hashes.str.contains(r'SHA1=05eff2001f595f9e2894c6b5eee756ae72379a6d', case=False) | Hashes.str.contains(r'SHA1=0a19a9c4c9185b80188da529ec9c9f45cbe73186', case=False) | Hashes.str.contains(r'SHA1=e7d8fc86b90f75864b7e2415235e17df4d85ee31', case=False) | Hashes.str.contains(r'SHA1=8e64c32bcfd70361956674f45964a8b0c8aa6388', case=False) | Hashes.str.contains(r'SHA1=97941faf575e43e59fe8ee167de457c2cf75c9eb', case=False) | Hashes.str.contains(r'SHA1=7e8efd93a1dad02385ec56c8f3b1cfd23aa47977', case=False) | Hashes.str.contains(r'SHA1=850d7df29256b4f537eddafe95cfea59fb118fe2', case=False) | Hashes.str.contains(r'SHA1=e2f40590b404a24e775f781525d8ed01f1b1156d', case=False) | Hashes.str.contains(r'SHA1=ff9048c451644c9c5ff2ba1408b194a0970b49e6', case=False) | Hashes.str.contains(r'SHA1=53f7fc4feb66af748f2ab295394bf4de62ae9fcc', case=False) | Hashes.str.contains(r'SHA1=3def50587309440e3b9e595bdbe4dde8d69a64e7', case=False) | Hashes.str.contains(r'SHA1=c6d349823bbb1f5b44bae91357895dba653c5861', case=False) | Hashes.str.contains(r'SHA1=f3029dba668285aac04117273599ac12a94a3564', case=False) | Hashes.str.contains(r'SHA1=adab368ed3c17b8f2dc0b2173076668b6153e03a', case=False) | Hashes.str.contains(r'SHA1=c45d03076fa6e66c1b8b74b020ad84712755e3df', case=False) | Hashes.str.contains(r'SHA1=0d27a3166575ec5983ec58de2591552cfa90ef92', case=False) | Hashes.str.contains(r'SHA1=d28b604b9bb608979cc0eab1e9e93e11c721aa3d', case=False) | Hashes.str.contains(r'SHA1=70bb3b831880e058524735b14f2a0f1a72916a4c', case=False) | Hashes.str.contains(r'SHA1=5a55c227ca13e9373b87f1ef6534533c7ce1f4fb', case=False) | Hashes.str.contains(r'SHA1=b97a8d506be2e7eaa4385f70c009b22adbd071ba', case=False) | Hashes.str.contains(r'SHA1=4075de7d7d2169d650c5ccede8251463913511e6', case=False) | Hashes.str.contains(r'SHA1=e09b5e80805b8fe853ea27d8773e31bff262e3f7', case=False) | Hashes.str.contains(r'SHA1=619413b5a6d6aeb4d58c409d54fe4a981dd7e4d9', case=False) | Hashes.str.contains(r'SHA1=012db3a80faf1f7f727b538cbe5d94064e7159de', case=False) | Hashes.str.contains(r'SHA1=d9c1913a6c76b883568910094dfa1d67aad80c84', case=False) | Hashes.str.contains(r'SHA1=49174d56cce618c77ae4013fe28861c80bf5ba97', case=False) | Hashes.str.contains(r'SHA1=e11f48631c6e0277e21a8bdf9be513651305f0d5', case=False) | Hashes.str.contains(r'SHA1=f6f11ad2cd2b0cf95ed42324876bee1d83e01775', case=False) | Hashes.str.contains(r'SHA1=d5326fea00bcde2ef7155acf3285c245c9fb4ece', case=False) | Hashes.str.contains(r'SHA1=e8234c44f3b7e4c510ef868e8c080e00e2832b07', case=False) | Hashes.str.contains(r'SHA1=9449f211c3c47821b638513d239e5f2c778dc523', case=False) | Hashes.str.contains(r'SHA1=456a1acacaa02664517c2f2fb854216e8e967f9d', case=False) | Hashes.str.contains(r'SHA1=2c27abbbbcf10dfb75ad79557e30ace5ed314df8', case=False) | Hashes.str.contains(r'SHA1=b314742af197a786218c6dd704b438469445eefa', case=False) | Hashes.str.contains(r'SHA1=7eb34cc1fcffb4fdb5cb7e97184dd64a65cb9371', case=False) | Hashes.str.contains(r'SHA1=fbfabf309680fbf7c0f6f14c5a0e4840c894e393', case=False) | Hashes.str.contains(r'SHA1=d9c09dd725bc7bc3c19b4db37866015817a516ef', case=False) | Hashes.str.contains(r'SHA1=6ed5c2313eecd97b78aa5dcdb442dd47345c9e43', case=False) | Hashes.str.contains(r'SHA1=1f26424eaf046dbf800ae2ac52d9bb38494d061a', case=False) | Hashes.str.contains(r'SHA1=b7fa8278ab7bc485727d075e761a72042c4595f7', case=False) | Hashes.str.contains(r'SHA1=10b9ae9286837b3bf6a00771c7e81adbdea3cbfe', case=False) | Hashes.str.contains(r'SHA1=850f15fd67d9177a50f3efef07a805b9613f50d6', case=False) | Hashes.str.contains(r'SHA1=696d68bdbe1d684029aaad2861c49af56694473a', case=False) | Hashes.str.contains(r'SHA1=164c899638bc83099c0379ea76485194564c956c', case=False) | Hashes.str.contains(r'SHA1=15f16fe63105b8f9cc0ef2bc8f97cfa5deb40662', case=False) | Hashes.str.contains(r'SHA1=b304cb10c88ddd8461bad429ebfd2fd1b809ac2b', case=False) | Hashes.str.contains(r'SHA1=a95a126b539989e29e68969bfab16df291e7fa8a', case=False) | Hashes.str.contains(r'SHA1=4f02fb7387ca0bc598c3bcb66c5065d08dbb3f73', case=False) | Hashes.str.contains(r'SHA1=1e8bccbd74f194db6411011017716c8c6b730d03', case=False) | Hashes.str.contains(r'SHA1=0cc60a56e245e70f664906b7b67dfe1b4a08a5b7', case=False) | Hashes.str.contains(r'SHA1=7838fb56fdab816bc1900a4720eea2fc9972ef7a', case=False) | Hashes.str.contains(r'SHA1=19bd488fe54b011f387e8c5d202a70019a204adf', case=False) | Hashes.str.contains(r'SHA1=879e327292616c56bd4aafc279fbda6cc393b74d', case=False) | Hashes.str.contains(r'SHA1=45e8f87afa41143e0c5850f9e054d18ec9c8a6c0', case=False) | Hashes.str.contains(r'SHA1=b53c360b35174bd89f97f681bf7c17f40e519eb6', case=False) | Hashes.str.contains(r'SHA1=c3be2bbd9b3f696bc9d51d5973cc00ca059fb172', case=False) | Hashes.str.contains(r'SHA1=5bb2d46ba666c03c56c326f0bbc85cc48a87dfa3', case=False) | Hashes.str.contains(r'SHA1=9b8c7eda28bfad07ffe5f84a892299bc7e118442', case=False) | Hashes.str.contains(r'SHA1=762a5b4c7beb2af675617dca6dcd6afd36ce0afd', case=False) | Hashes.str.contains(r'SHA1=6d9e22a275a5477ea446e6c56ee45671fbcbb5f6', case=False) | Hashes.str.contains(r'SHA1=1292c7dd60214d96a71e7705e519006b9de7968f', case=False) | Hashes.str.contains(r'SHA1=7c6cad6a268230f6e08417d278dda4d66bb00d13', case=False) | Hashes.str.contains(r'SHA1=65d8a7c2e867b22d1c14592b020c548dd0665646', case=False) | Hashes.str.contains(r'SHA1=f61e56359c663a769073782a0a3ffd3679c2694a', case=False) | Hashes.str.contains(r'SHA1=dd2b90c9796237036ac7136a172d96274dea14c8', case=False) | Hashes.str.contains(r'SHA1=af5b7556706e09ee9e74ee2e87eab5c0a49d2d35', case=False) | Hashes.str.contains(r'SHA1=57cc324326ab6c4239f8c10d2d1ce8862b2ce4d5', case=False) | Hashes.str.contains(r'SHA1=bed5bad7f405aa828a146c7f71d09c31d0c32051', case=False) | Hashes.str.contains(r'SHA1=34a07ae39b232cc3dbbe657b34660e692ff2043a', case=False) | Hashes.str.contains(r'SHA1=3f67a43ae174a715795e49f72bc350302de83323', case=False) | Hashes.str.contains(r'SHA1=a3d612a5ea3439ba72157bd96e390070bdddbbf3', case=False) | Hashes.str.contains(r'SHA1=655a9487d7a935322e19bb92d2465849055d029d', case=False) | Hashes.str.contains(r'SHA1=f70989f8b17971f13d45ee537e4ce98e93acbbaf', case=False) | Hashes.str.contains(r'SHA1=4044e5da1f16441fe7eb27cff7a76887a1aa7fec', case=False) | Hashes.str.contains(r'SHA1=7b4c922415e13deaf54bb2771f2ae30814ee1d14', case=False) | Hashes.str.contains(r'SHA1=8c11430372889bae1f91e8d068e2b2ad56dfc6bf', case=False) | Hashes.str.contains(r'SHA1=4f376b1d1439477a426ef3c52e8c1c69c2cb5305', case=False) | Hashes.str.contains(r'SHA1=1acc7a486b52c5ee6619dbdc3b4210b5f48b936f', case=False) | Hashes.str.contains(r'SHA1=6a3d3b9ab3d201cd6b0316a7f9c3fb4d34d0f403', case=False) | Hashes.str.contains(r'SHA1=7fb52290883a6b69a96d480f2867643396727e83', case=False) | Hashes.str.contains(r'SHA1=82dbac75b73ff4b92bdcbf6977a6683e1dcfe995', case=False) | Hashes.str.contains(r'SHA1=5b83c61178afb87ef7d58fd786808effcaaae861', case=False) | Hashes.str.contains(r'SHA1=bc47e15537fa7c32dfefd23168d7e1741f8477ed', case=False) | Hashes.str.contains(r'SHA1=ebafebe5e94fdf12bd2159ed66d73268576bc7d9', case=False) | Hashes.str.contains(r'SHA1=5e4b93591f905854fb870011464291c3508aff44', case=False) | Hashes.str.contains(r'SHA1=a38aac44ee232fb50a6abf145e8dd921ca3e7d78', case=False) | Hashes.str.contains(r'SHA256=aafb95a443911e4c67d4e45ffa83cca103c91b42915b81100534dc439bec0c1b', case=False) | Hashes.str.contains(r'SHA256=dfaefd06b680f9ea837e7815fc1cc7d1f4cc375641ac850667ab20739f46ad22', case=False) | Hashes.str.contains(r'SHA256=66a20fc2658c70facd420f5437a73fa07a5175998e569255cfb16c2f14c5e796', case=False) | Hashes.str.contains(r'SHA256=e8eb1c821dbf56bde05c0c49f6d560021628df89c29192058ce68907e7048994', case=False) | Hashes.str.contains(r'SHA256=5e3bc2d7bc56971457d642458563435c7e5c9c3c7c079ef5abeb6a61fb4d52ea', case=False) | Hashes.str.contains(r'SHA256=b8ffe83919afc08a430c017a98e6ace3d9cbd7258c16c09c4f3a4e06746fc80a', case=False) | Hashes.str.contains(r'SHA256=9b6a84f7c40ea51c38cc4d2e93efb3375e9d98d4894a85941190d94fbe73a4e4', case=False) | Hashes.str.contains(r'SHA256=c673f2eed5d0eed307a67119d20a91c8818a53a3cb616e2984876b07e5c62547', case=False) | Hashes.str.contains(r'SHA256=506f56996fbcd34ff8a27e6948a2e2e21e6dbf42dab6e3a6438402000b969fd1', case=False) | Hashes.str.contains(r'SHA256=4c2d2122ef7a100e1651f2ec50528c0d1a2b8a71c075461f0dc58a1aca36bc61', case=False) | Hashes.str.contains(r'SHA256=9dee9c925f7ea84f56d4a2ad4cf9a88c4dac27380887bf9ac73e7c8108066504', case=False) | Hashes.str.contains(r'SHA256=5a661e26cfe5d8dedf8c9644129039cfa40aebb448895187b96a8b7441d52aaa', case=False) | Hashes.str.contains(r'SHA256=a47555d04b375f844073fdcc71e5ccaa1bbb201e24dcdebe2399e055e15c849f', case=False) | Hashes.str.contains(r'SHA256=86721ee8161096348ed3dbe1ccbf933ae004c315b1691745a8af4a0df9fed675', case=False) | Hashes.str.contains(r'SHA256=06508aacb4ed0a1398a2b0da5fa2dbf7da435b56da76fd83c759a50a51c75caf', case=False) | Hashes.str.contains(r'SHA256=1766fd66f846d9a21e648d649ad35d1ff94f8ca17a40a9a738444d6b8e07aacb', case=False) | Hashes.str.contains(r'SHA256=6f55c148bb27c14408cf0f16f344abcd63539174ac855e510a42d78cfaec451c', case=False) | Hashes.str.contains(r'SHA256=247aadaf17ed894fcacf3fc4e109b005540e3659fd0249190eb33725d3d3082f', case=False) | Hashes.str.contains(r'SHA256=dde6f28b3f7f2abbee59d4864435108791631e9cb4cdfb1f178e5aa9859956d8', case=False) | Hashes.str.contains(r'SHA256=dfe57c6a4ef4d2491be325d67428698a61d9c5d2a24dbada10043d313be2c8cc', case=False) | Hashes.str.contains(r'SHA256=362c4f3dadc9c393682664a139d65d80e32caa2a97b6e0361dfd713a73267ecc', case=False) | Hashes.str.contains(r'SHA256=46cf46e1073b7c99142964b7c4bef1e5285fabcf2c6dbe5be99000a393d9f474', case=False) | Hashes.str.contains(r'SHA256=b019ebd77ac19cdd72bba3318032752649bd56a7576723a8ae1cccd70ee1e61a', case=False) | Hashes.str.contains(r'SHA256=4d5059ec1ebd41284b9cea6ce804596e0f386c09eee25becdd3f6949e94139ba', case=False) | Hashes.str.contains(r'SHA256=9d58f640c7295952b71bdcb456cae37213baccdcd3032c1e3aeb54e79081f395', case=False) | Hashes.str.contains(r'SHA256=d636c011b8b2896572f5de260eb997182cc6955449b044a739bd19cbe6fdabd2', case=False) | Hashes.str.contains(r'SHA256=a15325e9e6b8e4192291deb56c20c558dde3f96eb682c6e90952844edb984a00', case=False) | Hashes.str.contains(r'SHA256=e3dbafce5ad2bf17446d0f853aeedf58cc25aa1080ab97e22375a1022d6acb16', case=False) | Hashes.str.contains(r'SHA256=26f41e4268be59f5de07552b51fa52d18d88be94f8895eb4a16de0f3940cf712', case=False) | Hashes.str.contains(r'SHA256=e2d8dd5dacc24051709f55a35184f5f99aef957a83bd358b0608b4479e1ec24f', case=False) | Hashes.str.contains(r'SHA256=06bda5a1594f7121acd2efe38ccb617fbc078bb9a70b665a5f5efd70e3013f50', case=False) | Hashes.str.contains(r'SHA256=626fae47811450d080d08c3d9fd890aa64bfecdc45eacd42a40850c1833c8763', case=False) | Hashes.str.contains(r'SHA256=d25904fbf907e19f366d54962ff543d9f53b8fdfd2416c8b9796b6a8dd430e26', case=False) | Hashes.str.contains(r'SHA256=5fae7e491b0d919f0b551e15e0942ac7772f2889722684aea32cff369e975879', case=False) | Hashes.str.contains(r'SHA256=68671b735716ffc168addc052c5dc3d635e63e71c1e78815e7874286c3fcc248', case=False) | Hashes.str.contains(r'SHA256=3e274df646f191d2705c0beaa35eeea84808593c3b333809f13632782e27ad75', case=False) | Hashes.str.contains(r'SHA256=d7ddf874304556f8a10942a29b3d387cb5155a7419f87813557fe728cb14806d', case=False) | Hashes.str.contains(r'SHA256=f088b2ba27dacd5c28f8ee428f1350dca4bc7c6606309c287c801b2e1da1a53d', case=False) | Hashes.str.contains(r'SHA256=cdd2a4575a46bada4837a6153a79c14d60ee3129830717ef09e0e3efd9d00812', case=False) | Hashes.str.contains(r'SHA256=b50b11e2203942695380869c6072e15479290bc57da2ec5df3481a36b8a8561e', case=False) | Hashes.str.contains(r'SHA256=2bbc6b9dd5e6d0327250b32305be20c89b19b56d33a096522ee33f22d8c82ff1', case=False) | Hashes.str.contains(r'SHA256=f85eb576acb5db0d2f48e5f09a7244165a876fa1ca8697ebb773e4d7071d4439', case=False) | Hashes.str.contains(r'SHA256=72322fa8bba20df6966acbcf41e83747893fd173cd29de99b5ad1a5d3bf8f2de', case=False) | Hashes.str.contains(r'SHA256=d1c78c8ba70368e96515fb0596598938a8f9efa8f9f5d9e068ee008f03020fee', case=False) | Hashes.str.contains(r'SHA256=3503ea284b6819f9cb43b3e94c0bb1bf5945ccb37be6a898387e215197a4792a', case=False) | Hashes.str.contains(r'SHA256=ff6729518a380bf57f1bc6f1ec0aa7f3012e1618b8d9b0f31a61d299ee2b4339', case=False) | Hashes.str.contains(r'SHA256=3ac5e01689a3d745e60925bc7faca8d4306ae693e803b5e19c94906dc30add46', case=False) | Hashes.str.contains(r'SHA256=a6f8aa3de5b4aea58eddd45807d722c864d4bc4a38ad573174af864e21f0d526', case=False) | Hashes.str.contains(r'SHA256=0c018eaa293c03febe2aef1e868fca782a06b49d7d2f9f388ae5fb57604c5250', case=False) | Hashes.str.contains(r'SHA256=223f61c3f443c5047d1aeb905b0551005a426f084b7a50384905e7e4ecb761a1', case=False) | Hashes.str.contains(r'SHA256=18047c2d45758a43d6b7e56bcd4aa90354c899795baf944f037850c48d8e892a', case=False) | Hashes.str.contains(r'SHA256=442d506c1ac1f48f6224f0cdd64590779aee9c88bdda2f2cc3169b862cba1243', case=False) | Hashes.str.contains(r'SHA256=7d4ca5760b6ad2e4152080e115f040f9d42608d2c7d7f074a579f911d06c8cf8', case=False) | Hashes.str.contains(r'SHA256=b1867d13a4cab66a76f4d4448824ca0cb3a176064626f9618c0c103ee3cb4f47', case=False) | Hashes.str.contains(r'SHA256=0cf91e8f64a7c98dbeab21597bd76723aee892ed8fa4ee44b09f9e75089308e2', case=False) | Hashes.str.contains(r'SHA256=9e3430d5e0e93bc4a5dccc985053912065e65722bfc2eaf431bc1da91410434c', case=False) | Hashes.str.contains(r'SHA256=b773511fdb2e370dec042530910a905472fcc2558eb108b246fd3200171b04d3', case=False) | Hashes.str.contains(r'SHA256=3ff50c67d51553c08dcb7c98342f68a0f54ad6658c5346c428bdcd1f185569f6', case=False) | Hashes.str.contains(r'SHA256=a369942ce8d4b70ebf664981e12c736ec980dbe5a74585dd826553c4723b1bce', case=False) | Hashes.str.contains(r'SHA256=d3b5fd13a53eee5c468c8bfde4bfa7b968c761f9b781bb80ccd5637ee052ee7d', case=False) | Hashes.str.contains(r'SHA256=8bda0108de82ebeae82f43108046c5feb6f042e312fa0115475a9e32274fae59', case=False) | Hashes.str.contains(r'SHA256=16a2e578bc8683f17a175480fea4f53c838cfae965f1d4caa47eaf9e0b3415c1', case=False) | Hashes.str.contains(r'SHA256=16ae28284c09839900b99c0bdf6ce4ffcd7fe666cfd5cfb0d54a3ad9bea9aa9c', case=False) | Hashes.str.contains(r'SHA256=0bd164da36bd637bb76ca66602d732af912bd9299cb3d520d26db528cb54826d', case=False) | Hashes.str.contains(r'SHA256=c3d479d7efd0f6b502d6829b893711bdd51aac07d66326b41ef5451bafdfcb29', case=False) | Hashes.str.contains(r'SHA256=4eb1b9f3fe3c79f20c9cdeba92f6d6eb9b9ed15b546851e1f5338c0b7d36364b', case=False) | Hashes.str.contains(r'SHA256=fb1183ef22ecbcc28f9c0a351c2c0280f1312a0fdf8a9983161691e2585efc70', case=False) | Hashes.str.contains(r'SHA256=7236c8ff33c0e5cfa956778aa7303f1979f3bf709c361399fa1ce101b7e355b8', case=False) | Hashes.str.contains(r'SHA256=7149fbd191d7e4941a32a3118ab017426b551d5d369f20c94c4f36ae4ef54f26', case=False) | Hashes.str.contains(r'SHA256=fb81b5f8bf69637dbdf050181499088a67d24577587bc520de94b5ee8996240f', case=False) | Hashes.str.contains(r'SHA256=399effe75d32bdab6fa0a6bffe02dbf0a59219d940b654837c3be1c0bd02e9aa', case=False) | Hashes.str.contains(r'SHA256=dbc604b4e01362a3e51357af4a87686834fe913852a4e0a8c0d4c1a0f7d076ed', case=False) | Hashes.str.contains(r'SHA256=6de84caa2ca18673e01b91af58220c60aecd5cccf269725ec3c7f226b2167492', case=False) | Hashes.str.contains(r'SHA256=5fad3775feb8b6f6dcbd1642ae6b6a565ff7b64eadfc9bf9777918b51696ab36', case=False) | Hashes.str.contains(r'SHA256=e81230217988f3e7ec6f89a06d231ec66039bdba340fd8ebb2bbb586506e3293', case=False) | Hashes.str.contains(r'SHA256=cbd4f66ae09797fcd1dc943261a526710acc8dd4b24e6f67ed4a1fce8b0ae31c', case=False) | Hashes.str.contains(r'SHA256=fafa1bb36f0ac34b762a10e9f327dcab2152a6d0b16a19697362d49a31e7f566', case=False) | Hashes.str.contains(r'SHA256=b2364c3cf230648dad30952701aef90acfc9891541c7e154e30c9750da213ed1', case=False) | Hashes.str.contains(r'SHA256=5f5e5f1c93d961985624768b7c676d488c7c7c1d4c043f6fc1ea1904fefb75be', case=False) | Hashes.str.contains(r'SHA256=a11cf43794ea5b5122a0851bf7de08e559f6e9219c77f9888ff740055f2c155e', case=False) | Hashes.str.contains(r'SHA256=d0bd1ae72aeb5f3eabf1531a635f990e5eaae7fdd560342f915f723766c80889', case=False) | Hashes.str.contains(r'SHA256=4bf4cced4209c73aa37a9e2bf9ff27d458d8d7201eefa6f6ad4849ee276ad158', case=False) | Hashes.str.contains(r'SHA256=d366cbc1d5dd8863b45776cfb982904abd21d0c0d4697851ff54381055abcfc8', case=False) | Hashes.str.contains(r'SHA256=f15962354d37089884abba417f58e9dbd521569b4f69037a24a37cfc2a490672', case=False) | Hashes.str.contains(r'SHA256=f4dc11b7922bf2674ca9673638e7fe4e26aceb0ebdc528e6d10c8676e555d7b2', case=False) | Hashes.str.contains(r'SHA256=3cb111fdedc32f2f253aacde4372b710035c8652eb3586553652477a521c9284', case=False) | Hashes.str.contains(r'SHA256=45abdbcd4c0916b7d9faaf1cd08543a3a5178871074628e0126a6eda890d26e0', case=False) | Hashes.str.contains(r'SHA256=1675eedd4c7f2ec47002d623bb4ec689ca9683020e0fdb0729a9047c8fb953dd', case=False) | Hashes.str.contains(r'SHA256=b37b3c6877b70289c0f43aeb71349f7344b06063996e6347c3c18d8c5de77f3b', case=False) | Hashes.str.contains(r'SHA256=1a42ebde59e8f63804eaa404f79ee93a16bb33d27fb158c6bfbe6143226899a0', case=False) | Hashes.str.contains(r'SHA256=bac7e75745d0cb8819de738b73edded02a07111587c4531383dccd4562922b65', case=False) | Hashes.str.contains(r'SHA256=8138b219a2b1be2b0be61e5338be470c18ad6975f11119aee3a771d4584ed750', case=False) | Hashes.str.contains(r'SHA256=04a85e359525d662338cae86c1e59b1d7aa9bd12b920e8067503723dc1e03162', case=False) | Hashes.str.contains(r'SHA256=03680068ec41bbe725e1ed2042b63b82391f792e8e21e45dc114618641611d5d', case=False) | Hashes.str.contains(r'SHA256=af16c36480d806adca881e4073dcd41acb20c35ed0b1a8f9bd4331de655036e1', case=False) | Hashes.str.contains(r'SHA256=ad40e6d0f77c0e579fb87c5106bf6de3d1a9f30ee2fbf8c9c011f377fa05f173', case=False) | Hashes.str.contains(r'SHA256=9f4ce6ab5e8d44f355426d9a6ab79833709f39b300733b5b251a0766e895e0e5', case=False) | Hashes.str.contains(r'SHA256=38d6d90d543bf6037023c1b1b14212b4fa07731cbbb44bdb17e8faffc12b22e8', case=False) | Hashes.str.contains(r'SHA256=e68d453d333854787f8470c8baef3e0d082f26df5aa19c0493898bcf3401e39a', case=False) | Hashes.str.contains(r'SHA256=ae3a6a0726f667658fc3e3180980609dcb31bdbf833d7cb76ba5d405058d5156', case=False) | Hashes.str.contains(r'SHA256=a0728184caead84f2e88777d833765f2d8af6a20aad77b426e07e76ef91f5c3f', case=False) | Hashes.str.contains(r'SHA256=df0cc4e5c9802f8edaefeb130e375cad56b2c5490d8ebd77d8dbdcc6fdc7ecb6', case=False) | Hashes.str.contains(r'SHA256=d0543f0fdc589c921b47877041f01b17a534c67dcc7c5ad60beba8cf7e7bc9c6', case=False) | Hashes.str.contains(r'SHA256=f9bc6b2d5822c5b3a7b1023adceb25b47b41e664347860be4603ee81b644590e', case=False) | Hashes.str.contains(r'SHA256=916c535957a3b8cbf3336b63b2260ea4055163a9e6b214f2a7005d6d36a4a677', case=False) | Hashes.str.contains(r'SHA256=ebe2e9ec6d5d94c2d58fbcc9d78c5f0ee7a2f2c1aed6d1b309f383186d11dfa3', case=False) | Hashes.str.contains(r'SHA256=e86cb77de7b6a8025f9a546f6c45d135f471e664963cf70b381bee2dfd0fdef4', case=False) | Hashes.str.contains(r'SHA256=7d43769b353d63093228a59eb19bba87ce6b552d7e1a99bf34a54eee641aa0ea', case=False) | Hashes.str.contains(r'SHA256=3871e16758a1778907667f78589359734f7f62f9dc953ec558946dcdbe6951e3', case=False) | Hashes.str.contains(r'SHA256=45e5977b8d5baec776eb2e62a84981a8e46f6ce17947c9a76fa1f955dc547271', case=False) | Hashes.str.contains(r'SHA256=fa875178ae2d7604d027510b0d0a7e2d9d675e10a4c9dda2d927ee891e0bcb91', case=False) | Hashes.str.contains(r'SHA256=ff987c30ce822d99f3b4b4e23c61b88955f52406a95e6331570a2a13cbebc498', case=False) | Hashes.str.contains(r'SHA256=3301b49b813427fa37a719988fe6446c6f4468dfe15aa246bec8d397f62f6486', case=False) | Hashes.str.contains(r'SHA256=e6a2b1937fa277526a1e0ca9f9b32f85ab9cb7cb1a32250dd9c607e93fc2924f', case=False) | Hashes.str.contains(r'SHA256=f27febff1be9e89e48a9128e2121c7754d15f8a5b2e88c50102cecee5fe60229', case=False) | Hashes.str.contains(r'SHA256=0f016c80c4938fbcd47a47409969b3925f54292eba2ce01a8e45222ce8615eb8', case=False) | Hashes.str.contains(r'SHA256=81939e5c12bd627ff268e9887d6fb57e95e6049f28921f3437898757e7f21469', case=False) | Hashes.str.contains(r'SHA256=3e07bb866d329a2f9aaa4802bad04fdac9163de9bf9cfa1d035f5ca610b4b9bf', case=False) | Hashes.str.contains(r'SHA256=cf3180f5308af002ac5d6fd5b75d1340878c375f0aebc3157e3bcad6322b7190', case=False) | Hashes.str.contains(r'SHA256=cf69704755ec2643dfd245ae1d4e15d77f306aeb1a576ffa159453de1a7345cb', case=False) | Hashes.str.contains(r'SHA256=0bc3685b0b8adc97931b5d31348da235cd7581a67edf6d79913e6a5709866135', case=False) | Hashes.str.contains(r'SHA256=9679758455c69877fce866267d60c39d108b495dca183954e4af869902965b3d', case=False) | Hashes.str.contains(r'SHA256=ce0a4430d090ba2f1b46abeaae0cb5fd176ac39a236888fa363bf6f9fd6036d9', case=False) | Hashes.str.contains(r'SHA256=3c4207c90c97733fae2a08679d63fbbe94dfcf96fdfdf88406aa7ab3f80ea78f', case=False) | Hashes.str.contains(r'SHA256=eaa5dae373553024d7294105e4e07d996f3a8bd47c770cdf8df79bf57619a8cd', case=False) | Hashes.str.contains(r'SHA256=a10b4ed33a13c08804da8b46fd1b7bd653a6f2bb65668e82086de1940c5bb5d1', case=False) | Hashes.str.contains(r'SHA256=53eaefba7e7dca9ab74e385abf18762f9f1aa51594e7f7db5ba612d6c787dd7e', case=False) | Hashes.str.contains(r'SHA256=9ca586b49135166eea00c6f83329a2d134152e0e9423822a51c13394265b6340', case=False) | Hashes.str.contains(r'SHA256=8cf0cbbdc43f9b977f0fb79e0a0dd0e1adabe08a67d0f40d727c717c747de775', case=False) | Hashes.str.contains(r'SHA256=37073e42ffa0322500f90cd7e3c8d02c4cdd695d31c77e81560abec20bfb68ba', case=False) | Hashes.str.contains(r'SHA256=7a48f92a9c2d95a72e18055cac28c1e7e6cad5f47aa735cbea5c3b82813ccfaf', case=False) | Hashes.str.contains(r'SHA256=7c933f5d07ccb4bd715666cd6eb35a774b266ddd8d212849535a54192a44f667', case=False) | Hashes.str.contains(r'SHA256=72288d4978ee87ea6c8b1566dbd906107357087cef7364fb3dd1e1896d00baeb', case=False) | Hashes.str.contains(r'SHA256=76b86543ce05540048f954fed37bdda66360c4a3ddb8328213d5aef7a960c184', case=False) | Hashes.str.contains(r'SHA256=c0ae3349ebaac9a99c47ec55d5f7de00dc03bd7c5cd15799bc00646d642aa8de', case=False) | Hashes.str.contains(r'SHA256=904e0f7d485a98e8497d5ec6dd6e6e1cf0b8d8e067fb64a9e09790af3c8c9d5a', case=False) | Hashes.str.contains(r'SHA256=3a5ec83fe670e5e23aef3afa0a7241053f5b6be5e6ca01766d6b5f9177183c25', case=False) | Hashes.str.contains(r'SHA256=e83908eba2501a00ef9e74e7d1c8b4ff1279f1cd6051707fd51824f87e4378fa', case=False) | Hashes.str.contains(r'SHA256=c825a47817399e988912bb75106befaefae0babc0743a7e32b46f17469c78cad', case=False) | Hashes.str.contains(r'SHA256=e8b51ab681714e491ab1a59a7c9419db39db04b0dd7be11293f3a0951afe740e', case=False) | Hashes.str.contains(r'SHA256=dbe9f17313e1164f06401234b875fbc7f71d41dc7271de643865af1358841fef', case=False) | Hashes.str.contains(r'SHA256=159e7c5a12157af92e0d14a0d3ea116f91c09e21a9831486e6dc592c93c10980', case=False) | Hashes.str.contains(r'SHA256=05f052c64d192cf69a462a5ec16dda0d43ca5d0245900c9fcb9201685a2e7748', case=False) | Hashes.str.contains(r'SHA256=14adbf0bc43414a7700e5403100cff7fc6ade50bebfab16a17acf2fdda5a9da8', case=False) | Hashes.str.contains(r'SHA256=810513b3f4c8d29afb46f71816350088caacf46f1be361af55b26f3fee4662c3', case=False) | Hashes.str.contains(r'SHA256=42b31b850894bf917372ff50fbe1aff3990331e8bd03840d75e29dcc1026c180', case=False) | Hashes.str.contains(r'SHA256=f74ffd6916333662900cbecb90aca2d6475a714ce410adf9c5c3264abbe5732c', case=False) | Hashes.str.contains(r'SHA256=1963d5a0e512b72353953aadbe694f73a9a576f0241a988378fa40bf574eda52', case=False) | Hashes.str.contains(r'SHA256=67e9d1f6f7ed58d86b025d3578cb7a3f3c389b9dd425b7f46bb1056e83bffc78', case=False) | Hashes.str.contains(r'SHA256=7049f3c939efe76a5556c2a2c04386db51daf61d56b679f4868bb0983c996ebb', case=False) | Hashes.str.contains(r'SHA256=0aca4447ee54d635f76b941f6100b829dc8b2e0df27bdf584acb90f15f12fbda', case=False) | Hashes.str.contains(r'SHA256=49ae47b6b4d5e1b791b89e0395659d42a29a79c3e6ec52cbfcb9f9cef857a9dd', case=False) | Hashes.str.contains(r'SHA256=0dc4ff96d7e7db696e0391c5a1dda92a0b0aedbf1b0535bf5d62ebeec5b2311c', case=False) | Hashes.str.contains(r'SHA256=e89cb7217ec1568b43ad9ca35bf059b17c3e26f093e373ab6ebdeee24272db21', case=False) | Hashes.str.contains(r'SHA256=01aa278b07b58dc46c84bd0b1b5c8e9ee4e62ea0bf7a695862444af32e87f1fd', case=False) | Hashes.str.contains(r'SHA256=41eeeb0472c7e9c3a7146a2133341cd74dd3f8b5064c9dee2c70e5daa060954f', case=False) | Hashes.str.contains(r'SHA256=d54ac69c438ba77cde88c6efd6a423491996d4e8a235666644b1db954eb1da9c', case=False) | Hashes.str.contains(r'SHA256=b617a072c578cea38c460e2851f3d122ba1b7cfa1f5ee3e9f5927663ac37af61', case=False) | Hashes.str.contains(r'SHA256=e428ddf9afc9b2d11e2271f0a67a2d6638b860c2c12d4b8cc63d33f3349ee93f', case=False) | Hashes.str.contains(r'SHA256=42e170a7ab1d2c160d60abfc906872f9cfd0c2ee169ed76f6acb3f83b3eeefdb', case=False) | Hashes.str.contains(r'SHA256=6fb5bc9c51f6872de116c7db8a2134461743908efc306373f6de59a0646c4f5d', case=False) | Hashes.str.contains(r'SHA256=c9c60f560440ff16ad3c767ff5b7658d5bda61ea1166efe9b7f450447557136e', case=False) | Hashes.str.contains(r'SHA256=7164aaff86b3b7c588fc7ae7839cc09c5c8c6ae29d1aff5325adaf5bedd7c9f5', case=False) | Hashes.str.contains(r'SHA256=680ddece32fe99f056e770cb08641f5b585550798dfdf723441a11364637c7e6', case=False) | Hashes.str.contains(r'SHA256=1c425793a8ce87be916969d6d7e9dd0687b181565c3b483ce53ad1ec6fb72a17', case=False) | Hashes.str.contains(r'SHA256=955dac77a0148e9f9ed744f5d341cb9c9118261e52fe622ac6213965f2bc4cad', case=False) | Hashes.str.contains(r'SHA256=4db1e0fdc9e6cefeb1d588668ea6161a977c372d841e7b87098cf90aa679abfb', case=False) | Hashes.str.contains(r'SHA256=a13054f349b7baa8c8a3fcbd31789807a493cc52224bbff5e412eb2bd52a6433', case=False) | Hashes.str.contains(r'SHA256=27cd05527feb020084a4a76579c125458571da8843cdfc3733211760a11da970', case=False) | Hashes.str.contains(r'SHA256=0452a6e8f00bae0b79335c1799a26b2b77d603451f2e6cc3b137ad91996d4dec', case=False) | Hashes.str.contains(r'SHA256=5df689a62003d26df4aefbaed41ec1205abbf3a2e18e1f1d51b97711e8fcdf00', case=False) | Hashes.str.contains(r'SHA256=3140005ce5cac03985f71c29732859c88017df9d41c3761aa7c57bbcb7ad2928', case=False) | Hashes.str.contains(r'SHA256=bced04bdefad6a08c763265d6993f07aa2feb57d33ed057f162a947cf0e6668f', case=False) | Hashes.str.contains(r'SHA256=ad8ffccfde782bc287241152cf24245a8bf21c2530d81c57e17631b3c4adb833', case=False) | Hashes.str.contains(r'SHA256=1078af0c70e03ac17c7b8aa5ee03593f5decfef2f536716646a4ded1e98c153c', case=False) | Hashes.str.contains(r'SHA256=38e6d7c2787b6289629c72b1ec87655392267044b4e4b830c0232243657ee8f9', case=False) | Hashes.str.contains(r'SHA256=38c18db050b0b2b07f657c03db1c9595febae0319c746c3eede677e21cd238b0', case=False) | Hashes.str.contains(r'SHA256=ae6fb53e4d8122dba3a65e5fa59185b36c3ac9df46e82fcfb6731ab55c6395aa', case=False) | Hashes.str.contains(r'SHA256=0b8887921e4a22e24fd058ba5ac40061b4bb569ac7207b9548168af9d6995e7c', case=False) | Hashes.str.contains(r'SHA256=8a982eed9cbc724d50a9ddf4f74ecbcd67b4fdcd9c2bb1795bc88c2d9caf7506', case=False) | Hashes.str.contains(r'SHA256=6cb6e23ba516570bbd158c32f7c7c99f19b24ca4437340ecb39253662afe4293', case=False) | Hashes.str.contains(r'SHA256=e4cf438838dc10b188b3d4a318fd9ba2479abb078458d7f97591c723e2d637ce', case=False) | Hashes.str.contains(r'SHA256=1ddfe4756f5db9fb319d6c6da9c41c588a729d9e7817190b027b38e9c076d219', case=False) | Hashes.str.contains(r'SHA256=385485e643aa611e97ceae6590c6a8c47155886123dbb9de1e704d0d1624d039', case=False) | Hashes.str.contains(r'SHA256=5f69d6b167a1eeca3f6ac64785c3c01976ee7303171faf998d65852056988683', case=False) | Hashes.str.contains(r'SHA256=b8b94c2646b62f6ac08f16514b6efaa9866aa3c581e4c0435a7aeafe569b2418', case=False) | Hashes.str.contains(r'SHA256=b51ddcf8309c80384986dda9b11bf7856b030e3e885b0856efdb9e84064917e5', case=False) | Hashes.str.contains(r'SHA256=3724b39e97936bb20ada51c6119aded04530ed86f6b8d6b45fbfb2f3b9a4114b', case=False) | Hashes.str.contains(r'SHA256=33bc9a17a0909e32a3ae7e6f089b7f050591dd6f3f7a8172575606bec01889ef', case=False) | Hashes.str.contains(r'SHA256=8111085022bda87e5f6aa4c195e743cc6dd6a3a6d41add475d267dc6b105a69f', case=False) | Hashes.str.contains(r'SHA256=53b9e423baf946983d03ce309ec5e006ba18c9956dcd97c68a8b714d18c8ffcf', case=False) | Hashes.str.contains(r'SHA256=0fd2df82341bf5ebb8a53682e60d08978100c01acb0bed7b6ce2876ada80f670', case=False) | Hashes.str.contains(r'SHA256=2a9d481ffdc5c1e2cb50cf078be32be06b21f6e2b38e90e008edfc8c4f2a9c4e', case=False) | Hashes.str.contains(r'SHA256=ee45fd2d7315fd039f3585a66e7855ba4af9d4721e1448e602623de14e932bbe', case=False) | Hashes.str.contains(r'SHA256=76940e313c27c7ff692051fbf1fbdec19c8c31a6723a9de7e15c3c1bec8186f6', case=False) | Hashes.str.contains(r'SHA256=eae5c993b250dcc5fee01deeb30045b0e5ee7cf9306ef6edd8c58e4dc743a8ed', case=False) | Hashes.str.contains(r'SHA256=3279593db91bb7ad5b489a01808c645eafafda6cc9c39f50d10ccc30203f2ddf', case=False) | Hashes.str.contains(r'SHA256=ae79e760c739d6214c1e314728a78a6cb6060cce206fde2440a69735d639a0a2', case=False) | Hashes.str.contains(r'SHA256=727e8ba66a8ff07bdc778eacb463b65f2d7167a6616ca2f259ea32571cacf8af', case=False) | Hashes.str.contains(r'SHA256=f85cca4badff17d1aa90752153ccec77a68ad282b69e3985fdc4743eaea85004', case=False) | Hashes.str.contains(r'SHA256=88df37ede18bea511f1782c1a6c4915690b29591cf2c1bf5f52201fbbb4fa2b9', case=False) | Hashes.str.contains(r'SHA256=67cd6166d791bdf74453e19c015b2cb1e85e41892c04580034b65f9f03fe2e79', case=False) | Hashes.str.contains(r'SHA256=71c0ce3d33352ba6a0fb26e274d0fa87dc756d2473e104e0f5a7d57fab8a5713', case=False) | Hashes.str.contains(r'SHA256=8ae383546761069b26826dfbf2ac0233169d155bca6a94160488092b4e70b222', case=False) | Hashes.str.contains(r'SHA256=7b0f442ac0bb183906700097d65aed0b4b9d8678f9a01aca864854189fe368e7', case=False) | Hashes.str.contains(r'SHA256=a2096b460e31451659b0dde752264c362f47254c8191930bc921ff16a4311641', case=False) | Hashes.str.contains(r'SHA256=29f449fca0a41deccef5b0dccd22af18259222f69ed6389beafe8d5168c59e36', case=False) | Hashes.str.contains(r'SHA256=7553c76b006bd2c75af4e4ee00a02279d3f1f5d691e7dbdc955eac46fd3614c3', case=False) | Hashes.str.contains(r'SHA256=56a3c9ac137d862a85b4004f043d46542a1b61c6acb438098a9640469e2d80e7', case=False) | Hashes.str.contains(r'SHA256=9790a7b9d624b2b18768bb655dda4a05a9929633cef0b1521e79e40d7de0a05b', case=False) | Hashes.str.contains(r'SHA256=3943a796cc7c5352aa57ccf544295bfd6fb69aae147bc8235a00202dc6ed6838', case=False) | Hashes.str.contains(r'SHA256=7e3b0b8d3e430074109d85729201d7c34bc5b918c0bcb9f64ce88c5e37e1a456', case=False) | Hashes.str.contains(r'SHA256=0de4247e72d378713bcf22d5c5d3874d079203bb4364e25f67a90d5570bdcce8', case=False) | Hashes.str.contains(r'SHA256=2ce81759bfa236913bbbb9b2cbc093140b099486fd002910b18e2c6e31fdc4f1', case=False) | Hashes.str.contains(r'SHA256=36505921af5a09175395ebaea29c72b2a69a3a9204384a767a5be8a721f31b10', case=False) | Hashes.str.contains(r'SHA256=8137ce22d0d0fc5ea5b174d6ad3506a4949506477b1325da2ccb76511f4c4f60', case=False) | Hashes.str.contains(r'SHA256=4737750788c72d2fc9cf95681c622357263075d65b23e54c4dc3f31446cad37b', case=False) | Hashes.str.contains(r'SHA256=fd388cf1df06d419b14dedbeb24c6f4dff37bea26018775f09d56b3067f0de2c', case=False) | Hashes.str.contains(r'SHA256=18712a063574bfec315d58577dfe413ab45b650e54747d1e18a56c3c7337a12c', case=False) | Hashes.str.contains(r'SHA256=3b2ad08123e8ed2516548240cfcdf5eefd89293f31070a6cd3949ee1b66fed14', case=False) | Hashes.str.contains(r'SHA256=edbb23e74562e98b849e5d0eefde3af056ec6e272802a04b61bebd12395754e5', case=False) | Hashes.str.contains(r'SHA256=11d258e05b850dcc9ecfacccc9486e54bd928aaa3d5e9942696c323fdbd3481b', case=False) | Hashes.str.contains(r'SHA256=39134750f909987f6ebb46cf37519bb80707be0ca2017f3735018bac795a3f8d', case=False) | Hashes.str.contains(r'SHA256=0eab16c7f54b61620277977f8c332737081a46bc6bbde50742b6904bdd54f502', case=False) | Hashes.str.contains(r'SHA256=5da0ffe33987f8d5fb9c151f0eff29b99f42233b27efcad596add27bdc5c88ff', case=False) | Hashes.str.contains(r'SHA256=e4522e2cfa0b1f5d258a3cf85b87681d6969e0572f668024c465d635c236b5d9', case=False) | Hashes.str.contains(r'SHA256=4b5229b3250c8c08b98cb710d6c056144271de099a57ae09f5d2097fc41bd4f1', case=False) | Hashes.str.contains(r'SHA256=bceaf970b60b4457eca3c181f649a1c67f4602778171e53d9bdc9b97a09603ca', case=False) | Hashes.str.contains(r'SHA256=5192ec4501d0fe0b1c8f7bf9b778f7524a7a70a26bbbb66e5dab8480f6fdbb8b', case=False) | Hashes.str.contains(r'SHA256=db711ec3f4c96b60e4ed674d60c20ff7212d80e34b7aa171ad626eaa8399e8c7', case=False) | Hashes.str.contains(r'SHA256=32bd0edb9daa60175b1dc054f30e28e8dbfa293a32e6c86bfd06bc046eaa2f9e', case=False) | Hashes.str.contains(r'SHA256=0cd4ca335155062182608cad9ef5c8351a715bce92049719dd09c76422cd7b0c', case=False) | Hashes.str.contains(r'SHA256=bdcacb9f373b017d0905845292bca2089feb0900ce80e78df1bcaae8328ce042', case=False) | Hashes.str.contains(r'SHA256=db90e554ad249c2bd888282ecf7d8da4d1538dd364129a3327b54f8242dd5653', case=False) | Hashes.str.contains(r'SHA256=f744abb99c97d98e4cd08072a897107829d6d8481aee96c22443f626d00f4145', case=False) | Hashes.str.contains(r'SHA256=f29073dc99cb52fa890aae80037b48a172138f112474a1aecddae21179c93478', case=False) | Hashes.str.contains(r'SHA256=b7aa4c17afdaff1603ef9b5cc8981bed535555f8185b59d5ae13f342f27ca6c5', case=False) | Hashes.str.contains(r'SHA256=edfc38f91b5e198f3bf80ef6dcaebb5e86963936bcd2e5280088ca90d6998b8c', case=False) | Hashes.str.contains(r'SHA256=a2353030d4ea3ad9e874a0f7ff35bbfa10562c98c949d88cabab27102bbb8e48', case=False) | Hashes.str.contains(r'SHA256=0484defcf1b5afbe573472753dc2395e528608b688e5c7d1d178164e48e7bed7', case=False) | Hashes.str.contains(r'SHA256=8e6363a6393eb4234667c6f614b2072e33512866b3204f8395bbe01530d63f2f', case=False) | Hashes.str.contains(r'SHA256=b3a191ccd1df19cdf17fe6637d48266ac84c4310b013ad6973d8cb336b06ff69', case=False) | Hashes.str.contains(r'SHA256=e05eeb2b8c18ad2cb2d1038c043d770a0d51b96b748bc34be3e7fc6f3790ce53', case=False) | Hashes.str.contains(r'SHA256=70211a3f90376bbc61f49c22a63075d1d4ddd53f0aefa976216c46e6ba39a9f4', case=False) | Hashes.str.contains(r'SHA256=c186967cc4f2a0cb853c9796d3ea416d233e48e735f02b1bb013967964e89778', case=False) | Hashes.str.contains(r'SHA256=0d30c6c4fa0216d0637b4049142bc275814fd674859373bd4af520ce173a1c75', case=False) | Hashes.str.contains(r'SHA256=5bd41a29cbba0d24e639f49d1f201b9bd119b11f5e3b8a5fefa3a5c6f1e7692c', case=False) | Hashes.str.contains(r'SHA256=bfc2ef3b404294fe2fa05a8b71c7f786b58519175b7202a69fe30f45e607ff1c', case=False) | Hashes.str.contains(r'SHA256=be54f7279e69fb7651f98e91d24069dbc7c4c67e65850e486622ccbdc44d9a57', case=False) | Hashes.str.contains(r'SHA256=00c3e86952eebb113d91d118629077b3370ebc41eeacb419762d2de30a43c09c', case=False) | Hashes.str.contains(r'SHA256=7a1105548bfc4b0a1b7b891cde0356d39b6633975cbcd0f2e2d8e31b3646d2ca', case=False) | Hashes.str.contains(r'SHA256=3b19a7207a55d752db1b366b1dea2fd2c7620a825a3f0dcffca10af76611118c', case=False) | Hashes.str.contains(r'SHA256=fe2fb5d6cfcd64aeb62e6bf5b71fd2b2a87886eb97ab59e5353ba740da9f5db5', case=False) | Hashes.str.contains(r'SHA256=7fd90500b57f9ac959c87f713fe9ca59e669e6e1512f77fccb6a75cdc0dfee8e', case=False) | Hashes.str.contains(r'SHA256=0c925468c3376458d0e1ec65e097bd1a81a03901035c0195e8f6ef904ef3f901', case=False) | Hashes.str.contains(r'SHA256=e642d82c5cde2bc40a204736b5b8d6578e8e2b893877ae0508cfa3371fc254dc', case=False) | Hashes.str.contains(r'SHA256=440883cd9d6a76db5e53517d0ec7fe13d5a50d2f6a7f91ecfc863bc3490e4f5c', case=False) | Hashes.str.contains(r'SHA256=1273b74c3c1553eaa92e844fbd51f716356cc19cf77c2c780d4899ec7738fbd1', case=False) | Hashes.str.contains(r'SHA256=146d77e80ca70ea5cb17bfc9a5cea92334f809cbdc87a51c2d10b8579a4b9c88', case=False) | Hashes.str.contains(r'SHA256=3c18ae965fba56d09a65770b4d8da54ccd7801f979d3ebd283397bc99646004b', case=False) | Hashes.str.contains(r'SHA256=65e3548bc09dffd550e79501e3fe0fee268f895908e2bba1aa5620eb9bdac52d', case=False) | Hashes.str.contains(r'SHA256=0e10d3c73596e359462dc6bfcb886768486ff59e158f0f872d23c5e9a2f7c168', case=False) | Hashes.str.contains(r'SHA256=afdd66562dea51001c3a9de300f91fc3eb965d6848dfce92ccb9b75853e02508', case=False) | Hashes.str.contains(r'SHA256=060d25126e45309414b380ee29f900840b689eae4217a8e621563f130c1d457f', case=False) | Hashes.str.contains(r'SHA256=38fa0c663c8689048726666f1c5e019feaa9da8278f1df6ff62da33961891d2a', case=False) | Hashes.str.contains(r'SHA256=2a6db9facf9e13d35c37dd468be04bae5f70c6127a9aee76daebddbdec95d486', case=False) | Hashes.str.contains(r'SHA256=36875562e747136313ec5db58174e5fab870997a054ca8d3987d181599c7db6a', case=False) | Hashes.str.contains(r'SHA256=642857fc8d737e92db8771e46e8638a37d9743928c959ed056c15427c6197a54', case=False) | Hashes.str.contains(r'SHA256=55a1535e173c998fbbc978009b02d36ca0c737340d84ac2a8da73dfc2f450ef9', case=False) | Hashes.str.contains(r'SHA256=1aaa9aef39cb3c0a854ecb4ca7d3b213458f302025e0ec5bfbdef973cca9111c', case=False) | Hashes.str.contains(r'SHA256=e3b257357be41a18319332df7023c4407e2b93ac4c9e0c6754032e29f3763eac', case=False) | Hashes.str.contains(r'SHA256=6c5aef14613b8471f5f4fdeb9f25b5907c2335a4bc18b3c2266fb1ffd8f1741d', case=False) | Hashes.str.contains(r'SHA256=1ce9e4600859293c59d884ea721e9b20b2410f6ef80699f8a78a6b9fad505dfc', case=False) | Hashes.str.contains(r'SHA256=33d7046a5d41f4010ad5df632577154ed223dac2ab0ca2da57dbf1724db45a57', case=False) | Hashes.str.contains(r'SHA256=653f6a65e0e608cae217bea2f90f05d8125cf23f83ba01a60de0f5659cfa5d4d', case=False) | Hashes.str.contains(r'SHA256=20dd9542d30174585f2623642c7fbbda84e2347e4365e804e3f3d81f530c4ece', case=False) | Hashes.str.contains(r'SHA256=3d008e636e74c846fe7c00f90089ff725561cb3d49ce3253f2bbfbc939bbfcb2', case=False) | Hashes.str.contains(r'SHA256=65329dad28e92f4bcc64de15c552b6ef424494028b18875b7dba840053bc0cdd', case=False) | Hashes.str.contains(r'SHA256=a66d2fb7ef7350ea74d4290c57fb62bc59c6ea93f759d4ca93c3febca7aeb512', case=False) | Hashes.str.contains(r'SHA256=133e542842656197c5d22429bd56d57aa33c9522897fdf29853a6d321033c743', case=False) | Hashes.str.contains(r'SHA256=79e2d37632c417138970b4feba91b7e10c2ea251c5efe3d1fc6fa0190f176b57', case=False) | Hashes.str.contains(r'SHA256=5ee292b605cd3751a24e5949aae615d472a3c72688632c3040dc311055b75a92', case=False) | Hashes.str.contains(r'SHA256=51e91dd108d974ae809e5fc23f6fbd16e13f672f86aa594dae4a5c4bc629b0b5', case=False) | Hashes.str.contains(r'SHA256=613d6cc154586c21b330018142a89eac4504e185f0be7f86af975e5b6c046c55', case=False) | Hashes.str.contains(r'SHA256=f9895458e73d4b0ef01eda347fb695bb00e6598d9f5e2506161b70ad96bb7298', case=False) | Hashes.str.contains(r'SHA256=b738eab6f3e32cec59d5f53c12f13862429d3db6756212bbcd78ba4b4dbc234c', case=False) | Hashes.str.contains(r'SHA256=caa85c44eb511377ea7426ff10df00a701c07ffb384eef8287636a4bca0b53ab', case=False) | Hashes.str.contains(r'SHA256=7da6113183328d4fddf6937c0c85ef65ba69bfe133b1146193a25bcf6ae1f9dd', case=False) | Hashes.str.contains(r'SHA256=854bc946b557ed78c7d40547eb39e293e83942a693c94d0e798d1c4fbde7efa9', case=False) | Hashes.str.contains(r'SHA256=6191c20426dd9b131122fb97e45be64a4d6ce98cc583406f38473434636ddedc', case=False) | Hashes.str.contains(r'SHA256=aa0c52cebd64a0115c0e7faf4316a52208f738f66a54b4871bd4162eb83dc41a', case=False) | Hashes.str.contains(r'SHA256=23ba19352b1e71a965260bf4d5120f0200709ee8657ed381043bec9a938a1ade', case=False) | Hashes.str.contains(r'SHA256=71fe5af0f1564dc187eea8d59c0fbc897712afa07d18316d2080330ba17cf009', case=False) | Hashes.str.contains(r'SHA256=2003b478b9fd1b3d76ec5bf4172c2e8915babbbee7ad1783794acbf8d4c2519d', case=False) | Hashes.str.contains(r'SHA256=03e0581432f5c8cc727a8aa387f5b69ff84d38d0df6f1226c19c6e960a81e1e9', case=False) | Hashes.str.contains(r'SHA256=69640e9209f8e2ac25416bd3119b5308894b6ce22b5c80cb5d5f98f2f85d42ce', case=False) | Hashes.str.contains(r'SHA256=074ae477c8c7ae76c6f2b0bf77ac17935a8e8ee51b52155d2821d93ab30f3761', case=False) | Hashes.str.contains(r'SHA256=16e2b071991b470a76dff4b6312d3c7e2133ad9ac4b6a62dda4e32281952fb23', case=False) | Hashes.str.contains(r'SHA256=092d04284fdeb6762e65e6ac5b813920d6c69a5e99d110769c5c1a78e11c5ba0', case=False) | Hashes.str.contains(r'SHA256=cff9aa9046bdfd781d34f607d901a431a51bb7e5f48f4f681cc743b2cdedc98c', case=False) | Hashes.str.contains(r'SHA256=9d5ebd0f4585ec20a5fe3c5276df13ece5a2645d3d6f70cedcda979bd1248fc2', case=False) | Hashes.str.contains(r'SHA256=f2ed6c1906663016123559d9f3407bc67f64e0d235fa6f10810a3fa7bb322967', case=False) | Hashes.str.contains(r'SHA256=e005e8d183e853a27ad3bb56f25489f369c11b0d47e3d4095aad9291b3343bf1', case=False) | Hashes.str.contains(r'SHA256=c190e4a7f1781ec9fa8c17506b4745a1369dcdf174ce07f85de1a66cf4b5ed8a', case=False) | Hashes.str.contains(r'SHA256=5027fce41ed60906a0e76b97c95c2a5a83d57a2d1cd42de232a21f26c0d58e48', case=False) | Hashes.str.contains(r'SHA256=cc383ad11e9d06047a1558ed343f389492da3ac2b84b71462aee502a2fa616c8', case=False) | Hashes.str.contains(r'SHA256=ffc72f0bde21ba20aa97bee99d9e96870e5aa40cce9884e44c612757f939494f', case=False) | Hashes.str.contains(r'SHA256=d7b743c3f98662c955c616e0d1bb0800c9602e5b6f2385336a72623037bfd6dd', case=False) | Hashes.str.contains(r'SHA256=636b4c1882bcdd19b56370e2ed744e059149c64c96de64ac595f20509efa6220', case=False) | Hashes.str.contains(r'SHA256=fb6b0d304433bf88cc7d57728683dbb4b9833459dc33528918ead09b3907ff22', case=False) | Hashes.str.contains(r'SHA256=7d8937c18d6e11a0952e53970a0934cf0e65515637ac24d6ca52ccf4b93d385f', case=False) | Hashes.str.contains(r'SHA256=4cff6e53430b81ecc4fae453e59a0353bcfe73dd5780abfc35f299c16a97998e', case=False) | Hashes.str.contains(r'SHA256=7837cb350338c4958968d06b105466da6518f5bb522a6e70e87c0cad85128408', case=False) | Hashes.str.contains(r'SHA256=4b4ea21da21a1167c00b903c05a4e3af6c514ea3dfe0b5f371f6a06305e1d27f', case=False) | Hashes.str.contains(r'SHA256=be8dd2d39a527649e34dc77ef8bc07193a4234b38597b8f51e519dadc5479ec2', case=False) | Hashes.str.contains(r'SHA256=c60fcff9c8e5243bbb22ec94618b9dcb02c59bb49b90c04d7d6ab3ebbd58dc3a', case=False) | Hashes.str.contains(r'SHA256=6a4875ae86131a594019dec4abd46ac6ba47e57a88287b814d07d929858fe3e5', case=False) | Hashes.str.contains(r'SHA256=22418016e980e0a4a2d01ca210a17059916a4208352c1018b0079ccb19aaf86a', case=False) | Hashes.str.contains(r'SHA256=0ee5067ce48883701824c5b1ad91695998916a3702cf8086962fbe58af74b2d6', case=False) | Hashes.str.contains(r'SHA256=b48a309ee0960da3caaaaf1e794e8c409993aeb3a2b64809f36b97aac8a1e62a', case=False) | Hashes.str.contains(r'SHA256=9fa120bda98633e30480d8475c9ac6637470c4ca7c63763560bf869138091b01', case=False) | Hashes.str.contains(r'SHA256=dcb815eb8e9016608d0d917101b6af8c84b96fb709dc0344bceed02cbc4ed258', case=False) | Hashes.str.contains(r'SHA256=101402d4f5d1ae413ded499c78a5fcbbc7e3bae9b000d64c1dd64e3c48c37558', case=False) | Hashes.str.contains(r'SHA256=d633055c7eda26dacfc30109eb790625519fc7b0a3a601ceed9e21918aad8a1b', case=False) | Hashes.str.contains(r'SHA256=c586befc3fd561fcbf1cf706214ae2adaa43ce9ba760efd548d581f60deafc65', case=False) | Hashes.str.contains(r'SHA256=0040153302b88bee27eb4f1eca6855039e1a057370f5e8c615724fa5215bada3', case=False) | Hashes.str.contains(r'SHA256=f583cfb8aab7d084dc052dbd0b9d56693308cbb26bd1b607c2aedf8ee2b25e44', case=False) | Hashes.str.contains(r'SHA256=d8459f7d707c635e2c04d6d6d47b63f73ba3f6629702c7a6e0df0462f6478ae2', case=False) | Hashes.str.contains(r'SHA256=bac1cd96ba242cdf29f8feac501110739f1524f0db1c8fcad59409e77b8928ba', case=False) | Hashes.str.contains(r'SHA256=d92eab70bcece4432258c9c9a914483a2267f6ab5ce2630048d3a99e8cb1b482', case=False) | Hashes.str.contains(r'SHA256=e4c154a0073bbad3c9f8ab7218e9b3be252ae705c20c568861dae4088f17ffcc', case=False) | Hashes.str.contains(r'SHA256=ac3f613d457fc4d44fa27b2e0b1baa62c09415705efb5a40a4756da39b3ac165', case=False) | Hashes.str.contains(r'SHA256=73fddd441a764e808ed6d6b8f3d0d13713e61221aa3cfef7da91cdaf112fe061', case=False) | Hashes.str.contains(r'SHA256=ff322cd0cc30976f9dbdb7a3681529aeab0de7b7f5c5763362b02c15da9657a1', case=False) | Hashes.str.contains(r'SHA256=c181ce9a57e8d763db89ba7c45702a8cf66ef1bb58e3f21874cf0265711f886b', case=False) | Hashes.str.contains(r'SHA256=5177a3b7393fb5855b2ec0a45d4c91660b958ee077e76e5a7d0669f2e04bcf02', case=False) | Hashes.str.contains(r'SHA256=51145a3fa8258aac106f65f34159d23c54b48b6d54ec0421748b3939ab6778eb', case=False) | Hashes.str.contains(r'SHA256=08eb2d2aa25c5f0af4e72a7e0126735536f6c2c05e9c7437282171afe5e322c6', case=False) | Hashes.str.contains(r'SHA256=31d8fc6f5fb837d5eb29db828d13ba8ee11867d86a90b2c2483a578e1d0ec43a', case=False) | Hashes.str.contains(r'SHA256=1aaf4c1e3cb6774857e2eef27c17e68dc1ae577112e4769665f516c2e8c4e27b', case=False) | Hashes.str.contains(r'SHA256=61a1bdddd3c512e681818debb5bee94db701768fc25e674fcad46592a3259bd0', case=False) | Hashes.str.contains(r'SHA256=83a1fabf782d5f041132d7c7281525f6610207b38f33ff3c5e44eb9444dd0cbc', case=False) | Hashes.str.contains(r'SHA256=8047859a7a886bcf4e666494bd03a6be9ce18e20dc72df0e5b418d180efef250', case=False) | Hashes.str.contains(r'SHA256=61f3b1c026d203ce94fab514e3d15090222c0eedc2a768cc2d073ec658671874', case=False) | Hashes.str.contains(r'SHA256=7133a461aeb03b4d69d43f3d26cd1a9e3ee01694e97a0645a3d8aa1a44c39129', case=False) | Hashes.str.contains(r'SHA256=a6f7897cd08fe9de5e902bb204ff87215584a008f458357d019a50d6139ca4af', case=False) | Hashes.str.contains(r'SHA256=0f035948848432bc243704041739e49b528f35c82a5be922d9e3b8a4c44398ff', case=False) | Hashes.str.contains(r'SHA256=6297556f66cd6619057f3a5b216b314f8a27eebb5fa575ee07a1944aca71ae80', case=False) | Hashes.str.contains(r'SHA256=09b0e07af8b17db1d896b78da4dd3f55db76738ee1f4ced083a97d737334a184', case=False) | Hashes.str.contains(r'SHA256=f581decc2888ef27ee1ea85ea23bbb5fb2fe6a554266ff5a1476acd1d29d53af', case=False) | Hashes.str.contains(r'SHA256=3e1f592533625bf794e0184485a4407782018718ae797103f9e968ff6f0973a1', case=False) | Hashes.str.contains(r'SHA256=94be67c319a67de75ebed050d5537cfaa795d72bba52f3d8cf349e7bd075410e', case=False) | Hashes.str.contains(r'SHA256=8939116df1d6c8fd0ebd14b2d37b3dec38a8820aa666ecd487bc1bb794f2a587', case=False) | Hashes.str.contains(r'SHA256=98b734dda78c16ebcaa4afeb31007926542b63b2f163b2f733fa0d00dbb344d8', case=False) | Hashes.str.contains(r'SHA256=ab8f2217e59319b88080e052782e559a706fa4fb7b8b708f709ff3617124da89', case=False) | Hashes.str.contains(r'SHA256=72b67b6b38f5e5447880447a55fead7f1de51ca37ae4a0c2b2f23a4cb7455f35', case=False) | Hashes.str.contains(r'SHA256=eea53103e7a5a55dc1df79797395a2a3e96123ebd71cdd2db4b1be80e7b3f02b', case=False) | Hashes.str.contains(r'SHA256=b11e109f6b3dbc8aa82cd7da0b7ba93d07d9809ee2a4b21ec014f6a676a53027', case=False) | Hashes.str.contains(r'SHA256=0507d893e3fd2917c81c1dc13ccb22ae5402ab6ca9fb8d89485010838050d08d', case=False) | Hashes.str.contains(r'SHA256=c26b51b4c37330800cff8519252e110116c3aaade94ceb9894ec5bfb1b8f9924', case=False) | Hashes.str.contains(r'SHA256=5aee1bae73d056960b3a2d2e24ea07c44358dc7bc3f8ac58cc015cccc8f8d89c', case=False) | Hashes.str.contains(r'SHA256=09bedbf7a41e0f8dabe4f41d331db58373ce15b2e9204540873a1884f38bdde1', case=False) | Hashes.str.contains(r'SHA256=1023dcd4c80db19e9f82f95b1c5e1ddb60db7ac034848dd5cc1c78104a6350f4', case=False) | Hashes.str.contains(r'SHA256=37dde6bd8a7a36111c3ac57e0ac20bbb93ce3374d0852bcacc9a2c8c8c30079e', case=False) | Hashes.str.contains(r'SHA256=93b266f38c3c3eaab475d81597abbd7cc07943035068bb6fd670dbbe15de0131', case=False) | Hashes.str.contains(r'SHA256=2470fd1b733314c9b0afa19fd39c5d19aa1b36db598b5ebbe93445caa545da5f', case=False) | Hashes.str.contains(r'SHA256=8a0702681bc51419fbd336817787a966c7f92cabe09f8e959251069578dfa881', case=False) | Hashes.str.contains(r'SHA256=9d9346e6f46f831e263385a9bd32428e01919cca26a035bbb8e9cb00bf410bc3', case=False) | Hashes.str.contains(r'SHA256=dd2c1aa4e14c825f3715891bfa2b6264650a794f366d5f73ed1ef1d79ff0dbf9', case=False) | Hashes.str.contains(r'SHA256=da6ca1fb539f825ca0f012ed6976baf57ef9c70143b7a1e88b4650bf7a925e24', case=False) | Hashes.str.contains(r'SHA256=9a54ef5cfbe6db599322967ee2c84db7daabcb468be10a3ccfcaa0f64d9173c7', case=False) | Hashes.str.contains(r'SHA256=c628cda1ef43defc00af45b79949675a8422490d32b080b3a8bb9434242bdbf2', case=False) | Hashes.str.contains(r'SHA256=f51bdb0ad924178131c21e39a8ccd191e46b5512b0f2e1cc8486f63e84e5d960', case=False) | Hashes.str.contains(r'SHA256=07b6d69bafcfd767f1b63a490a8843c3bb1f8e1bbea56176109b5743c8f7d357', case=False) | Hashes.str.contains(r'SHA256=b17507a3246020fa0052a172485d7b3567e0161747927f2edf27c40e310852e0', case=False) | Hashes.str.contains(r'SHA256=1698ba7eeee6ff9272cc25b242af89190ff23fd9530f21aa8f0f3792412594f3', case=False) | Hashes.str.contains(r'SHA256=092349aebdac28294dbad1656759d8461f362d1a36b01054dccf861d97beadf0', case=False) | Hashes.str.contains(r'SHA256=87aae726bf7104aac8c8f566ea98f2b51a2bfb6097b6fc8aa1f70adeb4681e1b', case=False) | Hashes.str.contains(r'SHA256=673b63b67345773cd6d66f6adcf2c753e2d949232bff818d5bb6e05786538d92', case=False) | Hashes.str.contains(r'SHA256=bb1135b51acca8348d285dc5461d10e8f57260e7d0c8cc4a092734d53fc40cbc', case=False) | Hashes.str.contains(r'SHA256=cbb8239a765bf5b2c1b6a5c8832d2cab8fef5deacadfb65d8ed43ef56d291ab6', case=False) | Hashes.str.contains(r'SHA256=837d3b67d3e66ef1674c9f1a47046e1617ed13f73ee08441d95a6de3d73ee9f2', case=False) | Hashes.str.contains(r'SHA256=db73b0fa032be22405fa0b52fbfe3b30e56ac4787e620e4854c32668ae43bc33', case=False) | Hashes.str.contains(r'SHA256=773999db2f07c50aad70e50c1983fa95804369d25a5b4f10bd610f864c27f2fc', case=False) | Hashes.str.contains(r'SHA256=f64a78b1294e6837f12f171a663d8831f232b1012fd8bae3c2c6368fbf71219b', case=False) | Hashes.str.contains(r'SHA256=733789d0a253e8d80cc3240e365b8d4274e510e36007f6e4b5fd13b07b084c3e', case=False) | Hashes.str.contains(r'SHA256=7cb594af6a3655daebc9fad9c8abf2417b00ba31dcd118707824e5316fc0cc21', case=False) | Hashes.str.contains(r'SHA256=9b1ac756e35f795dd91adbc841e78db23cb7165280f8d4a01df663128b66d194', case=False) | Hashes.str.contains(r'SHA256=e16dc51c51b2df88c474feb52ce884d152b3511094306a289623de69dedfdf48', case=False) | Hashes.str.contains(r'SHA256=747a4dc50915053649c499a508853a42d9e325a5eec22e586571e338c6d32465', case=False) | Hashes.str.contains(r'SHA256=903d6d71da64566b1d9c32d4fb1a1491e9f91006ad2281bb91d4f1ee9567ef7b', case=False) | Hashes.str.contains(r'SHA256=6cf1cac0e97d30bb445b710fd8513879678a8b07be95d309cbf29e9b328ff259', case=False) | Hashes.str.contains(r'SHA256=19a212e6fc324f4cb9ee5eba60f5c1fc0191799a4432265cbeaa3307c76a7fc0', case=False) | Hashes.str.contains(r'SHA256=de3597ae7196ca8c0750dce296a8a4f58893774f764455a125464766fcc9b3b5', case=False) | Hashes.str.contains(r'SHA256=55b5bcbf8fb4e1ce99d201d3903d785888c928aa26e947ce2cdb99eefd0dae03', case=False) | Hashes.str.contains(r'SHA256=f7e0cca8ad9ea1e34fa1a5e0533a746b2fa0988ba56b01542bc43841e463b686', case=False) | Hashes.str.contains(r'SHA256=4ba224af60a50cad10d0091c89134c72fc021da8d34a6f25c4827184dc6ca5c7', case=False) | Hashes.str.contains(r'SHA256=40eef1f52c7b81750cee2b74b5d2f4155d4e58bdde5e18ea612ab09ed0864554', case=False) | Hashes.str.contains(r'SHA256=1c2f1e2b0cc4da128feb73a6b9dd040df8495fefe861d69c9f44778c6ddb9b9b', case=False) | Hashes.str.contains(r'SHA256=53810ca98e07a567bb082628d95d796f14c218762cbbaa79704740284dccda4b', case=False) | Hashes.str.contains(r'SHA256=7048d90ed4c83ad52eb9c677f615627b32815066e34230c3b407ebb01279bae6', case=False) | Hashes.str.contains(r'SHA256=6e76764d750ebd835aa4bb055830d278df530303585614c1dc743f8d5adf97d7', case=False) | Hashes.str.contains(r'SHA256=db2a9247177e8cdd50fe9433d066b86ffd2a84301aa6b2eb60f361cfff077004', case=False) | Hashes.str.contains(r'SHA256=43ba8d96d5e8e54cab59d82d495eeca730eeb16e4743ed134cdd495c51a4fc89', case=False) | Hashes.str.contains(r'SHA256=841335eeb6af68dce5b8b24151776281a751b95056a894991b23afae80e9f33b', case=False) | Hashes.str.contains(r'SHA256=38d87b51f4b69ba2dae1477684a1415f1a3b578eee5e1126673b1beaefee9a20', case=False) | Hashes.str.contains(r'SHA256=00d9781d0823ab49505ef9c877aa6fa674e19ecc8b02c39ee2728f298bc92b03', case=False) | Hashes.str.contains(r'SHA256=84df20b1d9d87e305c92e5ffae21b10b325609d59d835a954dbd8750ef5dabf4', case=False) | Hashes.str.contains(r'SHA256=d9e8be11a19699903016f39f95c9c5bf1a39774ecea73670f2c3ed5385ebfe4c', case=False) | Hashes.str.contains(r'SHA256=6ef0b34649186fb98a7431b606e77ee35e755894b038755ba98e577bd51b2c72', case=False) | Hashes.str.contains(r'SHA256=dbb457ae1bd07a945a1466ce4a206c625e590aee3922fa7d86fbe956beccfc98', case=False) | Hashes.str.contains(r'SHA256=55963284bbd5a3297f39f12f0d8a01ed99fe59d008561e3537bcd4db4b4268fa', case=False) | Hashes.str.contains(r'SHA256=7e81beae78e1ddbf6c150e15667e1f18783f9b0ab7fbe52c7ab63e754135948d', case=False) | Hashes.str.contains(r'SHA256=3e85cf32562a47d51827b21ab1e7f8c26c0dbd1cd86272f3cc64caae61a7e5fb', case=False) | Hashes.str.contains(r'SHA256=e7cbfb16261de1c7f009431d374d90e9eb049ba78246e38bc4c8b9e06f324b6f', case=False) | Hashes.str.contains(r'SHA256=b50ffc60eaa4fb7429fdbb67c0aba0c7085f5129564d0a113fec231c5f8ff62e', case=False) | Hashes.str.contains(r'SHA256=760be95d4c04b10df89a78414facf91c0961020e80561eee6e2cb94b43b76510', case=False) | Hashes.str.contains(r'SHA256=b749566057dee0439f54b0d38935e5939b5cb011c46d7022530f748ebc63efe5', case=False) | Hashes.str.contains(r'SHA256=85866e8c25d82c1ec91d7a8076c7d073cccf421cf57d9c83d80d63943a4edd94', case=False) | Hashes.str.contains(r'SHA256=0f17e5cfc5bdd74aff91bfb1a836071345ba2b5d1b47b0d5bf8e7e0d4d5e2dbf', case=False) | Hashes.str.contains(r'SHA256=221dfbc74bbb255b0879360ccc71a74b756b2e0f16e9386b38a9ce9d4e2e34f9', case=False) | Hashes.str.contains(r'SHA256=6948480954137987a0be626c24cf594390960242cd75f094cd6aaa5c2e7a54fa', case=False) | Hashes.str.contains(r'SHA256=bc7ebd191e0991fd0865a5c956a92e63792a0bb2ff888af43f7a63bb65a22248', case=False) | Hashes.str.contains(r'SHA256=ac26150bc98ee0419a8b23e4cda3566e0eba94718ba8059346a9696401e9793d', case=False) | Hashes.str.contains(r'SHA256=81aafae4c4158d0b9a6431aff0410745a0f6a43fb20a9ab316ffeb8c2e2ccac0', case=False) | Hashes.str.contains(r'SHA256=3ff39728f1c11d1108f65ec5eb3d722fd1a1279c530d79712e0d32b34880baaa', case=False) | Hashes.str.contains(r'SHA256=9254f012009d55f555418ff85f7d93b184ab7cb0e37aecdfdab62cfe94dea96b', case=False) | Hashes.str.contains(r'SHA256=2732050a7d836ae0bdc5c0aea4cdf8ce205618c3e7f613b8139c176e86476d0c', case=False) | Hashes.str.contains(r'SHA256=0a9b608461d55815e99700607a52fbdb7d598f968126d38e10cc4293ac4b1ad8', case=False) | Hashes.str.contains(r'SHA256=87e38e7aeaaaa96efe1a74f59fca8371de93544b7af22862eb0e574cec49c7c3', case=False) | Hashes.str.contains(r'SHA256=3fa6379951f08ed3cb87eeba9cf0c5f5e1d0317dcfcf003b810df9d795eeb73e', case=False) | Hashes.str.contains(r'SHA256=ec5fac0b6bb267a2bd10fc80c8cca6718439d56e82e053d3ff799ce5f3475db5', case=False) | Hashes.str.contains(r'SHA256=927c2a580d51a598177fa54c65e9d2610f5f212f1b6cb2fbf2740b64368f010a', case=False) | Hashes.str.contains(r'SHA256=2f8b68de1e541093f2d4525a0d02f36d361cd69ee8b1db18e6dd064af3856f4f', case=False) | Hashes.str.contains(r'SHA256=b2ba6efeff1860614b150916a77c9278f19d51e459e67a069ccd15f985cbc0e1', case=False) | Hashes.str.contains(r'SHA256=8ef59605ebb2cb259f19aba1a8c122629c224c58e603f270eaa72f516277620c', case=False) | Hashes.str.contains(r'SHA256=4324f3d1e4007f6499a3d0f0102cd92ed9f554332bc0b633305cd7b957ff16c8', case=False) | Hashes.str.contains(r'SHA256=bb68552936a6b0a68fb53ce864a6387d2698332aac10a7adfdd5a48b97027ce3', case=False) | Hashes.str.contains(r'SHA256=80eeb8c2890f3535ed14f5881baf2f2226e6763be099d09fb8aadaba5b4474c1', case=False) | Hashes.str.contains(r'SHA256=d74755311d127d0eb7454e56babc2db8dbaa814bc4ba8e2a7754d3e0224778e1', case=False) | Hashes.str.contains(r'SHA256=19bf0d0f55d2ad33ef2d105520bde8fb4286f00e9d7a721e3c9587b9408a0775', case=False) | Hashes.str.contains(r'SHA256=ad0309c2d225d8540a47250e3773876e05ce6a47a7767511e2f68645562c0686', case=False) | Hashes.str.contains(r'SHA256=62f5e13b2edc00128716cb93e6a9eddffea67ce83d2bb426f18f5be08ead89e0', case=False) | Hashes.str.contains(r'SHA256=3f9530c94b689f39cc83377d76979d443275012e022782a600dcb5cad4cca6aa', case=False) | Hashes.str.contains(r'SHA256=3e758221506628b116e88c14e71be99940894663013df3cf1a9e0b6fb18852b9', case=False) | Hashes.str.contains(r'SHA256=314384b40626800b1cde6fbc51ebc7d13e91398be2688c2a58354aa08d00b073', case=False) | Hashes.str.contains(r'SHA256=fca10cde7d331b7f614118682d834d46125a65888e97bd9fda2df3f15797166c', case=False) | Hashes.str.contains(r'SHA256=86a8e0aa29a5b52c84921188cc1f0eca9a7904dcfe09544602933d8377720219', case=False) | Hashes.str.contains(r'SHA256=025e7be9fcefd6a83f4471bba0c11f1c11bd5047047d26626da24ee9a419cdc4', case=False) | Hashes.str.contains(r'SHA256=ce23c2dae4cca4771ea50ec737093dfafac06c64db0f924a1ccbbf687e33f5a2', case=False) | Hashes.str.contains(r'SHA256=77c5e95b872b1d815d6d3ed28b399ca39f3427eeb0143f49982120ff732285a9', case=False) | Hashes.str.contains(r'SHA256=11bd2c9f9e2397c9a16e0990e4ed2cf0679498fe0fd418a3dfdac60b5c160ee5', case=False) | Hashes.str.contains(r'SHA256=7cfa5e10dff8a99a5d544b011f676bc383991274c693e21e3af40cf6982adb8c', case=False) | Hashes.str.contains(r'SHA256=c8f0bb5d8836e21e7a22a406c69c01ba7d512a808c37c45088575d548ee25caa', case=False) | Hashes.str.contains(r'SHA256=11208bbba148736309a8d2a4ab9ab6b8f22f2297547b100d8bdfd7d413fe98b2', case=False) | Hashes.str.contains(r'SHA256=7893307df2fdde25371645a924f0333e1b2de31b6bc839d8e2a908d7830c6504', case=False) | Hashes.str.contains(r'SHA256=d2182b6ef3255c7c1a69223cd3c2d68eb8ba3112ce433cd49cd803dc76412d4b', case=False) | Hashes.str.contains(r'SHA256=c490d6c0844f59fdb4aa850a06e283fbf5e5b6ac20ff42ead03d549d8ae1c01b', case=False) | Hashes.str.contains(r'SHA256=8e5aef7c66c0e92dfc037ee29ade1c8484b8d7fadebdcf521d2763b1d8215126', case=False) | Hashes.str.contains(r'SHA256=81d54ebef1716e195955046ffded498a5a7e325bf83e7847893aa3b0b3776d05', case=False) | Hashes.str.contains(r'SHA256=d5c4ff35eaa74ccdb80c7197d3d113c9cd38561070f2aa69c0affe8ed84a77c9', case=False) | Hashes.str.contains(r'SHA256=828a18b16418c021b6c4aa8c6d54cef4e815efca0d48b9ff14822f9ccb69dff2', case=False) | Hashes.str.contains(r'SHA256=182bbdb9ecd3932e0f0c986b779c2b2b3997a7ca9375caa2ec59b4b08f4e9714', case=False) | Hashes.str.contains(r'SHA256=f88ebb633406a086d9cca6bc8b66a4ea940c5476529f9033a9e0463512a23a57', case=False) | Hashes.str.contains(r'SHA256=c299063e3eae8ddc15839767e83b9808fd43418dc5a1af7e4f44b97ba53fbd3d', case=False) | Hashes.str.contains(r'SHA256=5cfad3d473961763306d72c12bd5ae14183a1a5778325c9acacca764b79ca185', case=False) | Hashes.str.contains(r'SHA256=f1fbec90c60ee4daba1b35932db9f3556633b2777b1039163841a91cf997938e', case=False) | Hashes.str.contains(r'SHA256=9917144b7240b1ce0cadb1210fd26182744fbbdf145943037c4b93e44aced207', case=False) | Hashes.str.contains(r'SHA256=c6feb3f4932387df7598e29d4f5bdacec0b9ce98db3f51d96fc4ffdcc6eb10e1', case=False) | Hashes.str.contains(r'SHA256=0be4912bfd7a79f6ebfa1c06a59f0fb402bd4fe0158265780509edd0e562eac1', case=False) | Hashes.str.contains(r'SHA256=ad215185dc833c54d523350ef3dbc10b3357a88fc4dde00281d9af81ea0764d5', case=False) | Hashes.str.contains(r'SHA256=e2d6cdc3d8960a50d9f292bb337b3235956a61e4e8b16cf158cb979b777f42aa', case=False) | Hashes.str.contains(r'SHA256=8797d9afc7a6bb0933f100a8acbb5d0666ec691779d522ac66c66817155b1c0d', case=False) | Hashes.str.contains(r'SHA256=dbebf6d463c2dbf61836b3eba09b643e1d79a02652a32482ca58894703b9addb', case=False) | Hashes.str.contains(r'SHA256=cd4a249c3ef65af285d0f8f30a8a96e83688486aab515836318a2559757a89bb', case=False) | Hashes.str.contains(r'SHA256=e6d1ee0455068b74cf537388c874acb335382876aa9d74586efb05d6cc362ae5', case=False) | Hashes.str.contains(r'SHA256=af095de15a16255ca1b2c27dad365dff9ac32d2a75e8e288f5a1307680781685', case=False) | Hashes.str.contains(r'SHA256=70b63dfc3ed2b89a4eb8a0aa6c26885f460e5686d21c9d32413df0cdc5f962c7', case=False) | Hashes.str.contains(r'SHA256=909f6c4b8f779df01ef91e549679aa4600223ac75bc7f3a3a79a37cee2326e77', case=False) | Hashes.str.contains(r'SHA256=e3eff841ea0f2786e5e0fed2744c0829719ad711fc9258eeaf81ed65a52a8918', case=False) | Hashes.str.contains(r'SHA256=90574d2c406b9738aae8fc629c3983c5e47a6282a43b052f38b5dd313380c30a', case=False) | Hashes.str.contains(r'SHA256=823da894b2c73ffcd39e77366b6f1abf0ae9604d9b20140a54e6d55053aadeba', case=False) | Hashes.str.contains(r'SHA256=5daa8fa3b5db2e6225a2effea41af95fe7ffc579550c4081c8028ed33bc023b8', case=False) | Hashes.str.contains(r'SHA256=115034373fc0ec8f75fb075b7a7011b603259ecc0aca271445e559b5404a1406', case=False) | Hashes.str.contains(r'SHA256=a072197177aad26c31960694e38e2cae85afbab070929e67e331b99d3a418cf4', case=False) | Hashes.str.contains(r'SHA256=93d873cdf23d5edc622b74f9544cac7fe247d7a68e1e2a7bf2879fad97a3ae63', case=False) | Hashes.str.contains(r'SHA256=ac63c26ca43701dddaa7fb1aea535d42190f88752900a03040fd5aaa24991e25', case=False) | Hashes.str.contains(r'SHA256=1f8168036d636aad1680dd0f577ef9532dbb2dad3591d63e752b0ba3ee6fd501', case=False) | Hashes.str.contains(r'SHA256=592f56b13e7dcaa285da64a0b9a48be7562bd9b0a190208b7c8b7d8de427cf6c', case=False) | Hashes.str.contains(r'SHA256=d783ace822f8fe4e25d5387e5dd249cb72e62f62079023216dc436f1853a150f', case=False) | Hashes.str.contains(r'SHA256=e0b5a5f8333fc1213791af5c5814d7a99615b3951361ca75f8aa5022c9cfbc2b', case=False) | Hashes.str.contains(r'SHA256=c50f8ab8538c557963252b702c1bd3cee4604b5fc2497705d2a6a3fd87e3cc26', case=False) | Hashes.str.contains(r'SHA256=b3d1bdd4ad819b99870b6e2ed3527dfc0e3ce27b929ad64382b9c3d4e332315c', case=False) | Hashes.str.contains(r'SHA256=4a9093e8dbcb867e1b97a0a67ce99a8511900658f5201c34ffb8035881f2dbbe', case=False) | Hashes.str.contains(r'SHA256=f190919f1668652249fa23d8c0455acbde9d344089fde96566239b1a18b91da2', case=False) | Hashes.str.contains(r'SHA256=c9b49b52b493b53cd49c12c3fa9553e57c5394555b64e32d1208f5b96a5b8c6e', case=False) | Hashes.str.contains(r'SHA256=4c807bacfcf5c30686e26812ec8d5581a824b82fee7434260c27c33eee2dfbe2', case=False) | Hashes.str.contains(r'SHA256=000547560fea0dd4b477eb28bf781ea67bf83c748945ce8923f90fdd14eb7a4b', case=False) | Hashes.str.contains(r'SHA256=700b9839fde53e91f0847053b4d2eb8d9bd3aca098844510f1fa3bab6a37eb24', case=False) | Hashes.str.contains(r'SHA256=d474ea066d416ded9ed8501c285ca6b1c26a1d1c813c8f6bd5523eeb66c5d01e', case=False) | Hashes.str.contains(r'SHA256=4e3eb5b9bce2fd9f6878ae36288211f0997f6149aa8c290ed91228ba4cdfae80', case=False) | Hashes.str.contains(r'SHA256=6b830ea0db6546a044c9900d3f335e7820c2a80e147b0751641899d1a5aa8f74', case=False) | Hashes.str.contains(r'SHA256=2a4f4400402cdc475d39389645ca825bb0e775c3ecb7c527e30c5be44e24af7d', case=False) | Hashes.str.contains(r'SHA256=075de997497262a9d105afeadaaefc6348b25ce0e0126505c24aa9396c251e85', case=False) | Hashes.str.contains(r'SHA256=1ee59eb28688e73d10838c66e0d8e011c8df45b6b43a4ac5d0b75795ca3eb512', case=False) | Hashes.str.contains(r'SHA256=b6fd51e1f57a03006953e84fd56cc2821cc19e7c77c0474e1110aabaacaf03df', case=False) | Hashes.str.contains(r'SHA256=ff55c1f308a5694eb66a3e9ba326266c826c5341c44958831a7a59a23ed5ecc8', case=False) | Hashes.str.contains(r'SHA256=a7c2e7910942dd5e43e2f4eb159bcd2b4e71366e34a68109548b9fb12ac0f7cc', case=False) | Hashes.str.contains(r'SHA256=5d7bfe05792189eaf7193bee85f0c792c33315cfcb40b2e62cc7baef6cafbc5c', case=False) | Hashes.str.contains(r'SHA256=a7b000abbcc344444a9b00cfade7aa22ab92ce0cadec196c30eb1851ae4fa062', case=False) | Hashes.str.contains(r'SHA256=4ce8583768720be90fae66eed3b6b4a8c7c64e033be53d4cd98246d6e06086d0', case=False) | Hashes.str.contains(r'SHA256=7ef8949637cb947f1a4e1d4e68d31d1385a600d1b1054b53e7417767461fafa7', case=False) | Hashes.str.contains(r'SHA256=bdcacee3695583a0ca38b9a786b9f7334bf2a9a3387e4069c8e6ca378b2791d0', case=False) | Hashes.str.contains(r'SHA256=4c859b3d11d2ff0049b644a19f3a316a8ca1a4995aa9c39991a7bde8d4f426a4', case=False) | Hashes.str.contains(r'SHA256=50db5480d0392a7dd6ab5df98389dc24d1ed1e9c98c9c35964b19dabcd6dc67f', case=False) | Hashes.str.contains(r'SHA256=d969845ef6acc8e5d3421a7ce7e244f419989710871313b04148f9b322751e5d', case=False) | Hashes.str.contains(r'SHA256=da617fe914a5f86dc9d657ef891bbbceb393c8a6fea2313c84923f3630255cdb', case=False) | Hashes.str.contains(r'SHA256=e58bbf3251906ff722aa63415bf169618e78be85cb92c8263d3715c260491e90', case=False) | Hashes.str.contains(r'SHA256=cf66fcbcb8b2ea7fb4398f398b7480c50f6a451b51367718c36330182c1bb496', case=False) | Hashes.str.contains(r'SHA256=79e87b93fbed84ec09261b3a0145c935f7dfe4d4805edfb563b2f971a0d51463', case=False) | Hashes.str.contains(r'SHA256=1e24c45ce2672ee403db34077c88e8b7d7797d113c6fd161906dce3784da627d', case=False) | Hashes.str.contains(r'SHA256=0c512b615eac374d4d494e3c36838d8e788b3dc2691bf27916f7f42694b14467', case=False) | Hashes.str.contains(r'SHA256=4045ae77859b1dbf13972451972eaaf6f3c97bea423e9e78f1c2f14330cd47ca', case=False) | Hashes.str.contains(r'SHA256=b78eb7f12ba718183313cf336655996756411b7dcc8648157aaa4c891ca9dbee', case=False) | Hashes.str.contains(r'SHA256=c5050a2017490fff7aa53c73755982b339ddb0fd7cef2cde32c81bc9834331c5', case=False) | Hashes.str.contains(r'SHA256=771a8d05f1af6214e0ef0886662be500ee910ab99f0154227067fddcfe08a3dd', case=False) | Hashes.str.contains(r'SHA256=61d6e40601fa368800980801a662a5b3b36e3c23296e8ae1c85726a56ef18cc8', case=False) | Hashes.str.contains(r'SHA256=5ab48bf8c099611b217cc9f78af2f92e9aaeedf1cea4c95d5dd562f51e9f0d09', case=False) | Hashes.str.contains(r'SHA256=274340f7185a0cc047d82ecfb2cce5bd18764ee558b5227894565c2f9fe9f6ab', case=False) | Hashes.str.contains(r'SHA256=89bc3cb4522f9b0bf467a93a4123ef623c28244e25a9c34d4aae11f705d187e7', case=False) | Hashes.str.contains(r'SHA256=e3f2ee22dec15061919583e4beb8abb3b29b283e2bcb46badf2bfde65f5ea8dd', case=False) | Hashes.str.contains(r'SHA256=b7a20b5f15e1871b392782c46ebcc897929443d82073ee4dcb3874b6a5976b5d', case=False) | Hashes.str.contains(r'SHA256=ea0b9eecf4ad5ec8c14aec13de7d661e7615018b1a3c65464bf5eca9bbf6ded3', case=False) | Hashes.str.contains(r'SHA256=a566af57d88f37fa033e64b1d8abbd3ffdacaba260475fbbc8dab846a824eff5', case=False) | Hashes.str.contains(r'SHA256=98a123b314cba2de65f899cdbfa386532f178333389e0f0fbd544aff85be02eb', case=False) | Hashes.str.contains(r'SHA256=afda5af5f210336061bff0fab0ed93ee495312bed639ec5db56fbac0ea8247d3', case=False) | Hashes.str.contains(r'SHA256=e3936d3356573ce2e472495cd3ce769f49a613e453b010433dafce5ea498ddc2', case=False) | Hashes.str.contains(r'SHA256=9c8ed1506b3e35f5eea6ac539e286d46ef76ddbfdfc5406390fd2157c762ce91', case=False) | Hashes.str.contains(r'SHA256=97030f3c81906334429afebbf365a89b66804ed890cd74038815ca18823d626c', case=False) | Hashes.str.contains(r'SHA256=ef6d3c00f9d0aa31a218094480299ef73fc85146adf62fd0c2f4f88972c5c850', case=False) | Hashes.str.contains(r'SHA256=065a34b786b0ccf6f88c136408943c3d2bd3da14357ee1e55e81e05d67a4c9bc', case=False) | Hashes.str.contains(r'SHA256=3c11dec1571253594d64619d8efc8c0212897be84a75a8646c578e665f58bf5d', case=False) | Hashes.str.contains(r'SHA256=c188b36f258f38193ace21a7d254f0aec36b59ad7e3f9bcb9c2958108effebad', case=False) | Hashes.str.contains(r'SHA256=7539157df91923d4575f7f57c8eb8b0fd87f064c919c1db85e73eebb2910b60c', case=False) | Hashes.str.contains(r'SHA256=aaa3459bcac25423f78ed72dbae4d7ef19e7c5c65770cbe5210b14e33cd1816c', case=False) | Hashes.str.contains(r'SHA256=900dd68ccc72d73774a347b3290c4b6153ae496a81de722ebb043e2e99496f88', case=False) | Hashes.str.contains(r'SHA256=c9cf1d627078f63a36bbde364cd0d5f2be1714124d186c06db5bcdf549a109f8', case=False) | Hashes.str.contains(r'SHA256=22be050955347661685a4343c51f11c7811674e030386d2264cd12ecbf544b7c', case=False) | Hashes.str.contains(r'SHA256=509628b6d16d2428031311d7bd2add8d5f5160e9ecc0cd909f1e82bbbb3234d6', case=False) | Hashes.str.contains(r'SHA256=a9706e320179993dade519a83061477ace195daa1b788662825484813001f526', case=False) | Hashes.str.contains(r'SHA256=a29093d4d708185ba8be35709113fb42e402bbfbf2960d3e00fd7c759ef0b94e', case=False) | Hashes.str.contains(r'SHA256=ad23d77a38655acb71216824e363df8ac41a48a1a0080f35a0d23aa14b54460b', case=False) | Hashes.str.contains(r'SHA256=86a1b1bacc0c51332c9979e6aad84b5fba335df6b9a096ccb7681ab0779a8882', case=False) | Hashes.str.contains(r'SHA256=4b4c925c3b8285aeeab9b954e8b2a0773b4d2d0e18d07d4a9d268f4be90f6cae', case=False) | Hashes.str.contains(r'SHA256=5be106b92424b12865338b3f541b3c244dce9693fe15f763316f0c6d6fc073ee', case=False) | Hashes.str.contains(r'SHA256=b84dc9b885193ced6a1b6842a365a4f18d1683951bb11a5c780ab737ffa06684', case=False) | Hashes.str.contains(r'SHA256=dda2a604bb94a274e23f0005f0aa330d45ca1ea25111746fb46fa5ef6d155b1d', case=False) | Hashes.str.contains(r'SHA256=3af9c376d43321e813057ecd0403e71cafc3302139e2409ab41e254386c33ecb', case=False) | Hashes.str.contains(r'SHA256=f93e0d776481c4ded177d5e4aebb27f30f0d47dcb4a1448aee8b66099ac686e1', case=False) | Hashes.str.contains(r'SHA256=8bf01cd6d55502838853851703eb297ec71361fa9a0b088a30c2434f4d2bf9c6', case=False) | Hashes.str.contains(r'SHA256=80cbba9f404df3e642f22c476664d63d7c229d45d34f5cd0e19c65eb41becec3', case=False) | Hashes.str.contains(r'SHA256=c1c4310e5d467d24e864177bdbfc57cb5d29aac697481bfa9c11ddbeebfd4cc8', case=False) | Hashes.str.contains(r'SHA256=1aa8ba45f9524847e2a36c0dc6fd80162923e88dc1be217dde2fb5894c65ff43', case=False) | Hashes.str.contains(r'SHA256=654c5ba47f74008c8f49cbb97988017eec8c898adc3bb851bc6e1fdf9dcf54ad', case=False) | Hashes.str.contains(r'SHA256=a3975db1127c331ba541fffff0c607a15c45b47aa078e756b402422ef7e81c2c', case=False) | Hashes.str.contains(r'SHA256=7ad0ab23023bc500c3b46f414a8b363c5f8700861bc4745cecc14dd34bcee9ed', case=False) | Hashes.str.contains(r'SHA256=cf4b5fa853ce809f1924df3a3ae3c4e191878c4ea5248d8785dc7e51807a512b', case=False) | Hashes.str.contains(r'SHA256=5ae23f1fcf3fb735fcf1fa27f27e610d9945d668a149c7b7b0c84ffd6409d99a', case=False) | Hashes.str.contains(r'SHA256=70afdc0e11db840d5367afe53c35d9642c1cf616c7832ab283781d085988e505', case=False) | Hashes.str.contains(r'SHA256=76276c87617b836dd6f31b73d2bb0e756d4b3d133bddfe169cb4225124ca6bfb', case=False) | Hashes.str.contains(r'SHA256=0da746e49fd662be910d0e366934a7e02898714eaaa577e261ab40eb44222b5c', case=False) | Hashes.str.contains(r'SHA256=1e8b0c1966e566a523d652e00f7727d8b0663f1dfdce3b9a09b9adfaef48d8ee', case=False) | Hashes.str.contains(r'SHA256=1072beb3ff6b191b3df1a339e3a8c87a8dc5eae727f2b993ea51b448e837636a', case=False) | Hashes.str.contains(r'SHA256=ef438a754fd940d145cc5d658ddac666a06871d71652b258946c21efe4b7e517', case=False) | Hashes.str.contains(r'SHA256=0af5ccb3d33a9ba92071c9637be6254030d61998733a5eb3583e865e17844e05', case=False) | Hashes.str.contains(r'SHA256=4d0580c20c1ba74cf90d44c82d040f0039542eea96e4bbff3996e6760f457cee', case=False) | Hashes.str.contains(r'SHA256=94911fe6f2aba9683b10353094caf71ee4a882de63b4620797629d79f18feec5', case=False) | Hashes.str.contains(r'SHA256=f8965fdce668692c3785afa3559159f9a18287bc0d53abb21902895a8ecf221b', case=False) | Hashes.str.contains(r'SHA256=9b2f051ac901ab47d0012a1002cb8b2db28c14e9480c0dd55e1ac11c81ba9285', case=False) | Hashes.str.contains(r'SHA256=20f11a64bc4548f4edb47e3d3418da0f6d54a83158224b71662a6292bf45b5fb', case=False) | Hashes.str.contains(r'SHA256=d9500af86bf129d06b47bcfbc4b23fcc724cfbd2af58b03cdb13b26f8f50d65e', case=False) | Hashes.str.contains(r'SHA256=b531f0a11ca481d5125c93c977325e135a04058019f939169ce3cdedaddd422d', case=False) | Hashes.str.contains(r'SHA256=fa77a472e95c4d0a2271e5d7253a85af25c07719df26941b39082cfc0733071a', case=False) | Hashes.str.contains(r'SHA256=6ffdde6bc6784c13c601442e47157062941c47015891e7139c2aaba676ab59cc', case=False) | Hashes.str.contains(r'SHA256=5c9e257c9740561b5744812e1343815e7972c362c8993d972b96a56e18c712f3', case=False) | Hashes.str.contains(r'SHA256=76614f2e372f33100a8d92bf372cdbc1e183930ca747eed0b0cf2501293b990a', case=False) | Hashes.str.contains(r'SHA256=b4c07f7e7c87518e8950eb0651ae34832b1ecee56c89cdfbd1b4efa8cf97779f', case=False) | Hashes.str.contains(r'SHA256=786f0ba14567a7e19192645ad4e40bee6df259abf2fbdfda35b6a38f8493d6cc', case=False) | Hashes.str.contains(r'SHA256=17687cba00ec2c9036dd3cb5430aa1f4851e64990dafb4c8f06d88de5283d6ca', case=False) | Hashes.str.contains(r'SHA256=212c05b487cd4e64de2a1077b789e47e9ac3361efa24d9aab3cc6ad4bd3bd76a', case=False) | Hashes.str.contains(r'SHA256=5c80dc051c4b0c62b9284211f71e5567c0c0187e466591eacb93e7dc10e4b9ab', case=False) | Hashes.str.contains(r'SHA256=79440da6b8178998bdda5ebde90491c124b1967d295db1449ec820a85dc246dd', case=False) | Hashes.str.contains(r'SHA256=9eba5d1545fdbf37cf053ac3f3ba45bcb651b8abb7805cbfdfb5f91ea294fb95', case=False) | Hashes.str.contains(r'SHA256=c8940e2e9b069ec94f9f711150b313b437f8429f78d522810601b6ee8b52bada', case=False) | Hashes.str.contains(r'SHA256=45c3d607cb57a1714c1c604a25cbadf2779f4734855d0e43aa394073b6966b26', case=False) | Hashes.str.contains(r'SHA256=e4d9f037411284e996a002b15b49bc227d085ee869ae1cd91ba54ff7c244f036', case=False) | Hashes.str.contains(r'SHA256=ee3ff12943ced401e2b6df9e66e8a0be8e449fa9326cab241f471b2d8ffefdd7', case=False) | Hashes.str.contains(r'SHA256=ae73dd357e5950face9c956570088f334d18464cd49f00c56420e3d6ff47e8dc', case=False) | Hashes.str.contains(r'SHA256=b2bc7514201727d773c09a1cfcfae793fcdbad98024251ccb510df0c269b04e6', case=False) | Hashes.str.contains(r'SHA256=708016fbe22c813a251098f8f992b177b476bd1bbc48c2ed4a122ff74910a965', case=False) | Hashes.str.contains(r'SHA256=eef68fdc5df91660410fb9bed005ed08c258c44d66349192faf5bb5f09f5fa90', case=False) | Hashes.str.contains(r'SHA256=582b62ffbcbcdd62c0fc624cdf106545af71078f1edfe1129401d64f3eefaa3a', case=False) | Hashes.str.contains(r'SHA256=326b53365f8486c78608139cac84619eff90be361f7ade9db70f9867dd94dcc9', case=False) | Hashes.str.contains(r'SHA256=9bd8b0289955a6eb791f45c3203f08a64cbd457fd1b9d598a6fbbca5d0372e36', case=False) | Hashes.str.contains(r'SHA256=655110646bff890c448c0951e11132dc3592bda6e080696341b930d090224723', case=False) | Hashes.str.contains(r'SHA256=8d6febd54ce0c98ea3653e582f7791061923a9a4842bd4a1326564204431ca9f', case=False) | Hashes.str.contains(r'SHA256=9529efb1837b1005e5e8f477773752078e0a46500c748bc30c9b5084d04082e6', case=False) | Hashes.str.contains(r'SHA256=f2a4ddc38e68efd2eac27b2562529926f5ade93575a82e8d3e0abb2b37347257', case=False) | Hashes.str.contains(r'SHA256=e89afd283d5789b8064d5487e04b97e2cd3fc0c711a8cec230543ebdf9ffc534', case=False) | Hashes.str.contains(r'SHA256=78827fa00ea48d96ac9af8d1c1e317d02ce11793e7f7f6e4c7aac7b5d7dd490f', case=False) | Hashes.str.contains(r'SHA256=57a389da784269bb2cc0a258500f6dfbf4f6269276e1192619ce439ec77f4572', case=False) | Hashes.str.contains(r'SHA256=81fbc9d02ef9e05602ea9c0804d423043d0ea5a06393c7ece3be03459f76a41d', case=False) | Hashes.str.contains(r'SHA256=2ad8c38f6e0ca6c93abe3228c8a5d4299430ce0a2eeb80c914326c75ba8a33f9', case=False) | Hashes.str.contains(r'SHA256=89b9823ed974a5b71de8468324d45b7e9d6dc914f93615ba86c6209b25b3cbf7', case=False) | Hashes.str.contains(r'SHA256=5b9623da9ba8e5c80c49473f40ffe7ad315dcadffc3230afdc9d9226d60a715a', case=False) | Hashes.str.contains(r'SHA256=36e3127f045ef1fa7426a3ff8c441092d3b66923d2b69826034e48306609e289', case=False) | Hashes.str.contains(r'SHA256=71423a66165782efb4db7be6ce48ddb463d9f65fd0f266d333a6558791d158e5', case=False) | Hashes.str.contains(r'SHA256=4941c4298f4560fc1e59d0f16f84bab5c060793700b82be2fd7c63735f1657a8', case=False) | Hashes.str.contains(r'SHA256=848b150ffcf1301b26634a41f28deacb5ccdd3117d79b590d515ed49849b8891', case=False) | Hashes.str.contains(r'SHA256=14938f68957ede6e2b742a550042119a8fbc9f14427fb89fa53fff12d243561c', case=False) | Hashes.str.contains(r'SHA256=49ef680510e3dac6979a20629d10f06822c78f45b9a62ec209b71827a526be94', case=False) | Hashes.str.contains(r'SHA256=a495ffa623a5220179b0dd519935e255dd6910b7b7bc3d68906528496561ff53', case=False) | Hashes.str.contains(r'SHA256=a7c8f4faf3cbb088cac7753d81f8ec4c38ccb97cd9da817741f49272e8d01200', case=False) | Hashes.str.contains(r'SHA256=e1980c6592e6d2d92c1a65acad8f1071b6a404097bb6fcce494f3c8ac31385cf', case=False) | Hashes.str.contains(r'SHA256=c8ff7c9f510f7a2ed88d9b336d8c9339698d5e1ee14bfb91aa89703ec06dce42', case=False) | Hashes.str.contains(r'SHA256=0b542e47248611a1895018ec4f4033ea53464f259c74eb014d018b19ad818917', case=False) | Hashes.str.contains(r'SHA256=348dc502ac57d7362c7f222e656c52e630c90bef92217a3bd20e49193b5a69f1', case=False) | Hashes.str.contains(r'SHA256=f42eb29f5b2bcb2a70d796fd71fd1b259d5380b216ee672cf46dcdd4604b87ad', case=False) | Hashes.str.contains(r'SHA256=5fbfd7c4ea3db1197ad38d5a945acf6f2f42cb350380cf8ae276bc80b0dedb77', case=False) | Hashes.str.contains(r'SHA256=77950e2a40ac0447ae7ee1ee3ef1242ce22796a157074e6f04e345b1956e143c', case=False) | Hashes.str.contains(r'SHA256=de6bf572d39e2611773e7a01f0388f84fb25da6cba2f1f8b9b36ffba467de6fa', case=False) | Hashes.str.contains(r'SHA256=45ba688a4bded8a7e78a4f5b0dc21004e951ddceb014bb92f51a3301d2fbc56a', case=False) | Hashes.str.contains(r'SHA256=36aafa127736c7226c50061ea065f71e14f64ec60321f705bc52686d24117e0d', case=False) | Hashes.str.contains(r'SHA256=7c8ad57b3a224fdc2aac9dd2d7c3624f1fcd3542d4db804de25a90155657e2cc', case=False) | Hashes.str.contains(r'SHA256=7462b7ae48ae9469474222d4df2f0c4f72cdef7f3a69a524d4fccc5ed0fd343f', case=False) | Hashes.str.contains(r'SHA256=d205286bffdf09bc033c09e95c519c1c267b40c2ee8bab703c6a2d86741ccd3e', case=False) | Hashes.str.contains(r'SHA256=39f137083e6c0200543e1f8d3c074f857d141bdb8c8f09338d48520537b881aa', case=False) | Hashes.str.contains(r'SHA256=0b547368c03e0a584ae3c5e62af3728426c68b316a15f3290316844d193ad182', case=False) | Hashes.str.contains(r'SHA256=455bc98ba32adab8b47d2d89bdbadca4910f91c182ab2fc3211ba07d3784537b', case=False) | Hashes.str.contains(r'SHA256=bdbceca41e576841cad2f2b38ee6dbf92fd77fbbfdfe6ecf99f0623d44ef182c', case=False) | Hashes.str.contains(r'SHA256=a0dd3d43ab891777b11d4fdcb3b7f246b80bc66d12f7810cf268a5f6f4f8eb7b', case=False) | Hashes.str.contains(r'SHA256=3326e2d32bbabd69feb6024809afc56c7e39241ebe70a53728c77e80995422a5', case=False) | Hashes.str.contains(r'SHA256=e9919d1546c7dfef62ff01b87f739812de0a57463611c12012013ae689023ce1', case=False) | Hashes.str.contains(r'SHA256=3124b0411b8077605db2a9b7909d8240e0d554496600e2706e531c93c931e1b5', case=False) | Hashes.str.contains(r'SHA256=f6cd7353cb6e86e98d387473ed6340f9b44241867508e209e944f548b9db1d5f', case=False) | Hashes.str.contains(r'SHA256=506f953bbb285aeb8af0549eb24f52f3b7af36afe740afa36735bac70573ce28', case=False) | Hashes.str.contains(r'SHA256=b9ed73af3aef69dc1fb91731d6d0a649e93f83d0f07ddb9729d71c2d00ed0801', case=False) | Hashes.str.contains(r'SHA256=607dc4c75ac7aef82ae0616a453866b3b358c6cf5c8f9d29e4d37f844306b97c', case=False) | Hashes.str.contains(r'SHA256=e4eca7db365929ff7c5c785e2eab04ef8ec67ea9edcf7392f2b74eccd9449148', case=False) | Hashes.str.contains(r'SHA256=2270a8144dabaf159c2888519b11b61e5e13acdaa997820c09798137bded3dd6', case=False) | Hashes.str.contains(r'SHA256=5e27fe26110d2b9f6c2bad407d3d0611356576b531564f75ff96f9f72d5fcae4', case=False) | Hashes.str.contains(r'SHA256=cb57f3a7fe9e1f8e63332c563b0a319b26c944be839eabc03e9a3277756ba612', case=False) | Hashes.str.contains(r'SHA256=6bfc0f425de9f4e7480aa2d1f2e08892d0553ed0df1c31e9bf3d8d702f38fa2e', case=False) | Hashes.str.contains(r'SHA256=316a27e2bdb86222bc7c8af4e5472166b02aec7f3f526901ce939094e5861f6d', case=False) | Hashes.str.contains(r'SHA256=48891874441c6fa69e5518d98c53d83b723573e280c6c65ccfbde9039a6458c9', case=False) | Hashes.str.contains(r'SHA256=648994905b29b9c4a1074eef332bf6932b638bad62df020b5452c74e2b15d78f', case=False) | Hashes.str.contains(r'SHA256=6278bc785113831b2ec3368e2c9c9e89e8aca49085a59d8d38dac651471d6440', case=False) | Hashes.str.contains(r'SHA256=b8321471be85dc8a67ac18a2460cab50e7c41cb47252f9a7278b1e69d6970f25', case=False) | Hashes.str.contains(r'SHA256=673bcec3d53fab5efd6e3bac25ac9d6cc51f6bbdf8336e38aade2713dc1ae11b', case=False) | Hashes.str.contains(r'SHA256=8c95d28270a4a314299cf50f05dcbe63033b2a555195d2ad2f678e09e00393e6', case=False) | Hashes.str.contains(r'SHA256=e2e79f1e696f27fa70d72f97e448081b1fa14d59cbb89bb4a40428534dd5c6f6', case=False) | Hashes.str.contains(r'SHA256=22e125c284a55eb730f03ec27b87ab84cf897f9d046b91c76bea2b5809fd51c5', case=False) | Hashes.str.contains(r'SHA256=60b163776e7b95e0c2280d04476304d0c943b484909131f340e3ce6045a49289', case=False) | Hashes.str.contains(r'SHA256=42f0b036687cbd7717c9efed6991c00d4e3e7b032dc965a2556c02177dfdad0f', case=False) | Hashes.str.contains(r'SHA256=3ec5ad51e6879464dfbccb9f4ed76c6325056a42548d5994ba869da9c4c039a8', case=False) | Hashes.str.contains(r'SHA256=b7bba82777c9912e6a728c3e873c5a8fd3546982e0d5fa88e64b3e2122f9bc3b', case=False) | Hashes.str.contains(r'SHA256=aebcbfca180e372a048b682a4859fd520c98b5b63f6e3a627c626cb35adc0399', case=False) | Hashes.str.contains(r'SHA256=80a59ca71fc20961ccafc0686051e86ae4afbbd4578cb26ad4570b9207651085', case=False) | Hashes.str.contains(r'SHA256=f8d6ce1c86cbd616bb821698037f60a41e129d282a8d6f1f5ecdd37a9688f585', case=False) | Hashes.str.contains(r'SHA256=910479467ef17b9591d8d42305e7f6f247ad41c60ec890a1ffbe331f495ed135', case=False) | Hashes.str.contains(r'SHA256=2d195cd4400754cc6f6c3f8ab1fe31627932c3c1bf8d5d0507c292232d1a2396', case=False) | Hashes.str.contains(r'SHA256=d21aba58222930cb75946a0fb72b4adc96de583d3f7d8dc13829b804eb877257', case=False) | Hashes.str.contains(r'SHA256=16768203a471a19ebb541c942f45716e9f432985abbfbe6b4b7d61a798cea354', case=False) | Hashes.str.contains(r'SHA256=2665d3127ddd9411af38a255787a4e2483d720aa021be8d6418e071da52ed266', case=False) | Hashes.str.contains(r'SHA256=478917514be37b32d5ccf76e4009f6f952f39f5553953544f1b0688befd95e82', case=False) | Hashes.str.contains(r'SHA256=be03e9541f56ac6ed1e81407dcd7cc85c0ffc538c3c2c2c8a9c747edbcf13100', case=False) | Hashes.str.contains(r'SHA256=0b57569aaa0f4789d9642dd2189b0a82466b80ad32ff35f88127210ed105fe57', case=False) | Hashes.str.contains(r'SHA256=e50b25d94c1771937b2f632e10eea875ac6b19c57da703d52e23ad2b6299f0ae', case=False) | Hashes.str.contains(r'SHA256=ece0a900ea089e730741499614c0917432246ceb5e11599ee3a1bb679e24fd2c', case=False) | Hashes.str.contains(r'SHA256=cb59a641adb623a65a9b5af1db2ffd921fd1ca1bc046a6df85d5f2e00fd0b5a5', case=False) | Hashes.str.contains(r'SHA256=a3e507e713f11901017fc328186ae98e23de7cea5594687480229f77d45848d8', case=False) | Hashes.str.contains(r'SHA256=ef86c4e5ee1dbc4f81cd864e8cd2f4a2a85ee4475b9a9ab698a4ae1cc71fbeb0', case=False) | Hashes.str.contains(r'SHA256=51480eebbbfb684149842c3e19a8ffbd3f71183c017e0c4bc6cf06aacf9c0292', case=False) | Hashes.str.contains(r'SHA256=2afdb3278a7b57466a103024aef9ff7f41c73a19bab843a8ebf3d3c4d4e82b30', case=False) | Hashes.str.contains(r'SHA256=3d23bdbaf9905259d858df5bf991eb23d2dc9f4ecda7f9f77839691acef1b8c4', case=False) | Hashes.str.contains(r'SHA256=83fbf5d46cff38dd1c0f83686708b3bd6a3a73fddd7a2da2b5a3acccd1d9359c', case=False) | Hashes.str.contains(r'SHA256=9c10e2ec4f9ef591415f9a784b93dc9c9cdafa7c69602c0dc860c5b62222e449', case=False) | Hashes.str.contains(r'SHA256=51f002ee44e46889cf5b99a724dd10cc2bd3e22545e2a2cb3bd6b1dd3af5ba11', case=False) | Hashes.str.contains(r'SHA256=7dfc2eb033d2e090540860b8853036f40736d02bd22099ff6cf665a90be659cd', case=False) | Hashes.str.contains(r'SHA256=e728b259113d772b4e96466ab8fe18980f37c36f187b286361c852bd88101717', case=False) | Hashes.str.contains(r'SHA256=2b4c7d3820fe08400a7791e2556132b902a9bbadc1942de57077ecb9d21bf47a', case=False) | Hashes.str.contains(r'SHA256=b9ad7199c00d477ebbc15f2dcf78a6ba60c2670dad0ef0994cebccb19111f890', case=False) | Hashes.str.contains(r'SHA256=bc8cb3aebe911bd9b4a3caf46f7dda0f73fec4d2e4e7bc9601bb6726f5893091', case=False) | Hashes.str.contains(r'SHA256=6575ea9b319beb3845d43ce2c70ea55f0414da2055fa82eec324c4cebdefe893', case=False) | Hashes.str.contains(r'SHA256=a56c2a2425eb3a4260cc7fc5c8d7bed7a3b4cd2af256185f24471c668853aee8', case=False) | Hashes.str.contains(r'SHA256=63865f04c1150655817ed4c9f56ad9f637d41ebd2965b6127fc7c02757a7800e', case=False) | Hashes.str.contains(r'SHA256=8f23313adb35782adb0ba97fefbfbb8bbc5fc40ae272e07f6d4629a5305a3fa2', case=False) | Hashes.str.contains(r'SHA256=082c39fe2e3217004206535e271ebd45c11eb072efde4cc9885b25ba5c39f91d', case=False) | Hashes.str.contains(r'SHA256=26d69e677d30bb53c7ac7f3fce76291fe2c44720ef17ee386f95f08ec5175288', case=False) | Hashes.str.contains(r'SHA256=b2247e68386c1bdfd48687105c3728ebbad672daffa91b57845b4e49693ffd71', case=False) | Hashes.str.contains(r'SHA256=38b3eb8c86201d26353aab625cea672e60c2f66ce6f5e5eda673e8c3478bf305', case=False) | Hashes.str.contains(r'SHA256=952199c28332bc90cfd74530a77ee237967ed32b3c71322559c59f7a42187dc4', case=False) | Hashes.str.contains(r'SHA256=4e37592a2a415f520438330c32cfbdbd6af594deef5290b2fa4b9722b898ff69', case=False) | Hashes.str.contains(r'SHA256=40061b30b1243be76d5283cbc8abfe007e148097d4de7337670ff1536c4c7ba1', case=False) | Hashes.str.contains(r'SHA256=d7a61c671eab1dfaa62fe1088a85f6d52fb11f2f32a53822a49521ca2c16585e', case=False) | Hashes.str.contains(r'SHA256=74a846c61adc53692d3040aff4c1916f32987ad72b07fe226e9e7dbeff1036c4', case=False) | Hashes.str.contains(r'SHA256=238046cfe126a1f8ab96d8b62f6aa5ec97bab830e2bae5b1b6ab2d31894c79e4', case=False) | Hashes.str.contains(r'SHA256=478bcb750017cb6541f3dd0d08a47370f3c92eec998bc3825b5d8e08ee831b70', case=False) | Hashes.str.contains(r'SHA256=1e9c236ed39507661ec32731033c4a9b9c97a6221def69200e03685c08e0bfa7', case=False) | Hashes.str.contains(r'SHA256=e77786b21dbe73e9619ac9aac5e7e92989333d559aa22b4b65c97f0a42ff2e21', case=False) | Hashes.str.contains(r'SHA256=d1f4949f76d8ac9f2fa844d16b1b45fb1375d149d46e414e4a4c9424dc66c91f', case=False) | Hashes.str.contains(r'SHA256=c3e150eb7e7292f70299d3054ed429156a4c32b1f7466a706a2b99249022979e', case=False) | Hashes.str.contains(r'SHA256=4ace6dded819e87f3686af2006cb415ed75554881a28c54de606975c41975112', case=False) | Hashes.str.contains(r'SHA256=696679114f6a106ec94c21e2a33fe17af86368bcf9a796aaea37ea6e8748ad6a', case=False) | Hashes.str.contains(r'SHA256=9778136d2441439dc470861d15d96fa21dc9f16225232cd05b76791a5e0fde6f', case=False) | Hashes.str.contains(r'SHA256=6ed35f310c96920a271c59a097b382da07856e40179c2a4239f8daa04eef38e7', case=False) | Hashes.str.contains(r'SHA256=76e807b6c0214e66455f09a8de8faad40b738982ca84470f0043de0290449524', case=False) | Hashes.str.contains(r'SHA256=202d9703a5b8d06c5f92d2c5218a93431aa55af389007826a9bfaaf900812213', case=False) | Hashes.str.contains(r'SHA256=47f0cdaa2359a63ad1389ef4a635f1f6eee1f63bdf6ef177f114bdcdadc2e005', case=False) | Hashes.str.contains(r'SHA256=97b32ddf83f75637e3ba934df117081dd6a1c57d47a4c9700d35e736da11d5bd', case=False) | Hashes.str.contains(r'SHA256=00c02901472d74e8276743c847b8148be3799b0e3037c1dfdca21fa81ad4b922', case=False) | Hashes.str.contains(r'SHA256=d7bc7306cb489fe4c285bbeddc6d1a09e814ef55cf30bd5b8daf87a52396f102', case=False) | Hashes.str.contains(r'SHA256=3c6f9917418e991ed41540d8d882c8ca51d582a82fd01bff6cdf26591454faf5', case=False) | Hashes.str.contains(r'SHA256=c2a4ddcc9c3b339d752c48925d62fc4cc5adbf6fae8fedef74cdd47e88da01f8', case=False) | Hashes.str.contains(r'SHA256=b61869b7945be062630f1dd4bae919aecee8927f7e1bc3954a21ff763f4c0867', case=False) | Hashes.str.contains(r'SHA256=7877c1b0e7429453b750218ca491c2825dae684ad9616642eff7b41715c70aca', case=False) | Hashes.str.contains(r'SHA256=c0c52425dd90f36d110952c665e5b644bb1092f952942c07bb4da998c9ce6e5b', case=False) | Hashes.str.contains(r'SHA256=c2562e0101cb39906c73b96fc15a6e6e3edd710b19858f6bbd0c90f1561b6038', case=False) | Hashes.str.contains(r'SHA256=21ccdd306b5183c00ecfd0475b3152e7d94b921e858e59b68a03e925d1715f21', case=False) | Hashes.str.contains(r'SHA256=d5562fb90b0b3deb633ab335bcbd82ce10953466a428b3f27cb5b226b453eaf3', case=False) | Hashes.str.contains(r'SHA256=f1c8ca232789c2f11a511c8cd95a9f3830dd719cad5aa22cb7c3539ab8cb4dc3', case=False) | Hashes.str.contains(r'SHA256=2bf29a2df52110ed463d51376562afceac0e80fbb1033284cf50edd86c406b14', case=False) | Hashes.str.contains(r'SHA256=50d5eaa168c077ce5b7f15b3f2c43bd2b86b07b1e926c1b332f8cb13bd2e0793', case=False) | Hashes.str.contains(r'SHA256=258359a7fa3d975620c9810dab3a6493972876a024135feaf3ac8482179b2e79', case=False) | Hashes.str.contains(r'SHA256=405a99028c99f36ab0f84a1fd810a167b8f0597725e37513d7430617106501f1', case=False) | Hashes.str.contains(r'SHA256=17927b93b2d6ab4271c158f039cae2d60591d6a14458f5a5690aec86f5d54229', case=False) | Hashes.str.contains(r'SHA256=72b99147839bcfb062d29014ec09fe20a8f261748b5925b00171ef3cb849a4c1', case=False) | Hashes.str.contains(r'SHA256=405472a8f9400a54bb29d03b436ccd58cfd6442fe686f6d2ed4f63f002854659', case=False) | Hashes.str.contains(r'SHA256=1c1251784e6f61525d0082882a969cb8a0c5d5359be22f5a73e3b0cd38b51687', case=False) | Hashes.str.contains(r'SHA256=ca34f945117ec853a713183fa4e8cf85ea0c2c49ca26e73d869fee021f7b491d', case=False) | Hashes.str.contains(r'SHA256=b9ae1d53a464bc9bb86782ab6c55e2da8804c80a361139a82a6c8eef30fddd7c', case=False) | Hashes.str.contains(r'SHA256=fd33fb2735cc5ef466a54807d3436622407287e325276fcd3ed1290c98bd0533', case=False) | Hashes.str.contains(r'SHA256=a4680fabf606d6580893434e81c130ff7ec9467a15e6534692443465f264d3c9', case=False) | Hashes.str.contains(r'SHA256=11a9787831ac4f0657aeb5e7019c23acc39d8833faf28f85bd10d7590ea4cc5f', case=False) | Hashes.str.contains(r'SHA256=771015b2620942919bb2e0683476635b7a09db55216d6fbf03534cb18513b20c', case=False) | Hashes.str.contains(r'SHA256=2a11b4f125d8537e69af7b684494e49ef2a30a219634988e278177fa36c934eb', case=False) | Hashes.str.contains(r'SHA256=e32ab30d01dcff6418544d93f99ae812d2ce6396e809686620547bea05074f6f', case=False) | Hashes.str.contains(r'SHA256=37022838c4327e2a5805e8479330d8ff6f8cd3495079905e867811906c98ea20', case=False) | Hashes.str.contains(r'SHA256=3b6e85c8fed9e39b21b2eab0b69bc464272b2c92961510c36e2e2df7aa39861b', case=False) | Hashes.str.contains(r'SHA256=c7f64b27cd3be5af1c8454680529ea493dfbb09e634eec7e316445ad73499ae0', case=False) | Hashes.str.contains(r'SHA256=3c7e5b25a33a7805c999d318a9523fcae46695a89f55bbdb8bb9087360323dfc', case=False) | Hashes.str.contains(r'SHA256=8d57e416ea4bb855b78a2ff3c80de1dfbb5dc5ee9bfbdddb23e46bd8619287e2', case=False) | Hashes.str.contains(r'SHA256=e4a7da2cf59a4a21fc42b611df1d59cae75051925a7ddf42bf216cc1a026eadb', case=False) | Hashes.str.contains(r'SHA256=9a91d6e83b8fdec536580f6617f10dfc64eedf14ead29a6a644eb154426622ba', case=False) | Hashes.str.contains(r'SHA256=a8027daa6facf1ff81405daf6763249e9acf232a1a191b6bf106711630e6188e', case=False) | Hashes.str.contains(r'SHA256=b179e1ab6dc0b1aee783adbcad4ad6bb75a8a64cb798f30c0dd2ee8aaf43e6de', case=False) | Hashes.str.contains(r'SHA256=0e53b58415fa68552928622118d5b8a3a851b2fc512709a90b63ba46acda8b6b', case=False) | Hashes.str.contains(r'SHA256=ffd03584246730397e231eb8d16c1449aef2c3bc79bf9da3ebf8400a21b20ae7', case=False) | Hashes.str.contains(r'SHA256=c344e92a6d06155a217a9af7b4b35e6653665eec6569292e7b2e70f3a3027646', case=False) | Hashes.str.contains(r'SHA256=ff115cefe624b6ca0b3878a86f6f8b352d1915b65fbbdc33ae15530a96ebdaa7', case=False) | Hashes.str.contains(r'SHA256=c640930c29ea3610a3a5cebee573235ec70267ed223b79b9fa45a80081e686a4', case=False) | Hashes.str.contains(r'SHA256=88e2e6a705d3fb71b966d9fb46dc5a4b015548daf585fb54dfcd81dc0bd3ebdc', case=False) | Hashes.str.contains(r'SHA256=16b591cf5dc1e7282fdb25e45497fe3efc8095cbe31c05f6d97c5221a9a547e1', case=False) | Hashes.str.contains(r'SHA256=24e70c87d58fa5771f02b9ddf0d8870cba6b26e35c6455a2c77f482e2080d3e9', case=False) | Hashes.str.contains(r'SHA256=5a826b4fa10891cf63aae832fc645ce680a483b915c608ca26cedbb173b1b80a', case=False) | Hashes.str.contains(r'SHA256=8e92aacd60fca1f09b7257e62caf0692794f5d741c5d1eec89d841e87f2c359c', case=False) | Hashes.str.contains(r'SHA256=4bc0921ffd4acc865525d3faf98961e8decc5aec4974552cbbf2ae8d5a569de4', case=False) | Hashes.str.contains(r'SHA256=fd8669794c67b396c12fc5f08e9c004fdf851a82faf302846878173e4fbecb03', case=False) | Hashes.str.contains(r'SHA256=cc687fe3741bbde1dd142eac0ef59fd1d4457daee43cdde23bb162ef28d04e64', case=False) | Hashes.str.contains(r'SHA256=677c0b1add3990fad51f492553d3533115c50a242a919437ccb145943011d2bf', case=False) | Hashes.str.contains(r'SHA256=d8b58f6a89a7618558e37afc360cd772b6731e3ba367f8d58734ecee2244a530', case=False) | Hashes.str.contains(r'SHA256=d9a2bf0f5ba185170441f003dc46fbb570e1c9fdf2132ab7de28b87ba7ad1a0c', case=False) | Hashes.str.contains(r'SHA256=0d133ced666c798ea63b6d8026ec507d429e834daa7c74e4e091e462e5815180', case=False) | Hashes.str.contains(r'SHA256=b0b6a410c22cc36f478ff874d4a23d2e4b4e37c6e55f2a095fc4c3ef32bcb763', case=False) | Hashes.str.contains(r'SHA256=bfc121e93fcbf9bd42736cfe7675ae2cc805be9a58f1a0d8cc3aa5b42e49a13f', case=False) | Hashes.str.contains(r'SHA256=b9695940f72e3ed5d7369fb32958e2146abd29d5895d91ccc22dfbcc9485b78b', case=False) | Hashes.str.contains(r'SHA256=4a3d4db86f580b1680d6454baee1c1a139e2dde7d55e972ba7c92ec3f555dce2', case=False) | Hashes.str.contains(r'SHA256=5bdba1561ec5b23b1d56ea8cee411147d1526595f03a9281166a563b3641fa2a', case=False) | Hashes.str.contains(r'SHA256=cc586254e9e89e88334adee44e332166119307e79c2f18f6c2ab90ce8ba7fc9b', case=False) | Hashes.str.contains(r'SHA256=66f8bd2b29763acfbb7423f4c3c9c3af9f3ca4113bd580ab32f6e3ee4a4fc64e', case=False) | Hashes.str.contains(r'SHA256=49f75746eebe14e5db11706b3e58accc62d4034d2f1c05c681ecef5d1ad933ba', case=False) | Hashes.str.contains(r'SHA256=1e16a01ef44e4c56e87abfbe03b2989b0391b172c3ec162783ad640be65ab961', case=False) | Hashes.str.contains(r'SHA256=1c8dfa14888bb58848b4792fb1d8a921976a9463be8334cff45cc96f1276049a', case=False) | Hashes.str.contains(r'SHA256=9724488ca2ba4c787640c49131f4d1daae5bd47d6b2e7e5f9e8918b1d6f655be', case=False) | Hashes.str.contains(r'SHA256=b03f26009de2e8eabfcf6152f49b02a55c5e5d0f73e01d48f5a745f93ce93a29', case=False) | Hashes.str.contains(r'SHA256=fc3e8554602c476e2edfa92ba4f6fb2e5ba0db433b9fbd7d8be1036e454d2584', case=False) | Hashes.str.contains(r'SHA256=bef87650c29faf421e7ad666bf47d7a78a45f291b438c8d1c4b6a66e5b54c6fc', case=False) | Hashes.str.contains(r'SHA256=3a95cc82173032b82a0ffc7d2e438df64c13bc16b4574214c9fe3be37250925e', case=False) | Hashes.str.contains(r'SHA256=5351c81b4ec5a0d79c39d24bac7600d10eac30c13546fde43d23636b3f421e7c', case=False) | Hashes.str.contains(r'SHA256=4d777a9e2c61e8b55b3c34c5265b301454bb080abe7ffb373e7800bd6a498f8d', case=False) | Hashes.str.contains(r'SHA256=59b09bd69923c0b3de3239e73205b1846a5f69043546d471b259887bb141d879', case=False) | Hashes.str.contains(r'SHA256=36b9e31240ab0341873c7092b63e2e0f2cab2962ebf9b25271c3a1216b7669eb', case=False) | Hashes.str.contains(r'SHA256=5c04c274a708c9a7d993e33be3ea9e6119dc29527a767410dbaf93996f87369a', case=False) | Hashes.str.contains(r'SHA256=59626cac380d8fe0b80a6d4c4406d62ba0683a2f0f68d50ad506ca1b1cf25347', case=False) | Hashes.str.contains(r'SHA256=34bee22c18ddbddbe115cf1ab55cabf0e482aba1eb2c343153577fb24b7226d3', case=False) | Hashes.str.contains(r'SHA256=f4c7e94a7c2e49b130671b573a9e4ff4527a777978f371c659c3f97c14d126de', case=False) | Hashes.str.contains(r'SHA256=567809308cfb72d59b89364a6475f34a912d03889aa50866803ac3d0bf2c3270', case=False) | Hashes.str.contains(r'SHA256=523d1d43e896077f32cd9acaa8e85b513bfb7b013a625e56f0d4e9675d9822ba', case=False) | Hashes.str.contains(r'SHA256=b074caef2fbf7e1dc8870edccb65254858d95836f466b4e9e6ca398bf7a27aa3', case=False) | Hashes.str.contains(r'SHA256=4422851a0a102f654e95d3b79c357ae3af1b096d7d1576663c027cfbc04abaf9', case=False) | Hashes.str.contains(r'SHA256=8d3347c93dff62eecdde22ccc6ba3ce8c0446874738488527ea76d0645341409', case=False) | Hashes.str.contains(r'SHA256=f14da8aa5c8eea8df63cf935481d673fdf3847f5701c310abf4023f9d80ad57d', case=False) | Hashes.str.contains(r'SHA256=60c6f4f34c7319cb3f9ca682e59d92711a05a2688badbae4891b1303cd384813', case=False) | Hashes.str.contains(r'SHA256=c089a31ac95d41ed02d1e4574962f53376b36a9e60ff87769d221dc7d1a3ecfa', case=False) | Hashes.str.contains(r'SHA256=5f487829527802983d5c120e3b99f3cf89333ca14f5e49ac32df0798cfb1f7aa', case=False) | Hashes.str.contains(r'SHA256=9e2622d8e7a0ec136ba1fff639833f05137f8a1ff03e7a93b9a4aea25e7abb8d', case=False) | Hashes.str.contains(r'SHA256=f05b1ee9e2f6ab704b8919d5071becbce6f9d0f9d0ba32a460c41d5272134abe', case=False) | Hashes.str.contains(r'SHA256=6e944ae1bfe43a8a7cd2ea65e518a30172ce8f31223bdfd39701b2cb41d8a9e7', case=False) | Hashes.str.contains(r'SHA256=c470c9db58840149ce002f3e6003382ecf740884a683bae8f9d10831be218fa2', case=False) | Hashes.str.contains(r'SHA256=3ac8e54be2804f5fa60d0d23a11ba323fba078a942c96279425aabad935b8236', case=False) | Hashes.str.contains(r'SHA256=468b087a0901d7bd971ab564b03ded48c508840b1f9e5d233a7916d1da6d9bd5', case=False) | Hashes.str.contains(r'SHA256=496f4a4021226fb0f1b5f71a7634c84114c29faa308746a12c2414adb6b2a40b', case=False) | Hashes.str.contains(r'SHA256=ac1af529c9491644f1bda63267e0f0f35e30ab0c98ab1aecf4571f4190ab9db4', case=False) | Hashes.str.contains(r'SHA256=b95b2d9b29bd25659f1c7ba5a187f8d23cde01162d9b5b1a2c4aea8f64b38441', case=False) | Hashes.str.contains(r'SHA256=82fbcb371d53b8a76a25fbbafaae31147c0d1f6b9f26b3ea45262c2267386989', case=False) | Hashes.str.contains(r'SHA256=0fc3bc6e81b04dcaa349f59f04d6c85c55a2fea5db8fa0ba53d3096a040ce5a7', case=False) | Hashes.str.contains(r'SHA256=daf549a7080d384ba99d1b5bd2383dbb1aa640f7ea3a216df1f08981508155f5', case=False) | Hashes.str.contains(r'SHA256=bac709c49ddee363c8e59e515f2f632324a0359e932b7d8cb1ce2d52a95981aa', case=False) | Hashes.str.contains(r'SHA256=7f375639a0df7fe51e5518cf87c3f513c55bc117db47d28da8c615642eb18bfa', case=False) | Hashes.str.contains(r'SHA256=aa9ab1195dc866270e984f1bed5e1358d6ef24c515dfdb6c2a92d1e1b94bf608', case=False) | Hashes.str.contains(r'SHA256=7cf756afcaf2ce4f8fb479fdede152a17eabf4c5c7c329699dab026a4c1d4fd0', case=False) | Hashes.str.contains(r'SHA256=f8d45fa03f56e2ea14920b902856666b8d44f1f1b16644baf8c1ae9a61851fb6', case=False) | Hashes.str.contains(r'SHA256=0b2ad05939b0aabbdc011082fad7960baa0c459ec16a2b29f37c1fa31795a46d', case=False) | Hashes.str.contains(r'SHA256=e75714f8e0ff45605f6fc7689a1a89c7dcd34aab66c6131c63fefaca584539cf', case=False) | Hashes.str.contains(r'SHA256=0abca92512fc98fe6c2e7d0a33935686fc3acbd0a4c68b51f4a70ece828c0664', case=False) | Hashes.str.contains(r'SHA256=dafa4459d88a8ab738b003b70953e0780f6b8f09344ce3cd631af70c78310b53', case=False) | Hashes.str.contains(r'SHA256=f48f31bf9c6abbd44124b66bce2ab1200176e31ef1e901733761f2b5ceb60fb2', case=False) | Hashes.str.contains(r'SHA256=984a77e5424c6d099051441005f2938ae92b31b5ad8f6521c6b001932862add7', case=False) | Hashes.str.contains(r'SHA256=475e5016c9c0f5a127896f9179a1b1577a67b357f399ab5a1e68aab07134729a', case=False) | Hashes.str.contains(r'SHA256=543991ca8d1c65113dff039b85ae3f9a87f503daec30f46929fd454bc57e5a91', case=False) | Hashes.str.contains(r'SHA256=3678ba63d62efd3b706d1b661d631ded801485c08b5eb9a3ef38380c6cff319a', case=False) | Hashes.str.contains(r'SHA256=ab2632a4d93a7f3b7598c06a9fdc773a1b1b69a7dd926bdb7cf578992628e9dd', case=False) | Hashes.str.contains(r'SHA256=c082514317bf80a2f5129d84a5a55e411a95e32d03a4df1274537704c80e41dd', case=False) | Hashes.str.contains(r'SHA256=3813c1aab1760acb963bcc10d6ea3fddc2976b9e291710756408de392bc9e5d5', case=False) | Hashes.str.contains(r'SHA256=f13f6a4bf7711216c9e911f18dfa2735222551fb1f8c1a645a8674c1983ccea6', case=False) | Hashes.str.contains(r'SHA256=3a65d14fd3b1b5981084cdbd293dc6f4558911ea18dd80177d1e5b54d85bcaa0', case=False) | Hashes.str.contains(r'SHA256=898e07cf276ec2090b3e7ca7c192cc0fa10d6f13d989ef1cb5826ca9ce25b289', case=False) | Hashes.str.contains(r'SHA256=834a3d755b5ae798561f8e5fbb18cf28dfcae7a111dc6a03967888e9d10f6d78', case=False) | Hashes.str.contains(r'SHA256=d15a0bc7a39bbeff10019496c1ed217b7c1b26da37b2bdd46820b35161ddb3c4', case=False) | Hashes.str.contains(r'SHA256=c9014b03866bf37faa8fdb16b6af7cfec976aaef179fd5797d0c0bf8079d3a8c', case=False) | Hashes.str.contains(r'SHA256=46621554728bc55438c7c241137af401250f062edef6e7efecf1a6f0f6d0c1f7', case=False) | Hashes.str.contains(r'SHA256=8001d7161d662a6f4afb4d17823144e042fd24696d8904380d48065209f28258', case=False) | Hashes.str.contains(r'SHA256=4b465faf013929edf2f605c8cd1ac7a278ddc9a536c4c34096965e6852cbfb51', case=False) | Hashes.str.contains(r'SHA256=1336469ec0711736e742b730d356af23f8139da6038979cfe4de282de1365d3b', case=False) | Hashes.str.contains(r'SHA256=65025741ecd0ef516da01319b42c2d96e13cb8d78de53fb7e39cd53ea6d58c75', case=False) | Hashes.str.contains(r'SHA256=c8eaa5e6d3230b93c126d2d58e32409e4aeeb23ccf0dd047a17f1ef552f92fe9', case=False) | Hashes.str.contains(r'SHA256=2b186926ed815d87eaf72759a69095a11274f5d13c33b8cc2b8700a1f020be1d', case=False) | Hashes.str.contains(r'SHA256=85fdd255c5d7add25fd7cd502221387a5e11f02144753890218dd31a8333a1a3', case=False) | Hashes.str.contains(r'SHA256=31e2e5c3290989e8624820cf5af886fd778ee8187fed593f33a6178f65103f37', case=False) | Hashes.str.contains(r'SHA256=1deae340bf619319adce00701de887f7434deab4d5547a1742aeedb5634d23c6', case=False) | Hashes.str.contains(r'SHA256=442c18aeb09556bb779b21185c4f7e152b892410429c123c86fc209a802bff3c', case=False) | Hashes.str.contains(r'SHA256=ebf0e56a1941e3a6583aab4a735f1b04d4750228c18666925945ed9d7c9007e1', case=False) | Hashes.str.contains(r'SHA256=53bd8e8d3542fcf02d09c34282ebf97aee9515ee6b9a01cefd81baa45c6fd3d6', case=False) | Hashes.str.contains(r'SHA256=f62911334068c9edd44b9c3e8dee8155a0097aa331dd4566a61afa3549f35f65', case=False) | Hashes.str.contains(r'SHA256=e61a54f6d3869b43c4eceac3016df73df67cce03878c5a6167166601c5d3f028', case=False) | Hashes.str.contains(r'SHA256=f929bead59e9424ab90427b379dcdd63fbfe0c4fb5e1792e3a1685541cd5ec65', case=False) | Hashes.str.contains(r'SHA256=dd573f23d656818036fc9ae1064eda31aca86acb9bc44a6e127db3ea112a9094', case=False) | Hashes.str.contains(r'SHA256=87e094214feb56a482cd8ae7ee7c7882b5a8dccce7947fdaa04a660fa19f41e5', case=False) | Hashes.str.contains(r'SHA256=c35cab244bd88bf0b1e7fc89c587d82763f66cf1108084713f867f72cc6f3633', case=False) | Hashes.str.contains(r'SHA256=78d49094913526340d8d0ef952e8fe9ada9e8b20726b77fb88c9fb5d54510663', case=False) | Hashes.str.contains(r'SHA256=436ccab6f62fa2d29827916e054ade7acae485b3de1d3e5c6c62d3debf1480e7', case=False) | Hashes.str.contains(r'SHA256=67734c7c0130dd66c964f76965f09a2290da4b14c94412c0056046e700654bdc', case=False) | Hashes.str.contains(r'SHA256=b1334a71cc73b3d0c54f62d8011bec330dfc355a239bf94a121f6e4c86a30a2e', case=False) | Hashes.str.contains(r'SHA256=be66f3bbfed7d648cfd110853ddb8cef561f94a45405afc6be06e846b697d2b0', case=False) | Hashes.str.contains(r'SHA256=7108613244f16c2279c3c917aa49cef8acf0b92fdaa9ace19bf5cf634360d727', case=False) | Hashes.str.contains(r'SHA256=bcfc2c9883e6c1b8429be44cc4db988a9eecb544988fbd756d18cfca6201876f', case=False) | Hashes.str.contains(r'SHA256=20e52e0d7f579dc6884cc6e80266fddceda69ea5fdd0b095c0874b0d877e48a2', case=False) | Hashes.str.contains(r'SHA256=6c64688444d3e004da77dcfb769d064bb38afceeef7ff915dfc71e60e19ff18a', case=False) | Hashes.str.contains(r'SHA256=ecd07df7ad6fee9269a9e9429eb199bf3e24cf672aa1d013b7e8d90d75324566', case=False) | Hashes.str.contains(r'SHA256=b3e645e8817696fa5d5e2255f9328f3b6a2e5fce91737f4d654ff155dc9851e5', case=False) | Hashes.str.contains(r'SHA256=3b7177e9a10c1392633c5f605600bb23c8629379f7f42957972374a05d4dc458', case=False) | Hashes.str.contains(r'SHA256=6c7120e40fc850e4715058b233f5ad4527d1084a909114fd6a36b7b7573c4a44', case=False) | Hashes.str.contains(r'SHA256=32cccc4f249499061c0afa18f534c825d01034a1f6815f5506bf4c4ff55d1351', case=False) | Hashes.str.contains(r'SHA256=31f4140c12ac31f5729a8de4dc051d3acd07783564604df831a2a6722c979192', case=False) | Hashes.str.contains(r'SHA256=d6801e845d380c809d0da8c7a5d3cd2faa382875ae72f5f7af667a34df25fbf7', case=False) | Hashes.str.contains(r'SHA256=e4658d93544f69f5cb9aa6d9fec420fecc8750cb57e1e9798da38c139d44f2eb', case=False) | Hashes.str.contains(r'SHA256=077aa8ff5e01747723b6d24cc8af460a7a00f30cd3bc80e41cc245ceb8305356', case=False) | Hashes.str.contains(r'SHA256=d330ab003206ce5e9828607562790aa8dd0453f6b7452f5c6053e3c6b6761d25', case=False) | Hashes.str.contains(r'SHA256=ad2477632b9b07588cfe0e692f244c05fa4202975c1fe91dd3b90fa911ac6058', case=False) | Hashes.str.contains(r'SHA256=91314768da140999e682d2a290d48b78bb25a35525ea12c1b1f9634d14602b2c', case=False) | Hashes.str.contains(r'SHA256=0ce40a2cdd3f45c7632b858e8089ddfdd12d9acb286f2015a4b1b0c0346a572c', case=False) | Hashes.str.contains(r'SHA256=5fe5a6f88fbbc85be9efe81204eee11dff1a683b426019d330b1276a3b5424f4', case=False) | Hashes.str.contains(r'SHA256=18e1707b319c279c7e0204074088cc39286007a1cf6cb6e269d5067d8d0628c6', case=False) | Hashes.str.contains(r'SHA256=a334bdf0c0ab07803380eb6ef83eefe7c147d6962595dd9c943a6a76f2200b0d', case=False) | Hashes.str.contains(r'SHA256=71ff60722231c7641ad593756108cf6779dbaad21c7b08065fb1d4e225eab14d', case=False) | Hashes.str.contains(r'SHA256=af298d940b186f922464d2ef19ccfc129c77126a4f337ecf357b4fe5162a477c', case=False) | Hashes.str.contains(r'SHA256=6001c6acae09d2a91f8773bbdfd52654c99bc672a9756dc4cb53dc2e3efeb097', case=False) | Hashes.str.contains(r'SHA256=818e396595d08d724666803cd29dac566dc7db23bf50e9919d04b33afa988c01', case=False) | Hashes.str.contains(r'SHA256=6befa481e8cca8084d9ec3a1925782cd3c28ef7a3e4384e034d48deaabb96b63', case=False) | Hashes.str.contains(r'SHA256=be683cd38e64280567c59f7dc0a45570abcb8a75f1d894853bbbd25675b4adf7', case=False) | Hashes.str.contains(r'SHA256=2288c418ddadd5a1db4e58c118d8455b01fd33728664408ce23b9346ae0ca057', case=False) | Hashes.str.contains(r'SHA256=42579a759f3f95f20a2c51d5ac2047a2662a2675b3fb9f46c1ed7f23393a0f00', case=False) | Hashes.str.contains(r'SHA256=64a8e00570c68574b091ebdd5734b87f544fa59b75a4377966c661d0475d69a5', case=False) | Hashes.str.contains(r'SHA256=7de1ce434f957df7bbdf6578dd0bf06ed1269f3cc182802d5c499f5570a85b3a', case=False) | Hashes.str.contains(r'SHA256=8b92cdb91a2e2fab3881d54f5862e723826b759749f837a11c9e9d85d52095a2', case=False) | Hashes.str.contains(r'SHA256=ea3c5569405ed02ec24298534a983bcb5de113c18bc3fd01a4dd0b5839cd17b9', case=False) | Hashes.str.contains(r'SHA256=f4e500a9ac5991da5bf114fa80e66456a2cde3458a3d41c14e127ac09240c114', case=False) | Hashes.str.contains(r'SHA256=8ed0c00920ce76e832701d45117ed00b12e20588cb6fe8039fbccdfef9841047', case=False) | Hashes.str.contains(r'SHA256=0584520b4b3bdad1d177329bd9952c0589b2a99eb9676cb324d1fce46dad0b9a', case=False) | Hashes.str.contains(r'SHA256=1b7fb154a7b7903a3c81f12f4b094f24a3c60a6a8cffca894c67c264ab7545fa', case=False) | Hashes.str.contains(r'SHA256=4cd80f4e33b713570f6a16b9f77679efa45a466737e41db45b41924e7d7caef4', case=False) | Hashes.str.contains(r'SHA256=a0e583bd88eb198558442f69a8bbfc96f4c5c297befea295138cfd2070f745c5', case=False) | Hashes.str.contains(r'SHA256=9bfd24947052bfe9f2979113a7941e40bd7e3a82eaa081a32ad4064159f07c91', case=False) | Hashes.str.contains(r'SHA256=38bb9751a3a1f072d518afe6921a66ee6d5cf6d25bc50af49e1925f20d75d4d7', case=False) | Hashes.str.contains(r'SHA256=d80714d87529bb0bc7abcc12d768c43a697fbca59741c38fa0b46900da4db30e', case=False) | Hashes.str.contains(r'SHA256=83f7be0a13c1fccf024c31da5c68c0ea1decf4f48fc39d6e4fd324bbe789ae8a', case=False) | Hashes.str.contains(r'SHA256=1f4d4db4abe26e765a33afb2501ac134d14cadeaa74ae8a0fae420e4ecf58e0c', case=False) | Hashes.str.contains(r'SHA256=ea85bbe63d6f66f7efee7007e770af820d57f914c7f179c5fee3ef2845f19c41', case=False) | Hashes.str.contains(r'SHA256=42851a01469ba97cdc38939b10cf9ea13237aa1f6c37b1ac84904c5a12a81fa0', case=False) | Hashes.str.contains(r'SHA256=1e9ec6b3e83055ae90f3664a083c46885c506d33de5e2a49f5f1189e89fa9f0a', case=False) | Hashes.str.contains(r'SHA256=a59c40e7470b7003e8adfee37c77606663e78d7e3f2ebb8d60910af19924d8df', case=False) | Hashes.str.contains(r'SHA256=2203bd4731a8fdc2a1c60e975fd79fd5985369e98a117df7ee43c528d3c85958', case=False) | Hashes.str.contains(r'SHA256=5f6547e9823f94c5b94af1fb69a967c4902f72b6e0c783804835e6ce27f887b0', case=False) | Hashes.str.contains(r'SHA256=47f08f7d30d824a8f4bb8a98916401a37c0fd8502db308aba91fe3112b892dcc', case=False) | Hashes.str.contains(r'SHA256=15c53eb3a0ea44bbd2901a45a6ebeae29bb123f9c1115c38dfb2cdbec0642229', case=False) | Hashes.str.contains(r'SHA256=d44848d3e845f8293974e8b621b72a61ec00c8d3cf95fcf41698bbbd4bdf5565', case=False) | Hashes.str.contains(r'SHA256=f15ae970e222ce06dbf3752b223270d0e726fb78ebec3598b4f8225b5a0880b1', case=False) | Hashes.str.contains(r'SHA256=a5a50449e2cc4d0dbc80496f757935ae38bf8a1bebdd6555a3495d8c219df2ad', case=False) | Hashes.str.contains(r'SHA256=37c637a74bf20d7630281581a8fae124200920df11ad7cd68c14c26cc12c5ec9', case=False) | Hashes.str.contains(r'SHA256=a97b404aae301048e0600693457c3320d33f395e9312938831bc5a0e808f2e67', case=False) | Hashes.str.contains(r'SHA256=d45600f3015a54fa2c9baa7897edbd821aeea2532e6aadb8065415ed0a23d0c2', case=False) | Hashes.str.contains(r'SHA256=c64d4ac416363c7a1aa828929544d1c1d78cf032b39769943b851cfc4c0faafc', case=False) | Hashes.str.contains(r'SHA256=c725919e6357126d512c638f993cf572112f323da359645e4088f789eb4c7b8c', case=False) | Hashes.str.contains(r'SHA256=69e3fda487a5ec2ec0f67b7d79a5a836ff0036497b2d1aec514c67d2efa789b2', case=False) | Hashes.str.contains(r'SHA256=55fee54c0d0d873724864dc0b2a10b38b7f40300ee9cae4d9baaf8a202c4049a', case=False) | Hashes.str.contains(r'SHA256=d1463b7fec911c10a8c96d84eb7c0f9e95fa488d826647a591a38c0593f812a4', case=False) | Hashes.str.contains(r'SHA256=2a652de6b680d5ad92376ad323021850dab2c653abf06edf26120f7714b8e08a', case=False) | Hashes.str.contains(r'SHA256=c35f3a9da8e81e75642af20103240618b641d39724f9df438bf0f361122876b0', case=False) | Hashes.str.contains(r'SHA256=ae5cc99f3c61c86c7624b064fd188262e0160645c1676d231516bf4e716a22d3', case=False) | Hashes.str.contains(r'SHA256=6cb51ae871fbd5d07c5aad6ff8eea43d34063089528603ca9ceb8b4f52f68ddc', case=False) | Hashes.str.contains(r'SHA256=f40435488389b4fb3b945ca21a8325a51e1b5f80f045ab019748d0ec66056a8b', case=False) | Hashes.str.contains(r'SHA256=7aaf2aa194b936e48bc90f01ee854768c8383c0be50cfb41b346666aec0cf853', case=False) | Hashes.str.contains(r'SHA256=6f1fc8287dd8d724972d7a165683f2b2ad6837e16f09fe292714e8e38ecd1e38', case=False) | Hashes.str.contains(r'SHA256=950a4c0c772021cee26011a92194f0e58d61588f77f2873aa0599dff52a160c9', case=False) | Hashes.str.contains(r'SHA256=3f3684a37b2645fa6827943d9812ffc2d83e89e962935b29874bec7c3714a06f', case=False) | Hashes.str.contains(r'SHA256=7fc01f25c4c18a6c539cda38fdbf34b2ff02a15ffd1d93a7215e1f48f76fb3be', case=False) | Hashes.str.contains(r'SHA256=6b71b7f86e41540a82d7750a698e0386b74f52962b879cbb46f17935183cd2c7', case=False) | Hashes.str.contains(r'SHA256=18f306b6edcfacd33b7b244eaecdd0986ef342f0d381158844d1f0ee1ac5c8d7', case=False) | Hashes.str.contains(r'SHA256=99f4994a0e5bd1bf6e3f637d3225c69ff4cd620557e23637533e7f18d7d6cba1', case=False) | Hashes.str.contains(r'SHA256=7cb497abc44aad09a38160d6a071db499e05ff5871802ccc45d565d242026ee7', case=False) | Hashes.str.contains(r'SHA256=88992ddcb9aaedb8bfcc9b4354138d1f7b0d7dddb9e7fcc28590f27824bee5c3', case=False) | Hashes.str.contains(r'SHA256=4da08c0681fbe028b60a1eaf5cb8890bd3eba4d0e6a8b976495ddcd315e147ba', case=False) | Hashes.str.contains(r'SHA256=bda99629ec6c522c3efcbcc9ca33688d31903146f05b37d0d3b43db81bfb3961', case=False) | Hashes.str.contains(r'SHA256=46d1dc89cc5fa327e7adf3e3d6d498657240772b85548c17d2e356aac193dd28', case=False) | Hashes.str.contains(r'SHA256=73c03b01d5d1eb03ec5cb5a443714b12fa095cc4b09ddc34671a92117ae4bb3a', case=False) | Hashes.str.contains(r'SHA256=f37d609ea1f06660d970415dd3916c4c153bb5940bf7d2beb47fa34e8a8ffbfc', case=False) | Hashes.str.contains(r'SHA256=bc13adeb6bf62b1e10ef41205ef92382e6c18d6a20669d288a0b11058e533d63', case=False) | Hashes.str.contains(r'SHA256=da11e9598eef033722b97873d1c046270dd039d0e3ee6cd37911e2dc2eb2608d', case=False) | Hashes.str.contains(r'SHA256=922d23999a59ce0d84b479170fd265650bc7fae9e7d41bf550d8597f472a3832', case=False) | Hashes.str.contains(r'SHA256=8fe9828bea83adc8b1429394db7a556a17f79846ad0bfb7f242084a5c96edf2a', case=False) | Hashes.str.contains(r'SHA256=bb0742036c82709e02f25f98a9ff37c36a8c228bcaa98e40629fac8cde95b421', case=False) | Hashes.str.contains(r'SHA256=7227377a47204f8e2ff167eee54b4b3545c0a19e3727f0ec59974e1a904f4a96', case=False) | Hashes.str.contains(r'SHA256=6071db01b50c658cf78665c24f1d21f21b4a12d16bfcfaa6813bf6bbc4d0a1e8', case=False) | Hashes.str.contains(r'SHA256=49ed27460730b62403c1d2e4930573121ab0c86c442854bc0a62415ca445a810', case=False) | Hashes.str.contains(r'SHA256=1fac3fab8ea2137a7e81a26de121187bf72e7d16ffa3e9aec3886e2376d3c718', case=False) | Hashes.str.contains(r'SHA256=11a4b08e70ebc25a1d4c35ed0f8ef576c1424c52b580115b26149bd224ffc768', case=False) | Hashes.str.contains(r'SHA256=6e0aa67cfdbe27a059cbd066443337f81c5b6d37444d14792d1c765d9d122dcf', case=False) | Hashes.str.contains(r'SHA256=5449e4dd1b75a7d52922c30baeca0ca8e32fe2210d1e72af2a2f314a5c2268fb', case=False) | Hashes.str.contains(r'SHA256=54488a8c7da53222f25b6ed74b0dedc55d00f5fa80f4eaf6daac28f7c3528876', case=False) | Hashes.str.contains(r'SHA256=98ec7cc994d26699f5d26103a0aeb361128cff3c2c4d624fc99126540e23e97e', case=False) | Hashes.str.contains(r'SHA256=65008817eb97635826a8708a6411d7b50f762bab81304e457119d669382944c3', case=False) | Hashes.str.contains(r'SHA256=f596e64f4c5d7c37a00493728d8756b243cfdc11e3372d6d6dfeffc13c9ab960', case=False) | Hashes.str.contains(r'SHA256=de8f8006d8ee429b5f333503defa54b25447f4ed6aeade5e4219e23f3473ef1c', case=False) | Hashes.str.contains(r'SHA256=b1d96233235a62dbb21b8dbe2d1ae333199669f67664b107bff1ad49b41d9414', case=False) | Hashes.str.contains(r'SHA256=4ab41816abbf14d59e75b7fad49e2cb1c1feb27a3cb27402297a2a4793ff9da7', case=False) | Hashes.str.contains(r'SHA256=9f1229cd8dd9092c27a01f5d56e3c0d59c2bb9f0139abf042e56f343637fda33', case=False) | Hashes.str.contains(r'SHA256=b47be212352d407d0ef7458a7161c66b47c2aec8391dd101df11e65728337a6a', case=False) | Hashes.str.contains(r'SHA256=1cedd5815bb6e20d3697103cfc0275f5015f469e6007e8cac16892c97731c695', case=False) | Hashes.str.contains(r'SHA256=01e024cb14b34b6d525c642a710bfa14497ea20fd287c39ba404b10a8b143ece', case=False) | Hashes.str.contains(r'SHA256=b0dcdbdc62949c981c4fc04ccea64be008676d23506fc05637d9686151a4b77f', case=False) | Hashes.str.contains(r'SHA256=7a2cd1dc110d014165c001ce65578da0c0c8d7d41cc1fa44f974e8a82296fc25', case=False) | Hashes.str.contains(r'SHA256=6f806a9de79ac2886613c20758546f7e9597db5a20744f7dd82d310b7d6457d0', case=False) | Hashes.str.contains(r'SHA256=f84f8173242b95f9f3c4fea99b5555b33f9ce37ca8188b643871d261cb081496', case=False) | Hashes.str.contains(r'SHA256=2d2c7ee9547738a8a676ab785c151e8b48ed40fe7cf6174650814c7f5f58513b', case=False) | Hashes.str.contains(r'SHA256=0fc0644085f956706ea892563309ba72f0986b7a3d4aa9ae81c1fa1c35e3e2d3', case=False) | Hashes.str.contains(r'SHA256=ad8fd8300ed375e22463cea8767f68857d9a3b0ff8585fbeb60acef89bf4a7d7', case=False) | Hashes.str.contains(r'SHA256=a7860e110f7a292d621006b7208a634504fb5be417fd71e219060381b9a891e6', case=False) | Hashes.str.contains(r'SHA256=2f60536b25ba8c9014e4a57d7a9a681bd3189fa414eea88c256d029750e15cae', case=False) | Hashes.str.contains(r'SHA256=b583414fcee280128788f7b39451c511376fe821f455d4f3702795e96d560704', case=False) | Hashes.str.contains(r'SHA256=63af3fdb1e85949c8adccb43f09ca4556ae258b363a99ae599e1e834d34c8670', case=False) | Hashes.str.contains(r'SHA256=4880f40f2e557cff38100620b9aa1a3a753cb693af16cd3d95841583edcb57a8', case=False) | Hashes.str.contains(r'SHA256=3cb75429944e60f6c820c7638adbf688883ad44951bca3f8912428afe72bc134', case=False) | Hashes.str.contains(r'SHA256=131d5490ceb9a5b2324d8e927fea5becfc633015661de2f4c2f2375a3a3b64c6', case=False) | Hashes.str.contains(r'SHA256=e0cb07a0624ddfacaa882af49e3783ae02c9fbd0ab232541a05a95b4a8abd8ef', case=False) | Hashes.str.contains(r'SHA256=8c748ae5dcc10614cc134064c99367d28f3131d1f1dda0c9c29e99279dc1bdd9', case=False) | Hashes.str.contains(r'SHA256=b9a4e40a5d80fedd1037eaed958f9f9efed41eb01ada73d51b5dcd86e27e0cbf', case=False) | Hashes.str.contains(r'SHA256=d0e25b879d830e4f867b09d6540a664b6f88bad353cd14494c33b31a8091f605', case=False) | Hashes.str.contains(r'SHA256=ba40b1fc798c2f78165e78997b4baf3d99858ee39a372ca6fbc303057793e50d', case=False) | Hashes.str.contains(r'SHA256=76660e91f1ff3cb89630df5af4fe09de6098d09baa66b1a130c89c3c5edd5b22', case=False) | Hashes.str.contains(r'SHA256=0e8595217f4457757bed0e3cdea25ea70429732b173bba999f02dc85c7e06d02', case=False) | Hashes.str.contains(r'SHA256=c8926e31be2d1355e542793af8ff9ccc4d1d60cae40c9564b2400dd4e1090bda', case=False) | Hashes.str.contains(r'SHA256=3384f4a892f7aa72c43280ff682d85c8e3936f37a68d978d307a9461149192de', case=False) | Hashes.str.contains(r'SHA256=0a89a6ab2fca486480b6e3dacf392d6ce0c59a5bdb4bcd18d672feb4ebb0543c', case=False) | Hashes.str.contains(r'SHA256=dee384604d2d0018473941acbefe553711ded7344a4932daeffb876fe2fa0233', case=False) | Hashes.str.contains(r'SHA256=478d855b648ef4501d3b08b3b10e94076ac67546b0ce86b454324f1bf9a78aa0', case=False) | Hashes.str.contains(r'SHA256=423f052690b6b523502931151dfcc63530e3bd9d79680f9b5ac033b23b5c6f18', case=False) | Hashes.str.contains(r'SHA256=f8886a9c759e0426e08d55e410b02c5b05af3c287b15970175e4874316ffaf13', case=False) | Hashes.str.contains(r'SHA256=ae71f40f06edda422efcd16f3a48f5b795b34dd6d9bb19c9c8f2e083f0850eb7', case=False) | Hashes.str.contains(r'SHA256=7cc9ba2df7b9ea6bb17ee342898edd7f54703b93b6ded6a819e83a7ee9f938b4', case=False) | Hashes.str.contains(r'SHA256=cdfbe62ef515546f1728189260d0bdf77167063b6dbb77f1db6ed8b61145a2bc', case=False) | Hashes.str.contains(r'SHA256=a855b6ec385b3369c547a3c54e88a013dd028865aba0f3f08be84cdcbaa9a0f6', case=False) | Hashes.str.contains(r'SHA256=d59cc3765a2a9fa510273dded5a9f9ac5190f1edf24a00ffd6a1bbd1cb34c757', case=False) | Hashes.str.contains(r'SHA256=11832c345e9898c4f74d3bf8f126cf84b4b1a66ad36135e15d103dbf2ac17359', case=False) | Hashes.str.contains(r'SHA256=1a450ae0c9258ab0ae64f126f876b5feed63498db729ec61d06ed280e6c46f67', case=False) | Hashes.str.contains(r'SHA256=2695390a8a7448390fe383beb1eee06d582202683f0273d6e72ef39a8cf709e1', case=False) | Hashes.str.contains(r'SHA256=ffd1aef19646ffed09b56a2ace4fc8cdf5b2f714fcca1e7ffb82256264c94b18', case=False) | Hashes.str.contains(r'SHA256=2101d5e80e92c55ecfd8c24fcf2202a206a4fd70195a1378f88c4cc04d336f22', case=False) | Hashes.str.contains(r'SHA256=b9e0c2a569ab02742fa3a37846310a1d4e46ba2bfd4f80e16f00865fc62690cb', case=False) | Hashes.str.contains(r'SHA256=19696fb0db3fcae22f705ae1eb1e9f1151c823f3ff5d8857e90f2a4a6fdc5758', case=False) | Hashes.str.contains(r'SHA256=ff9623317287358440ec67da9ba79994d9b17b99ffdd709ec836478fe1fc22a5', case=False) | Hashes.str.contains(r'SHA256=a188760f1bf36584a2720014ca982252c6bcd824e7619a98580e28be6090dccc', case=False) | Hashes.str.contains(r'SHA256=442f12adebf7cb166b19e8aead2b0440450fd1f33f5db384a39776bb2656474a', case=False) | Hashes.str.contains(r'SHA256=58a74dceb2022cd8a358b92acd1b48a5e01c524c3b0195d7033e4bd55eff4495', case=False) | Hashes.str.contains(r'SHA256=600a2119657973112025db3c0eeab2e69d528bccfeed75f40c6ef50b059ec8a0', case=False) | Hashes.str.contains(r'SHA256=0f30ecd4faec147a2335a4fc031c8a1ac9310c35339ebeb651eb1429421951a0', case=False) | Hashes.str.contains(r'SHA256=94c226a530dd3cd8d911901f702f3dab8200d1d4fdc73fcb269f7001f4e66915', case=False) | Hashes.str.contains(r'SHA256=175eed7a4c6de9c3156c7ae16ae85c554959ec350f1c8aaa6dfe8c7e99de3347', case=False) | Hashes.str.contains(r'SHA256=47c490cc83a17ff36a1a92e08d63e76edffba49c9577865315a6c9be6ba80a7d', case=False) | Hashes.str.contains(r'SHA256=a66b4420fa1df81a517e2bbea1a414b57721c67a4aa1df1967894f77e81d036e', case=False) | Hashes.str.contains(r'SHA256=c6a5663f20e5cee2c92dee43a0f2868fb0af299f842410f4473dcde7abcb6413', case=False) | Hashes.str.contains(r'SHA256=082d4d4d4ba1bda5e1599bd24e930ae9f000e7d12b00f7021cca90a4600ea470', case=False) | Hashes.str.contains(r'SHA256=84739539aa6a9c9cb3c48c53f9399742883f17f24e081ebfa7bfaaf59f3ed451', case=False) | Hashes.str.contains(r'SHA256=64dddd5ac53fe2c9de2b317c09034d1bccaf21d6c03ccfde3518e5aa3623dd66', case=False) | Hashes.str.contains(r'SHA256=a899b659b08fbae30b182443be8ffb6a6471c1d0497b52293061754886a937a3', case=False) | Hashes.str.contains(r'SHA256=2a6212f3b68a6f263e96420b3607b31cfdfe51afff516f3c87d27bf8a89721e8', case=False) | Hashes.str.contains(r'SHA256=bb50818a07b0eb1bd317467139b7eb4bad6cd89053fecdabfeae111689825955', case=False) | Hashes.str.contains(r'SHA256=9399f35b90f09b41f9eeda55c8e37f6d1cb22de6e224e54567d1f0865a718727', case=False) | Hashes.str.contains(r'SHA256=7196187fb1ef8d108b380d37b2af8efdeb3ca1f6eefd37b5dc114c609147216d', case=False) | Hashes.str.contains(r'SHA256=96df0b01eeba3e6e50759d400df380db27f0d0e34812d0374d22ac1758230452', case=False) | Hashes.str.contains(r'SHA256=df4c02beb039d15ff0c691bbc3595c9edfc1d24e783c8538a859bc5ea537188d', case=False) | Hashes.str.contains(r'SHA256=3c95ebf3f1a87f67d2861dbd1c85dc26c118610af0c9fbf4180428e653ac3e50', case=False) | Hashes.str.contains(r'SHA256=119c48b79735fda0ecd973d77d9bdc6b329960caed09b38ab454236ca039d280', case=False) | Hashes.str.contains(r'SHA256=3c5d7069f85ec1d6f58147431f88c4d7c48df73baf94ffdefd664f2606baf09c', case=False) | Hashes.str.contains(r'SHA256=0c42fe45ffa9a9c36c87a7f01510a077da6340ffd86bf8509f02c6939da133c5', case=False) | Hashes.str.contains(r'SHA256=cf3a7d4285d65bf8688215407bce1b51d7c6b22497f09021f0fce31cbeb78986', case=False) | Hashes.str.contains(r'SHA256=41765151df57125286b398cc107ff8007972f4653527f876d133dac1548865d6', case=False) | Hashes.str.contains(r'SHA256=f877296e8506e6a1acbdacdc5085b18c6842320a2775a329d286bac796f08d54', case=False) | Hashes.str.contains(r'SHA256=d884ca8cc4ef1826ca3ab03eb3c2d8f356ba25f2d20db0a7d9fc251c565be7f3', case=False) | Hashes.str.contains(r'SHA256=453be8f63cc6b116e2049659e081d896491cf1a426e3d5f029f98146a3f44233', case=False) | Hashes.str.contains(r'SHA256=7c0f77d103015fc29379ba75d133dc3450d557b0ba1f7495c6b43447abdae230', case=False) | Hashes.str.contains(r'SHA256=39336e2ce105901ab65021d6fdc3932d3d6aab665fe4bd55aa1aa66eb0de32f0', case=False) | Hashes.str.contains(r'SHA256=910aa4685c735d8c07662aa04fafec463185699ad1a0cd1967b892fc33ec6c3c', case=False) | Hashes.str.contains(r'SHA256=6d2cc7e1d95bb752d79613d0ea287ea48a63fb643dcb88c12b516055da56a11d', case=False) | Hashes.str.contains(r'SHA256=89b0017bc30cc026e32b758c66a1af88bd54c6a78e11ec2908ff854e00ac46be', case=False) | Hashes.str.contains(r'SHA256=05c15a75d183301382a082f6d76bf3ab4c520bf158abca4433d9881134461686', case=False) | Hashes.str.contains(r'SHA256=a6c05b10a5c090b743a61fa225b09e390e2dd2bd6cb4fd96b987f1e0d3f2124a', case=False) | Hashes.str.contains(r'SHA256=ce231637422709d927fb6fa0c4f2215b9c0e3ebbd951fb2fa97b8e64da479b96', case=False) | Hashes.str.contains(r'SHA256=26ecd3cea139218120a9f168c8c0c3b856e0dd8fb2205c2a4bcb398f5f35d8dd', case=False) | Hashes.str.contains(r'SHA256=ec1307356828426d60eab78ffb5fc48a06a389dea6e7cc13621f1fa82858a613', case=False) | Hashes.str.contains(r'SHA256=fed0fe2489ae807913be33827b3b11359652a127e33b64464cc570c05abd0d17', case=False) | Hashes.str.contains(r'SHA256=37d999df20c1a0b8ffaef9484c213a97b9987ed308b4ba07316a6013fbd31c60', case=False) | Hashes.str.contains(r'SHA256=72c0d2d699d0440db17cb7cbbc06a253eaafd21465f14bb0fed8b85ae73153d1', case=False) | Hashes.str.contains(r'SHA256=49329fa09f584d1960b09c1b15df18c0bc1c4fdb90bf48b6b5703e872040b668', case=False) | Hashes.str.contains(r'SHA256=9dab4b6fddc8e1ec0a186aa8382b184a5d52cfcabaaf04ff9e3767021eb09cf4', case=False) | Hashes.str.contains(r'SHA256=b1e4455499c6a90ba9a861120a015a6b6f17e64479462b869ad0f05edf6552de', case=False) | Hashes.str.contains(r'SHA256=8cb62c5d41148de416014f80bd1fd033fd4d2bd504cb05b90eeb6992a382d58f', case=False) | Hashes.str.contains(r'SHA256=0aafa9f47acf69d46c9542985994ff5321f00842a28df2396d4a3076776a83cb', case=False) | Hashes.str.contains(r'SHA256=50aa2b3a762abb1306fa003c60de3c78e89ea5d29aab8a9c6479792d2be3c2d7', case=False) | Hashes.str.contains(r'SHA256=b9b3878ddc5dfb237d38f8d25067267870afd67d12a330397a8853209c4d889c', case=False) | Hashes.str.contains(r'SHA256=6c6c5e35accc37c928d721c800476ccf4c4b5b06a1b0906dc5ff4df71ff50943', case=False) | Hashes.str.contains(r'SHA256=61e7f9a91ef25529d85b22c39e830078b96f40b94d00756595dded9d1a8f6629', case=False) | Hashes.str.contains(r'SHA256=2ef7df384e93951893b65500dac6ee09da6b8fe9128326caad41b8be4da49a1e', case=False) | Hashes.str.contains(r'SHA256=d998ea6d0051e17c1387c9f295b1c79bacb2f61c23809903445f60313d36c7fd', case=False) | Hashes.str.contains(r'SHA256=8ef0ad86500094e8fa3d9e7d53163aa6feef67c09575c169873c494ed66f057f', case=False) | Hashes.str.contains(r'SHA256=7ec93f34eb323823eb199fbf8d06219086d517d0e8f4b9e348d7afd41ec9fd5d', case=False) | Hashes.str.contains(r'SHA256=e5b0772be02e2bc807804874cf669e97aa36f5aff1f12fa0a631a3c7b4dd0dc8', case=False) | Hashes.str.contains(r'SHA256=29a90ae1dcee66335ece4287a06482716530509912be863c85a2a03a6450a5b6', case=False) | Hashes.str.contains(r'SHA256=0909005d625866ef8ccd8ae8af5745a469f4f70561b644d6e38b80bccb53eb06', case=False) | Hashes.str.contains(r'SHA256=ed3448152bcacf20d7c33e9194c89d5304dee3fba16034dd0cc03a3374e63c91', case=False) | Hashes.str.contains(r'SHA256=0cf84400c09582ee2911a5b1582332c992d1cd29fcf811cb1dc00fcd61757db0', case=False) | Hashes.str.contains(r'SHA256=b1920889466cd5054e3ab6433a618e76c6671c3e806af8b3084c77c0e7648cbe', case=False) | Hashes.str.contains(r'SHA256=28999af32b55ddb7dcfc26376a244aa2fe297233ce7abe4919a1aef2f7e2cee7', case=False) | Hashes.str.contains(r'SHA256=adc10de960f40fa9f6e28449748250fa9ddfd331115b77a79809a50c606753ee', case=False) | Hashes.str.contains(r'SHA256=48b1344e45e4de4dfb74ef918af5e0e403001c9061018e703261bbd72dc30548', case=False) | Hashes.str.contains(r'SHA256=87b4c5b7f653b47c9c3bed833f4d65648db22481e9fc54aa4a8c6549fa31712b', case=False) | Hashes.str.contains(r'SHA256=54bf602a6f1baaec5809a630a5c33f76f1c3147e4b05cecf17b96a93b1d41dca', case=False) | Hashes.str.contains(r'SHA256=dec8a933dba04463ed9bb7d53338ff87f2c23cfb79e0e988449fc631252c9dcc', case=False) | Hashes.str.contains(r'SHA256=b4d47ea790920a4531e3df5a4b4b0721b7fea6b49a35679f0652f1e590422602', case=False) | Hashes.str.contains(r'SHA256=df0dcfb3971829af79629efd036b8e1c6e2127481b3644ccc6e2ddd387489a15', case=False) | Hashes.str.contains(r'SHA256=fded693528f7e6ac1af253e0bd2726607308fdaa904f1e7242ed44e1c0b29ae8', case=False) | Hashes.str.contains(r'SHA256=45f42c5d874369d6be270ea27a5511efcca512aeac7977f83a51b7c4dee6b5ef', case=False) | Hashes.str.contains(r'SHA256=7e0124fcc7c95fdc34408cf154cb41e654dade8b898c71ad587b2090b1da30d7', case=False) | Hashes.str.contains(r'SHA256=3d9e83b189fcf5c3541c62d1f54a0da0a4e5b62c3243d2989afc46644056c8e3', case=False) | Hashes.str.contains(r'SHA256=8edab185e765f9806fa57153db1ede00e68270d2351443ee1de30674eca8d9b6', case=False) | Hashes.str.contains(r'SHA256=52a90fd1546c068b92add52c29fbb8a87d472a57e609146bbcb34862f9dcec15', case=False) | Hashes.str.contains(r'SHA256=8b688dd055ead2c915a139598c8db7962b42cb6e744eaacfcb338c093fc1f4e7', case=False) | Hashes.str.contains(r'SHA256=c08581e3e444849729c5b956d0d6030080553d0bc6e5ae7e9a348d45617b9746', case=False) | Hashes.str.contains(r'SHA256=77da3e8c5d70978b287d433ae1e1236c895b530a8e1475a9a190cdcc06711d2f', case=False) | Hashes.str.contains(r'SHA256=64f9e664bc6d4b8f5f68616dd50ae819c3e60452efd5e589d6604b9356841b57', case=False) | Hashes.str.contains(r'SHA256=3c0a36990f7eef89b2d5f454b6452b6df1304609903f31f475502e4050241dd8', case=False) | Hashes.str.contains(r'SHA256=8cfd5b2102fbc77018c7fe6019ec15f07da497f6d73c32a31f4ba07e67ec85d9', case=False) | Hashes.str.contains(r'SHA256=5a0b10a9e662a0b0eeb951ffd2a82cc71d30939a78daebd26b3f58bb24351ac9', case=False) | Hashes.str.contains(r'SHA256=c7079033659ac9459b3b7ab2510805832db2e2a70fe9beb1a6e13c1f51890d88', case=False) | Hashes.str.contains(r'SHA256=bbbeb5020b58e6942ec7dec0d1d518e95fc12ddae43f54ef0829d3393c6afd63', case=False) | Hashes.str.contains(r'SHA256=38535a0e9fc0684308eb5d6aa6284669bc9743f11cb605b79883b8c13ef906ad', case=False) | Hashes.str.contains(r'SHA256=65deb5dca18ee846e7272894f74d84d9391bbe260c22f24a65ab37d48bd85377', case=False) | Hashes.str.contains(r'SHA256=7f5dc63e5742096e4accaca39ae77a2a2142b438c10f97860dee4054b51d3b35', case=False) | Hashes.str.contains(r'SHA256=263e8f1e20612849aea95272da85773f577fd962a7a6d525b53f43407aa7ad24', case=False) | Hashes.str.contains(r'SHA256=f0605dda1def240dc7e14efa73927d6c6d89988c01ea8647b671667b2b167008', case=False) | Hashes.str.contains(r'SHA256=bc453d428fc224960fa8cbbaf90c86ce9b4c8c30916ad56e525ab19b6516424e', case=False) | Hashes.str.contains(r'SHA256=df96d844b967d404e58a12fc57487abc24cd3bd1f8417acfe1ce1ee4a0b0b858', case=False) | Hashes.str.contains(r'SHA256=1d0397c263d51e9fc95bcc8baf98d1a853e1c0401cd0e27c7bf5da3fba1c93a8', case=False) | Hashes.str.contains(r'SHA256=159dcf37dc723d6db2bad46ed6a1b0e31d72390ec298a5413c7be318aef4a241', case=False) | Hashes.str.contains(r'SHA256=d6827cd3a8f273a66ecc33bb915df6c7dea5cc1b8134b0c348303ef50db33476', case=False) | Hashes.str.contains(r'SHA256=cbf74bed1a4d3d5819b7c50e9d91e5760db1562d8032122edac6f0970f427183', case=False) | Hashes.str.contains(r'SHA256=2b188ae51ec3be082e4d08f7483777ec5e66d30e393a4e9b5b9dc9af93d1f09b', case=False) | Hashes.str.contains(r'SHA256=033c4634ab1a43bc3247384864f3380401d3b4006a383312193799dded0de4c7', case=False) | Hashes.str.contains(r'SHA256=0ebaef662b14410c198395b13347e1d175334ec67919709ad37d65eba013adff', case=False) | Hashes.str.contains(r'SHA256=1228d0b6b4f907384346f64e918cc28021fe1cd7d4e39687bca34a708998261a', case=False) | Hashes.str.contains(r'SHA256=2d83ccb1ad9839c9f5b3f10b1f856177df1594c66cbbc7661677d4b462ebf44d', case=False) | Hashes.str.contains(r'SHA256=ae42afa9be9aa6f6a5ae09fa9c05cd2dfb7861dc72d4fd8e0130e5843756c471', case=False) | Hashes.str.contains(r'SHA256=2121a2bb8ebbf2e6e82c782b6f3c6b7904f686aa495def25cf1cf52a42e16109', case=False) | Hashes.str.contains(r'SHA256=368a9c2b6f12adbe2ba65181fb96f8b0d2241e4eae9f3ce3e20e50c3a3cc9aa1', case=False) | Hashes.str.contains(r'SHA256=070ff602cccaaef9e2b094e03983fd7f1bf0c0326612eb76593eabbf1bda9103', case=False) | Hashes.str.contains(r'SHA256=89108a15f009b285db4ef94250b889d5b11b96b4aa7b190784a6d1396e893e10', case=False) | Hashes.str.contains(r'SHA256=4744df6ac02ff0a3f9ad0bf47b15854bbebb73c936dd02f7c79293a2828406f6', case=False) | Hashes.str.contains(r'SHA256=f77fe6b1e0e913ac109335a8fa2ac4961d35cbbd50729936059aba8700690a9e', case=False) | Hashes.str.contains(r'SHA256=dd4a1253d47de14ef83f1bc8b40816a86ccf90d1e624c5adf9203ae9d51d4097', case=False) | Hashes.str.contains(r'SHA256=7f190f6e5ab0edafd63391506c2360230af4c2d56c45fc8996a168a1fc12d457', case=False) | Hashes.str.contains(r'SHA256=5bf3985644308662ebfa2fbcc11fb4d3e2a0c817ad3da1a791020f8c8589ebc8', case=False) | Hashes.str.contains(r'SHA256=a19fc837ca342d2db43ee8ad7290df48a1b8b85996c58a19ca3530101862a804', case=False) | Hashes.str.contains(r'SHA256=f8430bdc6fd01f42217d66d87a3ef6f66cb2700ebb39c4f25c8b851858cc4b35', case=False) | Hashes.str.contains(r'SHA256=3e1d47a497babbfd1c83905777b517ec87c65742bee7eb57a2273eca825d2272', case=False) | Hashes.str.contains(r'SHA256=ed2f33452ec32830ffef2d5dc832985db9600c306ed890c47f3f33ccbb335c39', case=False) | Hashes.str.contains(r'SHA256=3390919bb28d5c36cc348f9ef23be5fa49bfd81263eb7740826e4437cbe904cd', case=False) | Hashes.str.contains(r'SHA256=39cfde7d401efce4f550e0a9461f5fc4d71fa07235e1336e4f0b4882bd76550e', case=False) | Hashes.str.contains(r'SHA256=29e0062a017a93b2f2f5207a608a96df4d554c5de976bd0276c2590a03bd3e94', case=False) | Hashes.str.contains(r'SHA256=0ae8d1dd56a8a000ced74a627052933d2e9bff31d251de185b3c0c5fc94a44db', case=False) | Hashes.str.contains(r'SHA256=2b120de80a5462f8395cfb7153c86dfd44f29f0776ea156ec4a34fa64e5c4797', case=False) | Hashes.str.contains(r'SHA256=d5586dc1e61796a9ae5e5d1ced397874753056c3df2eb963a8916287e1929a71', case=False) | Hashes.str.contains(r'SHA256=6945077a6846af3e4e2f6a2f533702f57e993c5b156b6965a552d6a5d63b7402', case=False) | Hashes.str.contains(r'SHA256=2298e838e3c015aedfb83ab18194a2503fe5764a862c294c8b39c550aab2f08e', case=False) | Hashes.str.contains(r'SHA256=61befeef14783eb0fed679fca179d2f5c33eb2dcbd40980669ca2ebeb3bf11cf', case=False) | Hashes.str.contains(r'SHA256=767ef5c831f92d92f2bfc3e6ea7fd76d11999eeea24cb464fd62e73132ed564b', case=False) | Hashes.str.contains(r'SHA256=dba8db472e51edd59f0bbaf4e09df71613d4dd26fd05f14a9bc7e3fc217a78aa', case=False) | Hashes.str.contains(r'SHA256=f85784fa8e7a7ec86cb3fe76435802f6bb82256e1824ed7b5d61bf075f054573', case=False) | Hashes.str.contains(r'SHA256=797c1f883d90d25e7fd553624bb16bfd5db24c2658aa0c3c51c715d5833c10fd', case=False) | Hashes.str.contains(r'SHA256=591bd5e92dfa0117b3daa29750e73e2db25baa717c31217539d30ffb1f7f3a52', case=False) | Hashes.str.contains(r'SHA256=cfc5c585dd4e592dd1a08887ded28b92d9a5820587b6f4f8fa4f56d60289259b', case=False) | Hashes.str.contains(r'SHA256=0296e2ce999e67c76352613a718e11516fe1b0efc3ffdb8918fc999dd76a73a5', case=False) | Hashes.str.contains(r'SHA256=8f68ca89910ebe9da3d02ec82d935de1814d79c44f36cd30ea02fa49ae488f00', case=False) | Hashes.str.contains(r'SHA256=d9a3dc47699949c8ec0c704346fb2ee86ff9010daa0dbac953cfa5f76b52fcd1', case=False) | Hashes.str.contains(r'SHA256=15fb486b6b8c2a2f1b067f48fba10c2f164638fe5e6cee618fb84463578ecac9', case=False) | Hashes.str.contains(r'SHA256=572c545b5a95d3f4d8c9808ebeff23f3c62ed41910eb162343dd5338e2d6b0b4', case=False) | Hashes.str.contains(r'SHA256=65c26276cadda7a36f8977d1d01120edb5c3418be2317d501761092d5f9916c9', case=False) | Hashes.str.contains(r'SHA256=af1011c76a22af7be97a0b3e0ce11aca0509820c59fa7c8eeaaa1b2c0225f75a', case=False) | Hashes.str.contains(r'SHA256=91afa3de4b70ee26a4be68587d58b154c7b32b50b504ff0dc0babc4eb56578f4', case=False) | Hashes.str.contains(r'SHA256=5de78cf5f0b1b09e7145db84e91a2223c3ed4d83cceb3ef073c068cf88b9d444', case=False) | Hashes.str.contains(r'SHA256=7c731c0ea7f28671ab7787800db69739ea5cd6be16ea21045b4580cf95cbf73b', case=False) | Hashes.str.contains(r'SHA256=ada4e42bf5ef58ef1aad94435441003b1cc1fcaa5d38bfdbe1a3d736dc451d47', case=False) | Hashes.str.contains(r'SHA256=76fb4deaee57ef30e56c382c92abffe2cf616d08dbecb3368c8ee6b02e59f303', case=False) | Hashes.str.contains(r'SHA256=40da0adf588cbb2841a657239d92f24b111d62b173204b8102dd0e014932fe59', case=False) | Hashes.str.contains(r'SHA256=7277130afa0b1506998d7bc58567b0d83f52a27175f4c7c4a7186347095fceed', case=False) | Hashes.str.contains(r'SHA256=6c5c6c350c8dd4ca90a8cca0ed1eeca185ebc67b1100935c8f03eb3032aca388', case=False) | Hashes.str.contains(r'SHA256=862d0ff27bb086145a33b9261142838651b0d2e1403be321145e197600eb5015', case=False) | Hashes.str.contains(r'SHA256=775000c4083c8e4dcfc879d83fcd27b40b46820c9834ae4662861386a4d81fe9', case=False) | Hashes.str.contains(r'SHA256=125e4475a5437634cab529da9ea2ef0f4f65f89fb25a06349d731f283c27d9fe', case=False) | Hashes.str.contains(r'SHA256=8e88cb80328c3dbaa2752591692e74a2fae7e146d7d8aabc9b9ac9a6fe561e6c', case=False) | Hashes.str.contains(r'SHA256=08828990218ebb4415c1bb33fa2b0a009efd0784b18b3f7ecd3bc078343f7208', case=False) | Hashes.str.contains(r'SHA256=2e665962c827ce0adbd29fe6bcf09bbb1d7a7022075d162ff9b65d0af9794ac0', case=False) | Hashes.str.contains(r'SHA256=e51ec2876af3c9c3f1563987a9a35a10f091ea25ede16b1a34ba2648c53e9dfc', case=False) | Hashes.str.contains(r'SHA256=26e3bfef255efd052a84c3c43994c73222b14c95db9a4b1fc2e98f1a5cb26e43', case=False) | Hashes.str.contains(r'SHA256=deecbcd260849178de421d8e2f177dce5c63cf67a48abb23a0e3cf3aa3e00578', case=False) | Hashes.str.contains(r'SHA256=1f15fd9b81092a98fabcc4ac95e45cec2d9ff3874d2e3faac482f3e86edad441', case=False) | Hashes.str.contains(r'SHA256=dd0bd7b8fae8e8835ba09118a02a06a51e111fccbe16916414844aab91cfeed4', case=False) | Hashes.str.contains(r'SHA256=17942865680bd3d6e6633c90cc4bd692ae0951a8589dbe103c1e293b3067344d', case=False) | Hashes.str.contains(r'SHA256=3243aab18e273a9b9c4280a57aecef278e10bfff19abb260d7a7820e41739099', case=False) | Hashes.str.contains(r'SHA256=fc22977ff721b3d718b71c42440ee2d8a144f3fbc7755e4331ddd5bcc65158d2', case=False) | Hashes.str.contains(r'SHA256=909de5f21837ea2b13fdc4e5763589e6bdedb903f7c04e1d0b08776639774880', case=False) | Hashes.str.contains(r'SHA256=db0d425708ba908aedf5f8762d6fdca7636ae3a537372889446176c0237a2836', case=False) | Hashes.str.contains(r'SHA256=ecfc52a22e4a41bf53865b0e28309411c60af34a44e31a5c53cdc8c5733e8282', case=False) | Hashes.str.contains(r'SHA256=1b00d6e5d40b1b84ca63da0e99246574cdd2a533122bc83746f06c0d66e63a6e', case=False) | Hashes.str.contains(r'SHA256=30706f110725199e338e9cc1c940d9a644d19a14f0eb8847712cba4cacda67ab', case=False) | Hashes.str.contains(r'SHA256=7f84f009704bc36f0e97c7be3de90648a5e7c21b4f870e4f210514d4418079a0', case=False) | Hashes.str.contains(r'SHA256=cb9890d4e303a4c03095d7bc176c42dee1b47d8aa58e2f442ec1514c8f9e3cec', case=False) | Hashes.str.contains(r'SHA256=19d0fc91b70d7a719f7a28b4ad929f114bf1de94a4c7cba5ad821285a4485da0', case=False) | Hashes.str.contains(r'SHA256=3d8cfc9abea6d83dfea6da03260ff81be3b7b304321274f696ff0fdb9920c645', case=False) | Hashes.str.contains(r'SHA256=58c071cfe72e9ee867bba85cbd0abe72eb223d27978d6f0650d0103553839b59', case=False) | Hashes.str.contains(r'SHA256=34e0364a4952d914f23f271d36e11161fb6bb7b64aea22ff965a967825a4a4bf', case=False) | Hashes.str.contains(r'SHA256=07af8c5659ad293214364789df270c0e6d03d90f4f4495da76abc2d534c64d88', case=False) | Hashes.str.contains(r'SHA256=423d58265b22504f512a84faf787c1af17c44445ae68f7adcaa68b6f970e7bd5', case=False) | Hashes.str.contains(r'SHA256=f4ff679066269392f6b7c3ba6257fc60dd609e4f9c491b00e1a16e4c405b0b9b', case=False) | Hashes.str.contains(r'SHA256=ef1abc77f4000e68d5190f9e11025ea3dc1e6132103d4c3678e15a678de09f33', case=False) | Hashes.str.contains(r'SHA256=1afa03118f87b62c59a97617e595ebb26dde8dbdd16ee47ef3ddd1097c30ef6a', case=False) | Hashes.str.contains(r'SHA256=270547552060c6f4f5b2ebd57a636d5e71d5f8a9d4305c2b0fe5db0aa2f389cc', case=False) | Hashes.str.contains(r'SHA256=cfcf32f5662791f1f22a77acb6dddfbc970fe6e99506969b3ea67c03f67687ab', case=False) | Hashes.str.contains(r'SHA256=fa21e3d2bfb9fafddec0488852377fbb2dbdd6c066ca05bb5c4b6aa840fb7879', case=False) | Hashes.str.contains(r'SHA256=5b3705b47dc15f2b61ca3821b883b9cd114d83fcc3344d11eb1d3df495d75abe', case=False) | Hashes.str.contains(r'SHA256=31f4cfb4c71da44120752721103a16512444c13c2ac2d857a7e6f13cb679b427', case=False) | Hashes.str.contains(r'SHA256=7c79e5196c2f51d2ab16e40b9d5725a8bf6ae0aaa70b02377aedc0f4e93ca37f', case=False) | Hashes.str.contains(r'SHA256=09043c51719d4bf6405c9a7a292bb9bb3bcc782f639b708ddcc4eedb5e5c9ce9', case=False) | Hashes.str.contains(r'SHA256=9a95a70f68144980f2d684e96c79bdc93ebca1587f46afae6962478631e85d0c', case=False) | Hashes.str.contains(r'SHA256=d7c90cf3fdbbd2f40fe6a39ad0bb2a9a97a0416354ea84db3aeff6d925d14df8', case=False) | Hashes.str.contains(r'SHA256=2aa1b08f47fbb1e2bd2e4a492f5d616968e703e1359a921f62b38b8e4662f0c4', case=False) | Hashes.str.contains(r'SHA256=9ee33ffd80611a13779df6286c1e04d3c151f1e2f65e3d664a08997fcd098ef3', case=False) | Hashes.str.contains(r'SHA256=358ac54be252673841a1d65bfc2fb6d549c1a4c877fa7f5e1bfa188f30375d69', case=False) | Hashes.str.contains(r'SHA256=26c28746e947389856543837aa59a5b1f4697e5721a04d00aa28151a2659b097', case=False) | Hashes.str.contains(r'SHA256=4ec7af309a9359c332d300861655faeceb68bb1cd836dd66d10dd4fac9c01a28', case=False) | Hashes.str.contains(r'SHA256=1284a1462a5270833ec7719f768cdb381e7d0a9c475041f9f3c74fa8eea83590', case=False) | Hashes.str.contains(r'SHA256=defde359045213ae6ae278e2a92c5b4a46a74119902364c7957a38138e9c9bbd', case=False) | Hashes.str.contains(r'SHA256=4429f32db1cc70567919d7d47b844a91cf1329a6cd116f582305f3b7b60cd60b', case=False) | Hashes.str.contains(r'SHA256=d0e4d3e1f5d5942aaf2c72631e9490eecc4d295ee78c323d8fe05092e5b788eb', case=False) | Hashes.str.contains(r'SHA256=9fc29480407e5179aa8ea41682409b4ea33f1a42026277613d6484e5419de374', case=False) | Hashes.str.contains(r'SHA256=e7b79fe1377b3da749590c080d4d96e59e622b1013b2183b98c81baa8bf2fffe', case=False) | Hashes.str.contains(r'SHA256=a6c11d3bec2a94c40933ec1d3604cfe87617ba828b14f4cded6cfe85656debc0', case=False) | Hashes.str.contains(r'SHA256=47eaebc920ccf99e09fc9924feb6b19b8a28589f52783327067c9b09754b5e84', case=False) | Hashes.str.contains(r'SHA256=525d9b51a80ca0cd4c5889a96f857e73f3a80da1ffbae59851e0f51bdfb0b6cd', case=False) | Hashes.str.contains(r'SHA256=4ed2d2c1b00e87b926fb58b4ea43d2db35e5912975f4400aa7bd9f8c239d08b7', case=False) | Hashes.str.contains(r'SHA256=bd3cf8b9af255b5d4735782d3653be38578ff5be18846b13d05867a6159aaa53', case=False) | Hashes.str.contains(r'SHA256=84c5f6ddd9c90de873236205b59921caabb57ac6f7a506abbe2ce188833bbe51', case=False) | Hashes.str.contains(r'SHA256=32e1a8513eee746d17eb5402fb9d8ff9507fb6e1238e7ff06f7a5c50ff3df993', case=False) | Hashes.str.contains(r'SHA256=e34afe0a8c5459d13e7a11f20d62c7762b2a55613aaf6dbeb887e014b5f19295', case=False) | Hashes.str.contains(r'SHA256=d8fc8e3a1348393c5d7c3a84bcbae383d85a4721a751ad7afac5428e5e579b4e', case=False) | Hashes.str.contains(r'SHA256=0e9072759433abf3304667b332354e0c635964ff930de034294bf13d40da2a6f', case=False) | Hashes.str.contains(r'SHA256=0cfb7ea2cc515a7fe913ab3619cbfcf1ca96d8cf72dc350905634a5782907a49', case=False) | Hashes.str.contains(r'SHA256=13ae4d9dcacba8133d8189e59d9352272e15629e6bca580c32aff9810bd96e44', case=False) | Hashes.str.contains(r'SHA256=2e6b339597a89e875f175023ed952aaac64e9d20d457bbc07acf1586e7fe2df8', case=False) | Hashes.str.contains(r'SHA256=18776682fcc0c6863147143759a8d4050a4115a8ede0136e49a7cf885c8a4805', case=False) | Hashes.str.contains(r'SHA256=845f1e228de249fc1ddf8dc28c39d03e8ad328a6277b6502d3932e83b879a65a', case=False) | Hashes.str.contains(r'SHA256=9a523854fe84f15efc1635d7f5d3e71812c45d6a4d2c99c29fdc4b4d9c84954c', case=False) | Hashes.str.contains(r'SHA256=c6db7f2750e7438196ec906cc9eba540ef49ceca6dbd981038cef1dc50662a73', case=False) | Hashes.str.contains(r'SHA256=8399e5afd8e3e97139dffb1a9fb00db2186321b427f164403282217cab067c38', case=False) | Hashes.str.contains(r'SHA256=d7e091e0d478c34232e8479b950c5513077b3a69309885cee4c61063e5f74ac0', case=False) | Hashes.str.contains(r'SHA256=18deed37f60b6aa8634dda2565a0485452487d7bce88afb49301a7352db4e506', case=False) | Hashes.str.contains(r'SHA256=0cf6c6c2d231eaf67dfc87561cc9a56ecef89ab50baafee5a67962748d51faf3', case=False) | Hashes.str.contains(r'SHA256=5f7e47d728ac3301eb47b409801a0f4726a435f78f1ed02c30d2a926259c71f3', case=False) | Hashes.str.contains(r'SHA256=5c0b429e5935814457934fa9c10ac7a88e19068fa1bd152879e4e9b89c103921', case=False) | Hashes.str.contains(r'SHA256=2da330a2088409efc351118445a824f11edbe51cf3d653b298053785097fe40e', case=False) | Hashes.str.contains(r'SHA256=ab0925398f3fa69a67eacee2bbb7b34ac395bb309df7fc7a9a9b8103ef41ed7a', case=False) | Hashes.str.contains(r'SHA256=e502c2736825ea0380dd42effaa48105a201d4146e79de00713b8d3aaa98cd65', case=False) | Hashes.str.contains(r'SHA256=8fe429c46fedbab8f06e5396056adabbb84a31efef7f9523eb745fc60144db65', case=False) | Hashes.str.contains(r'SHA256=552f70374715e70c4ade591d65177be2539ec60f751223680dfaccb9e0be0ed9', case=False) | Hashes.str.contains(r'SHA256=eba14a2b4cefd74edaf38d963775352dc3618977e30261aab52be682a76b536f', case=False) | Hashes.str.contains(r'SHA256=5f20541f859f21b3106e12d37182b1ea39bb75ffcfcddb2ece4f6edd42c0bab2', case=False) | Hashes.str.contains(r'SHA256=bae4372a9284db52dedc1c1100cefa758b3ec8d9d4f0e5588a8db34ded5edb1f', case=False) | Hashes.str.contains(r'SHA256=2594b3ef3675ca3a7b465b8ed4962e3251364bab13b12af00ebba7fa2211abb2', case=False) | Hashes.str.contains(r'SHA256=a961f5939088238d76757669a9a81905e33f247c9c635b908daac146ae063499', case=False) | Hashes.str.contains(r'SHA256=2fbbc276737047cb9b3ba5396756d28c1737342d89dce1b64c23a9c4513ae445', case=False) | Hashes.str.contains(r'SHA256=31ffc8218a52c3276bece1e5bac7fcb638dca0bc95c2d385511958abdbe4e4a5', case=False) | Hashes.str.contains(r'SHA256=e279e425d906ba77784fb5b2738913f5065a567d03abe4fd5571695d418c1c0f', case=False) | Hashes.str.contains(r'SHA256=95d50c69cdbf10c9c9d61e64fe864ac91e6f6caa637d128eb20e1d3510e776d3', case=False) | Hashes.str.contains(r'SHA256=0466dac557ee161503f5dfbd3549f81ec760c3d6c7c4363a21a03e7a3f66aca8', case=False) | Hashes.str.contains(r'SHA256=66f851b309bada6d3e4b211baa23b534165b29ba16b5cbf5e8f44eaeb3ca86ea', case=False) | Hashes.str.contains(r'SHA256=d3eaf041ce5f3fd59885ead2cb4ce5c61ac9d83d41f626512942a50e3da7b75a', case=False) | Hashes.str.contains(r'SHA256=a5a4a3c3d3d5a79f3ed703fc56d45011c21f9913001fcbcc43a3f7572cff44ec', case=False) | Hashes.str.contains(r'SHA256=8781589c77df2330a0085866a455d3ef64e4771eb574a211849784fdfa765040', case=False) | Hashes.str.contains(r'SHA256=748ccadb6bf6cdf4c5a5a1bb9950ee167d8b27c5817da71d38e2bc922ffce73d', case=False) | Hashes.str.contains(r'SHA256=12eda8b65ed8c1d80464a0c535ea099dffdb4981c134294cb0fa424efc85ee56', case=False) | Hashes.str.contains(r'SHA256=9a1d66036b0868bbb1b2823209fedea61a301d5dd245f8e7d390bd31e52d663e', case=False) | Hashes.str.contains(r'SHA256=1d804efc9a1a012e1f68288c0a2833b13d00eecd4a6e93258ba100aa07e3406f', case=False) | Hashes.str.contains(r'SHA256=d04c72fd31e7d36b101ad30e119e14f6df9cbc7a761526da9b77f9e0b9888bc4', case=False) | Hashes.str.contains(r'SHA256=019c2955e380dd5867c4b82361a8d8de62346ef91140c95cb311b84448c0fa4f', case=False) | Hashes.str.contains(r'SHA256=923ebbe8111e73d5b8ecc2db10f8ea2629a3264c3a535d01c3c118a3b4c91782', case=False) | Hashes.str.contains(r'SHA256=97363f377aaf3c01641ac04a15714acbec978afb1219ac8f22c7e5df7f2b2d56', case=False) | Hashes.str.contains(r'SHA256=cac5dc7c3da69b682097144f12a816530091d4708ca432a7ce39f6abe6616461', case=False) | Hashes.str.contains(r'SHA256=30abc0cc700fdebc74e62d574addc08f6227f9c7177d9eaa8cbc37d5c017c9bb', case=False) | Hashes.str.contains(r'SHA256=07d0090c76155318e78a676e2f8af1500c20aaa1e84f047c674d5f990f5a09c8', case=False) | Hashes.str.contains(r'SHA256=43136de6b77ef85bc661d401723f38624e93c4408d758bc9f27987f2b4511fee', case=False) | Hashes.str.contains(r'SHA256=dd2f1f7012fb1f4b2fb49be57af515cb462aa9c438e5756285d914d65da3745b', case=False) | Hashes.str.contains(r'SHA256=fda93c6e41212e86af07f57ca95db841161f00b08dae6304a51b467056e56280', case=False) | Hashes.str.contains(r'SHA256=ded2927f9a4e64eefd09d0caba78e94f309e3a6292841ae81d5528cab109f95d', case=False) | Hashes.str.contains(r'SHA256=a34e45e5bbec861e937aefb3cbb7c8818f72df2082029e43264c2b361424cbb1', case=False) | Hashes.str.contains(r'SHA256=a903f329b70f0078197cb7683aae1bb432eaf58572fe572f7cb4bc2080042d7e', case=False) | Hashes.str.contains(r'SHA256=881bca6dc2dafe1ae18aeb59216af939a3ac37248c13ed42ad0e1048a3855461', case=False) | Hashes.str.contains(r'SHA256=13ae3081393f8100cc491ebb88ba58f0491b3550787cf3fd25a73aa7ca0290d9', case=False) | Hashes.str.contains(r'SHA256=54841d9f89e195196e65aa881834804fe3678f1cf6b328cab8703edd15e3ec57', case=False) | Hashes.str.contains(r'SHA256=3e9b62d2ea2be50a2da670746c4dbe807db9601980af3a1014bcd72d0248d84c', case=False) | Hashes.str.contains(r'SHA256=1a4f7d7926efc3e3488758ce318246ea78a061bde759ec6c906ff005dd8213e5', case=False) | Hashes.str.contains(r'SHA256=9d530642aeb6524691d06b9e02a84e3487c9cdd86c264b105035d925c984823a', case=False) | Hashes.str.contains(r'SHA256=c2fcc0fec64d5647813b84b9049d430406c4c6a7b9f8b725da21bcae2ff12247', case=False) | Hashes.str.contains(r'SHA256=d7c79238f862b471740aff4cc3982658d1339795e9ec884a8921efe2e547d7c3', case=False) | Hashes.str.contains(r'SHA256=fcdfe570e6dc6e768ef75138033d9961f78045adca53beb6fdb520f6417e0df1', case=False) | Hashes.str.contains(r'SHA256=1076504a145810dfe331324007569b95d0310ac1e08951077ac3baf668b2a486', case=False) | Hashes.str.contains(r'SHA256=e61004335dfe7349f2b2252baa1e111fb47c0f2d6c78a060502b6fcc92f801e4', case=False) | Hashes.str.contains(r'SHA256=0d3790af5f8e5c945410929e31d06144a471ac82f828afe89a4758a5bbeb7f9f', case=False) | Hashes.str.contains(r'SHA256=a2f45d95d54f4e110b577e621fefa0483fa0e3dcca14c500c298fb9209e491c1', case=False) | Hashes.str.contains(r'SHA256=386745d23a841e1c768b5bdf052e0c79bb47245f9713ee64e2a63f330697f0c8', case=False) | Hashes.str.contains(r'SHA256=163912dfa4ad141e689e1625e994ab7c1f335410ebff0ade86bda3b7cdf6e065', case=False) | Hashes.str.contains(r'SHA256=e6023b8fd2ce4ad2f3005a53aa160772e43fe58da8e467bd05ab71f3335fb822', case=False) | Hashes.str.contains(r'SHA256=e07211224b02aaf68a5e4b73fc1049376623793509d9581cdaee9e601020af06', case=False) | Hashes.str.contains(r'SHA256=003e61358878c7e49e18420ee0b4a37b51880be40929a76e529c7b3fb18e81b4', case=False) | Hashes.str.contains(r'SHA256=d2e843d9729da9b19d6085edf69b90b057c890a74142f5202707057ee9c0b568', case=False) | Hashes.str.contains(r'SHA256=cfb7af8ac67a379e7869289aeee21837c448ea6f8ab6c93988e7aa423653bd40', case=False) | Hashes.str.contains(r'SHA256=65db1b259e305a52042e07e111f4fa4af16542c8bacd33655f753ef642228890', case=False) | Hashes.str.contains(r'SHA256=d9a73df5ac5c68ef5b37a67e5e649332da0f649c3bb6828f70b65c0a2e7d3a23', case=False) | Hashes.str.contains(r'SHA256=3670ccd9515d529bb31751fcd613066348057741adeaf0bffd1b9a54eb8baa76', case=False) | Hashes.str.contains(r'SHA256=e26a21e1b79ecaee7033e05edb0bd72aca463c23bd6fdf5835916ce2dfdf1a63', case=False) | Hashes.str.contains(r'SHA256=00b3ff11585c2527b9e1c140fd57cb70b18fd0b775ec87e9646603056622a1fd', case=False) | Hashes.str.contains(r'SHA256=707b4b5f5c4585156d8a4d8c39cf26729f5ad05d7f77b17f48e670e808e3e6a0', case=False) | Hashes.str.contains(r'SHA256=6f1ff29e2e710f6d064dc74e8e011331d807c32cc2a622cbe507fd4b4d43f8f4', case=False) | Hashes.str.contains(r'SHA256=b0f6cd34717d0cea5ab394b39a9de3a479ca472a071540a595117219d9a61a44', case=False) | Hashes.str.contains(r'SHA256=b01ebea651ec7780d0fe88dd1b6c2500a36dacf85e3a4038c2ca1c5cb44c7b5d', case=False) | Hashes.str.contains(r'SHA256=5d530e111400785d183057113d70623e17af32931668ab7c7fc826f0fd4f91a3', case=False) | Hashes.str.contains(r'SHA256=9f1025601d17945c3a47026814bdec353ee363966e62dba7fe2673da5ce50def', case=False) | Hashes.str.contains(r'SHA256=793a26c5c4c154a40f84c3d3165deb807062b26796acaae94b72f453e95230d5', case=False) | Hashes.str.contains(r'SHA256=2bbe65cbec3bb069e92233924f7ee1f95ffa16173fceb932c34f68d862781250', case=False) | Hashes.str.contains(r'SHA256=26453afb1f808f64bec87a2532a9361b696c0ed501d6b973a1f1b5ae152a4d40', case=False) | Hashes.str.contains(r'SHA256=1e0eb0811a7cf1bdaf29d3d2cab373ca51eb8d8b58889ab7728e2d3aed244abe', case=False) | Hashes.str.contains(r'SHA256=8688e43d94b41eeca2ed458b8fc0d02f74696a918e375ecd3842d8627e7a8f2b', case=False) | Hashes.str.contains(r'SHA256=7c830ed39c9de8fe711632bf44846615f84b10db383f47b7d7c9db29a2bd829a', case=False) | Hashes.str.contains(r'SHA256=84bf1d0bcdf175cfe8aea2973e0373015793d43907410ae97e2071b2c4b8e2d4', case=False) | Hashes.str.contains(r'SHA256=4d19ee789e101e5a76834fb411aadf8229f08b3ece671343ad57a6576a525036', case=False) | Hashes.str.contains(r'SHA256=3f2fda9a7a9c57b7138687bbce49a2e156d6095dddabb3454ea09737e02c3fa5', case=False) | Hashes.str.contains(r'IMPHASH=88e21ed9e717781eaf87209acbdbb567', case=False) | Hashes.str.contains(r'IMPHASH=481d7bb63a8e5eaba756137e6ef22e54', case=False) | Hashes.str.contains(r'IMPHASH=cef6a450f196b28e634aa3c0655d8eda', case=False) | Hashes.str.contains(r'IMPHASH=0e0722c16a5ded199f64b26fccd2115a', case=False) | Hashes.str.contains(r'IMPHASH=f0cd7cce1d03cf9df1b8266701f92b46', case=False) | Hashes.str.contains(r'IMPHASH=cc88330f6dca52a40e258f689d3e2db4', case=False) | Hashes.str.contains(r'IMPHASH=835e364e2175338d970c2aaee365f3dc', case=False) | Hashes.str.contains(r'IMPHASH=82e75304c5b7ed87121b8b89c82f2389', case=False) | Hashes.str.contains(r'IMPHASH=9470f56376e665fb981a35b303436041', case=False) | Hashes.str.contains(r'IMPHASH=37b1eada43ad08093dfa4de7a411d15f', case=False) | Hashes.str.contains(r'IMPHASH=a2d936fa82b7340d28a697fb344046d8', case=False) | Hashes.str.contains(r'IMPHASH=16b23f4c6ea47d01340a2cce4bf613f7', case=False) | Hashes.str.contains(r'IMPHASH=32b632f6379bfaac9f4f3a030a694f55', case=False) | Hashes.str.contains(r'IMPHASH=052280a42374b8d779c10cd0d8118691', case=False) | Hashes.str.contains(r'IMPHASH=540992ba6f31301ba27604515a78ad79', case=False) | Hashes.str.contains(r'IMPHASH=a5fd3b0143c8db98017ec1b2b2528360', case=False) | Hashes.str.contains(r'IMPHASH=1e13511288689b63b2e1348bf5eb567b', case=False) | Hashes.str.contains(r'IMPHASH=dd406d43857d7f5ad1b0aec04fdb7e5f', case=False) | Hashes.str.contains(r'IMPHASH=cf1a39b9408348cddaa4a2827283534c', case=False) | Hashes.str.contains(r'IMPHASH=0dcd262801389f839ce909cb173448e2', case=False) | Hashes.str.contains(r'IMPHASH=9e15ce38f071c916bea830247f1241bb', case=False) | Hashes.str.contains(r'IMPHASH=5716c52252afe18d09f6c1bc6e5ef3ef', case=False) | Hashes.str.contains(r'IMPHASH=ecf8495ba751a7e38d6be4c5c80f2bef', case=False) | Hashes.str.contains(r'IMPHASH=f475387e3959dbea86854d61602db136', case=False) | Hashes.str.contains(r'IMPHASH=98dc1b41bda471f7eabdce8a5d16c09d', case=False) | Hashes.str.contains(r'IMPHASH=8b7e7c20da6ca9ac4bdb3927fe2b266a', case=False) | Hashes.str.contains(r'IMPHASH=14075e605bff546182d682f41afefea2', case=False) | Hashes.str.contains(r'IMPHASH=b8302791cd2edfe6dd562c4854ea495f', case=False) | Hashes.str.contains(r'IMPHASH=a1d29a3af6402793ec9d23883512938a', case=False) | Hashes.str.contains(r'IMPHASH=aa01c534155ce919d797860feb531eae', case=False) | Hashes.str.contains(r'IMPHASH=ebb99842fa08915eb8b7f67d8dc7a13a', case=False) | Hashes.str.contains(r'IMPHASH=89f3f52b23bdf03bd2bb7eb3cfab8817', case=False) | Hashes.str.contains(r'IMPHASH=8605f70bcc472025c2e78082388ed00b', case=False) | Hashes.str.contains(r'IMPHASH=27365d8741d23e179699f1f11a619c7d', case=False) | Hashes.str.contains(r'IMPHASH=dc0a0f2d424a59b4d17033f58f01b027', case=False) | Hashes.str.contains(r'IMPHASH=48e2ef3c2d32ecca62510d90e12b6632', case=False) | Hashes.str.contains(r'IMPHASH=a793af44219650b4dd07d8a19ede33f1', case=False) | Hashes.str.contains(r'IMPHASH=5f4063ab963abff76d0d83d239697e36', case=False) | Hashes.str.contains(r'IMPHASH=7716b766e630388f64de1961719be3d4', case=False) | Hashes.str.contains(r'IMPHASH=8ed3fbdefcc1982cd7decc40ace9d2e7', case=False) | Hashes.str.contains(r'IMPHASH=6e796fd10b55f58fd0ec9f122a14e918', case=False) | Hashes.str.contains(r'IMPHASH=2d7766896629499b1484227afaf43dd7', case=False) | Hashes.str.contains(r'IMPHASH=0579e15c488a56c544e8fac130d826ba', case=False) | Hashes.str.contains(r'IMPHASH=e1d88d0526dfa369c3661355dbd8773d', case=False) | Hashes.str.contains(r'IMPHASH=8ec78cf864273fd81203678b61c41f04', case=False) | Hashes.str.contains(r'IMPHASH=ff605557fd515d7ab30ff41dbd8bd24a', case=False) | Hashes.str.contains(r'IMPHASH=234f0978e7f2aa0beb9501ff53d94e5b', case=False) | Hashes.str.contains(r'IMPHASH=77d6a7153b3015318622b793227fb394', case=False) | Hashes.str.contains(r'IMPHASH=6c42ea981bc29a7e2ed56d297e0b56dc', case=False) | Hashes.str.contains(r'IMPHASH=23eb5ffc060c6c52546d38e2b63019bd', case=False) | Hashes.str.contains(r'IMPHASH=ee9cc2f584c2f06fbff67d484adcf426', case=False) | Hashes.str.contains(r'IMPHASH=d6dc99d60798b2647006ddba21671160', case=False) | Hashes.str.contains(r'IMPHASH=1427c5f0f4fb100e26a3911f8209504b', case=False) | Hashes.str.contains(r'IMPHASH=a095f31019d7a32d0a0507879a1822b1', case=False) | Hashes.str.contains(r'IMPHASH=b8a35d469bc164d86ac7c64e93b0037b', case=False) | Hashes.str.contains(r'IMPHASH=0e9dfd08346bbe128159bff440d13389', case=False) | Hashes.str.contains(r'IMPHASH=bd607d71fdc1444aa96dc431591c5c44', case=False) | Hashes.str.contains(r'IMPHASH=f4b8d579fbdb32eabd01954394f5bf3a', case=False) | Hashes.str.contains(r'IMPHASH=edc2197e927392567cf09f7de410b5bb', case=False) | Hashes.str.contains(r'IMPHASH=7fb9382c0d754d5aac897d7a3e72b10c', case=False) | Hashes.str.contains(r'IMPHASH=1422b8d354b95d9cd880c8726df45dfc', case=False) | Hashes.str.contains(r'IMPHASH=0c959096cf4b3180530cc7865ef29157', case=False) | Hashes.str.contains(r'IMPHASH=aca7bbc6be02770c50b07eb6f94d1d78', case=False) | Hashes.str.contains(r'IMPHASH=3f4c9025125027e307b7e52dd577303b', case=False) | Hashes.str.contains(r'IMPHASH=68062e8b9d3c1e6cc62a9cae16a12b81', case=False) | Hashes.str.contains(r'IMPHASH=228bac53e82887d1ed92f51a667a8231', case=False) | Hashes.str.contains(r'IMPHASH=8919b7bae28d98c4a9e5967c9c55ce70', case=False) | Hashes.str.contains(r'IMPHASH=7e798c3abcbd0f1cfa8b2b9688e01936', case=False) | Hashes.str.contains(r'IMPHASH=8add42784f4693f421d85a2bcbadc620', case=False) | Hashes.str.contains(r'IMPHASH=fbcdb079e9c13a82f98b79bb6ce86175', case=False) | Hashes.str.contains(r'IMPHASH=a94892b77a6474429b9f692d9952a9d5', case=False) | Hashes.str.contains(r'IMPHASH=aa03d5a319bc221875846e19e01276f7', case=False) | Hashes.str.contains(r'IMPHASH=26150d69f50aa9247c3f3f17521d18a2', case=False) | Hashes.str.contains(r'IMPHASH=beb40a1e9d5c89308d1c56958ddac27d', case=False) | Hashes.str.contains(r'IMPHASH=59b3f3fa2775e407721c2491ddb2890b', case=False) | Hashes.str.contains(r'IMPHASH=c314c92b5c25c6f4323e3efaf8bde47a', case=False) | Hashes.str.contains(r'IMPHASH=d8752c1d5954bea175ac00df5acebb09', case=False) | Hashes.str.contains(r'IMPHASH=54e54063abbf1edaa9cf9ed8a18916d6', case=False) | Hashes.str.contains(r'IMPHASH=4aaef0105216f062a5f3ee071a72770c', case=False) | Hashes.str.contains(r'IMPHASH=67f975f0734a5b0598223fbe00b3367e', case=False) | Hashes.str.contains(r'IMPHASH=175c5711f3c49a0d929e9e2314b21c6b', case=False) | Hashes.str.contains(r'IMPHASH=12befc0a82dcb0585359d335ed47af19', case=False) | Hashes.str.contains(r'IMPHASH=24b344cd341f8b20003ac85be08df979', case=False) | Hashes.str.contains(r'IMPHASH=08c7f29f5cb29ba70e49879da2e8ddce', case=False) | Hashes.str.contains(r'IMPHASH=fc9c0ba924e7f104eda5254aaeacc5e8', case=False) | Hashes.str.contains(r'IMPHASH=5192bc7311bdeb1f3977bdc0d2e943e4', case=False) | Hashes.str.contains(r'IMPHASH=7363079b9aae7d58bd33c691a613c83c', case=False) | Hashes.str.contains(r'IMPHASH=e2c63196ed5368f03dabed73b1ff3409', case=False) | Hashes.str.contains(r'IMPHASH=8211bd4f00a3d9928a11a6ac3329fc46', case=False) | Hashes.str.contains(r'IMPHASH=2699b7ae36fcadd71425ebafd231d0d1', case=False) | Hashes.str.contains(r'IMPHASH=8d2a933d039e8b8134ef41236d5ea843', case=False) | Hashes.str.contains(r'IMPHASH=cc335217d6f7ab7a53dcfa55cbda5fb0', case=False) | Hashes.str.contains(r'IMPHASH=f9141c3df8f7ec7b3f2d46265a3b5528', case=False) | Hashes.str.contains(r'IMPHASH=e0813a780309a0af84b605d95bd194e4', case=False) | Hashes.str.contains(r'IMPHASH=e5fd4339e7b94543b16624a27ba1c872', case=False) | Hashes.str.contains(r'IMPHASH=fffbca93e6322995552b841c7d65b033', case=False) | Hashes.str.contains(r'IMPHASH=105b74485670215ab231a942c9101ccf', case=False) | Hashes.str.contains(r'IMPHASH=74081c86ad3e9771011f162c107927de', case=False) | Hashes.str.contains(r'IMPHASH=2df11474daf362b1b2fa3d3a89b6acbe', case=False) | Hashes.str.contains(r'IMPHASH=22a9d7a42282b48c566b4423363d3a3e', case=False) | Hashes.str.contains(r'IMPHASH=4fbdc03e4487f98fb59360ea5b3e640d', case=False) | Hashes.str.contains(r'IMPHASH=b262e8d078ede007ebd0aa71b9152863', case=False) | Hashes.str.contains(r'IMPHASH=abbab73b191d90dc642cbbc1f31d750d', case=False) | Hashes.str.contains(r'IMPHASH=a5b3ea8c2012c517c472ad6befd37134', case=False) | Hashes.str.contains(r'IMPHASH=9d7183c1d8107495354c4fad9dae3452', case=False) | Hashes.str.contains(r'IMPHASH=7d004bbe0f546a91c93562d324307fa7', case=False) | Hashes.str.contains(r'IMPHASH=b84820037d6a51ba108e0e81ce01db0b', case=False) | Hashes.str.contains(r'IMPHASH=68b717fa2ab9431cd176776363359d48', case=False) | Hashes.str.contains(r'IMPHASH=b0356152212dc6e33752847235064fb0', case=False) | Hashes.str.contains(r'IMPHASH=baa420e9d4e3baf0d65d4fc2bf497708', case=False) | Hashes.str.contains(r'IMPHASH=85fd19df117fbc21efbcb1d587063e12', case=False) | Hashes.str.contains(r'IMPHASH=8122311437457ccae22578e301c6a17d', case=False) | Hashes.str.contains(r'IMPHASH=f939ef0b7f792672866386600f82aa04', case=False) | Hashes.str.contains(r'IMPHASH=d7de998e454f947f62d4a6b66490563b', case=False) | Hashes.str.contains(r'IMPHASH=17a9b50297a2334d8e9dfc3411bbe8ab', case=False) | Hashes.str.contains(r'IMPHASH=6816dabcee7b7d027bfbb93a16297afa', case=False) | Hashes.str.contains(r'IMPHASH=6723b1d5bd0f1fc13216cb44541e619e', case=False) | Hashes.str.contains(r'IMPHASH=71e84092e69114f0792419cb8b2b0fd1', case=False) | Hashes.str.contains(r'IMPHASH=9c8c681f74950997cd571fd838a847b8', case=False) | Hashes.str.contains(r'IMPHASH=95fe5e937e5acf9bea948fe0256e46ae', case=False) | Hashes.str.contains(r'IMPHASH=fc789f89340a45f1ab6c49e61b1f6b40', case=False) | Hashes.str.contains(r'IMPHASH=b8d0a36d2b14d79dfa08fb2e121f0920', case=False) | Hashes.str.contains(r'IMPHASH=6ce93eab57a73915ecd5c202a339f6ce', case=False) | Hashes.str.contains(r'IMPHASH=59b168c8ba0db46cb70d1d5a103e6c41', case=False) | Hashes.str.contains(r'IMPHASH=3edc60bda68569cac7ad7604728ff40d', case=False) | Hashes.str.contains(r'IMPHASH=3e8e7e5e779c7064e6bab177167e9e7a', case=False) | Hashes.str.contains(r'IMPHASH=b05ee5c816a30bc52378c759486af0b9', case=False) | Hashes.str.contains(r'IMPHASH=f7d07bcaa23837d219dcb64e76290252', case=False) | Hashes.str.contains(r'IMPHASH=d658b06ec1ce39670b02a2dd83e29d03', case=False) | Hashes.str.contains(r'IMPHASH=11bfcbdb0787ef461d442f973c392cf6', case=False) | Hashes.str.contains(r'IMPHASH=f531646e31cc12dfaac5b8352653c384', case=False) | Hashes.str.contains(r'IMPHASH=9b3ad85a76080f989d24cd89da90175a', case=False) | Hashes.str.contains(r'IMPHASH=5f6fd4ffba177389f414dd1a6ded24b4', case=False) | Hashes.str.contains(r'IMPHASH=4b0b017b23567cf8b9e1268957acd032', case=False) | Hashes.str.contains(r'IMPHASH=b4a71a1265f5f82cf383af17e229acb5', case=False) | Hashes.str.contains(r'IMPHASH=0ebf1214948a636eba076b14cd8f72d5', case=False) | Hashes.str.contains(r'IMPHASH=c05e71aad32edcbe71ae0ef1621f8693', case=False) | Hashes.str.contains(r'IMPHASH=427cd9c70cca88ca1db61a5ddc3b8450', case=False) | Hashes.str.contains(r'IMPHASH=236bc37dff7a92a4d25d807cf038e674', case=False) | Hashes.str.contains(r'IMPHASH=e38cca61999fb8a0308c0eb798b07989', case=False) | Hashes.str.contains(r'IMPHASH=3815f9107b799b863cd905178e6e07d0', case=False) | Hashes.str.contains(r'IMPHASH=3c91d549b68e320924bcde3856993e87', case=False) | Hashes.str.contains(r'IMPHASH=bb56f25a810b329868a0ff8e94080bad', case=False) | Hashes.str.contains(r'IMPHASH=f5030145594c486434040aa2636a5dde', case=False) | Hashes.str.contains(r'IMPHASH=d8101af81fd826b492ced1994ebd3268', case=False) | Hashes.str.contains(r'IMPHASH=b5967a61e1a4e1d57b3d8ffefc5721ed', case=False) | Hashes.str.contains(r'IMPHASH=799c9c020c6fcfd11a4172bc861f74af', case=False) | Hashes.str.contains(r'IMPHASH=2b9471e7bb8c05dc55d0a2ff0591ea98', case=False) | Hashes.str.contains(r'IMPHASH=6a47c957830ccce7ef43ed96aacf7c2c', case=False) | Hashes.str.contains(r'IMPHASH=b1e749ba779687a5127817da3d47af2c', case=False) | Hashes.str.contains(r'IMPHASH=202a0f2f992ec379e2876776ae9de661', case=False) | Hashes.str.contains(r'IMPHASH=f5df2479285c7b593b3630b8357032e3', case=False) | Hashes.str.contains(r'IMPHASH=32204eaf2afa5b348ab17de07362885c', case=False) | Hashes.str.contains(r'IMPHASH=1de2e6e58f6b19c4ec9ad6ca9fce5c14', case=False) | Hashes.str.contains(r'IMPHASH=64d934652c680b7759f6e75d05ee3072', case=False) | Hashes.str.contains(r'IMPHASH=176d8e75a27a45e2c6f5d4cceca4d869', case=False) | Hashes.str.contains(r'IMPHASH=f0820e8f674e44e5c2a3f899ec561c1d', case=False) | Hashes.str.contains(r'IMPHASH=f4fa225abfb5a5263241a01a2c3f2b8f', case=False) | Hashes.str.contains(r'IMPHASH=a18b467c3b43f334ca455c495a3ef70d', case=False) | Hashes.str.contains(r'IMPHASH=a8633e68c2ad9f3dc83775d8d5b21c5b', case=False) | Hashes.str.contains(r'IMPHASH=9d5a58052468c8e07ff3d5bd730e5d00', case=False) | Hashes.str.contains(r'IMPHASH=69260cce3156aa2dc0540fb78f5fe826', case=False) | Hashes.str.contains(r'IMPHASH=b1336b0cb67918ed39f1f88c354910d0', case=False) | Hashes.str.contains(r'IMPHASH=f119bff607049d431d0968fbaf6532f3', case=False) | Hashes.str.contains(r'IMPHASH=c91146dfe120f6e8fbed2150d9e020ca', case=False) | Hashes.str.contains(r'IMPHASH=1e6875beefe8571686d3e8530f8c4bfb', case=False) | Hashes.str.contains(r'IMPHASH=acdf419d1d03923be256205b9c33eec8', case=False) | Hashes.str.contains(r'IMPHASH=756adaea6a3f9f0cdaff73d1a49ca201', case=False) | Hashes.str.contains(r'IMPHASH=28dc68bb6d6bf4f6b2db8dd7588b2511', case=False) | Hashes.str.contains(r'IMPHASH=6e7cd05c0da9f82449a8b3795418ee00', case=False) | Hashes.str.contains(r'IMPHASH=8c3af6c25ab40c4daefb4f836d12e1c8', case=False) | Hashes.str.contains(r'IMPHASH=4792bcb395d06f9efb72e8020c4af5e6', case=False) | Hashes.str.contains(r'IMPHASH=d5bc15465b63888cc8b98ecc63a81517', case=False) | Hashes.str.contains(r'IMPHASH=7f53340c91c108efedb5b8678c5207b3', case=False) | Hashes.str.contains(r'IMPHASH=3f4a90b2976641ad2c0164792b24d322', case=False) | Hashes.str.contains(r'IMPHASH=d221afaadf43ceedb581e665435c56c7', case=False) | Hashes.str.contains(r'IMPHASH=f212bbc758bb52fc661839b1d194b76e', case=False) | Hashes.str.contains(r'IMPHASH=e938b727f5a033818337f7ba0584500f', case=False) | Hashes.str.contains(r'IMPHASH=3ac083b0ee2b752436a8a1532179f032', case=False) | Hashes.str.contains(r'IMPHASH=2e9ef79ea88178e29516dfa435a58900', case=False) | Hashes.str.contains(r'IMPHASH=24c3d3be20e794c17844d030be03fd2f', case=False) | Hashes.str.contains(r'IMPHASH=700a9350ac8b218ab9fc62cf25337ad3', case=False) | Hashes.str.contains(r'IMPHASH=e586fd1c5af87b43696b9d29b09bf1b1', case=False) | Hashes.str.contains(r'IMPHASH=2233472cee6457ad207017803048aaff', case=False) | Hashes.str.contains(r'IMPHASH=f046e37fa7914491dc25a6f7718da341', case=False) | Hashes.str.contains(r'IMPHASH=683bc425e3d8c21f9473a238a0645a4e', case=False) | Hashes.str.contains(r'IMPHASH=f08e2ac6ca73cd2a924ed25dc6813638', case=False) | Hashes.str.contains(r'IMPHASH=e2306e26abfd90a5ce4dad0e266b3905', case=False) | Hashes.str.contains(r'IMPHASH=10917aa77669c6ae714f074d89be9ab8', case=False) | Hashes.str.contains(r'IMPHASH=db62897eb9d2098e988f830159c04c82', case=False) | Hashes.str.contains(r'IMPHASH=51780bba04121d6be13f69de08721445', case=False) | Hashes.str.contains(r'IMPHASH=29a2e15ac1622a3daf7da5a78f0cef08', case=False) | Hashes.str.contains(r'IMPHASH=5988ec9f159fefbdf89d893aa634dd92', case=False) | Hashes.str.contains(r'IMPHASH=05d3de62beab8e88de1dafd3b24a16f6', case=False) | Hashes.str.contains(r'IMPHASH=88380fdfc880da4da407c38f34fe8a3c', case=False) | Hashes.str.contains(r'IMPHASH=8a424cd36ae3eab0d11332ce3b982a02', case=False) | Hashes.str.contains(r'IMPHASH=60a2fba979aaa0d0ccd09c12ca3d9e57', case=False) | Hashes.str.contains(r'IMPHASH=85f86c7c8ce81a78e84efa545d7edc65', case=False) | Hashes.str.contains(r'IMPHASH=9523103b30fb194643b97ccc3ab7abb0', case=False) | Hashes.str.contains(r'IMPHASH=0c2219c9c5eab786fa876f74356eea20', case=False) | Hashes.str.contains(r'IMPHASH=7abb0911ca4cc4697ee1e9897932d3ac', case=False) | Hashes.str.contains(r'IMPHASH=c6a0f65ba653ee78255cc9e314abc442', case=False) | Hashes.str.contains(r'IMPHASH=44e6f2f64092b48f8eb926c36ebd1d56', case=False) | Hashes.str.contains(r'IMPHASH=13300d56528646611f26704266713952', case=False) | Hashes.str.contains(r'IMPHASH=095c0cdb9c0421da216371c1f4e8790e', case=False) | Hashes.str.contains(r'IMPHASH=45f8f347e3fb919f3164a4a3278f1c71', case=False) | Hashes.str.contains(r'IMPHASH=0e4f5481813eeec4e5dd96e36020135f', case=False) | Hashes.str.contains(r'IMPHASH=1d05fb30a58133da2e9dbdfcf51b80fd', case=False) | Hashes.str.contains(r'IMPHASH=2561727ac42d399030b3c46477c428f4', case=False) | Hashes.str.contains(r'IMPHASH=be69e763a6a858c3e7e1ea6e3af12691', case=False) | Hashes.str.contains(r'IMPHASH=7fba20994f76fb31b9f5a2b3f0c00055', case=False) | Hashes.str.contains(r'IMPHASH=1d9cdf46ff335712634c292180c06755', case=False) | Hashes.str.contains(r'IMPHASH=ad4586d21c9469bf636b5e8660e9d702', case=False) | Hashes.str.contains(r'IMPHASH=958dd67f866ae27cf716e30a025b266f', case=False) | Hashes.str.contains(r'IMPHASH=1dd3b83f2b007f862a1d8de4a1d3303f', case=False) | Hashes.str.contains(r'IMPHASH=b4c562c2c654abd2cc71658646314976', case=False) | Hashes.str.contains(r'IMPHASH=679eba16ab2d51543b7007708838ef7c', case=False) | Hashes.str.contains(r'IMPHASH=a1603fe7f02448c6b33687ddb9304c7f', case=False) | Hashes.str.contains(r'IMPHASH=9e2cf28fe320bbf74972509536569c8e', case=False) | Hashes.str.contains(r'IMPHASH=f233a65b937c69b447824889fb7425ff', case=False) | Hashes.str.contains(r'IMPHASH=b3204707f6e489cd5a2484881eaf78ca', case=False) | Hashes.str.contains(r'IMPHASH=c61a46ffe79d3f7d6307c0d2ae5f391e', case=False) | Hashes.str.contains(r'IMPHASH=28c5045218461018dbde27212ab0f227', case=False) | Hashes.str.contains(r'IMPHASH=af34db96db910a3fa7a56f2fac8ed5e1', case=False) | Hashes.str.contains(r'IMPHASH=e80eeed7225a880bbde0d038a5fe1af4', case=False) | Hashes.str.contains(r'IMPHASH=62473b41d695f075ad96abc4a408de5b', case=False) | Hashes.str.contains(r'IMPHASH=56307b5227183c002e4231320a72b961', case=False) | Hashes.str.contains(r'IMPHASH=dd7c5c0c762169d40ee01280e4ac74fc', case=False) | Hashes.str.contains(r'IMPHASH=9915439d37f385dbffc72bf835f3ee02', case=False) | Hashes.str.contains(r'IMPHASH=4199ed50502e00f57d9b66e9305450f5', case=False) | Hashes.str.contains(r'IMPHASH=71c580daf556775f690f0af3db12506f', case=False) | Hashes.str.contains(r'IMPHASH=c1ab6741cd29de98a138f2bd639f620a', case=False) | Hashes.str.contains(r'IMPHASH=32247962aa01af8ad5dca696260a05ab', case=False) | Hashes.str.contains(r'IMPHASH=1d774a94ad511efe5ebfe70acc6f8c85', case=False) | Hashes.str.contains(r'IMPHASH=690a0fb27a0c47c785d6bbbfc2e56501', case=False) | Hashes.str.contains(r'IMPHASH=78727a5fac8bd281903014ee00dcd553', case=False) | Hashes.str.contains(r'IMPHASH=f5ebade1d3a6d3bde264b0c7f9f639e7', case=False) | Hashes.str.contains(r'IMPHASH=4343c9c0b78ee21e895f10d929c240d4', case=False) | Hashes.str.contains(r'IMPHASH=f510a429c6ce5c8d414550518b3823d2', case=False) | Hashes.str.contains(r'IMPHASH=45acfe4a83f61d872fb904a1f08ef991', case=False) | Hashes.str.contains(r'IMPHASH=cbf26c6e8cf7e294bda273e7026a2789', case=False) | Hashes.str.contains(r'IMPHASH=84d83741445d9f5a6717b874fed3d8f3', case=False) | Hashes.str.contains(r'IMPHASH=0b40636205c64cacfd2e4f407518ad58', case=False) | Hashes.str.contains(r'IMPHASH=b4627789883457d50964a248104cb4c2', case=False) | Hashes.str.contains(r'IMPHASH=a7ff164c1ee5113a0a09e66b2cd03544', case=False) | Hashes.str.contains(r'IMPHASH=a0a13575e37906924a0b79043b4005c6', case=False) | Hashes.str.contains(r'IMPHASH=955e7b12a8fa06444c68e54026c45de1', case=False) | Hashes.str.contains(r'IMPHASH=8f52e36711c80bb9d7e30995e0092e83', case=False) | Hashes.str.contains(r'IMPHASH=05fbe4619edf747787879d9323951439', case=False) | Hashes.str.contains(r'IMPHASH=865c945f842a3f5f5453fb90d12f6765', case=False) | Hashes.str.contains(r'IMPHASH=89f925b54b95944513671d79eba5fe07', case=False) | Hashes.str.contains(r'IMPHASH=f4c5b0399665885a7dd34f7cdbbc586f', case=False) | Hashes.str.contains(r'IMPHASH=2ece23bdef16ee294bd905c7ba1be589', case=False) | Hashes.str.contains(r'IMPHASH=e800cd3299d4cda0d9e02255acc3b7dd', case=False) | Hashes.str.contains(r'IMPHASH=a86fb9a41955bda815ab902fb58baa27', case=False) | Hashes.str.contains(r'IMPHASH=2f7ea575cf15da16c8f117eee37046d8', case=False) | Hashes.str.contains(r'IMPHASH=223a76f59831e1a59980b603f81c271d', case=False) | Hashes.str.contains(r'IMPHASH=c17c0bd619c1e188ffe27bd328dd7d08', case=False) | Hashes.str.contains(r'IMPHASH=1429d5c551f71d3ce6a7cc54c9348e95', case=False) | Hashes.str.contains(r'IMPHASH=3552d8a0022e7f3136b667e6d1e402f2', case=False) | Hashes.str.contains(r'IMPHASH=67d92a28cd2923a923adf7fd958905d8', case=False) | Hashes.str.contains(r'IMPHASH=3c9af2347198d96c8ab5b189b4e3db37', case=False) | Hashes.str.contains(r'IMPHASH=f43aa654b4bfb882a0af098ad3f899e9', case=False) | Hashes.str.contains(r'IMPHASH=518e77c070ae21af7c558962cd1854a3', case=False) | Hashes.str.contains(r'IMPHASH=8e96d1a56746c6f6f30f1a0963ce2f26', case=False) | Hashes.str.contains(r'IMPHASH=b19743993dc7f1d48b2a86fe9b9c91e3', case=False) | Hashes.str.contains(r'IMPHASH=acd1b0130287133223d26c91f27f6899', case=False) | Hashes.str.contains(r'IMPHASH=82942c060f79cefd3bf1acdf5c207561', case=False) | Hashes.str.contains(r'IMPHASH=bc5c06a7fa9555f3f34043d828d9b123', case=False) | Hashes.str.contains(r'IMPHASH=ccdeab2a83fbf2fef2e418cccd133ec1', case=False) | Hashes.str.contains(r'IMPHASH=2424cf613f90884493009dd6bee95693', case=False) | Hashes.str.contains(r'IMPHASH=5c77661ac2951da388949d9a834eb694', case=False) | Hashes.str.contains(r'IMPHASH=2a20cc9578bb34a4bb10b87b49b24982', case=False) | Hashes.str.contains(r'IMPHASH=3ee1cb6085fbe05e46e2b88493426848', case=False) | Hashes.str.contains(r'IMPHASH=cb876abd8c6ca8a47d50aec4a520a020', case=False) | Hashes.str.contains(r'IMPHASH=80ae2342fd6c7f5e1c642918e33dafb1', case=False) | Hashes.str.contains(r'IMPHASH=aa274f6b4b15691fd725d7044f98bf36', case=False) | Hashes.str.contains(r'IMPHASH=5e4c9e685f9b7d77c90ff710972bb7dd', case=False) | Hashes.str.contains(r'IMPHASH=4fb06df8cb54846e42943f0d3ae96e2f', case=False) | Hashes.str.contains(r'IMPHASH=74cc5d779ee7dbc9f389bab9dcccac50', case=False) | Hashes.str.contains(r'IMPHASH=0707fe3c02c8d2a4d6219bd0596d76f3', case=False) | Hashes.str.contains(r'IMPHASH=7863a0f25a0647ed7d52641222bd709a', case=False) | Hashes.str.contains(r'IMPHASH=75018719e85e67b75e73c57d682dbcbf', case=False) | Hashes.str.contains(r'IMPHASH=e08b2d7c450761f01ec9ed4ef0ca56a4', case=False) | Hashes.str.contains(r'IMPHASH=2263350df91a5a4f5e10e68b3b822029', case=False) | Hashes.str.contains(r'IMPHASH=6f0b9814da4da038669c47e77c2f268f', case=False) | Hashes.str.contains(r'IMPHASH=9fb64527ca6d4541cc256b1abd1e4101', case=False) | Hashes.str.contains(r'IMPHASH=27db67ffa112f866f1d34c32226e09cf', case=False) | Hashes.str.contains(r'IMPHASH=5bb79a6caa12076a6d140085cb53892e', case=False) | Hashes.str.contains(r'IMPHASH=d169b0949781ca2a6efea5a106266a02', case=False) | Hashes.str.contains(r'IMPHASH=5a50a9a44f5d36af5df1bde995d22e42', case=False) | Hashes.str.contains(r'IMPHASH=626c8ecbc636968157d73f18ac315926', case=False) | Hashes.str.contains(r'IMPHASH=f12ae9073d95c22ed89247253d59f500', case=False) | Hashes.str.contains(r'IMPHASH=44cbd2ee295f1a35795eb4cd7cdd0864', case=False) | Hashes.str.contains(r'IMPHASH=840e656bdb2987fa422092ec9d588895', case=False) | Hashes.str.contains(r'IMPHASH=d57ef6278dcd7049063e8fb6ade9effc', case=False) | Hashes.str.contains(r'IMPHASH=392aa6863da8d7c14ad7386026e93b58', case=False) | Hashes.str.contains(r'IMPHASH=5662b51943d85b7ca47a99cac81af985', case=False) | Hashes.str.contains(r'IMPHASH=8418ac0d7aaa9015794e55ea54733342', case=False) | Hashes.str.contains(r'IMPHASH=163436e69f8e582bdc1c1e6f735de23b', case=False) | Hashes.str.contains(r'IMPHASH=24e4c876bb5db0b0e0a4e92f0a3d3a48', case=False) | Hashes.str.contains(r'IMPHASH=3198fc43051f03c6c71587dbf232f75c', case=False) | Hashes.str.contains(r'IMPHASH=9321f9c47129fbc728ead2710e22f1a5', case=False) | Hashes.str.contains(r'IMPHASH=1a0d0d460994cfde55ee908d62330ee0', case=False) | Hashes.str.contains(r'IMPHASH=82f5b92ccd99d13f4dd6ed6aaf0441bc', case=False) | Hashes.str.contains(r'IMPHASH=634f3c43b014dc8845b086c9328a678c', case=False) | Hashes.str.contains(r'IMPHASH=81acb4bb89ef49c4e7f30513b4750e53', case=False) | Hashes.str.contains(r'IMPHASH=d61d30746681d0fda9bfd9e8af061b2a', case=False) | Hashes.str.contains(r'IMPHASH=7453e39bd87c63550451ba2fa354dd8e', case=False) | Hashes.str.contains(r'IMPHASH=bb437241f56020db0fcbf8f8629bdb07', case=False) | Hashes.str.contains(r'IMPHASH=1e8ee6407390a2d52051bec21c771fdb', case=False) | Hashes.str.contains(r'IMPHASH=7c24141cdcfc23f5eb0e2b6792d80740', case=False) | Hashes.str.contains(r'IMPHASH=a7f2c2e8e9d6c90e28819d1a3ab84bc8', case=False) | Hashes.str.contains(r'IMPHASH=1b0788bb68804273159b8ace9cba7ea3', case=False) | Hashes.str.contains(r'IMPHASH=9521d8684357766840dbcac2b4cee67d', case=False) | Hashes.str.contains(r'IMPHASH=b4c2607b2af5376910bf80b561e9a18a', case=False) | Hashes.str.contains(r'IMPHASH=f138fdbc6c7fbf73e135717c7d7eac27', case=False) | Hashes.str.contains(r'IMPHASH=82525a4a571f0f8d4e4f42ec6bb3900e', case=False) | Hashes.str.contains(r'IMPHASH=8bbc742eaed888736a715757f0584fb6', case=False) | Hashes.str.contains(r'IMPHASH=be527e5f470fbc661f914c81bfc9af38', case=False) | Hashes.str.contains(r'IMPHASH=ad374977f06fefefbb9c77155f7a0733', case=False) | Hashes.str.contains(r'IMPHASH=111e6d92e02f02f737654c5b1cfe9f6f', case=False) | Hashes.str.contains(r'IMPHASH=31907ffcac211e27136b14bb2f442070', case=False) | Hashes.str.contains(r'IMPHASH=60e068470635cf20cc19b7f8e8cbfc5f', case=False) | Hashes.str.contains(r'IMPHASH=8a5edbe5251fe141ea0262d5d572178b', case=False) | Hashes.str.contains(r'IMPHASH=0265c50548889ffd5c2d3a2539885efe', case=False) | Hashes.str.contains(r'IMPHASH=9376f1c4ab79240cc948b77bf9e8814b', case=False) | Hashes.str.contains(r'IMPHASH=82b2288ac7f842e42de15c5bc96f1772', case=False) | Hashes.str.contains(r'IMPHASH=317f02ddc9809d608a9bf63ce24e9550', case=False) | Hashes.str.contains(r'IMPHASH=65abf5c92cc2239f2dc9d589458569c9', case=False) | Hashes.str.contains(r'IMPHASH=12fef92a55cb5e1533b89d8e6a5892b2', case=False) | Hashes.str.contains(r'IMPHASH=fd133033a24971502ff0b2f189215c56', case=False) | Hashes.str.contains(r'IMPHASH=050d389675730da0d9d75367659cd53b', case=False) | Hashes.str.contains(r'IMPHASH=c590cbf2d6cbf206a2e47e8ed91dd944', case=False) | Hashes.str.contains(r'IMPHASH=505e0a016962137ca6169bce64ba2f53', case=False) | Hashes.str.contains(r'IMPHASH=02a27dc9a48b694b7df4b821eb65178c', case=False) | Hashes.str.contains(r'IMPHASH=bfe13c695e41d3eee414d3929b1bd523', case=False) | Hashes.str.contains(r'IMPHASH=5095ddaed3abc22c1510a141d72735cc', case=False) | Hashes.str.contains(r'IMPHASH=8f96c3ef5dda3fe697d4a4d6326dbe37', case=False) | Hashes.str.contains(r'IMPHASH=e1ecbd956bd016618b07e7dddcaf6e60', case=False) | Hashes.str.contains(r'IMPHASH=07a42e80559d960b176c0fc8fd309bfe', case=False) | Hashes.str.contains(r'IMPHASH=f86759bb4de4320918615dc06e998a39', case=False) | Hashes.str.contains(r'IMPHASH=c9f08d92efe88afb2545eb82a8870233', case=False) | Hashes.str.contains(r'IMPHASH=6b867dee14a77d0ada8ccad99b16291e', case=False) | Hashes.str.contains(r'IMPHASH=744af2b62301859b4ccdffba53551b15', case=False) | Hashes.str.contains(r'IMPHASH=ec5ee9a38e54ed3d4a6e6545672cb651', case=False) | Hashes.str.contains(r'IMPHASH=c3c9e6c0c33bad17eb055ec795fc113e', case=False) | Hashes.str.contains(r'IMPHASH=31a3c2c72c9a565dc4ba75ef26677569', case=False) | Hashes.str.contains(r'IMPHASH=7bc998aaa9fe4b4fd5e133554f42d913', case=False) | Hashes.str.contains(r'IMPHASH=bb981f82c2bfc3c22471df92d9d0fb89', case=False) | Hashes.str.contains(r'IMPHASH=ad34ea17f90a34f6f84a399a96383ada', case=False) | Hashes.str.contains(r'IMPHASH=30c0ed518c03fa46fa0bfe76f2db0e42', case=False) | Hashes.str.contains(r'IMPHASH=587191d77c08023e6e95463153e45463', case=False) | Hashes.str.contains(r'IMPHASH=c83f076c00d2b0a6ba9dc82f56a97631', case=False) | Hashes.str.contains(r'IMPHASH=cb8db41ab8c06472574e58b9466f4070', case=False) | Hashes.str.contains(r'IMPHASH=391ffad95759bc4bac2b737d0d0eaa84', case=False) | Hashes.str.contains(r'IMPHASH=c52384bc825d2414de3195672971339e', case=False) | Hashes.str.contains(r'IMPHASH=b0e74761cced2dde5173ae05ec562085', case=False) | Hashes.str.contains(r'IMPHASH=4bd0bd7710a7f71d38f056241c8ce0a7', case=False) | Hashes.str.contains(r'IMPHASH=ad0cdf3bab32983050527655bce40f96', case=False) | Hashes.str.contains(r'IMPHASH=e1a5435877b427be967867a25b1d263e', case=False) | Hashes.str.contains(r'IMPHASH=61b719638eacc2c5ca299805d4819e69', case=False) | Hashes.str.contains(r'IMPHASH=7687d0eba49315582228ef660f61b471', case=False) | Hashes.str.contains(r'IMPHASH=e7cbb1ce75bfc69f53855066a936042d', case=False) | Hashes.str.contains(r'IMPHASH=bc44fdc145156a15d0a803d18877b218', case=False) | Hashes.str.contains(r'IMPHASH=d5e7fc56a905088dbc79b8e27b98faea', case=False) | Hashes.str.contains(r'IMPHASH=3702511999371bac8982d01820dd70f2', case=False) | Hashes.str.contains(r'IMPHASH=d14ea0e632fc8485d77e7eba3c4d4537', case=False) | Hashes.str.contains(r'IMPHASH=2e7d3b001306473cbff3d0dc11a6fcbc', case=False) | Hashes.str.contains(r'IMPHASH=e717a2158439123c6fca79b6b2c0ba49', case=False) | Hashes.str.contains(r'IMPHASH=6736c04d5ff512e5e2eb608414276513', case=False) | Hashes.str.contains(r'IMPHASH=225e24ee3c4081a16ef32831b70bf8ef', case=False) | Hashes.str.contains(r'IMPHASH=48028b3b694466c1c0eb1d91ef5c02cb', case=False) | Hashes.str.contains(r'IMPHASH=37f7c6238c9ce110408e01ae1bc45635', case=False) | Hashes.str.contains(r'IMPHASH=b95bc1a99081d695b1c0b37b90a4a0be', case=False) | Hashes.str.contains(r'IMPHASH=78eaf4d62617f6b614d318cc70c6548a', case=False) | Hashes.str.contains(r'IMPHASH=55db306bc2be3ff71a6b91fd9db051b8', case=False) | Hashes.str.contains(r'IMPHASH=021fd02a8adad420116496b6f2759960', case=False) | Hashes.str.contains(r'IMPHASH=b3e26c5e0de2d01597dca208ef27cc38', case=False) | Hashes.str.contains(r'IMPHASH=67affe6126c1d4a774b2504061c96a2e', case=False) | Hashes.str.contains(r'IMPHASH=656ad5c2eac95f75d3fe6d5ca59e0d8d', case=False) | Hashes.str.contains(r'IMPHASH=5ea78a193212fe61ac722f45f0b0eab9', case=False) | Hashes.str.contains(r'IMPHASH=77ec8b2c372741f12098f084a13a56a8', case=False) | Hashes.str.contains(r'IMPHASH=f27327907e57c0c2c9fddc68eab2eb7b', case=False) | Hashes.str.contains(r'IMPHASH=b679ac08daf4b4ce8a58d85a8e0904ac', case=False) | Hashes.str.contains(r'IMPHASH=f2c2ee1ff03c54f384f4eee8c2533107', case=False) | Hashes.str.contains(r'IMPHASH=c12f7aec6ebe84a8390c82720adfc237', case=False) | Hashes.str.contains(r'IMPHASH=0a8eeabf5981efb2116244785cb03900', case=False) | Hashes.str.contains(r'IMPHASH=7f8c74638fcf297f8216aa5b184f61d6', case=False) | Hashes.str.contains(r'IMPHASH=d41fa95d4642dc981f10de36f4dc8cd7', case=False) | Hashes.str.contains(r'IMPHASH=8d616e68080def2200312de80392efa7', case=False) | Hashes.str.contains(r'IMPHASH=cde9174249f04dad0f79890c976c0792', case=False) | Hashes.str.contains(r'IMPHASH=858ceae385cdcfcbc7814644564c23e6', case=False) | Hashes.str.contains(r'IMPHASH=d232ae5bad7ce02f4eece90ef370c7a0', case=False) | Hashes.str.contains(r'IMPHASH=c7f08aed5725fe6a53a62ebe354ff135', case=False) | Hashes.str.contains(r'IMPHASH=cc81a908891587ccac8059435eda4c66', case=False) | Hashes.str.contains(r'IMPHASH=bd4f9a93da2bb4b5f6e90d4f9381661c', case=False) | Hashes.str.contains(r'IMPHASH=01aa65221a48929f0a34a27c4e3011b1', case=False) | Hashes.str.contains(r'IMPHASH=409d2ab916237fb129c57aacbb7cb4fe', case=False) | Hashes.str.contains(r'IMPHASH=65181bc89a1c2b5854548236269846c1', case=False) | Hashes.str.contains(r'IMPHASH=787e32b3fd816479fb93f9af0b6d0da3', case=False) | Hashes.str.contains(r'IMPHASH=8e89024d2c0ef0451c12b956a2b55b91', case=False) | Hashes.str.contains(r'IMPHASH=0cba56fa162378bc4ee09e94a4e2fe33', case=False) | Hashes.str.contains(r'IMPHASH=b7a0100fe60d7a8263da64820f7d0120', case=False) | Hashes.str.contains(r'IMPHASH=d16f507665603095c26147a7adcb93b8', case=False) | Hashes.str.contains(r'IMPHASH=0b663530751cc11f34273fee7921c431', case=False) | Hashes.str.contains(r'IMPHASH=604b5bd94f1892fd9e9025ef7a2bbe54', case=False) | Hashes.str.contains(r'IMPHASH=cb8397a3262c80b558aff93ab75b6a7b', case=False) | Hashes.str.contains(r'IMPHASH=d6c920c10d4d0f92f0ac14c3fefed233', case=False) | Hashes.str.contains(r'IMPHASH=9fd359d308a1e93106189b4ebd945855', case=False) | Hashes.str.contains(r'IMPHASH=c94e5ad0f33374535392364a5a193253', case=False) | Hashes.str.contains(r'IMPHASH=751c6b5c201f8c52f5512350cad88ddc', case=False) | Hashes.str.contains(r'IMPHASH=eac62dd0c27ed557fa4b641fa4050d04', case=False) | Hashes.str.contains(r'IMPHASH=506a31d768aec26b297c45b50026c820', case=False) | Hashes.str.contains(r'IMPHASH=60805da513b95c3d18a93b988bdfb58f', case=False) | Hashes.str.contains(r'IMPHASH=3aa0ceb8fcd07cf2514d1cb0b9bccf4b', case=False) | Hashes.str.contains(r'IMPHASH=c1579e4266fbdc47a5abc493a2d9d597', case=False) | Hashes.str.contains(r'IMPHASH=adfd4c0b031598afecb6f3f585f5f581', case=False) | Hashes.str.contains(r'IMPHASH=7a286ef4179598007a8afe9e5af95a48', case=False) | Hashes.str.contains(r'IMPHASH=c7912c850407aa93c979d95c4f593507', case=False) | Hashes.str.contains(r'IMPHASH=bec5dc89f030df7a96d19483fad4cc0a', case=False) | Hashes.str.contains(r'IMPHASH=b91054cdc4c8b3169cfe6c157f6d9f07', case=False) | Hashes.str.contains(r'IMPHASH=d67b7c7501e5261df5e66b3219fa52ee', case=False) | Hashes.str.contains(r'IMPHASH=b142d772a67c40535c8d8fabb6861748', case=False) | Hashes.str.contains(r'IMPHASH=1957e33acbc826c69f452ae1d1b89ac9', case=False) | Hashes.str.contains(r'IMPHASH=7a4a0df0bde1f8da6547a580d5bee7c3', case=False) | Hashes.str.contains(r'IMPHASH=085a78615099ffefa2df0a31da3058d8', case=False) | Hashes.str.contains(r'IMPHASH=e804d4ee2c20f3eb1d3c955e38a2fe11', case=False) | Hashes.str.contains(r'IMPHASH=6f2d756d22c285a46206de3bfde6c79d', case=False) | Hashes.str.contains(r'IMPHASH=071356ee9d8c7f91cbe8fa3c448286a2', case=False) | Hashes.str.contains(r'IMPHASH=ebf30b4cd57a4f4548a03eab0f6c418c', case=False) | Hashes.str.contains(r'IMPHASH=08ab07a2bc35aea02cd6d1efbb954cb3', case=False) | Hashes.str.contains(r'IMPHASH=cb15f8046e159c17b0510738fa18f758', case=False) | Hashes.str.contains(r'IMPHASH=07a513d1599c93bd34f01323b1ef7430', case=False) | Hashes.str.contains(r'IMPHASH=2430f988dcdc3828f6079e1e2cc71dc8', case=False) | Hashes.str.contains(r'IMPHASH=8b41eacbfbe5f5348579e27d30767e74', case=False) | Hashes.str.contains(r'IMPHASH=afee876e89b51e2cc7c91353fb588fe6', case=False) | Hashes.str.contains(r'IMPHASH=e11e41c95c1872ac3ebbd7768b16cf9e', case=False) | Hashes.str.contains(r'IMPHASH=e9077c03c44a511c2c8eaf5bad9ab90b', case=False) | Hashes.str.contains(r'IMPHASH=d6d76f43ccc3872b879b0df583364c78', case=False) | Hashes.str.contains(r'IMPHASH=62dbb90b4be9282d52aff9ae1a101d6b', case=False) | Hashes.str.contains(r'IMPHASH=3ec1e7e215efad2711248558465da9ad', case=False) | Hashes.str.contains(r'IMPHASH=96f270be3f73ec3fc2f2237fe84efca0', case=False) | Hashes.str.contains(r'IMPHASH=9ad5f7496f8c918d6c0536751d3accae', case=False) | Hashes.str.contains(r'IMPHASH=b1ed268dfdf4f39960971eb5822a4755', case=False) | Hashes.str.contains(r'IMPHASH=4c0161f638d5acafe23fcee3c5e86f15', case=False) | Hashes.str.contains(r'IMPHASH=9928d53dbe860aba1b7c891831680629', case=False) | Hashes.str.contains(r'IMPHASH=d122c1eaa50839be14c31876d0d4e0be', case=False) | Hashes.str.contains(r'IMPHASH=8f4588156ea7d9af8e4c162ce4c3ff23', case=False) | Hashes.str.contains(r'IMPHASH=abdaca21ab5c831000b0aa4b8f357716', case=False) | Hashes.str.contains(r'IMPHASH=0555907292d07d9f78205416eb1924d3', case=False) | Hashes.str.contains(r'IMPHASH=832f0fb3579a07b1c4bec82b4478306b', case=False) | Hashes.str.contains(r'IMPHASH=340e874a1ca966e45fc2a314ef228cce', case=False) | Hashes.str.contains(r'IMPHASH=b35d1d3faa6c97b106b343823d5df867', case=False) | Hashes.str.contains(r'IMPHASH=7e1327419d10a7eeece5579526f75d9f', case=False) | Hashes.str.contains(r'IMPHASH=084b99aebda8a13e4f774a2ced272e85', case=False) | Hashes.str.contains(r'IMPHASH=81ba5280406320ce6f03a9817d7d6035', case=False) | Hashes.str.contains(r'IMPHASH=e4f1a9234e4ea105321909d4c0e597ae', case=False) | Hashes.str.contains(r'IMPHASH=68a12eb3f32f7e193bd0d722ea6be4ab', case=False) | Hashes.str.contains(r'IMPHASH=c3fd2e688276a184b2528ee590054e5a', case=False) | Hashes.str.contains(r'IMPHASH=531d2392dbdd314fb1d9318fe9e5c4d2', case=False) | Hashes.str.contains(r'IMPHASH=29a1da8841f5363423dcba1a9773809a', case=False) | Hashes.str.contains(r'IMPHASH=9fc4a96d982ebfd6b9d87c0f3ebef681', case=False) | Hashes.str.contains(r'IMPHASH=304c4fcf70cfc8299a3b6eed8e7bbb31', case=False) | Hashes.str.contains(r'IMPHASH=3415f704b3149ea9a3d3a54036b208dd', case=False) | Hashes.str.contains(r'IMPHASH=7cf815757705e26b809574488ed56d0e', case=False) | Hashes.str.contains(r'IMPHASH=28d780857f0f6616f938aca3a38b5072', case=False) | Hashes.str.contains(r'IMPHASH=235102691b04f562ae8aa7ece38d8bc9', case=False) | Hashes.str.contains(r'IMPHASH=262d8fbbf1f514399bb3f230cddc12af', case=False) | Hashes.str.contains(r'IMPHASH=0f3ddbe229201f6fa9a3dbbaf842a556', case=False) | Hashes.str.contains(r'IMPHASH=bd093a7d5ba5632ee52f3466a688ee55', case=False) | Hashes.str.contains(r'IMPHASH=a9e22f5e8f4965960716d94ba7639c9f', case=False) | Hashes.str.contains(r'IMPHASH=528ac7a1e034801d1f20238971c6ec19', case=False) | Hashes.str.contains(r'IMPHASH=45bfe170e0cd654bc1e2ae3fca3ac3f4', case=False) | Hashes.str.contains(r'IMPHASH=7c8c655791b5c853e45aa174e5cc1333', case=False) | Hashes.str.contains(r'IMPHASH=a53b095a8d7366075d445892070cde51', case=False) | Hashes.str.contains(r'IMPHASH=f079f8637a1d4fe2fb93af2a267b68ef', case=False) | Hashes.str.contains(r'IMPHASH=0ebd5902a82ddfef8ed96678c1573a7b', case=False) | Hashes.str.contains(r'IMPHASH=9a970527986cd03e5a25d18b372624a1', case=False) | Hashes.str.contains(r'IMPHASH=87fde0c3f8e7dff7ab0d718d6b1252c8', case=False) | Hashes.str.contains(r'IMPHASH=959dce366573a7aae10b74a08931722a', case=False) | Hashes.str.contains(r'IMPHASH=fce118020e70919e5c8c629687f89e56', case=False) | Hashes.str.contains(r'IMPHASH=86682585c620fa85096a7bedaf990cd1', case=False) | Hashes.str.contains(r'IMPHASH=5f9cf5b0511f3c1129b467d273b921f2', case=False) | Hashes.str.contains(r'IMPHASH=543f80399f79401471523d335ea61642', case=False) | Hashes.str.contains(r'IMPHASH=3ca448454c33a5c72ad5e774de47930a', case=False) | Hashes.str.contains(r'IMPHASH=51ecd9b363fde1f003f4b4f20c874b1b', case=False) | Hashes.str.contains(r'IMPHASH=1f2627fc453dc35031a9502372bd3549', case=False) | Hashes.str.contains(r'IMPHASH=2cf48a541dc193e91bb2a831adcf278e', case=False) | Hashes.str.contains(r'IMPHASH=805e4a267f9495e7c0c430d92b78f8bd', case=False) | Hashes.str.contains(r'IMPHASH=92caaf6ebb43bbe61f3da8526172f776', case=False) | Hashes.str.contains(r'IMPHASH=421730c2b3fa3a7d78c2eda3da1be6a8', case=False) | Hashes.str.contains(r'IMPHASH=aa54fa0523f677e56d6d8199e5e18732', case=False) | Hashes.str.contains(r'IMPHASH=8ee2435c62b02fe0372cde028be489cb', case=False) | Hashes.str.contains(r'IMPHASH=50b6a9c4df6d0c9f517c804ad1307d7c', case=False) | Hashes.str.contains(r'IMPHASH=037b9d19995faadf69a2ce134473e346', case=False) | Hashes.str.contains(r'IMPHASH=2c19472843b56c67efb80d8c447f3cfe', case=False) | Hashes.str.contains(r'IMPHASH=a74f61fdcea718cb9579907b2caf54ab', case=False) | Hashes.str.contains(r'IMPHASH=84d45ee8df6f63b5af419d89003a97bc', case=False) | Hashes.str.contains(r'IMPHASH=69dbb4c8bbe4d8c2e1493f82170b93c4', case=False) | Hashes.str.contains(r'IMPHASH=6903b92e7760c5d7f7c181b64eb13176', case=False) | Hashes.str.contains(r'IMPHASH=d6f977640d4810a784d152e4d3c63a6b', case=False) | Hashes.str.contains(r'IMPHASH=473c3773ca11aa7371dbf350919c5724', case=False) | Hashes.str.contains(r'IMPHASH=87842ffa59724bda8389394bcaeb5d73', case=False) | Hashes.str.contains(r'IMPHASH=18502b56d9ea5dea7f9d31ef85db31d5', case=False) | Hashes.str.contains(r'IMPHASH=b6f67458e30912358144df4adf5264fd', case=False) | Hashes.str.contains(r'IMPHASH=a49a51d7f2ae972483961eb64d17888e', case=False) | Hashes.str.contains(r'IMPHASH=81e2eb25e24938b90806de865630a2b2', case=False) | Hashes.str.contains(r'IMPHASH=96861132665e8d66c0a91e6c02cc6639', case=False) | Hashes.str.contains(r'IMPHASH=69163e5596280d3319375c9bcd4b5da1', case=False) | Hashes.str.contains(r'IMPHASH=4946030efb34ab167180563899d5eb27', case=False) | Hashes.str.contains(r'IMPHASH=4c304943af1b07b15a5efa80f17d9b89', case=False) | Hashes.str.contains(r'IMPHASH=821d74031d3f625bcbd0df08b70f1e77', case=False) | Hashes.str.contains(r'IMPHASH=1bef18e9dda6f1e7bbf7eb76e9ccf16b', case=False) | Hashes.str.contains(r'IMPHASH=21f58b1f2de6ad0e9c019da7a4e7317b', case=False) | Hashes.str.contains(r'IMPHASH=91387ac37086b9b519f945b58095f38d', case=False) | Hashes.str.contains(r'IMPHASH=dcd41632f0ad9683e5c9c7cc083f78f7', case=False) | Hashes.str.contains(r'IMPHASH=ced7ea67fdf3d89a48849e0062278f7d', case=False) | Hashes.str.contains(r'IMPHASH=5713a0c2b363c49706fa0e60151511a8', case=False) | Hashes.str.contains(r'IMPHASH=089e8a8f2bb007852c63b64e66430293', case=False) | Hashes.str.contains(r'IMPHASH=383be1d728b0be96be1b810a131705ee', case=False) | Hashes.str.contains(r'IMPHASH=3d42ff70269b824dd9d4a8cb905669f9', case=False) | Hashes.str.contains(r'IMPHASH=363922cc73591e60f2af113182414230', case=False) | Hashes.str.contains(r'IMPHASH=fa084cdc36f03f1aeddaa3450e2781b1', case=False) | Hashes.str.contains(r'IMPHASH=3c61f9a38aaa7650fcd33b46e794d1bb', case=False) | Hashes.str.contains(r'IMPHASH=42e3f2ffa29901e572f2df03cb872159', case=False) | Hashes.str.contains(r'IMPHASH=4c5fc4519f1417f0630c3343aab7c9d2', case=False) | Hashes.str.contains(r'IMPHASH=d5d40497d82daf7e44255ede810ce7a6', case=False) | Hashes.str.contains(r'IMPHASH=91ee149529956a79a91eeb8c48f00b3d', case=False) | Hashes.str.contains(r'IMPHASH=a387f215b4964a3ca2e3c92f235a6d1b', case=False) | Hashes.str.contains(r'IMPHASH=ca6e77f472ebd5b2ade876e7c773bb57', case=False) | Hashes.str.contains(r'IMPHASH=67bace81ce26ddf73732dd75cbd0c0f2', case=False) | Hashes.str.contains(r'IMPHASH=18b8de84bd7aa83fec79d2c6aaf0a4f5', case=False) | Hashes.str.contains(r'IMPHASH=519cf5394541bf5e2869edeec81521e1', case=False) | Hashes.str.contains(r'IMPHASH=cae90f82e91b9a60af9a0e36c1f73be4', case=False) | Hashes.str.contains(r'IMPHASH=643f4d79f35dddc9bb5cc04a0f0c18d3', case=False) | Hashes.str.contains(r'IMPHASH=6b7d4c6283b9b951b7b2f47a0c5be8c7', case=False) | Hashes.str.contains(r'IMPHASH=b4c857bd3a7b1d8125c0f62aec45401e', case=False) | Hashes.str.contains(r'IMPHASH=49a12b06131d938e9dc40c693b88ba7f', case=False) | Hashes.str.contains(r'IMPHASH=f74aa24adc713dbb957ccb18f3c16a71', case=False) | Hashes.str.contains(r'IMPHASH=6faad89adbfc9d5448bb1bd12e7714cd', case=False) | Hashes.str.contains(r'IMPHASH=5759d90322a7311eaccf4f0ab2c2a7c4', case=False) | Hashes.str.contains(r'IMPHASH=8b6c1a09e11200591663b880a94a8d18', case=False) | Hashes.str.contains(r'IMPHASH=eade2a2576f329e4971bf5044ab24ac7', case=False) | Hashes.str.contains(r'IMPHASH=8b47d6faba90b5c89e27f7119c987e1a', case=False) | Hashes.str.contains(r'IMPHASH=4433528b0f664177546dd3e229f0daa5', case=False) | Hashes.str.contains(r'IMPHASH=c0f234205c50cc713673353c9653eea1', case=False) | Hashes.str.contains(r'IMPHASH=b4b90c1b054ebe273bff4b2fd6927990', case=False) | Hashes.str.contains(r'IMPHASH=f2dc136141066311fddef65f7f417c44', case=False) | Hashes.str.contains(r'IMPHASH=12a08688ec92616a8b639d85cc13a3ed', case=False) | Hashes.str.contains(r'IMPHASH=296afaa5ea70bbd17135afcd04758148', case=False) | Hashes.str.contains(r'IMPHASH=8232d2f79ce126e84cc044543ad82790', case=False) | Hashes.str.contains(r'IMPHASH=e10e743d152cf62f219a7e9192fb533d', case=False) | Hashes.str.contains(r'IMPHASH=e5af2438da6df2aa9750aa632c80cfa4', case=False) | Hashes.str.contains(r'IMPHASH=3a4e0bc46866ca54459753f62c879b62', case=False) | Hashes.str.contains(r'IMPHASH=10cb3185e13390f8931a50a131448cdf', case=False) | Hashes.str.contains(r'IMPHASH=4fb27d2712ef4afdb67e0921d64a5f1e', case=False) | Hashes.str.contains(r'IMPHASH=a96a02cf5f7896a9a9f045d1986bd83c', case=False) | Hashes.str.contains(r'IMPHASH=fd894d394a8ca9abd74f7210ed931682', case=False) | Hashes.str.contains(r'IMPHASH=ca07de87d444c1d2d10e16e9dcc2dc19', case=False) | Hashes.str.contains(r'IMPHASH=1aa10b05dee9268d7ce87f5f56ea9ded', case=False) | Hashes.str.contains(r'IMPHASH=485f7e86663d49c68c8b5f705d310f50', case=False) | Hashes.str.contains(r'IMPHASH=5899e93373114ca9e458e906675132b7', case=False) | Hashes.str.contains(r'IMPHASH=be2d638c3933fc3f5a96e539f9910c5f', case=False) | Hashes.str.contains(r'IMPHASH=fbfa302bf7eb5d615d0968541ee49ce4', case=False) | Hashes.str.contains(r'IMPHASH=f9b9487f25a2c1e08c02f391387c5323', case=False) | Hashes.str.contains(r'IMPHASH=ef102e058f6b88af0d66d26236257706', case=False) | Hashes.str.contains(r'IMPHASH=0f371a913e9fa3ba3a923718e489debb', case=False))"
        ],
        "logsource": {
            "category": "driver_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Malicious Driver Load By Name",
        "id": "39b64854-5497-4b57-a448-40977b8c9679",
        "status": "test",
        "description": "Detects loading of known malicious drivers via the file name of the drivers.",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543.003",
            "attack.t1068"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==6 & (ImageLoaded.str.contains(r'\\\\wfshbr64.sys', case=False) | ImageLoaded.str.contains(r'\\\\ktmutil7odm.sys', case=False) | ImageLoaded.str.contains(r'\\\\ktes.sys', case=False) | ImageLoaded.str.contains(r'\\\\a26363e7b02b13f2b8d697abb90cd5c3.sys', case=False) | ImageLoaded.str.contains(r'\\\\kt2.sys', case=False) | ImageLoaded.str.contains(r'\\\\4748696211bd56c2d93c21cab91e82a5.sys', case=False) | ImageLoaded.str.contains(r'\\\\malicious.sys', case=False) | ImageLoaded.str.contains(r'\\\\a236e7d654cd932b7d11cb604629a2d0.sys', case=False) | ImageLoaded.str.contains(r'\\\\spwizimgvt.sys', case=False) | ImageLoaded.str.contains(r'\\\\c94f405c5929cfcccc8ad00b42c95083.sys', case=False) | ImageLoaded.str.contains(r'\\\\fur.sys', case=False) | ImageLoaded.str.contains(r'\\\\wantd.sys', case=False) | ImageLoaded.str.contains(r'\\\\windbg.sys', case=False) | ImageLoaded.str.contains(r'\\\\4118b86e490aed091b1a219dba45f332.sys', case=False) | ImageLoaded.str.contains(r'\\\\gmer64.sys', case=False) | ImageLoaded.str.contains(r'\\\\1fc7aeeff3ab19004d2e53eae8160ab1.sys', case=False) | ImageLoaded.str.contains(r'\\\\poortry2.sys', case=False) | ImageLoaded.str.contains(r'\\\\wintapix.sys', case=False) | ImageLoaded.str.contains(r'\\\\daxin_blank6.sys', case=False) | ImageLoaded.str.contains(r'\\\\6771b13a53b9c7449d4891e427735ea2.sys', case=False) | ImageLoaded.str.contains(r'\\\\blacklotus_driver.sys', case=False) | ImageLoaded.str.contains(r'\\\\air_system10.sys', case=False) | ImageLoaded.str.contains(r'\\\\dkrtk.sys', case=False) | ImageLoaded.str.contains(r'\\\\7.sys', case=False) | ImageLoaded.str.contains(r'\\\\sense5ext.sys', case=False) | ImageLoaded.str.contains(r'\\\\ktgn.sys', case=False) | ImageLoaded.str.contains(r'\\\\ndislan.sys', case=False) | ImageLoaded.str.contains(r'\\\\nlslexicons0024uvn.sys', case=False) | ImageLoaded.str.contains(r'\\\\be6318413160e589080df02bb3ca6e6a.sys', case=False) | ImageLoaded.str.contains(r'\\\\4.sys', case=False) | ImageLoaded.str.contains(r'\\\\wantd_2.sys', case=False) | ImageLoaded.str.contains(r'\\\\e29f6311ae87542b3d693c1f38e4e3ad.sys', case=False) | ImageLoaded.str.contains(r'\\\\daxin_blank3.sys', case=False) | ImageLoaded.str.contains(r'\\\\gftkyj64.sys', case=False) | ImageLoaded.str.contains(r'\\\\daxin_blank2.sys', case=False) | ImageLoaded.str.contains(r'\\\\wantd_4.sys', case=False) | ImageLoaded.str.contains(r'\\\\reddriver.sys', case=False) | ImageLoaded.str.contains(r'\\\\834761775.sys', case=False) | ImageLoaded.str.contains(r'\\\\mlgbbiicaihflrnh.sys', case=False) | ImageLoaded.str.contains(r'\\\\mjj0ge.sys', case=False) | ImageLoaded.str.contains(r'\\\\daxin_blank.sys', case=False) | ImageLoaded.str.contains(r'\\\\daxin_blank5.sys', case=False) | ImageLoaded.str.contains(r'\\\\poortry1.sys', case=False) | ImageLoaded.str.contains(r'\\\\msqpq.sys', case=False) | ImageLoaded.str.contains(r'\\\\mimidrv.sys', case=False) | ImageLoaded.str.contains(r'\\\\e939448b28a4edc81f1f974cebf6e7d2.sys', case=False) | ImageLoaded.str.contains(r'\\\\prokiller64.sys', case=False) | ImageLoaded.str.contains(r'\\\\nodedriver.sys', case=False) | ImageLoaded.str.contains(r'\\\\wantd_3.sys', case=False) | ImageLoaded.str.contains(r'\\\\lctka.sys', case=False) | ImageLoaded.str.contains(r'\\\\kapchelper_x64.sys', case=False) | ImageLoaded.str.contains(r'\\\\daxin_blank4.sys', case=False) | ImageLoaded.str.contains(r'\\\\a9df5964635ef8bd567ae487c3d214c4.sys', case=False) | ImageLoaded.str.contains(r'\\\\wantd_6.sys', case=False) | ImageLoaded.str.contains(r'\\\\ntbios.sys', case=False) | ImageLoaded.str.contains(r'\\\\wantd_5.sys', case=False) | ImageLoaded.str.contains(r'\\\\pciecubed.sys', case=False) | ImageLoaded.str.contains(r'\\\\mimikatz.sys', case=False) | ImageLoaded.str.contains(r'\\\\nqrmq.sys', case=False) | ImageLoaded.str.contains(r'\\\\2.sys', case=False) | ImageLoaded.str.contains(r'\\\\poortry.sys', case=False) | ImageLoaded.str.contains(r'\\\\ntbios_2.sys', case=False) | ImageLoaded.str.contains(r'\\\\fgme.sys', case=False) | ImageLoaded.str.contains(r'\\\\telephonuafy.sys', case=False) | ImageLoaded.str.contains(r'\\\\typelibde.sys', case=False) | ImageLoaded.str.contains(r'\\\\daxin_blank1.sys', case=False) | ImageLoaded.str.contains(r'\\\\ef0e1725aaf0c6c972593f860531a2ea.sys', case=False) | ImageLoaded.str.contains(r'\\\\5a4fe297c7d42539303137b6d75b150d.sys', case=False))"
        ],
        "logsource": {
            "category": "driver_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Driver Load From A Temporary Directory",
        "id": "2c4523d5-d481-4ed0-8ec3-7fbf0cb41a75",
        "status": "test",
        "description": "Detects a driver load from a temporary directory",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1543.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==6 & ImageLoaded.str.contains(r'\\\\Temp\\\\', case=False)"
        ],
        "logsource": {
            "category": "driver_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Process Hacker Driver Load",
        "id": "67add051-9ee7-4ad3-93ba-42935615ae8d",
        "status": "test",
        "description": "Detects driver load of the Process Hacker tool",
        "tags": [
            "attack.privilege-escalation",
            "cve.2021-21551",
            "attack.t1543"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==6 & (ImageLoaded.str.contains(r'\\\\kprocesshacker.sys', case=False) | Hashes.str.contains(r'IMPHASH=821D74031D3F625BCBD0DF08B70F1E77', case=False) | Hashes.str.contains(r'IMPHASH=F86759BB4DE4320918615DC06E998A39', case=False) | Hashes.str.contains(r'IMPHASH=0A64EEB85419257D0CE32BD5D55C3A18', case=False) | Hashes.str.contains(r'IMPHASH=6E7B34DFC017700B1517B230DF6FF0D0', case=False))"
        ],
        "logsource": {
            "category": "driver_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - System Informer Driver Load",
        "id": "10cb6535-b31d-4512-9962-513dcbc42cc1",
        "status": "test",
        "description": "Detects driver load of the System Informer tool",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==6 & (ImageLoaded.str.contains(r'\\\\SystemInformer.sys', case=False) | Hashes.str.contains(r'SHA256=8B9AD98944AC9886EA4CB07700E71B78BE4A2740934BB7E46CA3B56A7C59AD24', case=False) | Hashes.str.contains(r'SHA256=A41348BEC147CA4D9EA2869817527EB5CEA2E20202AF599D2B30625433BCF454', case=False) | Hashes.str.contains(r'SHA256=38EE0A88AF8535A11EFE8D8DA9C6812AA07067B75A64D99705A742589BDD846D', case=False) | Hashes.str.contains(r'SHA256=A773891ACF203A7EB0C0D30942FB1347648F1CD918AE2BFD9A4857B4DCF5081B', case=False) | Hashes.str.contains(r'SHA256=4C3B81AC88A987BBDF7D41FA0AECC2CEDF5B9BD2F45E7A21F376D05345FC211D', case=False) | Hashes.str.contains(r'SHA256=3241BC14BEC51CE6A691B9A3562E5C1D52E9D057D27A3D67FD0B245C350B6D34', case=False) | Hashes.str.contains(r'SHA256=047C42E9BBA28366868847C7DAFC1E043FB038C796422D37220493517D68EE89', case=False) | Hashes.str.contains(r'SHA256=18931DC81E95D0020466FA091E16869DBE824E543A4C2C8FE644FA71A0F44FEB', case=False) | Hashes.str.contains(r'SHA256=B4C2EF76C204273132FDE38F0DED641C2C5EE767652E64E4C4071A4A973B6C1B', case=False) | Hashes.str.contains(r'SHA256=640954AFC268565F7DAA6E6F81A8EE05311E33E34332B501A3C3FE5B22ADEA97', case=False) | Hashes.str.contains(r'SHA256=251BE949F662C838718F8AA0A5F8211FB90346D02BD63FF91E6B224E0E01B656', case=False) | Hashes.str.contains(r'SHA256=E2606F272F7BA054DF16BE464FDA57211EF0D14A0D959F9C8DCB0575DF1186E4', case=False) | Hashes.str.contains(r'SHA256=3A9E1D17BEEB514F1B9B3BACAEE7420285DE5CBDCE89C5319A992C6CBD1DE138', case=False))"
        ],
        "logsource": {
            "category": "driver_load",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sysmon File Executable Creation Detected",
        "id": "693a44e9-7f26-4cb6-b787-214867672d3a",
        "status": "test",
        "description": "Triggers on any Sysmon \"FileExecutableDetected\" event, which triggers every time a PE that is monitored by the config is created.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==29"
        ],
        "logsource": {
            "product": "windows",
            "service": "sysmon",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/sysmon/sysmon_file_executable_detected.yml"
        }
    },
    {
        "title": "Sysmon Configuration Modification",
        "id": "1f2b5353-573f-4880-8e33-7d04dcf97744",
        "status": "test",
        "description": "Detects when an attacker tries to hide from Sysmon by disabling or stopping it",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[4, 16]) & (State=='Stopped' | \"'Sysmon config state changed'\") & ~ State=='Started'"
        ],
        "logsource": {
            "category": "sysmon_status",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sysmon Blocked Executable",
        "id": "23b71bc5-953e-4971-be4c-c896cda73fc2",
        "status": "test",
        "description": "Triggers on any Sysmon \"FileBlockExecutable\" event, which indicates a violation of the configured block policy",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==27"
        ],
        "logsource": {
            "product": "windows",
            "service": "sysmon",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/sysmon/sysmon_file_block_executable.yml"
        }
    },
    {
        "title": "Sysmon Configuration Change",
        "id": "8ac03a65-6c84-4116-acad-dc1558ff7a77",
        "status": "test",
        "description": "Detects a Sysmon configuration change, which could be the result of a legitimate reconfiguration or someone trying manipulate the configuration",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==16"
        ],
        "logsource": {
            "product": "windows",
            "service": "sysmon",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/sysmon/sysmon_config_modification.yml"
        }
    },
    {
        "title": "Sysmon Blocked File Shredding",
        "id": "c3e5c1b1-45e9-4632-b242-27939c170239",
        "status": "test",
        "description": "Triggers on any Sysmon \"FileBlockShredding\" event, which indicates a violation of the configured shredding policy.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==28"
        ],
        "logsource": {
            "product": "windows",
            "service": "sysmon",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/sysmon/sysmon_file_block_shredding.yml"
        }
    },
    {
        "title": "Sysmon Configuration Error",
        "id": "815cd91b-7dbc-4247-841a-d7dd1392b0a8",
        "status": "test",
        "description": "Detects when an adversary is trying to hide it's action from Sysmon logging based on error messages",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==255 & (Description.str.contains(r'Failed to open service configuration with error', case=False) | Description.str.contains(r'Failed to connect to the driver to update configuration', case=False)) & ~ (Description.str.contains(r'Failed to open service configuration with error', case=False) & Description.str.contains(r'Last error: The media is write protected.', case=False) | Description.str.contains(r'Failed to open service configuration with error 19', case=False) | Description.str.contains(r'Failed to open service configuration with error 93', case=False))"
        ],
        "logsource": {
            "category": "sysmon_error",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Mimikatz Use",
        "id": "06d71506-7beb-4f22-8888-e2e5e2ca7fd8",
        "status": "test",
        "description": "This method detects mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups)",
        "tags": [
            "attack.s0002",
            "attack.lateral-movement",
            "attack.credential-access",
            "car.2013-07-001",
            "car.2019-04-004",
            "attack.t1003.002",
            "attack.t1003.004",
            "attack.t1003.001",
            "attack.t1003.006"
        ],
        "level": "high",
        "rule": [
            "(\"'dpapi::masterkey'\" | \"'eo.oe.kiwi'\" | \"'event::clear'\" | \"'event::drop'\" | \"'gentilkiwi.com'\" | \"'kerberos::golden'\" | \"'kerberos::ptc'\" | \"'kerberos::ptt'\" | \"'kerberos::tgt'\" | \"'Kiwi Legit Printer'\" | \"'lsadump::'\" | \"'mimidrv.sys'\" | \"'\\\\mimilib.dll'\" | \"'misc::printnightmare'\" | \"'misc::shadowcopies'\" | \"'misc::skeleton'\" | \"'privilege::backup'\" | \"'privilege::debug'\" | \"'privilege::driver'\" | \"'sekurlsa::'\") & ~ EventID==15"
        ],
        "logsource": {
            "product": "windows",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/win_alert_mimikatz_keywords.yml"
        }
    },
    {
        "title": "DNS Query To Visual Studio Code Tunnels Domain",
        "id": "b3e6418f-7c7a-4fad-993a-93b65027a9f1",
        "status": "test",
        "description": "Detects DNS query requests to Visual Studio Code tunnel domains. Attackers can abuse that feature to establish a reverse shell or persistence on a machine.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1071.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & QueryName.str.contains(r'.tunnels.api.visualstudio.com', case=False)"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "TeamViewer Domain Query By Non-TeamViewer Application",
        "id": "778ba9a8-45e4-4b80-8e3e-34a419f0b85e",
        "status": "test",
        "description": "Detects DNS queries to a TeamViewer domain only resolved by a TeamViewer client by an image that isn't named TeamViewer (sometimes used by threat actors for obfuscation)",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & (QueryName==['taf.teamviewer.com', 'udp.ping.teamviewer.com']) & ~ Image.str.contains(r'TeamViewer', case=False)"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS Query To AzureWebsites.NET By Non-Browser Process",
        "id": "e043f529-8514-4205-8ab0-7f7d2927b400",
        "status": "experimental",
        "description": "Detects a DNS query by a non browser process on the system to \"azurewebsites.net\". The latter was often used by threat actors as a malware hosting and exfiltration site.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & QueryName.str.contains(r'azurewebsites.net', case=False) & ~ (Image==['C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'] | Image==['C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe', 'C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe'] | Image==['C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe', 'C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe'] | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\', case=False) | Image.str.contains(r'\\\\WindowsApps\\\\MicrosoftEdge.exe', case=False) | Image==['C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe', 'C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe'] | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeCore\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\EdgeCore\\\\', case=False)) & (Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False)) | Image.str.contains(r'\\\\safari.exe', case=False) | Image.str.contains(r'\\\\MsMpEng.exe', case=False) | Image.str.contains(r'\\\\MsSense.exe', case=False) | Image.str.contains(r'\\\\brave.exe', case=False) & Image.str.contains(r'C:\\\\Program Files\\\\BraveSoftware\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Maxthon\\\\', case=False) & Image.str.contains(r'\\\\maxthon.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\Opera\\\\', case=False) & Image.str.contains(r'\\\\opera.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\SeaMonkey\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\SeaMonkey\\\\', case=False)) & Image.str.contains(r'\\\\seamonkey.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Vivaldi\\\\', case=False) & Image.str.contains(r'\\\\vivaldi.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Naver\\\\Naver Whale\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Naver\\\\Naver Whale\\\\', case=False)) & Image.str.contains(r'\\\\whale.exe', case=False) | Image.str.contains(r'\\\\Tor Browser\\\\', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Waterfox\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Waterfox\\\\', case=False)) & Image.str.contains(r'\\\\Waterfox.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\midori-ng\\\\', case=False) & Image.str.contains(r'\\\\Midori Next Generation.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\SlimBrowser\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\SlimBrowser\\\\', case=False)) & Image.str.contains(r'\\\\slimbrowser.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Flock\\\\', case=False) & Image.str.contains(r'\\\\Flock.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Phoebe\\\\', case=False) & Image.str.contains(r'\\\\Phoebe.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Falkon\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Falkon\\\\', case=False)) & Image.str.contains(r'\\\\falkon.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Avant Browser\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Avant Browser\\\\', case=False)) & Image.str.contains(r'\\\\avant.exe', case=False))"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS Query Request To OneLaunch Update Service",
        "id": "df68f791-ad95-447f-a271-640a0dab9cf8",
        "status": "test",
        "description": "Detects DNS query requests to \"update.onelaunch.com\". This domain is associated with the OneLaunch adware application.\nWhen the OneLaunch application is installed it will attempt to get updates from this domain.\n",
        "tags": [
            "attack.collection",
            "attack.t1056"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & QueryName=='update.onelaunch.com' & Image.str.contains(r'\\\\OneLaunch.exe', case=False)"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS Query To Devtunnels Domain",
        "id": "1cb0c6ce-3d00-44fc-ab9c-6d6d577bf20b",
        "status": "test",
        "description": "Detects DNS query requests to Devtunnels domains. Attackers can abuse that feature to establish a reverse shell or persistence on a machine.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1071.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & QueryName.str.contains(r'.devtunnels.ms', case=False)"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Cloudflared Tunnels Related DNS Requests",
        "id": "a1d9eec5-33b2-4177-8d24-27fe754d0812",
        "status": "test",
        "description": "Detects DNS requests to Cloudflared tunnels domains.\nAttackers can abuse that feature to establish a reverse shell or persistence on a machine.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1071.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & (QueryName.str.contains(r'.v2.argotunnel.com', case=False) | QueryName.str.contains(r'protocol-v2.argotunnel.com', case=False) | QueryName.str.contains(r'trycloudflare.com', case=False) | QueryName.str.contains(r'update.argotunnel.com', case=False))"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS HybridConnectionManager Service Bus",
        "id": "7bd3902d-8b8b-4dd4-838a-c6862d40150d",
        "status": "test",
        "description": "Detects Azure Hybrid Connection Manager services querying the Azure service bus service",
        "tags": [
            "attack.persistence",
            "attack.t1554"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & QueryName.str.contains(r'servicebus.windows.net', case=False) & Image.str.contains(r'HybridConnectionManager', case=False)"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS Query Request By Regsvr32.EXE",
        "id": "36e037c4-c228-4866-b6a3-48eb292b9955",
        "status": "test",
        "description": "Detects DNS queries initiated by \"Regsvr32.exe\"",
        "tags": [
            "attack.execution",
            "attack.t1559.001",
            "attack.defense-evasion",
            "attack.t1218.010"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & Image.str.contains(r'\\\\regsvr32.exe', case=False)"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS Query Request By QuickAssist.EXE",
        "id": "882e858a-3233-4ba8-855e-2f3d3575803d",
        "status": "experimental",
        "description": "Detects DNS queries initiated by \"QuickAssist.exe\" to Microsoft Quick Assist primary endpoint that is used to establish a session.\n",
        "tags": [
            "attack.initial-access",
            "attack.t1071.001",
            "attack.t1210"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & Image.str.contains(r'\\\\QuickAssist.exe', case=False) & QueryName.str.contains(r'remoteassistance.support.services.microsoft.com', case=False)"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS Server Discovery Via LDAP Query",
        "id": "a21bcd7e-38ec-49ad-b69a-9ea17e69509e",
        "status": "test",
        "description": "Detects DNS server discovery via LDAP query requests from uncommon applications",
        "tags": [
            "attack.discovery",
            "attack.t1482"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & QueryName.str.contains(r'_ldap.', case=False) & ~ (Image.str.contains(r':\\\\Program Files\\\\', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\', case=False) | Image.str.contains(r':\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False) & Image.str.contains(r'\\\\MsMpEng.exe', case=False) | Image=='<unknown process>' | Image is null) & ~ (Image.str.contains(r'C:\\\\WindowsAzure\\\\GuestAgent', case=False) | Image.str.contains(r'\\\\chrome.exe', case=False) | Image.str.contains(r'\\\\firefox.exe', case=False) | Image.str.contains(r'\\\\opera.exe', case=False))"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS Query for Anonfiles.com Domain - Sysmon",
        "id": "065cceea-77ec-4030-9052-fc0affea7110",
        "status": "test",
        "description": "Detects DNS queries for \"anonfiles.com\", which is an anonymous file upload platform often used for malicious purposes",
        "tags": [
            "attack.exfiltration",
            "attack.t1567.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & QueryName.str.contains(r'.anonfiles.com', case=False)"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS Query To Ufile.io",
        "id": "1cbbeaaf-3c8c-4e4c-9d72-49485b6a176b",
        "status": "test",
        "description": "Detects DNS queries to \"ufile.io\", which was seen abused by malware and threat actors as a method for data exfiltration",
        "tags": [
            "attack.exfiltration",
            "attack.t1567.002"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & QueryName.str.contains(r'ufile.io', case=False)"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious DNS Query for IP Lookup Service APIs",
        "id": "ec82e2a5-81ea-4211-a1f8-37a0286df2c2",
        "status": "test",
        "description": "Detects DNS queries for IP lookup services such as \"api.ipify.org\" originating from a non browser process.",
        "tags": [
            "attack.reconnaissance",
            "attack.t1590"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & (QueryName==['www.ip.cn', 'l2.io'] | QueryName.str.contains(r'api.2ip.ua', case=False) | QueryName.str.contains(r'api.bigdatacloud.net', case=False) | QueryName.str.contains(r'api.ipify.org', case=False) | QueryName.str.contains(r'bot.whatismyipaddress.com', case=False) | QueryName.str.contains(r'canireachthe.net', case=False) | QueryName.str.contains(r'checkip.amazonaws.com', case=False) | QueryName.str.contains(r'checkip.dyndns.org', case=False) | QueryName.str.contains(r'curlmyip.com', case=False) | QueryName.str.contains(r'db-ip.com', case=False) | QueryName.str.contains(r'edns.ip-api.com', case=False) | QueryName.str.contains(r'eth0.me', case=False) | QueryName.str.contains(r'freegeoip.app', case=False) | QueryName.str.contains(r'geoipy.com', case=False) | QueryName.str.contains(r'getip.pro', case=False) | QueryName.str.contains(r'icanhazip.com', case=False) | QueryName.str.contains(r'ident.me', case=False) | QueryName.str.contains(r'ifconfig.io', case=False) | QueryName.str.contains(r'ifconfig.me', case=False) | QueryName.str.contains(r'ip-api.com', case=False) | QueryName.str.contains(r'ip.360.cn', case=False) | QueryName.str.contains(r'ip.anysrc.net', case=False) | QueryName.str.contains(r'ip.taobao.com', case=False) | QueryName.str.contains(r'ip.tyk.nu', case=False) | QueryName.str.contains(r'ipaddressworld.com', case=False) | QueryName.str.contains(r'ipapi.co', case=False) | QueryName.str.contains(r'ipconfig.io', case=False) | QueryName.str.contains(r'ipecho.net', case=False) | QueryName.str.contains(r'ipinfo.io', case=False) | QueryName.str.contains(r'ipip.net', case=False) | QueryName.str.contains(r'ipof.in', case=False) | QueryName.str.contains(r'ipv4.icanhazip.com', case=False) | QueryName.str.contains(r'ipv4bot.whatismyipaddress.com', case=False) | QueryName.str.contains(r'ipv6-test.com', case=False) | QueryName.str.contains(r'ipwho.is', case=False) | QueryName.str.contains(r'jsonip.com', case=False) | QueryName.str.contains(r'myexternalip.com', case=False) | QueryName.str.contains(r'seeip.org', case=False) | QueryName.str.contains(r'wgetip.com', case=False) | QueryName.str.contains(r'whatismyip.akamai.com', case=False) | QueryName.str.contains(r'whois.pconline.com.cn', case=False) | QueryName.str.contains(r'wtfismyip.com', case=False)) & ~ (Image.str.contains(r'\\\\brave.exe', case=False) | Image==['C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'] | Image==['C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe', 'C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe'] | Image==['C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe', 'C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe'] | Image.str.contains(r'\\\\maxthon.exe', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\', case=False) | Image.str.contains(r'\\\\WindowsApps\\\\MicrosoftEdge.exe', case=False) | Image==['C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe', 'C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe'] | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeCore\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\EdgeCore\\\\', case=False)) & (Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False)) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\safari.exe', case=False) | Image.str.contains(r'\\\\seamonkey.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False) | Image.str.contains(r'\\\\whale.exe', case=False))"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS Query Tor .Onion Address - Sysmon",
        "id": "b55ca2a3-7cff-4dda-8bdd-c7bfa63bf544",
        "status": "test",
        "description": "Detects DNS queries to an \".onion\" address related to Tor routing networks",
        "tags": [
            "attack.command-and-control",
            "attack.t1090.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & QueryName.str.contains(r'.onion', case=False)"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "AppX Package Installation Attempts Via AppInstaller.EXE",
        "id": "7cff77e1-9663-46a3-8260-17f2e1aa9d0a",
        "status": "test",
        "description": "Detects DNS queries made by \"AppInstaller.EXE\". The AppInstaller is the default handler for the \"ms-appinstaller\" URI. It attempts to load/install a package from the referenced URL\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & Image.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\Microsoft.DesktopAppInstaller_', case=False) & Image.str.contains(r'\\\\AppInstaller.exe', case=False)"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS Query To MEGA Hosting Website",
        "id": "613c03ba-0779-4a53-8a1f-47f914a4ded3",
        "status": "test",
        "description": "Detects DNS queries for subdomains related to MEGA sharing website",
        "tags": [
            "attack.exfiltration",
            "attack.t1567.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & QueryName.str.contains(r'userstorage.mega.co.nz', case=False)"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS Query To Remote Access Software Domain From Non-Browser App",
        "id": "4d07b1f4-cb00-4470-b9f8-b0191d48ff52",
        "status": "test",
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & (QueryName.str.contains(r'agent.jumpcloud.com', case=False) | QueryName.str.contains(r'agentreporting.atera.com', case=False) | QueryName.str.contains(r'ammyy.com', case=False) | QueryName.str.contains(r'api.parsec.app', case=False) | QueryName.str.contains(r'api.playanext.com', case=False) | QueryName.str.contains(r'api.splashtop.com', case=False) | QueryName.str.contains(r'app.atera.com', case=False) | QueryName.str.contains(r'assist.zoho.com', case=False) | QueryName.str.contains(r'authentication.logmeininc.com', case=False) | QueryName.str.contains(r'beyondtrustcloud.com', case=False) | QueryName.str.contains(r'cdn.kaseya.net', case=False) | QueryName.str.contains(r'client.teamviewer.com', case=False) | QueryName.str.contains(r'comserver.corporate.beanywhere.com', case=False) | QueryName.str.contains(r'control.connectwise.com', case=False) | QueryName.str.contains(r'downloads.zohocdn.com', case=False) | QueryName.str.contains(r'dwservice.net', case=False) | QueryName.str.contains(r'express.gotoassist.com', case=False) | QueryName.str.contains(r'getgo.com', case=False) | QueryName.str.contains(r'getscreen.me', case=False) | QueryName.str.contains(r'integratedchat.teamviewer.com', case=False) | QueryName.str.contains(r'join.zoho.com', case=False) | QueryName.str.contains(r'kickstart.jumpcloud.com', case=False) | QueryName.str.contains(r'license.bomgar.com', case=False) | QueryName.str.contains(r'logmein-gateway.com', case=False) | QueryName.str.contains(r'logmein.com', case=False) | QueryName.str.contains(r'logmeincdn.http.internapcdn.net', case=False) | QueryName.str.contains(r'n-able.com', case=False) | QueryName.str.contains(r'net.anydesk.com', case=False) | QueryName.str.contains(r'netsupportsoftware.com', case=False) | QueryName.str.contains(r'parsecusercontent.com', case=False) | QueryName.str.contains(r'pubsub.atera.com', case=False) | QueryName.str.contains(r'relay.kaseya.net', case=False) | QueryName.str.contains(r'relay.screenconnect.com', case=False) | QueryName.str.contains(r'relay.splashtop.com', case=False) | QueryName.str.contains(r'remoteassistance.support.services.microsoft.com', case=False) | QueryName.str.contains(r'remotedesktop-pa.googleapis.com', case=False) | QueryName.str.contains(r'remoteutilities.com', case=False) | QueryName.str.contains(r'secure.logmeinrescue.com', case=False) | QueryName.str.contains(r'services.vnc.com', case=False) | QueryName.str.contains(r'static.remotepc.com', case=False) | QueryName.str.contains(r'swi-rc.com', case=False) | QueryName.str.contains(r'swi-tc.com', case=False) | QueryName.str.contains(r'tailscale.com', case=False) | QueryName.str.contains(r'telemetry.servers.qetqo.com', case=False) | QueryName.str.contains(r'tmate.io', case=False) | QueryName.str.contains(r'twingate.com', case=False) | QueryName.str.contains(r'zohoassist.com', case=False) | QueryName.str.contains(r'.rustdesk.com', case=False) & QueryName.str.contains(r'rs-', case=False)) & ~ (Image==['C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'] | Image==['C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe', 'C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe'] | Image==['C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe', 'C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe'] | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\', case=False) | Image.str.contains(r'\\\\WindowsApps\\\\MicrosoftEdge.exe', case=False) | Image==['C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe', 'C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe'] | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeCore\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\EdgeCore\\\\', case=False)) & (Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False)) | Image.str.contains(r'\\\\safari.exe', case=False) | Image.str.contains(r'\\\\MsMpEng.exe', case=False) | Image.str.contains(r'\\\\MsSense.exe', case=False) | Image.str.contains(r'\\\\brave.exe', case=False) & Image.str.contains(r'C:\\\\Program Files\\\\BraveSoftware\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Maxthon\\\\', case=False) & Image.str.contains(r'\\\\maxthon.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\Opera\\\\', case=False) & Image.str.contains(r'\\\\opera.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\SeaMonkey\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\SeaMonkey\\\\', case=False)) & Image.str.contains(r'\\\\seamonkey.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Vivaldi\\\\', case=False) & Image.str.contains(r'\\\\vivaldi.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Naver\\\\Naver Whale\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Naver\\\\Naver Whale\\\\', case=False)) & Image.str.contains(r'\\\\whale.exe', case=False) | Image.str.contains(r'\\\\Tor Browser\\\\', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Waterfox\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Waterfox\\\\', case=False)) & Image.str.contains(r'\\\\Waterfox.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\midori-ng\\\\', case=False) & Image.str.contains(r'\\\\Midori Next Generation.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\SlimBrowser\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\SlimBrowser\\\\', case=False)) & Image.str.contains(r'\\\\slimbrowser.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Flock\\\\', case=False) & Image.str.contains(r'\\\\Flock.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Phoebe\\\\', case=False) & Image.str.contains(r'\\\\Phoebe.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Falkon\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Falkon\\\\', case=False)) & Image.str.contains(r'\\\\falkon.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Avant Browser\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Avant Browser\\\\', case=False)) & Image.str.contains(r'\\\\avant.exe', case=False))"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Cobalt Strike DNS Beaconing - Sysmon",
        "id": "f356a9c4-effd-4608-bbf8-408afd5cd006",
        "status": "test",
        "description": "Detects a program that invoked suspicious DNS queries known from Cobalt Strike beacons",
        "tags": [
            "attack.command-and-control",
            "attack.t1071.004"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==22 & (QueryName.str.contains(r'aaa.stage.', case=False) | QueryName.str.contains(r'post.1', case=False) | QueryName.str.contains(r'.stage.123456.', case=False))"
        ],
        "logsource": {
            "category": "dns_query",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Connection Initiated To Potential Dead Drop Resolver Domain",
        "id": "297ae038-edc2-4b2e-bb3e-7c5fc94dd5c7",
        "status": "test",
        "description": "Detects an executable, which is not an internet browser or known application, initiating network connections to legit popular websites, which were seen to be used as dead drop resolvers in previous attacks.\nIn this context attackers leverage known websites such as \"facebook\", \"youtube\", etc. In order to pass through undetected.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1102",
            "attack.t1102.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & (DestinationHostname.str.contains(r'.t.me', case=False) | DestinationHostname.str.contains(r'4shared.com', case=False) | DestinationHostname.str.contains(r'abuse.ch', case=False) | DestinationHostname.str.contains(r'anonfiles.com', case=False) | DestinationHostname.str.contains(r'cdn.discordapp.com', case=False) | DestinationHostname.str.contains(r'cloudflare.com', case=False) | DestinationHostname.str.contains(r'ddns.net', case=False) | DestinationHostname.str.contains(r'discord.com', case=False) | DestinationHostname.str.contains(r'docs.google.com', case=False) | DestinationHostname.str.contains(r'drive.google.com', case=False) | DestinationHostname.str.contains(r'dropbox.com', case=False) | DestinationHostname.str.contains(r'dropmefiles.com', case=False) | DestinationHostname.str.contains(r'facebook.com', case=False) | DestinationHostname.str.contains(r'feeds.rapidfeeds.com', case=False) | DestinationHostname.str.contains(r'fotolog.com', case=False) | DestinationHostname.str.contains(r'ghostbin.co/', case=False) | DestinationHostname.str.contains(r'githubusercontent.com', case=False) | DestinationHostname.str.contains(r'gofile.io', case=False) | DestinationHostname.str.contains(r'hastebin.com', case=False) | DestinationHostname.str.contains(r'imgur.com', case=False) | DestinationHostname.str.contains(r'livejournal.com', case=False) | DestinationHostname.str.contains(r'mediafire.com', case=False) | DestinationHostname.str.contains(r'mega.co.nz', case=False) | DestinationHostname.str.contains(r'mega.nz', case=False) | DestinationHostname.str.contains(r'onedrive.com', case=False) | DestinationHostname.str.contains(r'pages.dev', case=False) | DestinationHostname.str.contains(r'paste.ee', case=False) | DestinationHostname.str.contains(r'pastebin.com', case=False) | DestinationHostname.str.contains(r'pastebin.pl', case=False) | DestinationHostname.str.contains(r'pastetext.net', case=False) | DestinationHostname.str.contains(r'pixeldrain.com', case=False) | DestinationHostname.str.contains(r'privatlab.com', case=False) | DestinationHostname.str.contains(r'privatlab.net', case=False) | DestinationHostname.str.contains(r'reddit.com', case=False) | DestinationHostname.str.contains(r'send.exploit.in', case=False) | DestinationHostname.str.contains(r'sendspace.com', case=False) | DestinationHostname.str.contains(r'steamcommunity.com', case=False) | DestinationHostname.str.contains(r'storage.googleapis.com', case=False) | DestinationHostname.str.contains(r'technet.microsoft.com', case=False) | DestinationHostname.str.contains(r'temp.sh', case=False) | DestinationHostname.str.contains(r'transfer.sh', case=False) | DestinationHostname.str.contains(r'trycloudflare.com', case=False) | DestinationHostname.str.contains(r'twitter.com', case=False) | DestinationHostname.str.contains(r'ufile.io', case=False) | DestinationHostname.str.contains(r'vimeo.com', case=False) | DestinationHostname.str.contains(r'w3spaces.com', case=False) | DestinationHostname.str.contains(r'wetransfer.com', case=False) | DestinationHostname.str.contains(r'workers.dev', case=False) | DestinationHostname.str.contains(r'youtube.com', case=False)) & ~ (Image==['C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'] | Image.str.contains(r'C:\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', case=False) | Image==['C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe', 'C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe'] | Image.str.contains(r'C:\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\AppData\\\\Local\\\\Mozilla Firefox\\\\firefox.exe', case=False) | Image==['C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe', 'C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe'] | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\', case=False) | Image.str.contains(r'\\\\WindowsApps\\\\MicrosoftEdge.exe', case=False) | Image==['C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe', 'C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe'] | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeCore\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\EdgeCore\\\\', case=False)) & (Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False)) | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Safari\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Safari\\\\', case=False)) & Image.str.contains(r'\\\\safari.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Windows Defender Advanced Threat Protection\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Windows Defender\\\\', case=False) | Image.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False)) & (Image.str.contains(r'\\\\MsMpEng.exe', case=False) | Image.str.contains(r'\\\\MsSense.exe', case=False)) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\PRTG Network Monitor\\\\PRTG Probe.exe', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\PRTG Network Monitor\\\\PRTG Probe.exe', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\BraveSoftware\\\\', case=False) & Image.str.contains(r'\\\\brave.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Maxthon\\\\', case=False) & Image.str.contains(r'\\\\maxthon.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\Opera\\\\', case=False) & Image.str.contains(r'\\\\opera.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\SeaMonkey\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\SeaMonkey\\\\', case=False)) & Image.str.contains(r'\\\\seamonkey.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Vivaldi\\\\', case=False) & Image.str.contains(r'\\\\vivaldi.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Naver\\\\Naver Whale\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Naver\\\\Naver Whale\\\\', case=False)) & Image.str.contains(r'\\\\whale.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Waterfox\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Waterfox\\\\', case=False)) & Image.str.contains(r'\\\\Waterfox.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\midori-ng\\\\', case=False) & Image.str.contains(r'\\\\Midori Next Generation.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\SlimBrowser\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\SlimBrowser\\\\', case=False)) & Image.str.contains(r'\\\\slimbrowser.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Flock\\\\', case=False) & Image.str.contains(r'\\\\Flock.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Phoebe\\\\', case=False) & Image.str.contains(r'\\\\Phoebe.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Falkon\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Falkon\\\\', case=False)) & Image.str.contains(r'\\\\falkon.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\QtWeb\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\QtWeb\\\\', case=False)) & Image.str.contains(r'\\\\QtWeb.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Avant Browser\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Avant Browser\\\\', case=False)) & Image.str.contains(r'\\\\avant.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\WindowsApps\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\', case=False)) & Image.str.contains(r'\\\\WhatsApp.exe', case=False) & DestinationHostname.str.contains(r'facebook.com', case=False) | Image.str.contains(r'\\\\AppData\\\\Roaming\\\\Telegram Desktop\\\\', case=False) & Image.str.contains(r'\\\\Telegram.exe', case=False) & DestinationHostname.str.contains(r'.t.me', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\', case=False) & Image.str.contains(r'\\\\OneDrive.exe', case=False) & DestinationHostname.str.contains(r'onedrive.com', case=False) | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Dropbox\\\\Client\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Dropbox\\\\Client\\\\', case=False)) & (Image.str.contains(r'\\\\Dropbox.exe', case=False) | Image.str.contains(r'\\\\DropboxInstaller.exe', case=False)) & DestinationHostname.str.contains(r'dropbox.com', case=False) | (Image.str.contains(r'\\\\MEGAsync.exe', case=False) | Image.str.contains(r'*\\\\MEGAsyncSetup32_*RC.exe') | Image.str.contains(r'\\\\MEGAsyncSetup32.exe', case=False) | Image.str.contains(r'\\\\MEGAsyncSetup64.exe', case=False) | Image.str.contains(r'\\\\MEGAupdater.exe', case=False)) & (DestinationHostname.str.contains(r'mega.co.nz', case=False) | DestinationHostname.str.contains(r'mega.nz', case=False)) | (Image.str.contains(r'C:\\\\Program Files\\\\Google\\\\Drive File Stream\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Google\\\\Drive File Stream\\\\', case=False)) & Image.str.contains(r'GoogleDriveFS.exe', case=False) & DestinationHostname.str.contains(r'drive.google.com', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Discord\\\\', case=False) & Image.str.contains(r'\\\\Discord.exe', case=False) & (DestinationHostname.str.contains(r'discord.com', case=False) | DestinationHostname.str.contains(r'cdn.discordapp.com', case=False)) | Image is null | Image=='')"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Outbound Network Connection Initiated By Cmstp.EXE",
        "id": "efafe0bf-4238-479e-af8f-797bd3490d2d",
        "status": "test",
        "description": "Detects a network connection initiated by Cmstp.EXE\nIts uncommon for \"cmstp.exe\" to initiate an outbound network connection. Investigate the source of such requests to determine if they are malicious.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Image.str.contains(r'\\\\cmstp.exe', case=False) & Initiated=='true' & ~ (DestinationIp.str.contains(r'127.', case=False) | DestinationIp.str.contains(r'10.', case=False) | DestinationIp.str.contains(r'172.16.', case=False) | DestinationIp.str.contains(r'172.17.', case=False) | DestinationIp.str.contains(r'172.18.', case=False) | DestinationIp.str.contains(r'172.19.', case=False) | DestinationIp.str.contains(r'172.20.', case=False) | DestinationIp.str.contains(r'172.21.', case=False) | DestinationIp.str.contains(r'172.22.', case=False) | DestinationIp.str.contains(r'172.23.', case=False) | DestinationIp.str.contains(r'172.24.', case=False) | DestinationIp.str.contains(r'172.25.', case=False) | DestinationIp.str.contains(r'172.26.', case=False) | DestinationIp.str.contains(r'172.27.', case=False) | DestinationIp.str.contains(r'172.28.', case=False) | DestinationIp.str.contains(r'172.29.', case=False) | DestinationIp.str.contains(r'172.30.', case=False) | DestinationIp.str.contains(r'172.31.', case=False) | DestinationIp.str.contains(r'192.168.', case=False) | DestinationIp.str.contains(r'169.254.', case=False) | DestinationIp==['::1/128'] | DestinationIp.str.contains(r'fe8', case=False) | DestinationIp.str.contains(r'fe9', case=False) | DestinationIp.str.contains(r'fea', case=False) | DestinationIp.str.contains(r'feb', case=False) | DestinationIp.str.contains(r'fc', case=False) | DestinationIp.str.contains(r'fd', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Connection to Active Directory Web Services",
        "id": "b3ad3c0f-c949-47a1-a30e-b0491ccae876",
        "status": "test",
        "description": "Detects uncommon network connections to the Active Directory Web Services (ADWS) from processes not typically associated with ADWS management.\n",
        "tags": [
            "attack.discovery",
            "attack.t1087"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated==True & DestinationPort==9389 & ~ (Image=='C:\\\\Windows\\\\system32\\\\dsac.exe' | Image=='C:\\\\Program Files\\\\Microsoft Monitoring Agent\\\\' | Image.str.contains(r'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\PowerShell\\\\7-preview\\\\pwsh.ex', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Network Connection Initiated By Certutil.EXE",
        "id": "0dba975d-a193-4ed1-a067-424df57570d1",
        "status": "test",
        "description": "Detects a network connection initiated by the certutil.exe utility.\nAttackers can abuse the utility in order to download malware or additional payloads.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Image.str.contains(r'\\\\certutil.exe', case=False) & Initiated=='true' & (DestinationPort==[80, 135, 443, 445])"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Wordpad Outbound Connections",
        "id": "786cdae8-fefb-4eb2-9227-04e34060db01",
        "status": "test",
        "description": "Detects a network connection initiated by \"wordpad.exe\" over uncommon destination ports.\nThis might indicate potential process injection activity from a beacon or similar mechanisms.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.command-and-control"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & Image.str.contains(r'\\\\wordpad.exe', case=False) & ~ (DestinationPort==[80, 139, 443, 445, 465, 587, 993, 995])"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Connection Initiated By AddinUtil.EXE",
        "id": "5205613d-2a63-4412-a895-3a2458b587b3",
        "status": "test",
        "description": "Detects a network connection initiated by the Add-In deployment cache updating utility \"AddInutil.exe\".\nThis could indicate a potential command and control communication as this tool doesn't usually initiate network activity.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & Image.str.contains(r'\\\\addinutil.exe', case=False)"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Connection Initiated To AzureWebsites.NET By Non-Browser Process",
        "id": "5c80b618-0dbb-46e6-acbb-03d90bcb6d83",
        "status": "experimental",
        "description": "Detects an initiated network connection by a non browser process on the system to \"azurewebsites.net\". The latter was often used by threat actors as a malware hosting and exfiltration site.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1102",
            "attack.t1102.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & DestinationHostname.str.contains(r'azurewebsites.net', case=False) & ~ (Image==['C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'] | Image.str.contains(r'C:\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', case=False) | Image==['C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe', 'C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe'] | Image.str.contains(r'C:\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\AppData\\\\Local\\\\Mozilla Firefox\\\\firefox.exe', case=False) | Image==['C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe', 'C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe'] | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\', case=False) | Image.str.contains(r'\\\\WindowsApps\\\\MicrosoftEdge.exe', case=False) | Image==['C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe', 'C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe'] | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeCore\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\EdgeCore\\\\', case=False)) & (Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False)) | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Safari\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Safari\\\\', case=False)) & Image.str.contains(r'\\\\safari.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Windows Defender Advanced Threat Protection\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Windows Defender\\\\', case=False) | Image.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False)) & (Image.str.contains(r'\\\\MsMpEng.exe', case=False) | Image.str.contains(r'\\\\MsSense.exe', case=False)) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\PRTG Network Monitor\\\\PRTG Probe.exe', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\PRTG Network Monitor\\\\PRTG Probe.exe', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\BraveSoftware\\\\', case=False) & Image.str.contains(r'\\\\brave.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Maxthon\\\\', case=False) & Image.str.contains(r'\\\\maxthon.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\Opera\\\\', case=False) & Image.str.contains(r'\\\\opera.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\SeaMonkey\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\SeaMonkey\\\\', case=False)) & Image.str.contains(r'\\\\seamonkey.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Vivaldi\\\\', case=False) & Image.str.contains(r'\\\\vivaldi.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Naver\\\\Naver Whale\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Naver\\\\Naver Whale\\\\', case=False)) & Image.str.contains(r'\\\\whale.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Waterfox\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Waterfox\\\\', case=False)) & Image.str.contains(r'\\\\Waterfox.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\SlimBrowser\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\SlimBrowser\\\\', case=False)) & Image.str.contains(r'\\\\slimbrowser.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Flock\\\\', case=False) & Image.str.contains(r'\\\\Flock.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Phoebe\\\\', case=False) & Image.str.contains(r'\\\\Phoebe.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Falkon\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Falkon\\\\', case=False)) & Image.str.contains(r'\\\\falkon.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\QtWeb\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\QtWeb\\\\', case=False)) & Image.str.contains(r'\\\\QtWeb.exe', case=False) | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Avant Browser\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Avant Browser\\\\', case=False)) & Image.str.contains(r'\\\\avant.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Discord\\\\', case=False) & Image.str.contains(r'\\\\Discord.exe', case=False) | Image is null | Image=='')"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Connection Initiated To Mega.nz",
        "id": "fdeebdf0-9f3f-4d08-84a6-4c4d13e39fe4",
        "status": "test",
        "description": "Detects a network connection initiated by a binary to \"api.mega.co.nz\".\nAttackers were seen abusing file sharing websites similar to \"mega.nz\" in order to upload/download additional payloads.\n",
        "tags": [
            "attack.exfiltration",
            "attack.t1567.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & (DestinationHostname.str.contains(r'mega.co.nz', case=False) | DestinationHostname.str.contains(r'mega.nz', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Outbound RDP Connections Over Non-Standard Tools",
        "id": "ed74fe75-7594-4b4b-ae38-e38e3fd2eb23",
        "status": "test",
        "description": "Detects Non-Standard tools initiating a connection over port 3389 indicating possible lateral movement.\nAn initial baseline is required before using this utility to exclude third party RDP tooling that you might use.\n",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.001",
            "car.2013-07-002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & DestinationPort==3389 & Initiated=='true' & ~ (Image==['C:\\\\Windows\\\\System32\\\\mstsc.exe', 'C:\\\\Windows\\\\SysWOW64\\\\mstsc.exe']) & ~ (Image=='C:\\\\Windows\\\\System32\\\\dns.exe' & SourcePort==53 & Protocol=='udp' | Image.str.contains(r'\\\\Avast Software\\\\Avast\\\\AvastSvc.exe', case=False) | Image.str.contains(r'\\\\Avast\\\\AvastSvc.exe', case=False) | Image.str.contains(r'\\\\RDCMan.exe', case=False) | Image=='C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe' | Image.str.contains(r'\\\\FSAssessment.exe', case=False) | Image.str.contains(r'\\\\FSDiscovery.exe', case=False) | Image.str.contains(r'\\\\MobaRTE.exe', case=False) | Image.str.contains(r'\\\\mRemote.exe', case=False) | Image.str.contains(r'\\\\mRemoteNG.exe', case=False) | Image.str.contains(r'\\\\Passwordstate.exe', case=False) | Image.str.contains(r'\\\\RemoteDesktopManager.exe', case=False) | Image.str.contains(r'\\\\RemoteDesktopManager64.exe', case=False) | Image.str.contains(r'\\\\RemoteDesktopManagerFree.exe', case=False) | Image.str.contains(r'\\\\RSSensor.exe', case=False) | Image.str.contains(r'\\\\RTS2App.exe', case=False) | Image.str.contains(r'\\\\RTSApp.exe', case=False) | Image.str.contains(r'\\\\spiceworks-finder.exe', case=False) | Image.str.contains(r'\\\\Terminals.exe', case=False) | Image.str.contains(r'\\\\ws_TunnelService.exe', case=False) | Image.str.contains(r'\\\\thor.exe', case=False) | Image.str.contains(r'\\\\thor64.exe', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\SplunkUniversalForwarder\\\\bin\\\\', case=False) | Image.str.contains(r'\\\\Ranger\\\\SentinelRanger.exe', case=False) | Image=='C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe' | Image==['C:\\\\Program Files\\\\TSplus\\\\Java\\\\bin\\\\HTML5service.exe', 'C:\\\\Program Files (x86)\\\\TSplus\\\\Java\\\\bin\\\\HTML5service.exe'] | Image is null | Image=='' | Image=='<unknown process>')"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Outbound Kerberos Connection",
        "id": "e54979bd-c5f9-4d6c-967b-a04b19ac4c74",
        "status": "test",
        "description": "Detects uncommon outbound network activity via Kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1558",
            "attack.lateral-movement",
            "attack.t1550.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & DestinationPort==88 & Initiated=='true' & ~ Image=='C:\\\\Windows\\\\System32\\\\lsass.exe' & ~ (Image==['C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', 'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'] | Image==['C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe', 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe'] | Image.str.contains(r'\\\\tomcat\\\\bin\\\\tomcat8.exe', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Communication To Ngrok Tunneling Service Initiated",
        "id": "1d08ac94-400d-4469-a82f-daee9a908849",
        "status": "test",
        "description": "Detects an executable initiating a network connection to \"ngrok\" tunneling domains.\nAttackers were seen using this \"ngrok\" in order to store their second stage payloads and malware.\nWhile communication with such domains can be legitimate, often times is a sign of either data exfiltration by malicious actors or additional download.\n",
        "tags": [
            "attack.exfiltration",
            "attack.command-and-control",
            "attack.t1567",
            "attack.t1568.002",
            "attack.t1572",
            "attack.t1090",
            "attack.t1102",
            "attack.s0508"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & (DestinationHostname.str.contains(r'tunnel.us.ngrok.com', case=False) | DestinationHostname.str.contains(r'tunnel.eu.ngrok.com', case=False) | DestinationHostname.str.contains(r'tunnel.ap.ngrok.com', case=False) | DestinationHostname.str.contains(r'tunnel.au.ngrok.com', case=False) | DestinationHostname.str.contains(r'tunnel.sa.ngrok.com', case=False) | DestinationHostname.str.contains(r'tunnel.jp.ngrok.com', case=False) | DestinationHostname.str.contains(r'tunnel.in.ngrok.com', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Local Network Connection Initiated By Script Interpreter",
        "id": "08249dc0-a28d-4555-8ba5-9255a198e08c",
        "status": "test",
        "description": "Detects a script interpreter (Wscript/Cscript) initiating a local network connection to download or execute a script hosted on a shared folder.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & (Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False)) & (DestinationIp.str.contains(r'127.', case=False) | DestinationIp.str.contains(r'10.', case=False) | DestinationIp.str.contains(r'172.16.', case=False) | DestinationIp.str.contains(r'172.17.', case=False) | DestinationIp.str.contains(r'172.18.', case=False) | DestinationIp.str.contains(r'172.19.', case=False) | DestinationIp.str.contains(r'172.20.', case=False) | DestinationIp.str.contains(r'172.21.', case=False) | DestinationIp.str.contains(r'172.22.', case=False) | DestinationIp.str.contains(r'172.23.', case=False) | DestinationIp.str.contains(r'172.24.', case=False) | DestinationIp.str.contains(r'172.25.', case=False) | DestinationIp.str.contains(r'172.26.', case=False) | DestinationIp.str.contains(r'172.27.', case=False) | DestinationIp.str.contains(r'172.28.', case=False) | DestinationIp.str.contains(r'172.29.', case=False) | DestinationIp.str.contains(r'172.30.', case=False) | DestinationIp.str.contains(r'172.31.', case=False) | DestinationIp.str.contains(r'192.168.', case=False) | DestinationIp.str.contains(r'169.254.', case=False) | DestinationIp==['::1/128'] | DestinationIp.str.contains(r'fe8', case=False) | DestinationIp.str.contains(r'fe9', case=False) | DestinationIp.str.contains(r'fea', case=False) | DestinationIp.str.contains(r'feb', case=False) | DestinationIp.str.contains(r'fc', case=False) | DestinationIp.str.contains(r'fd', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Connection Initiated To Cloudflared Tunnels Domains",
        "id": "7cd1dcdc-6edf-4896-86dc-d1f19ad64903",
        "status": "experimental",
        "description": "Detects network connections to Cloudflared tunnels domains initiated by a process on the system.\nAttackers can abuse that feature to establish a reverse shell or persistence on a machine.\n",
        "tags": [
            "attack.exfiltration",
            "attack.command-and-control",
            "attack.t1567.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & (DestinationHostname.str.contains(r'.v2.argotunnel.com', case=False) | DestinationHostname.str.contains(r'protocol-v2.argotunnel.com', case=False) | DestinationHostname.str.contains(r'trycloudflare.com', case=False) | DestinationHostname.str.contains(r'update.argotunnel.com', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "RDP to HTTP or HTTPS Target Ports",
        "id": "b1e5da3b-ca8e-4adf-915c-9921f3d85481",
        "status": "test",
        "description": "Detects svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443",
        "tags": [
            "attack.command-and-control",
            "attack.t1572",
            "attack.lateral-movement",
            "attack.t1021.001",
            "car.2013-07-002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Image.str.contains(r'\\\\svchost.exe', case=False) & Initiated=='true' & SourcePort==3389 & (DestinationPort==[80, 443])"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Malware Callback Communication",
        "id": "4b89abaa-99fe-4232-afdd-8f9aa4d20382",
        "status": "test",
        "description": "Detects programs that connect to known malware callback ports based on statistical analysis from two different sandbox system databases\n",
        "tags": [
            "attack.persistence",
            "attack.command-and-control",
            "attack.t1571"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & (DestinationPort==[100, 198, 200, 243, 473, 666, 700, 743, 777, 1443, 1515, 1777, 1817, 1904, 1960, 2443, 2448, 3360, 3675, 3939, 4040, 4433, 4438, 4443, 4444, 4455, 5445, 5552, 5649, 6625, 7210, 7777, 8143, 8843, 9631, 9943, 10101, 12102, 12103, 12322, 13145, 13394, 13504, 13505, 13506, 13507, 14102, 14103, 14154, 49180, 65520, 65535]) & ~ (DestinationIp.str.contains(r'127.', case=False) | DestinationIp.str.contains(r'10.', case=False) | DestinationIp.str.contains(r'172.16.', case=False) | DestinationIp.str.contains(r'172.17.', case=False) | DestinationIp.str.contains(r'172.18.', case=False) | DestinationIp.str.contains(r'172.19.', case=False) | DestinationIp.str.contains(r'172.20.', case=False) | DestinationIp.str.contains(r'172.21.', case=False) | DestinationIp.str.contains(r'172.22.', case=False) | DestinationIp.str.contains(r'172.23.', case=False) | DestinationIp.str.contains(r'172.24.', case=False) | DestinationIp.str.contains(r'172.25.', case=False) | DestinationIp.str.contains(r'172.26.', case=False) | DestinationIp.str.contains(r'172.27.', case=False) | DestinationIp.str.contains(r'172.28.', case=False) | DestinationIp.str.contains(r'172.29.', case=False) | DestinationIp.str.contains(r'172.30.', case=False) | DestinationIp.str.contains(r'172.31.', case=False) | DestinationIp.str.contains(r'192.168.', case=False) | DestinationIp.str.contains(r'169.254.', case=False) | DestinationIp==['::1/128'] | DestinationIp.str.contains(r'fe8', case=False) | DestinationIp.str.contains(r'fe9', case=False) | DestinationIp.str.contains(r'fea', case=False) | DestinationIp.str.contains(r'feb', case=False) | DestinationIp.str.contains(r'fc', case=False) | DestinationIp.str.contains(r'fd', case=False)) & ~ (Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Network Connection Binary No CommandLine",
        "id": "20384606-a124-4fec-acbb-8bd373728613",
        "status": "test",
        "description": "Detects suspicious network connections made by a well-known Windows binary run with no command line parameters",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & (Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\dllhost.exe', case=False)) & (CommandLine.str.contains(r'\\\\regsvr32.exe', case=False) | CommandLine.str.contains(r'\\\\rundll32.exe', case=False) | CommandLine.str.contains(r'\\\\dllhost.exe', case=False)) & ~ (CommandLine=='' | CommandLine is null)"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Connection Initiated By Eqnedt32.EXE",
        "id": "a66bc059-c370-472c-a0d7-f8fd1bf9d583",
        "status": "test",
        "description": "Detects network connections from the Equation Editor process \"eqnedt32.exe\".",
        "tags": [
            "attack.execution",
            "attack.t1203"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Image.str.contains(r'\\\\eqnedt32.exe', case=False)"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "RegAsm.EXE Initiating Network Connection To Public IP",
        "id": "0531e43a-d77d-47c2-b89f-5fe50321c805",
        "status": "test",
        "description": "Detects \"RegAsm.exe\" initiating a network connection to public IP adresses",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.009"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & Image.str.contains(r'\\\\regasm.exe', case=False) & ~ (DestinationIp.str.contains(r'127.', case=False) | DestinationIp.str.contains(r'10.', case=False) | DestinationIp.str.contains(r'172.16.', case=False) | DestinationIp.str.contains(r'172.17.', case=False) | DestinationIp.str.contains(r'172.18.', case=False) | DestinationIp.str.contains(r'172.19.', case=False) | DestinationIp.str.contains(r'172.20.', case=False) | DestinationIp.str.contains(r'172.21.', case=False) | DestinationIp.str.contains(r'172.22.', case=False) | DestinationIp.str.contains(r'172.23.', case=False) | DestinationIp.str.contains(r'172.24.', case=False) | DestinationIp.str.contains(r'172.25.', case=False) | DestinationIp.str.contains(r'172.26.', case=False) | DestinationIp.str.contains(r'172.27.', case=False) | DestinationIp.str.contains(r'172.28.', case=False) | DestinationIp.str.contains(r'172.29.', case=False) | DestinationIp.str.contains(r'172.30.', case=False) | DestinationIp.str.contains(r'172.31.', case=False) | DestinationIp.str.contains(r'192.168.', case=False) | DestinationIp.str.contains(r'169.254.', case=False) | DestinationIp==['::1/128'] | DestinationIp.str.contains(r'fe8', case=False) | DestinationIp.str.contains(r'fe9', case=False) | DestinationIp.str.contains(r'fea', case=False) | DestinationIp.str.contains(r'feb', case=False) | DestinationIp.str.contains(r'fc', case=False) | DestinationIp.str.contains(r'fd', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Wuauclt Network Connection",
        "id": "c649a6c7-cd8c-4a78-9c04-000fc76df954",
        "status": "test",
        "description": "Detects the use of the Windows Update Client binary (wuauclt.exe) to proxy execute code and making network connections.\nOne could easily make the DLL spawn a new process and inject to it to proxy the network connection and bypass this rule.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Image.str.contains(r'wuauclt', case=False) & CommandLine.str.contains(r' /RunHandlerComServer', case=False) & ~ (DestinationIp.str.contains(r'127.', case=False) | DestinationIp.str.contains(r'10.', case=False) | DestinationIp.str.contains(r'169.254.', case=False) | DestinationIp.str.contains(r'172.16.', case=False) | DestinationIp.str.contains(r'172.17.', case=False) | DestinationIp.str.contains(r'172.18.', case=False) | DestinationIp.str.contains(r'172.19.', case=False) | DestinationIp.str.contains(r'172.20.', case=False) | DestinationIp.str.contains(r'172.21.', case=False) | DestinationIp.str.contains(r'172.22.', case=False) | DestinationIp.str.contains(r'172.23.', case=False) | DestinationIp.str.contains(r'172.24.', case=False) | DestinationIp.str.contains(r'172.25.', case=False) | DestinationIp.str.contains(r'172.26.', case=False) | DestinationIp.str.contains(r'172.27.', case=False) | DestinationIp.str.contains(r'172.28.', case=False) | DestinationIp.str.contains(r'172.29.', case=False) | DestinationIp.str.contains(r'172.30.', case=False) | DestinationIp.str.contains(r'172.31.', case=False) | DestinationIp.str.contains(r'192.168.', case=False) | DestinationIp==['::1/128'] | DestinationIp.str.contains(r'fe8', case=False) | DestinationIp.str.contains(r'fe9', case=False) | DestinationIp.str.contains(r'fea', case=False) | DestinationIp.str.contains(r'feb', case=False) | DestinationIp.str.contains(r'fc', case=False) | DestinationIp.str.contains(r'fd', case=False) | DestinationIp.str.contains(r'20.184.', case=False) | DestinationIp.str.contains(r'20.185.', case=False) | DestinationIp.str.contains(r'20.186.', case=False) | DestinationIp.str.contains(r'20.187.', case=False) | DestinationIp.str.contains(r'20.188.', case=False) | DestinationIp.str.contains(r'20.189.', case=False) | DestinationIp.str.contains(r'20.190.', case=False) | DestinationIp.str.contains(r'20.191.', case=False) | DestinationIp.str.contains(r'20.192.', case=False) | DestinationIp.str.contains(r'20.193.', case=False) | DestinationIp.str.contains(r'20.194.', case=False) | DestinationIp.str.contains(r'20.195.', case=False) | DestinationIp.str.contains(r'20.196.', case=False) | DestinationIp.str.contains(r'20.197.', case=False) | DestinationIp.str.contains(r'20.198.', case=False) | DestinationIp.str.contains(r'20.199.', case=False) | DestinationIp.str.contains(r'20.200.', case=False) | DestinationIp.str.contains(r'20.201.', case=False) | DestinationIp.str.contains(r'20.202.', case=False) | DestinationIp.str.contains(r'20.203.', case=False) | DestinationIp.str.contains(r'20.204.', case=False) | DestinationIp.str.contains(r'20.205.', case=False) | DestinationIp.str.contains(r'20.206.', case=False) | DestinationIp.str.contains(r'20.207.', case=False) | DestinationIp.str.contains(r'20.208.', case=False) | DestinationIp.str.contains(r'20.209.', case=False) | DestinationIp.str.contains(r'20.210.', case=False) | DestinationIp.str.contains(r'20.211.', case=False) | DestinationIp.str.contains(r'20.212.', case=False) | DestinationIp.str.contains(r'20.213.', case=False) | DestinationIp.str.contains(r'20.214.', case=False) | DestinationIp.str.contains(r'20.215.', case=False) | DestinationIp.str.contains(r'20.216.', case=False) | DestinationIp.str.contains(r'20.217.', case=False) | DestinationIp.str.contains(r'20.218.', case=False) | DestinationIp.str.contains(r'20.219.', case=False) | DestinationIp.str.contains(r'20.220.', case=False) | DestinationIp.str.contains(r'20.221.', case=False) | DestinationIp.str.contains(r'20.222.', case=False) | DestinationIp.str.contains(r'20.223.', case=False) | DestinationIp.str.contains(r'20.224.', case=False) | DestinationIp.str.contains(r'20.225.', case=False) | DestinationIp.str.contains(r'20.226.', case=False) | DestinationIp.str.contains(r'20.227.', case=False) | DestinationIp.str.contains(r'20.228.', case=False) | DestinationIp.str.contains(r'20.229.', case=False) | DestinationIp.str.contains(r'20.230.', case=False) | DestinationIp.str.contains(r'20.231.', case=False) | DestinationIp.str.contains(r'20.232.', case=False) | DestinationIp.str.contains(r'20.233.', case=False) | DestinationIp.str.contains(r'20.234.', case=False) | DestinationIp.str.contains(r'20.235.', case=False) | DestinationIp.str.contains(r'20.236.', case=False) | DestinationIp.str.contains(r'20.237.', case=False) | DestinationIp.str.contains(r'20.238.', case=False) | DestinationIp.str.contains(r'20.239.', case=False) | DestinationIp.str.contains(r'20.240.', case=False) | DestinationIp.str.contains(r'20.241.', case=False) | DestinationIp.str.contains(r'20.242.', case=False) | DestinationIp.str.contains(r'20.243.', case=False) | DestinationIp.str.contains(r'20.244.', case=False) | DestinationIp.str.contains(r'20.245.', case=False) | DestinationIp.str.contains(r'20.246.', case=False) | DestinationIp.str.contains(r'20.247.', case=False) | DestinationIp.str.contains(r'20.248.', case=False) | DestinationIp.str.contains(r'20.249.', case=False) | DestinationIp.str.contains(r'20.250.', case=False) | DestinationIp.str.contains(r'20.251.', case=False) | DestinationIp.str.contains(r'20.252.', case=False) | DestinationIp.str.contains(r'20.253.', case=False) | DestinationIp.str.contains(r'20.254.', case=False) | DestinationIp.str.contains(r'20.255.', case=False) | DestinationIp.str.contains(r'23.79.', case=False) | DestinationIp.str.contains(r'51.10.', case=False) | DestinationIp.str.contains(r'51.11.', case=False) | DestinationIp.str.contains(r'51.103.', case=False) | DestinationIp.str.contains(r'51.104.', case=False) | DestinationIp.str.contains(r'51.105.', case=False) | DestinationIp.str.contains(r'52.224.', case=False) | DestinationIp.str.contains(r'52.225.', case=False) | DestinationIp.str.contains(r'52.226.', case=False) | DestinationIp.str.contains(r'52.227.', case=False) | DestinationIp.str.contains(r'52.228.', case=False) | DestinationIp.str.contains(r'52.229.', case=False) | DestinationIp.str.contains(r'52.230.', case=False) | DestinationIp.str.contains(r'52.231.', case=False) | DestinationIp.str.contains(r'52.232.', case=False) | DestinationIp.str.contains(r'52.233.', case=False) | DestinationIp.str.contains(r'52.234.', case=False) | DestinationIp.str.contains(r'52.235.', case=False) | DestinationIp.str.contains(r'52.236.', case=False) | DestinationIp.str.contains(r'52.237.', case=False) | DestinationIp.str.contains(r'52.238.', case=False) | DestinationIp.str.contains(r'52.239.', case=False) | DestinationIp.str.contains(r'52.240.', case=False) | DestinationIp.str.contains(r'52.241.', case=False) | DestinationIp.str.contains(r'52.242.', case=False) | DestinationIp.str.contains(r'52.243.', case=False) | DestinationIp.str.contains(r'52.244.', case=False) | DestinationIp.str.contains(r'52.245.', case=False) | DestinationIp.str.contains(r'52.246.', case=False) | DestinationIp.str.contains(r'52.247.', case=False) | DestinationIp.str.contains(r'52.248.', case=False) | DestinationIp.str.contains(r'52.249.', case=False) | DestinationIp.str.contains(r'52.250.', case=False) | DestinationIp.str.contains(r'52.251.', case=False) | DestinationIp.str.contains(r'52.252.', case=False) | DestinationIp.str.contains(r'52.253.', case=False) | DestinationIp.str.contains(r'52.254.', case=False) | DestinationIp.str.contains(r'52.255.', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\UUS\\\\Packages\\\\Preview\\\\amd64\\\\updatedeploy.dll /ClassId', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\UUS\\\\amd64\\\\UpdateDeploy.dll /ClassId', case=False) | CommandLine.str.contains(r':\\\\Windows\\\\WinSxS\\\\', case=False) & CommandLine.str.contains(r'\\\\UpdateDeploy.dll /ClassId ', case=False) | CommandLine is null | CommandLine=='')"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Python Initiated Connection",
        "id": "bef0bc5a-b9ae-425d-85c6-7b2d705980c6",
        "status": "test",
        "description": "Detects a Python process initiating a network connection. While this often relates to package installation, it can also indicate a potential malicious script communicating with a C&C server.",
        "tags": [
            "attack.discovery",
            "attack.t1046"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & Image.str.contains(r'python', case=False) & ~ (DestinationIp=='127.0.0.1' & SourceIp=='127.0.0.1' | CommandLine.str.contains(r'pip.exe', case=False) & CommandLine.str.contains(r'install', case=False)) & ~ (ParentImage=='C:\\\\ProgramData\\\\Anaconda3\\\\Scripts\\\\conda.exe' & CommandLine.str.contains(r':\\\\ProgramData\\\\Anaconda3\\\\Scripts\\\\conda-script.py', case=False) & CommandLine.str.contains(r'update', case=False) | ParentImage=='C:\\\\ProgramData\\\\Anaconda3\\\\python.exe' & CommandLine.str.contains(r'C:\\\\ProgramData\\\\Anaconda3\\\\Scripts\\\\jupyter-notebook-script.py', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Office Application Initiated Network Connection Over Uncommon Ports",
        "id": "3b5ba899-9842-4bc2-acc2-12308498bf42",
        "status": "experimental",
        "description": "Detects an office suit application (Word, Excel, PowerPoint, Outlook) communicating to target systems over uncommon ports.",
        "tags": [
            "attack.defense-evasion",
            "attack.command-and-control"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & (Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\outlook.exe', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) | Image.str.contains(r'\\\\winword.exe', case=False) | Image.str.contains(r'\\\\wordview.exe', case=False)) & ~ (DestinationPort==[53, 80, 139, 443, 445] | Image.str.contains(r':\\\\Program Files\\\\Microsoft Office\\\\', case=False) & Image.str.contains(r'\\\\OUTLOOK.EXE', case=False) & (DestinationPort==[143, 465, 587, 993, 995]))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Connection Initiated From Process Located In Potentially Suspicious Or Uncommon Location",
        "id": "7b434893-c57d-4f41-908d-6a17bf1ae98f",
        "status": "test",
        "description": "Detects a network connection initiated by programs or processes running from suspicious or uncommon files system locations.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & (Image.str.contains(r':\\\\$Recycle.bin', case=False) | Image.str.contains(r':\\\\Perflogs\\\\', case=False) | Image.str.contains(r':\\\\Temp\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\Default\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Fonts\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\IME\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\Tasks\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False) | Image.str.contains(r'\\\\config\\\\systemprofile\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\addins\\\\', case=False)) & ~ (DestinationHostname.str.contains(r'.githubusercontent.com', case=False) | DestinationHostname.str.contains(r'anonfiles.com', case=False) | DestinationHostname.str.contains(r'cdn.discordapp.com', case=False) | DestinationHostname.str.contains(r'ddns.net', case=False) | DestinationHostname.str.contains(r'dl.dropboxusercontent.com', case=False) | DestinationHostname.str.contains(r'ghostbin.co', case=False) | DestinationHostname.str.contains(r'glitch.me', case=False) | DestinationHostname.str.contains(r'gofile.io', case=False) | DestinationHostname.str.contains(r'hastebin.com', case=False) | DestinationHostname.str.contains(r'mediafire.com', case=False) | DestinationHostname.str.contains(r'mega.co.nz', case=False) | DestinationHostname.str.contains(r'mega.nz', case=False) | DestinationHostname.str.contains(r'onrender.com', case=False) | DestinationHostname.str.contains(r'pages.dev', case=False) | DestinationHostname.str.contains(r'paste.ee', case=False) | DestinationHostname.str.contains(r'pastebin.com', case=False) | DestinationHostname.str.contains(r'pastebin.pl', case=False) | DestinationHostname.str.contains(r'pastetext.net', case=False) | DestinationHostname.str.contains(r'portmap.io', case=False) | DestinationHostname.str.contains(r'privatlab.com', case=False) | DestinationHostname.str.contains(r'privatlab.net', case=False) | DestinationHostname.str.contains(r'send.exploit.in', case=False) | DestinationHostname.str.contains(r'sendspace.com', case=False) | DestinationHostname.str.contains(r'storage.googleapis.com', case=False) | DestinationHostname.str.contains(r'storjshare.io', case=False) | DestinationHostname.str.contains(r'supabase.co', case=False) | DestinationHostname.str.contains(r'temp.sh', case=False) | DestinationHostname.str.contains(r'transfer.sh', case=False) | DestinationHostname.str.contains(r'trycloudflare.com', case=False) | DestinationHostname.str.contains(r'ufile.io', case=False) | DestinationHostname.str.contains(r'w3spaces.com', case=False) | DestinationHostname.str.contains(r'workers.dev', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Network Connection to IP Lookup Service APIs",
        "id": "edf3485d-dac4-4d50-90e4-b0e5813f7e60",
        "status": "test",
        "description": "Detects external IP address lookups by non-browser processes via services such as \"api.ipify.org\". This could be indicative of potential post compromise internet test activity.",
        "tags": [
            "attack.discovery",
            "attack.t1016"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & (DestinationHostname==['www.ip.cn', 'l2.io'] | DestinationHostname.str.contains(r'api.2ip.ua', case=False) | DestinationHostname.str.contains(r'api.bigdatacloud.net', case=False) | DestinationHostname.str.contains(r'api.ipify.org', case=False) | DestinationHostname.str.contains(r'bot.whatismyipaddress.com', case=False) | DestinationHostname.str.contains(r'canireachthe.net', case=False) | DestinationHostname.str.contains(r'checkip.amazonaws.com', case=False) | DestinationHostname.str.contains(r'checkip.dyndns.org', case=False) | DestinationHostname.str.contains(r'curlmyip.com', case=False) | DestinationHostname.str.contains(r'db-ip.com', case=False) | DestinationHostname.str.contains(r'edns.ip-api.com', case=False) | DestinationHostname.str.contains(r'eth0.me', case=False) | DestinationHostname.str.contains(r'freegeoip.app', case=False) | DestinationHostname.str.contains(r'geoipy.com', case=False) | DestinationHostname.str.contains(r'getip.pro', case=False) | DestinationHostname.str.contains(r'icanhazip.com', case=False) | DestinationHostname.str.contains(r'ident.me', case=False) | DestinationHostname.str.contains(r'ifconfig.io', case=False) | DestinationHostname.str.contains(r'ifconfig.me', case=False) | DestinationHostname.str.contains(r'ip-api.com', case=False) | DestinationHostname.str.contains(r'ip.360.cn', case=False) | DestinationHostname.str.contains(r'ip.anysrc.net', case=False) | DestinationHostname.str.contains(r'ip.taobao.com', case=False) | DestinationHostname.str.contains(r'ip.tyk.nu', case=False) | DestinationHostname.str.contains(r'ipaddressworld.com', case=False) | DestinationHostname.str.contains(r'ipapi.co', case=False) | DestinationHostname.str.contains(r'ipconfig.io', case=False) | DestinationHostname.str.contains(r'ipecho.net', case=False) | DestinationHostname.str.contains(r'ipinfo.io', case=False) | DestinationHostname.str.contains(r'ipip.net', case=False) | DestinationHostname.str.contains(r'ipof.in', case=False) | DestinationHostname.str.contains(r'ipv4.icanhazip.com', case=False) | DestinationHostname.str.contains(r'ipv4bot.whatismyipaddress.com', case=False) | DestinationHostname.str.contains(r'ipv6-test.com', case=False) | DestinationHostname.str.contains(r'ipwho.is', case=False) | DestinationHostname.str.contains(r'jsonip.com', case=False) | DestinationHostname.str.contains(r'myexternalip.com', case=False) | DestinationHostname.str.contains(r'seeip.org', case=False) | DestinationHostname.str.contains(r'wgetip.com', case=False) | DestinationHostname.str.contains(r'whatismyip.akamai.com', case=False) | DestinationHostname.str.contains(r'whois.pconline.com.cn', case=False) | DestinationHostname.str.contains(r'wtfismyip.com', case=False)) & ~ (Image.str.contains(r'\\\\brave.exe', case=False) | Image==['C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'] | Image==['C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe', 'C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe'] | Image==['C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe', 'C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe'] | Image.str.contains(r'\\\\maxthon.exe', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\', case=False) | Image.str.contains(r'\\\\WindowsApps\\\\MicrosoftEdge.exe', case=False) | Image==['C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe', 'C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe'] | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeCore\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\EdgeCore\\\\', case=False)) & (Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False)) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\safari.exe', case=False) | Image.str.contains(r'\\\\seamonkey.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False) | Image.str.contains(r'\\\\whale.exe', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Non-Browser Network Communication With Google API",
        "id": "7e9cf7b6-e827-11ed-a05b-0242ac120003",
        "status": "experimental",
        "description": "Detects a non-browser process interacting with the Google API which could indicate the use of a covert C2 such as Google Sheet C2 (GC2-sheet)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1102"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & (DestinationHostname.str.contains(r'drive.googleapis.com', case=False) | DestinationHostname.str.contains(r'oauth2.googleapis.com', case=False) | DestinationHostname.str.contains(r'sheets.googleapis.com', case=False) | DestinationHostname.str.contains(r'www.googleapis.com', case=False)) & ~ (Image is null | Image=='') & ~ (Image.str.contains(r'\\\\brave.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\Google\\\\Drive File Stream\\\\', case=False) & Image.str.contains(r'\\\\GoogleDriveFS.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe', case=False) | Image.str.contains(r'\\\\maxthon.exe', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\WindowsApps\\\\MicrosoftEdge.exe', case=False) | (Image.str.contains(r':\\\\Program Files (x86)\\\\Microsoft\\\\EdgeCore\\\\', case=False) | Image.str.contains(r':\\\\Program Files\\\\Microsoft\\\\EdgeCore\\\\', case=False)) & (Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False)) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\safari.exe', case=False) | Image.str.contains(r'\\\\seamonkey.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False) | Image.str.contains(r'\\\\whale.exe', case=False) | Image.str.contains(r'\\\\GoogleUpdate.exe', case=False) | Image.str.contains(r'\\\\outlook.exe', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Connection Initiated By IMEWDBLD.EXE",
        "id": "8d7e392e-9b28-49e1-831d-5949c6281228",
        "status": "test",
        "description": "Detects a network connection initiated by IMEWDBLD.EXE. This might indicate potential abuse of the utility as a LOLBIN in order to download arbitrary files or additional payloads.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & Image.str.contains(r'\\\\IMEWDBLD.exe', case=False)"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Remote PowerShell Session Initiated",
        "id": "c539afac-c12a-46ed-b1bd-5a5567c9f045",
        "status": "test",
        "description": "Detects a process that initiated a network connection over ports 5985 or 5986 from a non-network service account.\nThis could potentially indicates a remote PowerShell connection.\n",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.lateral-movement",
            "attack.t1021.006"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & (DestinationPort==[5985, 5986]) & Initiated=='true' & SourceIsIpv6=='false' & ~ (User.str.contains(r'NETWORK SERVICE', case=False) | User.str.contains(r'NETZWERKDIENST', case=False) | User.str.contains(r'SERVICIO DE RED', case=False) | User.str.contains(r'SERVIZIO DI RETE', case=False) | User.str.contains(r'SERVICE R', case=False) & User.str.contains(r'SEAU', case=False) | (SourceIp==['::1', '127.0.0.1']) & (DestinationIp==['::1', '127.0.0.1'])) & ~ (Image==['C:\\\\Program Files\\\\Avast Software\\\\Avast\\\\AvastSvc.exe', 'C:\\\\Program Files (x86)\\\\Avast Software\\\\Avast\\\\AvastSvc.exe'])"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Outbound SMTP Connections",
        "id": "9976fa64-2804-423c-8a5b-646ade840773",
        "status": "test",
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.\nThe data may also be sent to an alternate network location from the main command and control server.\n",
        "tags": [
            "attack.exfiltration",
            "attack.t1048.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & (DestinationPort==[25, 587, 465, 2525]) & Initiated=='true' & ~ (Image.str.contains(r'\\\\thunderbird.exe', case=False) | Image.str.contains(r'\\\\outlook.exe', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\Exchange Server\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\microsoft.windowscommunicationsapps_', case=False) & Image.str.contains(r'\\\\HxTsr.exe', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Communication To Uncommon Destination Ports",
        "id": "6d8c3d20-a5e1-494f-8412-4571d716cf5c",
        "status": "test",
        "description": "Detects programs that connect to uncommon destination ports",
        "tags": [
            "attack.persistence",
            "attack.command-and-control",
            "attack.t1571"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & (DestinationPort==[8080, 8888]) & ~ (DestinationIp.str.contains(r'127.', case=False) | DestinationIp.str.contains(r'10.', case=False) | DestinationIp.str.contains(r'172.16.', case=False) | DestinationIp.str.contains(r'172.17.', case=False) | DestinationIp.str.contains(r'172.18.', case=False) | DestinationIp.str.contains(r'172.19.', case=False) | DestinationIp.str.contains(r'172.20.', case=False) | DestinationIp.str.contains(r'172.21.', case=False) | DestinationIp.str.contains(r'172.22.', case=False) | DestinationIp.str.contains(r'172.23.', case=False) | DestinationIp.str.contains(r'172.24.', case=False) | DestinationIp.str.contains(r'172.25.', case=False) | DestinationIp.str.contains(r'172.26.', case=False) | DestinationIp.str.contains(r'172.27.', case=False) | DestinationIp.str.contains(r'172.28.', case=False) | DestinationIp.str.contains(r'172.29.', case=False) | DestinationIp.str.contains(r'172.30.', case=False) | DestinationIp.str.contains(r'172.31.', case=False) | DestinationIp.str.contains(r'192.168.', case=False) | DestinationIp.str.contains(r'169.254.', case=False) | DestinationIp==['::1/128'] | DestinationIp.str.contains(r'fe8', case=False) | DestinationIp.str.contains(r'fe9', case=False) | DestinationIp.str.contains(r'fea', case=False) | DestinationIp.str.contains(r'feb', case=False) | DestinationIp.str.contains(r'fc', case=False) | DestinationIp.str.contains(r'fd', case=False)) & ~ (Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Outbound Network Connection To Public IP Via Winlogon",
        "id": "7610a4ea-c06d-495f-a2ac-0a696abcfd3b",
        "status": "test",
        "description": "Detects a \"winlogon.exe\" process that initiate network communications with public IP addresses",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.command-and-control",
            "attack.t1218.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Image.str.contains(r'\\\\winlogon.exe', case=False) & Initiated=='true' & ~ (DestinationIp.str.contains(r'127.', case=False) | DestinationIp.str.contains(r'10.', case=False) | DestinationIp.str.contains(r'172.16.', case=False) | DestinationIp.str.contains(r'172.17.', case=False) | DestinationIp.str.contains(r'172.18.', case=False) | DestinationIp.str.contains(r'172.19.', case=False) | DestinationIp.str.contains(r'172.20.', case=False) | DestinationIp.str.contains(r'172.21.', case=False) | DestinationIp.str.contains(r'172.22.', case=False) | DestinationIp.str.contains(r'172.23.', case=False) | DestinationIp.str.contains(r'172.24.', case=False) | DestinationIp.str.contains(r'172.25.', case=False) | DestinationIp.str.contains(r'172.26.', case=False) | DestinationIp.str.contains(r'172.27.', case=False) | DestinationIp.str.contains(r'172.28.', case=False) | DestinationIp.str.contains(r'172.29.', case=False) | DestinationIp.str.contains(r'172.30.', case=False) | DestinationIp.str.contains(r'172.31.', case=False) | DestinationIp.str.contains(r'192.168.', case=False) | DestinationIp.str.contains(r'169.254.', case=False) | DestinationIp==['::1/128'] | DestinationIp.str.contains(r'fe8', case=False) | DestinationIp.str.contains(r'fe9', case=False) | DestinationIp.str.contains(r'fea', case=False) | DestinationIp.str.contains(r'feb', case=False) | DestinationIp.str.contains(r'fc', case=False) | DestinationIp.str.contains(r'fd', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Connection Initiated Via Notepad.EXE",
        "id": "e81528db-fc02-45e8-8e98-4e84aba1f10b",
        "status": "test",
        "description": "Detects a network connection that is initiated by the \"notepad.exe\" process.\nThis might be a sign of process injection from a beacon process or something similar.\nNotepad rarely initiates a network communication except when printing documents for example.\n",
        "tags": [
            "attack.command-and-control",
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1055"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Image.str.contains(r'\\\\notepad.exe', case=False) & ~ DestinationPort==9100"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Non-Browser Network Communication With Telegram API",
        "id": "c3dbbc9f-ef1d-470a-a90a-d343448d5875",
        "status": "test",
        "description": "Detects an a non-browser process interacting with the Telegram API which could indicate use of a covert C2",
        "tags": [
            "attack.command-and-control",
            "attack.t1102"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & DestinationHostname.str.contains(r'api.telegram.org', case=False) & ~ (Image.str.contains(r'\\\\brave.exe', case=False) | Image==['C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'] | Image==['C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe', 'C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe'] | Image==['C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe', 'C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe'] | Image.str.contains(r'\\\\maxthon.exe', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\', case=False) | Image.str.contains(r'\\\\WindowsApps\\\\MicrosoftEdge.exe', case=False) | Image==['C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe', 'C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe'] | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeCore\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\EdgeCore\\\\', case=False)) & (Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False)) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\safari.exe', case=False) | Image.str.contains(r'\\\\seamonkey.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False) | Image.str.contains(r'\\\\whale.exe', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Outbound Network Connection Initiated By Microsoft Dialer",
        "id": "37e4024a-6c80-4d8f-b95d-2e7e94f3a8d1",
        "status": "test",
        "description": "Detects outbound network connection initiated by Microsoft Dialer.\nThe Microsoft Dialer, also known as Phone Dialer, is a built-in utility application included in various versions of the Microsoft Windows operating system. Its primary function is to provide users with a graphical interface for managing phone calls via a modem or a phone line connected to the computer.\nThis is an outdated process in the current conext of it's usage and is a common target for info stealers for process injection, and is used to make C2 connections, common example is \"Rhadamanthys\"\n",
        "tags": [
            "attack.execution",
            "attack.t1071.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Image.str.contains(r':\\\\Windows\\\\System32\\\\dialer.exe', case=False) & Initiated=='true' & ~ (DestinationIp.str.contains(r'127.', case=False) | DestinationIp.str.contains(r'10.', case=False) | DestinationIp.str.contains(r'172.16.', case=False) | DestinationIp.str.contains(r'172.17.', case=False) | DestinationIp.str.contains(r'172.18.', case=False) | DestinationIp.str.contains(r'172.19.', case=False) | DestinationIp.str.contains(r'172.20.', case=False) | DestinationIp.str.contains(r'172.21.', case=False) | DestinationIp.str.contains(r'172.22.', case=False) | DestinationIp.str.contains(r'172.23.', case=False) | DestinationIp.str.contains(r'172.24.', case=False) | DestinationIp.str.contains(r'172.25.', case=False) | DestinationIp.str.contains(r'172.26.', case=False) | DestinationIp.str.contains(r'172.27.', case=False) | DestinationIp.str.contains(r'172.28.', case=False) | DestinationIp.str.contains(r'172.29.', case=False) | DestinationIp.str.contains(r'172.30.', case=False) | DestinationIp.str.contains(r'172.31.', case=False) | DestinationIp.str.contains(r'192.168.', case=False) | DestinationIp.str.contains(r'169.254.', case=False) | DestinationIp==['::1/128'] | DestinationIp.str.contains(r'fe8', case=False) | DestinationIp.str.contains(r'fe9', case=False) | DestinationIp.str.contains(r'fea', case=False) | DestinationIp.str.contains(r'feb', case=False) | DestinationIp.str.contains(r'fc', case=False) | DestinationIp.str.contains(r'fd', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Network Connection To Notion API",
        "id": "7e9cf7b6-e827-11ed-a05b-15959c120003",
        "status": "test",
        "description": "Detects a non-browser process communicating with the Notion API. This could indicate potential use of a covert C2 channel such as \"OffensiveNotion C2\"",
        "tags": [
            "attack.command-and-control",
            "attack.t1102"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & DestinationHostname.str.contains(r'api.notion.com', case=False) & ~ (Image.str.contains(r'\\\\AppData\\\\Local\\\\Programs\\\\Notion\\\\Notion.exe', case=False) | Image.str.contains(r'\\\\brave.exe', case=False) | Image==['C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'] | Image==['C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe', 'C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe'] | Image==['C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe', 'C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe'] | Image.str.contains(r'\\\\maxthon.exe', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\', case=False) | Image.str.contains(r'\\\\WindowsApps\\\\MicrosoftEdge.exe', case=False) | Image==['C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe', 'C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe'] | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeCore\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\EdgeCore\\\\', case=False)) & (Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False)) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\safari.exe', case=False) | Image.str.contains(r'\\\\seamonkey.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False) | Image.str.contains(r'\\\\whale.exe', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Connection Initiated To BTunnels Domains",
        "id": "9e02c8ec-02b9-43e8-81eb-34a475ba7965",
        "status": "experimental",
        "description": "Detects network connections to BTunnels domains initiated by a process on the system.\nAttackers can abuse that feature to establish a reverse shell or persistence on a machine.\n",
        "tags": [
            "attack.exfiltration",
            "attack.t1567.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & DestinationHostname.str.contains(r'.btunnel.co.in', case=False)"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Microsoft Sync Center Suspicious Network Connections",
        "id": "9f2cc74d-78af-4eb2-bb64-9cd1d292b87b",
        "status": "test",
        "description": "Detects suspicious connections from Microsoft Sync Center to non-private IPs.",
        "tags": [
            "attack.t1055",
            "attack.t1218",
            "attack.execution",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Image.str.contains(r'\\\\mobsync.exe', case=False) & ~ (DestinationIp.str.contains(r'127.', case=False) | DestinationIp.str.contains(r'10.', case=False) | DestinationIp.str.contains(r'172.16.', case=False) | DestinationIp.str.contains(r'172.17.', case=False) | DestinationIp.str.contains(r'172.18.', case=False) | DestinationIp.str.contains(r'172.19.', case=False) | DestinationIp.str.contains(r'172.20.', case=False) | DestinationIp.str.contains(r'172.21.', case=False) | DestinationIp.str.contains(r'172.22.', case=False) | DestinationIp.str.contains(r'172.23.', case=False) | DestinationIp.str.contains(r'172.24.', case=False) | DestinationIp.str.contains(r'172.25.', case=False) | DestinationIp.str.contains(r'172.26.', case=False) | DestinationIp.str.contains(r'172.27.', case=False) | DestinationIp.str.contains(r'172.28.', case=False) | DestinationIp.str.contains(r'172.29.', case=False) | DestinationIp.str.contains(r'172.30.', case=False) | DestinationIp.str.contains(r'172.31.', case=False) | DestinationIp.str.contains(r'192.168.', case=False) | DestinationIp.str.contains(r'169.254.', case=False) | DestinationIp==['::1/128'] | DestinationIp.str.contains(r'fe8', case=False) | DestinationIp.str.contains(r'fe9', case=False) | DestinationIp.str.contains(r'fea', case=False) | DestinationIp.str.contains(r'feb', case=False) | DestinationIp.str.contains(r'fc', case=False) | DestinationIp.str.contains(r'fd', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Rundll32 Internet Connection",
        "id": "cdc8da7d-c303-42f8-b08c-b4ab47230263",
        "status": "test",
        "description": "Detects a rundll32 that communicates with public IP addresses",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011",
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Image.str.contains(r'\\\\rundll32.exe', case=False) & Initiated=='true' & ~ (DestinationIp.str.contains(r'127.', case=False) | DestinationIp.str.contains(r'10.', case=False) | DestinationIp.str.contains(r'172.16.', case=False) | DestinationIp.str.contains(r'172.17.', case=False) | DestinationIp.str.contains(r'172.18.', case=False) | DestinationIp.str.contains(r'172.19.', case=False) | DestinationIp.str.contains(r'172.20.', case=False) | DestinationIp.str.contains(r'172.21.', case=False) | DestinationIp.str.contains(r'172.22.', case=False) | DestinationIp.str.contains(r'172.23.', case=False) | DestinationIp.str.contains(r'172.24.', case=False) | DestinationIp.str.contains(r'172.25.', case=False) | DestinationIp.str.contains(r'172.26.', case=False) | DestinationIp.str.contains(r'172.27.', case=False) | DestinationIp.str.contains(r'172.28.', case=False) | DestinationIp.str.contains(r'172.29.', case=False) | DestinationIp.str.contains(r'172.30.', case=False) | DestinationIp.str.contains(r'172.31.', case=False) | DestinationIp.str.contains(r'192.168.', case=False) | DestinationIp.str.contains(r'169.254.', case=False) | DestinationIp==['::1/128'] | DestinationIp.str.contains(r'fe8', case=False) | DestinationIp.str.contains(r'fe9', case=False) | DestinationIp.str.contains(r'fea', case=False) | DestinationIp.str.contains(r'feb', case=False) | DestinationIp.str.contains(r'fc', case=False) | DestinationIp.str.contains(r'fd', case=False) | DestinationIp.str.contains(r'20.', case=False) | DestinationIp.str.contains(r'51.103.', case=False) | DestinationIp.str.contains(r'51.104.', case=False) | DestinationIp.str.contains(r'51.105.', case=False) | CommandLine.str.contains(r'\\\\system32\\\\PcaSvc.dll,PcaPatchSdbTask', case=False) | SourceHostname.str.contains(r'.internal.cloudapp.net', case=False) | ParentImage=='C:\\\\Windows\\\\System32\\\\svchost.exe' & DestinationPort==443)"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Outbound Network Connection Initiated By Script Interpreter",
        "id": "992a6cae-db6a-43c8-9cec-76d7195c96fc",
        "status": "test",
        "description": "Detects a script interpreter wscript/cscript opening a network connection to a non-local network. Adversaries may use script to download malicious payloads.",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & (Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False)) & ~ (DestinationIp.str.contains(r'127.', case=False) | DestinationIp.str.contains(r'10.', case=False) | DestinationIp.str.contains(r'172.16.', case=False) | DestinationIp.str.contains(r'172.17.', case=False) | DestinationIp.str.contains(r'172.18.', case=False) | DestinationIp.str.contains(r'172.19.', case=False) | DestinationIp.str.contains(r'172.20.', case=False) | DestinationIp.str.contains(r'172.21.', case=False) | DestinationIp.str.contains(r'172.22.', case=False) | DestinationIp.str.contains(r'172.23.', case=False) | DestinationIp.str.contains(r'172.24.', case=False) | DestinationIp.str.contains(r'172.25.', case=False) | DestinationIp.str.contains(r'172.26.', case=False) | DestinationIp.str.contains(r'172.27.', case=False) | DestinationIp.str.contains(r'172.28.', case=False) | DestinationIp.str.contains(r'172.29.', case=False) | DestinationIp.str.contains(r'172.30.', case=False) | DestinationIp.str.contains(r'172.31.', case=False) | DestinationIp.str.contains(r'192.168.', case=False) | DestinationIp.str.contains(r'169.254.', case=False) | DestinationIp==['::1/128'] | DestinationIp.str.contains(r'fe8', case=False) | DestinationIp.str.contains(r'fe9', case=False) | DestinationIp.str.contains(r'fea', case=False) | DestinationIp.str.contains(r'feb', case=False) | DestinationIp.str.contains(r'fc', case=False) | DestinationIp.str.contains(r'fd', case=False) | DestinationIp.str.contains(r'20.0.', case=False) | DestinationIp.str.contains(r'20.1.', case=False) | DestinationIp.str.contains(r'20.2.', case=False) | DestinationIp.str.contains(r'20.3.', case=False) | DestinationIp.str.contains(r'20.4.', case=False) | DestinationIp.str.contains(r'20.5.', case=False) | DestinationIp.str.contains(r'20.6.', case=False) | DestinationIp.str.contains(r'20.7.', case=False) | DestinationIp.str.contains(r'20.8.', case=False) | DestinationIp.str.contains(r'20.9.', case=False) | DestinationIp.str.contains(r'20.10.', case=False) | DestinationIp.str.contains(r'20.11.', case=False) | DestinationIp.str.contains(r'20.12.', case=False) | DestinationIp.str.contains(r'20.13.', case=False) | DestinationIp.str.contains(r'20.14.', case=False) | DestinationIp.str.contains(r'20.15.', case=False) | DestinationIp.str.contains(r'20.16.', case=False) | DestinationIp.str.contains(r'20.17.', case=False) | DestinationIp.str.contains(r'20.18.', case=False) | DestinationIp.str.contains(r'20.19.', case=False) | DestinationIp.str.contains(r'20.20.', case=False) | DestinationIp.str.contains(r'20.21.', case=False) | DestinationIp.str.contains(r'20.22.', case=False) | DestinationIp.str.contains(r'20.23.', case=False) | DestinationIp.str.contains(r'20.24.', case=False) | DestinationIp.str.contains(r'20.25.', case=False) | DestinationIp.str.contains(r'20.26.', case=False) | DestinationIp.str.contains(r'20.27.', case=False) | DestinationIp.str.contains(r'20.28.', case=False) | DestinationIp.str.contains(r'20.29.', case=False) | DestinationIp.str.contains(r'20.30.', case=False) | DestinationIp.str.contains(r'20.31.', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Communication With Crypto Mining Pool",
        "id": "fa5b1358-b040-4403-9868-15f7d9ab6329",
        "status": "stable",
        "description": "Detects initiated network connections to crypto mining pools",
        "tags": [
            "attack.impact",
            "attack.t1496"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & (DestinationHostname==['alimabi.cn', 'ap.luckpool.net', 'bcn.pool.minergate.com', 'bcn.vip.pool.minergate.com', 'bohemianpool.com', 'ca-aipg.miningocean.org', 'ca-dynex.miningocean.org', 'ca-neurai.miningocean.org', 'ca-qrl.miningocean.org', 'ca-upx.miningocean.org', 'ca-zephyr.miningocean.org', 'ca.minexmr.com', 'ca.monero.herominers.com', 'cbd.monerpool.org', 'cbdv2.monerpool.org', 'cryptmonero.com', 'crypto-pool.fr', 'crypto-pool.info', 'cryptonight-hub.miningpoolhub.com', 'd1pool.ddns.net', 'd5pool.us', 'daili01.monerpool.org', 'de-aipg.miningocean.org', 'de-dynex.miningocean.org', 'de-zephyr.miningocean.org', 'de.minexmr.com', 'dl.nbminer.com', 'donate.graef.in', 'donate.ssl.xmrig.com', 'donate.v2.xmrig.com', 'donate.xmrig.com', 'donate2.graef.in', 'drill.moneroworld.com', 'dwarfpool.com', 'emercoin.com', 'emercoin.net', 'emergate.net', 'ethereumpool.co', 'eu.luckpool.net', 'eu.minerpool.pw', 'fcn-xmr.pool.minergate.com', 'fee.xmrig.com', 'fr-aipg.miningocean.org', 'fr-dynex.miningocean.org', 'fr-neurai.miningocean.org', 'fr-qrl.miningocean.org', 'fr-upx.miningocean.org', 'fr-zephyr.miningocean.org', 'fr.minexmr.com', 'hellominer.com', 'herominers.com', 'hk-aipg.miningocean.org', 'hk-dynex.miningocean.org', 'hk-neurai.miningocean.org', 'hk-qrl.miningocean.org', 'hk-upx.miningocean.org', 'hk-zephyr.miningocean.org', 'huadong1-aeon.ppxxmr.com', 'iwanttoearn.money', 'jw-js1.ppxxmr.com', 'koto-pool.work', 'lhr.nbminer.com', 'lhr3.nbminer.com', 'linux.monerpool.org', 'lokiturtle.herominers.com', 'luckpool.net', 'masari.miner.rocks', 'mine.c3pool.com', 'mine.moneropool.com', 'mine.ppxxmr.com', 'mine.zpool.ca', 'mine1.ppxxmr.com', 'minemonero.gq', 'miner.ppxxmr.com', 'miner.rocks', 'minercircle.com', 'minergate.com', 'minerpool.pw', 'minerrocks.com', 'miners.pro', 'minerxmr.ru', 'minexmr.cn', 'minexmr.com', 'mining-help.ru', 'miningpoolhub.com', 'mixpools.org', 'moner.monerpool.org', 'moner1min.monerpool.org', 'monero-master.crypto-pool.fr', 'monero.crypto-pool.fr', 'monero.hashvault.pro', 'monero.herominers.com', 'monero.lindon-pool.win', 'monero.miners.pro', 'monero.riefly.id', 'monero.us.to', 'monerocean.stream', 'monerogb.com', 'monerohash.com', 'moneroocean.stream', 'moneropool.com', 'moneropool.nl', 'monerorx.com', 'monerpool.org', 'moriaxmr.com', 'mro.pool.minergate.com', 'multipool.us', 'myxmr.pw', 'na.luckpool.net', 'nanopool.org', 'nbminer.com', 'node3.luckpool.net', 'noobxmr.com', 'pangolinminer.comgandalph3000.com', 'pool.4i7i.com', 'pool.armornetwork.org', 'pool.cortins.tk', 'pool.gntl.co.uk', 'pool.hashvault.pro', 'pool.minergate.com', 'pool.minexmr.com', 'pool.monero.hashvault.pro', 'pool.ppxxmr.com', 'pool.somec.cc', 'pool.support', 'pool.supportxmr.com', 'pool.usa-138.com', 'pool.xmr.pt', 'pool.xmrfast.com', 'pool2.armornetwork.org', 'poolchange.ppxxmr.com', 'pooldd.com', 'poolmining.org', 'poolto.be', 'ppxvip1.ppxxmr.com', 'ppxxmr.com', 'prohash.net', 'r.twotouchauthentication.online', 'randomx.xmrig.com', 'ratchetmining.com', 'seed.emercoin.com', 'seed.emercoin.net', 'seed.emergate.net', 'seed1.joulecoin.org', 'seed2.joulecoin.org', 'seed3.joulecoin.org', 'seed4.joulecoin.org', 'seed5.joulecoin.org', 'seed6.joulecoin.org', 'seed7.joulecoin.org', 'seed8.joulecoin.org', 'sg-aipg.miningocean.org', 'sg-dynex.miningocean.org', 'sg-neurai.miningocean.org', 'sg-qrl.miningocean.org', 'sg-upx.miningocean.org', 'sg-zephyr.miningocean.org', 'sg.minexmr.com', 'sheepman.mine.bz', 'siamining.com', 'sumokoin.minerrocks.com', 'supportxmr.com', 'suprnova.cc', 'teracycle.net', 'trtl.cnpool.cc', 'trtl.pool.mine2gether.com', 'turtle.miner.rocks', 'us-aipg.miningocean.org', 'us-dynex.miningocean.org', 'us-neurai.miningocean.org', 'us-west.minexmr.com', 'us-zephyr.miningocean.org', 'usxmrpool.com', 'viaxmr.com', 'webservicepag.webhop.net', 'xiazai.monerpool.org', 'xiazai1.monerpool.org', 'xmc.pool.minergate.com', 'xmo.pool.minergate.com', 'xmr-asia1.nanopool.org', 'xmr-au1.nanopool.org', 'xmr-eu1.nanopool.org', 'xmr-eu2.nanopool.org', 'xmr-jp1.nanopool.org', 'xmr-us-east1.nanopool.org', 'xmr-us-west1.nanopool.org', 'xmr-us.suprnova.cc', 'xmr-usa.dwarfpool.com', 'xmr.2miners.com', 'xmr.5b6b7b.ru', 'xmr.alimabi.cn', 'xmr.bohemianpool.com', 'xmr.crypto-pool.fr', 'xmr.crypto-pool.info', 'xmr.f2pool.com', 'xmr.hashcity.org', 'xmr.hex7e4.ru', 'xmr.ip28.net', 'xmr.monerpool.org', 'xmr.mypool.online', 'xmr.nanopool.org', 'xmr.pool.gntl.co.uk', 'xmr.pool.minergate.com', 'xmr.poolto.be', 'xmr.ppxxmr.com', 'xmr.prohash.net', 'xmr.simka.pw', 'xmr.somec.cc', 'xmr.suprnova.cc', 'xmr.usa-138.com', 'xmr.vip.pool.minergate.com', 'xmr1min.monerpool.org', 'xmrf.520fjh.org', 'xmrf.fjhan.club', 'xmrfast.com', 'xmrigcc.graef.in', 'xmrminer.cc', 'xmrpool.de', 'xmrpool.eu', 'xmrpool.me', 'xmrpool.net', 'xmrpool.xyz', 'xx11m.monerpool.org', 'xx11mv2.monerpool.org', 'xxx.hex7e4.ru', 'zarabotaibitok.ru', 'zer0day.ru'])"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Dropbox API Usage",
        "id": "25eabf56-22f0-4915-a1ed-056b8dae0a68",
        "status": "test",
        "description": "Detects an executable that isn't dropbox but communicates with the Dropbox API",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & (DestinationHostname.str.contains(r'api.dropboxapi.com', case=False) | DestinationHostname.str.contains(r'content.dropboxapi.com', case=False)) & ~ Image.str.contains(r'\\\\Dropbox', case=False)"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Process Initiated Network  Connection To Ngrok Domain",
        "id": "18249279-932f-45e2-b37a-8925f2597670",
        "status": "test",
        "description": "Detects an executable initiating a network connection to \"ngrok\" domains.\nAttackers were seen using this \"ngrok\" in order to store their second stage payloads and malware.\nWhile communication with such domains can be legitimate, often times is a sign of either data exfiltration by malicious actors or additional download.\n",
        "tags": [
            "attack.exfiltration",
            "attack.t1567.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & (DestinationHostname.str.contains(r'.ngrok-free.app', case=False) | DestinationHostname.str.contains(r'.ngrok-free.dev', case=False) | DestinationHostname.str.contains(r'.ngrok.app', case=False) | DestinationHostname.str.contains(r'.ngrok.dev', case=False) | DestinationHostname.str.contains(r'.ngrok.io', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Connection Initiated By Regsvr32.EXE",
        "id": "c7e91a02-d771-4a6d-a700-42587e0b1095",
        "status": "test",
        "description": "Detects a network connection initiated by \"Regsvr32.exe\"",
        "tags": [
            "attack.execution",
            "attack.t1559.001",
            "attack.defense-evasion",
            "attack.t1218.010"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & Image.str.contains(r'\\\\regsvr32.exe', case=False)"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Communication Initiated To File Sharing Domains From Process Located In Suspicious Folder",
        "id": "e0f8ab85-0ac9-423b-a73a-81b3c7b1aa97",
        "status": "test",
        "description": "Detects executables located in potentially suspicious directories initiating network connections towards file sharing domains.",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & (Image.str.contains(r':\\\\$Recycle.bin', case=False) | Image.str.contains(r':\\\\Perflogs\\\\', case=False) | Image.str.contains(r':\\\\Temp\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\Default\\\\', case=False) | Image.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Fonts\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\IME\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\Tasks\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\config\\\\systemprofile\\\\', case=False) | Image.str.contains(r'\\\\Windows\\\\addins\\\\', case=False)) & Initiated=='true' & (DestinationHostname.str.contains(r'.githubusercontent.com', case=False) | DestinationHostname.str.contains(r'anonfiles.com', case=False) | DestinationHostname.str.contains(r'cdn.discordapp.com', case=False) | DestinationHostname.str.contains(r'ddns.net', case=False) | DestinationHostname.str.contains(r'dl.dropboxusercontent.com', case=False) | DestinationHostname.str.contains(r'ghostbin.co', case=False) | DestinationHostname.str.contains(r'glitch.me', case=False) | DestinationHostname.str.contains(r'gofile.io', case=False) | DestinationHostname.str.contains(r'hastebin.com', case=False) | DestinationHostname.str.contains(r'mediafire.com', case=False) | DestinationHostname.str.contains(r'mega.co.nz', case=False) | DestinationHostname.str.contains(r'mega.nz', case=False) | DestinationHostname.str.contains(r'onrender.com', case=False) | DestinationHostname.str.contains(r'pages.dev', case=False) | DestinationHostname.str.contains(r'paste.ee', case=False) | DestinationHostname.str.contains(r'pastebin.com', case=False) | DestinationHostname.str.contains(r'pastebin.pl', case=False) | DestinationHostname.str.contains(r'pastetext.net', case=False) | DestinationHostname.str.contains(r'pixeldrain.com', case=False) | DestinationHostname.str.contains(r'privatlab.com', case=False) | DestinationHostname.str.contains(r'privatlab.net', case=False) | DestinationHostname.str.contains(r'send.exploit.in', case=False) | DestinationHostname.str.contains(r'sendspace.com', case=False) | DestinationHostname.str.contains(r'storage.googleapis.com', case=False) | DestinationHostname.str.contains(r'storjshare.io', case=False) | DestinationHostname.str.contains(r'supabase.co', case=False) | DestinationHostname.str.contains(r'temp.sh', case=False) | DestinationHostname.str.contains(r'transfer.sh', case=False) | DestinationHostname.str.contains(r'trycloudflare.com', case=False) | DestinationHostname.str.contains(r'ufile.io', case=False) | DestinationHostname.str.contains(r'w3spaces.com', case=False) | DestinationHostname.str.contains(r'workers.dev', case=False))"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - AnyDesk Incoming Connection",
        "id": "d58ba5c6-0ed7-4b9d-a433-6878379efda9",
        "status": "experimental",
        "description": "Detects incoming connections to AnyDesk. This could indicate a potential remote attacker trying to connect to a listening instance of AnyDesk and use it as potential command and control channel.\n",
        "tags": [
            "attack.persistence",
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & (Image.str.contains(r'\\\\AnyDesk.exe', case=False) | Image.str.contains(r'\\\\AnyDeskMSI.exe', case=False)) & Initiated=='false'"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Communication Initiated To Portmap.IO Domain",
        "id": "07837ab9-60e1-481f-a74d-c31fb496a94c",
        "status": "experimental",
        "description": "Detects an executable accessing the portmap.io domain, which could be a sign of forbidden C2 traffic or data exfiltration by malicious actors",
        "tags": [
            "attack.t1041",
            "attack.command-and-control",
            "attack.t1090.002",
            "attack.exfiltration"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & DestinationHostname.str.contains(r'.portmap.io', case=False)"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "RDP Over Reverse SSH Tunnel",
        "id": "5f699bc5-5446-4a4a-a0b7-5ef2885a3eb4",
        "status": "test",
        "description": "Detects svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389",
        "tags": [
            "attack.command-and-control",
            "attack.t1572",
            "attack.lateral-movement",
            "attack.t1021.001",
            "car.2013-07-002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Image.str.contains(r'\\\\svchost.exe', case=False) & Initiated=='true' & SourcePort==3389 & (DestinationIp.str.contains(r'127.', case=False) | DestinationIp==['::1/128'])"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Office Application Initiated Network Connection To Non-Local IP",
        "id": "75e33ce3-ae32-4dcc-9aa8-a2a3029d6f84",
        "status": "test",
        "description": "Detects an office application (Word, Excel, PowerPoint)  that initiate a network connection to a non-private IP addresses.\nThis rule aims to detect traffic similar to one seen exploited in CVE-2021-42292.\nThis rule will require an initial baseline and tuning that is specific to your organization.\n",
        "tags": [
            "attack.execution",
            "attack.t1203"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & (Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\outlook.exe', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) | Image.str.contains(r'\\\\winword.exe', case=False) | Image.str.contains(r'\\\\wordview.exe', case=False)) & Initiated=='true' & ~ (DestinationIp.str.contains(r'127.', case=False) | DestinationIp.str.contains(r'10.', case=False) | DestinationIp.str.contains(r'172.16.', case=False) | DestinationIp.str.contains(r'172.17.', case=False) | DestinationIp.str.contains(r'172.18.', case=False) | DestinationIp.str.contains(r'172.19.', case=False) | DestinationIp.str.contains(r'172.20.', case=False) | DestinationIp.str.contains(r'172.21.', case=False) | DestinationIp.str.contains(r'172.22.', case=False) | DestinationIp.str.contains(r'172.23.', case=False) | DestinationIp.str.contains(r'172.24.', case=False) | DestinationIp.str.contains(r'172.25.', case=False) | DestinationIp.str.contains(r'172.26.', case=False) | DestinationIp.str.contains(r'172.27.', case=False) | DestinationIp.str.contains(r'172.28.', case=False) | DestinationIp.str.contains(r'172.29.', case=False) | DestinationIp.str.contains(r'172.30.', case=False) | DestinationIp.str.contains(r'172.31.', case=False) | DestinationIp.str.contains(r'192.168.', case=False) | DestinationIp.str.contains(r'169.254.', case=False) | DestinationIp==['::1/128'] | DestinationIp.str.contains(r'fe8', case=False) | DestinationIp.str.contains(r'fe9', case=False) | DestinationIp.str.contains(r'fea', case=False) | DestinationIp.str.contains(r'feb', case=False) | DestinationIp.str.contains(r'fc', case=False) | DestinationIp.str.contains(r'fd', case=False) | DestinationIp.str.contains(r'20.184.', case=False) | DestinationIp.str.contains(r'20.185.', case=False) | DestinationIp.str.contains(r'20.186.', case=False) | DestinationIp.str.contains(r'20.187.', case=False) | DestinationIp.str.contains(r'20.188.', case=False) | DestinationIp.str.contains(r'20.189.', case=False) | DestinationIp.str.contains(r'20.190.', case=False) | DestinationIp.str.contains(r'20.191.', case=False) | DestinationIp.str.contains(r'20.192.', case=False) | DestinationIp.str.contains(r'20.193.', case=False) | DestinationIp.str.contains(r'20.194.', case=False) | DestinationIp.str.contains(r'20.195.', case=False) | DestinationIp.str.contains(r'20.196.', case=False) | DestinationIp.str.contains(r'20.197.', case=False) | DestinationIp.str.contains(r'20.198.', case=False) | DestinationIp.str.contains(r'20.199.', case=False) | DestinationIp.str.contains(r'20.200.', case=False) | DestinationIp.str.contains(r'20.201.', case=False) | DestinationIp.str.contains(r'20.202.', case=False) | DestinationIp.str.contains(r'20.203.', case=False) | DestinationIp.str.contains(r'20.204.', case=False) | DestinationIp.str.contains(r'20.205.', case=False) | DestinationIp.str.contains(r'20.206.', case=False) | DestinationIp.str.contains(r'20.207.', case=False) | DestinationIp.str.contains(r'20.208.', case=False) | DestinationIp.str.contains(r'20.209.', case=False) | DestinationIp.str.contains(r'20.210.', case=False) | DestinationIp.str.contains(r'20.211.', case=False) | DestinationIp.str.contains(r'20.212.', case=False) | DestinationIp.str.contains(r'20.213.', case=False) | DestinationIp.str.contains(r'20.214.', case=False) | DestinationIp.str.contains(r'20.215.', case=False) | DestinationIp.str.contains(r'20.216.', case=False) | DestinationIp.str.contains(r'20.217.', case=False) | DestinationIp.str.contains(r'20.218.', case=False) | DestinationIp.str.contains(r'20.219.', case=False) | DestinationIp.str.contains(r'20.220.', case=False) | DestinationIp.str.contains(r'20.221.', case=False) | DestinationIp.str.contains(r'20.222.', case=False) | DestinationIp.str.contains(r'20.223.', case=False) | DestinationIp.str.contains(r'20.224.', case=False) | DestinationIp.str.contains(r'20.225.', case=False) | DestinationIp.str.contains(r'20.226.', case=False) | DestinationIp.str.contains(r'20.227.', case=False) | DestinationIp.str.contains(r'20.228.', case=False) | DestinationIp.str.contains(r'20.229.', case=False) | DestinationIp.str.contains(r'20.230.', case=False) | DestinationIp.str.contains(r'20.231.', case=False) | DestinationIp.str.contains(r'20.232.', case=False) | DestinationIp.str.contains(r'20.233.', case=False) | DestinationIp.str.contains(r'20.234.', case=False) | DestinationIp.str.contains(r'20.235.', case=False) | DestinationIp.str.contains(r'20.236.', case=False) | DestinationIp.str.contains(r'20.237.', case=False) | DestinationIp.str.contains(r'20.238.', case=False) | DestinationIp.str.contains(r'20.239.', case=False) | DestinationIp.str.contains(r'20.240.', case=False) | DestinationIp.str.contains(r'20.241.', case=False) | DestinationIp.str.contains(r'20.242.', case=False) | DestinationIp.str.contains(r'20.243.', case=False) | DestinationIp.str.contains(r'20.244.', case=False) | DestinationIp.str.contains(r'20.245.', case=False) | DestinationIp.str.contains(r'20.246.', case=False) | DestinationIp.str.contains(r'20.247.', case=False) | DestinationIp.str.contains(r'20.248.', case=False) | DestinationIp.str.contains(r'20.249.', case=False) | DestinationIp.str.contains(r'20.250.', case=False) | DestinationIp.str.contains(r'20.251.', case=False) | DestinationIp.str.contains(r'20.252.', case=False) | DestinationIp.str.contains(r'20.253.', case=False) | DestinationIp.str.contains(r'20.254.', case=False) | DestinationIp.str.contains(r'20.255.', case=False) | DestinationIp.str.contains(r'23.72.', case=False) | DestinationIp.str.contains(r'23.73.', case=False) | DestinationIp.str.contains(r'23.74.', case=False) | DestinationIp.str.contains(r'23.75.', case=False) | DestinationIp.str.contains(r'23.76.', case=False) | DestinationIp.str.contains(r'23.77.', case=False) | DestinationIp.str.contains(r'23.78.', case=False) | DestinationIp.str.contains(r'23.79.', case=False) | DestinationIp.str.contains(r'40.76.', case=False) | DestinationIp.str.contains(r'40.77.', case=False) | DestinationIp.str.contains(r'40.78.', case=False) | DestinationIp.str.contains(r'40.79.', case=False) | DestinationIp.str.contains(r'51.10.', case=False) | DestinationIp.str.contains(r'51.11.', case=False) | DestinationIp.str.contains(r'51.103.', case=False) | DestinationIp.str.contains(r'51.104.', case=False) | DestinationIp.str.contains(r'51.105.', case=False) | DestinationIp.str.contains(r'51.142.136.', case=False) | DestinationIp.str.contains(r'51.142.137.', case=False) | DestinationIp.str.contains(r'51.142.138.', case=False) | DestinationIp.str.contains(r'51.142.139.', case=False) | DestinationIp.str.contains(r'52.160.', case=False) | DestinationIp.str.contains(r'52.161.', case=False) | DestinationIp.str.contains(r'52.162.', case=False) | DestinationIp.str.contains(r'52.163.', case=False) | DestinationIp.str.contains(r'52.164.', case=False) | DestinationIp.str.contains(r'52.165.', case=False) | DestinationIp.str.contains(r'52.166.', case=False) | DestinationIp.str.contains(r'52.167.', case=False) | DestinationIp.str.contains(r'52.168.', case=False) | DestinationIp.str.contains(r'52.169.', case=False) | DestinationIp.str.contains(r'52.170.', case=False) | DestinationIp.str.contains(r'52.171.', case=False) | DestinationIp.str.contains(r'52.172.', case=False) | DestinationIp.str.contains(r'52.173.', case=False) | DestinationIp.str.contains(r'52.174.', case=False) | DestinationIp.str.contains(r'52.175.', case=False) | DestinationIp.str.contains(r'52.176.', case=False) | DestinationIp.str.contains(r'52.177.', case=False) | DestinationIp.str.contains(r'52.178.', case=False) | DestinationIp.str.contains(r'52.179.', case=False) | DestinationIp.str.contains(r'52.180.', case=False) | DestinationIp.str.contains(r'52.181.', case=False) | DestinationIp.str.contains(r'52.182.', case=False) | DestinationIp.str.contains(r'52.183.', case=False) | DestinationIp.str.contains(r'52.184.', case=False) | DestinationIp.str.contains(r'52.185.', case=False) | DestinationIp.str.contains(r'52.186.', case=False) | DestinationIp.str.contains(r'52.187.', case=False) | DestinationIp.str.contains(r'52.188.', case=False) | DestinationIp.str.contains(r'52.189.', case=False) | DestinationIp.str.contains(r'52.190.', case=False) | DestinationIp.str.contains(r'52.191.', case=False) | DestinationIp.str.contains(r'204.79.197.', case=False) | (DestinationIp==['13.107.6.152', '13.107.6.153'] | DestinationIp==['13.107.18.10', '13.107.18.11'] | DestinationIp.str.contains(r'13.107.128.', case=False) | DestinationIp.str.contains(r'13.107.129.', case=False) | DestinationIp.str.contains(r'13.107.130.', case=False) | DestinationIp.str.contains(r'13.107.131.', case=False) | DestinationIp.str.contains(r'23.103.160.', case=False) | DestinationIp.str.contains(r'23.103.161.', case=False) | DestinationIp.str.contains(r'23.103.162.', case=False) | DestinationIp.str.contains(r'23.103.163.', case=False) | DestinationIp.str.contains(r'23.103.164.', case=False) | DestinationIp.str.contains(r'23.103.165.', case=False) | DestinationIp.str.contains(r'23.103.166.', case=False) | DestinationIp.str.contains(r'23.103.167.', case=False) | DestinationIp.str.contains(r'23.103.168.', case=False) | DestinationIp.str.contains(r'23.103.169.', case=False) | DestinationIp.str.contains(r'23.103.170.', case=False) | DestinationIp.str.contains(r'23.103.171.', case=False) | DestinationIp.str.contains(r'23.103.172.', case=False) | DestinationIp.str.contains(r'23.103.173.', case=False) | DestinationIp.str.contains(r'23.103.174.', case=False) | DestinationIp.str.contains(r'23.103.175.', case=False) | DestinationIp.str.contains(r'40.96.', case=False) | DestinationIp.str.contains(r'40.97.', case=False) | DestinationIp.str.contains(r'40.98.', case=False) | DestinationIp.str.contains(r'40.99.', case=False) | DestinationIp.str.contains(r'40.100.', case=False) | DestinationIp.str.contains(r'40.101.', case=False) | DestinationIp.str.contains(r'40.102.', case=False) | DestinationIp.str.contains(r'40.103.', case=False) | DestinationIp.str.contains(r'40.104.', case=False) | DestinationIp.str.contains(r'40.105.', case=False) | DestinationIp.str.contains(r'52.96.', case=False) | DestinationIp.str.contains(r'52.97.', case=False) | DestinationIp.str.contains(r'52.98.', case=False) | DestinationIp.str.contains(r'52.99.', case=False) | DestinationIp==['131.253.33.215'] | DestinationIp.str.contains(r'132.245.', case=False) | DestinationIp.str.contains(r'150.171.32.', case=False) | DestinationIp.str.contains(r'150.171.33.', case=False) | DestinationIp.str.contains(r'150.171.34.', case=False) | DestinationIp.str.contains(r'150.171.35.', case=False) | DestinationIp==['204.79.197.215'] | DestinationIp.str.contains(r'2603:1006:', case=False) | DestinationIp.str.contains(r'2603:1016:', case=False) | DestinationIp.str.contains(r'2603:1026:', case=False) | DestinationIp.str.contains(r'2603:1036:', case=False) | DestinationIp.str.contains(r'2603:1046:', case=False) | DestinationIp.str.contains(r'2603:1056:', case=False) | DestinationIp==['2620:1ec:4::152/128'] | DestinationIp==['2620:1ec:4::153/128'] | DestinationIp==['2620:1ec:c::10/128'] | DestinationIp==['2620:1ec:c::11/128'] | DestinationIp==['2620:1ec:d::10/128'] | DestinationIp==['2620:1ec:d::11/128'] | DestinationIp.str.contains(r'2620:1ec:8f0:', case=False) | DestinationIp.str.contains(r'2620:1ec:8f1:', case=False) | DestinationIp.str.contains(r'2620:1ec:8f2:', case=False) | DestinationIp.str.contains(r'2620:1ec:8f3:', case=False) | DestinationIp.str.contains(r'2620:1ec:900:', case=False) | DestinationIp.str.contains(r'2620:1ec:901:', case=False) | DestinationIp.str.contains(r'2620:1ec:902:', case=False) | DestinationIp.str.contains(r'2620:1ec:903:', case=False) | DestinationIp==['2620:1ec:a92::152/128'] | DestinationIp==['2620:1ec:a92::153/128']) & (DestinationPort==[80, 443]) | (DestinationIp==['13.107.6.152', '13.107.6.153'] | DestinationIp==['13.107.18.10', '13.107.18.11'] | DestinationIp.str.contains(r'13.107.128.', case=False) | DestinationIp.str.contains(r'13.107.129.', case=False) | DestinationIp.str.contains(r'13.107.130.', case=False) | DestinationIp.str.contains(r'13.107.131.', case=False) | DestinationIp.str.contains(r'23.103.160.', case=False) | DestinationIp.str.contains(r'23.103.161.', case=False) | DestinationIp.str.contains(r'23.103.162.', case=False) | DestinationIp.str.contains(r'23.103.163.', case=False) | DestinationIp.str.contains(r'23.103.164.', case=False) | DestinationIp.str.contains(r'23.103.165.', case=False) | DestinationIp.str.contains(r'23.103.166.', case=False) | DestinationIp.str.contains(r'23.103.167.', case=False) | DestinationIp.str.contains(r'23.103.168.', case=False) | DestinationIp.str.contains(r'23.103.169.', case=False) | DestinationIp.str.contains(r'23.103.170.', case=False) | DestinationIp.str.contains(r'23.103.171.', case=False) | DestinationIp.str.contains(r'23.103.172.', case=False) | DestinationIp.str.contains(r'23.103.173.', case=False) | DestinationIp.str.contains(r'23.103.174.', case=False) | DestinationIp.str.contains(r'23.103.175.', case=False) | DestinationIp.str.contains(r'40.96.', case=False) | DestinationIp.str.contains(r'40.97.', case=False) | DestinationIp.str.contains(r'40.98.', case=False) | DestinationIp.str.contains(r'40.99.', case=False) | DestinationIp.str.contains(r'40.100.', case=False) | DestinationIp.str.contains(r'40.101.', case=False) | DestinationIp.str.contains(r'40.102.', case=False) | DestinationIp.str.contains(r'40.103.', case=False) | DestinationIp.str.contains(r'40.104.', case=False) | DestinationIp.str.contains(r'40.105.', case=False) | DestinationIp.str.contains(r'52.96.', case=False) | DestinationIp.str.contains(r'52.97.', case=False) | DestinationIp.str.contains(r'52.98.', case=False) | DestinationIp.str.contains(r'52.99.', case=False) | DestinationIp==['131.253.33.215'] | DestinationIp.str.contains(r'132.245.', case=False) | DestinationIp.str.contains(r'150.171.32.', case=False) | DestinationIp.str.contains(r'150.171.33.', case=False) | DestinationIp.str.contains(r'150.171.34.', case=False) | DestinationIp.str.contains(r'150.171.35.', case=False) | DestinationIp==['204.79.197.215'] | DestinationIp.str.contains(r'2603:1006:', case=False) | DestinationIp.str.contains(r'2603:1016:', case=False) | DestinationIp.str.contains(r'2603:1026:', case=False) | DestinationIp.str.contains(r'2603:1036:', case=False) | DestinationIp.str.contains(r'2603:1046:', case=False) | DestinationIp.str.contains(r'2603:1056:', case=False) | DestinationIp==['2620:1ec:4::152/128'] | DestinationIp==['2620:1ec:4::153/128'] | DestinationIp==['2620:1ec:c::10/128'] | DestinationIp==['2620:1ec:c::11/128'] | DestinationIp==['2620:1ec:d::10/128'] | DestinationIp==['2620:1ec:d::11/128'] | DestinationIp.str.contains(r'2620:1ec:8f0:', case=False) | DestinationIp.str.contains(r'2620:1ec:8f1:', case=False) | DestinationIp.str.contains(r'2620:1ec:8f2:', case=False) | DestinationIp.str.contains(r'2620:1ec:8f3:', case=False) | DestinationIp.str.contains(r'2620:1ec:900:', case=False) | DestinationIp.str.contains(r'2620:1ec:901:', case=False) | DestinationIp.str.contains(r'2620:1ec:902:', case=False) | DestinationIp.str.contains(r'2620:1ec:903:', case=False) | DestinationIp==['2620:1ec:a92::152/128'] | DestinationIp==['2620:1ec:a92::153/128']) & (DestinationPort==[143, 587, 993, 995]) & Protocol=='tcp' | (DestinationIp.str.contains(r'40.92.', case=False) | DestinationIp.str.contains(r'40.93.', case=False) | DestinationIp.str.contains(r'40.107.', case=False) | DestinationIp.str.contains(r'52.100.', case=False) | DestinationIp.str.contains(r'52.101.', case=False) | DestinationIp.str.contains(r'52.102.', case=False) | DestinationIp.str.contains(r'52.103.', case=False) | DestinationIp==['52.238.78.88'] | DestinationIp.str.contains(r'104.47.0.', case=False) | DestinationIp.str.contains(r'104.47.1.', case=False) | DestinationIp.str.contains(r'104.47.2.', case=False) | DestinationIp.str.contains(r'104.47.3.', case=False) | DestinationIp.str.contains(r'104.47.4.', case=False) | DestinationIp.str.contains(r'104.47.5.', case=False) | DestinationIp.str.contains(r'104.47.6.', case=False) | DestinationIp.str.contains(r'104.47.7.', case=False) | DestinationIp.str.contains(r'104.47.8.', case=False) | DestinationIp.str.contains(r'104.47.9.', case=False) | DestinationIp.str.contains(r'104.47.10.', case=False) | DestinationIp.str.contains(r'104.47.11.', case=False) | DestinationIp.str.contains(r'104.47.12.', case=False) | DestinationIp.str.contains(r'104.47.13.', case=False) | DestinationIp.str.contains(r'104.47.14.', case=False) | DestinationIp.str.contains(r'104.47.15.', case=False) | DestinationIp.str.contains(r'104.47.16.', case=False) | DestinationIp.str.contains(r'104.47.17.', case=False) | DestinationIp.str.contains(r'104.47.18.', case=False) | DestinationIp.str.contains(r'104.47.19.', case=False) | DestinationIp.str.contains(r'104.47.20.', case=False) | DestinationIp.str.contains(r'104.47.21.', case=False) | DestinationIp.str.contains(r'104.47.22.', case=False) | DestinationIp.str.contains(r'104.47.23.', case=False) | DestinationIp.str.contains(r'104.47.24.', case=False) | DestinationIp.str.contains(r'104.47.25.', case=False) | DestinationIp.str.contains(r'104.47.26.', case=False) | DestinationIp.str.contains(r'104.47.27.', case=False) | DestinationIp.str.contains(r'104.47.28.', case=False) | DestinationIp.str.contains(r'104.47.29.', case=False) | DestinationIp.str.contains(r'104.47.30.', case=False) | DestinationIp.str.contains(r'104.47.31.', case=False) | DestinationIp.str.contains(r'104.47.32.', case=False) | DestinationIp.str.contains(r'104.47.33.', case=False) | DestinationIp.str.contains(r'104.47.34.', case=False) | DestinationIp.str.contains(r'104.47.35.', case=False) | DestinationIp.str.contains(r'104.47.36.', case=False) | DestinationIp.str.contains(r'104.47.37.', case=False) | DestinationIp.str.contains(r'104.47.38.', case=False) | DestinationIp.str.contains(r'104.47.39.', case=False) | DestinationIp.str.contains(r'104.47.40.', case=False) | DestinationIp.str.contains(r'104.47.41.', case=False) | DestinationIp.str.contains(r'104.47.42.', case=False) | DestinationIp.str.contains(r'104.47.43.', case=False) | DestinationIp.str.contains(r'104.47.44.', case=False) | DestinationIp.str.contains(r'104.47.45.', case=False) | DestinationIp.str.contains(r'104.47.46.', case=False) | DestinationIp.str.contains(r'104.47.47.', case=False) | DestinationIp.str.contains(r'104.47.48.', case=False) | DestinationIp.str.contains(r'104.47.49.', case=False) | DestinationIp.str.contains(r'104.47.50.', case=False) | DestinationIp.str.contains(r'104.47.51.', case=False) | DestinationIp.str.contains(r'104.47.52.', case=False) | DestinationIp.str.contains(r'104.47.53.', case=False) | DestinationIp.str.contains(r'104.47.54.', case=False) | DestinationIp.str.contains(r'104.47.55.', case=False) | DestinationIp.str.contains(r'104.47.56.', case=False) | DestinationIp.str.contains(r'104.47.57.', case=False) | DestinationIp.str.contains(r'104.47.58.', case=False) | DestinationIp.str.contains(r'104.47.59.', case=False) | DestinationIp.str.contains(r'104.47.60.', case=False) | DestinationIp.str.contains(r'104.47.61.', case=False) | DestinationIp.str.contains(r'104.47.62.', case=False) | DestinationIp.str.contains(r'104.47.63.', case=False) | DestinationIp.str.contains(r'104.47.64.', case=False) | DestinationIp.str.contains(r'104.47.65.', case=False) | DestinationIp.str.contains(r'104.47.66.', case=False) | DestinationIp.str.contains(r'104.47.67.', case=False) | DestinationIp.str.contains(r'104.47.68.', case=False) | DestinationIp.str.contains(r'104.47.69.', case=False) | DestinationIp.str.contains(r'104.47.70.', case=False) | DestinationIp.str.contains(r'104.47.71.', case=False) | DestinationIp.str.contains(r'104.47.72.', case=False) | DestinationIp.str.contains(r'104.47.73.', case=False) | DestinationIp.str.contains(r'104.47.74.', case=False) | DestinationIp.str.contains(r'104.47.75.', case=False) | DestinationIp.str.contains(r'104.47.76.', case=False) | DestinationIp.str.contains(r'104.47.77.', case=False) | DestinationIp.str.contains(r'104.47.78.', case=False) | DestinationIp.str.contains(r'104.47.79.', case=False) | DestinationIp.str.contains(r'104.47.80.', case=False) | DestinationIp.str.contains(r'104.47.81.', case=False) | DestinationIp.str.contains(r'104.47.82.', case=False) | DestinationIp.str.contains(r'104.47.83.', case=False) | DestinationIp.str.contains(r'104.47.84.', case=False) | DestinationIp.str.contains(r'104.47.85.', case=False) | DestinationIp.str.contains(r'104.47.86.', case=False) | DestinationIp.str.contains(r'104.47.87.', case=False) | DestinationIp.str.contains(r'104.47.88.', case=False) | DestinationIp.str.contains(r'104.47.89.', case=False) | DestinationIp.str.contains(r'104.47.90.', case=False) | DestinationIp.str.contains(r'104.47.91.', case=False) | DestinationIp.str.contains(r'104.47.92.', case=False) | DestinationIp.str.contains(r'104.47.93.', case=False) | DestinationIp.str.contains(r'104.47.94.', case=False) | DestinationIp.str.contains(r'104.47.95.', case=False) | DestinationIp.str.contains(r'104.47.96.', case=False) | DestinationIp.str.contains(r'104.47.97.', case=False) | DestinationIp.str.contains(r'104.47.98.', case=False) | DestinationIp.str.contains(r'104.47.99.', case=False) | DestinationIp.str.contains(r'104.47.100.', case=False) | DestinationIp.str.contains(r'104.47.101.', case=False) | DestinationIp.str.contains(r'104.47.102.', case=False) | DestinationIp.str.contains(r'104.47.103.', case=False) | DestinationIp.str.contains(r'104.47.104.', case=False) | DestinationIp.str.contains(r'104.47.105.', case=False) | DestinationIp.str.contains(r'104.47.106.', case=False) | DestinationIp.str.contains(r'104.47.107.', case=False) | DestinationIp.str.contains(r'104.47.108.', case=False) | DestinationIp.str.contains(r'104.47.109.', case=False) | DestinationIp.str.contains(r'104.47.110.', case=False) | DestinationIp.str.contains(r'104.47.111.', case=False) | DestinationIp.str.contains(r'104.47.112.', case=False) | DestinationIp.str.contains(r'104.47.113.', case=False) | DestinationIp.str.contains(r'104.47.114.', case=False) | DestinationIp.str.contains(r'104.47.115.', case=False) | DestinationIp.str.contains(r'104.47.116.', case=False) | DestinationIp.str.contains(r'104.47.117.', case=False) | DestinationIp.str.contains(r'104.47.118.', case=False) | DestinationIp.str.contains(r'104.47.119.', case=False) | DestinationIp.str.contains(r'104.47.120.', case=False) | DestinationIp.str.contains(r'104.47.121.', case=False) | DestinationIp.str.contains(r'104.47.122.', case=False) | DestinationIp.str.contains(r'104.47.123.', case=False) | DestinationIp.str.contains(r'104.47.124.', case=False) | DestinationIp.str.contains(r'104.47.125.', case=False) | DestinationIp.str.contains(r'104.47.126.', case=False) | DestinationIp.str.contains(r'104.47.127.', case=False) | DestinationIp.str.contains(r'2a01:111:f400:', case=False) | DestinationIp.str.contains(r'2a01:111:f403:', case=False)) & DestinationPort==443 | (DestinationIp.str.contains(r'40.92.', case=False) | DestinationIp.str.contains(r'40.93.', case=False) | DestinationIp.str.contains(r'40.107.', case=False) | DestinationIp.str.contains(r'52.100.', case=False) | DestinationIp.str.contains(r'52.101.', case=False) | DestinationIp.str.contains(r'52.102.', case=False) | DestinationIp.str.contains(r'52.103.', case=False) | DestinationIp==['52.238.78.88'] | DestinationIp.str.contains(r'104.47.0.', case=False) | DestinationIp.str.contains(r'104.47.1.', case=False) | DestinationIp.str.contains(r'104.47.2.', case=False) | DestinationIp.str.contains(r'104.47.3.', case=False) | DestinationIp.str.contains(r'104.47.4.', case=False) | DestinationIp.str.contains(r'104.47.5.', case=False) | DestinationIp.str.contains(r'104.47.6.', case=False) | DestinationIp.str.contains(r'104.47.7.', case=False) | DestinationIp.str.contains(r'104.47.8.', case=False) | DestinationIp.str.contains(r'104.47.9.', case=False) | DestinationIp.str.contains(r'104.47.10.', case=False) | DestinationIp.str.contains(r'104.47.11.', case=False) | DestinationIp.str.contains(r'104.47.12.', case=False) | DestinationIp.str.contains(r'104.47.13.', case=False) | DestinationIp.str.contains(r'104.47.14.', case=False) | DestinationIp.str.contains(r'104.47.15.', case=False) | DestinationIp.str.contains(r'104.47.16.', case=False) | DestinationIp.str.contains(r'104.47.17.', case=False) | DestinationIp.str.contains(r'104.47.18.', case=False) | DestinationIp.str.contains(r'104.47.19.', case=False) | DestinationIp.str.contains(r'104.47.20.', case=False) | DestinationIp.str.contains(r'104.47.21.', case=False) | DestinationIp.str.contains(r'104.47.22.', case=False) | DestinationIp.str.contains(r'104.47.23.', case=False) | DestinationIp.str.contains(r'104.47.24.', case=False) | DestinationIp.str.contains(r'104.47.25.', case=False) | DestinationIp.str.contains(r'104.47.26.', case=False) | DestinationIp.str.contains(r'104.47.27.', case=False) | DestinationIp.str.contains(r'104.47.28.', case=False) | DestinationIp.str.contains(r'104.47.29.', case=False) | DestinationIp.str.contains(r'104.47.30.', case=False) | DestinationIp.str.contains(r'104.47.31.', case=False) | DestinationIp.str.contains(r'104.47.32.', case=False) | DestinationIp.str.contains(r'104.47.33.', case=False) | DestinationIp.str.contains(r'104.47.34.', case=False) | DestinationIp.str.contains(r'104.47.35.', case=False) | DestinationIp.str.contains(r'104.47.36.', case=False) | DestinationIp.str.contains(r'104.47.37.', case=False) | DestinationIp.str.contains(r'104.47.38.', case=False) | DestinationIp.str.contains(r'104.47.39.', case=False) | DestinationIp.str.contains(r'104.47.40.', case=False) | DestinationIp.str.contains(r'104.47.41.', case=False) | DestinationIp.str.contains(r'104.47.42.', case=False) | DestinationIp.str.contains(r'104.47.43.', case=False) | DestinationIp.str.contains(r'104.47.44.', case=False) | DestinationIp.str.contains(r'104.47.45.', case=False) | DestinationIp.str.contains(r'104.47.46.', case=False) | DestinationIp.str.contains(r'104.47.47.', case=False) | DestinationIp.str.contains(r'104.47.48.', case=False) | DestinationIp.str.contains(r'104.47.49.', case=False) | DestinationIp.str.contains(r'104.47.50.', case=False) | DestinationIp.str.contains(r'104.47.51.', case=False) | DestinationIp.str.contains(r'104.47.52.', case=False) | DestinationIp.str.contains(r'104.47.53.', case=False) | DestinationIp.str.contains(r'104.47.54.', case=False) | DestinationIp.str.contains(r'104.47.55.', case=False) | DestinationIp.str.contains(r'104.47.56.', case=False) | DestinationIp.str.contains(r'104.47.57.', case=False) | DestinationIp.str.contains(r'104.47.58.', case=False) | DestinationIp.str.contains(r'104.47.59.', case=False) | DestinationIp.str.contains(r'104.47.60.', case=False) | DestinationIp.str.contains(r'104.47.61.', case=False) | DestinationIp.str.contains(r'104.47.62.', case=False) | DestinationIp.str.contains(r'104.47.63.', case=False) | DestinationIp.str.contains(r'104.47.64.', case=False) | DestinationIp.str.contains(r'104.47.65.', case=False) | DestinationIp.str.contains(r'104.47.66.', case=False) | DestinationIp.str.contains(r'104.47.67.', case=False) | DestinationIp.str.contains(r'104.47.68.', case=False) | DestinationIp.str.contains(r'104.47.69.', case=False) | DestinationIp.str.contains(r'104.47.70.', case=False) | DestinationIp.str.contains(r'104.47.71.', case=False) | DestinationIp.str.contains(r'104.47.72.', case=False) | DestinationIp.str.contains(r'104.47.73.', case=False) | DestinationIp.str.contains(r'104.47.74.', case=False) | DestinationIp.str.contains(r'104.47.75.', case=False) | DestinationIp.str.contains(r'104.47.76.', case=False) | DestinationIp.str.contains(r'104.47.77.', case=False) | DestinationIp.str.contains(r'104.47.78.', case=False) | DestinationIp.str.contains(r'104.47.79.', case=False) | DestinationIp.str.contains(r'104.47.80.', case=False) | DestinationIp.str.contains(r'104.47.81.', case=False) | DestinationIp.str.contains(r'104.47.82.', case=False) | DestinationIp.str.contains(r'104.47.83.', case=False) | DestinationIp.str.contains(r'104.47.84.', case=False) | DestinationIp.str.contains(r'104.47.85.', case=False) | DestinationIp.str.contains(r'104.47.86.', case=False) | DestinationIp.str.contains(r'104.47.87.', case=False) | DestinationIp.str.contains(r'104.47.88.', case=False) | DestinationIp.str.contains(r'104.47.89.', case=False) | DestinationIp.str.contains(r'104.47.90.', case=False) | DestinationIp.str.contains(r'104.47.91.', case=False) | DestinationIp.str.contains(r'104.47.92.', case=False) | DestinationIp.str.contains(r'104.47.93.', case=False) | DestinationIp.str.contains(r'104.47.94.', case=False) | DestinationIp.str.contains(r'104.47.95.', case=False) | DestinationIp.str.contains(r'104.47.96.', case=False) | DestinationIp.str.contains(r'104.47.97.', case=False) | DestinationIp.str.contains(r'104.47.98.', case=False) | DestinationIp.str.contains(r'104.47.99.', case=False) | DestinationIp.str.contains(r'104.47.100.', case=False) | DestinationIp.str.contains(r'104.47.101.', case=False) | DestinationIp.str.contains(r'104.47.102.', case=False) | DestinationIp.str.contains(r'104.47.103.', case=False) | DestinationIp.str.contains(r'104.47.104.', case=False) | DestinationIp.str.contains(r'104.47.105.', case=False) | DestinationIp.str.contains(r'104.47.106.', case=False) | DestinationIp.str.contains(r'104.47.107.', case=False) | DestinationIp.str.contains(r'104.47.108.', case=False) | DestinationIp.str.contains(r'104.47.109.', case=False) | DestinationIp.str.contains(r'104.47.110.', case=False) | DestinationIp.str.contains(r'104.47.111.', case=False) | DestinationIp.str.contains(r'104.47.112.', case=False) | DestinationIp.str.contains(r'104.47.113.', case=False) | DestinationIp.str.contains(r'104.47.114.', case=False) | DestinationIp.str.contains(r'104.47.115.', case=False) | DestinationIp.str.contains(r'104.47.116.', case=False) | DestinationIp.str.contains(r'104.47.117.', case=False) | DestinationIp.str.contains(r'104.47.118.', case=False) | DestinationIp.str.contains(r'104.47.119.', case=False) | DestinationIp.str.contains(r'104.47.120.', case=False) | DestinationIp.str.contains(r'104.47.121.', case=False) | DestinationIp.str.contains(r'104.47.122.', case=False) | DestinationIp.str.contains(r'104.47.123.', case=False) | DestinationIp.str.contains(r'104.47.124.', case=False) | DestinationIp.str.contains(r'104.47.125.', case=False) | DestinationIp.str.contains(r'104.47.126.', case=False) | DestinationIp.str.contains(r'104.47.127.', case=False) | DestinationIp.str.contains(r'2a01:111:f400:', case=False) | DestinationIp.str.contains(r'2a01:111:f403:', case=False)) & DestinationPort==25 | (DestinationIp.str.contains(r'13.107.136.', case=False) | DestinationIp.str.contains(r'13.107.137.', case=False) | DestinationIp.str.contains(r'13.107.138.', case=False) | DestinationIp.str.contains(r'13.107.139.', case=False) | DestinationIp.str.contains(r'40.108.128.', case=False) | DestinationIp.str.contains(r'40.108.129.', case=False) | DestinationIp.str.contains(r'40.108.130.', case=False) | DestinationIp.str.contains(r'40.108.131.', case=False) | DestinationIp.str.contains(r'40.108.132.', case=False) | DestinationIp.str.contains(r'40.108.133.', case=False) | DestinationIp.str.contains(r'40.108.134.', case=False) | DestinationIp.str.contains(r'40.108.135.', case=False) | DestinationIp.str.contains(r'40.108.136.', case=False) | DestinationIp.str.contains(r'40.108.137.', case=False) | DestinationIp.str.contains(r'40.108.138.', case=False) | DestinationIp.str.contains(r'40.108.139.', case=False) | DestinationIp.str.contains(r'40.108.140.', case=False) | DestinationIp.str.contains(r'40.108.141.', case=False) | DestinationIp.str.contains(r'40.108.142.', case=False) | DestinationIp.str.contains(r'40.108.143.', case=False) | DestinationIp.str.contains(r'40.108.144.', case=False) | DestinationIp.str.contains(r'40.108.145.', case=False) | DestinationIp.str.contains(r'40.108.146.', case=False) | DestinationIp.str.contains(r'40.108.147.', case=False) | DestinationIp.str.contains(r'40.108.148.', case=False) | DestinationIp.str.contains(r'40.108.149.', case=False) | DestinationIp.str.contains(r'40.108.150.', case=False) | DestinationIp.str.contains(r'40.108.151.', case=False) | DestinationIp.str.contains(r'40.108.152.', case=False) | DestinationIp.str.contains(r'40.108.153.', case=False) | DestinationIp.str.contains(r'40.108.154.', case=False) | DestinationIp.str.contains(r'40.108.155.', case=False) | DestinationIp.str.contains(r'40.108.156.', case=False) | DestinationIp.str.contains(r'40.108.157.', case=False) | DestinationIp.str.contains(r'40.108.158.', case=False) | DestinationIp.str.contains(r'40.108.159.', case=False) | DestinationIp.str.contains(r'40.108.160.', case=False) | DestinationIp.str.contains(r'40.108.161.', case=False) | DestinationIp.str.contains(r'40.108.162.', case=False) | DestinationIp.str.contains(r'40.108.163.', case=False) | DestinationIp.str.contains(r'40.108.164.', case=False) | DestinationIp.str.contains(r'40.108.165.', case=False) | DestinationIp.str.contains(r'40.108.166.', case=False) | DestinationIp.str.contains(r'40.108.167.', case=False) | DestinationIp.str.contains(r'40.108.168.', case=False) | DestinationIp.str.contains(r'40.108.169.', case=False) | DestinationIp.str.contains(r'40.108.170.', case=False) | DestinationIp.str.contains(r'40.108.171.', case=False) | DestinationIp.str.contains(r'40.108.172.', case=False) | DestinationIp.str.contains(r'40.108.173.', case=False) | DestinationIp.str.contains(r'40.108.174.', case=False) | DestinationIp.str.contains(r'40.108.175.', case=False) | DestinationIp.str.contains(r'40.108.176.', case=False) | DestinationIp.str.contains(r'40.108.177.', case=False) | DestinationIp.str.contains(r'40.108.178.', case=False) | DestinationIp.str.contains(r'40.108.179.', case=False) | DestinationIp.str.contains(r'40.108.180.', case=False) | DestinationIp.str.contains(r'40.108.181.', case=False) | DestinationIp.str.contains(r'40.108.182.', case=False) | DestinationIp.str.contains(r'40.108.183.', case=False) | DestinationIp.str.contains(r'40.108.184.', case=False) | DestinationIp.str.contains(r'40.108.185.', case=False) | DestinationIp.str.contains(r'40.108.186.', case=False) | DestinationIp.str.contains(r'40.108.187.', case=False) | DestinationIp.str.contains(r'40.108.188.', case=False) | DestinationIp.str.contains(r'40.108.189.', case=False) | DestinationIp.str.contains(r'40.108.190.', case=False) | DestinationIp.str.contains(r'40.108.191.', case=False) | DestinationIp.str.contains(r'40.108.192.', case=False) | DestinationIp.str.contains(r'40.108.193.', case=False) | DestinationIp.str.contains(r'40.108.194.', case=False) | DestinationIp.str.contains(r'40.108.195.', case=False) | DestinationIp.str.contains(r'40.108.196.', case=False) | DestinationIp.str.contains(r'40.108.197.', case=False) | DestinationIp.str.contains(r'40.108.198.', case=False) | DestinationIp.str.contains(r'40.108.199.', case=False) | DestinationIp.str.contains(r'40.108.200.', case=False) | DestinationIp.str.contains(r'40.108.201.', case=False) | DestinationIp.str.contains(r'40.108.202.', case=False) | DestinationIp.str.contains(r'40.108.203.', case=False) | DestinationIp.str.contains(r'40.108.204.', case=False) | DestinationIp.str.contains(r'40.108.205.', case=False) | DestinationIp.str.contains(r'40.108.206.', case=False) | DestinationIp.str.contains(r'40.108.207.', case=False) | DestinationIp.str.contains(r'40.108.208.', case=False) | DestinationIp.str.contains(r'40.108.209.', case=False) | DestinationIp.str.contains(r'40.108.210.', case=False) | DestinationIp.str.contains(r'40.108.211.', case=False) | DestinationIp.str.contains(r'40.108.212.', case=False) | DestinationIp.str.contains(r'40.108.213.', case=False) | DestinationIp.str.contains(r'40.108.214.', case=False) | DestinationIp.str.contains(r'40.108.215.', case=False) | DestinationIp.str.contains(r'40.108.216.', case=False) | DestinationIp.str.contains(r'40.108.217.', case=False) | DestinationIp.str.contains(r'40.108.218.', case=False) | DestinationIp.str.contains(r'40.108.219.', case=False) | DestinationIp.str.contains(r'40.108.220.', case=False) | DestinationIp.str.contains(r'40.108.221.', case=False) | DestinationIp.str.contains(r'40.108.222.', case=False) | DestinationIp.str.contains(r'40.108.223.', case=False) | DestinationIp.str.contains(r'40.108.224.', case=False) | DestinationIp.str.contains(r'40.108.225.', case=False) | DestinationIp.str.contains(r'40.108.226.', case=False) | DestinationIp.str.contains(r'40.108.227.', case=False) | DestinationIp.str.contains(r'40.108.228.', case=False) | DestinationIp.str.contains(r'40.108.229.', case=False) | DestinationIp.str.contains(r'40.108.230.', case=False) | DestinationIp.str.contains(r'40.108.231.', case=False) | DestinationIp.str.contains(r'40.108.232.', case=False) | DestinationIp.str.contains(r'40.108.233.', case=False) | DestinationIp.str.contains(r'40.108.234.', case=False) | DestinationIp.str.contains(r'40.108.235.', case=False) | DestinationIp.str.contains(r'40.108.236.', case=False) | DestinationIp.str.contains(r'40.108.237.', case=False) | DestinationIp.str.contains(r'40.108.238.', case=False) | DestinationIp.str.contains(r'40.108.239.', case=False) | DestinationIp.str.contains(r'40.108.240.', case=False) | DestinationIp.str.contains(r'40.108.241.', case=False) | DestinationIp.str.contains(r'40.108.242.', case=False) | DestinationIp.str.contains(r'40.108.243.', case=False) | DestinationIp.str.contains(r'40.108.244.', case=False) | DestinationIp.str.contains(r'40.108.245.', case=False) | DestinationIp.str.contains(r'40.108.246.', case=False) | DestinationIp.str.contains(r'40.108.247.', case=False) | DestinationIp.str.contains(r'40.108.248.', case=False) | DestinationIp.str.contains(r'40.108.249.', case=False) | DestinationIp.str.contains(r'40.108.250.', case=False) | DestinationIp.str.contains(r'40.108.251.', case=False) | DestinationIp.str.contains(r'40.108.252.', case=False) | DestinationIp.str.contains(r'40.108.253.', case=False) | DestinationIp.str.contains(r'40.108.254.', case=False) | DestinationIp.str.contains(r'40.108.255.', case=False) | DestinationIp.str.contains(r'52.104.', case=False) | DestinationIp.str.contains(r'52.105.', case=False) | DestinationIp.str.contains(r'52.106.', case=False) | DestinationIp.str.contains(r'52.107.', case=False) | DestinationIp.str.contains(r'104.146.128.', case=False) | DestinationIp.str.contains(r'104.146.129.', case=False) | DestinationIp.str.contains(r'104.146.130.', case=False) | DestinationIp.str.contains(r'104.146.131.', case=False) | DestinationIp.str.contains(r'104.146.132.', case=False) | DestinationIp.str.contains(r'104.146.133.', case=False) | DestinationIp.str.contains(r'104.146.134.', case=False) | DestinationIp.str.contains(r'104.146.135.', case=False) | DestinationIp.str.contains(r'104.146.136.', case=False) | DestinationIp.str.contains(r'104.146.137.', case=False) | DestinationIp.str.contains(r'104.146.138.', case=False) | DestinationIp.str.contains(r'104.146.139.', case=False) | DestinationIp.str.contains(r'104.146.140.', case=False) | DestinationIp.str.contains(r'104.146.141.', case=False) | DestinationIp.str.contains(r'104.146.142.', case=False) | DestinationIp.str.contains(r'104.146.143.', case=False) | DestinationIp.str.contains(r'104.146.144.', case=False) | DestinationIp.str.contains(r'104.146.145.', case=False) | DestinationIp.str.contains(r'104.146.146.', case=False) | DestinationIp.str.contains(r'104.146.147.', case=False) | DestinationIp.str.contains(r'104.146.148.', case=False) | DestinationIp.str.contains(r'104.146.149.', case=False) | DestinationIp.str.contains(r'104.146.150.', case=False) | DestinationIp.str.contains(r'104.146.151.', case=False) | DestinationIp.str.contains(r'104.146.152.', case=False) | DestinationIp.str.contains(r'104.146.153.', case=False) | DestinationIp.str.contains(r'104.146.154.', case=False) | DestinationIp.str.contains(r'104.146.155.', case=False) | DestinationIp.str.contains(r'104.146.156.', case=False) | DestinationIp.str.contains(r'104.146.157.', case=False) | DestinationIp.str.contains(r'104.146.158.', case=False) | DestinationIp.str.contains(r'104.146.159.', case=False) | DestinationIp.str.contains(r'104.146.160.', case=False) | DestinationIp.str.contains(r'104.146.161.', case=False) | DestinationIp.str.contains(r'104.146.162.', case=False) | DestinationIp.str.contains(r'104.146.163.', case=False) | DestinationIp.str.contains(r'104.146.164.', case=False) | DestinationIp.str.contains(r'104.146.165.', case=False) | DestinationIp.str.contains(r'104.146.166.', case=False) | DestinationIp.str.contains(r'104.146.167.', case=False) | DestinationIp.str.contains(r'104.146.168.', case=False) | DestinationIp.str.contains(r'104.146.169.', case=False) | DestinationIp.str.contains(r'104.146.170.', case=False) | DestinationIp.str.contains(r'104.146.171.', case=False) | DestinationIp.str.contains(r'104.146.172.', case=False) | DestinationIp.str.contains(r'104.146.173.', case=False) | DestinationIp.str.contains(r'104.146.174.', case=False) | DestinationIp.str.contains(r'104.146.175.', case=False) | DestinationIp.str.contains(r'104.146.176.', case=False) | DestinationIp.str.contains(r'104.146.177.', case=False) | DestinationIp.str.contains(r'104.146.178.', case=False) | DestinationIp.str.contains(r'104.146.179.', case=False) | DestinationIp.str.contains(r'104.146.180.', case=False) | DestinationIp.str.contains(r'104.146.181.', case=False) | DestinationIp.str.contains(r'104.146.182.', case=False) | DestinationIp.str.contains(r'104.146.183.', case=False) | DestinationIp.str.contains(r'104.146.184.', case=False) | DestinationIp.str.contains(r'104.146.185.', case=False) | DestinationIp.str.contains(r'104.146.186.', case=False) | DestinationIp.str.contains(r'104.146.187.', case=False) | DestinationIp.str.contains(r'104.146.188.', case=False) | DestinationIp.str.contains(r'104.146.189.', case=False) | DestinationIp.str.contains(r'104.146.190.', case=False) | DestinationIp.str.contains(r'104.146.191.', case=False) | DestinationIp.str.contains(r'104.146.192.', case=False) | DestinationIp.str.contains(r'104.146.193.', case=False) | DestinationIp.str.contains(r'104.146.194.', case=False) | DestinationIp.str.contains(r'104.146.195.', case=False) | DestinationIp.str.contains(r'104.146.196.', case=False) | DestinationIp.str.contains(r'104.146.197.', case=False) | DestinationIp.str.contains(r'104.146.198.', case=False) | DestinationIp.str.contains(r'104.146.199.', case=False) | DestinationIp.str.contains(r'104.146.200.', case=False) | DestinationIp.str.contains(r'104.146.201.', case=False) | DestinationIp.str.contains(r'104.146.202.', case=False) | DestinationIp.str.contains(r'104.146.203.', case=False) | DestinationIp.str.contains(r'104.146.204.', case=False) | DestinationIp.str.contains(r'104.146.205.', case=False) | DestinationIp.str.contains(r'104.146.206.', case=False) | DestinationIp.str.contains(r'104.146.207.', case=False) | DestinationIp.str.contains(r'104.146.208.', case=False) | DestinationIp.str.contains(r'104.146.209.', case=False) | DestinationIp.str.contains(r'104.146.210.', case=False) | DestinationIp.str.contains(r'104.146.211.', case=False) | DestinationIp.str.contains(r'104.146.212.', case=False) | DestinationIp.str.contains(r'104.146.213.', case=False) | DestinationIp.str.contains(r'104.146.214.', case=False) | DestinationIp.str.contains(r'104.146.215.', case=False) | DestinationIp.str.contains(r'104.146.216.', case=False) | DestinationIp.str.contains(r'104.146.217.', case=False) | DestinationIp.str.contains(r'104.146.218.', case=False) | DestinationIp.str.contains(r'104.146.219.', case=False) | DestinationIp.str.contains(r'104.146.220.', case=False) | DestinationIp.str.contains(r'104.146.221.', case=False) | DestinationIp.str.contains(r'104.146.222.', case=False) | DestinationIp.str.contains(r'104.146.223.', case=False) | DestinationIp.str.contains(r'104.146.224.', case=False) | DestinationIp.str.contains(r'104.146.225.', case=False) | DestinationIp.str.contains(r'104.146.226.', case=False) | DestinationIp.str.contains(r'104.146.227.', case=False) | DestinationIp.str.contains(r'104.146.228.', case=False) | DestinationIp.str.contains(r'104.146.229.', case=False) | DestinationIp.str.contains(r'104.146.230.', case=False) | DestinationIp.str.contains(r'104.146.231.', case=False) | DestinationIp.str.contains(r'104.146.232.', case=False) | DestinationIp.str.contains(r'104.146.233.', case=False) | DestinationIp.str.contains(r'104.146.234.', case=False) | DestinationIp.str.contains(r'104.146.235.', case=False) | DestinationIp.str.contains(r'104.146.236.', case=False) | DestinationIp.str.contains(r'104.146.237.', case=False) | DestinationIp.str.contains(r'104.146.238.', case=False) | DestinationIp.str.contains(r'104.146.239.', case=False) | DestinationIp.str.contains(r'104.146.240.', case=False) | DestinationIp.str.contains(r'104.146.241.', case=False) | DestinationIp.str.contains(r'104.146.242.', case=False) | DestinationIp.str.contains(r'104.146.243.', case=False) | DestinationIp.str.contains(r'104.146.244.', case=False) | DestinationIp.str.contains(r'104.146.245.', case=False) | DestinationIp.str.contains(r'104.146.246.', case=False) | DestinationIp.str.contains(r'104.146.247.', case=False) | DestinationIp.str.contains(r'104.146.248.', case=False) | DestinationIp.str.contains(r'104.146.249.', case=False) | DestinationIp.str.contains(r'104.146.250.', case=False) | DestinationIp.str.contains(r'104.146.251.', case=False) | DestinationIp.str.contains(r'104.146.252.', case=False) | DestinationIp.str.contains(r'104.146.253.', case=False) | DestinationIp.str.contains(r'104.146.254.', case=False) | DestinationIp.str.contains(r'104.146.255.', case=False) | DestinationIp.str.contains(r'150.171.40.', case=False) | DestinationIp.str.contains(r'150.171.41.', case=False) | DestinationIp.str.contains(r'150.171.42.', case=False) | DestinationIp.str.contains(r'150.171.43.', case=False) | DestinationIp.str.contains(r'2603:1061:13', case=False) | DestinationIp.str.contains(r'2620:1ec:8f8:', case=False) | DestinationIp.str.contains(r'2620:1ec:8f9:', case=False) | DestinationIp.str.contains(r'2620:1ec:8fa:', case=False) | DestinationIp.str.contains(r'2620:1ec:8fb:', case=False) | DestinationIp.str.contains(r'2620:1ec:908:', case=False) | DestinationIp.str.contains(r'2620:1ec:909:', case=False) | DestinationIp.str.contains(r'2620:1ec:90a:', case=False) | DestinationIp.str.contains(r'2620:1ec:90b:', case=False) | DestinationIp.str.contains(r'2a01:111:f402:', case=False)) & (DestinationPort==[80, 443]) & Protocol=='tcp' | (DestinationIp==['13.107.6.171'] | DestinationIp==['13.107.18.15'] | DestinationIp==['13.107.140.6'] | DestinationIp.str.contains(r'52.108.', case=False) | DestinationIp.str.contains(r'52.109.', case=False) | DestinationIp.str.contains(r'52.110.', case=False) | DestinationIp.str.contains(r'52.111.', case=False) | DestinationIp==['52.244.37.168'] | DestinationIp.str.contains(r'2603:1006:14', case=False) | DestinationIp.str.contains(r'2603:1016:24', case=False) | DestinationIp.str.contains(r'2603:1026:24', case=False) | DestinationIp.str.contains(r'2603:1036:24', case=False) | DestinationIp.str.contains(r'2603:1046:14', case=False) | DestinationIp.str.contains(r'2603:1056:14', case=False) | DestinationIp.str.contains(r'2603:1063:20', case=False) | DestinationIp.str.contains(r'2603:1063:21', case=False) | DestinationIp.str.contains(r'2603:1063:22', case=False) | DestinationIp.str.contains(r'2603:1063:23', case=False) | DestinationIp==['2620:1ec:c::15/128'] | DestinationIp==['2620:1ec:8fc::6/128'] | DestinationIp==['2620:1ec:a92::171/128'] | DestinationIp==['2a01:111:f100:2000::a83e:3019/128'] | DestinationIp==['2a01:111:f100:2002::8975:2d79/128'] | DestinationIp==['2a01:111:f100:2002::8975:2da8/128'] | DestinationIp==['2a01:111:f100:7000::6fdd:6cd5/128'] | DestinationIp==['2a01:111:f100:a004::bfeb:88cf/128']) & (DestinationPort==[80, 443]) & Protocol=='tcp' | (DestinationIp.str.contains(r'20.20.32.', case=False) | DestinationIp.str.contains(r'20.20.33.', case=False) | DestinationIp.str.contains(r'20.20.34.', case=False) | DestinationIp.str.contains(r'20.20.35.', case=False) | DestinationIp.str.contains(r'20.20.36.', case=False) | DestinationIp.str.contains(r'20.20.37.', case=False) | DestinationIp.str.contains(r'20.20.38.', case=False) | DestinationIp.str.contains(r'20.20.39.', case=False) | DestinationIp.str.contains(r'20.20.40.', case=False) | DestinationIp.str.contains(r'20.20.41.', case=False) | DestinationIp.str.contains(r'20.20.42.', case=False) | DestinationIp.str.contains(r'20.20.43.', case=False) | DestinationIp.str.contains(r'20.20.44.', case=False) | DestinationIp.str.contains(r'20.20.45.', case=False) | DestinationIp.str.contains(r'20.20.46.', case=False) | DestinationIp.str.contains(r'20.20.47.', case=False) | DestinationIp.str.contains(r'20.20.48.', case=False) | DestinationIp.str.contains(r'20.20.49.', case=False) | DestinationIp.str.contains(r'20.20.50.', case=False) | DestinationIp.str.contains(r'20.20.51.', case=False) | DestinationIp.str.contains(r'20.20.52.', case=False) | DestinationIp.str.contains(r'20.20.53.', case=False) | DestinationIp.str.contains(r'20.20.54.', case=False) | DestinationIp.str.contains(r'20.20.55.', case=False) | DestinationIp.str.contains(r'20.20.56.', case=False) | DestinationIp.str.contains(r'20.20.57.', case=False) | DestinationIp.str.contains(r'20.20.58.', case=False) | DestinationIp.str.contains(r'20.20.59.', case=False) | DestinationIp.str.contains(r'20.20.60.', case=False) | DestinationIp.str.contains(r'20.20.61.', case=False) | DestinationIp.str.contains(r'20.20.62.', case=False) | DestinationIp.str.contains(r'20.20.63.', case=False) | DestinationIp.str.contains(r'20.190.128.', case=False) | DestinationIp.str.contains(r'20.190.129.', case=False) | DestinationIp.str.contains(r'20.190.130.', case=False) | DestinationIp.str.contains(r'20.190.131.', case=False) | DestinationIp.str.contains(r'20.190.132.', case=False) | DestinationIp.str.contains(r'20.190.133.', case=False) | DestinationIp.str.contains(r'20.190.134.', case=False) | DestinationIp.str.contains(r'20.190.135.', case=False) | DestinationIp.str.contains(r'20.190.136.', case=False) | DestinationIp.str.contains(r'20.190.137.', case=False) | DestinationIp.str.contains(r'20.190.138.', case=False) | DestinationIp.str.contains(r'20.190.139.', case=False) | DestinationIp.str.contains(r'20.190.140.', case=False) | DestinationIp.str.contains(r'20.190.141.', case=False) | DestinationIp.str.contains(r'20.190.142.', case=False) | DestinationIp.str.contains(r'20.190.143.', case=False) | DestinationIp.str.contains(r'20.190.144.', case=False) | DestinationIp.str.contains(r'20.190.145.', case=False) | DestinationIp.str.contains(r'20.190.146.', case=False) | DestinationIp.str.contains(r'20.190.147.', case=False) | DestinationIp.str.contains(r'20.190.148.', case=False) | DestinationIp.str.contains(r'20.190.149.', case=False) | DestinationIp.str.contains(r'20.190.150.', case=False) | DestinationIp.str.contains(r'20.190.151.', case=False) | DestinationIp.str.contains(r'20.190.152.', case=False) | DestinationIp.str.contains(r'20.190.153.', case=False) | DestinationIp.str.contains(r'20.190.154.', case=False) | DestinationIp.str.contains(r'20.190.155.', case=False) | DestinationIp.str.contains(r'20.190.156.', case=False) | DestinationIp.str.contains(r'20.190.157.', case=False) | DestinationIp.str.contains(r'20.190.158.', case=False) | DestinationIp.str.contains(r'20.190.159.', case=False) | DestinationIp.str.contains(r'20.190.160.', case=False) | DestinationIp.str.contains(r'20.190.161.', case=False) | DestinationIp.str.contains(r'20.190.162.', case=False) | DestinationIp.str.contains(r'20.190.163.', case=False) | DestinationIp.str.contains(r'20.190.164.', case=False) | DestinationIp.str.contains(r'20.190.165.', case=False) | DestinationIp.str.contains(r'20.190.166.', case=False) | DestinationIp.str.contains(r'20.190.167.', case=False) | DestinationIp.str.contains(r'20.190.168.', case=False) | DestinationIp.str.contains(r'20.190.169.', case=False) | DestinationIp.str.contains(r'20.190.170.', case=False) | DestinationIp.str.contains(r'20.190.171.', case=False) | DestinationIp.str.contains(r'20.190.172.', case=False) | DestinationIp.str.contains(r'20.190.173.', case=False) | DestinationIp.str.contains(r'20.190.174.', case=False) | DestinationIp.str.contains(r'20.190.175.', case=False) | DestinationIp.str.contains(r'20.190.176.', case=False) | DestinationIp.str.contains(r'20.190.177.', case=False) | DestinationIp.str.contains(r'20.190.178.', case=False) | DestinationIp.str.contains(r'20.190.179.', case=False) | DestinationIp.str.contains(r'20.190.180.', case=False) | DestinationIp.str.contains(r'20.190.181.', case=False) | DestinationIp.str.contains(r'20.190.182.', case=False) | DestinationIp.str.contains(r'20.190.183.', case=False) | DestinationIp.str.contains(r'20.190.184.', case=False) | DestinationIp.str.contains(r'20.190.185.', case=False) | DestinationIp.str.contains(r'20.190.186.', case=False) | DestinationIp.str.contains(r'20.190.187.', case=False) | DestinationIp.str.contains(r'20.190.188.', case=False) | DestinationIp.str.contains(r'20.190.189.', case=False) | DestinationIp.str.contains(r'20.190.190.', case=False) | DestinationIp.str.contains(r'20.190.191.', case=False) | DestinationIp.str.contains(r'20.231.128.', case=False) | DestinationIp.str.contains(r'20.231.129.', case=False) | DestinationIp.str.contains(r'20.231.130.', case=False) | DestinationIp.str.contains(r'20.231.131.', case=False) | DestinationIp.str.contains(r'20.231.132.', case=False) | DestinationIp.str.contains(r'20.231.133.', case=False) | DestinationIp.str.contains(r'20.231.134.', case=False) | DestinationIp.str.contains(r'20.231.135.', case=False) | DestinationIp.str.contains(r'20.231.136.', case=False) | DestinationIp.str.contains(r'20.231.137.', case=False) | DestinationIp.str.contains(r'20.231.138.', case=False) | DestinationIp.str.contains(r'20.231.139.', case=False) | DestinationIp.str.contains(r'20.231.140.', case=False) | DestinationIp.str.contains(r'20.231.141.', case=False) | DestinationIp.str.contains(r'20.231.142.', case=False) | DestinationIp.str.contains(r'20.231.143.', case=False) | DestinationIp.str.contains(r'20.231.144.', case=False) | DestinationIp.str.contains(r'20.231.145.', case=False) | DestinationIp.str.contains(r'20.231.146.', case=False) | DestinationIp.str.contains(r'20.231.147.', case=False) | DestinationIp.str.contains(r'20.231.148.', case=False) | DestinationIp.str.contains(r'20.231.149.', case=False) | DestinationIp.str.contains(r'20.231.150.', case=False) | DestinationIp.str.contains(r'20.231.151.', case=False) | DestinationIp.str.contains(r'20.231.152.', case=False) | DestinationIp.str.contains(r'20.231.153.', case=False) | DestinationIp.str.contains(r'20.231.154.', case=False) | DestinationIp.str.contains(r'20.231.155.', case=False) | DestinationIp.str.contains(r'20.231.156.', case=False) | DestinationIp.str.contains(r'20.231.157.', case=False) | DestinationIp.str.contains(r'20.231.158.', case=False) | DestinationIp.str.contains(r'20.231.159.', case=False) | DestinationIp.str.contains(r'40.126.0.', case=False) | DestinationIp.str.contains(r'40.126.1.', case=False) | DestinationIp.str.contains(r'40.126.2.', case=False) | DestinationIp.str.contains(r'40.126.3.', case=False) | DestinationIp.str.contains(r'40.126.4.', case=False) | DestinationIp.str.contains(r'40.126.5.', case=False) | DestinationIp.str.contains(r'40.126.6.', case=False) | DestinationIp.str.contains(r'40.126.7.', case=False) | DestinationIp.str.contains(r'40.126.8.', case=False) | DestinationIp.str.contains(r'40.126.9.', case=False) | DestinationIp.str.contains(r'40.126.10.', case=False) | DestinationIp.str.contains(r'40.126.11.', case=False) | DestinationIp.str.contains(r'40.126.12.', case=False) | DestinationIp.str.contains(r'40.126.13.', case=False) | DestinationIp.str.contains(r'40.126.14.', case=False) | DestinationIp.str.contains(r'40.126.15.', case=False) | DestinationIp.str.contains(r'40.126.16.', case=False) | DestinationIp.str.contains(r'40.126.17.', case=False) | DestinationIp.str.contains(r'40.126.18.', case=False) | DestinationIp.str.contains(r'40.126.19.', case=False) | DestinationIp.str.contains(r'40.126.20.', case=False) | DestinationIp.str.contains(r'40.126.21.', case=False) | DestinationIp.str.contains(r'40.126.22.', case=False) | DestinationIp.str.contains(r'40.126.23.', case=False) | DestinationIp.str.contains(r'40.126.24.', case=False) | DestinationIp.str.contains(r'40.126.25.', case=False) | DestinationIp.str.contains(r'40.126.26.', case=False) | DestinationIp.str.contains(r'40.126.27.', case=False) | DestinationIp.str.contains(r'40.126.28.', case=False) | DestinationIp.str.contains(r'40.126.29.', case=False) | DestinationIp.str.contains(r'40.126.30.', case=False) | DestinationIp.str.contains(r'40.126.31.', case=False) | DestinationIp.str.contains(r'40.126.32.', case=False) | DestinationIp.str.contains(r'40.126.33.', case=False) | DestinationIp.str.contains(r'40.126.34.', case=False) | DestinationIp.str.contains(r'40.126.35.', case=False) | DestinationIp.str.contains(r'40.126.36.', case=False) | DestinationIp.str.contains(r'40.126.37.', case=False) | DestinationIp.str.contains(r'40.126.38.', case=False) | DestinationIp.str.contains(r'40.126.39.', case=False) | DestinationIp.str.contains(r'40.126.40.', case=False) | DestinationIp.str.contains(r'40.126.41.', case=False) | DestinationIp.str.contains(r'40.126.42.', case=False) | DestinationIp.str.contains(r'40.126.43.', case=False) | DestinationIp.str.contains(r'40.126.44.', case=False) | DestinationIp.str.contains(r'40.126.45.', case=False) | DestinationIp.str.contains(r'40.126.46.', case=False) | DestinationIp.str.contains(r'40.126.47.', case=False) | DestinationIp.str.contains(r'40.126.48.', case=False) | DestinationIp.str.contains(r'40.126.49.', case=False) | DestinationIp.str.contains(r'40.126.50.', case=False) | DestinationIp.str.contains(r'40.126.51.', case=False) | DestinationIp.str.contains(r'40.126.52.', case=False) | DestinationIp.str.contains(r'40.126.53.', case=False) | DestinationIp.str.contains(r'40.126.54.', case=False) | DestinationIp.str.contains(r'40.126.55.', case=False) | DestinationIp.str.contains(r'40.126.56.', case=False) | DestinationIp.str.contains(r'40.126.57.', case=False) | DestinationIp.str.contains(r'40.126.58.', case=False) | DestinationIp.str.contains(r'40.126.59.', case=False) | DestinationIp.str.contains(r'40.126.60.', case=False) | DestinationIp.str.contains(r'40.126.61.', case=False) | DestinationIp.str.contains(r'40.126.62.', case=False) | DestinationIp.str.contains(r'40.126.63.', case=False) | DestinationIp.str.contains(r'2603:1006:2000:', case=False) | DestinationIp.str.contains(r'2603:1007:200:', case=False) | DestinationIp.str.contains(r'2603:1016:1400:', case=False) | DestinationIp.str.contains(r'2603:1017:', case=False) | DestinationIp.str.contains(r'2603:1026:3000:', case=False) | DestinationIp.str.contains(r'2603:1027:1:', case=False) | DestinationIp.str.contains(r'2603:1036:3000:', case=False) | DestinationIp.str.contains(r'2603:1037:1:', case=False) | DestinationIp.str.contains(r'2603:1046:2000:', case=False) | DestinationIp.str.contains(r'2603:1047:1:', case=False) | DestinationIp.str.contains(r'2603:1056:2000:', case=False) | DestinationIp.str.contains(r'2603:1057:2:', case=False)) & (DestinationPort==[80, 443]) & Protocol=='tcp' | (DestinationIp==['13.107.6.192'] | DestinationIp==['13.107.9.192'] | DestinationIp.str.contains(r'52.108.', case=False) | DestinationIp.str.contains(r'52.109.', case=False) | DestinationIp.str.contains(r'52.110.', case=False) | DestinationIp.str.contains(r'52.111.', case=False) | DestinationIp==['2620:1ec:4::192/128'] | DestinationIp==['2620:1ec:a92::192/128']) & DestinationPort==443 & Protocol=='tcp')"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Connection Initiated To DevTunnels Domain",
        "id": "9501f8e6-8e3d-48fc-a8a6-1089dd5d7ef4",
        "status": "test",
        "description": "Detects network connections to Devtunnels domains initiated by a process on a system. Attackers can abuse that feature to establish a reverse shell or persistence on a machine.\n",
        "tags": [
            "attack.exfiltration",
            "attack.t1567.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & DestinationHostname.str.contains(r'.devtunnels.ms', case=False)"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Silenttrinity Stager Msbuild Activity",
        "id": "50e54b8d-ad73-43f8-96a1-5191685b17a4",
        "status": "test",
        "description": "Detects a possible remote connections to Silenttrinity c2",
        "tags": [
            "attack.execution",
            "attack.t1127.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Image.str.contains(r'\\\\msbuild.exe', case=False) & (DestinationPort==[80, 443]) & Initiated=='true'"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Network Connection Initiated To Visual Studio Code Tunnels Domain",
        "id": "4b657234-038e-4ad5-997c-4be42340bce4",
        "status": "test",
        "description": "Detects network connections to Visual Studio Code tunnel domains initiated by a process on a system. Attackers can abuse that feature to establish a reverse shell or persistence on a machine.\n",
        "tags": [
            "attack.exfiltration",
            "attack.t1567.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & Initiated=='true' & DestinationHostname.str.contains(r'.tunnels.api.visualstudio.com', case=False)"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Communication To LocaltoNet Tunneling Service Initiated",
        "id": "3ab65069-d82a-4d44-a759-466661a082d1",
        "status": "experimental",
        "description": "Detects an executable initiating a network connection to \"LocaltoNet\" tunneling sub-domains.\nLocaltoNet is a reverse proxy that enables localhost services to be exposed to the Internet.\nAttackers have been seen to use this service for command-and-control activities to bypass MFA and perimeter controls.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1572",
            "attack.t1090",
            "attack.t1102"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==3 & (DestinationHostname.str.contains(r'.localto.net', case=False) | DestinationHostname.str.contains(r'.localtonet.com', case=False)) & Initiated=='true'"
        ],
        "logsource": {
            "category": "network_connection",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Unusual File Download from Direct IP Address",
        "id": "025bd229-fd1f-4fdb-97ab-20006e1a5368",
        "status": "test",
        "description": "Detects the download of suspicious file type from URLs with IP",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==15 & Contents.str.contains(r'http[s]?://[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}') & (TargetFilename.str.contains(r'.ps1:Zone', case=False) | TargetFilename.str.contains(r'.bat:Zone', case=False) | TargetFilename.str.contains(r'.exe:Zone', case=False) | TargetFilename.str.contains(r'.vbe:Zone', case=False) | TargetFilename.str.contains(r'.vbs:Zone', case=False) | TargetFilename.str.contains(r'.dll:Zone', case=False) | TargetFilename.str.contains(r'.one:Zone', case=False) | TargetFilename.str.contains(r'.cmd:Zone', case=False) | TargetFilename.str.contains(r'.hta:Zone', case=False) | TargetFilename.str.contains(r'.xll:Zone', case=False) | TargetFilename.str.contains(r'.lnk:Zone', case=False))"
        ],
        "logsource": {
            "category": "create_stream_hash",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious File Download From ZIP TLD",
        "id": "0bb4bbeb-fe52-4044-b40c-430a04577ebe",
        "status": "test",
        "description": "Detects the download of a file with a potentially suspicious extension from a .zip top level domain.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==15 & Contents.str.contains(r'.zip/', case=False) & (TargetFilename.str.contains(r'.bat:Zone', case=False) | TargetFilename.str.contains(r'.dat:Zone', case=False) | TargetFilename.str.contains(r'.dll:Zone', case=False) | TargetFilename.str.contains(r'.doc:Zone', case=False) | TargetFilename.str.contains(r'.docm:Zone', case=False) | TargetFilename.str.contains(r'.exe:Zone', case=False) | TargetFilename.str.contains(r'.hta:Zone', case=False) | TargetFilename.str.contains(r'.pptm:Zone', case=False) | TargetFilename.str.contains(r'.ps1:Zone', case=False) | TargetFilename.str.contains(r'.rar:Zone', case=False) | TargetFilename.str.contains(r'.rtf:Zone', case=False) | TargetFilename.str.contains(r'.sct:Zone', case=False) | TargetFilename.str.contains(r'.vbe:Zone', case=False) | TargetFilename.str.contains(r'.vbs:Zone', case=False) | TargetFilename.str.contains(r'.ws:Zone', case=False) | TargetFilename.str.contains(r'.wsf:Zone', case=False) | TargetFilename.str.contains(r'.xll:Zone', case=False) | TargetFilename.str.contains(r'.xls:Zone', case=False) | TargetFilename.str.contains(r'.xlsm:Zone', case=False) | TargetFilename.str.contains(r'.zip:Zone', case=False))"
        ],
        "logsource": {
            "category": "create_stream_hash",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Creation Of a Suspicious ADS File Outside a Browser Download",
        "id": "573df571-a223-43bc-846e-3f98da481eca",
        "status": "test",
        "description": "Detects the creation of a suspicious ADS (Alternate Data Stream) file by software other than browsers",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==15 & Contents.str.contains(r'[ZoneTransfer]  ZoneId=3', case=False) & TargetFilename.str.contains(r':Zone.Identifier', case=False) & (TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'.scr', case=False) | TargetFilename.str.contains(r'.bat', case=False) | TargetFilename.str.contains(r'.cmd', case=False) | TargetFilename.str.contains(r'.docx', case=False) | TargetFilename.str.contains(r'.hta', case=False) | TargetFilename.str.contains(r'.jse', case=False) | TargetFilename.str.contains(r'.lnk', case=False) | TargetFilename.str.contains(r'.pptx', case=False) | TargetFilename.str.contains(r'.ps', case=False) | TargetFilename.str.contains(r'.reg', case=False) | TargetFilename.str.contains(r'.sct', case=False) | TargetFilename.str.contains(r'.vb', case=False) | TargetFilename.str.contains(r'.wsc', case=False) | TargetFilename.str.contains(r'.wsf', case=False) | TargetFilename.str.contains(r'.xlsx', case=False)) & ~ (Image.str.contains(r'\\\\brave.exe', case=False) | Image==['C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'] | Image==['C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe', 'C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe'] | Image==['C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe', 'C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe'] | Image.str.contains(r'\\\\maxthon.exe', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\', case=False) | Image.str.contains(r'\\\\WindowsApps\\\\MicrosoftEdge.exe', case=False) | Image==['C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe', 'C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe'] | (Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeCore\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\EdgeCore\\\\', case=False)) & (Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False)) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\safari.exe', case=False) | Image.str.contains(r'\\\\seamonkey.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False) | Image.str.contains(r'\\\\whale.exe', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\Microsoft.ScreenSketch_', case=False) & Image.str.contains(r'\\\\SnippingTool\\\\SnippingTool.exe', case=False) & TargetFilename.str.contains(r'C:\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Packages\\\\Microsoft.ScreenSketch_', case=False) & TargetFilename.str.contains(r'\\\\TempState\\\\Screenshot ', case=False) & TargetFilename.str.contains(r'.png:Zone.Identifier', case=False))"
        ],
        "logsource": {
            "category": "create_stream_hash",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Unusual File Download From File Sharing Websites - File Stream",
        "id": "ae02ed70-11aa-4a22-b397-c0d0e8f6ea99",
        "status": "experimental",
        "description": "Detects the download of suspicious file type from a well-known file and paste sharing domain",
        "tags": [
            "attack.defense-evasion",
            "attack.s0139",
            "attack.t1564.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==15 & (Contents.str.contains(r'.githubusercontent.com', case=False) | Contents.str.contains(r'anonfiles.com', case=False) | Contents.str.contains(r'cdn.discordapp.com', case=False) | Contents.str.contains(r'ddns.net', case=False) | Contents.str.contains(r'dl.dropboxusercontent.com', case=False) | Contents.str.contains(r'ghostbin.co', case=False) | Contents.str.contains(r'glitch.me', case=False) | Contents.str.contains(r'gofile.io', case=False) | Contents.str.contains(r'hastebin.com', case=False) | Contents.str.contains(r'mediafire.com', case=False) | Contents.str.contains(r'mega.nz', case=False) | Contents.str.contains(r'onrender.com', case=False) | Contents.str.contains(r'pages.dev', case=False) | Contents.str.contains(r'paste.ee', case=False) | Contents.str.contains(r'pastebin.com', case=False) | Contents.str.contains(r'pastebin.pl', case=False) | Contents.str.contains(r'pastetext.net', case=False) | Contents.str.contains(r'pixeldrain.com', case=False) | Contents.str.contains(r'privatlab.com', case=False) | Contents.str.contains(r'privatlab.net', case=False) | Contents.str.contains(r'send.exploit.in', case=False) | Contents.str.contains(r'sendspace.com', case=False) | Contents.str.contains(r'storage.googleapis.com', case=False) | Contents.str.contains(r'storjshare.io', case=False) | Contents.str.contains(r'supabase.co', case=False) | Contents.str.contains(r'temp.sh', case=False) | Contents.str.contains(r'transfer.sh', case=False) | Contents.str.contains(r'trycloudflare.com', case=False) | Contents.str.contains(r'ufile.io', case=False) | Contents.str.contains(r'w3spaces.com', case=False) | Contents.str.contains(r'workers.dev', case=False)) & (TargetFilename.str.contains(r'.bat:Zone', case=False) | TargetFilename.str.contains(r'.cmd:Zone', case=False) | TargetFilename.str.contains(r'.ps1:Zone', case=False))"
        ],
        "logsource": {
            "category": "create_stream_hash",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Hidden Executable In NTFS Alternate Data Stream",
        "id": "b69888d4-380c-45ce-9cf9-d9ce46e67821",
        "status": "test",
        "description": "Detects the creation of an ADS (Alternate Data Stream) that contains an executable by looking at a non-empty Imphash",
        "tags": [
            "attack.defense-evasion",
            "attack.s0139",
            "attack.t1564.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==15 & Hash.str.contains(r'IMPHASH=', case=False) & ~ Hash.str.contains(r'IMPHASH=00000000000000000000000000000000', case=False)"
        ],
        "logsource": {
            "category": "create_stream_hash",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Suspicious Winget Package Installation",
        "id": "a3f5c081-e75b-43a0-9f5b-51f26fe5dba2",
        "status": "test",
        "description": "Detects potential suspicious winget package installation from a suspicious source.",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==15 & Contents.str.contains(r'[ZoneTransfer]  ZoneId=3', case=False) & (Contents.str.contains(r'://1', case=False) | Contents.str.contains(r'://2', case=False) | Contents.str.contains(r'://3', case=False) | Contents.str.contains(r'://4', case=False) | Contents.str.contains(r'://5', case=False) | Contents.str.contains(r'://6', case=False) | Contents.str.contains(r'://7', case=False) | Contents.str.contains(r'://8', case=False) | Contents.str.contains(r'://9', case=False)) & TargetFilename.str.contains(r':Zone.Identifier', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\WinGet\\\\', case=False)"
        ],
        "logsource": {
            "category": "create_stream_hash",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Exports Registry Key To an Alternate Data Stream",
        "id": "0d7a9363-af70-4e7b-a3b7-1a176b7fbe84",
        "status": "test",
        "description": "Exports the target Registry key and hides it in the specified alternate data stream.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==15 & Image.str.contains(r'\\\\regedit.exe', case=False)"
        ],
        "logsource": {
            "category": "create_stream_hash",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Download From File Sharing Websites -  File Stream",
        "id": "52182dfb-afb7-41db-b4bc-5336cb29b464",
        "status": "experimental",
        "description": "Detects the download of suspicious file type from a well-known file and paste sharing domain",
        "tags": [
            "attack.defense-evasion",
            "attack.s0139",
            "attack.t1564.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==15 & (Contents.str.contains(r'.githubusercontent.com', case=False) | Contents.str.contains(r'anonfiles.com', case=False) | Contents.str.contains(r'cdn.discordapp.com', case=False) | Contents.str.contains(r'ddns.net', case=False) | Contents.str.contains(r'dl.dropboxusercontent.com', case=False) | Contents.str.contains(r'ghostbin.co', case=False) | Contents.str.contains(r'glitch.me', case=False) | Contents.str.contains(r'gofile.io', case=False) | Contents.str.contains(r'hastebin.com', case=False) | Contents.str.contains(r'mediafire.com', case=False) | Contents.str.contains(r'mega.nz', case=False) | Contents.str.contains(r'onrender.com', case=False) | Contents.str.contains(r'pages.dev', case=False) | Contents.str.contains(r'paste.ee', case=False) | Contents.str.contains(r'pastebin.com', case=False) | Contents.str.contains(r'pastebin.pl', case=False) | Contents.str.contains(r'pastetext.net', case=False) | Contents.str.contains(r'pixeldrain.com', case=False) | Contents.str.contains(r'privatlab.com', case=False) | Contents.str.contains(r'privatlab.net', case=False) | Contents.str.contains(r'send.exploit.in', case=False) | Contents.str.contains(r'sendspace.com', case=False) | Contents.str.contains(r'storage.googleapis.com', case=False) | Contents.str.contains(r'storjshare.io', case=False) | Contents.str.contains(r'supabase.co', case=False) | Contents.str.contains(r'temp.sh', case=False) | Contents.str.contains(r'transfer.sh', case=False) | Contents.str.contains(r'trycloudflare.com', case=False) | Contents.str.contains(r'ufile.io', case=False) | Contents.str.contains(r'w3spaces.com', case=False) | Contents.str.contains(r'workers.dev', case=False)) & (TargetFilename.str.contains(r'.cpl:Zone', case=False) | TargetFilename.str.contains(r'.dll:Zone', case=False) | TargetFilename.str.contains(r'.exe:Zone', case=False) | TargetFilename.str.contains(r'.hta:Zone', case=False) | TargetFilename.str.contains(r'.lnk:Zone', case=False) | TargetFilename.str.contains(r'.one:Zone', case=False) | TargetFilename.str.contains(r'.vbe:Zone', case=False) | TargetFilename.str.contains(r'.vbs:Zone', case=False) | TargetFilename.str.contains(r'.xll:Zone', case=False))"
        ],
        "logsource": {
            "category": "create_stream_hash",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool Named File Stream Created",
        "id": "19b041f6-e583-40dc-b842-d6fa8011493f",
        "status": "test",
        "description": "Detects the creation of a named file stream with the imphash of a well-known hack tool",
        "tags": [
            "attack.defense-evasion",
            "attack.s0139",
            "attack.t1564.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==15 & (Hash.str.contains(r'IMPHASH=BCCA3C247B619DCD13C8CDFF5F123932', case=False) | Hash.str.contains(r'IMPHASH=3A19059BD7688CB88E70005F18EFC439', case=False) | Hash.str.contains(r'IMPHASH=bf6223a49e45d99094406777eb6004ba', case=False) | Hash.str.contains(r'IMPHASH=0C106686A31BFE2BA931AE1CF6E9DBC6', case=False) | Hash.str.contains(r'IMPHASH=0D1447D4B3259B3C2A1D4CFB7ECE13C3', case=False) | Hash.str.contains(r'IMPHASH=1B0369A1E06271833F78FFA70FFB4EAF', case=False) | Hash.str.contains(r'IMPHASH=4C1B52A19748428E51B14C278D0F58E3', case=False) | Hash.str.contains(r'IMPHASH=4D927A711F77D62CEBD4F322CB57EC6F', case=False) | Hash.str.contains(r'IMPHASH=66EE036DF5FC1004D9ED5E9A94A1086A', case=False) | Hash.str.contains(r'IMPHASH=672B13F4A0B6F27D29065123FE882DFC', case=False) | Hash.str.contains(r'IMPHASH=6BBD59CEA665C4AFCC2814C1327EC91F', case=False) | Hash.str.contains(r'IMPHASH=725BB81DC24214F6ECACC0CFB36AD30D', case=False) | Hash.str.contains(r'IMPHASH=9528A0E91E28FBB88AD433FEABCA2456', case=False) | Hash.str.contains(r'IMPHASH=9DA6D5D77BE11712527DCAB86DF449A3', case=False) | Hash.str.contains(r'IMPHASH=A6E01BC1AB89F8D91D9EAB72032AAE88', case=False) | Hash.str.contains(r'IMPHASH=B24C5EDDAEA4FE50C6A96A2A133521E4', case=False) | Hash.str.contains(r'IMPHASH=D21BBC50DCC169D7B4D0F01962793154', case=False) | Hash.str.contains(r'IMPHASH=FCC251CCEAE90D22C392215CC9A2D5D6', case=False) | Hash.str.contains(r'IMPHASH=23867A89C2B8FC733BE6CF5EF902F2D1', case=False) | Hash.str.contains(r'IMPHASH=A37FF327F8D48E8A4D2F757E1B6E70BC', case=False) | Hash.str.contains(r'IMPHASH=F9A28C458284584A93B14216308D31BD', case=False) | Hash.str.contains(r'IMPHASH=6118619783FC175BC7EBECFF0769B46E', case=False) | Hash.str.contains(r'IMPHASH=959A83047E80AB68B368FDB3F4C6E4EA', case=False) | Hash.str.contains(r'IMPHASH=563233BFA169ACC7892451F71AD5850A', case=False) | Hash.str.contains(r'IMPHASH=87575CB7A0E0700EB37F2E3668671A08', case=False) | Hash.str.contains(r'IMPHASH=13F08707F759AF6003837A150A371BA1', case=False) | Hash.str.contains(r'IMPHASH=1781F06048A7E58B323F0B9259BE798B', case=False) | Hash.str.contains(r'IMPHASH=233F85F2D4BC9D6521A6CAAE11A1E7F5', case=False) | Hash.str.contains(r'IMPHASH=24AF2584CBF4D60BBE5C6D1B31B3BE6D', case=False) | Hash.str.contains(r'IMPHASH=632969DDF6DBF4E0F53424B75E4B91F2', case=False) | Hash.str.contains(r'IMPHASH=713C29B396B907ED71A72482759ED757', case=False) | Hash.str.contains(r'IMPHASH=749A7BB1F0B4C4455949C0B2BF7F9E9F', case=False) | Hash.str.contains(r'IMPHASH=8628B2608957A6B0C6330AC3DE28CE2E', case=False) | Hash.str.contains(r'IMPHASH=8B114550386E31895DFAB371E741123D', case=False) | Hash.str.contains(r'IMPHASH=94CB940A1A6B65BED4D5A8F849CE9793', case=False) | Hash.str.contains(r'IMPHASH=9D68781980370E00E0BD939EE5E6C141', case=False) | Hash.str.contains(r'IMPHASH=B18A1401FF8F444056D29450FBC0A6CE', case=False) | Hash.str.contains(r'IMPHASH=CB567F9498452721D77A451374955F5F', case=False) | Hash.str.contains(r'IMPHASH=730073214094CD328547BF1F72289752', case=False) | Hash.str.contains(r'IMPHASH=17B461A082950FC6332228572138B80C', case=False) | Hash.str.contains(r'IMPHASH=DC25EE78E2EF4D36FAA0BADF1E7461C9', case=False) | Hash.str.contains(r'IMPHASH=819B19D53CA6736448F9325A85736792', case=False) | Hash.str.contains(r'IMPHASH=829DA329CE140D873B4A8BDE2CBFAA7E', case=False) | Hash.str.contains(r'IMPHASH=C547F2E66061A8DFFB6F5A3FF63C0A74', case=False) | Hash.str.contains(r'IMPHASH=0588081AB0E63BA785938467E1B10CCA', case=False) | Hash.str.contains(r'IMPHASH=0D9EC08BAC6C07D9987DFD0F1506587C', case=False) | Hash.str.contains(r'IMPHASH=BC129092B71C89B4D4C8CDF8EA590B29', case=False) | Hash.str.contains(r'IMPHASH=4DA924CF622D039D58BCE71CDF05D242', case=False) | Hash.str.contains(r'IMPHASH=E7A3A5C377E2D29324093377D7DB1C66', case=False) | Hash.str.contains(r'IMPHASH=9A9DBEC5C62F0380B4FA5FD31DEFFEDF', case=False) | Hash.str.contains(r'IMPHASH=AF8A3976AD71E5D5FDFB67DDB8DADFCE', case=False) | Hash.str.contains(r'IMPHASH=0C477898BBF137BBD6F2A54E3B805FF4', case=False) | Hash.str.contains(r'IMPHASH=0CA9F02B537BCEA20D4EA5EB1A9FE338', case=False) | Hash.str.contains(r'IMPHASH=3AB3655E5A14D4EEFC547F4781BF7F9E', case=False) | Hash.str.contains(r'IMPHASH=E6F9D5152DA699934B30DAAB206471F6', case=False) | Hash.str.contains(r'IMPHASH=3AD59991CCF1D67339B319B15A41B35D', case=False) | Hash.str.contains(r'IMPHASH=FFDD59E0318B85A3E480874D9796D872', case=False) | Hash.str.contains(r'IMPHASH=0CF479628D7CC1EA25EC7998A92F5051', case=False) | Hash.str.contains(r'IMPHASH=07A2D4DCBD6CB2C6A45E6B101F0B6D51', case=False) | Hash.str.contains(r'IMPHASH=D6D0F80386E1380D05CB78E871BC72B1', case=False) | Hash.str.contains(r'IMPHASH=38D9E015591BBFD4929E0D0F47FA0055', case=False) | Hash.str.contains(r'IMPHASH=0E2216679CA6E1094D63322E3412D650', case=False) | Hash.str.contains(r'IMPHASH=ADA161BF41B8E5E9132858CB54CAB5FB', case=False) | Hash.str.contains(r'IMPHASH=2A1BC4913CD5ECB0434DF07CB675B798', case=False) | Hash.str.contains(r'IMPHASH=11083E75553BAAE21DC89CE8F9A195E4', case=False) | Hash.str.contains(r'IMPHASH=A23D29C9E566F2FA8FFBB79267F5DF80', case=False) | Hash.str.contains(r'IMPHASH=4A07F944A83E8A7C2525EFA35DD30E2F', case=False) | Hash.str.contains(r'IMPHASH=767637C23BB42CD5D7397CF58B0BE688', case=False) | Hash.str.contains(r'IMPHASH=14C4E4C72BA075E9069EE67F39188AD8', case=False) | Hash.str.contains(r'IMPHASH=3C782813D4AFCE07BBFC5A9772ACDBDC', case=False) | Hash.str.contains(r'IMPHASH=7D010C6BB6A3726F327F7E239166D127', case=False) | Hash.str.contains(r'IMPHASH=89159BA4DD04E4CE5559F132A9964EB3', case=False) | Hash.str.contains(r'IMPHASH=6F33F4A5FC42B8CEC7314947BD13F30F', case=False) | Hash.str.contains(r'IMPHASH=5834ED4291BDEB928270428EBBAF7604', case=False) | Hash.str.contains(r'IMPHASH=5A8A8A43F25485E7EE1B201EDCBC7A38', case=False) | Hash.str.contains(r'IMPHASH=DC7D30B90B2D8ABF664FBED2B1B59894', case=False) | Hash.str.contains(r'IMPHASH=41923EA1F824FE63EA5BEB84DB7A3E74', case=False) | Hash.str.contains(r'IMPHASH=3DE09703C8E79ED2CA3F01074719906B', case=False) | Hash.str.contains(r'IMPHASH=A53A02B997935FD8EEDCB5F7ABAB9B9F', case=False) | Hash.str.contains(r'IMPHASH=E96A73C7BF33A464C510EDE582318BF2', case=False) | Hash.str.contains(r'IMPHASH=32089B8851BBF8BC2D014E9F37288C83', case=False) | Hash.str.contains(r'IMPHASH=09D278F9DE118EF09163C6140255C690', case=False) | Hash.str.contains(r'IMPHASH=03866661686829d806989e2fc5a72606', case=False) | Hash.str.contains(r'IMPHASH=e57401fbdadcd4571ff385ab82bd5d6d', case=False) | Hash.str.contains(r'IMPHASH=84B763C45C0E4A3E7CA5548C710DB4EE', case=False) | Hash.str.contains(r'IMPHASH=19584675D94829987952432E018D5056', case=False) | Hash.str.contains(r'IMPHASH=330768A4F172E10ACB6287B87289D83B', case=False) | Hash.str.contains(r'IMPHASH=885C99CCFBE77D1CBFCB9C4E7C1A3313', case=False) | Hash.str.contains(r'IMPHASH=22A22BC9E4E0D2F189F1EA01748816AC', case=False) | Hash.str.contains(r'IMPHASH=7FA30E6BB7E8E8A69155636E50BF1B28', case=False) | Hash.str.contains(r'IMPHASH=96DF3A3731912449521F6F8D183279B1', case=False) | Hash.str.contains(r'IMPHASH=7E6CF3FF4576581271AC8A313B2AAB46', case=False) | Hash.str.contains(r'IMPHASH=51791678F351C03A0EB4E2A7B05C6E17', case=False) | Hash.str.contains(r'IMPHASH=25CE42B079282632708FC846129E98A5', case=False) | Hash.str.contains(r'IMPHASH=021BCCA20BA3381B11BDDE26B4E62F20', case=False) | Hash.str.contains(r'IMPHASH=59223B5F52D8799D38E0754855CBDF42', case=False) | Hash.str.contains(r'IMPHASH=81E75D8F1D276C156653D3D8813E4A43', case=False) | Hash.str.contains(r'IMPHASH=17244E8B6B8227E57FE709CCAD421420', case=False) | Hash.str.contains(r'IMPHASH=5B76DA3ACDEDC8A5CDF23A798B5936B4', case=False) | Hash.str.contains(r'IMPHASH=CB2B65BB77D995CC1C0E5DF1C860133C', case=False) | Hash.str.contains(r'IMPHASH=40445337761D80CF465136FAFB1F63E6', case=False) | Hash.str.contains(r'IMPHASH=8A790F401B29FA87BC1E56F7272B3AA6', case=False))"
        ],
        "logsource": {
            "category": "create_stream_hash",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HybridConnectionManager Service Running",
        "id": "b55d23e5-6821-44ff-8a6e-67218891e49f",
        "status": "test",
        "description": "Rule to detect the Hybrid Connection Manager service running on an endpoint.",
        "tags": [
            "attack.persistence",
            "attack.t1554"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-ServiceBus-Client' & (EventID==[40300, 40301, 40302]) & (\"'HybridConnection'\" | \"'sb://'\" | \"'servicebus.windows.net'\" | \"'HybridConnectionManage'\")"
        ],
        "logsource": {
            "product": "windows",
            "service": "microsoft-servicebus-client",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/servicebus/win_hybridconnectionmgr_svc_running.yml"
        }
    },
    {
        "title": "Certificate Exported From Local Certificate Store",
        "id": "58c0bff0-40a0-46e8-b5e8-b734b84d2017",
        "status": "test",
        "description": "Detects when an application exports a certificate (and potentially the private key as well) from the local Windows certificate store.",
        "tags": [
            "attack.credential-access",
            "attack.t1649"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational' & EventID==1007"
        ],
        "logsource": {
            "product": "windows",
            "service": "certificateservicesclient-lifecycle-system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/certificate_services_client_lifecycle_system/win_certificateservicesclient_lifecycle_system_cert_exported.yml"
        }
    },
    {
        "title": "File Was Not Allowed To Run",
        "id": "401e5d00-b944-11ea-8f9a-00163ecd60ae",
        "status": "test",
        "description": "Detect run not allowed files. Applocker is a very useful tool, especially on servers where unprivileged users have access. For example terminal servers. You need configure applocker and log collect to receive these events.",
        "tags": [
            "attack.execution",
            "attack.t1204.002",
            "attack.t1059.001",
            "attack.t1059.003",
            "attack.t1059.005",
            "attack.t1059.006",
            "attack.t1059.007"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-AppLocker/MSI and Script', 'Microsoft-Windows-AppLocker/EXE and DLL', 'Microsoft-Windows-AppLocker/Packaged app-Deployment', 'Microsoft-Windows-AppLocker/Packaged app-Execution']) & (EventID==[8004, 8007, 8022, 8025])"
        ],
        "logsource": {
            "product": "windows",
            "service": "applocker",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/applocker/win_applocker_file_was_not_allowed_to_run.yml"
        }
    },
    {
        "title": "Windows Firewall Settings Have Been Changed",
        "id": "00bb5bd5-1379-4fcf-a965-a5b6f7478064",
        "status": "test",
        "description": "Detects activity when the settings of the Windows firewall have been changed",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Firewall With Advanced Security/Firewall' & (EventID==[2002, 2083, 2003, 2082, 2008])"
        ],
        "logsource": {
            "product": "windows",
            "service": "firewall-as",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/firewall_as/win_firewall_as_setting_change.yml"
        }
    },
    {
        "title": "New Firewall Rule Added In Windows Firewall Exception List Via WmiPrvSE.EXE",
        "id": "eca81e8d-09e1-4d04-8614-c91f44fd0519",
        "status": "experimental",
        "description": "Detects the addition of a new \"Allow\" firewall rule by the WMI process (WmiPrvSE.EXE).\nThis can occur if an attacker leverages PowerShell cmdlets such as \"New-NetFirewallRule\", or directly uses WMI CIM classes such as \"MSFT_NetFirewallRule\".\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Firewall With Advanced Security/Firewall' & (EventID==[2004, 2071, 2097]) & Action==3 & ModifyingApplication.str.contains(r':\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE.exe', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "firewall-as",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/firewall_as/win_firewall_as_add_rule_wmiprvse.yml"
        }
    },
    {
        "title": "New Firewall Rule Added In Windows Firewall Exception List For Potential Suspicious Application",
        "id": "9e2575e7-2cb9-4da1-adc8-ed94221dca5e",
        "status": "experimental",
        "description": "Detects the addition of a new rule to the Windows Firewall exception list for an application located in a potentially suspicious location.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Firewall With Advanced Security/Firewall' & (EventID==[2004, 2071, 2097]) & (ApplicationPath.str.contains(r':\\\\PerfLogs\\\\', case=False) | ApplicationPath.str.contains(r':\\\\Temp\\\\', case=False) | ApplicationPath.str.contains(r':\\\\Tmp\\\\', case=False) | ApplicationPath.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | ApplicationPath.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False) | ApplicationPath.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | ApplicationPath.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False)) & ~ Action==2"
        ],
        "logsource": {
            "product": "windows",
            "service": "firewall-as",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/firewall_as/win_firewall_as_add_rule_susp_folder.yml"
        }
    },
    {
        "title": "A Rule Has Been Deleted From The Windows Firewall Exception List",
        "id": "c187c075-bb3e-4c62-b4fa-beae0ffc211f",
        "status": "test",
        "description": "Detects when a single rules or all of the rules have been deleted from the Windows Defender Firewall",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Firewall With Advanced Security/Firewall' & (EventID==[2006, 2052]) & ~ (ModifyingApplication.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | ModifyingApplication.str.contains(r'C:\\\\Program Files\\\\', case=False) | ModifyingApplication.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False) | ModifyingApplication=='C:\\\\Windows\\\\System32\\\\svchost.exe' | ModifyingApplication is null | ModifyingApplication=='') & ~ (ModifyingApplication.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False) & ModifyingApplication.str.contains(r'\\\\MsMpEng.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "firewall-as",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/firewall_as/win_firewall_as_delete_rule.yml"
        }
    },
    {
        "title": "Uncommon New Firewall Rule Added In Windows Firewall Exception List",
        "id": "cde0a575-7d3d-4a49-9817-b8004a7bf105",
        "status": "experimental",
        "description": "Detects when a rule has been added to the Windows Firewall exception list",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Firewall With Advanced Security/Firewall' & (EventID==[2004, 2071, 2097]) & ~ (Action==2 | ApplicationPath.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | ApplicationPath.str.contains(r'C:\\\\Program Files\\\\', case=False) | ApplicationPath.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | ApplicationPath.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | ApplicationPath.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False) | ApplicationPath.str.contains(r'C:\\\\PerfLogs\\\\', case=False) | ApplicationPath.str.contains(r'C:\\\\Temp\\\\', case=False) | ApplicationPath.str.contains(r'C:\\\\Tmp\\\\', case=False) | ApplicationPath.str.contains(r'C:\\\\Users\\\\Public\\\\', case=False) | ApplicationPath.str.contains(r'C:\\\\Windows\\\\Tasks\\\\', case=False) | ApplicationPath.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False) | ApplicationPath.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | ApplicationPath is null) & ~ (ModifyingApplication.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False) & ModifyingApplication.str.contains(r'\\\\MsMpEng.exe', case=False) | (ModifyingApplication==['C:\\\\Windows\\\\System32\\\\svchost.exe', 'C:\\\\Windows\\\\System32\\\\dllhost.exe']) & ApplicationPath=='')"
        ],
        "logsource": {
            "product": "windows",
            "service": "firewall-as",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/firewall_as/win_firewall_as_add_rule.yml"
        }
    },
    {
        "title": "Windows Defender Firewall Has Been Reset To Its Default Configuration",
        "id": "04b60639-39c0-412a-9fbe-e82499c881a3",
        "status": "test",
        "description": "Detects activity when Windows Defender Firewall has been reset to its default configuration",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Firewall With Advanced Security/Firewall' & (EventID==[2032, 2060])"
        ],
        "logsource": {
            "product": "windows",
            "service": "firewall-as",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/firewall_as/win_firewall_as_reset_config.yml"
        }
    },
    {
        "title": "The Windows Defender Firewall Service Failed To Load Group Policy",
        "id": "7ec15688-fd24-4177-ba43-1a950537ee39",
        "status": "test",
        "description": "Detects activity when The Windows Defender Firewall service failed to load Group Policy",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Firewall With Advanced Security/Firewall' & EventID==2009"
        ],
        "logsource": {
            "product": "windows",
            "service": "firewall-as",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/firewall_as/win_firewall_as_failed_load_gpo.yml"
        }
    },
    {
        "title": "All Rules Have Been Deleted From The Windows Firewall Configuration",
        "id": "79609c82-a488-426e-abcf-9f341a39365d",
        "status": "test",
        "description": "Detects when a all the rules have been deleted from the Windows Defender Firewall configuration",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Firewall With Advanced Security/Firewall' & (EventID==[2033, 2059]) & ~ ModifyingApplication.str.contains(r':\\\\Windows\\\\System32\\\\svchost.exe', case=False) & ~ (ModifyingApplication.str.contains(r':\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False) & ModifyingApplication.str.contains(r'\\\\MsMpEng.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "firewall-as",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/firewall_as/win_firewall_as_delete_all_rules.yml"
        }
    },
    {
        "title": "Scheduled Task Executed Uncommon LOLBIN",
        "id": "f0767f15-0fb3-44b9-851e-e8d9a6d0005d",
        "status": "test",
        "description": "Detects the execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task",
        "tags": [
            "attack.persistence",
            "attack.t1053.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-TaskScheduler/Operational' & EventID==129 & (Path.str.contains(r'\\\\calc.exe', case=False) | Path.str.contains(r'\\\\cscript.exe', case=False) | Path.str.contains(r'\\\\mshta.exe', case=False) | Path.str.contains(r'\\\\mspaint.exe', case=False) | Path.str.contains(r'\\\\notepad.exe', case=False) | Path.str.contains(r'\\\\regsvr32.exe', case=False) | Path.str.contains(r'\\\\wscript.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "taskscheduler",
            "definition": "Requirements: The \"Microsoft-Windows-TaskScheduler/Operational\" is disabled by default and needs to be enabled in order for this detection to trigger",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/taskscheduler/win_taskscheduler_lolbin_execution_via_task_scheduler.yml"
        }
    },
    {
        "title": "Scheduled Task Executed From A Suspicious Location",
        "id": "424273ea-7cf8-43a6-b712-375f925e481f",
        "status": "test",
        "description": "Detects the execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusale program to be run from a Scheduled Task",
        "tags": [
            "attack.persistence",
            "attack.t1053.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-TaskScheduler/Operational' & EventID==129 & (Path.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False) | Path.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Path.str.contains(r'\\\\Desktop\\\\', case=False) | Path.str.contains(r'\\\\Downloads\\\\', case=False) | Path.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | Path.str.contains(r'C:\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "taskscheduler",
            "definition": "Requirements: The \"Microsoft-Windows-TaskScheduler/Operational\" is disabled by default and needs to be enabled in order for this detection to trigger",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/taskscheduler/win_taskscheduler_execution_from_susp_locations.yml"
        }
    },
    {
        "title": "Important Scheduled Task Deleted",
        "id": "9e3cb244-bdb8-4632-8c90-6079c8f4f16d",
        "status": "test",
        "description": "Detects when adversaries try to stop system services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities\n",
        "tags": [
            "attack.impact",
            "attack.t1489"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-TaskScheduler/Operational' & EventID==141 & (TaskName.str.contains(r'\\\\Windows\\\\SystemRestore\\\\SR', case=False) | TaskName.str.contains(r'\\\\Windows\\\\Windows Defender\\\\', case=False) | TaskName.str.contains(r'\\\\Windows\\\\BitLocker', case=False) | TaskName.str.contains(r'\\\\Windows\\\\WindowsBackup\\\\', case=False) | TaskName.str.contains(r'\\\\Windows\\\\WindowsUpdate\\\\', case=False) | TaskName.str.contains(r'\\\\Windows\\\\UpdateOrchestrator\\\\', case=False) | TaskName.str.contains(r'\\\\Windows\\\\ExploitGuard', case=False)) & ~ (UserName.str.contains(r'AUTHORI', case=False) | UserName.str.contains(r'AUTORI', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "taskscheduler",
            "definition": "Requirements: The \"Microsoft-Windows-TaskScheduler/Operational\" is disabled by default and needs to be enabled in order for this detection to trigger",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/taskscheduler/win_taskscheduler_susp_schtasks_delete.yml"
        }
    },
    {
        "title": "Suspicious Digital Signature Of AppX Package",
        "id": "b5aa7d60-c17e-4538-97de-09029d6cd76b",
        "status": "test",
        "description": "Detects execution of AppX packages with known suspicious or malicious signature",
        "tags": [
            "attack.defense-evasion",
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-AppxPackaging/Operational' & EventID==157 & subjectName=='CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization'"
        ],
        "logsource": {
            "product": "windows",
            "service": "appxpackaging-om",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/appxpackaging_om/win_appxpackaging_om_sups_appx_signature.yml"
        }
    },
    {
        "title": "Certificate Private Key Acquired",
        "id": "e2b5163d-7deb-4566-9af3-40afea6858c3",
        "status": "test",
        "description": "Detects when an application acquires a certificate private key",
        "tags": [
            "attack.credential-access",
            "attack.t1649"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-CAPI2/Operational' & EventID==70"
        ],
        "logsource": {
            "product": "windows",
            "service": "capi2",
            "definition": "Requirements: The CAPI2 Operational log needs to be enabled",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/capi2/win_capi2_acquire_certificate_private_key.yml"
        }
    },
    {
        "title": "Failed DNS Zone Transfer",
        "id": "6d444368-6da1-43fe-b2fc-44202430480e",
        "status": "test",
        "description": "Detects when a DNS zone transfer failed.",
        "tags": [
            "attack.reconnaissance",
            "attack.t1590.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='DNS Server' & EventID==6004"
        ],
        "logsource": {
            "product": "windows",
            "service": "dns-server",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/dns_server/win_dns_server_failed_dns_zone_transfer.yml"
        }
    },
    {
        "title": "DNS Server Error Failed Loading the ServerLevelPluginDLL",
        "id": "cbe51394-cd93-4473-b555-edf0144952d9",
        "status": "test",
        "description": "Detects a DNS server error in which a specified plugin DLL (in registry) could not be loaded",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='DNS Server' & (EventID==[150, 770, 771])"
        ],
        "logsource": {
            "product": "windows",
            "service": "dns-server",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/dns_server/win_dns_server_susp_server_level_plugin_dll.yml"
        }
    },
    {
        "title": "Possible Shadow Credentials Added",
        "id": "f598ea0c-c25a-4f72-a219-50c44411c791",
        "status": "test",
        "description": "Detects possible addition of shadow credentials to an active directory object.",
        "tags": [
            "attack.credential-access",
            "attack.t1556"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5136 & AttributeLDAPDisplayName=='msDS-KeyCredentialLink'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_possible_shadow_credentials_added.yml"
        }
    },
    {
        "title": "New or Renamed User Account with '$' Character",
        "id": "cfeed607-6aa4-4bbd-9627-b637deb723c8",
        "status": "test",
        "description": "Detects the creation of a user with the \"$\" character. This can be used by attackers to hide a user or trick detection systems that lack the parsing mechanisms.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & (EventID==4720 & SamAccountName.str.contains(r'$', case=False) | EventID==4781 & NewTargetUserName.str.contains(r'$', case=False)) & ~ (EventID==4720 & TargetUserName=='HomeGroupUser$')"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_new_or_renamed_user_account_with_dollar_sign.yml"
        }
    },
    {
        "title": "User Added to Local Administrator Group",
        "id": "c265cf08-3f99-46c1-8d59-328247057d57",
        "status": "stable",
        "description": "Detects the addition of a new member to the local administrator group, which could be legitimate activity or a sign of privilege escalation activity",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1078",
            "attack.persistence",
            "attack.t1098"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4732 & (TargetUserName.str.contains(r'Administr', case=False) | TargetSid=='S-1-5-32-544') & ~ SubjectUserName.str.contains(r'$', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_user_added_to_local_administrators.yml"
        }
    },
    {
        "title": "Hidden Local User Creation",
        "id": "7b449a5e-1db5-4dd0-a2dc-4e3a67282538",
        "status": "test",
        "description": "Detects the creation of a local hidden user account which should not happen for event ID 4720.",
        "tags": [
            "attack.persistence",
            "attack.t1136.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4720 & TargetUserName.str.contains(r'$', case=False) & ~ TargetUserName=='HomeGroupUser$'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_hidden_user_creation.yml"
        }
    },
    {
        "title": "Service Registry Key Read Access Request",
        "id": "11d00fff-5dc3-428c-8184-801f292faec0",
        "status": "test",
        "description": "Detects \"read access\" requests on the services registry key.\nAdversaries may execute their own malicious payloads by hijacking the Registry entries used by services.\nAdversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.011"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & EventID==4663 & ObjectName.str.contains(r'\\\\SYSTEM\\\\', case=False) & ObjectName.str.contains(r'ControlSet\\\\Services\\\\', case=False) & AccessList.str.contains(r'%%1538', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: SACLs must be enabled for \"READ_CONTROL\" on the registry keys used in this rule",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_registry_permissions_weakness_check.yml"
        }
    },
    {
        "title": "Active Directory Replication from Non Machine Account",
        "id": "17d619c1-e020-4347-957e-1d1207455c93",
        "status": "test",
        "description": "Detects potential abuse of Active Directory Replication Service (ADRS) from a non machine account to request credentials.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.006"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Security' & EventID==4662 & AccessMask=='0x100' & (Properties.str.contains(r'1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', case=False) | Properties.str.contains(r'1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', case=False) | Properties.str.contains(r'89e95b76-444d-4c62-991a-0facbeda640c', case=False)) & ~ (SubjectUserName.str.contains(r'$', case=False) | SubjectUserName.str.contains(r'MSOL_', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_ad_replication_non_machine_account.yml"
        }
    },
    {
        "title": "Windows Defender Exclusion Registry Key - Write Access Requested",
        "id": "e9c8808f-4cfb-4ba9-97d4-e5f3beaa244d",
        "status": "test",
        "description": "Detects write access requests to the Windows Defender exclusions registry keys. This could be an indication of an attacker trying to request a handle or access the object to write new exclusions in order to bypass security.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & (AccessList.str.contains(r'%%4417', case=False) | AccessList.str.contains(r'%%4418', case=False)) & (EventID==[4656, 4663]) & ObjectName.str.contains(r'\\\\Microsoft\\\\Windows Defender\\\\Exclusions\\\\', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: Audit Policy : Security Settings/Local Policies/Audit Policy, Registry System Access Control (SACL): Auditing/User",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_windows_defender_exclusions_write_access.yml"
        }
    },
    {
        "title": "SysKey Registry Keys Access",
        "id": "9a4ff3b8-6187-4fd2-8e8b-e0eae1129495",
        "status": "test",
        "description": "Detects handle requests and access operations to specific registry keys to calculate the SysKey",
        "tags": [
            "attack.discovery",
            "attack.t1012"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & (EventID==[4656, 4663]) & ObjectType=='key' & (ObjectName.str.contains(r'lsa\\\\JD', case=False) | ObjectName.str.contains(r'lsa\\\\GBG', case=False) | ObjectName.str.contains(r'lsa\\\\Skew1', case=False) | ObjectName.str.contains(r'lsa\\\\Data', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_syskey_registry_access.yml"
        }
    },
    {
        "title": "Replay Attack Detected",
        "id": "5a44727c-3b85-4713-8c44-4401d5499629",
        "status": "test",
        "description": "Detects possible Kerberos Replay Attack on the domain controllers when \"KRB_AP_ERR_REPEAT\" Kerberos response is sent to the client",
        "tags": [
            "attack.credential-access",
            "attack.t1558"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4649"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_replay_attack_detected.yml"
        }
    },
    {
        "title": "Remote Access Tool Services Have Been Installed - Security",
        "id": "c8b00925-926c-47e3-beea-298fd563728e",
        "status": "test",
        "description": "Detects service installation of different remote access tools software. These software are often abused by threat actors to perform",
        "tags": [
            "attack.persistence",
            "attack.t1543.003",
            "attack.t1569.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4697 & (ServiceName.str.contains(r'AmmyyAdmin', case=False) | ServiceName.str.contains(r'AnyDesk', case=False) | ServiceName.str.contains(r'Atera', case=False) | ServiceName.str.contains(r'BASupportExpressSrvcUpdater', case=False) | ServiceName.str.contains(r'BASupportExpressStandaloneService', case=False) | ServiceName.str.contains(r'chromoting', case=False) | ServiceName.str.contains(r'GoToAssist', case=False) | ServiceName.str.contains(r'GoToMyPC', case=False) | ServiceName.str.contains(r'jumpcloud', case=False) | ServiceName.str.contains(r'LMIGuardianSvc', case=False) | ServiceName.str.contains(r'LogMeIn', case=False) | ServiceName.str.contains(r'monblanking', case=False) | ServiceName.str.contains(r'Parsec', case=False) | ServiceName.str.contains(r'RManService', case=False) | ServiceName.str.contains(r'RPCPerformanceService', case=False) | ServiceName.str.contains(r'RPCService', case=False) | ServiceName.str.contains(r'SplashtopRemoteService', case=False) | ServiceName.str.contains(r'SSUService', case=False) | ServiceName.str.contains(r'TeamViewer', case=False) | ServiceName.str.contains(r'TightVNC', case=False) | ServiceName.str.contains(r'vncserver', case=False) | ServiceName.str.contains(r'Zoho', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_service_install_remote_access_software.yml"
        }
    },
    {
        "title": "Locked Workstation",
        "id": "411742ad-89b0-49cb-a7b0-3971b5c1e0a4",
        "status": "stable",
        "description": "Detects locked workstation session events that occur automatically after a standard period of inactivity.",
        "tags": [
            "attack.impact"
        ],
        "level": "informational",
        "rule": [
            "Channel=='Security' & EventID==4800"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_workstation_was_locked.yml"
        }
    },
    {
        "title": "Meterpreter or Cobalt Strike Getsystem Service Installation - Security",
        "id": "ecbc5e16-58e0-4521-9c60-eb9a7ea4ad34",
        "status": "test",
        "description": "Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1134.001",
            "attack.t1134.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & (ServiceFileName.str.contains(r'/c', case=False) & ServiceFileName.str.contains(r'echo', case=False) & ServiceFileName.str.contains(r'\\\\pipe\\\\', case=False) & (ServiceFileName.str.contains(r'cmd', case=False) | ServiceFileName.str.contains(r'%COMSPEC%', case=False)) | ServiceFileName.str.contains(r'rundll32', case=False) & ServiceFileName.str.contains(r'.dll,a', case=False) & ServiceFileName.str.contains(r'/p:', case=False) | ServiceFileName.str.contains(r'\\\\\\\\127.0.0.1\\\\ADMIN$\\\\', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_meterpreter_or_cobaltstrike_getsystem_service_install.yml"
        }
    },
    {
        "title": "Metasploit SMB Authentication",
        "id": "72124974-a68b-4366-b990-d30e0b2a190d",
        "status": "test",
        "description": "Alerts on Metasploit host's authentications on the domain.",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & ((EventID==[4625, 4624]) & LogonType==3 & AuthenticationPackageName=='NTLM' & WorkstationName.str.contains(r'^[A-Za-z0-9]{16}$') | EventID==4776 & Workstation.str.contains(r'^[A-Za-z0-9]{16}$'))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_metasploit_authentication.yml"
        }
    },
    {
        "title": "Remote Service Activity via SVCCTL Named Pipe",
        "id": "586a8d6b-6bfe-4ad9-9d78-888cd2fe50c3",
        "status": "test",
        "description": "Detects remote service activity via remote access to the svcctl named pipe",
        "tags": [
            "attack.lateral-movement",
            "attack.persistence",
            "attack.t1021.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==5145 & ShareName=='\\\\\\\\\\*\\\\IPC$' & RelativeTargetName=='svcctl' & AccessList.str.contains(r'WriteData', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_svcctl_remote_service.yml"
        }
    },
    {
        "title": "Persistence and Execution at Scale via GPO Scheduled Task",
        "id": "a8f29a7b-b137-4446-80a0-b804272f3da2",
        "status": "test",
        "description": "Detect lateral movement using GPO scheduled task, usually used to deploy ransomware at scale",
        "tags": [
            "attack.persistence",
            "attack.lateral-movement",
            "attack.t1053.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & (EventID==5136 & (AttributeLDAPDisplayName==['gPCMachineExtensionNames', 'gPCUserExtensionNames']) & (AttributeValue.str.contains(r'CAB54552-DEEA-4691-817E-ED4A4D1AFC72', case=False) | AttributeValue.str.contains(r'AADCED64-746C-4633-A97C-D61349046527', case=False)) | EventID==5145 & ShareName.str.contains(r'\\\\SYSVOL', case=False) & RelativeTargetName.str.contains(r'ScheduledTasks.xml', case=False) & (AccessList.str.contains(r'WriteData', case=False) | AccessList.str.contains(r'%%4417', case=False)))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_gpo_scheduledtasks.yml"
        }
    },
    {
        "title": "Suspicious Teams Application Related ObjectAcess Event",
        "id": "25cde13e-8e20-4c29-b949-4e795b76f16f",
        "status": "test",
        "description": "Detects an access to authentication tokens and accounts of Microsoft Teams desktop application.",
        "tags": [
            "attack.credential-access",
            "attack.t1528"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4663 & (ObjectName.str.contains(r'\\\\Microsoft\\\\Teams\\\\Cookies', case=False) | ObjectName.str.contains(r'\\\\Microsoft\\\\Teams\\\\Local Storage\\\\leveldb', case=False)) & ~ ProcessName.str.contains(r'\\\\Microsoft\\\\Teams\\\\current\\\\Teams.exe', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_teams_suspicious_objectaccess.yml"
        }
    },
    {
        "title": "Tap Driver Installation - Security",
        "id": "9c8afa4d-0022-48f0-9456-3712466f9701",
        "status": "test",
        "description": "Detects the installation of a well-known TAP driver service. This could be a sign of potential preparation for data exfiltration using tunnelling techniques.\n",
        "tags": [
            "attack.exfiltration",
            "attack.t1048"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & EventID==4697 & ServiceFileName.str.contains(r'tap0901', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: The System Security Extension audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_tap_driver_installation.yml"
        }
    },
    {
        "title": "Unauthorized System Time Modification",
        "id": "faa031b5-21ed-4e02-8881-2591f98d82ed",
        "status": "test",
        "description": "Detect scenarios where a potentially unauthorized application or user is modifying the system time.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.006"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & EventID==4616 & ~ (ProcessName==['C:\\\\Program Files\\\\VMware\\\\VMware Tools\\\\vmtoolsd.exe', 'C:\\\\Windows\\\\System32\\\\VBoxService.exe', 'C:\\\\Windows\\\\System32\\\\oobe\\\\msoobe.exe'] | ProcessName=='C:\\\\Windows\\\\System32\\\\svchost.exe' & SubjectUserSid=='S-1-5-19')"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: Audit Policy : System > Audit Security State Change, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\System\\Audit Security State Change",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_time_modification.yml"
        }
    },
    {
        "title": "Windows Network Access Suspicious desktop.ini Action",
        "id": "35bc7e28-ee6b-492f-ab04-da58fcf6402e",
        "status": "test",
        "description": "Detects unusual processes accessing desktop.ini remotely over network share, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk.",
        "tags": [
            "attack.persistence",
            "attack.t1547.009"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==5145 & ObjectType=='File' & RelativeTargetName.str.contains(r'\\\\desktop.ini', case=False) & (AccessList.str.contains(r'WriteData', case=False) | AccessList.str.contains(r'DELETE', case=False) | AccessList.str.contains(r'WriteDAC', case=False) | AccessList.str.contains(r'AppendData', case=False) | AccessList.str.contains(r'AddSubdirectory', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_net_share_obj_susp_desktop_ini.yml"
        }
    },
    {
        "title": "SMB Create Remote File Admin Share",
        "id": "b210394c-ba12-4f89-9117-44a2464b9511",
        "status": "test",
        "description": "Look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$).",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5145 & ShareName.str.contains(r'C$', case=False) & AccessMask=='0x2' & ~ SubjectUserName.str.contains(r'$', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_smb_file_creation_admin_shares.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation CLIP+ Launcher - Security",
        "id": "4edf51e1-cb83-4e1a-bc39-800e396068e3",
        "status": "test",
        "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & ServiceFileName.str.contains(r'cmd', case=False) & ServiceFileName.str.contains(r'&&', case=False) & ServiceFileName.str.contains(r'clipboard]::', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_invoke_obfuscation_clip_services_security.yml"
        }
    },
    {
        "title": "Add or Remove Computer from DC",
        "id": "20d96d95-5a20-4cf1-a483-f3bda8a7c037",
        "status": "test",
        "description": "Detects the creation or removal of a computer. Can be used to detect attacks such as DCShadow via the creation of a new SPN.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1207"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & (EventID==[4741, 4743])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_add_remove_computer.yml"
        }
    },
    {
        "title": "T1047 Wmiprvse Wbemcomn DLL Hijack",
        "id": "f6c68d5f-e101-4b86-8c84-7d96851fd65c",
        "status": "test",
        "description": "Detects a threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network for a WMI DLL Hijack scenario.",
        "tags": [
            "attack.execution",
            "attack.t1047",
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5145 & RelativeTargetName.str.contains(r'\\\\wbem\\\\wbemcomn.dll', case=False) & ~ SubjectUserName.str.contains(r'$', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_wmiprvse_wbemcomn_dll_hijack.yml"
        }
    },
    {
        "title": "WCE wceaux.dll Access",
        "id": "1de68c67-af5c-4097-9c85-fe5578e09e67",
        "status": "test",
        "description": "Detects wceaux.dll access while WCE pass-the-hash remote command execution on source host",
        "tags": [
            "attack.credential-access",
            "attack.t1003",
            "attack.s0005"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Security' & (EventID==[4656, 4663]) & ObjectName.str.contains(r'\\\\wceaux.dll', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_mal_wceaux_dll.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use Rundll32 - Security",
        "id": "cd0f7229-d16f-42de-8fe3-fba365fbcb3a",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use Rundll32 in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & ServiceFileName.str.contains(r'&&', case=False) & ServiceFileName.str.contains(r'rundll32', case=False) & ServiceFileName.str.contains(r'shell32.dll', case=False) & ServiceFileName.str.contains(r'shellexec_rundll', case=False) & (ServiceFileName.str.contains(r'value', case=False) | ServiceFileName.str.contains(r'invoke', case=False) | ServiceFileName.str.contains(r'comspec', case=False) | ServiceFileName.str.contains(r'iex', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_invoke_obfuscation_via_use_rundll32_services_security.yml"
        }
    },
    {
        "title": "DPAPI Domain Backup Key Extraction",
        "id": "4ac1f50b-3bd0-4968-902d-868b4647937e",
        "status": "test",
        "description": "Detects tools extracting LSA secret DPAPI domain backup key from Domain Controllers",
        "tags": [
            "attack.credential-access",
            "attack.t1003.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4662 & ObjectType=='SecretObject' & AccessMask=='0x2' & ObjectName.str.contains(r'BCKUPKEY', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_dpapi_domain_backupkey_extraction.yml"
        }
    },
    {
        "title": "Register new Logon Process by Rubeus",
        "id": "12e6d621-194f-4f59-90cc-1959e21e69f7",
        "status": "test",
        "description": "Detects potential use of Rubeus via registered new trusted logon process",
        "tags": [
            "attack.lateral-movement",
            "attack.privilege-escalation",
            "attack.credential-access",
            "attack.t1558.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4611 & LogonProcessName=='User32LogonProcesss'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_register_new_logon_process_by_rubeus.yml"
        }
    },
    {
        "title": "Azure AD Health Monitoring Agent Registry Keys Access",
        "id": "ff151c33-45fa-475d-af4f-c2f93571f4fe",
        "status": "test",
        "description": "This detection uses Windows security events to detect suspicious access attempts to the registry key of Azure AD Health monitoring agent.\nThis detection requires an access control entry (ACE) on the system access control list (SACL) of the following securable object HKLM\\SOFTWARE\\Microsoft\\Microsoft Online\\Reporting\\MonitoringAgent.\n",
        "tags": [
            "attack.discovery",
            "attack.t1012"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & (EventID==[4656, 4663]) & ObjectType=='Key' & ObjectName=='\\\\REGISTRY\\\\MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Microsoft Online\\\\Reporting\\\\MonitoringAgent' & ~ (ProcessName.str.contains(r'Microsoft.Identity.Health.Adfs.DiagnosticsAgent.exe', case=False) | ProcessName.str.contains(r'Microsoft.Identity.Health.Adfs.InsightsService.exe', case=False) | ProcessName.str.contains(r'Microsoft.Identity.Health.Adfs.MonitoringAgent.Startup.exe', case=False) | ProcessName.str.contains(r'Microsoft.Identity.Health.Adfs.PshSurrogate.exe', case=False) | ProcessName.str.contains(r'Microsoft.Identity.Health.Common.Clients.ResourceMonitor.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_aadhealth_mon_agent_regkey_access.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation Obfuscated IEX Invocation - Security",
        "id": "fd0f5778-d3cb-4c9a-9695-66759d04702a",
        "status": "test",
        "description": "Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block linked in the references",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & (ServiceFileName.str.contains(r'\\\\$PSHome\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$PSHome\\\\[') | ServiceFileName.str.contains(r'\\\\$ShellId\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$ShellId\\\\[') | ServiceFileName.str.contains(r'\\\\$env:Public\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$env:Public\\\\[') | ServiceFileName.str.contains(r'\\\\$env:ComSpec\\\\[(\\\\s*\\\\d{1,3}\\\\s*,){2}') | ServiceFileName.str.contains(r'\\\\\\\\*mdr\\\\*\\\\W\\\\s*\\\\)\\\\.Name') | ServiceFileName.str.contains(r'\\\\$VerbosePreference\\\\.ToString\\\\(') | ServiceFileName.str.contains(r'\\\\String\\\\]\\\\s*\\\\$VerbosePreference'))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_invoke_obfuscation_obfuscated_iex_services_security.yml"
        }
    },
    {
        "title": "AD Object WriteDAC Access",
        "id": "028c7842-4243-41cd-be6f-12f3cf1a26c7",
        "status": "test",
        "description": "Detects WRITE_DAC access to a domain object",
        "tags": [
            "attack.defense-evasion",
            "attack.t1222.001"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Security' & EventID==4662 & ObjectServer=='DS' & AccessMask=='0x40000' & (ObjectType==['19195a5b-6da0-11d0-afd3-00c04fd930c9', 'domainDNS'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_ad_object_writedac_access.yml"
        }
    },
    {
        "title": "Denied Access To Remote Desktop",
        "id": "8e5c03fa-b7f0-11ea-b242-07e0576828d9",
        "status": "test",
        "description": "This event is generated when an authenticated user who is not allowed to log on remotely attempts to connect to this computer through Remote Desktop.\nOften, this event can be generated by attackers when searching for available windows servers in the network.\n",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4825"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_not_allowed_rdp_access.yml"
        }
    },
    {
        "title": "DCOM InternetExplorer.Application Iertutil DLL Hijack - Security",
        "id": "c39f0c81-7348-4965-ab27-2fde35a1b641",
        "status": "test",
        "description": "Detects a threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network for a DCOM InternetExplorer DLL Hijack scenario.",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002",
            "attack.t1021.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5145 & RelativeTargetName.str.contains(r'\\\\Internet Explorer\\\\iertutil.dll', case=False) & ~ SubjectUserName.str.contains(r'$', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_dcom_iertutil_dll_hijack.yml"
        }
    },
    {
        "title": "SCM Database Handle Failure",
        "id": "13addce7-47b2-4ca0-a98f-1de964d1d669",
        "status": "test",
        "description": "Detects non-system users failing to get a handle of the SCM database.",
        "tags": [
            "attack.discovery",
            "attack.t1010"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4656 & ObjectType=='SC_MANAGER OBJECT' & ObjectName=='ServicesActive' & AccessMask=='0xf003f' & ~ SubjectLogonId=='0x3e4'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_scm_database_handle_failure.yml"
        }
    },
    {
        "title": "Windows Defender Exclusion List Modified",
        "id": "46a68649-f218-4f86-aea1-16a759d81820",
        "status": "test",
        "description": "Detects modifications to the Windows Defender exclusion registry key. This could indicate a potentially suspicious or even malicious activity by an attacker trying to add a new exclusion in order to bypass security.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4657 & ObjectName.str.contains(r'\\\\Microsoft\\\\Windows Defender\\\\Exclusions\\\\', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: Audit Policy : Security Settings/Local Policies/Audit Policy, Registry System Access Control (SACL): Auditing/User",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_windows_defender_exclusions_registry_modified.yml"
        }
    },
    {
        "title": "Suspicious Scheduled Task Creation",
        "id": "3a734d25-df5c-4b99-8034-af1ddb5883a4",
        "status": "test",
        "description": "Detects suspicious scheduled task creation events. Based on attributes such as paths, commands line flags, etc.",
        "tags": [
            "attack.execution",
            "attack.privilege-escalation",
            "attack.persistence",
            "attack.t1053.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4698 & (TaskContent.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | TaskContent.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False) | TaskContent.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | TaskContent.str.contains(r'\\\\WINDOWS\\\\Temp\\\\', case=False) | TaskContent.str.contains(r'C:\\\\Temp\\\\', case=False) | TaskContent.str.contains(r'\\\\Desktop\\\\', case=False) | TaskContent.str.contains(r'\\\\Downloads\\\\', case=False) | TaskContent.str.contains(r'\\\\Temporary Internet', case=False) | TaskContent.str.contains(r'C:\\\\ProgramData\\\\', case=False) | TaskContent.str.contains(r'C:\\\\Perflogs\\\\', case=False)) & (TaskContent.str.contains(r'regsvr32', case=False) | TaskContent.str.contains(r'rundll32', case=False) | TaskContent.str.contains(r'cmd.exe</Command>', case=False) | TaskContent.str.contains(r'cmd</Command>', case=False) | TaskContent.str.contains(r'<Arguments>/c ', case=False) | TaskContent.str.contains(r'<Arguments>/k ', case=False) | TaskContent.str.contains(r'<Arguments>/r ', case=False) | TaskContent.str.contains(r'powershell', case=False) | TaskContent.str.contains(r'pwsh', case=False) | TaskContent.str.contains(r'mshta', case=False) | TaskContent.str.contains(r'wscript', case=False) | TaskContent.str.contains(r'cscript', case=False) | TaskContent.str.contains(r'certutil', case=False) | TaskContent.str.contains(r'bitsadmin', case=False) | TaskContent.str.contains(r'bash.exe', case=False) | TaskContent.str.contains(r'bash ', case=False) | TaskContent.str.contains(r'scrcons', case=False) | TaskContent.str.contains(r'wmic ', case=False) | TaskContent.str.contains(r'wmic.exe', case=False) | TaskContent.str.contains(r'forfiles', case=False) | TaskContent.str.contains(r'scriptrunner', case=False) | TaskContent.str.contains(r'hh.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The Advanced Audit Policy setting Object Access > Audit Other Object Access Events has to be configured to allow this detection. We also recommend extracting the Command field from the embedded XML in the event data.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_scheduled_task_creation.yml"
        }
    },
    {
        "title": "Password Dumper Activity on LSASS",
        "id": "aa1697b7-d611-4f9a-9cb2-5125b4ccfd5c",
        "status": "test",
        "description": "Detects process handle on LSASS process with certain access mask and object type SAM_DOMAIN",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4656 & ProcessName.str.contains(r'\\\\lsass.exe', case=False) & AccessMask=='0x705' & ObjectType=='SAM_DOMAIN'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_lsass_dump.yml"
        }
    },
    {
        "title": "Potentially Suspicious AccessMask Requested From LSASS",
        "id": "4a1b6da0-d94f-4fc3-98fc-2d9cb9e5ee76",
        "status": "test",
        "description": "Detects process handle on LSASS process with certain access mask",
        "tags": [
            "attack.credential-access",
            "car.2019-04-004",
            "attack.t1003.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & (EventID==4656 & ObjectName.str.contains(r'\\\\lsass.exe', case=False) & (AccessMask.str.contains(r'0x40', case=False) | AccessMask.str.contains(r'0x1400', case=False) | AccessMask.str.contains(r'0x100000', case=False) | AccessMask.str.contains(r'0x1410', case=False) | AccessMask.str.contains(r'0x1010', case=False) | AccessMask.str.contains(r'0x1438', case=False) | AccessMask.str.contains(r'0x143a', case=False) | AccessMask.str.contains(r'0x1418', case=False) | AccessMask.str.contains(r'0x1f0fff', case=False) | AccessMask.str.contains(r'0x1f1fff', case=False) | AccessMask.str.contains(r'0x1f2fff', case=False) | AccessMask.str.contains(r'0x1f3fff', case=False)) | EventID==4663 & ObjectName.str.contains(r'\\\\lsass.exe', case=False) & (AccessList.str.contains(r'4484', case=False) | AccessList.str.contains(r'4416', case=False))) & ~ ((ProcessName.str.contains(r'\\\\csrss.exe', case=False) | ProcessName.str.contains(r'\\\\GamingServices.exe', case=False) | ProcessName.str.contains(r'\\\\lsm.exe', case=False) | ProcessName.str.contains(r'\\\\MicrosoftEdgeUpdate.exe', case=False) | ProcessName.str.contains(r'\\\\minionhost.exe', case=False) | ProcessName.str.contains(r'\\\\MRT.exe', case=False) | ProcessName.str.contains(r'\\\\MsMpEng.exe', case=False) | ProcessName.str.contains(r'\\\\perfmon.exe', case=False) | ProcessName.str.contains(r'\\\\procexp.exe', case=False) | ProcessName.str.contains(r'\\\\procexp64.exe', case=False) | ProcessName.str.contains(r'\\\\svchost.exe', case=False) | ProcessName.str.contains(r'\\\\taskmgr.exe', case=False) | ProcessName.str.contains(r'\\\\thor.exe', case=False) | ProcessName.str.contains(r'\\\\thor64.exe', case=False) | ProcessName.str.contains(r'\\\\vmtoolsd.exe', case=False) | ProcessName.str.contains(r'\\\\VsTskMgr.exe', case=False) | ProcessName.str.contains(r'\\\\wininit.exe', case=False) | ProcessName.str.contains(r'\\\\wmiprvse.exe', case=False) | ProcessName.str.contains(r'RtkAudUService64', case=False)) & (ProcessName.str.contains(r':\\\\Program Files (x86)\\\\', case=False) | ProcessName.str.contains(r':\\\\Program Files\\\\', case=False) | ProcessName.str.contains(r':\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False) | ProcessName.str.contains(r':\\\\Windows\\\\SysNative\\\\', case=False) | ProcessName.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | ProcessName.str.contains(r':\\\\Windows\\\\SysWow64\\\\', case=False) | ProcessName.str.contains(r':\\\\Windows\\\\Temp\\\\asgard2-agent\\\\', case=False)) | ProcessName.str.contains(r':\\\\Program Files', case=False) | ProcessName.str.contains(r':\\\\Windows\\\\System32\\\\taskhostw.exe', case=False) | ProcessName.str.contains(r':\\\\Windows\\\\System32\\\\msiexec.exe', case=False) | ProcessName.str.contains(r':\\\\Windows\\\\CCM\\\\CcmExec.exe', case=False) | ProcessName.str.contains(r':\\\\Windows\\\\Sysmon64.exe', case=False) & AccessList.str.contains(r'%%4484', case=False) | ProcessName.str.contains(r':\\\\Windows\\\\Temp\\\\asgard2-agent-sc\\\\aurora\\\\', case=False) & ProcessName.str.contains(r'\\\\aurora-agent-64.exe', case=False) & AccessList.str.contains(r'%%4484', case=False) | ProcessName.str.contains(r'\\\\x64\\\\SCENARIOENGINE.EXE', case=False) & AccessList.str.contains(r'%%4484', case=False) | ProcessName.str.contains(r':\\\\Users\\\\', case=False) & ProcessName.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\is-', case=False) & ProcessName.str.contains(r'\\\\avira_system_speedup.tmp', case=False) & AccessList.str.contains(r'%%4484', case=False) | ProcessName.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) & ProcessName.str.contains(r'\\\\avira_speedup_setup_update.tmp', case=False) & AccessList.str.contains(r'%%4484', case=False) | ProcessName.str.contains(r':\\\\Windows\\\\System32\\\\snmp.exe', case=False) & AccessList.str.contains(r'%%4484', case=False) | ProcessName.str.contains(r':\\\\Windows\\\\SystemTemp\\\\', case=False) & ProcessName.str.contains(r'\\\\GoogleUpdate.exe', case=False) & AccessList.str.contains(r'%%4484', case=False)) & ~ ((ProcessName.str.contains(r'\\\\procmon64.exe', case=False) | ProcessName.str.contains(r'\\\\procmon.exe', case=False)) & AccessList.str.contains(r'%%4484', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_lsass_dump_generic.yml"
        }
    },
    {
        "title": "Mimikatz DC Sync",
        "id": "611eab06-a145-4dfa-a295-3ccc5c20f59a",
        "status": "test",
        "description": "Detects Mimikatz DC sync security events",
        "tags": [
            "attack.credential-access",
            "attack.s0002",
            "attack.t1003.006"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4662 & (Properties.str.contains(r'Replicating Directory Changes All', case=False) | Properties.str.contains(r'1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', case=False) | Properties.str.contains(r'1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', case=False) | Properties.str.contains(r'9923a32a-3607-11d2-b9be-0000f87a36b2', case=False) | Properties.str.contains(r'89e95b76-444d-4c62-991a-0facbeda640c', case=False)) & AccessMask=='0x100' & ~ (SubjectDomainName=='Window Manager' | SubjectUserName.str.contains(r'NT AUT', case=False) | SubjectUserName.str.contains(r'MSOL_', case=False) | SubjectUserName.str.contains(r'$', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_dcsync.yml"
        }
    },
    {
        "title": "Group Policy Abuse for Privilege Addition",
        "id": "1c480e10-7ee1-46d4-8ed2-85f9789e3ce4",
        "status": "experimental",
        "description": "Detects the first occurrence of a modification to Group Policy Object Attributes to add privileges to user accounts or use them to add users as local admins.\n",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1484.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==5136 & AttributeLDAPDisplayName=='gPCMachineExtensionNames' & (AttributeValue.str.contains(r'827D319E-6EAC-11D2-A4EA-00C04F79F83A', case=False) | AttributeValue.str.contains(r'803E14A0-B4FB-11D0-A0D0-00A0C90F574B', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_group_policy_abuse_privilege_addition.yml"
        }
    },
    {
        "title": "Metasploit Or Impacket Service Installation Via SMB PsExec",
        "id": "6fb63b40-e02a-403e-9ffd-3bcc1d749442",
        "status": "test",
        "description": "Detects usage of Metasploit SMB PsExec (exploit/windows/smb/psexec) and Impacket psexec.py by triggering on specific service installation",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002",
            "attack.t1570",
            "attack.execution",
            "attack.t1569.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & ServiceFileName.str.contains(r'^%systemroot%\\\\\\\\[a-zA-Z]{8}\\\\.exe$') & ServiceName.str.contains(r'(^[a-zA-Z]{4}$)|(^[a-zA-Z]{8}$)|(^[a-zA-Z]{16}$)') & ServiceStartType==3 & ServiceType=='0x10' & ~ ServiceName=='PSEXESVC'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_metasploit_or_impacket_smb_psexec_service_install.yml"
        }
    },
    {
        "title": "A New Trust Was Created To A Domain",
        "id": "0255a820-e564-4e40-af2b-6ac61160335c",
        "status": "stable",
        "description": "Addition of domains is seldom and should be verified for legitimacy.",
        "tags": [
            "attack.persistence",
            "attack.t1098"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4706"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_add_domain_trust.yml"
        }
    },
    {
        "title": "WMI Persistence - Security",
        "id": "f033f3f3-fd24-4995-97d8-a3bb17550a88",
        "status": "test",
        "description": "Detects suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1546.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4662 & ObjectType=='WMI Namespace' & ObjectName.str.contains(r'subscription', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_wmi_persistence.yml"
        }
    },
    {
        "title": "DCERPC SMB Spoolss Named Pipe",
        "id": "214e8f95-100a-4e04-bb31-ef6cba8ce07e",
        "status": "test",
        "description": "Detects the use of the spoolss named pipe over SMB. This can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled.",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==5145 & ShareName=='\\\\\\\\\\*\\\\IPC$' & RelativeTargetName=='spoolss'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_dce_rpc_smb_spoolss_named_pipe.yml"
        }
    },
    {
        "title": "Win Susp Computer Name Containing Samtheadmin",
        "id": "39698b3f-da92-4bc6-bfb5-645a98386e45",
        "status": "test",
        "description": "Detects suspicious computer name samtheadmin-{1..100}$ generated by hacktool",
        "tags": [
            "cve.2021-42278",
            "cve.2021-42287",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1078"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Security' & (SamAccountName.str.contains(r'SAMTHEADMIN-', case=False) & SamAccountName.str.contains(r'$', case=False) | TargetUserName.str.contains(r'SAMTHEADMIN-', case=False) & TargetUserName.str.contains(r'$', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_computer_name.yml"
        }
    },
    {
        "title": "Windows Event Auditing Disabled",
        "id": "69aeb277-f15f-4d2d-b32a-55e883609563",
        "status": "test",
        "description": "Detects scenarios where system auditing (i.e.: Windows event log auditing) is disabled.\nThis may be used in a scenario where an entity would want to bypass local logging to evade detection when Windows event logging is enabled and reviewed.\nAlso, it is recommended to turn off \"Local Group Policy Object Processing\" via GPO, which will make sure that Active Directory GPOs take precedence over local/edited computer policies via something such as \"gpedit.msc\".\nPlease note, that disabling \"Local Group Policy Object Processing\" may cause an issue in scenarios of one off specific GPO modifications - however, it is recommended to perform these modifications in Active Directory anyways.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & EventID==4719 & (AuditPolicyChanges.str.contains(r'%%8448', case=False) | AuditPolicyChanges.str.contains(r'%%8450', case=False)) & ~ (SubcategoryGuid==['{0CCE9210-69AE-11D9-BED3-505054503030}', '{0CCE9211-69AE-11D9-BED3-505054503030}', '{0CCE9212-69AE-11D9-BED3-505054503030}', '{0CCE9215-69AE-11D9-BED3-505054503030}', '{0CCE9217-69AE-11D9-BED3-505054503030}', '{0CCE921B-69AE-11D9-BED3-505054503030}', '{0CCE922B-69AE-11D9-BED3-505054503030}', '{0CCE922F-69AE-11D9-BED3-505054503030}', '{0CCE9230-69AE-11D9-BED3-505054503030}', '{0CCE9235-69AE-11D9-BED3-505054503030}', '{0CCE9236-69AE-11D9-BED3-505054503030}', '{0CCE9237-69AE-11D9-BED3-505054503030}', '{0CCE923F-69AE-11D9-BED3-505054503030}', '{0CCE9240-69AE-11D9-BED3-505054503030}', '{0CCE9242-69AE-11D9-BED3-505054503030}'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "dfd8c0f4-e6ad-4e07-b91b-f2fca0ddef64",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_disable_event_auditing.yml"
        }
    },
    {
        "title": "Password Protected ZIP File Opened (Email Attachment)",
        "id": "571498c8-908e-40b4-910b-d2369159a3da",
        "status": "test",
        "description": "Detects the extraction of password protected ZIP archives. See the filename variable for more details on which file has been opened.",
        "tags": [
            "attack.defense-evasion",
            "attack.initial-access",
            "attack.t1027",
            "attack.t1566.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5379 & TargetName.str.contains(r'Microsoft_Windows_Shell_ZipFolder:filename', case=False) & TargetName.str.contains(r'\\\\Temporary Internet Files\\\\Content.Outlook', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_opened_encrypted_zip_outlook.yml"
        }
    },
    {
        "title": "Security Eventlog Cleared",
        "id": "d99b79d2-0a6f-4f46-ad8b-260b6e17f982",
        "status": "test",
        "description": "One of the Windows Eventlogs has been cleared. e.g. caused by \"wevtutil cl\" command execution",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.001",
            "car.2016-04-002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & (EventID==517 & Provider_Name=='Security' | EventID==1102 & Provider_Name=='Microsoft-Windows-Eventlog')"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_audit_log_cleared.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation COMPRESS OBFUSCATION - Security",
        "id": "7a922f1b-2635-4d6c-91ef-af228b198ad3",
        "status": "test",
        "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4697 & ServiceFileName.str.contains(r'new-object', case=False) & ServiceFileName.str.contains(r'text.encoding]::ascii', case=False) & ServiceFileName.str.contains(r'readtoend', case=False) & (ServiceFileName.str.contains(r'system.io.compression.deflatestream', case=False) | ServiceFileName.str.contains(r'system.io.streamreader', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_invoke_obfuscation_via_compress_services_security.yml"
        }
    },
    {
        "title": "ADCS Certificate Template Configuration Vulnerability with Risky EKU",
        "id": "bfbd3291-de87-4b7c-88a2-d6a5deb28668",
        "status": "test",
        "description": "Detects certificate creation with template allowing risk permission subject and risky EKU",
        "tags": [
            "attack.privilege-escalation",
            "attack.credential-access"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & (EventID==4898 & (TemplateContent.str.contains(r'1.3.6.1.5.5.7.3.2', case=False) | TemplateContent.str.contains(r'1.3.6.1.5.2.3.4', case=False) | TemplateContent.str.contains(r'1.3.6.1.4.1.311.20.2.2', case=False) | TemplateContent.str.contains(r'2.5.29.37.0', case=False)) & TemplateContent.str.contains(r'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT', case=False) | EventID==4899 & (NewTemplateContent.str.contains(r'1.3.6.1.5.5.7.3.2', case=False) | NewTemplateContent.str.contains(r'1.3.6.1.5.2.3.4', case=False) | NewTemplateContent.str.contains(r'1.3.6.1.4.1.311.20.2.2', case=False) | NewTemplateContent.str.contains(r'2.5.29.37.0', case=False)) & NewTemplateContent.str.contains(r'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Certificate services loaded a template would trigger event ID 4898 and certificate Services template was updated would trigger event ID 4899. A risk permission seems to be coming if template contain specific flag with risky EKU.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_adcs_certificate_template_configuration_vulnerability_eku.yml"
        }
    },
    {
        "title": "Potential Privileged System Service Operation - SeLoadDriverPrivilege",
        "id": "f63508a0-c809-4435-b3be-ed819394d612",
        "status": "test",
        "description": "Detects the usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver.\nWith this privilege, the user can dynamically load and unload device drivers or other code in to kernel mode.\nThis user right does not apply to Plug and Play device drivers.\nIf you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers.\nThis will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4673 & PrivilegeList=='SeLoadDriverPrivilege' & Service=='-' & ~ (ProcessName==['C:\\\\Windows\\\\System32\\\\Dism.exe', 'C:\\\\Windows\\\\System32\\\\rundll32.exe', 'C:\\\\Windows\\\\System32\\\\fltMC.exe', 'C:\\\\Windows\\\\HelpPane.exe', 'C:\\\\Windows\\\\System32\\\\mmc.exe', 'C:\\\\Windows\\\\System32\\\\svchost.exe', 'C:\\\\Windows\\\\System32\\\\wimserv.exe', 'C:\\\\Windows\\\\System32\\\\RuntimeBroker.exe', 'C:\\\\Windows\\\\System32\\\\SystemSettingsBroker.exe', 'C:\\\\Windows\\\\explorer.exe'] | ProcessName.str.contains(r'\\\\procexp64.exe', case=False) | ProcessName.str.contains(r'\\\\procexp.exe', case=False) | ProcessName.str.contains(r'\\\\procmon64.exe', case=False) | ProcessName.str.contains(r'\\\\procmon.exe', case=False) | ProcessName.str.contains(r'\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', case=False) | ProcessName.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\current\\\\Teams.exe', case=False) | ProcessName.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\Microsoft', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_user_driver_loaded.yml"
        }
    },
    {
        "title": "Suspicious LDAP-Attributes Used",
        "id": "d00a9a72-2c09-4459-ad03-5e0a23351e36",
        "status": "test",
        "description": "Detects the usage of particular AttributeLDAPDisplayNames, which are known for data exchange via LDAP by the tool LDAPFragger and are additionally not commonly used in companies.",
        "tags": [
            "attack.t1001.003",
            "attack.command-and-control"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5136 & AttributeValue.str.contains(r'', case=False) & (AttributeLDAPDisplayName==['primaryInternationalISDNNumber', 'otherFacsimileTelephoneNumber', 'primaryTelexNumber'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_ldap_dataexchange.yml"
        }
    },
    {
        "title": "Important Windows Event Auditing Disabled",
        "id": "ab4561b1-6c7e-48a7-ad08-087cfb9ce8f1",
        "status": "test",
        "description": "Detects scenarios where system auditing for important events such as \"Process Creation\" or \"Logon\" events is disabled.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & (EventID==4719 & (SubcategoryGuid==['{0CCE9210-69AE-11D9-BED3-505054503030}', '{0CCE9211-69AE-11D9-BED3-505054503030}', '{0CCE9212-69AE-11D9-BED3-505054503030}', '{0CCE9215-69AE-11D9-BED3-505054503030}', '{0CCE921B-69AE-11D9-BED3-505054503030}', '{0CCE922B-69AE-11D9-BED3-505054503030}', '{0CCE922F-69AE-11D9-BED3-505054503030}', '{0CCE9230-69AE-11D9-BED3-505054503030}', '{0CCE9235-69AE-11D9-BED3-505054503030}', '{0CCE9236-69AE-11D9-BED3-505054503030}', '{0CCE9237-69AE-11D9-BED3-505054503030}', '{0CCE923F-69AE-11D9-BED3-505054503030}', '{0CCE9240-69AE-11D9-BED3-505054503030}', '{0CCE9242-69AE-11D9-BED3-505054503030}']) & (AuditPolicyChanges.str.contains(r'%%8448', case=False) | AuditPolicyChanges.str.contains(r'%%8450', case=False)) | EventID==4719 & SubcategoryGuid=='{0CCE9217-69AE-11D9-BED3-505054503030}' & AuditPolicyChanges.str.contains(r'%%8448', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "dfd8c0f4-e6ad-4e07-b91b-f2fca0ddef64",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_disable_event_auditing_critical.yml"
        }
    },
    {
        "title": "Processes Accessing the Microphone and Webcam",
        "id": "8cd538a4-62d5-4e83-810b-12d41e428d6e",
        "status": "test",
        "description": "Potential adversaries accessing the microphone and webcam in an endpoint.",
        "tags": [
            "attack.collection",
            "attack.t1123"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & (EventID==[4657, 4656, 4663]) & (ObjectName.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\CapabilityAccessManager\\\\ConsentStore\\\\microphone\\\\NonPackaged', case=False) | ObjectName.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\CapabilityAccessManager\\\\ConsentStore\\\\webcam\\\\NonPackaged', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_camera_microphone_access.yml"
        }
    },
    {
        "title": "Protected Storage Service Access",
        "id": "45545954-4016-43c6-855e-eae8f1c369dc",
        "status": "test",
        "description": "Detects access to a protected_storage service over the network. Potential abuse of DPAPI to extract domain backup keys from Domain Controllers",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5145 & ShareName.str.contains(r'IPC', case=False) & RelativeTargetName=='protected_storage'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_protected_storage_service_access.yml"
        }
    },
    {
        "title": "Failed Code Integrity Checks",
        "id": "470ec5fa-7b4e-4071-b200-4c753100f49b",
        "status": "stable",
        "description": "Detects code integrity failures such as missing page hashes or corrupted drivers due unauthorized modification. This could be a sign of tampered binaries.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027.001"
        ],
        "level": "informational",
        "rule": [
            "Channel=='Security' & (EventID==[5038, 6281]) & ~ (param1.str.contains(r'\\\\CSFalconServiceUninstallTool_', case=False) | param1.str.contains(r'\\\\Program Files\\\\CrowdStrike\\\\', case=False) | param1.str.contains(r'\\\\System32\\\\drivers\\\\CrowdStrike\\\\', case=False) | param1.str.contains(r'\\\\Windows\\\\System32\\\\ScriptControl64_', case=False) | param1.str.contains(r'\\\\Program Files\\\\Sophos\\\\', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_codeintegrity_check_failure.yml"
        }
    },
    {
        "title": "Password Policy Enumerated",
        "id": "12ba6a38-adb3-4d6b-91ba-a7fb248e3199",
        "status": "test",
        "description": "Detects when the password policy is enumerated.",
        "tags": [
            "attack.discovery",
            "attack.t1201"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4661 & AccessList.str.contains(r'%%5392', case=False) & ObjectServer=='Security Account Manager'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "dfd8c0f4-e6ad-4e07-b91b-f2fca0ddef64",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_password_policy_enumerated.yml"
        }
    },
    {
        "title": "HybridConnectionManager Service Installation",
        "id": "0ee4d8a5-4e67-4faf-acfa-62a78457d1f2",
        "status": "test",
        "description": "Rule to detect the Hybrid Connection Manager service installation.",
        "tags": [
            "attack.persistence",
            "attack.t1554"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & ServiceName=='HybridConnectionManager' & ServiceFileName.str.contains(r'HybridConnectionManager', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_hybridconnectionmgr_svc_installation.yml"
        }
    },
    {
        "title": "Remote PowerShell Sessions Network Connections (WinRM)",
        "id": "13acf386-b8c6-4fe0-9a6e-c4756b974698",
        "status": "test",
        "description": "Detects basic PowerShell Remoting (WinRM) by monitoring for network inbound connections to ports 5985 OR 5986",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5156 & (DestPort==[5985, 5986]) & LayerRTID==44"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_remote_powershell_session.yml"
        }
    },
    {
        "title": "Hacktool Ruler",
        "id": "24549159-ac1b-479c-8175-d42aea947cae",
        "status": "test",
        "description": "This events that are generated when using the hacktool Ruler by Sensepost",
        "tags": [
            "attack.discovery",
            "attack.execution",
            "attack.t1087",
            "attack.t1114",
            "attack.t1059",
            "attack.t1550.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & (EventID==4776 & Workstation=='RULER' | (EventID==[4624, 4625]) & WorkstationName=='RULER')"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_alert_ruler.yml"
        }
    },
    {
        "title": "Account Tampering - Suspicious Failed Logon Reasons",
        "id": "9eb99343-d336-4020-a3cd-67f3819e68ee",
        "status": "test",
        "description": "This method uses uncommon error codes on failed logons to determine suspicious activity and tampering with accounts that have been disabled or somehow restricted.",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.initial-access",
            "attack.t1078"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & (EventID==[4625, 4776]) & (Status==['0xC0000072', '0xC000006F', '0xC0000070', '0xC0000413', '0xC000018C', '0xC000015B']) & ~ SubjectUserSid=='S-1-0-0'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_failed_logon_reasons.yml"
        }
    },
    {
        "title": "Possible PetitPotam Coerce Authentication Attempt",
        "id": "1ce8c8a3-2723-48ed-8246-906ac91061a6",
        "status": "test",
        "description": "Detect PetitPotam coerced authentication activity.",
        "tags": [
            "attack.credential-access",
            "attack.t1187"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5145 & ShareName.str.contains(r'\\\\\\\\', case=False) & ShareName.str.contains(r'\\\\IPC$', case=False) & RelativeTargetName=='lsarpc' & SubjectUserName=='ANONYMOUS LOGON'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The advanced audit policy setting \"Object Access > Detailed File Share\" must be configured for Success/Failure",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_petitpotam_network_share.yml"
        }
    },
    {
        "title": "Suspicious Windows ANONYMOUS LOGON Local Account Created",
        "id": "1bbf25b9-8038-4154-a50b-118f2a32be27",
        "status": "test",
        "description": "Detects the creation of suspicious accounts similar to ANONYMOUS LOGON, such as using additional spaces. Created as an covering detection for exclusion of Logon Type 3 from ANONYMOUS LOGON accounts.",
        "tags": [
            "attack.persistence",
            "attack.t1136.001",
            "attack.t1136.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4720 & SamAccountName.str.contains(r'ANONYMOUS', case=False) & SamAccountName.str.contains(r'LOGON', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_local_anon_logon_created.yml"
        }
    },
    {
        "title": "ADCS Certificate Template Configuration Vulnerability",
        "id": "5ee3a654-372f-11ec-8d3d-0242ac130003",
        "status": "test",
        "description": "Detects certificate creation with template allowing risk permission subject",
        "tags": [
            "attack.privilege-escalation",
            "attack.credential-access"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & (EventID==4898 & TemplateContent.str.contains(r'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT', case=False) | EventID==4899 & NewTemplateContent.str.contains(r'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Certificate services loaded a template would trigger event ID 4898 and certificate Services template was updated would trigger event ID 4899. A risk permission seems to be coming if template contain specific flag.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_adcs_certificate_template_configuration_vulnerability.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation VAR+ Launcher - Security",
        "id": "dcf2db1f-f091-425b-a821-c05875b8925a",
        "status": "test",
        "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & ServiceFileName.str.contains(r'cmd', case=False) & ServiceFileName.str.contains(r'\"set', case=False) & ServiceFileName.str.contains(r'-f', case=False) & (ServiceFileName.str.contains(r'/c', case=False) | ServiceFileName.str.contains(r'/r', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_invoke_obfuscation_var_services_security.yml"
        }
    },
    {
        "title": "Impacket PsExec Execution",
        "id": "32d56ea1-417f-44ff-822b-882873f5f43b",
        "status": "test",
        "description": "Detects execution of Impacket's psexec.py.",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5145 & ShareName=='\\\\\\\\\\*\\\\IPC$' & (RelativeTargetName.str.contains(r'RemCom_stdin', case=False) | RelativeTargetName.str.contains(r'RemCom_stdout', case=False) | RelativeTargetName.str.contains(r'RemCom_stderr', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_impacket_psexec.yml"
        }
    },
    {
        "title": "Suspicious Remote Logon with Explicit Credentials",
        "id": "941e5c45-cda7-4864-8cea-bbb7458d194a",
        "status": "test",
        "description": "Detects suspicious processes logging on with explicit credentials",
        "tags": [
            "attack.t1078",
            "attack.lateral-movement"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4648 & (ProcessName.str.contains(r'\\\\cmd.exe', case=False) | ProcessName.str.contains(r'\\\\powershell.exe', case=False) | ProcessName.str.contains(r'\\\\pwsh.exe', case=False) | ProcessName.str.contains(r'\\\\winrs.exe', case=False) | ProcessName.str.contains(r'\\\\wmic.exe', case=False) | ProcessName.str.contains(r'\\\\net.exe', case=False) | ProcessName.str.contains(r'\\\\net1.exe', case=False) | ProcessName.str.contains(r'\\\\reg.exe', case=False)) & ~ (TargetServerName=='localhost' | SubjectUserName.str.contains(r'$', case=False) & TargetUserName.str.contains(r'$', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_logon_explicit_credentials.yml"
        }
    },
    {
        "title": "Remote Task Creation via ATSVC Named Pipe",
        "id": "f6de6525-4509-495a-8a82-1f8b0ed73a00",
        "status": "test",
        "description": "Detects remote task creation via at.exe or API interacting with ATSVC namedpipe",
        "tags": [
            "attack.lateral-movement",
            "attack.persistence",
            "car.2013-05-004",
            "car.2015-04-001",
            "attack.t1053.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==5145 & ShareName=='\\\\\\\\\\*\\\\IPC$' & RelativeTargetName=='atsvc' & AccessList.str.contains(r'WriteData', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_atsvc_task.yml"
        }
    },
    {
        "title": "ISO Image Mounted",
        "id": "0248a7bc-8a9a-4cd8-a57e-3ae8e073a073",
        "status": "test",
        "description": "Detects the mount of an ISO image on an endpoint",
        "tags": [
            "attack.initial-access",
            "attack.t1566.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4663 & ObjectServer=='Security' & ObjectType=='File' & ObjectName.str.contains(r'\\\\Device\\\\CdRom', case=False) & ~ (ObjectName==['\\\\Device\\\\CdRom0\\\\autorun.ico', '\\\\Device\\\\CdRom0\\\\setup.exe', '\\\\Device\\\\CdRom0\\\\setup64.exe'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The advanced audit policy setting \"Object Access > Audit Removable Storage\" must be configured for Success/Failure",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_iso_mount.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Stdin - Security",
        "id": "80b708f3-d034-40e4-a6c8-d23b7a7db3d1",
        "status": "test",
        "description": "Detects Obfuscated Powershell via Stdin in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & ServiceFileName.str.contains(r'set', case=False) & ServiceFileName.str.contains(r'&&', case=False) & (ServiceFileName.str.contains(r'environment', case=False) | ServiceFileName.str.contains(r'invoke', case=False) | ServiceFileName.str.contains(r'${input)', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_invoke_obfuscation_via_stdin_services_security.yml"
        }
    },
    {
        "title": "Suspicious Kerberos RC4 Ticket Encryption",
        "id": "496a0e47-0a33-4dca-b009-9e6ca3591f39",
        "status": "test",
        "description": "Detects service ticket requests using RC4 encryption type",
        "tags": [
            "attack.credential-access",
            "attack.t1558.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4769 & TicketOptions=='0x40810000' & TicketEncryptionType=='0x17' & ~ ServiceName.str.contains(r'$', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_rc4_kerberos.yml"
        }
    },
    {
        "title": "Reconnaissance Activity",
        "id": "968eef52-9cff-4454-8992-1e74b9cbad6c",
        "status": "test",
        "description": "Detects activity as \"net user administrator /domain\" and \"net group domain admins /domain\"",
        "tags": [
            "attack.discovery",
            "attack.t1087.002",
            "attack.t1069.002",
            "attack.s0039"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4661 & AccessMask=='0x2d' & (ObjectType==['SAM_USER', 'SAM_GROUP']) & ObjectName.str.contains(r'S-1-5-21-', case=False) & (ObjectName.str.contains(r'-500', case=False) | ObjectName.str.contains(r'-512', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The volume of Event ID 4661 is high on Domain Controllers and therefore \"Audit SAM\" and \"Audit Kernel Object\" advanced audit policy settings are not configured in the recommendations for server systems",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_net_recon_activity.yml"
        }
    },
    {
        "title": "PowerShell Scripts Installed as Services - Security",
        "id": "2a926e6a-4b81-4011-8a96-e36cc8c04302",
        "status": "test",
        "description": "Detects powershell script installed as a Service",
        "tags": [
            "attack.execution",
            "attack.t1569.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & (ServiceFileName.str.contains(r'powershell', case=False) | ServiceFileName.str.contains(r'pwsh', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_powershell_script_installed_as_service.yml"
        }
    },
    {
        "title": "Service Installed By Unusual Client - Security",
        "id": "c4e92a97-a9ff-4392-9d2d-7a4c642768ca",
        "status": "test",
        "description": "Detects a service installed by a client which has PID 0 or whose parent has PID 0",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & (ClientProcessId==0 | ParentProcessId==0)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: The System Security Extension audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_service_installation_by_unusal_client.yml"
        }
    },
    {
        "title": "First Time Seen Remote Named Pipe",
        "id": "52d8b0c6-53d6-439a-9e41-52ad442ad9ad",
        "status": "test",
        "description": "This detection excludes known namped pipes accessible remotely and notify on newly observed ones, may help to detect lateral movement and remote exec using named pipes",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5145 & ShareName=='\\\\\\\\\\*\\\\IPC$' & ~ (RelativeTargetName==['atsvc', 'samr', 'lsarpc', 'lsass', 'winreg', 'netlogon', 'srvsvc', 'protected_storage', 'wkssvc', 'browser', 'netdfs', 'svcctl', 'spoolss', 'ntsvcs', 'LSM_API_service', 'HydraLsPipe', 'TermSrv_API_service', 'MsFteWds', 'sql\\\\query', 'eventlog'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_lm_namedpipe.yml"
        }
    },
    {
        "title": "ETW Logging Disabled In .NET Processes - Registry",
        "id": "a4c90ea1-2634-4ca0-adbb-35eae169b6fc",
        "status": "test",
        "description": "Potential adversaries stopping ETW providers recording loaded .NET assemblies.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112",
            "attack.t1562"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & (EventID==4657 & ObjectName.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\.NETFramework', case=False) & ObjectValueName=='ETWEnabled' & NewValue==0 | EventID==4657 & ObjectName.str.contains(r'\\\\Environment', case=False) & (ObjectValueName==['COMPlus_ETWEnabled', 'COMPlus_ETWFlags']) & NewValue==0)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_dot_net_etw_tamper.yml"
        }
    },
    {
        "title": "Suspicious PsExec Execution",
        "id": "c462f537-a1e3-41a6-b5fc-b2c2cef9bf82",
        "status": "test",
        "description": "detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5145 & ShareName=='\\\\\\\\\\*\\\\IPC$' & (RelativeTargetName.str.contains(r'-stdin', case=False) | RelativeTargetName.str.contains(r'-stdout', case=False) | RelativeTargetName.str.contains(r'-stderr', case=False)) & ~ RelativeTargetName.str.contains(r'PSEXESVC', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_psexec.yml"
        }
    },
    {
        "title": "SAM Registry Hive Handle Request",
        "id": "f8748f2c-89dc-4d95-afb0-5a2dfdbad332",
        "status": "test",
        "description": "Detects handles requested to SAM registry hive",
        "tags": [
            "attack.discovery",
            "attack.t1012",
            "attack.credential-access",
            "attack.t1552.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4656 & ObjectType=='Key' & ObjectName.str.contains(r'\\\\SAM', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_sam_registry_hive_handle_request.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - Security",
        "id": "4c54ba8f-73d2-4d40-8890-d9cf1dca3d30",
        "status": "test",
        "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & ServiceFileName.str.contains(r'&&set', case=False) & ServiceFileName.str.contains(r'cmd', case=False) & ServiceFileName.str.contains(r'/c', case=False) & ServiceFileName.str.contains(r'-f', case=False) & (ServiceFileName.str.contains(r'{0}', case=False) | ServiceFileName.str.contains(r'{1}', case=False) | ServiceFileName.str.contains(r'{2}', case=False) | ServiceFileName.str.contains(r'{3}', case=False) | ServiceFileName.str.contains(r'{4}', case=False) | ServiceFileName.str.contains(r'{5}', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_invoke_obfuscation_via_var_services_security.yml"
        }
    },
    {
        "title": "Powerview Add-DomainObjectAcl DCSync AD Extend Right",
        "id": "2c99737c-585d-4431-b61a-c911d86ff32f",
        "status": "test",
        "description": "Backdooring domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer",
        "tags": [
            "attack.persistence",
            "attack.t1098"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5136 & AttributeLDAPDisplayName=='ntSecurityDescriptor' & (AttributeValue.str.contains(r'1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', case=False) | AttributeValue.str.contains(r'1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', case=False) | AttributeValue.str.contains(r'89e95b76-444d-4c62-991a-0facbeda640c', case=False)) & ~ (ObjectClass==['dnsNode', 'dnsZoneScope', 'dnsZone'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_account_backdoor_dcsync_rights.yml"
        }
    },
    {
        "title": "Kerberoasting Activity - Initial Query",
        "id": "d04ae2b8-ad54-4de0-bd87-4bc1da66aa59",
        "status": "test",
        "description": "This rule will collect the data needed to start looking into possible kerberoasting activity.\nFurther analysis or computation within the query is needed focusing on requests from one specific host/IP towards multiple service names within a time period of 5 seconds.\nYou can then set a threshold for the number of requests and time between the requests to turn this into an alert.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1558.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4769 & Status=='0x0' & TicketEncryptionType=='0x17' & ~ ((ServiceName.str.contains(r'krbtgt', case=False) | ServiceName.str.contains(r'$', case=False)) & TargetUserName.str.contains(r'$@', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_kerberoasting_activity.yml"
        }
    },
    {
        "title": "Local User Creation",
        "id": "66b6be3d-55d0-4f47-9855-d69df21740ea",
        "status": "test",
        "description": "Detects local user creation on Windows servers, which shouldn't happen in an Active Directory environment. Apply this Sigma Use Case on your Windows server logs and not on your DC logs.\n",
        "tags": [
            "attack.persistence",
            "attack.t1136.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & EventID==4720"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_user_creation.yml"
        }
    },
    {
        "title": "Kerberos Manipulation",
        "id": "f7644214-0eb0-4ace-9455-331ec4c09253",
        "status": "test",
        "description": "Detects failed Kerberos TGT issue operation. This can be a sign of manipulations of TGT messages by an attacker.",
        "tags": [
            "attack.credential-access",
            "attack.t1212"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & (EventID==[675, 4768, 4769, 4771]) & (Status==['0x9', '0xA', '0xB', '0xF', '0x10', '0x11', '0x13', '0x14', '0x1A', '0x1F', '0x21', '0x22', '0x23', '0x24', '0x26', '0x27', '0x28', '0x29', '0x2C', '0x2D', '0x2E', '0x2F', '0x31', '0x32', '0x3E', '0x3F', '0x40', '0x41', '0x43', '0x44'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_kerberos_manipulation.yml"
        }
    },
    {
        "title": "NetNTLM Downgrade Attack",
        "id": "d3abac66-f11c-4ed0-8acb-50cc29c97eed",
        "status": "test",
        "description": "Detects NetNTLM downgrade attack",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4657 & ObjectName.str.contains(r'\\\\REGISTRY\\\\MACHINE\\\\SYSTEM', case=False) & ObjectName.str.contains(r'ControlSet', case=False) & ObjectName.str.contains(r'\\\\Control\\\\Lsa', case=False) & (ObjectValueName==['LmCompatibilityLevel', 'NtlmMinClientSec', 'RestrictSendingNTLMTraffic'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: Audit Policy : Object Access > Audit Registry (Success)",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_net_ntlm_downgrade.yml"
        }
    },
    {
        "title": "External Disk Drive Or USB Storage Device Was Recognized By The System",
        "id": "f69a87ea-955e-4fb4-adb2-bb9fd6685632",
        "status": "test",
        "description": "Detects external disk drives or plugged-in USB devices.",
        "tags": [
            "attack.t1091",
            "attack.t1200",
            "attack.lateral-movement",
            "attack.initial-access"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & EventID==6416 & (ClassName=='DiskDrive' | DeviceDescription=='USB Mass Storage Device')"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_external_device.yml"
        }
    },
    {
        "title": "Password Protected ZIP File Opened (Suspicious Filenames)",
        "id": "54f0434b-726f-48a1-b2aa-067df14516e4",
        "status": "test",
        "description": "Detects the extraction of password protected ZIP archives with suspicious file names. See the filename variable for more details on which file has been opened.",
        "tags": [
            "attack.command-and-control",
            "attack.defense-evasion",
            "attack.t1027",
            "attack.t1105",
            "attack.t1036"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5379 & TargetName.str.contains(r'Microsoft_Windows_Shell_ZipFolder:filename', case=False) & (TargetName.str.contains(r'invoice', case=False) | TargetName.str.contains(r'new order', case=False) | TargetName.str.contains(r'rechnung', case=False) | TargetName.str.contains(r'factura', case=False) | TargetName.str.contains(r'delivery', case=False) | TargetName.str.contains(r'purchase', case=False) | TargetName.str.contains(r'order', case=False) | TargetName.str.contains(r'payment', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_opened_encrypted_zip_filename.yml"
        }
    },
    {
        "title": "Startup/Logon Script Added to Group Policy Object",
        "id": "123e4e6d-b123-48f8-b261-7214938acaf0",
        "status": "experimental",
        "description": "Detects the modification of Group Policy Objects (GPO) to add a startup/logon script to users or computer objects.\n",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1484.001",
            "attack.t1547"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & (EventID==[5136, 5145]) & ((AttributeLDAPDisplayName==['gPCMachineExtensionNames', 'gPCUserExtensionNames']) & AttributeValue.str.contains(r'42B5FAAE-6536-11D2-AE5A-0000F87571E3', case=False) & (AttributeValue.str.contains(r'40B6664F-4972-11D1-A7CA-0000F87571E3', case=False) | AttributeValue.str.contains(r'40B66650-4972-11D1-A7CA-0000F87571E3', case=False)) | ShareName.str.contains(r'\\\\SYSVOL', case=False) & (RelativeTargetName.str.contains(r'\\\\scripts.ini', case=False) | RelativeTargetName.str.contains(r'\\\\psscripts.ini', case=False)) & AccessList.str.contains(r'%%4417', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_group_policy_startup_script_added_to_gpo.yml"
        }
    },
    {
        "title": "Addition of SID History to Active Directory Object",
        "id": "2632954e-db1c-49cb-9936-67d1ef1d17d2",
        "status": "stable",
        "description": "An attacker can use the SID history attribute to gain additional privileges.",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1134.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & (EventID==[4765, 4766] | EventID==4738 & ~ (SidHistory==['-', '%%1793']) & ~ SidHistory is null)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_add_sid_history.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation STDIN+ Launcher - Security",
        "id": "0c718a5e-4284-4fb9-b4d9-b9a50b3a1974",
        "status": "test",
        "description": "Detects Obfuscated use of stdin to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & ServiceFileName.str.contains(r'cmd', case=False) & ServiceFileName.str.contains(r'powershell', case=False) & (ServiceFileName.str.contains(r'${input}', case=False) | ServiceFileName.str.contains(r'noexit', case=False)) & (ServiceFileName.str.contains(r' /c ', case=False) | ServiceFileName.str.contains(r' /r ', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_invoke_obfuscation_stdin_services_security.yml"
        }
    },
    {
        "title": "Credential Dumping Tools Service Execution - Security",
        "id": "f0d1feba-4344-4ca9-8121-a6c97bd6df52",
        "status": "test",
        "description": "Detects well-known credential dumping tools execution via service execution events",
        "tags": [
            "attack.credential-access",
            "attack.execution",
            "attack.t1003.001",
            "attack.t1003.002",
            "attack.t1003.004",
            "attack.t1003.005",
            "attack.t1003.006",
            "attack.t1569.002",
            "attack.s0005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & (ServiceFileName.str.contains(r'cachedump', case=False) | ServiceFileName.str.contains(r'dumpsvc', case=False) | ServiceFileName.str.contains(r'fgexec', case=False) | ServiceFileName.str.contains(r'gsecdump', case=False) | ServiceFileName.str.contains(r'mimidrv', case=False) | ServiceFileName.str.contains(r'pwdump', case=False) | ServiceFileName.str.contains(r'servpw', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_mal_creddumper.yml"
        }
    },
    {
        "title": "Password Protected ZIP File Opened",
        "id": "00ba9da1-b510-4f6b-b258-8d338836180f",
        "status": "test",
        "description": "Detects the extraction of password protected ZIP archives. See the filename variable for more details on which file has been opened.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==5379 & TargetName.str.contains(r'Microsoft_Windows_Shell_ZipFolder:filename', case=False) & ~ TargetName.str.contains(r'\\\\Temporary Internet Files\\\\Content.Outlook', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_opened_encrypted_zip.yml"
        }
    },
    {
        "title": "Active Directory User Backdoors",
        "id": "300bac00-e041-4ee2-9c36-e262656a6ecc",
        "status": "test",
        "description": "Detects scenarios where one can control another users or computers account without having to use their credentials.",
        "tags": [
            "attack.t1098",
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & (EventID==4738 & ~ (AllowedToDelegateTo==['', '-'] | AllowedToDelegateTo is null) | EventID==5136 & AttributeLDAPDisplayName=='msDS-AllowedToDelegateTo' | EventID==5136 & ObjectClass=='user' & AttributeLDAPDisplayName=='servicePrincipalName' | EventID==5136 & AttributeLDAPDisplayName=='msDS-AllowedToActOnBehalfOfOtherIdentity')"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: Audit Policy : Account Management > Audit User Account Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account Management, DS Access > Audit Directory Service Changes, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\DS Access\\Audit Directory Service Changes",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_alert_ad_user_backdoors.yml"
        }
    },
    {
        "title": "User Logoff Event",
        "id": "0badd08f-c6a3-4630-90d3-6875cca440be",
        "status": "test",
        "description": "Detects a user log-off activity. Could be used for example to correlate information during forensic investigations",
        "tags": [
            "attack.impact",
            "attack.t1531"
        ],
        "level": "informational",
        "rule": [
            "Channel=='Security' & (EventID==[4634, 4647])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_user_logoff.yml"
        }
    },
    {
        "title": "Potential Secure Deletion with SDelete",
        "id": "39a80702-d7ca-4a83-b776-525b1f86a36d",
        "status": "test",
        "description": "Detects files that have extensions commonly seen while SDelete is used to wipe files.",
        "tags": [
            "attack.impact",
            "attack.defense-evasion",
            "attack.t1070.004",
            "attack.t1027.005",
            "attack.t1485",
            "attack.t1553.002",
            "attack.s0195"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & (EventID==[4656, 4663, 4658]) & (ObjectName.str.contains(r'.AAA', case=False) | ObjectName.str.contains(r'.ZZZ', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_sdelete_potential_secure_deletion.yml"
        }
    },
    {
        "title": "VSSAudit Security Event Source Registration",
        "id": "e9faba72-4974-4ab2-a4c5-46e25ad59e9b",
        "status": "test",
        "description": "Detects the registration of the security event source VSSAudit. It would usually trigger when volume shadow copy operations happen.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002"
        ],
        "level": "informational",
        "rule": [
            "Channel=='Security' & AuditSourceName=='VSSAudit' & (EventID==[4904, 4905])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_vssaudit_secevent_source_registration.yml"
        }
    },
    {
        "title": "AD Privileged Users or Groups Reconnaissance",
        "id": "35ba1d85-724d-42a3-889f-2e2362bcaf23",
        "status": "test",
        "description": "Detect priv users or groups recon based on 4661 eventid and known privileged users or groups SIDs",
        "tags": [
            "attack.discovery",
            "attack.t1087.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4661 & (ObjectType==['SAM_USER', 'SAM_GROUP']) & (ObjectName.str.contains(r'-512', case=False) | ObjectName.str.contains(r'-502', case=False) | ObjectName.str.contains(r'-500', case=False) | ObjectName.str.contains(r'-505', case=False) | ObjectName.str.contains(r'-519', case=False) | ObjectName.str.contains(r'-520', case=False) | ObjectName.str.contains(r'-544', case=False) | ObjectName.str.contains(r'-551', case=False) | ObjectName.str.contains(r'-555', case=False) | ObjectName.str.contains(r'admin', case=False)) & ~ SubjectUserName.str.contains(r'$', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: enable Object Access SAM on your Domain Controllers",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_account_discovery.yml"
        }
    },
    {
        "title": "Weak Encryption Enabled and Kerberoast",
        "id": "f6de9536-0441-4b3f-a646-f4e00f300ffd",
        "status": "test",
        "description": "Detects scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4738 & ((NewUacValue.str.contains(r'*8***') | NewUacValue.str.contains(r'*9***') | NewUacValue.str.contains(r'*A***') | NewUacValue.str.contains(r'*B***') | NewUacValue.str.contains(r'*C***') | NewUacValue.str.contains(r'*D***') | NewUacValue.str.contains(r'*E***') | NewUacValue.str.contains(r'*F***')) & ~ (OldUacValue.str.contains(r'*8***') | OldUacValue.str.contains(r'*9***') | OldUacValue.str.contains(r'*A***') | OldUacValue.str.contains(r'*B***') | OldUacValue.str.contains(r'*C***') | OldUacValue.str.contains(r'*D***') | OldUacValue.str.contains(r'*E***') | OldUacValue.str.contains(r'*F***')) | (NewUacValue.str.contains(r'*1****') | NewUacValue.str.contains(r'*3****') | NewUacValue.str.contains(r'*5****') | NewUacValue.str.contains(r'*7****') | NewUacValue.str.contains(r'*9****') | NewUacValue.str.contains(r'*B****') | NewUacValue.str.contains(r'*D****') | NewUacValue.str.contains(r'*F****')) & ~ (OldUacValue.str.contains(r'*1****') | OldUacValue.str.contains(r'*3****') | OldUacValue.str.contains(r'*5****') | OldUacValue.str.contains(r'*7****') | OldUacValue.str.contains(r'*9****') | OldUacValue.str.contains(r'*B****') | OldUacValue.str.contains(r'*D****') | OldUacValue.str.contains(r'*F****')) | (NewUacValue.str.contains(r'*8**') | NewUacValue.str.contains(r'*9**') | NewUacValue.str.contains(r'*A**') | NewUacValue.str.contains(r'*B**') | NewUacValue.str.contains(r'*C**') | NewUacValue.str.contains(r'*D**') | NewUacValue.str.contains(r'*E**') | NewUacValue.str.contains(r'*F**')) & ~ (OldUacValue.str.contains(r'*8**') | OldUacValue.str.contains(r'*9**') | OldUacValue.str.contains(r'*A**') | OldUacValue.str.contains(r'*B**') | OldUacValue.str.contains(r'*C**') | OldUacValue.str.contains(r'*D**') | OldUacValue.str.contains(r'*E**') | OldUacValue.str.contains(r'*F**')))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: Audit Policy : Account Management > Audit User Account Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account Management",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_alert_enable_weak_encryption.yml"
        }
    },
    {
        "title": "User Couldn't Call a Privileged Service 'LsaRegisterLogonProcess'",
        "id": "6daac7fc-77d1-449a-a71a-e6b4d59a0e54",
        "status": "test",
        "description": "The 'LsaRegisterLogonProcess' function verifies that the application making the function call is a logon process by checking that it has the SeTcbPrivilege privilege set. Possible Rubeus tries to get a handle to LSA.",
        "tags": [
            "attack.lateral-movement",
            "attack.privilege-escalation",
            "attack.t1558.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4673 & Service=='LsaRegisterLogonProcess()' & Keywords=='0x8010000000000000'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_user_couldnt_call_priv_service_lsaregisterlogonprocess.yml"
        }
    },
    {
        "title": "Azure AD Health Service Agents Registry Keys Access",
        "id": "1d2ab8ac-1a01-423b-9c39-001510eae8e8",
        "status": "test",
        "description": "This detection uses Windows security events to detect suspicious access attempts to the registry key values and sub-keys of Azure AD Health service agents (e.g AD FS).\nInformation from AD Health service agents can be used to potentially abuse some of the features provided by those services in the cloud (e.g. Federation).\nThis detection requires an access control entry (ACE) on the system access control list (SACL) of the following securable object: HKLM:\\SOFTWARE\\Microsoft\\ADHealthAgent.\nMake sure you set the SACL to propagate to its sub-keys.\n",
        "tags": [
            "attack.discovery",
            "attack.t1012"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & (EventID==[4656, 4663]) & ObjectType=='Key' & ObjectName=='\\\\REGISTRY\\\\MACHINE\\\\SOFTWARE\\\\Microsoft\\\\ADHealthAgent' & ~ (ProcessName.str.contains(r'Microsoft.Identity.Health.Adfs.DiagnosticsAgent.exe', case=False) | ProcessName.str.contains(r'Microsoft.Identity.Health.Adfs.InsightsService.exe', case=False) | ProcessName.str.contains(r'Microsoft.Identity.Health.Adfs.MonitoringAgent.Startup.exe', case=False) | ProcessName.str.contains(r'Microsoft.Identity.Health.Adfs.PshSurrogate.exe', case=False) | ProcessName.str.contains(r'Microsoft.Identity.Health.Common.Clients.ResourceMonitor.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_aadhealth_svc_agent_regkey_access.yml"
        }
    },
    {
        "title": "HackTool - NoFilter Execution",
        "id": "7b14c76a-c602-4ae6-9717-eff868153fc0",
        "status": "test",
        "description": "Detects execution of NoFilter, a tool for abusing the Windows Filtering Platform for privilege escalation via hardcoded policy name indicators\n",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1134",
            "attack.t1134.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & (EventID==5447 & FilterName.str.contains(r'RonPolicy', case=False) | EventID==5449 & ProviderContextName.str.contains(r'RonPolicy', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: Audit Filtering Platform Policy Change needs to be enabled",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_hktl_nofilter.yml"
        }
    },
    {
        "title": "HackTool - EDRSilencer Execution - Filter Added",
        "id": "98054878-5eab-434c-85d4-72d4e5a3361b",
        "status": "test",
        "description": "Detects execution of EDRSilencer, a tool that abuses the Windows Filtering Platform (WFP) to block the outbound traffic of running EDR agents based on specific hardcoded filter names.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & (EventID==[5441, 5447]) & FilterName.str.contains(r'Custom Outbound Filter', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: Audit Filtering Platform Policy Change needs to be enabled",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_hktl_edr_silencer.yml"
        }
    },
    {
        "title": "Transferring Files with Credential Data via Network Shares",
        "id": "910ab938-668b-401b-b08c-b596e80fdca5",
        "status": "test",
        "description": "Transferring files with well-known filenames (sensitive files with credential data) using network shares",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002",
            "attack.t1003.001",
            "attack.t1003.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==5145 & (RelativeTargetName.str.contains(r'\\\\mimidrv', case=False) | RelativeTargetName.str.contains(r'\\\\lsass', case=False) | RelativeTargetName.str.contains(r'\\\\windows\\\\minidump\\\\', case=False) | RelativeTargetName.str.contains(r'\\\\hiberfil', case=False) | RelativeTargetName.str.contains(r'\\\\sqldmpr', case=False) | RelativeTargetName.str.contains(r'\\\\sam', case=False) | RelativeTargetName.str.contains(r'\\\\ntds.dit', case=False) | RelativeTargetName.str.contains(r'\\\\security', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_transf_files_with_cred_data_via_network_shares.yml"
        }
    },
    {
        "title": "RDP over Reverse SSH Tunnel WFP",
        "id": "5bed80b6-b3e8-428e-a3ae-d3c757589e41",
        "status": "test",
        "description": "Detects svchost hosting RDP termsvcs communicating with the loopback address",
        "tags": [
            "attack.defense-evasion",
            "attack.command-and-control",
            "attack.lateral-movement",
            "attack.t1090.001",
            "attack.t1090.002",
            "attack.t1021.001",
            "car.2013-07-002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5156 & (SourcePort==3389 & (DestAddress.str.contains(r'127.', case=False) | DestAddress=='::1') | DestPort==3389 & (SourceAddress.str.contains(r'127.', case=False) | SourceAddress=='::1')) & ~ (FilterOrigin=='AppContainer Loopback' | Application.str.contains(r'\\\\thor.exe', case=False) | Application.str.contains(r'\\\\thor64.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_rdp_reverse_tunnel.yml"
        }
    },
    {
        "title": "Password Change on Directory Service Restore Mode (DSRM) Account",
        "id": "53ad8e36-f573-46bf-97e4-15ba5bf4bb51",
        "status": "stable",
        "description": "Detects potential attempts made to set the Directory Services Restore Mode administrator password.\nThe Directory Service Restore Mode (DSRM) account is a local administrator account on Domain Controllers.\nAttackers may change the password in order to obtain persistence.\n",
        "tags": [
            "attack.persistence",
            "attack.t1098"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4794"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_dsrm_password_change.yml"
        }
    },
    {
        "title": "SCM Database Privileged Operation",
        "id": "dae8171c-5ec6-4396-b210-8466585b53e9",
        "status": "test",
        "description": "Detects non-system users performing privileged operation os the SCM database",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1548"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4674 & ObjectType=='SC_MANAGER OBJECT' & ObjectName=='servicesactive' & PrivilegeList=='SeTakeOwnershipPrivilege' & ~ (SubjectLogonId=='0x3e4' & ProcessName.str.contains(r':\\\\Windows\\\\System32\\\\services.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_scm_database_privileged_operation.yml"
        }
    },
    {
        "title": "Possible Impacket SecretDump Remote Activity",
        "id": "252902e3-5830-4cf6-bf21-c22083dfd5cf",
        "status": "test",
        "description": "Detect AD credential dumping using impacket secretdump HKTL",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002",
            "attack.t1003.004",
            "attack.t1003.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5145 & ShareName=='\\\\\\\\\\*\\\\ADMIN$' & RelativeTargetName.str.contains(r'SYSTEM32\\\\', case=False) & RelativeTargetName.str.contains(r'.tmp', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_impacket_secretdump.yml"
        }
    },
    {
        "title": "LSASS Access From Non System Account",
        "id": "962fe167-e48d-4fd6-9974-11e5b9a5d6d1",
        "status": "test",
        "description": "Detects potential mimikatz-like tools accessing LSASS from non system account",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & (EventID==[4663, 4656]) & (AccessMask==['0x100000', '0x1010', '0x1400', '0x1410', '0x1418', '0x1438', '0x143a', '0x1f0fff', '0x1f1fff', '0x1f2fff', '0x1f3fff', '0x40', '143a', '1f0fff', '1f1fff', '1f2fff', '1f3fff']) & ObjectType=='Process' & ObjectName.str.contains(r'\\\\lsass.exe', case=False) & ~ (SubjectUserName.str.contains(r'$', case=False) | ProcessName.str.contains(r':\\\\Program Files\\\\', case=False) | ProcessName.str.contains(r':\\\\Program Files (x86)\\\\', case=False) | ProcessName=='C:\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE.exe' & AccessMask=='0x1410') & ~ ProcessName.str.contains(r'\\\\SteamLibrary\\\\steamapps\\\\', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_lsass_access_non_system_account.yml"
        }
    },
    {
        "title": "Device Installation Blocked",
        "id": "c9eb55c3-b468-40ab-9089-db2862e42137",
        "status": "test",
        "description": "Detects an installation of a device that is forbidden by the system policy",
        "tags": [
            "attack.initial-access",
            "attack.t1200"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==6423"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_device_installation_blocked.yml"
        }
    },
    {
        "title": "Suspicious Access to Sensitive File Extensions",
        "id": "91c945bc-2ad1-4799-a591-4d00198a1215",
        "status": "test",
        "description": "Detects known sensitive file extensions accessed on a network share",
        "tags": [
            "attack.collection",
            "attack.t1039"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==5145 & (RelativeTargetName.str.contains(r'.bak', case=False) | RelativeTargetName.str.contains(r'.dmp', case=False) | RelativeTargetName.str.contains(r'.edb', case=False) | RelativeTargetName.str.contains(r'.kirbi', case=False) | RelativeTargetName.str.contains(r'.msg', case=False) | RelativeTargetName.str.contains(r'.nsf', case=False) | RelativeTargetName.str.contains(r'.nst', case=False) | RelativeTargetName.str.contains(r'.oab', case=False) | RelativeTargetName.str.contains(r'.ost', case=False) | RelativeTargetName.str.contains(r'.pst', case=False) | RelativeTargetName.str.contains(r'.rdp', case=False) | RelativeTargetName.str.contains(r'\\\\groups.xml', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_raccess_sensitive_fext.yml"
        }
    },
    {
        "title": "Enabled User Right in AD to Control User Objects",
        "id": "311b6ce2-7890-4383-a8c2-663a9f6b43cd",
        "status": "test",
        "description": "Detects scenario where if a user is assigned the SeEnableDelegationPrivilege right in Active Directory it would allow control of other AD user objects.",
        "tags": [
            "attack.persistence",
            "attack.t1098"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4704 & PrivilegeList.str.contains(r'SeEnableDelegationPrivilege', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: Audit Policy : Policy Change > Audit Authorization Policy Change, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Policy Change\\Audit Authorization Policy Change",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_alert_active_directory_user_control.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use Clip - Security",
        "id": "1a0a2ff1-611b-4dac-8216-8a7b47c618a6",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & ServiceFileName.str.contains(r'(Clipboard|i', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_invoke_obfuscation_via_use_clip_services_security.yml"
        }
    },
    {
        "title": "Possible DC Shadow Attack",
        "id": "32e19d25-4aed-4860-a55a-be99cb0bf7ed",
        "status": "test",
        "description": "Detects DCShadow via create new SPN",
        "tags": [
            "attack.credential-access",
            "attack.t1207"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & (EventID==4742 & ServicePrincipalNames.str.contains(r'GC/', case=False) | EventID==5136 & AttributeLDAPDisplayName=='servicePrincipalName' & AttributeValue.str.contains(r'GC/', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_possible_dc_shadow.yml"
        }
    },
    {
        "title": "Uncommon Outbound Kerberos Connection - Security",
        "id": "eca91c7c-9214-47b9-b4c5-cb1d7e4f2350",
        "status": "test",
        "description": "Detects uncommon outbound network activity via Kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation.\n",
        "tags": [
            "attack.lateral-movement",
            "attack.t1558.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==5156 & DestPort==88 & ~ ((Application.str.contains(r'\\\\device\\\\harddiskvolume', case=False) | Application.str.contains(r'C:', case=False)) & Application.str.contains(r'\\\\Windows\\\\System32\\\\lsass.exe', case=False)) & ~ ((Application.str.contains(r'\\\\device\\\\harddiskvolume', case=False) | Application.str.contains(r'C:', case=False)) & (Application.str.contains(r'\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', case=False) | Application.str.contains(r'\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', case=False)) | (Application.str.contains(r'\\\\device\\\\harddiskvolume', case=False) | Application.str.contains(r'C:', case=False)) & (Application.str.contains(r'\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe', case=False) | Application.str.contains(r'\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe', case=False)) | Application.str.contains(r'\\\\tomcat\\\\bin\\\\tomcat8.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_outbound_kerberos_connection.yml"
        }
    },
    {
        "title": "PetitPotam Suspicious Kerberos TGT Request",
        "id": "6a53d871-682d-40b6-83e0-b7c1a6c4e3a5",
        "status": "test",
        "description": "Detect suspicious Kerberos TGT requests.\nOnce an attacer obtains a computer certificate by abusing Active Directory Certificate Services in combination with PetitPotam, the next step would be to leverage the certificate for malicious purposes.\nOne way of doing this is to request a Kerberos Ticket Granting Ticket using a tool like Rubeus.\nThis request will generate a 4768 event with some unusual fields depending on the environment.\nThis analytic will require tuning, we recommend filtering Account_Name to the Domain Controller computer accounts.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1187"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4768 & TargetUserName.str.contains(r'$', case=False) & CertThumbprint.str.contains(r'', case=False) & ~ (IpAddress=='::1' | CertThumbprint=='')"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The advanced audit policy setting \"Account Logon > Kerberos Authentication Service\" must be configured for Success/Failure",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_petitpotam_susp_tgt_request.yml"
        }
    },
    {
        "title": "Access To ADMIN$ Network Share",
        "id": "098d7118-55bc-4912-a836-dc6483a8d150",
        "status": "test",
        "description": "Detects access to ADMIN$ network share",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & EventID==5140 & ShareName=='Admin$' & ~ SubjectUserName.str.contains(r'$', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: The advanced audit policy setting \"Object Access > Audit File Share\" must be configured for Success/Failure",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_admin_share_access.yml"
        }
    },
    {
        "title": "Windows Pcap Drivers",
        "id": "7b687634-ab20-11ea-bb37-0242ac130002",
        "status": "test",
        "description": "Detects Windows Pcap driver installation based on a list of associated .sys files.",
        "tags": [
            "attack.discovery",
            "attack.credential-access",
            "attack.t1040"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4697 & (ServiceFileName.str.contains(r'pcap', case=False) | ServiceFileName.str.contains(r'npcap', case=False) | ServiceFileName.str.contains(r'npf', case=False) | ServiceFileName.str.contains(r'nm3', case=False) | ServiceFileName.str.contains(r'ndiscap', case=False) | ServiceFileName.str.contains(r'nmnt', case=False) | ServiceFileName.str.contains(r'windivert', case=False) | ServiceFileName.str.contains(r'USBPcap', case=False) | ServiceFileName.str.contains(r'pktmon', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_pcap_drivers.yml"
        }
    },
    {
        "title": "DPAPI Domain Master Key Backup Attempt",
        "id": "39a94fd1-8c9a-4ff6-bf22-c058762f8014",
        "status": "test",
        "description": "Detects anyone attempting a backup for the DPAPI Master Key. This events gets generated at the source and not the Domain Controller.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4692"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_dpapi_domain_masterkey_backup_attempt.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation RUNDLL LAUNCHER - Security",
        "id": "f241cf1b-3a6b-4e1a-b4f9-133c00dd95ca",
        "status": "test",
        "description": "Detects Obfuscated Powershell via RUNDLL LAUNCHER",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4697 & ServiceFileName.str.contains(r'rundll32.exe', case=False) & ServiceFileName.str.contains(r'shell32.dll', case=False) & ServiceFileName.str.contains(r'shellexec_rundll', case=False) & ServiceFileName.str.contains(r'powershell', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_invoke_obfuscation_via_rundll_services_security.yml"
        }
    },
    {
        "title": "Suspicious Scheduled Task Update",
        "id": "614cf376-6651-47c4-9dcc-6b9527f749f4",
        "status": "test",
        "description": "Detects update to a scheduled task event that contain suspicious keywords.",
        "tags": [
            "attack.execution",
            "attack.privilege-escalation",
            "attack.persistence",
            "attack.t1053.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4702 & (TaskContentNew.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | TaskContentNew.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False) | TaskContentNew.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | TaskContentNew.str.contains(r'\\\\WINDOWS\\\\Temp\\\\', case=False) | TaskContentNew.str.contains(r'C:\\\\Temp\\\\', case=False) | TaskContentNew.str.contains(r'\\\\Desktop\\\\', case=False) | TaskContentNew.str.contains(r'\\\\Downloads\\\\', case=False) | TaskContentNew.str.contains(r'\\\\Temporary Internet', case=False) | TaskContentNew.str.contains(r'C:\\\\ProgramData\\\\', case=False) | TaskContentNew.str.contains(r'C:\\\\Perflogs\\\\', case=False)) & (TaskContentNew.str.contains(r'regsvr32', case=False) | TaskContentNew.str.contains(r'rundll32', case=False) | TaskContentNew.str.contains(r'cmd.exe</Command>', case=False) | TaskContentNew.str.contains(r'cmd</Command>', case=False) | TaskContentNew.str.contains(r'<Arguments>/c ', case=False) | TaskContentNew.str.contains(r'<Arguments>/k ', case=False) | TaskContentNew.str.contains(r'<Arguments>/r ', case=False) | TaskContentNew.str.contains(r'powershell', case=False) | TaskContentNew.str.contains(r'pwsh', case=False) | TaskContentNew.str.contains(r'mshta', case=False) | TaskContentNew.str.contains(r'wscript', case=False) | TaskContentNew.str.contains(r'cscript', case=False) | TaskContentNew.str.contains(r'certutil', case=False) | TaskContentNew.str.contains(r'bitsadmin', case=False) | TaskContentNew.str.contains(r'bash.exe', case=False) | TaskContentNew.str.contains(r'bash ', case=False) | TaskContentNew.str.contains(r'scrcons', case=False) | TaskContentNew.str.contains(r'wmic ', case=False) | TaskContentNew.str.contains(r'wmic.exe', case=False) | TaskContentNew.str.contains(r'forfiles', case=False) | TaskContentNew.str.contains(r'scriptrunner', case=False) | TaskContentNew.str.contains(r'hh.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The Advanced Audit Policy setting Object Access > Audit Other Object Access Events has to be configured to allow this detection. We also recommend extracting the Command field from the embedded XML in the event data.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_scheduled_task_update.yml"
        }
    },
    {
        "title": "Important Scheduled Task Deleted/Disabled",
        "id": "7595ba94-cf3b-4471-aa03-4f6baa9e5fad",
        "status": "test",
        "description": "Detects when adversaries stop services or processes by deleting or disabling their respective scheduled tasks in order to conduct data destructive activities",
        "tags": [
            "attack.execution",
            "attack.privilege-escalation",
            "attack.persistence",
            "attack.t1053.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & (EventID==[4699, 4701]) & (TaskName.str.contains(r'\\\\Windows\\\\SystemRestore\\\\SR', case=False) | TaskName.str.contains(r'\\\\Windows\\\\Windows Defender\\\\', case=False) | TaskName.str.contains(r'\\\\Windows\\\\BitLocker', case=False) | TaskName.str.contains(r'\\\\Windows\\\\WindowsBackup\\\\', case=False) | TaskName.str.contains(r'\\\\Windows\\\\WindowsUpdate\\\\', case=False) | TaskName.str.contains(r'\\\\Windows\\\\UpdateOrchestrator\\\\Schedule', case=False) | TaskName.str.contains(r'\\\\Windows\\\\ExploitGuard', case=False)) & ~ (EventID==4699 & SubjectUserName.str.contains(r'$', case=False) & TaskName.str.contains(r'\\\\Windows\\\\Windows Defender\\\\', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The Advanced Audit Policy setting Object Access > Audit Other Object Access Events has to be configured to allow this detection. We also recommend extracting the Command field from the embedded XML in the event data.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_susp_scheduled_task_delete_or_disable.yml"
        }
    },
    {
        "title": "Potential AD User Enumeration From Non-Machine Account",
        "id": "ab6bffca-beff-4baa-af11-6733f296d57a",
        "status": "test",
        "description": "Detects read access to a domain user from a non-machine account",
        "tags": [
            "attack.discovery",
            "attack.t1087.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4662 & ObjectType.str.contains(r'bf967aba-0de6-11d0-a285-00aa003049e2', case=False) & (AccessMask.str.contains(r'*1*') | AccessMask.str.contains(r'*3*') | AccessMask.str.contains(r'*4*') | AccessMask.str.contains(r'*7*') | AccessMask.str.contains(r'*9*') | AccessMask.str.contains(r'*B*') | AccessMask.str.contains(r'*D*') | AccessMask.str.contains(r'*F*')) & ~ (SubjectUserName.str.contains(r'$', case=False) | SubjectUserName.str.contains(r'MSOL_', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: The \"Read all properties\" permission on the user object needs to be audited for the \"Everyone\" principal",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_ad_user_enumeration.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use MSHTA - Security",
        "id": "9b8d9203-4e0f-4cd9-bb06-4cc4ea6d0e9a",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & ServiceFileName.str.contains(r'mshta', case=False) & ServiceFileName.str.contains(r'vbscript:createobject', case=False) & ServiceFileName.str.contains(r'.run', case=False) & ServiceFileName.str.contains(r'window.close', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_invoke_obfuscation_via_use_mshta_services_security.yml"
        }
    },
    {
        "title": "CobaltStrike Service Installations - Security",
        "id": "d7a95147-145f-4678-b85d-d1ff4a3bb3f6",
        "status": "test",
        "description": "Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement",
        "tags": [
            "attack.execution",
            "attack.privilege-escalation",
            "attack.lateral-movement",
            "attack.t1021.002",
            "attack.t1543.003",
            "attack.t1569.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4697 & (ServiceFileName.str.contains(r'ADMIN$', case=False) & ServiceFileName.str.contains(r'.exe', case=False) | ServiceFileName.str.contains(r'%COMSPEC%', case=False) & ServiceFileName.str.contains(r'start', case=False) & ServiceFileName.str.contains(r'powershell', case=False) | ServiceFileName.str.contains(r'powershell -nop -w hidden -encodedcommand', case=False) | ServiceFileName.str.contains(r'SUVYIChOZXctT2JqZWN0IE5ldC5XZWJjbGllbnQpLkRvd25sb2FkU3RyaW5nKCdodHRwOi8vMTI3LjAuMC4xO', case=False) | ServiceFileName.str.contains(r'lFWCAoTmV3LU9iamVjdCBOZXQuV2ViY2xpZW50KS5Eb3dubG9hZFN0cmluZygnaHR0cDovLzEyNy4wLjAuMT', case=False) | ServiceFileName.str.contains(r'JRVggKE5ldy1PYmplY3QgTmV0LldlYmNsaWVudCkuRG93bmxvYWRTdHJpbmcoJ2h0dHA6Ly8xMjcuMC4wLjE6', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_cobaltstrike_service_installs.yml"
        }
    },
    {
        "title": "Sysmon Channel Reference Deletion",
        "id": "18beca67-ab3e-4ee3-ba7a-a46ca8d7d0cc",
        "status": "test",
        "description": "Potential threat actor tampering with Sysmon manifest and eventually disabling it",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & (EventID==4657 & (ObjectName.str.contains(r'WINEVT\\\\Publishers\\\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9}', case=False) | ObjectName.str.contains(r'WINEVT\\\\Channels\\\\Microsoft-Windows-Sysmon/Operational', case=False)) & ObjectValueName=='Enabled' & NewValue==0 | EventID==4663 & (ObjectName.str.contains(r'WINEVT\\\\Publishers\\\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9}', case=False) | ObjectName.str.contains(r'WINEVT\\\\Channels\\\\Microsoft-Windows-Sysmon/Operational', case=False)) & AccessMask==65536)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/win_security_sysmon_channel_reference_deletion.yml"
        }
    },
    {
        "title": "WMI Persistence",
        "id": "0b7889b4-5577-4521-a60a-3376ee7f9f7b",
        "status": "test",
        "description": "Detects suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1546.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-WMI-Activity/Operational' & (EventID==5861 & (\"'ActiveScriptEventConsumer'\" | \"'CommandLineEventConsumer'\" | \"'CommandLineTemplate'\") | EventID==5859) & ~ (Provider=='SCM Event Provider' & Query.str.contains(r'select * from MSFT_SCMEventLogEvent') & User=='S-1-5-32-544' & PossibleCause=='Permanent')"
        ],
        "logsource": {
            "product": "windows",
            "service": "wmi",
            "definition": "WMI Namespaces Auditing and SACL should be configured, EventID 5861 and 5859 detection requires Windows 10, 2012 and higher",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/wmi/win_wmi_persistence.yml"
        }
    },
    {
        "title": "BITS Transfer Job Downloading File Potential Suspicious Extension",
        "id": "b85e5894-9b19-4d86-8c87-a2f3b81f0521",
        "status": "test",
        "description": "Detects new BITS transfer job saving local files with potential suspicious extensions",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1197"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Bits-Client/Operational' & EventID==16403 & (LocalName.str.contains(r'.bat', case=False) | LocalName.str.contains(r'.dll', case=False) | LocalName.str.contains(r'.exe', case=False) | LocalName.str.contains(r'.hta', case=False) | LocalName.str.contains(r'.ps1', case=False) | LocalName.str.contains(r'.psd1', case=False) | LocalName.str.contains(r'.sh', case=False) | LocalName.str.contains(r'.vbe', case=False) | LocalName.str.contains(r'.vbs', case=False)) & ~ (LocalName.str.contains(r'\\\\AppData\\\\', case=False) & RemoteName.str.contains(r'.com', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "bits-client",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/bits_client/win_bits_client_new_transfer_saving_susp_extensions.yml"
        }
    },
    {
        "title": "BITS Transfer Job Download To Potential Suspicious Folder",
        "id": "f8a56cb7-a363-44ed-a82f-5926bb44cd05",
        "status": "test",
        "description": "Detects new BITS transfer job where the LocalName/Saved file is stored in a potentially suspicious location",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1197"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Bits-Client/Operational' & EventID==16403 & (LocalName.str.contains(r'\\\\Desktop\\\\', case=False) | LocalName.str.contains(r'C:\\\\Users\\\\Public\\\\', case=False) | LocalName.str.contains(r'C:\\\\PerfLogs\\\\', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "bits-client",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/bits_client/win_bits_client_new_trasnfer_susp_local_folder.yml"
        }
    },
    {
        "title": "BITS Transfer Job Download From Direct IP",
        "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
        "status": "test",
        "description": "Detects a BITS transfer job downloading file(s) from a direct IP address.",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1197"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Bits-Client/Operational' & EventID==16403 & (RemoteName.str.contains(r'http://1', case=False) | RemoteName.str.contains(r'http://2', case=False) | RemoteName.str.contains(r'http://3', case=False) | RemoteName.str.contains(r'http://4', case=False) | RemoteName.str.contains(r'http://5', case=False) | RemoteName.str.contains(r'http://6', case=False) | RemoteName.str.contains(r'http://7', case=False) | RemoteName.str.contains(r'http://8', case=False) | RemoteName.str.contains(r'http://9', case=False) | RemoteName.str.contains(r'https://1', case=False) | RemoteName.str.contains(r'https://2', case=False) | RemoteName.str.contains(r'https://3', case=False) | RemoteName.str.contains(r'https://4', case=False) | RemoteName.str.contains(r'https://5', case=False) | RemoteName.str.contains(r'https://6', case=False) | RemoteName.str.contains(r'https://7', case=False) | RemoteName.str.contains(r'https://8', case=False) | RemoteName.str.contains(r'https://9', case=False)) & ~ (RemoteName.str.contains(r'://10.', case=False) | RemoteName.str.contains(r'://192.168.', case=False) | RemoteName.str.contains(r'://172.16.', case=False) | RemoteName.str.contains(r'://172.17.', case=False) | RemoteName.str.contains(r'://172.18.', case=False) | RemoteName.str.contains(r'://172.19.', case=False) | RemoteName.str.contains(r'://172.20.', case=False) | RemoteName.str.contains(r'://172.21.', case=False) | RemoteName.str.contains(r'://172.22.', case=False) | RemoteName.str.contains(r'://172.23.', case=False) | RemoteName.str.contains(r'://172.24.', case=False) | RemoteName.str.contains(r'://172.25.', case=False) | RemoteName.str.contains(r'://172.26.', case=False) | RemoteName.str.contains(r'://172.27.', case=False) | RemoteName.str.contains(r'://172.28.', case=False) | RemoteName.str.contains(r'://172.29.', case=False) | RemoteName.str.contains(r'://172.30.', case=False) | RemoteName.str.contains(r'://172.31.', case=False) | RemoteName.str.contains(r'://127.', case=False) | RemoteName.str.contains(r'://169.254.', case=False) | RemoteName.str.contains(r'https://7-', case=False) | RemoteName.str.contains(r'http://7-', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "bits-client",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/bits_client/win_bits_client_new_transfer_via_ip_address.yml"
        }
    },
    {
        "title": "New BITS Job Created Via Bitsadmin",
        "id": "1ff315dc-2a3a-4b71-8dde-873818d25d39",
        "status": "test",
        "description": "Detects the creation of a new bits job by Bitsadmin",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1197"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Bits-Client/Operational' & EventID==3 & processPath.str.contains(r'\\\\bitsadmin.exe', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "bits-client",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/bits_client/win_bits_client_new_job_via_bitsadmin.yml"
        }
    },
    {
        "title": "New BITS Job Created Via PowerShell",
        "id": "fe3a2d49-f255-4d10-935c-bda7391108eb",
        "status": "test",
        "description": "Detects the creation of a new bits job by PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1197"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Bits-Client/Operational' & EventID==3 & (processPath.str.contains(r'\\\\powershell.exe', case=False) | processPath.str.contains(r'\\\\pwsh.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "bits-client",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/bits_client/win_bits_client_new_job_via_powershell.yml"
        }
    },
    {
        "title": "BITS Transfer Job With Uncommon Or Suspicious Remote TLD",
        "id": "6d44fb93-e7d2-475c-9d3d-54c9c1e33427",
        "status": "test",
        "description": "Detects a suspicious download using the BITS client from a FQDN that is unusual. Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads.",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1197"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Bits-Client/Operational' & EventID==16403 & ~ (RemoteName.str.contains(r'.azureedge.net/', case=False) | RemoteName.str.contains(r'.com/', case=False) | RemoteName.str.contains(r'.sfx.ms/', case=False) | RemoteName.str.contains(r'download.mozilla.org/', case=False) | RemoteName.str.contains(r'cdn.onenote.net/', case=False) | RemoteName.str.contains(r'cdn.office.net/', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "bits-client",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/bits_client/win_bits_client_new_transfer_via_uncommon_tld.yml"
        }
    },
    {
        "title": "BITS Transfer Job Download From File Sharing Domains",
        "id": "d635249d-86b5-4dad-a8c7-d7272b788586",
        "status": "experimental",
        "description": "Detects BITS transfer job downloading files from a file sharing domain.",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1197"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Bits-Client/Operational' & EventID==16403 & (RemoteName.str.contains(r'.githubusercontent.com', case=False) | RemoteName.str.contains(r'anonfiles.com', case=False) | RemoteName.str.contains(r'cdn.discordapp.com', case=False) | RemoteName.str.contains(r'ddns.net', case=False) | RemoteName.str.contains(r'dl.dropboxusercontent.com', case=False) | RemoteName.str.contains(r'ghostbin.co', case=False) | RemoteName.str.contains(r'glitch.me', case=False) | RemoteName.str.contains(r'gofile.io', case=False) | RemoteName.str.contains(r'hastebin.com', case=False) | RemoteName.str.contains(r'mediafire.com', case=False) | RemoteName.str.contains(r'mega.nz', case=False) | RemoteName.str.contains(r'onrender.com', case=False) | RemoteName.str.contains(r'pages.dev', case=False) | RemoteName.str.contains(r'paste.ee', case=False) | RemoteName.str.contains(r'pastebin.com', case=False) | RemoteName.str.contains(r'pastebin.pl', case=False) | RemoteName.str.contains(r'pastetext.net', case=False) | RemoteName.str.contains(r'pixeldrain.com', case=False) | RemoteName.str.contains(r'privatlab.com', case=False) | RemoteName.str.contains(r'privatlab.net', case=False) | RemoteName.str.contains(r'send.exploit.in', case=False) | RemoteName.str.contains(r'sendspace.com', case=False) | RemoteName.str.contains(r'storage.googleapis.com', case=False) | RemoteName.str.contains(r'storjshare.io', case=False) | RemoteName.str.contains(r'supabase.co', case=False) | RemoteName.str.contains(r'temp.sh', case=False) | RemoteName.str.contains(r'transfer.sh', case=False) | RemoteName.str.contains(r'trycloudflare.com', case=False) | RemoteName.str.contains(r'ufile.io', case=False) | RemoteName.str.contains(r'w3spaces.com', case=False) | RemoteName.str.contains(r'workers.dev', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "bits-client",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/bits_client/win_bits_client_new_transfer_via_file_sharing_domains.yml"
        }
    },
    {
        "title": "New Module Module Added To IIS Server",
        "id": "dd857d3e-0c6e-457b-9b48-e82ae7f86bd7",
        "status": "experimental",
        "description": "Detects the addition of a new module to an IIS server.",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1562.002",
            "attack.t1505.004"
        ],
        "level": "medium",
        "rule": [
            "EventID==29 & Configuration.str.contains(r'/system.webServer/modules/add', case=False) & ~ (NewValue==['AnonymousAuthenticationModule', 'CustomErrorModule', 'DefaultDocumentModule', 'DirectoryListingModule', 'FileCacheModule', 'HttpCacheModule', 'HttpLoggingModule', 'ProtocolSupportModule', 'RequestFilteringModule', 'StaticCompressionModule', 'StaticFileModule', 'TokenCacheModule', 'UriCacheModule'] | NewValue=='')"
        ],
        "logsource": {
            "product": "windows",
            "service": "iis-configuration",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/iis-configuration/win_iis_module_added.yml"
        }
    },
    {
        "title": "Previously Installed IIS Module Was Removed",
        "id": "9e1a1fdf-ee58-40ce-8e15-b66ca5a80e1f",
        "status": "experimental",
        "description": "Detects the removal of a previously installed IIS module.",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1562.002",
            "attack.t1505.004"
        ],
        "level": "low",
        "rule": [
            "EventID==29 & Configuration.str.contains(r'/system.webServer/modules/remove', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "iis-configuration",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/iis-configuration/win_iis_module_removed.yml"
        }
    },
    {
        "title": "HTTP Logging Disabled On IIS Server",
        "id": "e8ebd53a-30c2-45bd-81bb-74befba07bdb",
        "status": "experimental",
        "description": "Detects changes to of the IIS server configuration in order to disable HTTP logging for successful requests.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002",
            "attack.t1505.004"
        ],
        "level": "high",
        "rule": [
            "EventID==29 & Configuration=='/system.webServer/httpLogging/@dontLog' & NewValue=='true'"
        ],
        "logsource": {
            "product": "windows",
            "service": "iis-configuration",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/iis-configuration/win_iis_logging_http_disabled.yml"
        }
    },
    {
        "title": "ETW Logging/Processing Option Disabled On IIS Server",
        "id": "a5b40a90-baf5-4bf7-a6f7-373494881d22",
        "status": "experimental",
        "description": "Detects changes to of the IIS server configuration in order to disable/remove the ETW logging/processing option.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002",
            "attack.t1505.004"
        ],
        "level": "medium",
        "rule": [
            "EventID==29 & Configuration.str.contains(r'@logTargetW3C', case=False) & OldValue.str.contains(r'ETW', case=False) & ~ NewValue.str.contains(r'ETW', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "iis-configuration",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/iis-configuration/win_iis_logging_etw_disabled.yml"
        }
    },
    {
        "title": "NTLM Logon",
        "id": "98c3bcf1-56f2-49dc-9d8d-c66cf190238b",
        "status": "test",
        "description": "Detects logons using NTLM, which could be caused by a legacy source or attackers",
        "tags": [
            "attack.lateral-movement",
            "attack.t1550.002"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-NTLM/Operational' & EventID==8002"
        ],
        "logsource": {
            "product": "windows",
            "service": "ntlm",
            "definition": "Requires events from Microsoft-Windows-NTLM/Operational",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/ntlm/win_susp_ntlm_auth.yml"
        }
    },
    {
        "title": "Potential Remote Desktop Connection to Non-Domain Host",
        "id": "ce5678bb-b9aa-4fb5-be4b-e57f686256ad",
        "status": "test",
        "description": "Detects logons using NTLM to hosts that are potentially not part of the domain.",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-NTLM/Operational' & EventID==8001 & TargetName.str.contains(r'TERMSRV', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "ntlm",
            "definition": "Requires events from Microsoft-Windows-NTLM/Operational",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/ntlm/win_susp_ntlm_rdp.yml"
        }
    },
    {
        "title": "NTLM Brute Force",
        "id": "9c8acf1a-cbf9-4db6-b63c-74baabe03e59",
        "status": "test",
        "description": "Detects common NTLM brute force device names",
        "tags": [
            "attack.credential-access",
            "attack.t1110"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-NTLM/Operational' & EventID==8004 & (WorkstationName==['Rdesktop', 'Remmina', 'Freerdp', 'Windows7', 'Windows8', 'Windows2012', 'Windows2016', 'Windows2019'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "ntlm",
            "definition": "Requires events from Microsoft-Windows-NTLM/Operational",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/ntlm/win_susp_ntlm_brute_force.yml"
        }
    },
    {
        "title": "Potential Active Directory Reconnaissance/Enumeration Via LDAP",
        "id": "31d68132-4038-47c7-8f8e-635a39a7c174",
        "status": "test",
        "description": "Detects potential Active Directory enumeration via LDAP",
        "tags": [
            "attack.discovery",
            "attack.t1069.002",
            "attack.t1087.002",
            "attack.t1482"
        ],
        "level": "medium",
        "rule": [
            "EventID==30 & (SearchFilter.str.contains(r'(groupType:1.2.840.113556.1.4.803:=2147483648)', case=False) | SearchFilter.str.contains(r'(groupType:1.2.840.113556.1.4.803:=2147483656)', case=False) | SearchFilter.str.contains(r'(groupType:1.2.840.113556.1.4.803:=2147483652)', case=False) | SearchFilter.str.contains(r'(groupType:1.2.840.113556.1.4.803:=2147483650)', case=False) | SearchFilter.str.contains(r'(sAMAccountType=805306369)', case=False) | SearchFilter.str.contains(r'(sAMAccountType=805306368)', case=False) | SearchFilter.str.contains(r'(sAMAccountType=536870913)', case=False) | SearchFilter.str.contains(r'(sAMAccountType=536870912)', case=False) | SearchFilter.str.contains(r'(sAMAccountType=268435457)', case=False) | SearchFilter.str.contains(r'(sAMAccountType=268435456)', case=False) | SearchFilter.str.contains(r'(objectCategory=groupPolicyContainer)', case=False) | SearchFilter.str.contains(r'(objectCategory=organizationalUnit)', case=False) | SearchFilter.str.contains(r'(objectCategory=Computer)', case=False) | SearchFilter.str.contains(r'(objectCategory=nTDSDSA)', case=False) | SearchFilter.str.contains(r'(objectCategory=server)', case=False) | SearchFilter.str.contains(r'(objectCategory=domain)', case=False) | SearchFilter.str.contains(r'(objectCategory=person)', case=False) | SearchFilter.str.contains(r'(objectCategory=group)', case=False) | SearchFilter.str.contains(r'(objectCategory=user)', case=False) | SearchFilter.str.contains(r'(objectClass=trustedDomain)', case=False) | SearchFilter.str.contains(r'(objectClass=computer)', case=False) | SearchFilter.str.contains(r'(objectClass=server)', case=False) | SearchFilter.str.contains(r'(objectClass=group)', case=False) | SearchFilter.str.contains(r'(objectClass=user)', case=False) | SearchFilter.str.contains(r'(primaryGroupID=521)', case=False) | SearchFilter.str.contains(r'(primaryGroupID=516)', case=False) | SearchFilter.str.contains(r'(primaryGroupID=515)', case=False) | SearchFilter.str.contains(r'(primaryGroupID=512)', case=False) | SearchFilter.str.contains(r'Domain Admins', case=False) | SearchFilter.str.contains(r'objectGUID=\\*', case=False) | SearchFilter.str.contains(r'(schemaIDGUID=\\*)', case=False) | SearchFilter.str.contains(r'admincount=1', case=False)) & ~ (EventID==30 & (SearchFilter.str.contains(r'*(domainSid=*)*') | SearchFilter.str.contains(r'*(objectSid=*)*'))) | EventID==30 & (SearchFilter.str.contains(r'(userAccountControl:1.2.840.113556.1.4.803:=4194304)', case=False) | SearchFilter.str.contains(r'(userAccountControl:1.2.840.113556.1.4.803:=2097152)', case=False) | SearchFilter.str.contains(r'!(userAccountControl:1.2.840.113556.1.4.803:=1048574)', case=False) | SearchFilter.str.contains(r'(userAccountControl:1.2.840.113556.1.4.803:=524288)', case=False) | SearchFilter.str.contains(r'(userAccountControl:1.2.840.113556.1.4.803:=65536)', case=False) | SearchFilter.str.contains(r'(userAccountControl:1.2.840.113556.1.4.803:=8192)', case=False) | SearchFilter.str.contains(r'(userAccountControl:1.2.840.113556.1.4.803:=544)', case=False) | SearchFilter.str.contains(r'!(UserAccountControl:1.2.840.113556.1.4.803:=2)', case=False) | SearchFilter.str.contains(r'msDS-AllowedToActOnBehalfOfOtherIdentity', case=False) | SearchFilter.str.contains(r'msDS-AllowedToDelegateTo', case=False) | SearchFilter.str.contains(r'msDS-GroupManagedServiceAccount', case=False) | SearchFilter.str.contains(r'(accountExpires=9223372036854775807)', case=False) | SearchFilter.str.contains(r'(accountExpires=0)', case=False) | SearchFilter.str.contains(r'(adminCount=1)', case=False) | SearchFilter.str.contains(r'ms-MCS-AdmPwd', case=False)) | EventID==30 & SearchFilter=='(objectclass=\\*)' & (DistinguishedName.str.contains(r'CN=Domain Admins', case=False) | DistinguishedName.str.contains(r'CN=Enterprise Admins', case=False) | DistinguishedName.str.contains(r'CN=Group Policy Creator Owners', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "ldap",
            "definition": "Requirements: Microsoft-Windows-LDAP-Client/Debug ETW logging",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/ldap/win_ldap_recon.yml"
        }
    },
    {
        "title": "OpenSSH Server Listening On Socket",
        "id": "3ce8e9a4-bc61-4c9b-8e69-d7e2492a8781",
        "status": "test",
        "description": "Detects scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket.",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='OpenSSH/Operational' & EventID==4 & process=='sshd' & payload.str.contains(r'Server listening on ', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "openssh",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/openssh/win_sshd_openssh_server_listening_on_socket.yml"
        }
    },
    {
        "title": "Microsoft Defender Blocked from Loading Unsigned DLL",
        "id": "0b0ea3cc-99c8-4730-9c53-45deee2a4c86",
        "status": "test",
        "description": "Detects Code Integrity (CI) engine blocking Microsoft Defender's processes (MpCmdRun and NisSrv) from loading unsigned DLLs which may be an attempt to sideload arbitrary DLL",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-Security-Mitigations/Kernel Mode', 'Microsoft-Windows-Security-Mitigations/User Mode']) & (EventID==[11, 12]) & (ProcessPath.str.contains(r'\\\\MpCmdRun.exe', case=False) | ProcessPath.str.contains(r'\\\\NisSrv.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security-mitigations",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security_mitigations/win_security_mitigations_defender_load_unsigned_dll.yml"
        }
    },
    {
        "title": "Unsigned Binary Loaded From Suspicious Location",
        "id": "8289bf8c-4aca-4f5a-9db3-dc3d7afe5c10",
        "status": "test",
        "description": "Detects Code Integrity (CI) engine blocking processes from loading unsigned DLLs residing in suspicious locations",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-Security-Mitigations/Kernel Mode', 'Microsoft-Windows-Security-Mitigations/User Mode']) & (EventID==[11, 12]) & (ImageName.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | ImageName.str.contains(r'\\\\PerfLogs\\\\', case=False) | ImageName.str.contains(r'\\\\Desktop\\\\', case=False) | ImageName.str.contains(r'\\\\Downloads\\\\', case=False) | ImageName.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | ImageName.str.contains(r'C:\\\\Windows\\\\TEMP\\\\', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security-mitigations",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security_mitigations/win_security_mitigations_unsigned_dll_from_susp_location.yml"
        }
    },
    {
        "title": "Suspicious Application Installed",
        "id": "83c161b6-ca67-4f33-8ad0-644a0737cf07",
        "status": "test",
        "description": "Detects suspicious application installed by looking at the added shortcut to the app resolver cache",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Shell-Core/Operational' & (EventID==28115 & (Name.str.contains(r'Zenmap', case=False) | Name.str.contains(r'AnyDesk', case=False) | Name.str.contains(r'wireshark', case=False) | Name.str.contains(r'openvpn', case=False)) | EventID==28115 & (AppID.str.contains(r'zenmap.exe', case=False) | AppID.str.contains(r'prokzult ad', case=False) | AppID.str.contains(r'wireshark', case=False) | AppID.str.contains(r'openvpn', case=False)))"
        ],
        "logsource": {
            "product": "windows",
            "service": "shell-core",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/shell_core/win_shell_core_susp_packages_installed.yml"
        }
    },
    {
        "title": "Ngrok Usage with Remote Desktop Service",
        "id": "64d51a51-32a6-49f0-9f3d-17e34d640272",
        "status": "test",
        "description": "Detects cases in which ngrok, a reverse proxy tool, forwards events to the local RDP port, which could be a sign of malicious behaviour",
        "tags": [
            "attack.command-and-control",
            "attack.t1090"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-TerminalServices-LocalSessionManager/Operational' & EventID==21 & Address.str.contains(r'16777216', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "terminalservices-localsessionmanager",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/terminalservices/win_terminalservices_rdp_ngrok.yml"
        }
    },
    {
        "title": "Sysinternals Tools AppX Versions Execution",
        "id": "d29a20b2-be4b-4827-81f2-3d8a59eab5fc",
        "status": "test",
        "description": "Detects execution of Sysinternals tools via an AppX package. Attackers could install the Sysinternals Suite to get access to tools such as psexec and procdump to avoid detection based on System paths",
        "tags": [
            "attack.defense-evasion",
            "attack.execution"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-AppModel-Runtime/Admin' & EventID==201 & (ImageName==['procdump.exe', 'psloglist.exe', 'psexec.exe', 'livekd.exe', 'ADExplorer.exe'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "appmodel-runtime",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/appmodel_runtime/win_appmodel_runtime_sysinternals_tools_appx_execution.yml"
        }
    },
    {
        "title": "Certificate Request Export to Exchange Webserver",
        "id": "b7bc7038-638b-4ffd-880c-292c692209ef",
        "status": "test",
        "description": "Detects a write of an Exchange CSR to an untypical directory or with aspx name suffix which can be used to place a webshell",
        "tags": [
            "attack.persistence",
            "attack.t1505.003"
        ],
        "level": "critical",
        "rule": [
            "Channel=='MSExchange Management' & \"'New-ExchangeCertificate'\" & \"' -GenerateRequest'\" & \"' -BinaryEncoded'\" & \"' -RequestFile'\" & (\"'\\\\\\\\localhost\\\\C$'\" | \"'\\\\\\\\127.0.0.1\\\\C$'\" | \"'C:\\\\inetpub'\" | \"'.aspx'\")"
        ],
        "logsource": {
            "product": "windows",
            "service": "msexchange-management",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/msexchange/win_exchange_proxyshell_certificate_generation.yml"
        }
    },
    {
        "title": "MSExchange Transport Agent Installation - Builtin",
        "id": "4fe151c2-ecf9-4fae-95ae-b88ec9c2fca6",
        "status": "test",
        "description": "Detects the Installation of a Exchange Transport Agent",
        "tags": [
            "attack.persistence",
            "attack.t1505.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='MSExchange Management' & \"'Install-TransportAgent'\""
        ],
        "logsource": {
            "product": "windows",
            "service": "msexchange-management",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/msexchange/win_exchange_transportagent.yml"
        }
    },
    {
        "title": "Exchange Set OabVirtualDirectory ExternalUrl Property",
        "id": "9db37458-4df2-46a5-95ab-307e7f29e675",
        "status": "test",
        "description": "Rule to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log",
        "tags": [
            "attack.persistence",
            "attack.t1505.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='MSExchange Management' & \"'Set-OabVirtualDirectory'\" & \"'ExternalUrl'\" & \"'Page_Load'\" & \"'script'\""
        ],
        "logsource": {
            "product": "windows",
            "service": "msexchange-management",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/msexchange/win_exchange_set_oabvirtualdirectory_externalurl.yml"
        }
    },
    {
        "title": "Failed MSExchange Transport Agent Installation",
        "id": "c7d16cae-aaf3-42e5-9c1c-fb8553faa6fa",
        "status": "test",
        "description": "Detects a failed installation of a Exchange Transport Agent",
        "tags": [
            "attack.persistence",
            "attack.t1505.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='MSExchange Management' & EventID==6 & Data.str.contains(r'Install-TransportAgent', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "msexchange-management",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/msexchange/win_exchange_transportagent_failed.yml"
        }
    },
    {
        "title": "Remove Exported Mailbox from Exchange Webserver",
        "id": "09570ae5-889e-43ea-aac0-0e1221fb3d95",
        "status": "test",
        "description": "Detects removal of an exported Exchange mailbox which could be to cover tracks from ProxyShell exploit",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070"
        ],
        "level": "high",
        "rule": [
            "Channel=='MSExchange Management' & \"'Remove-MailboxExportRequest'\" & \"' -Identity '\" & \"' -Confirm \"False\"'\""
        ],
        "logsource": {
            "product": "windows",
            "service": "msexchange-management",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/msexchange/win_exchange_proxyshell_remove_mailbox_export.yml"
        }
    },
    {
        "title": "ProxyLogon MSExchange OabVirtualDirectory",
        "id": "550d3350-bb8a-4ff3-9533-2ba533f4a1c0",
        "status": "test",
        "description": "Detects specific patterns found after a successful ProxyLogon exploitation in relation to a Commandlet invocation of Set-OabVirtualDirectory",
        "tags": [
            "attack.t1587.001",
            "attack.resource-development"
        ],
        "level": "critical",
        "rule": [
            "Channel=='MSExchange Management' & \"'OabVirtualDirectory'\" & \"' -ExternalUrl '\" & (\"'eval(request'\" | \"'http://f/<script'\" | \"'\"unsafe\"};'\" | \"'function Page_Load()'\")"
        ],
        "logsource": {
            "product": "windows",
            "service": "msexchange-management",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/msexchange/win_exchange_proxylogon_oabvirtualdir.yml"
        }
    },
    {
        "title": "Mailbox Export to Exchange Webserver",
        "id": "516376b4-05cd-4122-bae0-ad7641c38d48",
        "status": "test",
        "description": "Detects a successful export of an Exchange mailbox to untypical directory or with aspx name suffix which can be used to place a webshell or the needed role assignment for it",
        "tags": [
            "attack.persistence",
            "attack.t1505.003"
        ],
        "level": "critical",
        "rule": [
            "Channel=='MSExchange Management' & (\"'New-MailboxExportRequest'\" & \"' -Mailbox '\" & (\"'-FilePath \"\\\\\\\\'\" | \"'.aspx'\") | \"'New-ManagementRoleAssignment'\" & \"' -Role \"Mailbox Import Export\"'\" & \"' -User '\")"
        ],
        "logsource": {
            "product": "windows",
            "service": "msexchange-management",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/msexchange/win_exchange_proxyshell_mailbox_export.yml"
        }
    },
    {
        "title": "Windows Defender Exploit Guard Tamper",
        "id": "a3ab73f1-bd46-4319-8f06-4b20d0617886",
        "status": "test",
        "description": "Detects when someone is adding or removing applications or folders from exploit guard \"ProtectedFolders\" or \"AllowedApplications\"\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & (EventID==5007 & NewValue.str.contains(r'\\\\Windows Defender\\\\Windows Defender Exploit Guard\\\\Controlled Folder Access\\\\AllowedApplications\\\\', case=False) & (NewValue.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | NewValue.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | NewValue.str.contains(r'\\\\Desktop\\\\', case=False) | NewValue.str.contains(r'\\\\PerfLogs\\\\', case=False) | NewValue.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False)) | EventID==5007 & OldValue.str.contains(r'\\\\Windows Defender\\\\Windows Defender Exploit Guard\\\\Controlled Folder Access\\\\ProtectedFolders\\\\', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_config_change_exploit_guard_tamper.yml"
        }
    },
    {
        "title": "Win Defender Restored Quarantine File",
        "id": "bc92ca75-cd42-4d61-9a37-9d5aa259c88b",
        "status": "test",
        "description": "Detects the restoration of files from the defender quarantine",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & EventID==1009"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_restored_quarantine_file.yml"
        }
    },
    {
        "title": "PSExec and WMI Process Creations Block",
        "id": "97b9ce1e-c5ab-11ea-87d0-0242ac130003",
        "status": "test",
        "description": "Detects blocking of process creations originating from PSExec and WMI commands",
        "tags": [
            "attack.execution",
            "attack.lateral-movement",
            "attack.t1047",
            "attack.t1569.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & EventID==1121 & (ProcessName.str.contains(r'\\\\wmiprvse.exe', case=False) | ProcessName.str.contains(r'\\\\psexesvc.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "definition": "Requirements:Enabled Block process creations originating from PSExec and WMI commands from Attack Surface Reduction (GUID: d1e49aac-8f56-4280-b9ba-993a6d77406c)",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_asr_psexec_wmi.yml"
        }
    },
    {
        "title": "Microsoft Defender Tamper Protection Trigger",
        "id": "49e5bc24-8b86-49f1-b743-535f332c2856",
        "status": "stable",
        "description": "Detects blocked attempts to change any of Defender's settings such as \"Real Time Monitoring\" and \"Behavior Monitoring\"",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & EventID==5013 & (Value.str.contains(r'\\\\Windows Defender\\\\DisableAntiSpyware', case=False) | Value.str.contains(r'\\\\Windows Defender\\\\DisableAntiVirus', case=False) | Value.str.contains(r'\\\\Windows Defender\\\\Scan\\\\DisableArchiveScanning', case=False) | Value.str.contains(r'\\\\Windows Defender\\\\Scan\\\\DisableScanningNetworkFiles', case=False) | Value.str.contains(r'\\\\Real-Time Protection\\\\DisableRealtimeMonitoring', case=False) | Value.str.contains(r'\\\\Real-Time Protection\\\\DisableBehaviorMonitoring', case=False) | Value.str.contains(r'\\\\Real-Time Protection\\\\DisableIOAVProtection', case=False) | Value.str.contains(r'\\\\Real-Time Protection\\\\DisableScriptScanning', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_tamper_protection_trigger.yml"
        }
    },
    {
        "title": "Windows Defender Grace Period Expired",
        "id": "360a1340-398a-46b6-8d06-99b905dc69d2",
        "status": "stable",
        "description": "Detects the expiration of the grace period of Windows Defender. This means protection against viruses, spyware, and other potentially unwanted software is disabled.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & EventID==5101"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_antimalware_platform_expired.yml"
        }
    },
    {
        "title": "Windows Defender Threat Detected",
        "id": "57b649ef-ff42-4fb0-8bf6-62da243a1708",
        "status": "stable",
        "description": "Detects actions taken by Windows Defender malware detection engines",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & (EventID==[1006, 1015, 1116, 1117])"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_threat.yml"
        }
    },
    {
        "title": "Windows Defender AMSI Trigger Detected",
        "id": "ea9bf0fa-edec-4fb8-8b78-b119f2528186",
        "status": "stable",
        "description": "Detects triggering of AMSI by Windows Defender.",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & EventID==1116 & SourceName=='AMSI'"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_malware_detected_amsi_source.yml"
        }
    },
    {
        "title": "Windows Defender Real-time Protection Disabled",
        "id": "b28e58e4-2a72-4fae-bdee-0fbe904db642",
        "status": "stable",
        "description": "Detects disabling of Windows Defender Real-time Protection. As this event doesn't contain a lot of information on who initiated this action you might want to reduce it to a \"medium\" level if this occurs too many times in your environment\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & EventID==5001"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_real_time_protection_disabled.yml"
        }
    },
    {
        "title": "LSASS Access Detected via Attack Surface Reduction",
        "id": "a0a278fe-2c0e-4de2-ac3c-c68b08a9ba98",
        "status": "test",
        "description": "Detects Access to LSASS Process",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & EventID==1121 & Path.str.contains(r'\\\\lsass.exe', case=False) & ~ (ProcessName.str.contains(r'C:\\\\Windows\\\\Temp\\\\asgard2-agent\\\\', case=False) & (ProcessName.str.contains(r'\\\\thor64.exe', case=False) | ProcessName.str.contains(r'\\\\thor.exe', case=False)) | ProcessName==['C:\\\\Windows\\\\System32\\\\atiesrxx.exe', 'C:\\\\Windows\\\\System32\\\\CompatTelRunner.exe', 'C:\\\\Windows\\\\System32\\\\msiexec.exe', 'C:\\\\Windows\\\\System32\\\\nvwmi64.exe', 'C:\\\\Windows\\\\System32\\\\svchost.exe', 'C:\\\\Windows\\\\System32\\\\Taskmgr.exe', 'C:\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE.exe', 'C:\\\\Windows\\\\SysWOW64\\\\msiexec.exe'] | ProcessName.str.contains(r'C:\\\\Windows\\\\System32\\\\DriverStore\\\\', case=False) | ProcessName.str.contains(r'C:\\\\WINDOWS\\\\Installer\\\\', case=False) | ProcessName.str.contains(r'C:\\\\Program Files\\\\', case=False) | ProcessName.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "definition": "Requirements:Enabled Block credential stealing from the Windows local security authority subsystem (lsass.exe) from Attack Surface Reduction (GUID: 9e6c4e1f-7d60-472f-ba1a-a39ef669e4b2)",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_asr_lsass_access.yml"
        }
    },
    {
        "title": "Windows Defender Real-Time Protection Failure/Restart",
        "id": "dd80db93-6ec2-4f4c-a017-ad40da6ffe81",
        "status": "stable",
        "description": "Detects issues with Windows Defender Real-Time Protection features",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & (EventID==[3002, 3007]) & ~ (Feature_Name=='%%886' & (Reason==['%%892', '%%858']))"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_real_time_protection_errors.yml"
        }
    },
    {
        "title": "Windows Defender Malware Detection History Deletion",
        "id": "2afe6582-e149-11ea-87d0-0242ac130003",
        "status": "test",
        "description": "Windows Defender logs when the history of detected infections is deleted.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "informational",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & EventID==1013"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_history_delete.yml"
        }
    },
    {
        "title": "Windows Defender Submit Sample Feature Disabled",
        "id": "91903aba-1088-42ee-b680-d6d94fe002b0",
        "status": "stable",
        "description": "Detects disabling of the \"Automatic Sample Submission\" feature of Windows Defender.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & EventID==5007 & NewValue.str.contains(r'\\\\Real-Time Protection\\\\SubmitSamplesConsent = 0x0', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_config_change_sample_submission_consent.yml"
        }
    },
    {
        "title": "Windows Defender Configuration Changes",
        "id": "801bd44f-ceed-4eb6-887c-11544633c0aa",
        "status": "stable",
        "description": "Detects suspicious changes to the Windows Defender configuration",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & EventID==5007 & (NewValue.str.contains(r'\\\\Windows Defender\\\\DisableAntiSpyware ', case=False) | NewValue.str.contains(r'\\\\Windows Defender\\\\Scan\\\\DisableRemovableDriveScanning ', case=False) | NewValue.str.contains(r'\\\\Windows Defender\\\\Scan\\\\DisableScanningMappedNetworkDrivesForFullScan ', case=False) | NewValue.str.contains(r'\\\\Windows Defender\\\\SpyNet\\\\DisableBlockAtFirstSeen ', case=False) | NewValue.str.contains(r'\\\\Real-Time Protection\\\\SpyNetReporting ', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_suspicious_features_tampering.yml"
        }
    },
    {
        "title": "Windows Defender Virus Scanning Feature Disabled",
        "id": "686c0b4b-9dd3-4847-9077-d6c1bbe36fcb",
        "status": "stable",
        "description": "Detects disabling of the Windows Defender virus scanning feature",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & EventID==5012"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_virus_scan_disabled.yml"
        }
    },
    {
        "title": "Windows Defender Exclusions Added",
        "id": "1321dc4e-a1fe-481d-a016-52c45f0c8b4f",
        "status": "stable",
        "description": "Detects the Setting of Windows Defender Exclusions",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & EventID==5007 & NewValue.str.contains(r'\\\\Microsoft\\\\Windows Defender\\\\Exclusions', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_config_change_exclusion_added.yml"
        }
    },
    {
        "title": "Windows Defender Malware And PUA Scanning Disabled",
        "id": "bc275be9-0bec-4d77-8c8f-281a2df6710f",
        "status": "stable",
        "description": "Detects disabling of the Windows Defender feature of scanning for malware and other potentially unwanted software",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Windows Defender/Operational' & EventID==5010"
        ],
        "logsource": {
            "product": "windows",
            "service": "windefend",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/windefend/win_defender_malware_and_pua_scan_disabled.yml"
        }
    },
    {
        "title": "Query Tor Onion Address - DNS Client",
        "id": "8384bd26-bde6-4da9-8e5d-4174a7a47ca2",
        "status": "test",
        "description": "Detects DNS resolution of an .onion address related to Tor routing networks",
        "tags": [
            "attack.command-and-control",
            "attack.t1090.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-DNS Client Events/Operational' & EventID==3008 & QueryName.str.contains(r'.onion', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "dns-client",
            "definition": "Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/dns_client/win_dns_client_tor_onion.yml"
        }
    },
    {
        "title": "DNS Query To Put.io - DNS Client",
        "id": "8b69fd42-9dad-4674-abef-7fdef43ef92a",
        "status": "experimental",
        "description": "Detects DNS queries for subdomains related to \"Put.io\" sharing website.",
        "tags": [
            "attack.command-and-control"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-DNS Client Events/Operational' & EventID==3008 & (QueryName.str.contains(r'api.put.io', case=False) | QueryName.str.contains(r'upload.put.io', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "dns-client",
            "definition": "Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/dns_client/win_dns_client_put_io.yml"
        }
    },
    {
        "title": "DNS Query for Anonfiles.com Domain - DNS Client",
        "id": "29f171d7-aa47-42c7-9c7b-3c87938164d9",
        "status": "test",
        "description": "Detects DNS queries for anonfiles.com, which is an anonymous file upload platform often used for malicious purposes",
        "tags": [
            "attack.exfiltration",
            "attack.t1567.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-DNS Client Events/Operational' & EventID==3008 & QueryName.str.contains(r'.anonfiles.com', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "dns-client",
            "definition": "Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/dns_client/win_dns_client_anonymfiles_com.yml"
        }
    },
    {
        "title": "Suspicious Cobalt Strike DNS Beaconing - DNS Client",
        "id": "0d18728b-f5bf-4381-9dcf-915539fff6c2",
        "status": "test",
        "description": "Detects a program that invoked suspicious DNS queries known from Cobalt Strike beacons",
        "tags": [
            "attack.command-and-control",
            "attack.t1071.004"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-DNS Client Events/Operational' & EventID==3008 & (QueryName.str.contains(r'aaa.stage.', case=False) | QueryName.str.contains(r'post.1', case=False) | QueryName.str.contains(r'.stage.123456.', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "dns-client",
            "definition": "Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/dns_client/win_dns_client__mal_cobaltstrike.yml"
        }
    },
    {
        "title": "DNS Query To Ufile.io - DNS Client",
        "id": "090ffaad-c01a-4879-850c-6d57da98452d",
        "status": "test",
        "description": "Detects DNS queries to \"ufile.io\", which was seen abused by malware and threat actors as a method for data exfiltration",
        "tags": [
            "attack.exfiltration",
            "attack.t1567.002"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-DNS Client Events/Operational' & EventID==3008 & QueryName.str.contains(r'ufile.io', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "dns-client",
            "definition": "Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/dns_client/win_dns_client_ufile_io.yml"
        }
    },
    {
        "title": "DNS Query To MEGA Hosting Website - DNS Client",
        "id": "66474410-b883-415f-9f8d-75345a0a66a6",
        "status": "test",
        "description": "Detects DNS queries for subdomains related to MEGA sharing website",
        "tags": [
            "attack.exfiltration",
            "attack.t1567.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-DNS Client Events/Operational' & EventID==3008 & QueryName.str.contains(r'userstorage.mega.co.nz', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "dns-client",
            "definition": "Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/dns_client/win_dns_client_mega_nz.yml"
        }
    },
    {
        "title": "USB Device Plugged",
        "id": "1a4bd6e3-4c6e-405d-a9a3-53a116e341d4",
        "status": "test",
        "description": "Detects plugged/unplugged USB devices",
        "tags": [
            "attack.initial-access",
            "attack.t1200"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-DriverFrameworks-UserMode/Operational' & (EventID==[2003, 2100, 2102])"
        ],
        "logsource": {
            "product": "windows",
            "service": "driver-framework",
            "definition": "Requires enabling and collection of the Microsoft-Windows-DriverFrameworks-UserMode/Operational eventlog",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/driverframeworks/win_usb_device_plugged.yml"
        }
    },
    {
        "title": "Deployment AppX Package Was Blocked By AppLocker",
        "id": "6ae53108-c3a0-4bee-8f45-c7591a2c337f",
        "status": "test",
        "description": "Detects an appx package deployment that was blocked by AppLocker policy",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-AppXDeploymentServer/Operational' & EventID==412"
        ],
        "logsource": {
            "product": "windows",
            "service": "appxdeployment-server",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_applocker_block.yml"
        }
    },
    {
        "title": "Suspicious AppX Package Locations",
        "id": "5cdeaf3d-1489-477c-95ab-c318559fc051",
        "status": "test",
        "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in suspicious locations",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-AppXDeploymentServer/Operational' & EventID==854 & (Path.str.contains(r'C:\\\\Users\\\\Public\\\\', case=False) | Path.str.contains(r'/users/public/', case=False) | Path.str.contains(r'C:\\\\PerfLogs\\\\', case=False) | Path.str.contains(r'C:/perflogs/', case=False) | Path.str.contains(r'\\\\Desktop\\\\', case=False) | Path.str.contains(r'/desktop/', case=False) | Path.str.contains(r'\\\\Downloads\\\\', case=False) | Path.str.contains(r'/Downloads/', case=False) | Path.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False) | Path.str.contains(r'C:/Windows/Temp/', case=False) | Path.str.contains(r'\\\\AppdData\\\\Local\\\\Temp\\\\', case=False) | Path.str.contains(r'/AppdData/Local/Temp/', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "appxdeployment-server",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_susp_package_locations.yml"
        }
    },
    {
        "title": "Deployment Of The AppX Package Was Blocked By The Policy",
        "id": "e021bbb5-407f-41f5-9dc9-1864c45a7a51",
        "status": "test",
        "description": "Detects an appx package deployment that was blocked by the local computer policy",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-AppXDeploymentServer/Operational' & (EventID==[441, 442, 453, 454])"
        ],
        "logsource": {
            "product": "windows",
            "service": "appxdeployment-server",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_policy_block.yml"
        }
    },
    {
        "title": "Suspicious Remote AppX Package Locations",
        "id": "8b48ad89-10d8-4382-a546-50588c410f0d",
        "status": "experimental",
        "description": "Detects an appx package added to the pipeline of the \"to be processed\" packages which was downloaded from a suspicious domain.\n",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-AppXDeploymentServer/Operational' & EventID==854 & (Path.str.contains(r'.githubusercontent.com', case=False) | Path.str.contains(r'anonfiles.com', case=False) | Path.str.contains(r'cdn.discordapp.com', case=False) | Path.str.contains(r'ddns.net', case=False) | Path.str.contains(r'dl.dropboxusercontent.com', case=False) | Path.str.contains(r'ghostbin.co', case=False) | Path.str.contains(r'glitch.me', case=False) | Path.str.contains(r'gofile.io', case=False) | Path.str.contains(r'hastebin.com', case=False) | Path.str.contains(r'mediafire.com', case=False) | Path.str.contains(r'mega.nz', case=False) | Path.str.contains(r'onrender.com', case=False) | Path.str.contains(r'pages.dev', case=False) | Path.str.contains(r'paste.ee', case=False) | Path.str.contains(r'pastebin.com', case=False) | Path.str.contains(r'pastebin.pl', case=False) | Path.str.contains(r'pastetext.net', case=False) | Path.str.contains(r'privatlab.com', case=False) | Path.str.contains(r'privatlab.net', case=False) | Path.str.contains(r'send.exploit.in', case=False) | Path.str.contains(r'sendspace.com', case=False) | Path.str.contains(r'storage.googleapis.com', case=False) | Path.str.contains(r'storjshare.io', case=False) | Path.str.contains(r'supabase.co', case=False) | Path.str.contains(r'temp.sh', case=False) | Path.str.contains(r'transfer.sh', case=False) | Path.str.contains(r'trycloudflare.com', case=False) | Path.str.contains(r'ufile.io', case=False) | Path.str.contains(r'w3spaces.com', case=False) | Path.str.contains(r'workers.dev', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "appxdeployment-server",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_susp_domains.yml"
        }
    },
    {
        "title": "Uncommon AppX Package Locations",
        "id": "c977cb50-3dff-4a9f-b873-9290f56132f1",
        "status": "test",
        "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in uncommon locations",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-AppXDeploymentServer/Operational' & EventID==854 & ~ (Path.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\', case=False) | Path.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | Path.str.contains(r'C:\\\\Windows\\\\SystemApps\\\\', case=False) | Path.str.contains(r'C:\\\\Windows\\\\PrintDialog\\\\', case=False) | Path.str.contains(r'C:\\\\Windows\\\\ImmersiveControlPanel\\\\', case=False) | Path.str.contains(r'x-windowsupdate://', case=False) | Path.str.contains(r'file:///C:/Program%20Files', case=False) | Path.str.contains(r'https://statics.teams.cdn.live.net/', case=False) | Path.str.contains(r'https://statics.teams.cdn.office.net/', case=False) | Path.str.contains(r'microsoft.com', case=False) | Path.str.contains(r'https://installer.teams.static.microsoft/', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "appxdeployment-server",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_uncommon_package_locations.yml"
        }
    },
    {
        "title": "Potential Malicious AppX Package Installation Attempts",
        "id": "09d3b48b-be17-47f5-bf4e-94e7e75d09ce",
        "status": "test",
        "description": "Detects potential installation or installation attempts of known malicious appx packages",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-AppXDeploymentServer/Operational' & (EventID==[400, 401]) & PackageFullName.str.contains(r'3669e262-ec02-4e9d-bcb4-3d008b4afac9', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "appxdeployment-server",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_mal_appx_names.yml"
        }
    },
    {
        "title": "Suspicious AppX Package Installation Attempt",
        "id": "898d5fc9-fbc3-43de-93ad-38e97237c344",
        "status": "test",
        "description": "Detects an appx package installation with the error code \"0x80073cff\" which indicates that the package didn't meet the signing requirements and could be suspicious",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-AppXDeploymentServer/Operational' & EventID==401 & ErrorCode=='0x80073cff'"
        ],
        "logsource": {
            "product": "windows",
            "service": "appxdeployment-server",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_susp_appx_package_installation.yml"
        }
    },
    {
        "title": "Standard User In High Privileged Group",
        "id": "7ac407cc-0f48-4328-aede-de1d2e6fef41",
        "status": "test",
        "description": "Detect standard users login that are part of high privileged groups such as the Administrator group",
        "tags": [
            "attack.credential-access",
            "attack.privilege-escalation"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-LSA/Operational' & EventID==300 & TargetUserSid.str.contains(r'S-1-5-21-', case=False) & (SidList.str.contains(r'S-1-5-32-544', case=False) | SidList.str.contains(r'-500}', case=False) | SidList.str.contains(r'-518}', case=False) | SidList.str.contains(r'-519}', case=False)) & ~ (TargetUserSid.str.contains(r'-500', case=False) | TargetUserSid.str.contains(r'-518', case=False) | TargetUserSid.str.contains(r'-519', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "lsa-server",
            "definition": "Requirements: Microsoft-Windows-LSA/Operational (199FE037-2B82-40A9-82AC-E1D46C792B99) Event Log must be enabled and collected in order to use this rule.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/lsa_server/win_lsa_server_normal_user_admin.yml"
        }
    },
    {
        "title": "CodeIntegrity - Blocked Driver Load With Revoked Certificate",
        "id": "9b72b82d-f1c5-4632-b589-187159bc6ec1",
        "status": "test",
        "description": "Detects blocked load attempts of revoked drivers",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-CodeIntegrity/Operational' & EventID==3023"
        ],
        "logsource": {
            "product": "windows",
            "service": "codeintegrity-operational",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/code_integrity/win_codeintegrity_revoked_driver_blocked.yml"
        }
    },
    {
        "title": "CodeIntegrity - Disallowed File For Protected Processes Has Been Blocked",
        "id": "5daf11c3-022b-4969-adb9-365e6c078c7c",
        "status": "test",
        "description": "Detects block events for files that are disallowed by code integrity for protected processes",
        "tags": [
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-CodeIntegrity/Operational' & EventID==3104"
        ],
        "logsource": {
            "product": "windows",
            "service": "codeintegrity-operational",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/code_integrity/win_codeintegrity_blocked_protected_process_file.yml"
        }
    },
    {
        "title": "CodeIntegrity - Blocked Image Load With Revoked Certificate",
        "id": "6f156c48-3894-4952-baf0-16193e9067d2",
        "status": "test",
        "description": "Detects blocked image load events with revoked certificates by code integrity.",
        "tags": [
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-CodeIntegrity/Operational' & EventID==3036"
        ],
        "logsource": {
            "product": "windows",
            "service": "codeintegrity-operational",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/code_integrity/win_codeintegrity_revoked_image_blocked.yml"
        }
    },
    {
        "title": "CodeIntegrity - Unmet Signing Level Requirements By File Under Validation",
        "id": "f8931561-97f5-4c46-907f-0a4a592e47a7",
        "status": "experimental",
        "description": "Detects attempted file load events that did not meet the signing level requirements. It often means the file's signature is revoked or a signature with the Lifetime Signing EKU has expired.\nThis event is best correlated with EID 3089 to determine the error of the validation.\n",
        "tags": [
            "attack.execution"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-CodeIntegrity/Operational' & (EventID==[3033, 3034]) & ~ (FileNameBuffer.str.contains(r'\\\\Windows\\\\assembly\\\\GAC\\\\', case=False) & ProcessNameBuffer.str.contains(r'\\\\mscorsvw.exe', case=False) & ProcessNameBuffer.str.contains(r'\\\\Windows\\\\Microsoft.NET\\\\', case=False) & RequestedPolicy==8) & ~ (FileNameBuffer.str.contains(r'\\\\Program Files\\\\DTrace\\\\dtrace.dll', case=False) & ProcessNameBuffer.str.contains(r'\\\\Windows\\\\System32\\\\svchost.exe', case=False) & RequestedPolicy==12 | FileNameBuffer.str.contains(r'\\\\Windows\\\\System32\\\\DriverStore\\\\FileRepository\\\\', case=False) & FileNameBuffer.str.contains(r'\\\\igd10iumd64.dll', case=False) & RequestedPolicy==7 | FileNameBuffer.str.contains(r'\\\\Windows\\\\System32\\\\nvspcap64.dll', case=False) & (ProcessNameBuffer.str.contains(r'\\\\AppData\\\\Local\\\\Keybase\\\\Gui\\\\Keybase.exe', case=False) | ProcessNameBuffer.str.contains(r'\\\\Microsoft\\\\Teams\\\\stage\\\\Teams.exe', case=False)) & RequestedPolicy==8 | FileNameBuffer.str.contains(r'\\\\Program Files\\\\Bonjour\\\\mdnsNSP.dll', case=False) & (ProcessNameBuffer.str.contains(r'\\\\Windows\\\\System32\\\\svchost.exe', case=False) | ProcessNameBuffer.str.contains(r'\\\\Windows\\\\System32\\\\SIHClient.exe', case=False)) & (RequestedPolicy==[8, 12]) | FileNameBuffer.str.contains(r'\\\\Microsoft Office\\\\root\\\\vfs\\\\ProgramFilesCommonX64\\\\Microsoft Shared\\\\OFFICE', case=False) & FileNameBuffer.str.contains(r'\\\\MSOXMLMF.DLL', case=False) & RequestedPolicy==7 | FileNameBuffer.str.contains(r'\\\\Windows\\\\System32\\\\nvspcap64.dll', case=False) & ProcessNameBuffer.str.contains(r'\\\\AppData\\\\Local\\\\slack\\\\app-', case=False) & ProcessNameBuffer.str.contains(r'\\\\slack.exe', case=False) & RequestedPolicy==8 | (FileNameBuffer.str.contains(r'\\\\Mozilla Firefox\\\\mozavcodec.dll', case=False) | FileNameBuffer.str.contains(r'\\\\Mozilla Firefox\\\\mozavutil.dll', case=False)) & ProcessNameBuffer.str.contains(r'\\\\Mozilla Firefox\\\\firefox.exe', case=False) & RequestedPolicy==8 | (FileNameBuffer.str.contains(r'\\\\Program Files\\\\Avast Software\\\\Avast\\\\aswAMSI.dll', case=False) | FileNameBuffer.str.contains(r'\\\\Program Files (x86)\\\\Avast Software\\\\Avast\\\\aswAMSI.dll', case=False)) & (RequestedPolicy==[8, 12]) | FileNameBuffer.str.contains(r'\\\\Program Files\\\\Google\\\\Drive File Stream\\\\', case=False) & FileNameBuffer.str.contains(r'\\\\crashpad_handler.exe', case=False) & ProcessNameBuffer.str.contains(r'\\\\Windows\\\\ImmersiveControlPanel\\\\SystemSettings.exe', case=False) & RequestedPolicy==8 | FileNameBuffer.str.contains(r'\\\\Trend Micro\\\\Client Server Security Agent\\\\perficrcperfmonmgr.dll', case=False) & RequestedPolicy==8 | FileNameBuffer.str.contains(r'\\\\Program Files\\\\National Instruments\\\\Shared\\\\mDNS Responder\\\\nimdnsNSP.dll ', case=False) | FileNameBuffer.str.contains(r'\\\\Program Files\\\\McAfee\\\\Endpoint Security\\\\Threat Prevention\\\\MfeAmsiProvider.dll', case=False) | FileNameBuffer.str.contains(r'\\\\Program Files\\\\McAfee\\\\MfeAV\\\\AMSIExt.dll', case=False) | FileNameBuffer.str.contains(r'\\\\Program Files\\\\ESET\\\\ESET Security\\\\eamsi.dll', case=False) | FileNameBuffer.str.contains(r'\\\\Program Files\\\\comodo\\\\comodo internet security\\\\amsiprovider_x64.dll', case=False) | FileNameBuffer.str.contains(r'\\\\Program Files\\\\SentinelOne\\\\Sentinel Agent', case=False) | ProcessNameBuffer.str.contains(r'\\\\Program Files\\\\SentinelOne\\\\Sentinel Agent', case=False) | FileNameBuffer.str.contains(r'\\\\National Instruments\\\\Shared\\\\mDNS Responder\\\\', case=False) | ProcessNameBuffer.str.contains(r'\\\\Kaspersky Lab\\\\', case=False) & ProcessNameBuffer.str.contains(r'\\\\avp.exe', case=False) | FileNameBuffer.str.contains(r'\\\\Kaspersky Lab\\\\', case=False) & FileNameBuffer.str.contains(r'\\\\antimalware_provider.dll', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "codeintegrity-operational",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/code_integrity/win_codeintegrity_attempted_dll_load.yml"
        }
    },
    {
        "title": "CodeIntegrity - Unsigned Image Loaded",
        "id": "c92c24e7-f595-493f-9c98-53d5142f5c18",
        "status": "test",
        "description": "Detects loaded unsigned image on the system",
        "tags": [
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-CodeIntegrity/Operational' & EventID==3037"
        ],
        "logsource": {
            "product": "windows",
            "service": "codeintegrity-operational",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/code_integrity/win_codeintegrity_unsigned_image_loaded.yml"
        }
    },
    {
        "title": "CodeIntegrity - Revoked Image Loaded",
        "id": "881b7725-47cc-4055-8000-425823344c59",
        "status": "test",
        "description": "Detects image load events with revoked certificates by code integrity.",
        "tags": [
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-CodeIntegrity/Operational' & (EventID==[3032, 3035])"
        ],
        "logsource": {
            "product": "windows",
            "service": "codeintegrity-operational",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/code_integrity/win_codeintegrity_revoked_image_loaded.yml"
        }
    },
    {
        "title": "CodeIntegrity - Revoked Kernel Driver Loaded",
        "id": "320fccbf-5e32-4101-82b8-2679c5f007c6",
        "status": "test",
        "description": "Detects the load of a revoked kernel driver",
        "tags": [
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-CodeIntegrity/Operational' & (EventID==[3021, 3022])"
        ],
        "logsource": {
            "product": "windows",
            "service": "codeintegrity-operational",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/code_integrity/win_codeintegrity_revoked_driver_loaded.yml"
        }
    },
    {
        "title": "CodeIntegrity - Unmet WHQL Requirements For Loaded Kernel Module",
        "id": "2f8cd7a0-9d5a-4f62-9f8b-2c951aa0dd1f",
        "status": "test",
        "description": "Detects loaded kernel modules that did not meet the WHQL signing requirements.",
        "tags": [
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-CodeIntegrity/Operational' & (EventID==[3082, 3083]) & ~ (FileNameBuffer==['system32\\\\drivers\\\\vsock.sys', 'System32\\\\drivers\\\\vmci.sys'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "codeintegrity-operational",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/code_integrity/win_codeintegrity_whql_failure.yml"
        }
    },
    {
        "title": "CodeIntegrity - Unsigned Kernel Module Loaded",
        "id": "951f8d29-f2f6-48a7-859f-0673ff105e6f",
        "status": "test",
        "description": "Detects the presence of a loaded unsigned kernel module on the system.",
        "tags": [
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-CodeIntegrity/Operational' & EventID==3001"
        ],
        "logsource": {
            "product": "windows",
            "service": "codeintegrity-operational",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/code_integrity/win_codeintegrity_unsigned_driver_loaded.yml"
        }
    },
    {
        "title": "CodeIntegrity - Blocked Image/Driver Load For Policy Violation",
        "id": "e4be5675-4a53-426a-8c81-a8bb2387e947",
        "status": "test",
        "description": "Detects blocked load events that did not meet the authenticode signing level requirements or violated the code integrity policy.",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-CodeIntegrity/Operational' & EventID==3077"
        ],
        "logsource": {
            "product": "windows",
            "service": "codeintegrity-operational",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/code_integrity/win_codeintegrity_enforced_policy_block.yml"
        }
    },
    {
        "title": "Loading Diagcab Package From Remote Path",
        "id": "50cb47b8-2c33-4b23-a2e9-4600657d9746",
        "status": "test",
        "description": "Detects loading of diagcab packages from a remote path, as seen in DogWalk vulnerability",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Diagnosis-Scripted/Operational' & EventID==101 & PackagePath.str.contains(r'\\\\\\\\', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "diagnosis-scripted",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/diagnosis/scripted/win_diagnosis_scripted_load_remote_diagcab.yml"
        }
    },
    {
        "title": "Microsoft Malware Protection Engine Crash",
        "id": "545a5da6-f103-4919-a519-e9aec1026ee4",
        "status": "test",
        "description": "This rule detects a suspicious crash of the Microsoft Malware Protection Engine",
        "tags": [
            "attack.defense-evasion",
            "attack.t1211",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Application' & Provider_Name=='Application Error' & EventID==1000 & Data.str.contains(r'MsMpEng.exe', case=False) & Data.str.contains(r'mpengine.dll', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/application_error/win_application_msmpeng_crash_error.yml"
        }
    },
    {
        "title": "Potential Credential Dumping Via WER - Application",
        "id": "a18e0862-127b-43ca-be12-1a542c75c7c5",
        "status": "test",
        "description": "Detects Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credential",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Application' & Provider_Name=='Application Error' & EventID==1000 & AppName=='lsass.exe' & ExceptionCode=='c0000001'"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/application_error/win_werfault_susp_lsass_credential_dump.yml"
        }
    },
    {
        "title": "Audit CVE Event",
        "id": "48d91a3a-2363-43ba-a456-ca71ac3da5c2",
        "status": "test",
        "description": "Detects events generated by user-mode applications when they call the CveEventWrite API when a known vulnerability is trying to be exploited.\nMS started using this log in Jan. 2020 with CVE-2020-0601 (a Windows CryptoAPI vulnerability.\nUnfortunately, that is about the only instance of CVEs being written to this log.\n",
        "tags": [
            "attack.execution",
            "attack.t1203",
            "attack.privilege-escalation",
            "attack.t1068",
            "attack.defense-evasion",
            "attack.t1211",
            "attack.credential-access",
            "attack.t1212",
            "attack.lateral-movement",
            "attack.t1210",
            "attack.impact",
            "attack.t1499.004"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Application' & (Provider_Name==['Microsoft-Windows-Audit-CVE', 'Audit-CVE']) & EventID==1"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/microsoft-windows_audit_cve/win_audit_cve.yml"
        }
    },
    {
        "title": "Relevant Anti-Virus Signature Keywords In Application Log",
        "id": "78bc5783-81d9-4d73-ac97-59f6db4f72a8",
        "status": "test",
        "description": "Detects potentially highly relevant antivirus events in the application log based on known virus signature names and malware keywords.\n",
        "tags": [
            "attack.resource-development",
            "attack.t1588"
        ],
        "level": "high",
        "rule": [
            "Channel=='Application' & (\"'Adfind'\" | \"'ASP/BackDoor '\" | \"'ATK/'\" | \"'Backdoor.ASP'\" | \"'Backdoor.Cobalt'\" | \"'Backdoor.JSP'\" | \"'Backdoor.PHP'\" | \"'Blackworm'\" | \"'Brutel'\" | \"'BruteR'\" | \"'Chopper'\" | \"'Cobalt'\" | \"'COBEACON'\" | \"'Cometer'\" | \"'CRYPTES'\" | \"'Cryptor'\" | \"'Destructor'\" | \"'DumpCreds'\" | \"'Exploit.Script.CVE'\" | \"'FastReverseProxy'\" | \"'Filecoder'\" | \"'GrandCrab '\" | \"'HackTool'\" | \"'HKTL'\" | \"'HTool-'\" | \"'/HTool'\" | \"'.HTool'\" | \"'IISExchgSpawnCMD'\" | \"'Impacket'\" | \"'JSP/BackDoor '\" | \"'Keylogger'\" | \"'Koadic'\" | \"'Krypt'\" | \"'Lazagne'\" | \"'Metasploit'\" | \"'Meterpreter'\" | \"'MeteTool'\" | \"'mikatz'\" | \"'Mimikatz'\" | \"'Mpreter'\" | \"'MsfShell'\" | \"'Nighthawk'\" | \"'Packed.Generic.347'\" | \"'PentestPowerShell'\" | \"'Phobos'\" | \"'PHP/BackDoor '\" | \"'Potato'\" | \"'PowerSploit'\" | \"'PowerSSH'\" | \"'PshlSpy'\" | \"'PSWTool'\" | \"'PWCrack'\" | \"'PWDump'\" | \"'Ransom'\" | \"'Rozena'\" | \"'Ryzerlo'\" | \"'Sbelt'\" | \"'Seatbelt'\" | \"'SecurityTool '\" | \"'SharpDump'\" | \"'Shellcode'\" | \"'Sliver'\" | \"'Splinter'\" | \"'Swrort'\" | \"'Tescrypt'\" | \"'TeslaCrypt'\" | \"'TurtleLoader'\" | \"'Valyria'\" | \"'Webshell'\") & ~ (\"'anti_ransomware_service.exe'\" | \"'Anti-Ransomware'\" | \"'Crack'\" | \"'cyber-protect-service.exe'\" | \"'encryptor'\" | \"'Keygen'\" | Level==4 | Provider_Name=='Microsoft-Windows-RestartManager')"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/Other/win_av_relevant_match.yml"
        }
    },
    {
        "title": "Restricted Software Access By SRP",
        "id": "b4c8da4a-1c12-46b0-8a2b-0a8521d03442",
        "status": "test",
        "description": "Detects restricted access to applications by the Software Restriction Policies (SRP) policy",
        "tags": [
            "attack.defense-evasion",
            "attack.t1072"
        ],
        "level": "high",
        "rule": [
            "Channel=='Application' & Provider_Name=='Microsoft-Windows-SoftwareRestrictionPolicies' & (EventID==[865, 866, 867, 868, 882])"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/microsoft_windows_software_restriction_policies/win_software_restriction_policies_block.yml"
        }
    },
    {
        "title": "Atera Agent Installation",
        "id": "87261fb2-69d0-42fe-b9de-88c6b5f65a43",
        "status": "test",
        "description": "Detects successful installation of Atera Remote Monitoring & Management (RMM) agent as recently found to be used by Conti operators",
        "tags": [
            "attack.t1219"
        ],
        "level": "high",
        "rule": [
            "Channel=='Application' & EventID==1033 & Provider_Name=='MsiInstaller' & Message.str.contains(r'AteraAgent', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/msiinstaller/win_software_atera_rmm_agent_install.yml"
        }
    },
    {
        "title": "Application Uninstalled",
        "id": "570ae5ec-33dc-427c-b815-db86228ad43e",
        "status": "test",
        "description": "An application has been removed. Check if it is critical.",
        "tags": [
            "attack.impact",
            "attack.t1489"
        ],
        "level": "low",
        "rule": [
            "Channel=='Application' & Provider_Name=='MsiInstaller' & (EventID==[1034, 11724])"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/msiinstaller/win_builtin_remove_application.yml"
        }
    },
    {
        "title": "MSI Installation From Suspicious Locations",
        "id": "c7c8aa1c-5aff-408e-828b-998e3620b341",
        "status": "test",
        "description": "Detects MSI package installation from suspicious locations",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Application' & Provider_Name=='MsiInstaller' & (EventID==[1040, 1042]) & (Data.str.contains(r':\\\\Windows\\\\TEMP\\\\', case=False) | Data.str.contains(r'\\\\\\\\', case=False) | Data.str.contains(r'\\\\Desktop\\\\', case=False) | Data.str.contains(r'\\\\PerfLogs\\\\', case=False) | Data.str.contains(r'\\\\Users\\\\Public\\\\', case=False)) & ~ (Data.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\WinGet\\\\', case=False) | Data.str.contains(r'C:\\\\Windows\\\\TEMP\\\\UpdHealthTools.msi', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/msiinstaller/win_msi_install_from_susp_locations.yml"
        }
    },
    {
        "title": "MSI Installation From Web",
        "id": "5594e67a-7f92-4a04-b65d-1a42fd824a60",
        "status": "test",
        "description": "Detects installation of a remote msi file from web.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.t1218.007"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Application' & Provider_Name=='MsiInstaller' & (EventID==[1040, 1042]) & Data.str.contains(r'://', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/msiinstaller/win_msi_install_from_web.yml"
        }
    },
    {
        "title": "MSSQL XPCmdshell Option Change",
        "id": "d08dd86f-681e-4a00-a92c-1db218754417",
        "status": "test",
        "description": "Detects when the MSSQL \"xp_cmdshell\" stored procedure setting is changed.\n",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Application' & Provider_Name.str.contains(r'MSSQL', case=False) & EventID==15457 & Data.str.contains(r'xp_cmdshell', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/mssqlserver/win_mssql_xp_cmdshell_change.yml"
        }
    },
    {
        "title": "MSSQL Disable Audit Settings",
        "id": "350dfb37-3706-4cdc-9e2e-5e24bc3a46df",
        "status": "test",
        "description": "Detects when an attacker calls the \"ALTER SERVER AUDIT\" or \"DROP SERVER AUDIT\" transaction in order to delete or disable audit logs on the server",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Application' & Provider_Name.str.contains(r'MSSQL', case=False) & EventID==33205 & (Data.str.contains(r'statement:ALTER SERVER AUDIT', case=False) | Data.str.contains(r'statement:DROP SERVER AUDIT', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "definition": "Requirements: MSSQL audit policy must be enabled in order to receive this event in the application log",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/mssqlserver/win_mssql_disable_audit_settings.yml"
        }
    },
    {
        "title": "MSSQL Add Account To Sysadmin Role",
        "id": "08200f85-2678-463e-9c32-88dce2f073d1",
        "status": "test",
        "description": "Detects when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role",
        "tags": [
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Application' & Provider_Name.str.contains(r'MSSQL', case=False) & EventID==33205 & Data.str.contains(r'object_name:sysadmin', case=False) & Data.str.contains(r'statement:alter server role [sysadmin] add member ', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "definition": "Requirements: MSSQL audit policy must be enabled in order to receive this event in the application log",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/mssqlserver/win_mssql_add_sysadmin_account.yml"
        }
    },
    {
        "title": "MSSQL Server Failed Logon",
        "id": "218d2855-2bba-4f61-9c85-81d0ea63ac71",
        "status": "experimental",
        "description": "Detects failed logon attempts from clients to MSSQL server.",
        "tags": [
            "attack.credential-access",
            "attack.t1110"
        ],
        "level": "low",
        "rule": [
            "Channel=='Application' & Provider_Name.str.contains(r'MSSQL', case=False) & EventID==18456"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "definition": "Requirements: Must enable MSSQL authentication.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/mssqlserver/win_mssql_failed_logon.yml"
        }
    },
    {
        "title": "MSSQL Server Failed Logon From External Network",
        "id": "ebfe73c2-5bc9-4ed9-aaa8-8b54b2b4777d",
        "status": "experimental",
        "description": "Detects failed logon attempts from clients with external network IP to an MSSQL server. This can be a sign of a bruteforce attack.",
        "tags": [
            "attack.credential-access",
            "attack.t1110"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Application' & Provider_Name.str.contains(r'MSSQL', case=False) & EventID==18456 & ~ (Data.str.contains(r'CLIENT: 10.', case=False) | Data.str.contains(r'CLIENT: 172.16.', case=False) | Data.str.contains(r'CLIENT: 172.17.', case=False) | Data.str.contains(r'CLIENT: 172.18.', case=False) | Data.str.contains(r'CLIENT: 172.19.', case=False) | Data.str.contains(r'CLIENT: 172.20.', case=False) | Data.str.contains(r'CLIENT: 172.21.', case=False) | Data.str.contains(r'CLIENT: 172.22.', case=False) | Data.str.contains(r'CLIENT: 172.23.', case=False) | Data.str.contains(r'CLIENT: 172.24.', case=False) | Data.str.contains(r'CLIENT: 172.25.', case=False) | Data.str.contains(r'CLIENT: 172.26.', case=False) | Data.str.contains(r'CLIENT: 172.27.', case=False) | Data.str.contains(r'CLIENT: 172.28.', case=False) | Data.str.contains(r'CLIENT: 172.29.', case=False) | Data.str.contains(r'CLIENT: 172.30.', case=False) | Data.str.contains(r'CLIENT: 172.31.', case=False) | Data.str.contains(r'CLIENT: 192.168.', case=False) | Data.str.contains(r'CLIENT: 127.', case=False) | Data.str.contains(r'CLIENT: 169.254.', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "definition": "Requirements: Must enable MSSQL authentication.",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/mssqlserver/win_mssql_failed_logon_from_external_network.yml"
        }
    },
    {
        "title": "MSSQL SPProcoption Set",
        "id": "b3d57a5c-c92e-4b48-9a79-5f124b7cf964",
        "status": "test",
        "description": "Detects when the a stored procedure is set or cleared for automatic execution in MSSQL. A stored procedure that is set to automatic execution runs every time an instance of SQL Server is started",
        "tags": [
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Application' & Provider_Name.str.contains(r'MSSQL', case=False) & EventID==33205 & Data.str.contains(r'object_name:sp_procoption', case=False) & Data.str.contains(r'statement:EXEC', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "definition": "Requirements: MSSQL audit policy to monitor for \"sp_procoption\" must be enabled in order to receive this event in the application log",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/mssqlserver/win_mssql_sp_procoption_set.yml"
        }
    },
    {
        "title": "MSSQL XPCmdshell Suspicious Execution",
        "id": "7f103213-a04e-4d59-8261-213dddf22314",
        "status": "test",
        "description": "Detects when the MSSQL \"xp_cmdshell\" stored procedure is used to execute commands",
        "tags": [
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Application' & Provider_Name.str.contains(r'MSSQL', case=False) & EventID==33205 & Data.str.contains(r'object_name:xp_cmdshell', case=False) & Data.str.contains(r'statement:EXEC', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "definition": "Requirements: MSSQL audit policy to monitor for \"xp_cmdshell\" must be enabled in order to receive this event in the application log (Follow this tutorial https://dba.stackexchange.com/questions/103183/is-there-any-way-to-monitor-execution-of-xp-cmdshell-in-sql-server-2012)",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/mssqlserver/win_mssql_xp_cmdshell_audit_log.yml"
        }
    },
    {
        "title": "Dump Ntds.dit To Suspicious Location",
        "id": "94dc4390-6b7c-4784-8ffc-335334404650",
        "status": "test",
        "description": "Detects potential abuse of ntdsutil to dump ntds.dit database to a suspicious location",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Application' & Provider_Name=='ESENT' & EventID==325 & Data.str.contains(r'ntds.dit', case=False) & (Data.str.contains(r':\\\\ntds.dit', case=False) | Data.str.contains(r'\\\\Appdata\\\\', case=False) | Data.str.contains(r'\\\\Desktop\\\\', case=False) | Data.str.contains(r'\\\\Downloads\\\\', case=False) | Data.str.contains(r'\\\\Perflogs\\\\', case=False) | Data.str.contains(r'\\\\Temp\\\\', case=False) | Data.str.contains(r'\\\\Users\\\\Public\\\\', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/esent/win_esent_ntdsutil_abuse_susp_location.yml"
        }
    },
    {
        "title": "Ntdsutil Abuse",
        "id": "e6e88853-5f20-4c4a-8d26-cd469fd8d31f",
        "status": "test",
        "description": "Detects potential abuse of ntdsutil to dump ntds.dit database",
        "tags": [
            "attack.credential-access",
            "attack.t1003.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Application' & Provider_Name=='ESENT' & (EventID==[216, 325, 326, 327]) & Data.str.contains(r'ntds.dit', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/esent/win_esent_ntdsutil_abuse.yml"
        }
    },
    {
        "title": "Backup Catalog Deleted",
        "id": "9703792d-fd9a-456d-a672-ff92efe4806a",
        "status": "test",
        "description": "Detects backup catalog deletions",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Application' & EventID==524 & Provider_Name=='Microsoft-Windows-Backup'"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/microsoft_windows_backup/win_susp_backup_delete.yml"
        }
    },
    {
        "title": "Remote Access Tool - ScreenConnect Command Execution",
        "id": "076ebe48-cc05-4d8f-9d41-89245cd93a14",
        "status": "test",
        "description": "Detects command execution via ScreenConnect RMM",
        "tags": [
            "attack.execution",
            "attack.t1059.003"
        ],
        "level": "low",
        "rule": [
            "Channel=='Application' & Provider_Name=='ScreenConnect' & EventID==200 & Data.str.contains(r'Executed command of length', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/screenconnect/win_app_remote_access_tools_screenconnect_command_exec.yml"
        }
    },
    {
        "title": "Remote Access Tool - ScreenConnect File Transfer",
        "id": "5d19eb78-5b5b-4ef2-a9f0-4bfa94d58a13",
        "status": "test",
        "description": "Detects file being transferred via ScreenConnect RMM",
        "tags": [
            "attack.execution",
            "attack.t1059.003"
        ],
        "level": "low",
        "rule": [
            "Channel=='Application' & Provider_Name=='ScreenConnect' & EventID==201 & Data.str.contains(r'Transferred files with action', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/screenconnect/win_app_remote_access_tools_screenconnect_file_transfer.yml"
        }
    },
    {
        "title": "Microsoft Malware Protection Engine Crash - WER",
        "id": "6c82cf5c-090d-4d57-9188-533577631108",
        "status": "test",
        "description": "This rule detects a suspicious crash of the Microsoft Malware Protection Engine",
        "tags": [
            "attack.defense-evasion",
            "attack.t1211",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Application' & Provider_Name=='Windows Error Reporting' & EventID==1001 & Data.str.contains(r'MsMpEng.exe', case=False) & Data.str.contains(r'mpengine.dll', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/application/windows_error_reporting/win_application_msmpeng_crash_wer.yml"
        }
    },
    {
        "title": "Suspicious Rejected SMB Guest Logon From IP",
        "id": "71886b70-d7b4-4dbf-acce-87d2ca135262",
        "status": "test",
        "description": "Detect Attempt PrintNightmare (CVE-2021-1675) Remote code execution in Windows Spooler Service",
        "tags": [
            "attack.credential-access",
            "attack.t1110.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-SmbClient/Security' & EventID==31017 & UserName=='' & ServerName.str.contains(r'\\\\1', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "smbclient-security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/smbclient/security/win_smbclient_security_susp_failed_guest_logon.yml"
        }
    },
    {
        "title": "Potential RDP Exploit CVE-2019-0708",
        "id": "aaa5b30d-f418-420b-83a0-299cb6024885",
        "status": "test",
        "description": "Detect suspicious error on protocol RDP, potential CVE-2019-0708",
        "tags": [
            "attack.lateral-movement",
            "attack.t1210",
            "car.2013-07-002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & (EventID==[56, 50]) & Provider_Name=='TermDD'"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/termdd/win_system_rdp_potential_cve_2019_0708.yml"
        }
    },
    {
        "title": "Potential CVE-2021-42287 Exploitation Attempt",
        "id": "e80a0fee-1a62-4419-b31e-0d0db6e6013a",
        "status": "test",
        "description": "The attacker creates a computer object using those permissions with a password known to her.\nAfter that she clears the attribute ServicePrincipalName on the computer object.\nBecause she created the object (CREATOR OWNER), she gets granted additional permissions and can do many changes to the object.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1558.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Microsoft-Windows-Directory-Services-SAM' & (EventID==[16990, 16991])"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_directory_services_sam/win_system_exploit_cve_2021_42287.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use MSHTA - System",
        "id": "7e9c7999-0f9b-4d4a-a6ed-af6d553d4af4",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ImagePath.str.contains(r'mshta', case=False) & ImagePath.str.contains(r'vbscript:createobject', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_use_mshta_services.yml"
        }
    },
    {
        "title": "Windows Defender Threat Detection Service Disabled",
        "id": "6c0a7755-6d31-44fa-80e1-133e57752680",
        "status": "stable",
        "description": "Detects when the \"Windows Defender Threat Protection\" service is disabled.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & EventID==7036 & Provider_Name=='Service Control Manager' & (param1==['Windows Defender Antivirus Service', 'Service antivirus Microsoft Defender']) & (param2==['stopped', 'arr\u00eat\u00e9'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_defender_disabled.yml"
        }
    },
    {
        "title": "Anydesk Remote Access Software Service Installation",
        "id": "530a6faa-ff3d-4022-b315-50828e77eef5",
        "status": "test",
        "description": "Detects the installation of the anydesk software service. Which could be an indication of anydesk abuse if you the software isn't already used.",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ServiceName.str.contains(r'AnyDesk', case=False) & ServiceName.str.contains(r'Service', case=False) | ImagePath.str.contains(r'AnyDesk', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_anydesk.yml"
        }
    },
    {
        "title": "Uncommon Service Installation Image Path",
        "id": "26481afe-db26-4228-b264-25a29fe6efc7",
        "status": "test",
        "description": "Detects uncommon service installation commands by looking at suspicious or uncommon image path values containing references to encoded powershell commands, temporary paths, etc.\n",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "car.2013-09-005",
            "attack.t1543.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'\\\\\\\\.\\\\pipe', case=False) | ImagePath.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | ImagePath.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | ImagePath.str.contains(r' -e', case=False) & (ImagePath.str.contains(r' aQBlAHgA', case=False) | ImagePath.str.contains(r' aWV4I', case=False) | ImagePath.str.contains(r' IAB', case=False) | ImagePath.str.contains(r' JAB', case=False) | ImagePath.str.contains(r' PAA', case=False) | ImagePath.str.contains(r' SQBFAFgA', case=False) | ImagePath.str.contains(r' SUVYI', case=False))) & ~ ImagePath.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Definition Updates\\\\', case=False) & ~ ImagePath.str.contains(r'C:\\\\WINDOWS\\\\TEMP\\\\thor10-remote\\\\thor64.exe', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_uncommon.yml"
        }
    },
    {
        "title": "CobaltStrike Service Installations - System",
        "id": "5a105d34-05fc-401e-8553-272b45c1522d",
        "status": "test",
        "description": "Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement",
        "tags": [
            "attack.execution",
            "attack.privilege-escalation",
            "attack.lateral-movement",
            "attack.t1021.002",
            "attack.t1543.003",
            "attack.t1569.002"
        ],
        "level": "critical",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'ADMIN$', case=False) & ImagePath.str.contains(r'.exe', case=False) | ImagePath.str.contains(r'%COMSPEC%', case=False) & ImagePath.str.contains(r'start', case=False) & ImagePath.str.contains(r'powershell', case=False) | ImagePath.str.contains(r'powershell -nop -w hidden -encodedcommand', case=False) | ImagePath.str.contains(r'SUVYIChOZXctT2JqZWN0IE5ldC5XZWJjbGllbnQpLkRvd25sb2FkU3RyaW5nKCdodHRwOi8vMTI3LjAuMC4xO', case=False) | ImagePath.str.contains(r'lFWCAoTmV3LU9iamVjdCBOZXQuV2ViY2xpZW50KS5Eb3dubG9hZFN0cmluZygnaHR0cDovLzEyNy4wLjAuMT', case=False) | ImagePath.str.contains(r'JRVggKE5ldy1PYmplY3QgTmV0LldlYmNsaWVudCkuRG93bmxvYWRTdHJpbmcoJ2h0dHA6Ly8xMjcuMC4wLjE6', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_cobaltstrike_service_installs.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation RUNDLL LAUNCHER - System",
        "id": "11b52f18-aaec-4d60-9143-5dd8cc4706b9",
        "status": "test",
        "description": "Detects Obfuscated Powershell via RUNDLL LAUNCHER",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ImagePath.str.contains(r'rundll32.exe', case=False) & ImagePath.str.contains(r'shell32.dll', case=False) & ImagePath.str.contains(r'shellexec_rundll', case=False) & ImagePath.str.contains(r'powershell', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_rundll_services.yml"
        }
    },
    {
        "title": "Remote Utilities Host Service Install",
        "id": "85cce894-dd8b-4427-a958-5cc47a4dc9b9",
        "status": "test",
        "description": "Detects Remote Utilities Host service installation on the target system.",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'\\\\rutserv.exe', case=False) & ImagePath.str.contains(r'-service', case=False) | ServiceName=='Remote Utilities - Host')"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_remote_utilities.yml"
        }
    },
    {
        "title": "RemCom Service Installation",
        "id": "9e36ed87-4986-482e-8e3b-5c23ffff11bf",
        "status": "test",
        "description": "Detects RemCom service installation and execution events",
        "tags": [
            "attack.execution",
            "attack.t1569.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ServiceName=='RemComSvc' | ImagePath.str.contains(r'\\\\RemComSvc.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_remcom.yml"
        }
    },
    {
        "title": "Service Installation in Suspicious Folder",
        "id": "5e993621-67d4-488a-b9ae-b420d08b96cb",
        "status": "test",
        "description": "Detects service installation in suspicious folder appdata",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "car.2013-09-005",
            "attack.t1543.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'\\\\AppData\\\\', case=False) | ImagePath.str.contains(r'\\\\\\\\127.0.0.1', case=False) | ImagePath.str.contains(r'\\\\\\\\localhost', case=False)) & ~ (ServiceName=='Zoom Sharing Service' & ImagePath.str.contains(r':\\\\Program Files\\\\Common Files\\\\Zoom\\\\Support\\\\CptService.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_susp_service_installation_folder.yml"
        }
    },
    {
        "title": "Mesh Agent Service Installation",
        "id": "e0d1ad53-c7eb-48ec-a87a-72393cc6cedc",
        "status": "test",
        "description": "Detects a Mesh Agent service installation. Mesh Agent is used to remotely manage computers",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'MeshAgent.exe', case=False) | ServiceName.str.contains(r'Mesh Agent', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_mesh_agent.yml"
        }
    },
    {
        "title": "PsExec Service Installation",
        "id": "42c575ea-e41e-41f1-b248-8093c3e82a28",
        "status": "test",
        "description": "Detects PsExec service installation and execution events",
        "tags": [
            "attack.execution",
            "attack.t1569.002",
            "attack.s0029"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ServiceName=='PSEXESVC' | ImagePath.str.contains(r'\\\\PSEXESVC.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_sysinternals_psexec.yml"
        }
    },
    {
        "title": "Sliver C2 Default Service Installation",
        "id": "31c51af6-e7aa-4da7-84d4-8f32cc580af2",
        "status": "test",
        "description": "Detects known malicious service installation that appear in cases in which a Sliver implants execute the PsExec commands",
        "tags": [
            "attack.execution",
            "attack.privilege-escalation",
            "attack.t1543.003",
            "attack.t1569.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'^[a-zA-Z]:\\\\\\\\windows\\\\\\\\temp\\\\\\\\[a-zA-Z0-9]{10}\\\\.exe') | ServiceName==['Sliver', 'Sliver implant'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_sliver.yml"
        }
    },
    {
        "title": "Suspicious Service Installation Script",
        "id": "70f00d10-60b2-4f34-b9a0-dc3df3fe762a",
        "status": "test",
        "description": "Detects suspicious service installation scripts",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "car.2013-09-005",
            "attack.t1543.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r' -c ', case=False) | ImagePath.str.contains(r' /c ', case=False) | ImagePath.str.contains(r' \u2013c ', case=False) | ImagePath.str.contains(r' \u2014c ', case=False) | ImagePath.str.contains(r' \u2015c ', case=False) | ImagePath.str.contains(r' -r ', case=False) | ImagePath.str.contains(r' /r ', case=False) | ImagePath.str.contains(r' \u2013r ', case=False) | ImagePath.str.contains(r' \u2014r ', case=False) | ImagePath.str.contains(r' \u2015r ', case=False) | ImagePath.str.contains(r' -k ', case=False) | ImagePath.str.contains(r' /k ', case=False) | ImagePath.str.contains(r' \u2013k ', case=False) | ImagePath.str.contains(r' \u2014k ', case=False) | ImagePath.str.contains(r' \u2015k ', case=False)) & (ImagePath.str.contains(r'cscript', case=False) | ImagePath.str.contains(r'mshta', case=False) | ImagePath.str.contains(r'powershell', case=False) | ImagePath.str.contains(r'pwsh', case=False) | ImagePath.str.contains(r'regsvr32', case=False) | ImagePath.str.contains(r'rundll32', case=False) | ImagePath.str.contains(r'wscript', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_susp_service_installation_script.yml"
        }
    },
    {
        "title": "ProcessHacker Privilege Elevation",
        "id": "c4ff1eac-84ad-44dd-a6fb-d56a92fc43a9",
        "status": "test",
        "description": "Detects a ProcessHacker tool that elevated privileges to a very high level",
        "tags": [
            "attack.execution",
            "attack.privilege-escalation",
            "attack.t1543.003",
            "attack.t1569.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ServiceName.str.contains(r'ProcessHacker', case=False) & AccountName=='LocalSystem'"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_pua_proceshacker.yml"
        }
    },
    {
        "title": "RTCore Suspicious Service Installation",
        "id": "91c49341-e2ef-40c0-ac45-49ec5c3fe26c",
        "status": "test",
        "description": "Detects the installation of RTCore service. Which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse",
        "tags": [
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ServiceName=='RTCore64'"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_susp_rtcore64_service_install.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation COMPRESS OBFUSCATION - System",
        "id": "175997c5-803c-4b08-8bb0-70b099f47595",
        "status": "test",
        "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ImagePath.str.contains(r'new-object', case=False) & ImagePath.str.contains(r'text.encoding]::ascii', case=False) & ImagePath.str.contains(r'readtoend', case=False) & (ImagePath.str.contains(r':system.io.compression.deflatestream', case=False) | ImagePath.str.contains(r'system.io.streamreader', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_compress_services.yml"
        }
    },
    {
        "title": "Meterpreter or Cobalt Strike Getsystem Service Installation - System",
        "id": "843544a7-56e0-4dcc-a44f-5cc266dd97d6",
        "status": "test",
        "description": "Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1134.001",
            "attack.t1134.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'/c', case=False) & ImagePath.str.contains(r'echo', case=False) & ImagePath.str.contains(r'\\\\pipe\\\\', case=False) & (ImagePath.str.contains(r'cmd', case=False) | ImagePath.str.contains(r'%COMSPEC%', case=False)) | ImagePath.str.contains(r'rundll32', case=False) & ImagePath.str.contains(r'.dll,a', case=False) & ImagePath.str.contains(r'/p:', case=False) | ImagePath.str.contains(r'\\\\\\\\127.0.0.1\\\\ADMIN$\\\\', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_meterpreter_or_cobaltstrike_getsystem_service_installation.yml"
        }
    },
    {
        "title": "Important Windows Service Terminated With Error",
        "id": "d6b5520d-3934-48b4-928c-2aa3f92d6963",
        "status": "test",
        "description": "Detects important or interesting Windows services that got terminated for whatever reason",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7023 & (param1.str.contains(r' Antivirus', case=False) | param1.str.contains(r' Firewall', case=False) | param1.str.contains(r'Application Guard', case=False) | param1.str.contains(r'BitLocker Drive Encryption Service', case=False) | param1.str.contains(r'Encrypting File System', case=False) | param1.str.contains(r'Microsoft Defender', case=False) | param1.str.contains(r'Threat Protection', case=False) | param1.str.contains(r'Windows Event Log', case=False) | Binary.str.contains(r'770069006e0064006500660065006e006400', case=False) | Binary.str.contains(r'4500760065006e0074004c006f006700', case=False) | Binary.str.contains(r'6d0070007300730076006300', case=False) | Binary.str.contains(r'530065006e0073006500', case=False) | Binary.str.contains(r'450046005300', case=False) | Binary.str.contains(r'420044004500530056004300', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_terminated_error_important.yml"
        }
    },
    {
        "title": "PowerShell Scripts Installed as Services",
        "id": "a2e5019d-a658-4c6a-92bf-7197b54e2cae",
        "status": "test",
        "description": "Detects powershell script installed as a Service",
        "tags": [
            "attack.execution",
            "attack.t1569.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'powershell', case=False) | ImagePath.str.contains(r'pwsh', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_powershell_script_installed_as_service.yml"
        }
    },
    {
        "title": "Credential Dumping Tools Service Execution - System",
        "id": "4976aa50-8f41-45c6-8b15-ab3fc10e79ed",
        "status": "test",
        "description": "Detects well-known credential dumping tools execution via service execution events",
        "tags": [
            "attack.credential-access",
            "attack.execution",
            "attack.t1003.001",
            "attack.t1003.002",
            "attack.t1003.004",
            "attack.t1003.005",
            "attack.t1003.006",
            "attack.t1569.002",
            "attack.s0005"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'cachedump', case=False) | ImagePath.str.contains(r'dumpsvc', case=False) | ImagePath.str.contains(r'fgexec', case=False) | ImagePath.str.contains(r'gsecdump', case=False) | ImagePath.str.contains(r'mimidrv', case=False) | ImagePath.str.contains(r'pwdump', case=False) | ImagePath.str.contains(r'servpw', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_mal_creddumper.yml"
        }
    },
    {
        "title": "Service Installation with Suspicious Folder Pattern",
        "id": "1b2ae822-6fe1-43ba-aa7c-d1a3b3d1d5f2",
        "status": "test",
        "description": "Detects service installation with suspicious folder patterns",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "car.2013-09-005",
            "attack.t1543.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'^[Cc]:\\\\\\\\[Pp]rogram[Dd]ata\\\\\\\\.{1,9}\\\\.exe') | ImagePath.str.contains(r'^[Cc]:\\\\\\\\.{1,9}\\\\.exe'))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_susp_service_installation_folder_pattern.yml"
        }
    },
    {
        "title": "Suspicious Service Installation",
        "id": "1d61f71d-59d2-479e-9562-4ff5f4ead16b",
        "status": "test",
        "description": "Detects suspicious service installation commands",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "car.2013-09-005",
            "attack.t1543.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r' -nop ', case=False) | ImagePath.str.contains(r' -sta ', case=False) | ImagePath.str.contains(r' -w hidden ', case=False) | ImagePath.str.contains(r':\\\\Temp\\\\', case=False) | ImagePath.str.contains(r'.downloadfile(', case=False) | ImagePath.str.contains(r'.downloadstring(', case=False) | ImagePath.str.contains(r'\\\\ADMIN$\\\\', case=False) | ImagePath.str.contains(r'\\\\Perflogs\\\\', case=False) | ImagePath.str.contains(r'&&', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_susp.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation CLIP+ Launcher - System",
        "id": "f7385ee2-0e0c-11eb-adc1-0242ac120002",
        "status": "test",
        "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ImagePath.str.contains(r'cmd', case=False) & ImagePath.str.contains(r'&&', case=False) & ImagePath.str.contains(r'clipboard]::', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_clip_services.yml"
        }
    },
    {
        "title": "HackTool Service Registration or Execution",
        "id": "d26ce60c-2151-403c-9a42-49420d87b5e4",
        "status": "test",
        "description": "Detects installation or execution of services",
        "tags": [
            "attack.execution",
            "attack.t1569.002",
            "attack.s0029"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & (EventID==[7045, 7036]) & (ServiceName.str.contains(r'cachedump', case=False) | ServiceName.str.contains(r'DumpSvc', case=False) | ServiceName.str.contains(r'gsecdump', case=False) | ServiceName.str.contains(r'pwdump', case=False) | ServiceName.str.contains(r'UACBypassedService', case=False) | ServiceName.str.contains(r'WCE SERVICE', case=False) | ServiceName.str.contains(r'WCESERVICE', case=False) | ServiceName.str.contains(r'winexesvc', case=False) | ImagePath.str.contains(r'bypass', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_hacktools.yml"
        }
    },
    {
        "title": "New PDQDeploy Service - Server Side",
        "id": "ee9ca27c-9bd7-4cee-9b01-6e906be7cae3",
        "status": "test",
        "description": "Detects a PDQDeploy service installation which indicates that PDQDeploy was installed on the machines.\nPDQDeploy can be abused by attackers to remotely install packages or execute commands on target machines\n",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'PDQDeployService.exe', case=False) | ServiceName==['PDQDeploy', 'PDQ Deploy'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_pdqdeploy.yml"
        }
    },
    {
        "title": "PAExec Service Installation",
        "id": "de7ce410-b3fb-4e8a-b38c-3b999e2c3420",
        "status": "test",
        "description": "Detects PAExec service installation",
        "tags": [
            "attack.execution",
            "attack.t1569.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ServiceName.str.contains(r'PAExec-', case=False) | ImagePath.str.contains(r'C:\\\\WINDOWS\\\\PAExec-', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_paexec.yml"
        }
    },
    {
        "title": "Moriya Rootkit - System",
        "id": "25b9c01c-350d-4b95-bed1-836d04a4f324",
        "status": "test",
        "description": "Detects the use of Moriya rootkit as described in the securelist's Operation TunnelSnake report",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1543.003"
        ],
        "level": "critical",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ServiceName=='ZzNetSvc'"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_moriya_rootkit.yml"
        }
    },
    {
        "title": "Tap Driver Installation",
        "id": "8e4cf0e5-aa5d-4dc3-beff-dc26917744a9",
        "status": "test",
        "description": "Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques",
        "tags": [
            "attack.exfiltration",
            "attack.t1048"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ImagePath.str.contains(r'tap0901', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_tap_driver.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - System",
        "id": "14bcba49-a428-42d9-b943-e2ce0f0f7ae6",
        "status": "test",
        "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ImagePath.str.contains(r'&&set', case=False) & ImagePath.str.contains(r'cmd', case=False) & ImagePath.str.contains(r'/c', case=False) & ImagePath.str.contains(r'-f', case=False) & (ImagePath.str.contains(r'{0}', case=False) | ImagePath.str.contains(r'{1}', case=False) | ImagePath.str.contains(r'{2}', case=False) | ImagePath.str.contains(r'{3}', case=False) | ImagePath.str.contains(r'{4}', case=False) | ImagePath.str.contains(r'{5}', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_var_services.yml"
        }
    },
    {
        "title": "Service Installed By Unusual Client - System",
        "id": "71c276aa-49cd-43d2-b920-2dcd3e6962d5",
        "status": "test",
        "description": "Detects a service installed by a client which has PID 0 or whose parent has PID 0",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ProcessId==0"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_sups_unusal_client.yml"
        }
    },
    {
        "title": "New PDQDeploy Service - Client Side",
        "id": "b98a10af-1e1e-44a7-bab2-4cc026917648",
        "status": "test",
        "description": "Detects PDQDeploy service installation on the target system.\nWhen a package is deployed via PDQDeploy it installs a remote service on the target machine with the name \"PDQDeployRunner-X\" where \"X\" is an integer starting from 1\n",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'PDQDeployRunner-', case=False) | ServiceName.str.contains(r'PDQDeployRunner-', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_pdqdeploy_runner.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Stdin - System",
        "id": "487c7524-f892-4054-b263-8a0ace63fc25",
        "status": "test",
        "description": "Detects Obfuscated Powershell via Stdin in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ImagePath.str.contains(r'set', case=False) & ImagePath.str.contains(r'&&', case=False) & (ImagePath.str.contains(r'environment', case=False) | ImagePath.str.contains(r'invoke', case=False) | ImagePath.str.contains(r'input', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_stdin_services.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation STDIN+ Launcher - System",
        "id": "72862bf2-0eb1-11eb-adc1-0242ac120002",
        "status": "test",
        "description": "Detects Obfuscated use of stdin to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ImagePath.str.contains(r'cmd', case=False) & ImagePath.str.contains(r'powershell', case=False) & (ImagePath.str.contains(r'/c', case=False) | ImagePath.str.contains(r'/r', case=False)) & (ImagePath.str.contains(r'noexit', case=False) | ImagePath.str.contains(r'input', case=False) & ImagePath.str.contains(r'$', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_stdin_services.yml"
        }
    },
    {
        "title": "KrbRelayUp Service Installation",
        "id": "e97d9903-53b2-41fc-8cb9-889ed4093e80",
        "status": "test",
        "description": "Detects service creation from KrbRelayUp tool used for privilege escalation in Windows domain environments where LDAP signing is not enforced (the default settings)",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1543"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & EventID==7045 & ServiceName=='KrbSCM'"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_krbrelayup_service_installation.yml"
        }
    },
    {
        "title": "smbexec.py Service Installation",
        "id": "52a85084-6989-40c3-8f32-091e12e13f09",
        "status": "test",
        "description": "Detects the use of smbexec.py tool by detecting a specific service installation",
        "tags": [
            "attack.lateral-movement",
            "attack.execution",
            "attack.t1021.002",
            "attack.t1569.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ServiceName=='BTOBTO' | ImagePath.str.contains(r'.bat & del ', case=False) | ImagePath.str.contains(r'__output 2^>^&1 >', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_hack_smbexec.yml"
        }
    },
    {
        "title": "Important Windows Service Terminated Unexpectedly",
        "id": "56abae0c-6212-4b97-adc0-0b559bb950c3",
        "status": "test",
        "description": "Detects important or interesting Windows services that got terminated unexpectedly.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7034 & (param1.str.contains(r'Message Queuing', case=False) | Binary.str.contains(r'4d0053004d005100', case=False) | Binary.str.contains(r'6d0073006d007100', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_terminated_unexpectedly.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation Obfuscated IEX Invocation - System",
        "id": "51aa9387-1c53-4153-91cc-d73c59ae1ca9",
        "status": "test",
        "description": "Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block linked in the references",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & EventID==7045 & (ImagePath.str.contains(r'\\\\$PSHome\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$PSHome\\\\[') | ImagePath.str.contains(r'\\\\$ShellId\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$ShellId\\\\[') | ImagePath.str.contains(r'\\\\$env:Public\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$env:Public\\\\[') | ImagePath.str.contains(r'\\\\$env:ComSpec\\\\[(\\\\s*\\\\d{1,3}\\\\s*,){2}') | ImagePath.str.contains(r'\\\\\\\\*mdr\\\\*\\\\W\\\\s*\\\\)\\\\.Name') | ImagePath.str.contains(r'\\\\$VerbosePreference\\\\.ToString\\\\(') | ImagePath.str.contains(r'\\\\String\\\\]\\\\s*\\\\$VerbosePreference'))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_obfuscated_iex_services.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use Clip - System",
        "id": "63e3365d-4824-42d8-8b82-e56810fefa0c",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ImagePath.str.contains(r'(Clipboard|i', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_use_clip_services.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation VAR+ Launcher - System",
        "id": "8ca7004b-e620-4ecb-870e-86129b5b8e75",
        "status": "test",
        "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ImagePath.str.contains(r'cmd', case=False) & ImagePath.str.contains(r'\"set', case=False) & ImagePath.str.contains(r'-f', case=False) & (ImagePath.str.contains(r'/c', case=False) | ImagePath.str.contains(r'/r', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_var_services.yml"
        }
    },
    {
        "title": "TacticalRMM Service Installation",
        "id": "4bb79b62-ef12-4861-981d-2aab43fab642",
        "status": "test",
        "description": "Detects a TacticalRMM service installation. Tactical RMM is a remote monitoring & management tool.",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'tacticalrmm.exe', case=False) | ServiceName.str.contains(r'TacticalRMM Agent Service', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_tacticalrmm.yml"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use Rundll32 - System",
        "id": "641a4bfb-c017-44f7-800c-2aee0184ce9b",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use Rundll32 in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & ImagePath.str.contains(r'&&', case=False) & ImagePath.str.contains(r'rundll32', case=False) & ImagePath.str.contains(r'shell32.dll', case=False) & ImagePath.str.contains(r'shellexec_rundll', case=False) & (ImagePath.str.contains(r'value', case=False) | ImagePath.str.contains(r'invoke', case=False) | ImagePath.str.contains(r'comspec', case=False) | ImagePath.str.contains(r'iex', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_use_rundll32_services.yml"
        }
    },
    {
        "title": "NetSupport Manager Service Install",
        "id": "2d510d8d-912b-45c5-b1df-36faa3d8c3f4",
        "status": "test",
        "description": "Detects NetSupport Manager service installation on the target system.",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ImagePath.str.contains(r'\\\\NetSupport Manager\\\\client32.exe', case=False) | ServiceName=='Client32')"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_netsupport_manager.yml"
        }
    },
    {
        "title": "Windows Service Terminated With Error",
        "id": "acfa2210-0d71-4eeb-b477-afab494d596c",
        "status": "test",
        "description": "Detects Windows services that got terminated for whatever reason",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "low",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7023"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_terminated_error_generic.yml"
        }
    },
    {
        "title": "Remote Access Tool Services Have Been Installed - System",
        "id": "1a31b18a-f00c-4061-9900-f735b96c99fc",
        "status": "test",
        "description": "Detects service installation of different remote access tools software. These software are often abused by threat actors to perform",
        "tags": [
            "attack.persistence",
            "attack.t1543.003",
            "attack.t1569.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & (EventID==[7045, 7036]) & (ServiceName.str.contains(r'AmmyyAdmin', case=False) | ServiceName.str.contains(r'Atera', case=False) | ServiceName.str.contains(r'BASupportExpressSrvcUpdater', case=False) | ServiceName.str.contains(r'BASupportExpressStandaloneService', case=False) | ServiceName.str.contains(r'chromoting', case=False) | ServiceName.str.contains(r'GoToAssist', case=False) | ServiceName.str.contains(r'GoToMyPC', case=False) | ServiceName.str.contains(r'jumpcloud', case=False) | ServiceName.str.contains(r'LMIGuardianSvc', case=False) | ServiceName.str.contains(r'LogMeIn', case=False) | ServiceName.str.contains(r'monblanking', case=False) | ServiceName.str.contains(r'Parsec', case=False) | ServiceName.str.contains(r'RManService', case=False) | ServiceName.str.contains(r'RPCPerformanceService', case=False) | ServiceName.str.contains(r'RPCService', case=False) | ServiceName.str.contains(r'SplashtopRemoteService', case=False) | ServiceName.str.contains(r'SSUService', case=False) | ServiceName.str.contains(r'TeamViewer', case=False) | ServiceName.str.contains(r'TightVNC', case=False) | ServiceName.str.contains(r'vncserver', case=False) | ServiceName.str.contains(r'Zoho', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_remote_access_software.yml"
        }
    },
    {
        "title": "CSExec Service Installation",
        "id": "a27e5fa9-c35e-4e3d-b7e0-1ce2af66ad12",
        "status": "test",
        "description": "Detects CSExec service installation and execution events",
        "tags": [
            "attack.execution",
            "attack.t1569.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Service Control Manager' & EventID==7045 & (ServiceName=='csexecsvc' | ImagePath.str.contains(r'\\\\csexecsvc.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/service_control_manager/win_system_service_install_csexecsvc.yml"
        }
    },
    {
        "title": "Suspicious Usage of CVE_2021_34484 or CVE 2022_21919",
        "id": "52a85084-6989-40c3-8f32-091e12e17692",
        "status": "test",
        "description": "During exploitation of this vulnerability, two logs (Provider_Name:Microsoft-Windows-User Profiles Service) with EventID 1511 and 1515 (maybe lot of false positives with this event) are created. Moreover, it appears the directory \\Users\\TEMP is created may be created during the exploitation. Viewed on 2008 Server",
        "tags": [
            "attack.execution"
        ],
        "level": "low",
        "rule": [
            "Channel=='Application' & EventID==1511 & Provider_Name=='Microsoft-Windows-User Profiles Service'"
        ],
        "logsource": {
            "product": "windows",
            "service": "application",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_user_profiles_service/win_system_susp_vuln_cve_2022_21919_or_cve_2021_34484.yml"
        }
    },
    {
        "title": "Windows Update Error",
        "id": "13cfeb75-9e33-4d04-b0f7-ab8faaa95a59",
        "status": "stable",
        "description": "Detects Windows update errors including installation failures and connection issues. Defenders should observe this in case critical update KBs aren't installed.\n",
        "tags": [
            "attack.impact",
            "attack.resource-development",
            "attack.t1584"
        ],
        "level": "informational",
        "rule": [
            "Channel=='System' & Provider_Name=='Microsoft-Windows-WindowsUpdateClient' & (EventID==[16, 20, 24, 213, 217])"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_windows_update_client/win_system_susp_system_update_error.yml"
        }
    },
    {
        "title": "Important Windows Eventlog Cleared",
        "id": "100ef69e-3327-481c-8e5c-6d80d9507556",
        "status": "test",
        "description": "Detects the clearing of one of the Windows Core Eventlogs. e.g. caused by \"wevtutil cl\" command execution",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.001",
            "car.2016-04-002"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & EventID==104 & Provider_Name=='Microsoft-Windows-Eventlog' & (Channel==['Microsoft-Windows-PowerShell/Operational', 'Microsoft-Windows-Sysmon/Operational', 'PowerShellCore/Operational', 'Security', 'System', 'Windows PowerShell'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_eventlog/win_system_susp_eventlog_cleared.yml"
        }
    },
    {
        "title": "Eventlog Cleared",
        "id": "a62b37e0-45d3-48d9-a517-90c1a1b0186b",
        "status": "test",
        "description": "One of the Windows Eventlogs has been cleared. e.g. caused by \"wevtutil cl\" command execution",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.001",
            "car.2016-04-002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & EventID==104 & Provider_Name=='Microsoft-Windows-Eventlog' & ~ (Channel==['Microsoft-Windows-PowerShell/Operational', 'Microsoft-Windows-Sysmon/Operational', 'PowerShellCore/Operational', 'Security', 'System', 'Windows PowerShell'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_eventlog/win_system_eventlog_cleared.yml"
        }
    },
    {
        "title": "Volume Shadow Copy Mount",
        "id": "f512acbf-e662-4903-843e-97ce4652b740",
        "status": "test",
        "description": "Detects volume shadow copy mount via Windows event log",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002"
        ],
        "level": "low",
        "rule": [
            "Channel=='System' & Provider_Name=='Microsoft-Windows-Ntfs' & EventID==98 & DeviceName.str.contains(r'HarddiskVolumeShadowCopy', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_ntfs/win_system_volume_shadow_copy_mount.yml"
        }
    },
    {
        "title": "Zerologon Exploitation Using Well-known Tools",
        "id": "18f37338-b9bd-4117-a039-280c81f7a596",
        "status": "stable",
        "description": "This rule is designed to detect attempts to exploit Zerologon (CVE-2020-1472) vulnerability using mimikatz zerologon module or other exploits from machine with \"kali\" hostname.",
        "tags": [
            "attack.t1210",
            "attack.lateral-movement"
        ],
        "level": "critical",
        "rule": [
            "Channel=='System' & (EventID==[5805, 5723]) & (\"'kali'\" | \"'mimikatz'\")"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/netlogon/win_system_possible_zerologon_exploitation_using_wellknown_tools.yml"
        }
    },
    {
        "title": "Vulnerable Netlogon Secure Channel Connection Allowed",
        "id": "a0cb7110-edf0-47a4-9177-541a4083128a",
        "status": "test",
        "description": "Detects that a vulnerable Netlogon secure channel connection was allowed, which could be an indicator of CVE-2020-1472.",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1548"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='NetLogon' & EventID==5829"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/netlogon/win_system_vul_cve_2020_1472.yml"
        }
    },
    {
        "title": "No Suitable Encryption Key Found For Generating Kerberos Ticket",
        "id": "b1e0b3f5-b62e-41be-886a-daffde446ad4",
        "status": "test",
        "description": "Detects errors when a target server doesn't have suitable keys for generating kerberos tickets.\nThis issue can occur for example when a service uses a user account or a computer account that is configured for only DES encryption on a computer that is running Windows 7 which has DES encryption for Kerberos authentication disabled.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1558.003"
        ],
        "level": "low",
        "rule": [
            "Channel=='System' & Provider_Name=='Microsoft-Windows-Kerberos-Key-Distribution-Center' & (EventID==[16, 27])"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_kerberos_key_distribution_center/win_system_kdcsvc_tgs_no_suitable_encryption_key_found.yml"
        }
    },
    {
        "title": "KDC RC4-HMAC Downgrade CVE-2022-37966",
        "id": "e6f81941-b1cd-4766-87db-9fc156f658ee",
        "status": "test",
        "description": "Detects the exploitation of a security bypass and elevation of privilege vulnerability with Authentication Negotiation by using weak RC4-HMAC negotiation",
        "tags": [
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & EventID==42 & Provider_Name=='Kerberos-Key-Distribution-Center' & Level==2"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_kerberos_key_distribution_center/win_system_kdcsvc_rc4_downgrade.yml"
        }
    },
    {
        "title": "Certificate Use With No Strong Mapping",
        "id": "993c2665-e6ef-40e3-a62a-e1a97686af79",
        "status": "test",
        "description": "Detects a user certificate that was valid but could not be mapped to a user in a strong way (such as via explicit mapping, key trust mapping, or a SID)\nThis could be a sign of exploitation of the elevation of privilege vulnerabilities (CVE-2022-34691, CVE-2022-26931, CVE-2022-26923) that can occur when the KDC allows certificate spoofing by not requiring a strong mapping.\nEvents where the AccountName and CN of the Subject do not match, or where the CN ends in a dollar sign indicating a machine, may indicate certificate spoofing.\n",
        "tags": [
            "attack.privilege-escalation"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='Kerberos-Key-Distribution-Center' & (EventID==[39, 41])"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_kerberos_key_distribution_center/win_system_kdcsvc_cert_use_no_strong_mapping.yml"
        }
    },
    {
        "title": "Local Privilege Escalation Indicator TabTip",
        "id": "bc2e25ed-b92b-4daa-b074-b502bdd1982b",
        "status": "test",
        "description": "Detects the invocation of TabTip via CLSID as seen when JuicyPotatoNG is used on a system in brute force mode",
        "tags": [
            "attack.execution",
            "attack.t1557.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Microsoft-Windows-DistributedCOM' & EventID==10001 & param1=='C:\\\\Program Files\\\\Common Files\\\\microsoft shared\\\\ink\\\\TabTip.exe' & param2==2147943140 & param3=='{054AAE20-4BEA-4347-8A35-64A533254A9D}'"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_distributed_com/win_system_lpe_indicators_tabtip.yml"
        }
    },
    {
        "title": "Active Directory Certificate Services Denied Certificate Enrollment Request",
        "id": "994bfd6d-0a2e-481e-a861-934069fcf5f5",
        "status": "test",
        "description": "Detects denied requests by Active Directory Certificate Services.\nExample of these requests denial include issues with permissions on the certificate template or invalid signatures.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1553.004"
        ],
        "level": "low",
        "rule": [
            "Channel=='System' & Provider_Name=='Microsoft-Windows-CertificationAuthority' & EventID==53"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_certification_authority/win_system_adcs_enrollment_request_denied.yml"
        }
    },
    {
        "title": "Critical Hive In Suspicious Location Access Bits Cleared",
        "id": "39f919f3-980b-4e6f-a975-8af7e507ef2b",
        "status": "test",
        "description": "Detects events from the Kernel-General ETW indicating that the access bits of a hive with a system like hive name located in the temp directory have been reset.\nThis occurs when an application tries to access a hive and the hive has not be recognized since the last 7 days (by default).\nRegistry hive dumping utilities such as QuarksPwDump were seen emitting this behavior.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & EventID==16 & Provider_Name=='Microsoft-Windows-Kernel-General' & (HiveName.str.contains(r'\\\\Temp\\\\SAM', case=False) | HiveName.str.contains(r'\\\\Temp\\\\SECURITY', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_kernel_general/win_system_susp_critical_hive_location_access_bits_cleared.yml"
        }
    },
    {
        "title": "NTLMv1 Logon Between Client and Server",
        "id": "e9d4ab66-a532-4ef7-a502-66a9e4a34f5d",
        "status": "test",
        "description": "Detects the reporting of NTLMv1 being used between a client and server. NTLMv1 is insecure as the underlying encryption algorithms can be brute-forced by modern hardware.",
        "tags": [
            "attack.defense-evasion",
            "attack.lateral-movement",
            "attack.t1550.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='System' & Provider_Name=='LsaSrv' & (EventID==[6038, 6039])"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/lsasrv/win_system_lsasrv_ntlmv1.yml"
        }
    },
    {
        "title": "DHCP Server Error Failed Loading the CallOut DLL",
        "id": "75edd3fd-7146-48e5-9848-3013d7f0282c",
        "status": "test",
        "description": "This rule detects a DHCP server error in which a specified Callout DLL (in registry) could not be loaded",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & (EventID==[1031, 1032, 1034]) & Provider_Name=='Microsoft-Windows-DHCP-Server'"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_dhcp_server/win_system_susp_dhcp_config_failed.yml"
        }
    },
    {
        "title": "DHCP Server Loaded the CallOut DLL",
        "id": "13fc89a9-971e-4ca6-b9dc-aa53a445bf40",
        "status": "test",
        "description": "This rule detects a DHCP server in which a specified Callout DLL (in registry) was loaded",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & EventID==1033 & Provider_Name=='Microsoft-Windows-DHCP-Server'"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/microsoft_windows_dhcp_server/win_system_susp_dhcp_config.yml"
        }
    },
    {
        "title": "NTFS Vulnerability Exploitation",
        "id": "f14719ce-d3ab-4e25-9ce6-2899092260b0",
        "status": "test",
        "description": "This the exploitation of a NTFS vulnerability as reported without many details via Twitter",
        "tags": [
            "attack.impact",
            "attack.t1499.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Ntfs' & EventID==55 & Origin=='File System Driver' & Description.str.contains(r'contains a corrupted file record', case=False) & Description.str.contains(r'The name of the file is \"\\\\\"', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/ntfs/win_system_ntfs_vuln_exploit.yml"
        }
    },
    {
        "title": "Sysmon Application Crashed",
        "id": "4d7f1827-1637-4def-8d8a-fd254f9454df",
        "status": "test",
        "description": "Detects application popup reporting a failure of the Sysmon service",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562"
        ],
        "level": "high",
        "rule": [
            "Channel=='System' & Provider_Name=='Application Popup' & EventID==26 & (Caption==['sysmon64.exe - Application Error', 'sysmon.exe - Application Error'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "system",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/system/application_popup/win_system_application_sysmon_crash.yml"
        }
    },
    {
        "title": "Potential Privilege Escalation via Local Kerberos Relay over LDAP",
        "id": "749c9f5e-b353-4b90-a9c1-05243357ca4b",
        "status": "test",
        "description": "Detects a suspicious local successful logon event where the Logon Package is Kerberos, the remote address is set to localhost, and the target user SID is the built-in local Administrator account.\nThis may indicate an attempt to leverage a Kerberos relay attack variant that can be used to elevate privilege locally from a domain joined limited user to local System privileges.\n",
        "tags": [
            "attack.privilege-escalation",
            "attack.credential-access",
            "attack.t1548"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4624 & LogonType==3 & AuthenticationPackageName=='Kerberos' & IpAddress=='127.0.0.1' & TargetUserSid.str.contains(r'S-1-5-21-', case=False) & TargetUserSid.str.contains(r'-500', case=False) & ~ IpPort=='0'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_susp_privesc_kerberos_relay_over_ldap.yml"
        }
    },
    {
        "title": "DiagTrackEoP Default Login Username",
        "id": "2111118f-7e46-4fc8-974a-59fd8ec95196",
        "status": "test",
        "description": "Detects the default \"UserName\" used by the DiagTrackEoP POC",
        "tags": [
            "attack.privilege-escalation"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Security' & EventID==4624 & LogonType==9 & TargetOutboundUserName=='thisisnotvaliduser'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_diagtrack_eop_default_login_username.yml"
        }
    },
    {
        "title": "RDP Login from Localhost",
        "id": "51e33403-2a37-4d66-a574-1fda1782cc31",
        "status": "test",
        "description": "RDP login with localhost source address may be a tunnelled login",
        "tags": [
            "attack.lateral-movement",
            "car.2013-07-002",
            "attack.t1021.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4624 & LogonType==10 & (IpAddress==['::1', '127.0.0.1'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_rdp_localhost_login.yml"
        }
    },
    {
        "title": "A Security-Enabled Global Group Was Deleted",
        "id": "b237c54b-0f15-4612-a819-44b735e0de27",
        "status": "stable",
        "description": "Detects activity when a security-enabled global group is deleted",
        "tags": [
            "attack.persistence",
            "attack.t1098"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & (EventID==[4730, 634])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_security_enabled_global_group_deleted.yml"
        }
    },
    {
        "title": "External Remote SMB Logon from Public IP",
        "id": "78d5cab4-557e-454f-9fb9-a222bd0d5edc",
        "status": "test",
        "description": "Detects successful logon from public IP address via SMB. This can indicate a publicly-exposed SMB port.",
        "tags": [
            "attack.initial-access",
            "attack.credential-access",
            "attack.t1133",
            "attack.t1078",
            "attack.t1110"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4624 & LogonType==3 & ~ (IpAddress==['::1/128'] | IpAddress.str.contains(r'10.', case=False) | IpAddress.str.contains(r'127.', case=False) | IpAddress.str.contains(r'172.16.', case=False) | IpAddress.str.contains(r'172.17.', case=False) | IpAddress.str.contains(r'172.18.', case=False) | IpAddress.str.contains(r'172.19.', case=False) | IpAddress.str.contains(r'172.20.', case=False) | IpAddress.str.contains(r'172.21.', case=False) | IpAddress.str.contains(r'172.22.', case=False) | IpAddress.str.contains(r'172.23.', case=False) | IpAddress.str.contains(r'172.24.', case=False) | IpAddress.str.contains(r'172.25.', case=False) | IpAddress.str.contains(r'172.26.', case=False) | IpAddress.str.contains(r'172.27.', case=False) | IpAddress.str.contains(r'172.28.', case=False) | IpAddress.str.contains(r'172.29.', case=False) | IpAddress.str.contains(r'172.30.', case=False) | IpAddress.str.contains(r'172.31.', case=False) | IpAddress.str.contains(r'192.168.', case=False) | IpAddress.str.contains(r'169.254.', case=False) | IpAddress.str.contains(r'fc', case=False) | IpAddress.str.contains(r'fd', case=False) | IpAddress.str.contains(r'fe8', case=False) | IpAddress.str.contains(r'fe9', case=False) | IpAddress.str.contains(r'fea', case=False) | IpAddress.str.contains(r'feb', case=False) | IpAddress=='-')"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_successful_external_remote_smb_login.yml"
        }
    },
    {
        "title": "RottenPotato Like Attack Pattern",
        "id": "16f5d8ca-44bd-47c8-acbe-6fc95a16c12f",
        "status": "test",
        "description": "Detects logon events that have characteristics of events generated during an attack with RottenPotato and the like",
        "tags": [
            "attack.privilege-escalation",
            "attack.credential-access",
            "attack.t1557.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4624 & LogonType==3 & TargetUserName=='ANONYMOUS LOGON' & WorkstationName=='-' & (IpAddress==['127.0.0.1', '::1'])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_susp_rottenpotato.yml"
        }
    },
    {
        "title": "Outgoing Logon with New Credentials",
        "id": "def8b624-e08f-4ae1-8612-1ba21190da6b",
        "status": "test",
        "description": "Detects logon events that specify new credentials",
        "tags": [
            "attack.defense-evasion",
            "attack.lateral-movement",
            "attack.t1550"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & EventID==4624 & LogonType==9"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_susp_logon_newcredentials.yml"
        }
    },
    {
        "title": "Scanner PoC for CVE-2019-0708 RDP RCE Vuln",
        "id": "8400629e-79a9-4737-b387-5db940ab2367",
        "status": "test",
        "description": "Detects the use of a scanner by zerosum0x0 that discovers targets vulnerable to  CVE-2019-0708 RDP RCE aka BlueKeep",
        "tags": [
            "attack.lateral-movement",
            "attack.t1210",
            "car.2013-07-002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4625 & TargetUserName=='AAAAAAA'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_rdp_bluekeep_poc_scanner.yml"
        }
    },
    {
        "title": "External Remote RDP Logon from Public IP",
        "id": "259a9cdf-c4dd-4fa2-b243-2269e5ab18a2",
        "status": "test",
        "description": "Detects successful logon from public IP address via RDP. This can indicate a publicly-exposed RDP port.",
        "tags": [
            "attack.initial-access",
            "attack.credential-access",
            "attack.t1133",
            "attack.t1078",
            "attack.t1110"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4624 & LogonType==10 & ~ (IpAddress==['::1/128'] | IpAddress.str.contains(r'10.', case=False) | IpAddress.str.contains(r'127.', case=False) | IpAddress.str.contains(r'172.16.', case=False) | IpAddress.str.contains(r'172.17.', case=False) | IpAddress.str.contains(r'172.18.', case=False) | IpAddress.str.contains(r'172.19.', case=False) | IpAddress.str.contains(r'172.20.', case=False) | IpAddress.str.contains(r'172.21.', case=False) | IpAddress.str.contains(r'172.22.', case=False) | IpAddress.str.contains(r'172.23.', case=False) | IpAddress.str.contains(r'172.24.', case=False) | IpAddress.str.contains(r'172.25.', case=False) | IpAddress.str.contains(r'172.26.', case=False) | IpAddress.str.contains(r'172.27.', case=False) | IpAddress.str.contains(r'172.28.', case=False) | IpAddress.str.contains(r'172.29.', case=False) | IpAddress.str.contains(r'172.30.', case=False) | IpAddress.str.contains(r'172.31.', case=False) | IpAddress.str.contains(r'192.168.', case=False) | IpAddress.str.contains(r'169.254.', case=False) | IpAddress.str.contains(r'fc', case=False) | IpAddress.str.contains(r'fd', case=False) | IpAddress.str.contains(r'fe8', case=False) | IpAddress.str.contains(r'fe9', case=False) | IpAddress.str.contains(r'fea', case=False) | IpAddress.str.contains(r'feb', case=False) | IpAddress=='-')"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_successful_external_remote_rdp_login.yml"
        }
    },
    {
        "title": "Failed Logon From Public IP",
        "id": "f88e112a-21aa-44bd-9b01-6ee2a2bbbed1",
        "status": "test",
        "description": "Detects a failed logon attempt from a public IP. A login from a public IP can indicate a misconfigured firewall or network boundary.",
        "tags": [
            "attack.initial-access",
            "attack.persistence",
            "attack.t1078",
            "attack.t1190",
            "attack.t1133"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4625 & ~ (IpAddress.str.contains(r'-', case=False) | IpAddress==['::1/128'] | IpAddress.str.contains(r'10.', case=False) | IpAddress.str.contains(r'127.', case=False) | IpAddress.str.contains(r'172.16.', case=False) | IpAddress.str.contains(r'172.17.', case=False) | IpAddress.str.contains(r'172.18.', case=False) | IpAddress.str.contains(r'172.19.', case=False) | IpAddress.str.contains(r'172.20.', case=False) | IpAddress.str.contains(r'172.21.', case=False) | IpAddress.str.contains(r'172.22.', case=False) | IpAddress.str.contains(r'172.23.', case=False) | IpAddress.str.contains(r'172.24.', case=False) | IpAddress.str.contains(r'172.25.', case=False) | IpAddress.str.contains(r'172.26.', case=False) | IpAddress.str.contains(r'172.27.', case=False) | IpAddress.str.contains(r'172.28.', case=False) | IpAddress.str.contains(r'172.29.', case=False) | IpAddress.str.contains(r'172.30.', case=False) | IpAddress.str.contains(r'172.31.', case=False) | IpAddress.str.contains(r'192.168.', case=False) | IpAddress.str.contains(r'169.254.', case=False) | IpAddress.str.contains(r'fc', case=False) | IpAddress.str.contains(r'fd', case=False) | IpAddress.str.contains(r'fe8', case=False) | IpAddress.str.contains(r'fe9', case=False) | IpAddress.str.contains(r'fea', case=False) | IpAddress.str.contains(r'feb', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_susp_failed_logon_source.yml"
        }
    },
    {
        "title": "Successful Account Login Via WMI",
        "id": "5af54681-df95-4c26-854f-2565e13cfab0",
        "status": "stable",
        "description": "Detects successful logon attempts performed with WMI",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & EventID==4624 & ProcessName.str.contains(r'\\\\WmiPrvSE.exe', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_susp_wmi_login.yml"
        }
    },
    {
        "title": "Pass the Hash Activity 2",
        "id": "8eef149c-bd26-49f2-9e5a-9b00e3af499b",
        "status": "stable",
        "description": "Detects the attack technique pass the hash which is used to move laterally inside the network",
        "tags": [
            "attack.lateral-movement",
            "attack.t1550.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & (EventID==4624 & SubjectUserSid=='S-1-0-0' & LogonType==3 & LogonProcessName=='NtLmSsp' & KeyLength==0 | EventID==4624 & LogonType==9 & LogonProcessName=='seclogo') & ~ TargetUserName=='ANONYMOUS LOGON'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "The successful use of PtH for lateral movement between workstations would trigger event ID 4624",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_pass_the_hash_2.yml"
        }
    },
    {
        "title": "A Member Was Removed From a Security-Enabled Global Group",
        "id": "02c39d30-02b5-45d2-b435-8aebfe5a8629",
        "status": "stable",
        "description": "Detects activity when a member is removed from a security-enabled global group",
        "tags": [
            "attack.persistence",
            "attack.t1098"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & (EventID==[633, 4729])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_member_removed_security_enabled_global_group.yml"
        }
    },
    {
        "title": "Potential Access Token Abuse",
        "id": "02f7c9c1-1ae8-4c6a-8add-04693807f92f",
        "status": "test",
        "description": "Detects potential token impersonation and theft. Example, when using \"DuplicateToken(Ex)\" and \"ImpersonateLoggedOnUser\" with the \"LOGON32_LOGON_NEW_CREDENTIALS flag\".",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1134.001",
            "stp.4u"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Security' & EventID==4624 & LogonType==9 & LogonProcessName=='Advapi' & AuthenticationPackageName=='Negotiate' & ImpersonationLevel=='%%1833'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_access_token_abuse.yml"
        }
    },
    {
        "title": "A Member Was Added to a Security-Enabled Global Group",
        "id": "c43c26be-2e87-46c7-8661-284588c5a53e",
        "status": "stable",
        "description": "Detects activity when a member is added to a security-enabled global group",
        "tags": [
            "attack.persistence",
            "attack.t1098"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & (EventID==[4728, 632])"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_member_added_security_enabled_global_group.yml"
        }
    },
    {
        "title": "Successful Overpass the Hash Attempt",
        "id": "192a0330-c20b-4356-90b6-7b7049ae0b87",
        "status": "test",
        "description": "Detects successful logon with logon type 9 (NewCredentials) which matches the Overpass the Hash behavior of e.g Mimikatz's sekurlsa::pth module.",
        "tags": [
            "attack.lateral-movement",
            "attack.s0002",
            "attack.t1550.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==4624 & LogonType==9 & LogonProcessName=='seclogo' & AuthenticationPackageName=='Negotiate'"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_overpass_the_hash.yml"
        }
    },
    {
        "title": "Admin User Remote Logon",
        "id": "0f63e1ef-1eb9-4226-9d54-8927ca08520a",
        "status": "test",
        "description": "Detect remote login by Administrator user (depending on internal pattern).",
        "tags": [
            "attack.lateral-movement",
            "attack.t1078.001",
            "attack.t1078.002",
            "attack.t1078.003",
            "car.2016-04-005"
        ],
        "level": "low",
        "rule": [
            "Channel=='Security' & EventID==4624 & LogonType==10 & AuthenticationPackageName=='Negotiate' & TargetUserName.str.contains(r'Admin', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: Identifiable administrators usernames (pattern or special unique character. ex: \"Admin-*\"), internal policy mandating use only as secondary account",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/account_management/win_security_admin_rdp_login.yml"
        }
    },
    {
        "title": "Windows Filtering Platform Blocked Connection From EDR Agent Binary",
        "id": "bacf58c6-e199-4040-a94f-95dea0f1e45a",
        "status": "test",
        "description": "Detects a Windows Filtering Platform (WFP) blocked connection event involving common Endpoint Detection and Response (EDR) agents.\nAdversaries may use WFP filters to prevent Endpoint Detection and Response (EDR) agents from reporting security events.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562"
        ],
        "level": "high",
        "rule": [
            "Channel=='Security' & EventID==5157 & (Application.str.contains(r'\\\\AmSvc.exe', case=False) | Application.str.contains(r'\\\\cb.exe', case=False) | Application.str.contains(r'\\\\CETASvc.exe', case=False) | Application.str.contains(r'\\\\CNTAoSMgr.exe', case=False) | Application.str.contains(r'\\\\CrAmTray.exe', case=False) | Application.str.contains(r'\\\\CrsSvc.exe', case=False) | Application.str.contains(r'\\\\CSFalconContainer.exe', case=False) | Application.str.contains(r'\\\\CSFalconService.exe', case=False) | Application.str.contains(r'\\\\CybereasonAV.exe', case=False) | Application.str.contains(r'\\\\CylanceSvc.exe', case=False) | Application.str.contains(r'\\\\cyserver.exe', case=False) | Application.str.contains(r'\\\\CyveraService.exe', case=False) | Application.str.contains(r'\\\\CyvrFsFlt.exe', case=False) | Application.str.contains(r'\\\\EIConnector.exe', case=False) | Application.str.contains(r'\\\\elastic-agent.exe', case=False) | Application.str.contains(r'\\\\elastic-endpoint.exe', case=False) | Application.str.contains(r'\\\\EndpointBasecamp.exe', case=False) | Application.str.contains(r'\\\\ExecutionPreventionSvc.exe', case=False) | Application.str.contains(r'\\\\filebeat.exe', case=False) | Application.str.contains(r'\\\\fortiedr.exe', case=False) | Application.str.contains(r'\\\\hmpalert.exe', case=False) | Application.str.contains(r'\\\\hurukai.exe', case=False) | Application.str.contains(r'\\\\LogProcessorService.exe', case=False) | Application.str.contains(r'\\\\mcsagent.exe', case=False) | Application.str.contains(r'\\\\mcsclient.exe', case=False) | Application.str.contains(r'\\\\MsMpEng.exe', case=False) | Application.str.contains(r'\\\\MsSense.exe', case=False) | Application.str.contains(r'\\\\Ntrtscan.exe', case=False) | Application.str.contains(r'\\\\PccNTMon.exe', case=False) | Application.str.contains(r'\\\\QualysAgent.exe', case=False) | Application.str.contains(r'\\\\RepMgr.exe', case=False) | Application.str.contains(r'\\\\RepUtils.exe', case=False) | Application.str.contains(r'\\\\RepUx.exe', case=False) | Application.str.contains(r'\\\\RepWAV.exe', case=False) | Application.str.contains(r'\\\\RepWSC.exe', case=False) | Application.str.contains(r'\\\\sedservice.exe', case=False) | Application.str.contains(r'\\\\SenseCncProxy.exe', case=False) | Application.str.contains(r'\\\\SenseIR.exe', case=False) | Application.str.contains(r'\\\\SenseNdr.exe', case=False) | Application.str.contains(r'\\\\SenseSampleUploader.exe', case=False) | Application.str.contains(r'\\\\SentinelAgent.exe', case=False) | Application.str.contains(r'\\\\SentinelAgentWorker.exe', case=False) | Application.str.contains(r'\\\\SentinelBrowserNativeHost.exe', case=False) | Application.str.contains(r'\\\\SentinelHelperService.exe', case=False) | Application.str.contains(r'\\\\SentinelServiceHost.exe', case=False) | Application.str.contains(r'\\\\SentinelStaticEngine.exe', case=False) | Application.str.contains(r'\\\\SentinelStaticEngineScanner.exe', case=False) | Application.str.contains(r'\\\\sfc.exe', case=False) | Application.str.contains(r'\\\\sophos ui.exe', case=False) | Application.str.contains(r'\\\\sophosfilescanner.exe', case=False) | Application.str.contains(r'\\\\sophosfs.exe', case=False) | Application.str.contains(r'\\\\sophoshealth.exe', case=False) | Application.str.contains(r'\\\\sophosips.exe', case=False) | Application.str.contains(r'\\\\sophosLivequeryservice.exe', case=False) | Application.str.contains(r'\\\\sophosnetfilter.exe', case=False) | Application.str.contains(r'\\\\sophosntpservice.exe', case=False) | Application.str.contains(r'\\\\sophososquery.exe', case=False) | Application.str.contains(r'\\\\sspservice.exe', case=False) | Application.str.contains(r'\\\\TaniumClient.exe', case=False) | Application.str.contains(r'\\\\TaniumCX.exe', case=False) | Application.str.contains(r'\\\\TaniumDetectEngine.exe', case=False) | Application.str.contains(r'\\\\TMBMSRV.exe', case=False) | Application.str.contains(r'\\\\TmCCSF.exe', case=False) | Application.str.contains(r'\\\\TmListen.exe', case=False) | Application.str.contains(r'\\\\TmWSCSvc.exe', case=False) | Application.str.contains(r'\\\\Traps.exe', case=False) | Application.str.contains(r'\\\\winlogbeat.exe', case=False) | Application.str.contains(r'\\\\WSCommunicator.exe', case=False) | Application.str.contains(r'\\\\xagt.exe', case=False))"
        ],
        "logsource": {
            "product": "windows",
            "service": "security",
            "definition": "Requirements: Audit Filtering Platform Connection needs to be enabled",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/builtin/security/object_access/win_security_wfp_endpoint_agent_blocked.yml"
        }
    },
    {
        "title": "IE ZoneMap Setting Downgraded To MyComputer Zone For HTTP Protocols",
        "id": "3fd4c8d7-8362-4557-a8e6-83b29cc0d724",
        "status": "test",
        "description": "Detects changes to Internet Explorer's (IE / Windows Internet properties) ZoneMap configuration of the \"HTTP\" and \"HTTPS\" protocols to point to the \"My Computer\" zone. This allows downloaded files from the Internet to be granted the same level of trust as files stored locally.\n",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\\\\ZoneMap\\\\ProtocolDefaults', case=False) & (TargetObject.str.contains(r'\\\\http', case=False) | TargetObject.str.contains(r'\\\\https', case=False)) & Details.str.contains(r'DWORD (0x00000000)', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "COM Hijack via Sdclt",
        "id": "07743f65-7ec9-404a-a519-913db7118a8d",
        "status": "test",
        "description": "Detects changes to 'HKCU\\Software\\Classes\\Folder\\shell\\open\\command\\DelegateExecute'",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1546",
            "attack.t1548"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Software\\\\Classes\\\\Folder\\\\shell\\\\open\\\\command\\\\DelegateExecute', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential AutoLogger Sessions Tampering",
        "id": "f37b4bce-49d0-4087-9f5b-58bffda77316",
        "status": "test",
        "description": "Detects tampering with autologger trace sessions which is a technique used by attackers to disable logging",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\System\\\\CurrentControlSet\\\\Control\\\\WMI\\\\Autologger\\\\', case=False) & (TargetObject.str.contains(r'\\\\EventLog-', case=False) | TargetObject.str.contains(r'\\\\Defender', case=False)) & (TargetObject.str.contains(r'\\\\Enable', case=False) | TargetObject.str.contains(r'\\\\Start', case=False)) & Details=='DWORD (0x00000000)' & ~ Image=='C:\\\\Windows\\\\system32\\\\wevtutil.exe'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New BgInfo.EXE Custom DB Path Registry Configuration",
        "id": "53330955-dc52-487f-a3a2-da24dcff99b5",
        "status": "test",
        "description": "Detects setting of a new registry database value related to BgInfo configuration. Attackers can for example set this value to save the results of the commands executed by BgInfo in order to exfiltrate information.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & EventType=='SetValue' & TargetObject.str.contains(r'\\\\Software\\\\Winternals\\\\BGInfo\\\\Database', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential PSFactoryBuffer COM Hijacking",
        "id": "243380fa-11eb-4141-af92-e14925e77c1b",
        "status": "test",
        "description": "Detects changes to the PSFactory COM InProcServer32 registry. This technique was used by RomCom to create persistence storing a malicious DLL.",
        "tags": [
            "attack.persistence",
            "attack.t1546.015"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\CLSID\\\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\\\InProcServer32\\\\(Default)', case=False) & ~ (Details==['%windir%\\\\System32\\\\ActXPrxy.dll', 'C:\\\\Windows\\\\System32\\\\ActXPrxy.dll'])"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New BgInfo.EXE Custom VBScript Registry Configuration",
        "id": "992dd79f-dde8-4bb0-9085-6350ba97cfb3",
        "status": "test",
        "description": "Detects setting of a new registry value related to BgInfo configuration, which can be abused to execute custom VBScript via \"BgInfo.exe\"",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & EventType=='SetValue' & TargetObject.str.contains(r'\\\\Software\\\\Winternals\\\\BGInfo\\\\UserFields\\\\', case=False) & Details.str.contains(r'4', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Ransomware Activity Using LegalNotice Message",
        "id": "8b9606c9-28be-4a38-b146-0e313cc232c1",
        "status": "test",
        "description": "Detect changes to the \"LegalNoticeCaption\" or \"LegalNoticeText\" registry values where the message set contains keywords often used in ransomware ransom messages",
        "tags": [
            "attack.impact",
            "attack.t1491.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\LegalNoticeCaption', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\LegalNoticeText', case=False)) & (Details.str.contains(r'encrypted', case=False) | Details.str.contains(r'Unlock-Password', case=False) | Details.str.contains(r'paying', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Hide Schedule Task Via Index Value Tamper",
        "id": "5b16df71-8615-4f7f-ac9b-6c43c0509e61",
        "status": "test",
        "description": "Detects when the \"index\" value of a scheduled task is modified from the registry\nWhich effectively hides it from any tooling such as \"schtasks /query\" (Read the referenced link for more information about the effects of this technique)\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tree\\\\', case=False) & TargetObject.str.contains(r'Index', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Bypass UAC Using DelegateExecute",
        "id": "46dd5308-4572-4d12-aa43-8938f0184d4f",
        "status": "test",
        "description": "Bypasses User Account Control using a fileless method",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\open\\\\command\\\\DelegateExecute', case=False) & Details=='(Empty)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Scripted Diagnostics Turn Off Check Enabled - Registry",
        "id": "7d995e63-ec83-4aa3-89d5-8a17b5c87c86",
        "status": "test",
        "description": "Detects enabling TurnOffCheck which can be used to bypass defense of MSDT Follina vulnerability",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Policies\\\\Microsoft\\\\Windows\\\\ScriptedDiagnostics\\\\TurnOffCheck', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Keyboard Layout Load",
        "id": "34aa0252-6039-40ff-951f-939fd6ce47d8",
        "status": "test",
        "description": "Detects the keyboard preload installation with a suspicious keyboard layout, e.g. Chinese, Iranian or Vietnamese layout load in user session on systems maintained by US staff only",
        "tags": [
            "attack.resource-development",
            "attack.t1588.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Keyboard Layout\\\\Preload\\\\', case=False) | TargetObject.str.contains(r'\\\\Keyboard Layout\\\\Substitutes\\\\', case=False)) & (Details.str.contains(r'00000429', case=False) | Details.str.contains(r'00050429', case=False) | Details.str.contains(r'0000042a', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Add DisallowRun Execution to Registry",
        "id": "275641a5-a492-45e2-a817-7c81e9d9d3e9",
        "status": "test",
        "description": "Detect set DisallowRun to 1 to prevent user running specific computer program",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\DisallowRun', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Using DebugPath",
        "id": "df4dc653-1029-47ba-8231-3c44238cc0ae",
        "status": "test",
        "description": "Detects potential persistence using Appx DebugPath",
        "tags": [
            "attack.persistence",
            "attack.t1546.015"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'Classes\\\\ActivatableClasses\\\\Package\\\\Microsoft.', case=False) & TargetObject.str.contains(r'\\\\DebugPath', case=False) | TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\PackagedAppXDebug\\\\Microsoft.', case=False) & TargetObject.str.contains(r'\\\\(Default)', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Shim Database In Uncommon Location",
        "id": "6b6976a3-b0e6-4723-ac24-ae38a737af41",
        "status": "test",
        "description": "Detects the installation of a new shim database where the file is located in a non-default location",
        "tags": [
            "attack.persistence",
            "attack.t1546.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AppCompatFlags\\\\InstalledSDB\\\\', case=False) & TargetObject.str.contains(r'\\\\DatabasePath', case=False) & ~ Details.str.contains(r':\\\\Windows\\\\AppPatch\\\\Custom', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Driver Added To Disallowed Images In HVCI - Registry",
        "id": "555155a2-03bf-4fe7-af74-d176b3fdbe16",
        "status": "experimental",
        "description": "Detects changes to the \"HVCIDisallowedImages\" registry value to potentially add a driver to the list, in order to prevent it from loading.\n",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Control\\\\CI\\\\', case=False) & TargetObject.str.contains(r'\\\\HVCIDisallowedImages', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Change User Account Associated with the FAX Service",
        "id": "e3fdf743-f05b-4051-990a-b66919be1743",
        "status": "test",
        "description": "Detect change of the user account associated with the FAX service to avoid the escalation problem.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject=='HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\Fax\\\\ObjectName' & ~ Details.str.contains(r'NetworkService', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Outlook EnableUnsafeClientMailRules Setting Enabled - Registry",
        "id": "6763c6c8-bd01-4687-bc8d-4fa52cf8ba08",
        "status": "test",
        "description": "Detects an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Outlook\\\\Security\\\\EnableUnsafeClientMailRules', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Environment Variable Has Been Registered",
        "id": "966315ef-c5e1-4767-ba25-fce9c8de3660",
        "status": "test",
        "description": "Detects the creation of user-specific or system-wide environment variables via the registry. Which contains suspicious commands and strings",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Environment\\\\', case=False) & (Details==['powershell', 'pwsh'] | Details.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Details.str.contains(r'C:\\\\Users\\\\Public\\\\', case=False) | Details.str.contains(r'TVqQAAMAAAAEAAAA', case=False) | Details.str.contains(r'TVpQAAIAAAAEAA8A', case=False) | Details.str.contains(r'TVqAAAEAAAAEABAA', case=False) | Details.str.contains(r'TVoAAAAAAAAAAAAA', case=False) | Details.str.contains(r'TVpTAQEAAAAEAAAA', case=False) | Details.str.contains(r'SW52b2tlL', case=False) | Details.str.contains(r'ludm9rZS', case=False) | Details.str.contains(r'JbnZva2Ut', case=False) | Details.str.contains(r'SQBuAHYAbwBrAGUALQ', case=False) | Details.str.contains(r'kAbgB2AG8AawBlAC0A', case=False) | Details.str.contains(r'JAG4AdgBvAGsAZQAtA', case=False) | Details.str.contains(r'SUVY', case=False) | Details.str.contains(r'SQBFAF', case=False) | Details.str.contains(r'SQBuAH', case=False) | Details.str.contains(r'cwBhA', case=False) | Details.str.contains(r'aWV4', case=False) | Details.str.contains(r'aQBlA', case=False) | Details.str.contains(r'R2V0', case=False) | Details.str.contains(r'dmFy', case=False) | Details.str.contains(r'dgBhA', case=False) | Details.str.contains(r'dXNpbm', case=False) | Details.str.contains(r'H4sIA', case=False) | Details.str.contains(r'Y21k', case=False) | Details.str.contains(r'cABhAH', case=False) | Details.str.contains(r'Qzpc', case=False) | Details.str.contains(r'Yzpc', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Session Manager Autorun Keys Modification",
        "id": "046218bd-e0d8-4113-a3c3-895a12b2b298",
        "status": "test",
        "description": "Detects modification of autostart extensibility point (ASEP) in registry.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001",
            "attack.t1546.009"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\System\\\\CurrentControlSet\\\\Control\\\\Session Manager', case=False) & (TargetObject.str.contains(r'\\\\SetupExecute', case=False) | TargetObject.str.contains(r'\\\\S0InitialCommand', case=False) | TargetObject.str.contains(r'\\\\KnownDlls', case=False) | TargetObject.str.contains(r'\\\\Execute', case=False) | TargetObject.str.contains(r'\\\\BootExecute', case=False) | TargetObject.str.contains(r'\\\\AppCertDlls', case=False)) & ~ Details=='(Empty)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Python Function Execution Security Warning Disabled In Excel - Registry",
        "id": "17e53739-a1fc-4a62-b1b9-87711c2d5e44",
        "status": "test",
        "description": "Detects changes to the registry value \"PythonFunctionWarnings\" that would prevent any warnings or alerts from showing when Python functions are about to be executed.\nThreat actors could run malicious code through the new Microsoft Excel feature that allows Python to run within the spreadsheet.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Office\\\\', case=False) & TargetObject.str.contains(r'\\\\Excel\\\\Security\\\\PythonFunctionWarnings', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Wdigest Enable UseLogonCredential",
        "id": "d6a9b252-c666-4de6-8806-5561bbbd3bdc",
        "status": "test",
        "description": "Detects potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'WDigest\\\\UseLogonCredential', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Defender Service Disabled - Registry",
        "id": "e1aa95de-610a-427d-b9e7-9b46cfafbe6a",
        "status": "test",
        "description": "Detects when an attacker or tool disables the  Windows Defender service (WinDefend) via the registry",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Services\\\\WinDefend\\\\Start', case=False) & Details=='DWORD (0x00000004)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ETW Logging Disabled For rpcrt4.dll",
        "id": "90f342e1-1aaa-4e43-b092-39fda57ed11e",
        "status": "test",
        "description": "Detects changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112",
            "attack.t1562"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows NT\\\\Rpc\\\\ExtErrorInformation', case=False) & (Details==['DWORD (0x00000000)', 'DWORD (0x00000002)'])"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Bypass UAC Using Event Viewer",
        "id": "674202d0-b22a-4af4-ae5f-2eda1f3da1af",
        "status": "test",
        "description": "Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification",
        "tags": [
            "attack.persistence",
            "attack.t1547.010"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'_Classes\\\\mscfile\\\\shell\\\\open\\\\command\\\\(Default)', case=False) & ~ Details.str.contains(r'%SystemRoot%\\\\system32\\\\mmc.exe \"%1\" %', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Path In Keyboard Layout IME File Registry Value",
        "id": "9d8f9bb8-01af-4e15-a3a2-349071530530",
        "status": "test",
        "description": "Detects usage of Windows Input Method Editor (IME) keyboard layout feature, which allows an attacker to load a DLL into the process after sending the WM_INPUTLANGCHANGEREQUEST message.\nBefore doing this, the client needs to register the DLL in a special registry key that is assumed to implement this keyboard layout. This registry key should store a value named \"Ime File\" with a DLL path.\nIMEs are essential for languages that have more characters than can be represented on a standard keyboard, such as Chinese, Japanese, and Korean.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Control\\\\Keyboard Layouts\\\\', case=False) & TargetObject.str.contains(r'Ime File', case=False) & (Details.str.contains(r':\\\\Perflogs\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | Details.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Details.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False) | Details.str.contains(r'\\\\Temporary Internet', case=False) | Details.str.contains(r':\\\\Users\\\\', case=False) & Details.str.contains(r'\\\\Favorites\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\', case=False) & Details.str.contains(r'\\\\Favourites\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\', case=False) & Details.str.contains(r'\\\\Contacts\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Activate Suppression of Windows Security Center Notifications",
        "id": "0c93308a-3f1b-40a9-b649-57ea1a1c1d63",
        "status": "test",
        "description": "Detect set Notification_Suppress to 1 to disable the Windows security center notification",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender\\\\UX Configuration\\\\Notification_Suppress', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Enable Local Manifest Installation With Winget",
        "id": "fa277e82-9b78-42dd-b05c-05555c7b6015",
        "status": "test",
        "description": "Detects changes to the AppInstaller (winget) policy. Specifically the activation of the local manifest installation, which allows a user to install new packages via custom manifests.",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\AppInstaller\\\\EnableLocalManifestFiles', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Antivirus Filter Driver Disallowed On Dev Drive - Registry",
        "id": "31e124fb-5dc4-42a0-83b3-44a69c77b271",
        "status": "experimental",
        "description": "Detects activity that indicates a user disabling the ability for Antivirus mini filter to inspect a \"Dev Drive\".\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\FilterManager\\\\FltmgrDevDriveAllowAntivirusFilter', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Attachment Manager Settings Associations Tamper",
        "id": "a9b6c011-ab69-4ddb-bc0a-c4f21c80ec47",
        "status": "test",
        "description": "Detects tampering with attachment manager settings policies associations to lower the default file type risks (See reference for more information)",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Associations\\\\', case=False) & (TargetObject.str.contains(r'\\\\DefaultFileTypeRisk', case=False) & Details=='DWORD (0x00006152)' | TargetObject.str.contains(r'\\\\LowRiskFileTypes', case=False) & (Details.str.contains(r'.zip;', case=False) | Details.str.contains(r'.rar;', case=False) | Details.str.contains(r'.exe;', case=False) | Details.str.contains(r'.bat;', case=False) | Details.str.contains(r'.com;', case=False) | Details.str.contains(r'.cmd;', case=False) | Details.str.contains(r'.reg;', case=False) | Details.str.contains(r'.msi;', case=False) | Details.str.contains(r'.htm;', case=False) | Details.str.contains(r'.html;', case=False)))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Registry Hide Function from User",
        "id": "5a93eb65-dffa-4543-b761-94aa60098fb6",
        "status": "test",
        "description": "Detects registry modifications that hide internal tools or functions from the user (malware like Agent Tesla, Hermetic Wiper uses this technique)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & ((TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\HideClock', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\HideSCAHealth', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\HideSCANetwork', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\HideSCAPower', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\HideSCAVolume', case=False)) & Details=='DWORD (0x00000001)' | (TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\ShowInfoTip', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\ShowCompColor', case=False)) & Details=='DWORD (0x00000000)')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "COM Object Hijacking Via Modification Of Default System CLSID Default Value",
        "id": "790317c0-0a36-4a6a-a105-6e576bf99a14",
        "status": "experimental",
        "description": "Detects potential COM object hijacking via modification of default system CLSID.",
        "tags": [
            "attack.persistence",
            "attack.t1546.015"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\CLSID\\\\', case=False) & (TargetObject.str.contains(r'\\\\InprocServer32\\\\(Default)', case=False) | TargetObject.str.contains(r'\\\\LocalServer32\\\\(Default)', case=False)) & (TargetObject.str.contains(r'\\\\{1f486a52-3cb1-48fd-8f50-b8dc300d9f9d}\\\\', case=False) | TargetObject.str.contains(r'\\\\{2155fee3-2419-4373-b102-6843707eb41f}\\\\', case=False) | TargetObject.str.contains(r'\\\\{4590f811-1d3a-11d0-891f-00aa004b2e24}\\\\', case=False) | TargetObject.str.contains(r'\\\\{4de225bf-cf59-4cfc-85f7-68b90f185355}\\\\', case=False) | TargetObject.str.contains(r'\\\\{ddc05a5a-351a-4e06-8eaf-54ec1bc2dcea}\\\\', case=False) | TargetObject.str.contains(r'\\\\{F56F6FDD-AA9D-4618-A949-C1B91AF43B1A}\\\\', case=False) | TargetObject.str.contains(r'\\\\{F82B4EF1-93A9-4DDE-8015-F7950A1A6E31}\\\\', case=False) | TargetObject.str.contains(r'\\\\{7849596a-48ea-486e-8937-a2a3009f31a9}\\\\', case=False) | TargetObject.str.contains(r'\\\\{0b91a74b-ad7c-4a9d-b563-29eef9167172}\\\\', case=False) | TargetObject.str.contains(r'\\\\{603D3801-BD81-11d0-A3A5-00C04FD706EC}\\\\', case=False)) & (Details.str.contains(r':\\\\Perflogs\\\\', case=False) | Details.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | Details.str.contains(r'\\\\Desktop\\\\', case=False) | Details.str.contains(r'\\\\Downloads\\\\', case=False) | Details.str.contains(r'\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\', case=False) | Details.str.contains(r'\\\\System32\\\\spool\\\\drivers\\\\color\\\\', case=False) | Details.str.contains(r'\\\\Temporary Internet', case=False) | Details.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | Details.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | Details.str.contains(r'%appdata%', case=False) | Details.str.contains(r'%temp%', case=False) | Details.str.contains(r'%tmp%', case=False) | Details.str.contains(r':\\\\Users\\\\', case=False) & Details.str.contains(r'\\\\Favorites\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\', case=False) & Details.str.contains(r'\\\\Favourites\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\', case=False) & Details.str.contains(r'\\\\Contacts\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\', case=False) & Details.str.contains(r'\\\\Pictures\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via AppCompat RegisterAppRestart Layer",
        "id": "b86852fb-4c77-48f9-8519-eb1b2c308b59",
        "status": "test",
        "description": "Detects the setting of the REGISTERAPPRESTART compatibility layer on an application.\nThis compatibility layer allows an application to register for restart using the \"RegisterApplicationRestart\" API.\nThis can be potentially abused as a persistence mechanism.\n",
        "tags": [
            "attack.persistence",
            "attack.t1546.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AppCompatFlags\\\\Layers\\\\', case=False) & Details.str.contains(r'REGISTERAPPRESTART', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Administrative Share Creation at Startup",
        "id": "c7dcacd0-cc59-4004-b0a4-1d6cdebe6f3e",
        "status": "test",
        "description": "Administrative shares are hidden network shares created by Microsoft Windows NT operating systems that grant system administrators remote access to every disk volume on a network-connected system",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Services\\\\LanmanServer\\\\Parameters\\\\', case=False) & (TargetObject.str.contains(r'\\\\AutoShareWks', case=False) | TargetObject.str.contains(r'\\\\AutoShareServer', case=False)) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Registry Disable System Restore",
        "id": "5de03871-5d46-4539-a82d-3aa992a69a83",
        "status": "test",
        "description": "Detects the modification of the registry to disable a system restore on the computer",
        "tags": [
            "attack.impact",
            "attack.t1490"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Policies\\\\Microsoft\\\\Windows NT\\\\SystemRestore', case=False) | TargetObject.str.contains(r'\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\SystemRestore', case=False)) & (TargetObject.str.contains(r'DisableConfig', case=False) | TargetObject.str.contains(r'DisableSR', case=False)) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Hypervisor Enforced Code Integrity Disabled",
        "id": "8b7273a4-ba5d-4d8a-b04f-11f2900d043a",
        "status": "experimental",
        "description": "Detects changes to the HypervisorEnforcedCodeIntegrity registry key and the \"Enabled\" value being set to 0 in order to disable the Hypervisor Enforced Code Integrity feature. This allows an attacker to load unsigned and untrusted code to be run in the kernel\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\DeviceGuard\\\\HypervisorEnforcedCodeIntegrity', case=False) | TargetObject.str.contains(r'\\\\Control\\\\DeviceGuard\\\\HypervisorEnforcedCodeIntegrity', case=False) | TargetObject.str.contains(r'\\\\Control\\\\DeviceGuard\\\\Scenarios\\\\HypervisorEnforcedCodeIntegrity\\\\Enabled', case=False)) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New BgInfo.EXE Custom WMI Query Registry Configuration",
        "id": "cd277474-5c52-4423-a52b-ac2d7969902f",
        "status": "test",
        "description": "Detects setting of a new registry value related to BgInfo configuration, which can be abused to execute custom WMI query via \"BgInfo.exe\"",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & EventType=='SetValue' & TargetObject.str.contains(r'\\\\Software\\\\Winternals\\\\BGInfo\\\\UserFields\\\\', case=False) & Details.str.contains(r'6', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Internet Explorer Autorun Keys Modification",
        "id": "a80f662f-022f-4429-9b8c-b1a41aaa6688",
        "status": "test",
        "description": "Detects modification of autostart extensibility point (ASEP) in registry.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Internet Explorer', case=False) | TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Internet Explorer', case=False)) & (TargetObject.str.contains(r'\\\\Toolbar', case=False) | TargetObject.str.contains(r'\\\\Extensions', case=False) | TargetObject.str.contains(r'\\\\Explorer Bars', case=False)) & ~ (Details=='(Empty)' | TargetObject.str.contains(r'\\\\Extensions\\\\{2670000A-7350-4f3c-8081-5663EE0C6C49}', case=False) | TargetObject.str.contains(r'\\\\Extensions\\\\{31D09BA0-12F5-4CCE-BE8A-2923E76605DA}', case=False) | TargetObject.str.contains(r'\\\\Extensions\\\\{789FE86F-6FC4-46A1-9849-EDE0DB0C95CA}', case=False) | TargetObject.str.contains(r'\\\\Extensions\\\\{A95fe080-8f5d-11d2-a20b-00aa003c157a}', case=False) | TargetObject.str.contains(r'\\\\Toolbar\\\\ShellBrowser\\\\ITBar7Layout', case=False) | TargetObject.str.contains(r'\\\\Toolbar\\\\ShowDiscussionButton', case=False) | TargetObject.str.contains(r'\\\\Toolbar\\\\Locked', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Outlook Today Page",
        "id": "487bb375-12ef-41f6-baae-c6a1572b4dd1",
        "status": "test",
        "description": "Detects potential persistence activity via outlook today page.\nAn attacker can set a custom page to execute arbitrary code and link to it via the registry values \"URL\" and \"UserDefinedUrl\".\n",
        "tags": [
            "attack.persistence",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'Software\\\\Microsoft\\\\Office\\\\', case=False) & TargetObject.str.contains(r'\\\\Outlook\\\\Today\\\\', case=False) & (TargetObject.str.contains(r'\\\\Stamp', case=False) & Details=='DWORD (0x00000001)' | TargetObject.str.contains(r'\\\\URL', case=False) | TargetObject.str.contains(r'\\\\UserDefinedUrl', case=False)) & ~ ((Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\Updates\\\\', case=False)) & Image.str.contains(r'\\\\OfficeClickToRun.exe', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CurrentControlSet Autorun Keys Modification",
        "id": "f674e36a-4b91-431e-8aef-f8a96c2aca35",
        "status": "test",
        "description": "Detects modification of autostart extensibility point (ASEP) in registry.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SYSTEM\\\\CurrentControlSet\\\\Control', case=False) & (TargetObject.str.contains(r'\\\\Terminal Server\\\\WinStations\\\\RDP-Tcp\\\\InitialProgram', case=False) | TargetObject.str.contains(r'\\\\Terminal Server\\\\Wds\\\\rdpwd\\\\StartupPrograms', case=False) | TargetObject.str.contains(r'\\\\SecurityProviders\\\\SecurityProviders', case=False) | TargetObject.str.contains(r'\\\\SafeBoot\\\\AlternateShell', case=False) | TargetObject.str.contains(r'\\\\Print\\\\Providers', case=False) | TargetObject.str.contains(r'\\\\Print\\\\Monitors', case=False) | TargetObject.str.contains(r'\\\\NetworkProvider\\\\Order', case=False) | TargetObject.str.contains(r'\\\\Lsa\\\\Notification Packages', case=False) | TargetObject.str.contains(r'\\\\Lsa\\\\Authentication Packages', case=False) | TargetObject.str.contains(r'\\\\BootVerificationProgram\\\\ImagePath', case=False)) & ~ (Details=='(Empty)' | Image=='C:\\\\Windows\\\\System32\\\\spoolsv.exe' & TargetObject.str.contains(r'\\\\Print\\\\Monitors\\\\CutePDF Writer Monitor', case=False) & (Details==['cpwmon64_v40.dll', 'CutePDF Writer']) | Image=='C:\\\\Windows\\\\System32\\\\spoolsv.exe' & TargetObject.str.contains(r'Print\\\\Monitors\\\\Appmon\\\\Ports\\\\Microsoft.Office.OneNote_', case=False) & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False)) | Image=='C:\\\\Windows\\\\System32\\\\poqexec.exe' & TargetObject.str.contains(r'\\\\NetworkProvider\\\\Order\\\\ProviderOrder', case=False) | Image=='C:\\\\Windows\\\\System32\\\\spoolsv.exe' & TargetObject.str.contains(r'\\\\Print\\\\Monitors\\\\MONVNC\\\\Driver', case=False) & Details=='VNCpm.dll')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Netsh Helper DLL - Registry",
        "id": "c90362e0-2df3-4e61-94fe-b37615814cb1",
        "status": "test",
        "description": "Detects changes to the Netsh registry key to add a new DLL value. This change might be an indication of a potential persistence attempt by adding a malicious Netsh helper\n",
        "tags": [
            "attack.persistence",
            "attack.t1546.007"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\NetSh', case=False) & Details.str.contains(r'.dll', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "MaxMpxCt Registry Value Changed",
        "id": "0e6a9e62-627e-496c-aef5-bfa39da29b5e",
        "status": "test",
        "description": "Detects changes to the \"MaxMpxCt\" registry value.\nMaxMpxCt specifies the maximum outstanding network requests for the server per client, which is used when negotiating a Server Message Block (SMB) connection with a client. Note if the value is set beyond 125 older Windows 9x clients will fail to negotiate.\nRansomware threat actors and operators (specifically BlackCat) were seen increasing this value in order to handle a higher volume of traffic.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.005"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Services\\\\LanmanServer\\\\Parameters\\\\MaxMpxCt', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ETW Logging Disabled In .NET Processes - Sysmon Registry",
        "id": "bf4fc428-dcc3-4bbd-99fe-2422aeee2544",
        "status": "test",
        "description": "Potential adversaries stopping ETW providers recording loaded .NET assemblies.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112",
            "attack.t1562"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\.NETFramework\\\\ETWEnabled', case=False) & Details=='DWORD (0x00000000)' | (TargetObject.str.contains(r'\\\\COMPlus_ETWEnabled', case=False) | TargetObject.str.contains(r'\\\\COMPlus_ETWFlags', case=False)) & (Details==[0, 'DWORD (0x00000000)']))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass via Event Viewer",
        "id": "7c81fec3-1c1d-43b0-996a-46753041b1b6",
        "status": "test",
        "description": "Detects UAC bypass method using Windows event viewer",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002",
            "car.2019-04-001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\mscfile\\\\shell\\\\open\\\\command', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Macro Enabled In A Potentially Suspicious Document",
        "id": "a166f74e-bf44-409d-b9ba-ea4b2dd8b3cd",
        "status": "test",
        "description": "Detects registry changes to Office trust records where the path is located in a potentially suspicious location",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Security\\\\Trusted Documents\\\\TrustRecords', case=False) & (TargetObject.str.contains(r'/AppData/Local/Microsoft/Windows/INetCache/', case=False) | TargetObject.str.contains(r'/AppData/Local/Temp/', case=False) | TargetObject.str.contains(r'/PerfLogs/', case=False) | TargetObject.str.contains(r'C:/Users/Public/', case=False) | TargetObject.str.contains(r'file:///D:/', case=False) | TargetObject.str.contains(r'file:///E:/', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Provisioning Registry Key Abuse For Binary Proxy Execution - REG",
        "id": "7021255e-5db3-4946-a8b9-0ba7a4644a69",
        "status": "test",
        "description": "Detects potential abuse of the provisioning registry key for indirect command execution through \"Provlaunch.exe\".",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Provisioning\\\\Commands\\\\', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "COM Hijacking via TreatAs",
        "id": "dc5c24af-6995-49b2-86eb-a9ff62199e82",
        "status": "test",
        "description": "Detect modification of TreatAs key to enable \"rundll32.exe -sta\" command",
        "tags": [
            "attack.persistence",
            "attack.t1546.015"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'TreatAs\\\\(Default)', case=False) & ~ (Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\', case=False) & Image.str.contains(r'\\\\OfficeClickToRun.exe', case=False) | Image=='C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe' | Image=='C:\\\\Windows\\\\system32\\\\svchost.exe' | Image==['C:\\\\Windows\\\\system32\\\\msiexec.exe', 'C:\\\\Windows\\\\SysWOW64\\\\msiexec.exe'])"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Microsoft Office Trusted Location Added",
        "id": "f742bde7-9528-42e5-bd82-84f51a8387d2",
        "status": "test",
        "description": "Detects changes to registry keys related to \"Trusted Location\" of Microsoft Office where the path is set to something uncommon. Attackers might add additional trusted locations to avoid macro security restrictions.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'Security\\\\Trusted Locations\\\\Location', case=False) & TargetObject.str.contains(r'\\\\Path', case=False) & ~ (Image.str.contains(r':\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\', case=False) & Image.str.contains(r'\\\\OfficeClickToRun.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\Microsoft Office\\\\', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Microsoft Office\\\\', case=False)) & ~ (Details.str.contains(r'%APPDATA%\\\\Microsoft\\\\Templates', case=False) | Details.str.contains(r'%%APPDATA%%\\\\Microsoft\\\\Templates', case=False) | Details.str.contains(r'%APPDATA%\\\\Microsoft\\\\Word\\\\Startup', case=False) | Details.str.contains(r'%%APPDATA%%\\\\Microsoft\\\\Word\\\\Startup', case=False) | Details.str.contains(r':\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\Templates\\\\', case=False) | Details.str.contains(r':\\\\Program Files\\\\Microsoft Office (x86)\\\\Templates', case=False) | Details.str.contains(r':\\\\Program Files\\\\Microsoft Office\\\\root\\\\Templates\\\\', case=False) | Details.str.contains(r':\\\\Program Files\\\\Microsoft Office\\\\Templates\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Wow6432Node CurrentVersion Autorun Keys Modification",
        "id": "b29aed60-ebd1-442b-9cb5-16a1d0324adb",
        "status": "test",
        "description": "Detects modification of autostart extensibility point (ASEP) in registry.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion', case=False) & (TargetObject.str.contains(r'\\\\ShellServiceObjectDelayLoad', case=False) | TargetObject.str.contains(r'\\\\Run\\\\', case=False) | TargetObject.str.contains(r'\\\\RunOnce\\\\', case=False) | TargetObject.str.contains(r'\\\\RunOnceEx\\\\', case=False) | TargetObject.str.contains(r'\\\\RunServices\\\\', case=False) | TargetObject.str.contains(r'\\\\RunServicesOnce\\\\', case=False) | TargetObject.str.contains(r'\\\\Explorer\\\\ShellServiceObjects', case=False) | TargetObject.str.contains(r'\\\\Explorer\\\\ShellIconOverlayIdentifiers', case=False) | TargetObject.str.contains(r'\\\\Explorer\\\\ShellExecuteHooks', case=False) | TargetObject.str.contains(r'\\\\Explorer\\\\SharedTaskScheduler', case=False) | TargetObject.str.contains(r'\\\\Explorer\\\\Browser Helper Objects', case=False)) & ~ (Details=='(Empty)' | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeUpdate\\\\Install\\\\{', case=False) & Image.str.contains(r'\\\\setup.exe', case=False) | Image=='C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\OfficeClickToRun.exe' & TargetObject.str.contains(r'\\\\Office\\\\ClickToRun\\\\REGISTRY\\\\MACHINE\\\\Software\\\\Wow6432Node\\\\', case=False) | (Image==['C:\\\\Program Files\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe', 'C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe']) & TargetObject.str.contains(r'\\\\Explorer\\\\Browser Helper Objects\\\\{31D09BA0-12F5-4CCE-BE8A-2923E76605DA}\\\\', case=False) | Details.str.contains(r'-A251-47B7-93E1-CDD82E34AF8B}', case=False) | Details=='grpconv -o' | Details.str.contains(r'C:\\\\Program Files', case=False) & Details.str.contains(r'\\\\Dropbox\\\\Client\\\\Dropbox.exe', case=False) & Details.str.contains(r' /systemstartup', case=False) | TargetObject.str.contains(r'\\\\Explorer\\\\Browser Helper Objects\\\\{92EF2EAD-A7CE-4424-B0DB-499CF856608E}\\\\NoExplorer', case=False) | Image.str.contains(r'\\\\windowsdesktop-runtime-', case=False) & (TargetObject.str.contains(r'\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\{e2d1ae32-dd1d-4ad7-a298-10e42e7840fc}', case=False) | TargetObject.str.contains(r'\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\{7037b699-7382-448c-89a7-4765961d2537}', case=False)) & Details.str.contains(r'\"C:\\\\ProgramData\\\\Package Cache\\\\', case=False) & Details.str.contains(r'.exe\" /burn.runonce', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\Updates\\\\', case=False)) & Image.str.contains(r'\\\\OfficeClickToRun.exe', case=False) | Details.str.contains(r'\"C:\\\\ProgramData\\\\Package Cache\\\\{d21a4f20-968a-4b0c-bf04-a38da5f06e41}\\\\windowsdesktop-runtime-', case=False) | Image.str.contains(r'\\\\VC_redist.x64.exe', case=False) & Details.str.contains(r'}\\\\VC_redist.x64.exe\" /burn.runonce', case=False) | (Image.str.contains(r'C:\\\\ProgramData\\\\Package Cache', case=False) | Image.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False)) & (Image.str.contains(r'\\\\winsdksetup.exe', case=False) | Image.str.contains(r'\\\\windowsdesktop-runtime-', case=False) | Image.str.contains(r'\\\\AspNetCoreSharedFrameworkBundle-', case=False)) & Details.str.contains(r' /burn.runonce', case=False) | Image.str.contains(r'C:\\\\Windows\\\\Installer\\\\MSI', case=False) & TargetObject.str.contains(r'\\\\Explorer\\\\Browser Helper Objects', case=False) | Image=='C:\\\\WINDOWS\\\\system32\\\\msiexec.exe' & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Usage of Renamed Sysinternals Tools - RegistrySet",
        "id": "8023f872-3f1d-4301-a384-801889917ab4",
        "status": "test",
        "description": "Detects non-sysinternals tools setting the \"accepteula\" key which normally is set on sysinternals tool execution",
        "tags": [
            "attack.resource-development",
            "attack.t1588.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\PsExec', case=False) | TargetObject.str.contains(r'\\\\ProcDump', case=False) | TargetObject.str.contains(r'\\\\Handle', case=False) | TargetObject.str.contains(r'\\\\LiveKd', case=False) | TargetObject.str.contains(r'\\\\Process Explorer', case=False) | TargetObject.str.contains(r'\\\\PsLoglist', case=False) | TargetObject.str.contains(r'\\\\PsPasswd', case=False) | TargetObject.str.contains(r'\\\\Active Directory Explorer', case=False)) & TargetObject.str.contains(r'\\\\EulaAccepted', case=False) & ~ (Image.str.contains(r'\\\\PsExec.exe', case=False) | Image.str.contains(r'\\\\PsExec64.exe', case=False) | Image.str.contains(r'\\\\procdump.exe', case=False) | Image.str.contains(r'\\\\procdump64.exe', case=False) | Image.str.contains(r'\\\\handle.exe', case=False) | Image.str.contains(r'\\\\handle64.exe', case=False) | Image.str.contains(r'\\\\livekd.exe', case=False) | Image.str.contains(r'\\\\livekd64.exe', case=False) | Image.str.contains(r'\\\\procexp.exe', case=False) | Image.str.contains(r'\\\\procexp64.exe', case=False) | Image.str.contains(r'\\\\psloglist.exe', case=False) | Image.str.contains(r'\\\\psloglist64.exe', case=False) | Image.str.contains(r'\\\\pspasswd.exe', case=False) | Image.str.contains(r'\\\\pspasswd64.exe', case=False) | Image.str.contains(r'\\\\ADExplorer.exe', case=False) | Image.str.contains(r'\\\\ADExplorer64.exe', case=False)) & ~ Image is null"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Netsh Helper DLL Registered From A Suspicious Location",
        "id": "e7b18879-676e-4a0e-ae18-27039185a8e7",
        "status": "test",
        "description": "Detects changes to the Netsh registry key to add a new DLL value that is located on a suspicious location. This change might be an indication of a potential persistence attempt by adding a malicious Netsh helper\n",
        "tags": [
            "attack.persistence",
            "attack.t1546.007"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\NetSh', case=False) & (Details.str.contains(r':\\\\Perflogs\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | Details.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Details.str.contains(r'\\\\Temporary Internet', case=False) | Details.str.contains(r':\\\\Users\\\\', case=False) & Details.str.contains(r'\\\\Favorites\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\', case=False) & Details.str.contains(r'\\\\Favourites\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\', case=False) & Details.str.contains(r'\\\\Contacts\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\', case=False) & Details.str.contains(r'\\\\Pictures\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via MyComputer Registry Keys",
        "id": "8fbe98a8-8f9d-44f8-aa71-8c572e29ef06",
        "status": "test",
        "description": "Detects modification to the \"Default\" value of the \"MyComputer\" key and subkeys to point to a custom binary that will be launched whenever the associated action is executed (see reference section for example)",
        "tags": [
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\MyComputer', case=False) & TargetObject.str.contains(r'(Default)', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Disabled",
        "id": "48437c39-9e5f-47fb-af95-3d663c3f2919",
        "status": "stable",
        "description": "Detects when an attacker tries to disable User Account Control (UAC) by setting the registry value \"EnableLUA\" to 0.\n",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1548.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\EnableLUA', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CurrentVersion NT Autorun Keys Modification",
        "id": "cbf93e5d-ca6c-4722-8bea-e9119007c248",
        "status": "test",
        "description": "Detects modification of autostart extensibility point (ASEP) in registry.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion', case=False) & (TargetObject.str.contains(r'\\\\Winlogon\\\\VmApplet', case=False) | TargetObject.str.contains(r'\\\\Winlogon\\\\Userinit', case=False) | TargetObject.str.contains(r'\\\\Winlogon\\\\Taskman', case=False) | TargetObject.str.contains(r'\\\\Winlogon\\\\Shell', case=False) | TargetObject.str.contains(r'\\\\Winlogon\\\\GpExtensions', case=False) | TargetObject.str.contains(r'\\\\Winlogon\\\\AppSetup', case=False) | TargetObject.str.contains(r'\\\\Winlogon\\\\AlternateShells\\\\AvailableShells', case=False) | TargetObject.str.contains(r'\\\\Windows\\\\IconServiceLib', case=False) | TargetObject.str.contains(r'\\\\Windows\\\\Appinit_Dlls', case=False) | TargetObject.str.contains(r'\\\\Image File Execution Options', case=False) | TargetObject.str.contains(r'\\\\Font Drivers', case=False) | TargetObject.str.contains(r'\\\\Drivers32', case=False) | TargetObject.str.contains(r'\\\\Windows\\\\Run', case=False) | TargetObject.str.contains(r'\\\\Windows\\\\Load', case=False)) & ~ (Details=='(Empty)' | TargetObject.str.contains(r'\\\\Image File Execution Options\\\\', case=False) & (TargetObject.str.contains(r'\\\\DisableExceptionChainValidation', case=False) | TargetObject.str.contains(r'\\\\MitigationOptions', case=False)) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\Temp\\\\', case=False) & Image.str.contains(r'\\\\MicrosoftEdgeUpdate.exe', case=False) | TargetObject.str.contains(r'\\\\ClickToRunStore\\\\HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\', case=False) | TargetObject.str.contains(r'\\\\ClickToRun\\\\REGISTRY\\\\MACHINE\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\', case=False) | Image==['C:\\\\Program Files\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe', 'C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe'] | (Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\Updates\\\\', case=False)) & Image.str.contains(r'\\\\OfficeClickToRun.exe', case=False) | Image=='C:\\\\Windows\\\\system32\\\\svchost.exe' & (TargetObject.str.contains(r'\\\\Winlogon\\\\GPExtensions\\\\{827D319E-6EAC-11D2-A4EA-00C04F79F83A}\\\\PreviousPolicyAreas', case=False) | TargetObject.str.contains(r'\\\\Winlogon\\\\GPExtensions\\\\{827D319E-6EAC-11D2-A4EA-00C04F79F83A}\\\\MaxNoGPOListChangesInterval', case=False)) & (Details==['DWORD (0x00000009)', 'DWORD (0x000003c0)']) | Image.str.contains(r'C:\\\\Windows\\\\Microsoft.NET\\\\Framework', case=False) & Image.str.contains(r'\\\\ngen.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\StandaloneUpdater\\\\OneDriveSetup.exe', case=False) & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\Delete Cached Update Binary', case=False) & Details.str.contains(r'C:\\\\Windows\\\\system32\\\\cmd.exe /q /c del /q \"C:\\\\Users\\\\', case=False) & Details.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\Update\\\\OneDriveSetup.exe\"', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WinSock2 Autorun Keys Modification",
        "id": "d6c2ce7e-afb5-4337-9ca4-4b5254ed0565",
        "status": "test",
        "description": "Detects modification of autostart extensibility point (ASEP) in registry.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\System\\\\CurrentControlSet\\\\Services\\\\WinSock2\\\\Parameters', case=False) & (TargetObject.str.contains(r'\\\\Protocol_Catalog9\\\\Catalog_Entries', case=False) | TargetObject.str.contains(r'\\\\NameSpace_Catalog5\\\\Catalog_Entries', case=False)) & ~ (Details=='(Empty)' | Image=='C:\\\\Windows\\\\System32\\\\MsiExec.exe' | Image=='C:\\\\Windows\\\\syswow64\\\\MsiExec.exe')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Recall Feature Enabled - Registry",
        "id": "75180c5f-4ea1-461a-a4f6-6e4700c065d4",
        "status": "experimental",
        "description": "Detects the enabling of the Windows Recall feature via registry manipulation. Windows Recall can be enabled by setting the value of \"DisableAIDataAnalysis\" to \"0\".\nAdversaries may enable Windows Recall as part of post-exploitation discovery and collection activities.\nThis rule assumes that Recall is already explicitly disabled on the host, and subsequently enabled by the adversary.\n",
        "tags": [
            "attack.collection",
            "attack.t1113"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Software\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsAI\\\\DisableAIDataAnalysis', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential PowerShell Execution Policy Tampering",
        "id": "fad91067-08c5-4d1a-8d8c-d96a21b37814",
        "status": "test",
        "description": "Detects changes to the PowerShell execution policy in order to bypass signing requirements for script execution",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\ShellIds\\\\Microsoft.PowerShell\\\\ExecutionPolicy', case=False) | TargetObject.str.contains(r'\\\\Policies\\\\Microsoft\\\\Windows\\\\PowerShell\\\\ExecutionPolicy', case=False)) & (Details.str.contains(r'Bypass', case=False) | Details.str.contains(r'Unrestricted', case=False)) & ~ (Image.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Excel Add-in - Registry",
        "id": "961e33d1-4f86-4fcf-80ab-930a708b2f82",
        "status": "test",
        "description": "Detect potential persistence via the creation of an excel add-in (XLL) file to make it run automatically when Excel is started.",
        "tags": [
            "attack.persistence",
            "attack.t1137.006"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'Software\\\\Microsoft\\\\Office\\\\', case=False) & TargetObject.str.contains(r'\\\\Excel\\\\Options', case=False) & Details.str.contains(r'/R ', case=False) & Details.str.contains(r'.xll', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Service Installed",
        "id": "f2485272-a156-4773-82d7-1d178bc4905b",
        "status": "test",
        "description": "Detects installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders.\nBoth services are used in the tool Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU (https://github.com/hfiref0x/KDU)\n",
        "tags": [
            "attack.t1562.001",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject==['HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\NalDrv\\\\ImagePath', 'HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\PROCEXP152\\\\ImagePath']) & ~ ((Image.str.contains(r'\\\\procexp64.exe', case=False) | Image.str.contains(r'\\\\procexp.exe', case=False) | Image.str.contains(r'\\\\procmon64.exe', case=False) | Image.str.contains(r'\\\\procmon.exe', case=False) | Image.str.contains(r'\\\\handle.exe', case=False) | Image.str.contains(r'\\\\handle64.exe', case=False)) & Details.str.contains(r'\\\\WINDOWS\\\\system32\\\\Drivers\\\\PROCEXP152.SYS', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disabled Windows Defender Eventlog",
        "id": "fcddca7c-b9c0-4ddf-98da-e1e2d18b0157",
        "status": "test",
        "description": "Detects the disabling of the Windows Defender eventlog as seen in relation to Lockbit 3.0 infections",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft-Windows-Windows Defender/Operational\\\\Enabled', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Execution DLL of Choice Using WAB.EXE",
        "id": "fc014922-5def-4da9-a0fc-28c973f41bfb",
        "status": "test",
        "description": "This rule detects that the path to the DLL written in the registry is different from the default one. Launched WAB.exe tries to load the DLL from Registry.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\WAB\\\\DLLPath', case=False) & ~ Details=='%CommonProgramFiles%\\\\System\\\\wab32.dll'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "RDP Sensitive Settings Changed to Zero",
        "id": "a2863fbc-d5cb-48d5-83fb-d976d4b1743b",
        "status": "test",
        "description": "Detects tampering of RDP Terminal Service/Server sensitive settings.\nSuch as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections', etc.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\fDenyTSConnections', case=False) | TargetObject.str.contains(r'\\\\fSingleSessionPerUser', case=False) | TargetObject.str.contains(r'\\\\UserAuthentication', case=False)) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential SentinelOne Shell Context Menu Scan Command Tampering",
        "id": "6c304b02-06e6-402d-8be4-d5833cdf8198",
        "status": "test",
        "description": "Detects potentially suspicious changes to the SentinelOne context menu scan command by a process other than SentinelOne.",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\shell\\\\SentinelOneScan\\\\command\\\\', case=False) & ~ ((Details.str.contains(r'C:\\\\Program Files\\\\SentinelOne\\\\Sentinel Agent', case=False) | Details.str.contains(r'C:\\\\Program Files (x86)\\\\SentinelOne\\\\Sentinel Agent', case=False)) & Details.str.contains(r'\\\\SentinelScanFromContextMenu.exe', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\SentinelOne\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\SentinelOne\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Periodic Backup For System Registry Hives Enabled",
        "id": "973ef012-8f1a-4c40-93b4-7e659a5cd17f",
        "status": "experimental",
        "description": "Detects the enabling of the \"EnablePeriodicBackup\" registry value. Once enabled, The OS will backup System registry hives on restarts to the \"C:\\Windows\\System32\\config\\RegBack\" folder. Windows creates a \"RegIdleBackup\" task to manage subsequent backups.\nRegistry backup was a default behavior on Windows and was disabled as of \"Windows 10, version 1803\".\n",
        "tags": [
            "attack.collection",
            "attack.t1113"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Control\\\\Session Manager\\\\Configuration Manager\\\\EnablePeriodicBackup', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Custom Protocol Handler",
        "id": "fdbf0b9d-0182-4c43-893b-a1eaab92d085",
        "status": "test",
        "description": "Detects potential persistence activity via the registering of a new custom protocole handlers. While legitimate applications register protocole handlers often times during installation. And attacker can abuse this by setting a custom handler to be used as a persistence mechanism.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'HKCR\\\\', case=False) & Details.str.contains(r'URL:', case=False) & ~ (Details.str.contains(r'URL:ms-', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Default RDP Port Changed to Non Standard Port",
        "id": "509e84b9-a71a-40e0-834f-05470369bd1e",
        "status": "test",
        "description": "Detects changes to the default RDP port.\nRemote desktop is a common feature in operating systems. It allows a user to log into a remote system using an interactive session with a graphical user interface.\nMicrosoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).\n",
        "tags": [
            "attack.persistence",
            "attack.t1547.010"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Control\\\\Terminal Server\\\\WinStations\\\\RDP-Tcp\\\\PortNumber', case=False) & ~ Details=='DWORD (0x00000d3d)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "RestrictedAdminMode Registry Value Tampering",
        "id": "d6ce7ebd-260b-4323-9768-a9631c8d4db2",
        "status": "test",
        "description": "Detects changes to the \"DisableRestrictedAdmin\" registry value in order to disable or enable RestrictedAdmin mode.\nRestrictedAdmin mode prevents the transmission of reusable credentials to the remote system to which you connect using Remote Desktop.\nThis prevents your credentials from being harvested during the initial connection process if the remote server has been compromise\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'System\\\\CurrentControlSet\\\\Control\\\\Lsa\\\\DisableRestrictedAdmin', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Shim Database Modification",
        "id": "dfb5b4e8-91d0-4291-b40a-e3b0d3942c45",
        "status": "test",
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.\nThe Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time\n",
        "tags": [
            "attack.persistence",
            "attack.t1546.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AppCompatFlags\\\\InstalledSDB\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AppCompatFlags\\\\Custom\\\\', case=False)) & ~ Details==''"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Windows Defender Functionalities Via Registry Keys",
        "id": "0eb46774-f1ab-4a74-8238-1155855f2263",
        "status": "test",
        "description": "Detects when attackers or tools disable Windows Defender functionalities via the Windows registry",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows Defender\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender Security Center\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender\\\\', case=False)) & ((TargetObject.str.contains(r'\\\\DisableAntiSpyware', case=False) | TargetObject.str.contains(r'\\\\DisableAntiVirus', case=False) | TargetObject.str.contains(r'\\\\DisableBehaviorMonitoring', case=False) | TargetObject.str.contains(r'\\\\DisableBlockAtFirstSeen', case=False) | TargetObject.str.contains(r'\\\\DisableEnhancedNotifications', case=False) | TargetObject.str.contains(r'\\\\DisableIntrusionPreventionSystem', case=False) | TargetObject.str.contains(r'\\\\DisableIOAVProtection', case=False) | TargetObject.str.contains(r'\\\\DisableOnAccessProtection', case=False) | TargetObject.str.contains(r'\\\\DisableRealtimeMonitoring', case=False) | TargetObject.str.contains(r'\\\\DisableScanOnRealtimeEnable', case=False) | TargetObject.str.contains(r'\\\\DisableScriptScanning', case=False)) & Details=='DWORD (0x00000001)' | (TargetObject.str.contains(r'\\\\DisallowExploitProtectionOverride', case=False) | TargetObject.str.contains(r'\\\\Features\\\\TamperProtection', case=False) | TargetObject.str.contains(r'\\\\MpEngine\\\\MpEnablePus', case=False) | TargetObject.str.contains(r'\\\\PUAProtection', case=False) | TargetObject.str.contains(r'\\\\Signature Update\\\\ForceUpdateFromMU', case=False) | TargetObject.str.contains(r'\\\\SpyNet\\\\SpynetReporting', case=False) | TargetObject.str.contains(r'\\\\SpyNet\\\\SubmitSamplesConsent', case=False) | TargetObject.str.contains(r'\\\\Windows Defender Exploit Guard\\\\Controlled Folder Access\\\\EnableControlledFolderAccess', case=False)) & Details=='DWORD (0x00000000)') & ~ (Image.str.contains(r'C:\\\\Program Files\\\\Symantec\\\\Symantec Endpoint Protection\\\\', case=False) & Image.str.contains(r'\\\\sepWscSvc64.exe', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential WerFault ReflectDebugger Registry Value Abuse",
        "id": "0cf2e1c6-8d10-4273-8059-738778f981ad",
        "status": "test",
        "description": "Detects potential WerFault \"ReflectDebugger\" registry value abuse for persistence.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & EventType=='SetValue' & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\Hangs\\\\ReflectDebugger', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Outlook Security Settings Updated - Registry",
        "id": "c3cefdf4-6703-4e1c-bad8-bf422fc5015a",
        "status": "test",
        "description": "Detects changes to the registry values related to outlook security settings",
        "tags": [
            "attack.persistence",
            "attack.t1137"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Office\\\\', case=False) & TargetObject.str.contains(r'\\\\Outlook\\\\Security\\\\', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Visual Studio Tools for Office",
        "id": "9d15044a-7cfe-4d23-8085-6ebc11df7685",
        "status": "test",
        "description": "Detects persistence via Visual Studio Tools for Office (VSTO) add-ins in Office applications.",
        "tags": [
            "attack.t1137.006",
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Office\\\\Outlook\\\\Addins\\\\', case=False) | TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Office\\\\Word\\\\Addins\\\\', case=False) | TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Office\\\\Excel\\\\Addins\\\\', case=False) | TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Office\\\\Powerpoint\\\\Addins\\\\', case=False) | TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\VSTO\\\\Security\\\\Inclusion\\\\', case=False)) & ~ (Image.str.contains(r'\\\\msiexec.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\integrator.exe', case=False) | Image.str.contains(r'\\\\OfficeClickToRun.exe', case=False) | Image.str.contains(r'\\\\winword.exe', case=False) | Image.str.contains(r'\\\\visio.exe', case=False) | Image.str.contains(r'\\\\Teams.exe', case=False) | Image=='C:\\\\Program Files\\\\AVG\\\\Antivirus\\\\RegSvr.exe' & TargetObject.str.contains(r'\\\\Microsoft\\\\Office\\\\Outlook\\\\Addins\\\\Antivirus.AsOutExt\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Desktop Background Change Via Registry",
        "id": "85b88e05-dadc-430b-8a9e-53ff1cd30aae",
        "status": "test",
        "description": "Detects registry value settings that would replace the user's desktop background.\nThis is a common technique used by malware to change the desktop background to a ransom note or other image.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.impact",
            "attack.t1112",
            "attack.t1491.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'Control Panel\\\\Desktop', case=False) | TargetObject.str.contains(r'CurrentVersion\\\\Policies\\\\ActiveDesktop', case=False) | TargetObject.str.contains(r'CurrentVersion\\\\Policies\\\\System', case=False)) & (TargetObject.str.contains(r'NoChangingWallpaper', case=False) & Details=='DWORD (0x00000001)' | TargetObject.str.contains(r'\\\\Wallpaper', case=False) | TargetObject.str.contains(r'\\\\WallpaperStyle', case=False) & Details=='2') & ~ Image.str.contains(r'\\\\svchost.exe', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Notification Disabled",
        "id": "c5f6a85d-b647-40f7-bbad-c10b66bab038",
        "status": "experimental",
        "description": "Detects when an attacker tries to disable User Account Control (UAC) notification by tampering with the \"UACDisableNotify\" value.\nUAC is a critical security feature in Windows that prevents unauthorized changes to the operating system. It prompts the user for permission or an administrator password before allowing actions that could affect the system's operation or change settings that affect other users.\nWhen \"UACDisableNotify\" is set to 1, UAC prompts are suppressed.\n",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1548.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Security Center\\\\UACDisableNotify', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Winlogon Notify Key Logon Persistence",
        "id": "bbf59793-6efb-4fa1-95ca-a7d288e52c88",
        "status": "test",
        "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in.\nWinlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete.\n",
        "tags": [
            "attack.persistence",
            "attack.t1547.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Notify\\\\logon', case=False) & Details.str.contains(r'.dll', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sysmon Driver Altitude Change",
        "id": "4916a35e-bfc4-47d0-8e25-a003d7067061",
        "status": "test",
        "description": "Detects changes in Sysmon driver altitude value.\nIf the Sysmon driver is configured to load at an altitude of another registered service, it will fail to load at boot.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Services\\\\', case=False) & TargetObject.str.contains(r'\\\\Instances\\\\Sysmon Instance\\\\Altitude', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Change Winevt Channel Access Permission Via Registry",
        "id": "7d9263bd-dc47-4a58-bc92-5474abab390c",
        "status": "test",
        "description": "Detects tampering with the \"ChannelAccess\" registry key in order to change access to Windows event channel.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\', case=False) & TargetObject.str.contains(r'\\\\ChannelAccess', case=False) & (Details.str.contains(r'(A;;0x1;;;LA)', case=False) | Details.str.contains(r'(A;;0x1;;;SY)', case=False) | Details.str.contains(r'(A;;0x5;;;BA)', case=False)) & ~ (Image=='C:\\\\Windows\\\\servicing\\\\TrustedInstaller.exe' | Image.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False) & Image.str.contains(r'\\\\TiWorker.exe', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ServiceDll Hijack",
        "id": "612e47e9-8a59-43a6-b404-f48683f45bd6",
        "status": "test",
        "description": "Detects changes to the \"ServiceDLL\" value related to a service in the registry.\nThis is often used as a method of persistence.\n",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1543.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\System\\\\', case=False) & TargetObject.str.contains(r'ControlSet', case=False) & TargetObject.str.contains(r'\\\\Services\\\\', case=False) & TargetObject.str.contains(r'\\\\Parameters\\\\ServiceDll', case=False) & ~ (Details=='C:\\\\Windows\\\\system32\\\\spool\\\\drivers\\\\x64\\\\3\\\\PrintConfig.dll' | Image=='C:\\\\Windows\\\\system32\\\\lsass.exe' & TargetObject.str.contains(r'\\\\Services\\\\NTDS\\\\Parameters\\\\ServiceDll', case=False) & Details=='%%systemroot%%\\\\system32\\\\ntdsa.dll' | Image=='C:\\\\Windows\\\\System32\\\\poqexec.exe') & ~ (Image.str.contains(r'\\\\regsvr32.exe', case=False) & Details=='C:\\\\Windows\\\\System32\\\\STAgent.dll')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Classes Autorun Keys Modification",
        "id": "9df5f547-c86a-433e-b533-f2794357e242",
        "status": "test",
        "description": "Detects modification of autostart extensibility point (ASEP) in registry.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Software\\\\Classes', case=False) & (TargetObject.str.contains(r'\\\\Folder\\\\ShellEx\\\\ExtShellFolderViews', case=False) | TargetObject.str.contains(r'\\\\Folder\\\\ShellEx\\\\DragDropHandlers', case=False) | TargetObject.str.contains(r'\\\\Folder\\\\Shellex\\\\ColumnHandlers', case=False) | TargetObject.str.contains(r'\\\\Filter', case=False) | TargetObject.str.contains(r'\\\\Exefile\\\\Shell\\\\Open\\\\Command\\\\(Default)', case=False) | TargetObject.str.contains(r'\\\\Directory\\\\Shellex\\\\DragDropHandlers', case=False) | TargetObject.str.contains(r'\\\\Directory\\\\Shellex\\\\CopyHookHandlers', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\\\Instance', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\\\Instance', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\\\Instance', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\\\Instance', case=False) | TargetObject.str.contains(r'\\\\Classes\\\\AllFileSystemObjects\\\\ShellEx\\\\DragDropHandlers', case=False) | TargetObject.str.contains(r'\\\\.exe', case=False) | TargetObject.str.contains(r'\\\\.cmd', case=False) | TargetObject.str.contains(r'\\\\ShellEx\\\\PropertySheetHandlers', case=False) | TargetObject.str.contains(r'\\\\ShellEx\\\\ContextMenuHandlers', case=False)) & ~ (Details=='(Empty)' | Details=='{807583E5-5146-11D5-A672-00B0D022E945}' | Image=='C:\\\\Windows\\\\System32\\\\drvinst.exe' | Image=='C:\\\\Windows\\\\System32\\\\svchost.exe' & TargetObject.str.contains(r'\\\\lnkfile\\\\shellex\\\\ContextMenuHandlers\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Wow6432Node Windows NT CurrentVersion Autorun Keys Modification",
        "id": "480421f9-417f-4d3b-9552-fd2728443ec8",
        "status": "test",
        "description": "Detects modification of autostart extensibility point (ASEP) in registry.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion', case=False) & (TargetObject.str.contains(r'\\\\Windows\\\\Appinit_Dlls', case=False) | TargetObject.str.contains(r'\\\\Image File Execution Options', case=False) | TargetObject.str.contains(r'\\\\Drivers32', case=False)) & ~ (Details==['(Empty)', '\\\\REGISTRY\\\\MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options'])"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Trust Access Disable For VBApplications",
        "id": "1a5c46e9-f32f-42f7-b2bc-6e9084db7fbf",
        "status": "test",
        "description": "Detects registry changes to Microsoft Office \"AccessVBOM\" to a value of \"1\" which disables trust access for VBA on the victim machine and lets attackers execute malicious macros without any Microsoft Office warnings.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Security\\\\AccessVBOM', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Script Execution Policy Enabled",
        "id": "8218c875-90b9-42e2-b60d-0b0069816d10",
        "status": "test",
        "description": "Detects the enabling of the PowerShell script execution policy. Once enabled, this policy allows scripts to be executed.",
        "tags": [
            "attack.execution"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Policies\\\\Microsoft\\\\Windows\\\\PowerShell\\\\EnableScripts', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious ODBC Driver Registered",
        "id": "e4d22291-f3d5-4b78-9a0c-a1fbaf32a6a4",
        "status": "test",
        "description": "Detects the registration of a new ODBC driver where the driver is located in a potentially suspicious location",
        "tags": [
            "attack.persistence",
            "attack.t1003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\', case=False) & (TargetObject.str.contains(r'\\\\Driver', case=False) | TargetObject.str.contains(r'\\\\Setup', case=False)) & (Details.str.contains(r':\\\\PerfLogs\\\\', case=False) | Details.str.contains(r':\\\\ProgramData\\\\', case=False) | Details.str.contains(r':\\\\Temp\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\Registration\\\\CRMLog', case=False) | Details.str.contains(r':\\\\Windows\\\\System32\\\\com\\\\dmp\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\System32\\\\FxsTmp\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\System32\\\\Microsoft\\\\Crypto\\\\RSA\\\\MachineKeys\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\System32\\\\spool\\\\PRINTERS\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\System32\\\\spool\\\\SERVERS\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\System32\\\\Tasks_Migrated\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\System32\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\SysWOW64\\\\com\\\\dmp\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\SysWOW64\\\\FxsTmp\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\PLA\\\\System\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\Tracing\\\\', case=False) | Details.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Details.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Office Macros Warning Disabled",
        "id": "91239011-fe3c-4b54-9f24-15c86bb65913",
        "status": "test",
        "description": "Detects registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Security\\\\VBAWarnings', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via GlobalFlags",
        "id": "36803969-5421-41ec-b92f-8500f79c23b0",
        "status": "test",
        "description": "Detects registry persistence technique using the GlobalFlags and SilentProcessExit keys",
        "tags": [
            "attack.privilege-escalation",
            "attack.persistence",
            "attack.defense-evasion",
            "attack.t1546.012",
            "car.2013-01-002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\', case=False) & TargetObject.str.contains(r'\\\\Image File Execution Options\\\\', case=False) & TargetObject.str.contains(r'\\\\GlobalFlag', case=False) | TargetObject.str.contains(r'\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\', case=False) & TargetObject.str.contains(r'\\\\SilentProcessExit\\\\', case=False) & (TargetObject.str.contains(r'\\\\ReportingMode', case=False) | TargetObject.str.contains(r'\\\\MonitorProcess', case=False)))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Windows Event Logging Via Registry",
        "id": "2f78da12-f7c7-430b-8b19-a28f269b77a3",
        "status": "test",
        "description": "Detects tampering with the \"Enabled\" registry key in order to disable Windows logging of a Windows event channel",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\', case=False) & TargetObject.str.contains(r'\\\\Enabled', case=False) & Details=='DWORD (0x00000000)' & ~ (Image=='C:\\\\Windows\\\\system32\\\\wevtutil.exe' | Image.str.contains(r'C:\\\\Windows\\\\winsxs\\\\', case=False) & Image.str.contains(r'\\\\TiWorker.exe', case=False) | Image=='C:\\\\Windows\\\\System32\\\\svchost.exe' & (TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft-Windows-FileInfoMinifilter', case=False) | TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft-Windows-ASN1\\\\', case=False) | TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft-Windows-Kernel-AppCompat\\\\', case=False) | TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft-Windows-Runtime\\\\Error\\\\', case=False) | TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft-Windows-CAPI2/Operational\\\\', case=False)) | Image=='C:\\\\Windows\\\\servicing\\\\TrustedInstaller.exe' & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft-Windows-Compat-Appraiser', case=False)) & ~ (Image=='' | Image is null)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Registry Persistence via Explorer Run Key",
        "id": "b7916c2a-fa2f-4795-9477-32b731f70f11",
        "status": "test",
        "description": "Detects a possible persistence mechanism using RUN key for Windows Explorer and pointing to a suspicious folder",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\Run', case=False) & (Details.str.contains(r':\\\\$Recycle.bin\\\\', case=False) | Details.str.contains(r':\\\\ProgramData\\\\', case=False) | Details.str.contains(r':\\\\Temp\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\Default\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | Details.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Persistence Via Disk Cleanup Handler - Autorun",
        "id": "d4e2745c-f0c6-4bde-a3ab-b553b3f693cc",
        "status": "test",
        "description": "Detects when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun.\nThe disk cleanup manager is part of the operating system.\nIt displays the dialog box [\u2026] The user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\VolumeCaches\\\\', case=False) & (TargetObject.str.contains(r'\\\\Autorun', case=False) & Details=='DWORD (0x00000001)' | (TargetObject.str.contains(r'\\\\CleanupString', case=False) | TargetObject.str.contains(r'\\\\PreCleanupString', case=False)) & (Details.str.contains(r'cmd', case=False) | Details.str.contains(r'powershell', case=False) | Details.str.contains(r'rundll32', case=False) | Details.str.contains(r'mshta', case=False) | Details.str.contains(r'cscript', case=False) | Details.str.contains(r'wscript', case=False) | Details.str.contains(r'wsl', case=False) | Details.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | Details.str.contains(r'\\\\Windows\\\\TEMP\\\\', case=False) | Details.str.contains(r'\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\', case=False)))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Application Allowed Through Exploit Guard",
        "id": "42205c73-75c8-4a63-9db1-e3782e06fda0",
        "status": "test",
        "description": "Detects applications being added to the \"allowed applications\" list of exploit guard in order to bypass controlled folder settings",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows Defender\\\\Windows Defender Exploit Guard\\\\Controlled Folder Access\\\\AllowedApplications', case=False) & (TargetObject.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | TargetObject.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | TargetObject.str.contains(r'\\\\Desktop\\\\', case=False) | TargetObject.str.contains(r'\\\\PerfLogs\\\\', case=False) | TargetObject.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Application in AppCompat",
        "id": "60936b49-fca0-4f32-993d-7415edcf9a5d",
        "status": "test",
        "description": "A General detection for a new application in AppCompat. This indicates an application executing for the first time on an endpoint.",
        "tags": [
            "attack.execution",
            "attack.t1204.002"
        ],
        "level": "informational",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\AppCompatFlags\\\\Compatibility Assistant\\\\Store\\\\', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ScreenSaver Registry Key Set",
        "id": "40b6e656-4e11-4c0c-8772-c1cc6dae34ce",
        "status": "test",
        "description": "Detects registry key established after masqueraded .scr file execution using Rundll32 through desk.cpl",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & Image.str.contains(r'\\\\rundll32.exe', case=False) & TargetObject.str.contains(r'\\\\Control Panel\\\\Desktop\\\\SCRNSAVE.EXE', case=False) & Details.str.contains(r'.scr', case=False) & ~ (Details.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Details.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Enabling COR Profiler Environment Variables",
        "id": "ad89044a-8f49-4673-9a55-cbd88a1b374f",
        "status": "test",
        "description": "Detects .NET Framework CLR and .NET Core CLR \"cor_enable_profiling\" and \"cor_profiler\" variables being set and configured.",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1574.012"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\COR_ENABLE_PROFILING', case=False) | TargetObject.str.contains(r'\\\\COR_PROFILER', case=False) | TargetObject.str.contains(r'\\\\CORECLR_ENABLE_PROFILING', case=False) | TargetObject.str.contains(r'\\\\CORECLR_PROFILER_PATH', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New TimeProviders Registered With Uncommon DLL Name",
        "id": "e88a6ddc-74f7-463b-9b26-f69fc0d2ce85",
        "status": "test",
        "description": "Detects processes setting a new DLL in DllName in under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nAdversaries may abuse time providers to execute DLLs when the system boots.\nThe Windows Time service (W32Time) enables time synchronization across and within domains.\n",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1547.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Services\\\\W32Time\\\\TimeProviders', case=False) & TargetObject.str.contains(r'\\\\DllName', case=False) & ~ (Details==['%SystemRoot%\\\\System32\\\\vmictimeprovider.dll', '%systemroot%\\\\system32\\\\w32time.dll', 'C:\\\\Windows\\\\SYSTEM32\\\\w32time.DLL'])"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via TypedPaths",
        "id": "086ae989-9ca6-4fe7-895a-759c5544f247",
        "status": "test",
        "description": "Detects modification addition to the 'TypedPaths' key in the user or admin registry from a non standard application. Which might indicate persistence attempt",
        "tags": [
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\TypedPaths\\\\', case=False) & ~ (Image==['C:\\\\Windows\\\\explorer.exe', 'C:\\\\Windows\\\\SysWOW64\\\\explorer.exe'])"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Modification of IE Registry Settings",
        "id": "d88d0ab2-e696-4d40-a2ed-9790064e66b3",
        "status": "test",
        "description": "Detects modification of the registry settings used for Internet Explorer and other Windows components that use these settings. An attacker can abuse this registry key to add a domain to the trusted sites Zone or insert javascript for persistence",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings', case=False) & ~ (Details.str.contains(r'DWORD', case=False) | Details==['Cookie:', 'Visited:', '(Empty)'] | TargetObject.str.contains(r'\\\\Cache', case=False) | TargetObject.str.contains(r'\\\\ZoneMap', case=False) | TargetObject.str.contains(r'\\\\WpadDecision', case=False) | Details=='Binary Data' | TargetObject.str.contains(r'\\\\Accepted Documents\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Windows Firewall by Registry",
        "id": "e78c408a-e2ea-43cd-b5ea-51975cf358c0",
        "status": "test",
        "description": "Detect set EnableFirewall to 0 to disable the Windows firewall",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\WindowsFirewall\\\\StandardProfile\\\\EnableFirewall', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\WindowsFirewall\\\\DomainProfile\\\\EnableFirewall', case=False)) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Running Chrome VPN Extensions via the Registry 2 VPN Extension",
        "id": "b64a026b-8deb-4c1d-92fd-98893209dff1",
        "status": "test",
        "description": "Running Chrome VPN Extensions via the Registry install 2 vpn extension",
        "tags": [
            "attack.persistence",
            "attack.t1133"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'Software\\\\Wow6432Node\\\\Google\\\\Chrome\\\\Extensions', case=False) & TargetObject.str.contains(r'update_url', case=False) & (TargetObject.str.contains(r'fdcgdnkidjaadafnichfpabhfomcebme', case=False) | TargetObject.str.contains(r'fcfhplploccackoneaefokcmbjfbkenj', case=False) | TargetObject.str.contains(r'bihmplhobchoageeokmgbdihknkjbknd', case=False) | TargetObject.str.contains(r'gkojfkhlekighikafcpjkiklfbnlmeio', case=False) | TargetObject.str.contains(r'jajilbjjinjmgcibalaakngmkilboobh', case=False) | TargetObject.str.contains(r'gjknjjomckknofjidppipffbpoekiipm', case=False) | TargetObject.str.contains(r'nabbmpekekjknlbkgpodfndbodhijjem', case=False) | TargetObject.str.contains(r'kpiecbcckbofpmkkkdibbllpinceiihk', case=False) | TargetObject.str.contains(r'nlbejmccbhkncgokjcmghpfloaajcffj', case=False) | TargetObject.str.contains(r'omghfjlpggmjjaagoclmmobgdodcjboh', case=False) | TargetObject.str.contains(r'bibjcjfmgapbfoljiojpipaooddpkpai', case=False) | TargetObject.str.contains(r'mpcaainmfjjigeicjnlkdfajbioopjko', case=False) | TargetObject.str.contains(r'jljopmgdobloagejpohpldgkiellmfnc', case=False) | TargetObject.str.contains(r'lochiccbgeohimldjooaakjllnafhaid', case=False) | TargetObject.str.contains(r'nhnfcgpcbfclhfafjlooihdfghaeinfc', case=False) | TargetObject.str.contains(r'ookhnhpkphagefgdiemllfajmkdkcaim', case=False) | TargetObject.str.contains(r'namfblliamklmeodpcelkokjbffgmeoo', case=False) | TargetObject.str.contains(r'nbcojefnccbanplpoffopkoepjmhgdgh', case=False) | TargetObject.str.contains(r'majdfhpaihoncoakbjgbdhglocklcgno', case=False) | TargetObject.str.contains(r'lnfdmdhmfbimhhpaeocncdlhiodoblbd', case=False) | TargetObject.str.contains(r'eppiocemhmnlbhjplcgkofciiegomcon', case=False) | TargetObject.str.contains(r'cocfojppfigjeefejbpfmedgjbpchcng', case=False) | TargetObject.str.contains(r'foiopecknacmiihiocgdjgbjokkpkohc', case=False) | TargetObject.str.contains(r'hhdobjgopfphlmjbmnpglhfcgppchgje', case=False) | TargetObject.str.contains(r'jgbaghohigdbgbolncodkdlpenhcmcge', case=False) | TargetObject.str.contains(r'inligpkjkhbpifecbdjhmdpcfhnlelja', case=False) | TargetObject.str.contains(r'higioemojdadgdbhbbbkfbebbdlfjbip', case=False) | TargetObject.str.contains(r'hipncndjamdcmphkgngojegjblibadbe', case=False) | TargetObject.str.contains(r'iolonopooapdagdemdoaihahlfkncfgg', case=False) | TargetObject.str.contains(r'nhfjkakglbnnpkpldhjmpmmfefifedcj', case=False) | TargetObject.str.contains(r'jpgljfpmoofbmlieejglhonfofmahini', case=False) | TargetObject.str.contains(r'fgddmllnllkalaagkghckoinaemmogpe', case=False) | TargetObject.str.contains(r'ejkaocphofnobjdedneohbbiilggdlbi', case=False) | TargetObject.str.contains(r'keodbianoliadkoelloecbhllnpiocoi', case=False) | TargetObject.str.contains(r'hoapmlpnmpaehilehggglehfdlnoegck', case=False) | TargetObject.str.contains(r'poeojclicodamonabcabmapamjkkmnnk', case=False) | TargetObject.str.contains(r'dfkdflfgjdajbhocmfjolpjbebdkcjog', case=False) | TargetObject.str.contains(r'kcdahmgmaagjhocpipbodaokikjkampi', case=False) | TargetObject.str.contains(r'klnkiajpmpkkkgpgbogmcgfjhdoljacg', case=False) | TargetObject.str.contains(r'lneaocagcijjdpkcabeanfpdbmapcjjg', case=False) | TargetObject.str.contains(r'pgfpignfckbloagkfnamnolkeaecfgfh', case=False) | TargetObject.str.contains(r'jplnlifepflhkbkgonidnobkakhmpnmh', case=False) | TargetObject.str.contains(r'jliodmnojccaloajphkingdnpljdhdok', case=False) | TargetObject.str.contains(r'hnmpcagpplmpfojmgmnngilcnanddlhb', case=False) | TargetObject.str.contains(r'ffbkglfijbcbgblgflchnbphjdllaogb', case=False) | TargetObject.str.contains(r'kcndmbbelllkmioekdagahekgimemejo', case=False) | TargetObject.str.contains(r'jdgilggpfmjpbodmhndmhojklgfdlhob', case=False) | TargetObject.str.contains(r'bihhflimonbpcfagfadcnbbdngpopnjb', case=False) | TargetObject.str.contains(r'ppajinakbfocjfnijggfndbdmjggcmde', case=False) | TargetObject.str.contains(r'oofgbpoabipfcfjapgnbbjjaenockbdp', case=False) | TargetObject.str.contains(r'bhnhkdgoefpmekcgnccpnhjfdgicfebm', case=False) | TargetObject.str.contains(r'knmmpciebaoojcpjjoeonlcjacjopcpf', case=False) | TargetObject.str.contains(r'dhadilbmmjiooceioladdphemaliiobo', case=False) | TargetObject.str.contains(r'jedieiamjmoflcknjdjhpieklepfglin', case=False) | TargetObject.str.contains(r'mhngpdlhojliikfknhfaglpnddniijfh', case=False) | TargetObject.str.contains(r'omdakjcmkglenbhjadbccaookpfjihpa', case=False) | TargetObject.str.contains(r'npgimkapccfidfkfoklhpkgmhgfejhbj', case=False) | TargetObject.str.contains(r'akeehkgglkmpapdnanoochpfmeghfdln', case=False) | TargetObject.str.contains(r'gbmdmipapolaohpinhblmcnpmmlgfgje', case=False) | TargetObject.str.contains(r'aigmfoeogfnljhnofglledbhhfegannp', case=False) | TargetObject.str.contains(r'cgojmfochfikphincbhokimmmjenhhgk', case=False) | TargetObject.str.contains(r'ficajfeojakddincjafebjmfiefcmanc', case=False) | TargetObject.str.contains(r'ifnaibldjfdmaipaddffmgcmekjhiloa', case=False) | TargetObject.str.contains(r'jbnmpdkcfkochpanomnkhnafobppmccn', case=False) | TargetObject.str.contains(r'apcfdffemoinopelidncddjbhkiblecc', case=False) | TargetObject.str.contains(r'mjolnodfokkkaichkcjipfgblbfgojpa', case=False) | TargetObject.str.contains(r'oifjbnnafapeiknapihcmpeodaeblbkn', case=False) | TargetObject.str.contains(r'plpmggfglncceinmilojdkiijhmajkjh', case=False) | TargetObject.str.contains(r'mjnbclmflcpookeapghfhapeffmpodij', case=False) | TargetObject.str.contains(r'bblcccknbdbplgmdjnnikffefhdlobhp', case=False) | TargetObject.str.contains(r'aojlhgbkmkahabcmcpifbolnoichfeep', case=False) | TargetObject.str.contains(r'lcmammnjlbmlbcaniggmlejfjpjagiia', case=False) | TargetObject.str.contains(r'knajdeaocbpmfghhmijicidfcmdgbdpm', case=False) | TargetObject.str.contains(r'bdlcnpceagnkjnjlbbbcepohejbheilk', case=False) | TargetObject.str.contains(r'edknjdjielmpdlnllkdmaghlbpnmjmgb', case=False) | TargetObject.str.contains(r'eidnihaadmmancegllknfbliaijfmkgo', case=False) | TargetObject.str.contains(r'ckiahbcmlmkpfiijecbpflfahoimklke', case=False) | TargetObject.str.contains(r'macdlemfnignjhclfcfichcdhiomgjjb', case=False) | TargetObject.str.contains(r'chioafkonnhbpajpengbalkececleldf', case=False) | TargetObject.str.contains(r'amnoibeflfphhplmckdbiajkjaoomgnj', case=False) | TargetObject.str.contains(r'llbhddikeonkpbhpncnhialfbpnilcnc', case=False) | TargetObject.str.contains(r'pcienlhnoficegnepejpfiklggkioccm', case=False) | TargetObject.str.contains(r'iocnglnmfkgfedpcemdflhkchokkfeii', case=False) | TargetObject.str.contains(r'igahhbkcppaollcjeaaoapkijbnphfhb', case=False) | TargetObject.str.contains(r'njpmifchgidinihmijhcfpbdmglecdlb', case=False) | TargetObject.str.contains(r'ggackgngljinccllcmbgnpgpllcjepgc', case=False) | TargetObject.str.contains(r'kchocjcihdgkoplngjemhpplmmloanja', case=False) | TargetObject.str.contains(r'bnijmipndnicefcdbhgcjoognndbgkep', case=False) | TargetObject.str.contains(r'lklekjodgannjcccdlbicoamibgbdnmi', case=False) | TargetObject.str.contains(r'dbdbnchagbkhknegmhgikkleoogjcfge', case=False) | TargetObject.str.contains(r'egblhcjfjmbjajhjhpmnlekffgaemgfh', case=False) | TargetObject.str.contains(r'ehbhfpfdkmhcpaehaooegfdflljcnfec', case=False) | TargetObject.str.contains(r'bkkgdjpomdnfemhhkalfkogckjdkcjkg', case=False) | TargetObject.str.contains(r'almalgbpmcfpdaopimbdchdliminoign', case=False) | TargetObject.str.contains(r'akkbkhnikoeojlhiiomohpdnkhbkhieh', case=False) | TargetObject.str.contains(r'gbfgfbopcfokdpkdigfmoeaajfmpkbnh', case=False) | TargetObject.str.contains(r'bniikohfmajhdcffljgfeiklcbgffppl', case=False) | TargetObject.str.contains(r'lejgfmmlngaigdmmikblappdafcmkndb', case=False) | TargetObject.str.contains(r'ffhhkmlgedgcliajaedapkdfigdobcif', case=False) | TargetObject.str.contains(r'gcknhkkoolaabfmlnjonogaaifnjlfnp', case=False) | TargetObject.str.contains(r'pooljnboifbodgifngpppfklhifechoe', case=False) | TargetObject.str.contains(r'fjoaledfpmneenckfbpdfhkmimnjocfa', case=False) | TargetObject.str.contains(r'aakchaleigkohafkfjfjbblobjifikek', case=False) | TargetObject.str.contains(r'dpplabbmogkhghncfbfdeeokoefdjegm', case=False) | TargetObject.str.contains(r'padekgcemlokbadohgkifijomclgjgif', case=False) | TargetObject.str.contains(r'bfidboloedlamgdmenmlbipfnccokknp', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ETW Logging Disabled For SCM",
        "id": "4f281b83-0200-4b34-bf35-d24687ea57c2",
        "status": "test",
        "description": "Detects changes to the \"TracingDisabled\" key in order to disable ETW logging for services.exe (SCM)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112",
            "attack.t1562"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Tracing\\\\SCM\\\\Regular\\\\TracingDisabled', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Common Autorun Keys Modification",
        "id": "f59c3faf-50f3-464b-9f4c-1b67ab512d99",
        "status": "test",
        "description": "Detects modification of autostart extensibility point (ASEP) in registry.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows CE Services\\\\AutoStart', case=False) | TargetObject.str.contains(r'\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Command Processor\\\\Autorun', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Active Setup\\\\Installed Components', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows CE Services\\\\AutoStartOnDisconnect', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows CE Services\\\\AutoStartOnConnect', case=False) | TargetObject.str.contains(r'\\\\SYSTEM\\\\Setup\\\\CmdLine', case=False) | TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Ctf\\\\LangBarAddin', case=False) | TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Command Processor\\\\Autorun', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Active Setup\\\\Installed Components', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Classes\\\\Protocols\\\\Handler', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Classes\\\\Protocols\\\\Filter', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Classes\\\\Htmlfile\\\\Shell\\\\Open\\\\Command\\\\(Default)', case=False) | TargetObject.str.contains(r'\\\\Environment\\\\UserInitMprLogonScript', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\Control Panel\\\\Desktop\\\\Scrnsave.exe', case=False) | TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Internet Explorer\\\\UrlSearchHooks', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Internet Explorer\\\\Desktop\\\\Components', case=False) | TargetObject.str.contains(r'\\\\Software\\\\Classes\\\\Clsid\\\\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\\\Inprocserver32', case=False) | TargetObject.str.contains(r'\\\\Control Panel\\\\Desktop\\\\Scrnsave.exe', case=False)) & ~ (Details=='(Empty)' | TargetObject.str.contains(r'\\\\Office\\\\ClickToRun\\\\REGISTRY\\\\MACHINE\\\\Software\\\\Classes\\\\PROTOCOLS\\\\Handler\\\\', case=False) | TargetObject.str.contains(r'\\\\ClickToRunStore\\\\HKMU\\\\SOFTWARE\\\\Classes\\\\PROTOCOLS\\\\Handler\\\\', case=False) | Details==['{314111c7-a502-11d2-bbca-00c04f8ec294}', '{3459B272-CC19-4448-86C9-DDC3B4B2FAD3}', '{42089D2D-912D-4018-9087-2B87803E93FB}', '{5504BE45-A83B-4808-900A-3A5C36E7F77A}', '{807583E5-5146-11D5-A672-00B0D022E945}'] | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Active Setup\\\\Installed Components\\\\{8A69D345-D564-463c-AFF1-A69D9E530F96}', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Active Setup\\\\Installed Components\\\\{9459C573-B17A-45AE-9F64-1857B5D58CEE}', case=False) | TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Active Setup\\\\Installed Components\\\\{89820200-ECBD-11cf-8B85-00AA005B4383}', case=False) | Image==['C:\\\\Windows\\\\System32\\\\poqexec.exe', 'C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe'] | (Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\Updates\\\\', case=False)) & Image.str.contains(r'\\\\OfficeClickToRun.exe', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Event Log Access Tampering Via Registry",
        "id": "ba226dcf-d390-4642-b9af-b534872f1156",
        "status": "experimental",
        "description": "Detects changes to the Windows EventLog channel permission values. It focuses on changes to the Security Descriptor Definition Language (SDDL) string, as modifications to these values can restrict access to specific users or groups, potentially aiding in defense evasion by controlling who can view or modify a event log channel. Upon execution, the user shouldn't be able to access the event log channel via the event viewer or via utilities such as \"Get-EventLog\" or \"wevtutil\".\n",
        "tags": [
            "attack.t1547.001",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\EventLog\\\\', case=False) & TargetObject.str.contains(r'\\\\CustomSD', case=False) | (TargetObject.str.contains(r'\\\\Policies\\\\Microsoft\\\\Windows\\\\EventLog\\\\', case=False) | TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels', case=False)) & TargetObject.str.contains(r'\\\\ChannelAccess', case=False)) & (Details.str.contains(r'D:(D;', case=False) | Details.str.contains(r'D:(', case=False) & Details.str.contains(r')(D;', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Registry Modification to Hidden File Extension",
        "id": "5df86130-4e95-4a54-90f7-26541b40aec2",
        "status": "test",
        "description": "Hides the file extension through modification of the registry",
        "tags": [
            "attack.persistence",
            "attack.t1137"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\HideFileExt', case=False) & Details=='DWORD (0x00000001)' | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\Hidden', case=False) & Details=='DWORD (0x00000002)')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Enable LM Hash Storage",
        "id": "c420410f-c2d8-4010-856b-dffe21866437",
        "status": "test",
        "description": "Detects changes to the \"NoLMHash\" registry value in order to allow Windows to store LM Hashes.\nBy setting this registry value to \"0\" (DWORD), Windows will be allowed to store a LAN manager hash of your password in Active Directory and local SAM databases.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'System\\\\CurrentControlSet\\\\Control\\\\Lsa\\\\NoLMHash', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Add Debugger Entry To Hangs Key For Persistence",
        "id": "833ef470-fa01-4631-a79b-6f291c9ac498",
        "status": "test",
        "description": "Detects when an attacker adds a new \"Debugger\" value to the \"Hangs\" key in order to achieve persistence which will get invoked when an application crashes",
        "tags": [
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\Hangs\\\\Debugger', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential EventLog File Location Tampering",
        "id": "0cb8d736-995d-4ce7-a31e-1e8d452a1459",
        "status": "test",
        "description": "Detects tampering with EventLog service \"file\" key. In order to change the default location of an Evtx file. This technique is used to tamper with log collection and alerting",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\EventLog\\\\', case=False) & TargetObject.str.contains(r'\\\\File', case=False) & ~ Details.str.contains(r'\\\\System32\\\\Winevt\\\\Logs\\\\', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Lolbas OneDriveStandaloneUpdater.exe Proxy Download",
        "id": "3aff0be0-7802-4a7e-a4fa-c60c74bc5e1d",
        "status": "test",
        "description": "Detects setting a custom URL for OneDriveStandaloneUpdater.exe to download a file from the Internet without executing any\nanomalous executables with suspicious arguments. The downloaded file will be in C:\\Users\\redacted\\AppData\\Local\\Microsoft\\OneDrive\\StandaloneUpdaterreSignInSettingsConfig.json\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\OneDrive\\\\UpdateOfficeConfig\\\\UpdateRingSettingURLFromOC', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via AutodialDLL",
        "id": "e6fe26ee-d063-4f5b-b007-39e90aaf50e3",
        "status": "test",
        "description": "Detects change the the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library",
        "tags": [
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Services\\\\WinSock2\\\\Parameters\\\\AutodialDLL', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Windows Security Center Notifications",
        "id": "3ae1a046-f7db-439d-b7ce-b8b366b81fa6",
        "status": "test",
        "description": "Detect set UseActionCenterExperience to 0 to disable the Windows security center notification",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'Windows\\\\CurrentVersion\\\\ImmersiveShell\\\\UseActionCenterExperience', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Credential Dumping Attempt Using New NetworkProvider - REG",
        "id": "0442defa-b4a2-41c9-ae2c-ea7042fc4701",
        "status": "test",
        "description": "Detects when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it",
        "tags": [
            "attack.credential-access",
            "attack.t1003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\System\\\\CurrentControlSet\\\\Services\\\\', case=False) & TargetObject.str.contains(r'\\\\NetworkProvider', case=False) & ~ (TargetObject.str.contains(r'\\\\System\\\\CurrentControlSet\\\\Services\\\\WebClient\\\\NetworkProvider', case=False) | TargetObject.str.contains(r'\\\\System\\\\CurrentControlSet\\\\Services\\\\LanmanWorkstation\\\\NetworkProvider', case=False) | TargetObject.str.contains(r'\\\\System\\\\CurrentControlSet\\\\Services\\\\RDPNP\\\\NetworkProvider', case=False) | Image=='C:\\\\Windows\\\\System32\\\\poqexec.exe')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious Command Executed Via Run Dialog Box - Registry",
        "id": "a7df0e9e-91a5-459a-a003-4cde67c2ff5d",
        "status": "test",
        "description": "Detects execution of commands via the run dialog box on Windows by checking values of the \"RunMRU\" registry key.\nThis technique was seen being abused by threat actors to deceive users into pasting and executing malicious commands, often disguised as CAPTCHA verification steps.\n",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\RunMRU', case=False) & ((Details.str.contains(r'powershell', case=False) | Details.str.contains(r'pwsh', case=False)) & (Details.str.contains(r' -e ', case=False) | Details.str.contains(r' -ec ', case=False) | Details.str.contains(r' -en ', case=False) | Details.str.contains(r' -enc ', case=False) | Details.str.contains(r' -enco', case=False) | Details.str.contains(r'ftp', case=False) | Details.str.contains(r'Hidden', case=False) | Details.str.contains(r'http', case=False) | Details.str.contains(r'iex', case=False) | Details.str.contains(r'Invoke-', case=False)) | Details.str.contains(r'wmic', case=False) & (Details.str.contains(r'shadowcopy', case=False) | Details.str.contains(r'process call create', case=False)))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Directory Service Restore Mode(DSRM) Registry Value Tampering",
        "id": "b61e87c0-50db-4b2e-8986-6a2be94b33b0",
        "status": "experimental",
        "description": "Detects changes to \"DsrmAdminLogonBehavior\" registry value.\nDuring a Domain Controller (DC) promotion, administrators create a Directory Services Restore Mode (DSRM) local administrator account with a password that rarely changes. The DSRM account is an \u201cAdministrator\u201d account that logs in with the DSRM mode when the server is booting up to restore AD backups or recover the server from a failure.\nAttackers could abuse DSRM account to maintain their persistence and access to the organization's Active Directory.\nIf the \"DsrmAdminLogonBehavior\" value is set to \"0\", the administrator account can only be used if the DC starts in DSRM.\nIf the \"DsrmAdminLogonBehavior\" value is set to \"1\", the administrator account can only be used if the local AD DS service is stopped.\nIf the \"DsrmAdminLogonBehavior\" value is set to \"2\", the administrator account can always be used.\n",
        "tags": [
            "attack.persistence",
            "attack.t1556"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Control\\\\Lsa\\\\DsrmAdminLogonBehavior', case=False) & ~ Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "RDP Sensitive Settings Changed",
        "id": "3f6b7b62-61aa-45db-96bd-9c31b36b653c",
        "status": "test",
        "description": "Detects tampering of RDP Terminal Service/Server sensitive settings.\nSuch as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections'...etc\n",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & ((TargetObject.str.contains(r'\\\\Control\\\\Terminal Server\\\\', case=False) | TargetObject.str.contains(r'\\\\Windows NT\\\\Terminal Services\\\\', case=False)) & TargetObject.str.contains(r'\\\\Shadow', case=False) & (Details==['DWORD (0x00000001)', 'DWORD (0x00000002)', 'DWORD (0x00000003)', 'DWORD (0x00000004)']) | (TargetObject.str.contains(r'\\\\Control\\\\Terminal Server\\\\', case=False) | TargetObject.str.contains(r'\\\\Windows NT\\\\Terminal Services\\\\', case=False)) & (TargetObject.str.contains(r'\\\\DisableRemoteDesktopAntiAlias', case=False) | TargetObject.str.contains(r'\\\\DisableSecuritySettings', case=False) | TargetObject.str.contains(r'\\\\fAllowUnsolicited', case=False) | TargetObject.str.contains(r'\\\\fAllowUnsolicitedFullControl', case=False)) & Details=='DWORD (0x00000001)' | TargetObject.str.contains(r'\\\\Control\\\\Terminal Server\\\\InitialProgram', case=False) | TargetObject.str.contains(r'\\\\Control\\\\Terminal Server\\\\WinStations\\\\RDP-Tcp\\\\InitialProgram', case=False) | TargetObject.str.contains(r'\\\\services\\\\TermService\\\\Parameters\\\\ServiceDll', case=False) | TargetObject.str.contains(r'\\\\Windows NT\\\\Terminal Services\\\\InitialProgram', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via DLLPathOverride",
        "id": "a1b1fd53-9c4a-444c-bae0-34a330fc7aa8",
        "status": "test",
        "description": "Detects when an attacker adds a new \"DLLPathOverride\" value to the \"Natural Language\" key in order to achieve persistence which will get invoked by \"SearchIndexer.exe\" process",
        "tags": [
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\ContentIndex\\\\Language\\\\', case=False) & (TargetObject.str.contains(r'\\\\StemmerDLLPathOverride', case=False) | TargetObject.str.contains(r'\\\\WBDLLPathOverride', case=False) | TargetObject.str.contains(r'\\\\StemmerClass', case=False) | TargetObject.str.contains(r'\\\\WBreakerClass', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Blue Mockingbird - Registry",
        "id": "92b0b372-a939-44ed-a11b-5136cf680e27",
        "status": "test",
        "description": "Attempts to detect system changes made by Blue Mockingbird",
        "tags": [
            "attack.execution",
            "attack.t1112",
            "attack.t1047"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\CurrentControlSet\\\\Services\\\\wercplsupport\\\\Parameters\\\\ServiceDll', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential CobaltStrike Service Installations - Registry",
        "id": "61a7697c-cb79-42a8-a2ff-5f0cdfae0130",
        "status": "test",
        "description": "Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement.\n",
        "tags": [
            "attack.execution",
            "attack.privilege-escalation",
            "attack.lateral-movement",
            "attack.t1021.002",
            "attack.t1543.003",
            "attack.t1569.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\System\\\\CurrentControlSet\\\\Services', case=False) | TargetObject.str.contains(r'\\\\System\\\\ControlSet', case=False) & TargetObject.str.contains(r'\\\\Services', case=False)) & (Details.str.contains(r'ADMIN$', case=False) & Details.str.contains(r'.exe', case=False) | Details.str.contains(r'%COMSPEC%', case=False) & Details.str.contains(r'start', case=False) & Details.str.contains(r'powershell', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Scrobj.dll COM Hijacking",
        "id": "fe20dda1-6f37-4379-bbe0-a98d400cae90",
        "status": "test",
        "description": "Detect use of scrobj.dll as this DLL looks for the ScriptletURL key to get the location of the script to execute",
        "tags": [
            "attack.persistence",
            "attack.t1546.015"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'InprocServer32\\\\(Default)', case=False) & Details=='C:\\\\WINDOWS\\\\system32\\\\scrobj.dll'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "NET NGenAssemblyUsageLog Registry Key Tamper",
        "id": "28036918-04d3-423d-91c0-55ecf99fb892",
        "status": "test",
        "description": "Detects changes to the NGenAssemblyUsageLog registry key.\n.NET Usage Log output location can be controlled by setting the NGenAssemblyUsageLog CLR configuration knob in the Registry or by configuring an environment variable (as described in the next section).\nBy simplify specifying an arbitrary value (e.g. fake output location or junk data) for the expected value, a Usage Log file for the .NET execution context will not be created.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\.NETFramework\\\\NGenAssemblyUsageLog', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell as a Service in Registry",
        "id": "4a5f5a5e-ac01-474b-9b4e-d61298c9df1d",
        "status": "test",
        "description": "Detects that a powershell code is written to the registry as a service.",
        "tags": [
            "attack.execution",
            "attack.t1569.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Services\\\\', case=False) & TargetObject.str.contains(r'\\\\ImagePath', case=False) & (Details.str.contains(r'powershell', case=False) | Details.str.contains(r'pwsh', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable PUA Protection on Windows Defender",
        "id": "8ffc5407-52e3-478f-9596-0a7371eafe13",
        "status": "test",
        "description": "Detects disabling Windows Defender PUA protection",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Policies\\\\Microsoft\\\\Windows Defender\\\\PUAProtection', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "VBScript Payload Stored in Registry",
        "id": "46490193-1b22-4c29-bdd6-5bf63907216f",
        "status": "test",
        "description": "Detects VBScript content stored into registry keys as seen being used by UNC2452 group",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion', case=False) & (Details.str.contains(r'vbscript:', case=False) | Details.str.contains(r'jscript:', case=False) | Details.str.contains(r'mshtml,', case=False) | Details.str.contains(r'RunHTMLApplication', case=False) | Details.str.contains(r'Execute(', case=False) | Details.str.contains(r'CreateObject', case=False) | Details.str.contains(r'window.close', case=False)) & ~ (TargetObject.str.contains(r'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run', case=False) | Image.str.contains(r'\\\\msiexec.exe', case=False) & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Installer\\\\UserData\\\\', case=False) & (Details.str.contains(r'\\\\Microsoft.NET\\\\Primary Interop Assemblies\\\\Microsoft.mshtml.dll', case=False) | Details.str.contains(r'<\\\\Microsoft.mshtml,fileVersion=', case=False) | Details.str.contains(r'_mshtml_dll_', case=False) | Details.str.contains(r'<\\\\Microsoft.mshtml,culture=', case=False)))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Internet Explorer DisableFirstRunCustomize Enabled",
        "id": "ab567429-1dfb-4674-b6d2-979fd2f9d125",
        "status": "test",
        "description": "Detects changes to the Internet Explorer \"DisableFirstRunCustomize\" value, which prevents Internet Explorer from running the first run wizard the first time a user starts the browser after installing Internet Explorer or Windows.\n",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Internet Explorer\\\\Main\\\\DisableFirstRunCustomize', case=False) & (Details==['DWORD (0x00000001)', 'DWORD (0x00000002)']) & ~ (Image==['C:\\\\Windows\\\\explorer.exe', 'C:\\\\Windows\\\\System32\\\\ie4uinit.exe'])"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Privacy Settings Experience in Registry",
        "id": "0372e1f9-0fd2-40f7-be1b-a7b2b848fa7b",
        "status": "test",
        "description": "Detects registry modifications that disable Privacy Settings Experience",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\OOBE\\\\DisablePrivacyExperience', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DNS-over-HTTPS Enabled by Registry",
        "id": "04b45a8a-d11d-49e4-9acc-4a1b524407a5",
        "status": "test",
        "description": "Detects when a user enables DNS-over-HTTPS.\nThis can be used to hide internet activity or be used to hide the process of exfiltrating data.\nWith this enabled organization will lose visibility into data such as query type, response and originating IP that are used to determine bad actors.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1140",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Edge\\\\BuiltInDnsClientEnabled', case=False) & Details=='DWORD (0x00000001)' | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Google\\\\Chrome\\\\DnsOverHttpsMode', case=False) & Details=='secure' | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Mozilla\\\\Firefox\\\\DNSOverHTTPS\\\\Enabled', case=False) & Details=='DWORD (0x00000001)')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Hypervisor Enforced Paging Translation Disabled",
        "id": "7f2954d2-99c2-4d42-a065-ca36740f187b",
        "status": "experimental",
        "description": "Detects changes to the \"DisableHypervisorEnforcedPagingTranslation\" registry value. Where the it is set to \"1\" in order to disable the Hypervisor Enforced Paging Translation feature.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\DisableHypervisorEnforcedPagingTranslation', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Logging Disabled Via Registry Key Tampering",
        "id": "fecfd1a1-cc78-4313-a1ea-2ee2e8ec27a7",
        "status": "test",
        "description": "Detects changes to the registry for the currently logged-in user. In order to disable PowerShell module logging, script block logging or transcription and script execution logging",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\PowerShell\\\\', case=False) | TargetObject.str.contains(r'\\\\Microsoft\\\\PowerShellCore\\\\', case=False)) & (TargetObject.str.contains(r'\\\\ModuleLogging\\\\EnableModuleLogging', case=False) | TargetObject.str.contains(r'\\\\ScriptBlockLogging\\\\EnableScriptBlockLogging', case=False) | TargetObject.str.contains(r'\\\\ScriptBlockLogging\\\\EnableScriptBlockInvocationLogging', case=False) | TargetObject.str.contains(r'\\\\Transcription\\\\EnableTranscripting', case=False) | TargetObject.str.contains(r'\\\\Transcription\\\\EnableInvocationHeader', case=False) | TargetObject.str.contains(r'\\\\EnableScripts', case=False)) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Old TLS1.0/TLS1.1 Protocol Version Enabled",
        "id": "439957a7-ad86-4a8f-9705-a28131c6821b",
        "status": "test",
        "description": "Detects applications or users re-enabling old TLS versions by setting the \"Enabled\" value to \"1\" for the \"Protocols\" registry key.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Control\\\\SecurityProviders\\\\SCHANNEL\\\\Protocols\\\\TLS 1.0\\\\', case=False) | TargetObject.str.contains(r'\\\\Control\\\\SecurityProviders\\\\SCHANNEL\\\\Protocols\\\\TLS 1.1\\\\', case=False)) & TargetObject.str.contains(r'\\\\Enabled', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Modify User Shell Folders Startup Value",
        "id": "9c226817-8dc9-46c2-a58d-66655aafd7dc",
        "status": "test",
        "description": "Detect modification of the startup key to a path where a payload could be stored to be launched during startup",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1547.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\User Shell Folders', case=False) & TargetObject.str.contains(r'Startup', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Hiding User Account Via SpecialAccounts Registry Key",
        "id": "f8aebc67-a56d-4ec9-9fbe-7b0e8b7b4efd",
        "status": "test",
        "description": "Detects modifications to the registry key \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" where the value is set to \"0\" in order to hide user account from being listed on the logon screen.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & EventType=='SetValue' & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\SpecialAccounts\\\\UserList', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Outlook Macro Execution Without Warning Setting Enabled",
        "id": "e3b50fa5-3c3f-444e-937b-0a99d33731cd",
        "status": "test",
        "description": "Detects the modification of Outlook security setting to allow unprompted execution of macros.",
        "tags": [
            "attack.persistence",
            "attack.command-and-control",
            "attack.t1137",
            "attack.t1008",
            "attack.t1546"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Outlook\\\\Security\\\\Level', case=False) & Details.str.contains(r'0x00000001', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Winget Admin Settings Modification",
        "id": "6db5eaf9-88f7-4ed9-af7d-9ef2ad12f236",
        "status": "test",
        "description": "Detects changes to the AppInstaller (winget) admin settings. Such as enabling local manifest installations or disabling installer hash checks",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & Image.str.contains(r'\\\\winget.exe', case=False) & TargetObject.str.contains(r'\\\\REGISTRY\\\\A\\\\', case=False) & TargetObject.str.contains(r'\\\\LocalState\\\\admin_settings', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Outlook Home Page",
        "id": "ddd171b5-2cc6-4975-9e78-f0eccd08cc76",
        "status": "test",
        "description": "Detects potential persistence activity via outlook home page.\nAn attacker can set a home page to achieve code execution and persistence by editing the WebView registry keys.\n",
        "tags": [
            "attack.persistence",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Office\\\\', case=False) & TargetObject.str.contains(r'\\\\Outlook\\\\WebView\\\\', case=False) & TargetObject.str.contains(r'\\\\URL', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via App Paths Default Property",
        "id": "707e097c-e20f-4f67-8807-1f72ff4500d6",
        "status": "test",
        "description": "Detects changes to the \"Default\" property for keys located in the \\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\ registry. Which might be used as a method of persistence\nThe entries found under App Paths are used primarily for the following purposes.\nFirst, to map an application's executable file name to that file's fully qualified path.\nSecond, to prepend information to the PATH environment variable on a per-application, per-process basis.\n",
        "tags": [
            "attack.persistence",
            "attack.t1546.012"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\App Paths', case=False) & (TargetObject.str.contains(r'(Default)', case=False) | TargetObject.str.contains(r'Path', case=False)) & (Details.str.contains(r'\\\\Users\\\\Public', case=False) | Details.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Details.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | Details.str.contains(r'\\\\Desktop\\\\', case=False) | Details.str.contains(r'\\\\Downloads\\\\', case=False) | Details.str.contains(r'%temp%', case=False) | Details.str.contains(r'%tmp%', case=False) | Details.str.contains(r'iex', case=False) | Details.str.contains(r'Invoke-', case=False) | Details.str.contains(r'rundll32', case=False) | Details.str.contains(r'regsvr32', case=False) | Details.str.contains(r'mshta', case=False) | Details.str.contains(r'cscript', case=False) | Details.str.contains(r'wscript', case=False) | Details.str.contains(r'.bat', case=False) | Details.str.contains(r'.hta', case=False) | Details.str.contains(r'.dll', case=False) | Details.str.contains(r'.ps1', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon Extension In Keyboard Layout IME File Registry Value",
        "id": "b888e3f2-224d-4435-b00b-9dd66e9ea1f1",
        "status": "test",
        "description": "Detects usage of Windows Input Method Editor (IME) keyboard layout feature, which allows an attacker to load a DLL into the process after sending the WM_INPUTLANGCHANGEREQUEST message.\nBefore doing this, the client needs to register the DLL in a special registry key that is assumed to implement this keyboard layout. This registry key should store a value named \"Ime File\" with a DLL path.\nIMEs are essential for languages that have more characters than can be represented on a standard keyboard, such as Chinese, Japanese, and Korean.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Control\\\\Keyboard Layouts\\\\', case=False) & TargetObject.str.contains(r'Ime File', case=False) & ~ Details.str.contains(r'.ime', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Microsoft Office Protected View Disabled",
        "id": "a5c7a43f-6009-4a8c-80c5-32abf1c53ecc",
        "status": "test",
        "description": "Detects changes to Microsoft Office protected view registry keys with which the attacker disables this feature.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Office\\\\', case=False) & TargetObject.str.contains(r'\\\\Security\\\\ProtectedView\\\\', case=False) & (Details=='DWORD (0x00000001)' & (TargetObject.str.contains(r'\\\\DisableAttachementsInPV', case=False) | TargetObject.str.contains(r'\\\\DisableInternetFilesInPV', case=False) | TargetObject.str.contains(r'\\\\DisableIntranetCheck', case=False) | TargetObject.str.contains(r'\\\\DisableUnsafeLocationsInPV', case=False)) | Details=='DWORD (0x00000000)' & (TargetObject.str.contains(r'\\\\enabledatabasefileprotectedview', case=False) | TargetObject.str.contains(r'\\\\enableforeigntextfileprotectedview', case=False)))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New RUN Key Pointing to Suspicious Folder",
        "id": "02ee49e2-e294-4d0f-9278-f5b3212fc588",
        "status": "experimental",
        "description": "Detects suspicious new RUN key element pointing to an executable in a suspicious folder",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\', case=False)) & (Details.str.contains(r':\\\\$Recycle.bin\\\\', case=False) | Details.str.contains(r':\\\\Temp\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\Default\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\Desktop\\\\', case=False) | Details.str.contains(r':\\\\Users\\\\Public\\\\', case=False) | Details.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | Details.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Details.str.contains(r'%temp%\\\\', case=False) | Details.str.contains(r'%tmp%\\\\', case=False) | Details.str.contains(r'%Public%\\\\', case=False) | Details.str.contains(r'wscript', case=False) | Details.str.contains(r'cscript', case=False)) & ~ (TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\', case=False) & Image.str.contains(r'C:\\\\Windows\\\\SoftwareDistribution\\\\Download\\\\', case=False) & Details.str.contains(r'rundll32.exe ', case=False) & Details.str.contains(r'C:\\\\WINDOWS\\\\system32\\\\advpack.dll,DelNodeRunDLL32', case=False) & (Details.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Details.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False)))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Internal Tools or Feature in Registry",
        "id": "e2482f8d-3443-4237-b906-cc145d87a076",
        "status": "test",
        "description": "Detects registry modifications that change features of internal Windows tools (malware like Agent Tesla uses this technique)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & ((TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\StartMenuLogOff', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\DisableChangePassword', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\DisableLockWorkstation', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\DisableRegistryTools', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\DisableTaskmgr', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\NoDispBackgroundPage', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\NoDispCPL', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\Explorer\\\\DisableNotificationCenter', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\System\\\\DisableCMD', case=False)) & Details=='DWORD (0x00000001)' | (TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\ConsentPromptBehaviorAdmin', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\shutdownwithoutlogon', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\PushNotifications\\\\ToastEnabled', case=False) | TargetObject.str.contains(r'SYSTEM\\\\CurrentControlSet\\\\Control\\\\Storage\\\\Write Protection', case=False) | TargetObject.str.contains(r'SYSTEM\\\\CurrentControlSet\\\\Control\\\\StorageDevicePolicies\\\\WriteProtect', case=False)) & Details=='DWORD (0x00000000)')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Tamper With Sophos AV Registry Keys",
        "id": "9f4662ac-17ca-43aa-8f12-5d7b989d0101",
        "status": "test",
        "description": "Detects tamper attempts to sophos av functionality via registry key modification",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Sophos Endpoint Defense\\\\TamperProtection\\\\Config\\\\SAVEnabled', case=False) | TargetObject.str.contains(r'\\\\Sophos Endpoint Defense\\\\TamperProtection\\\\Config\\\\SEDEnabled', case=False) | TargetObject.str.contains(r'\\\\Sophos\\\\SAVService\\\\TamperProtection\\\\Enabled', case=False)) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Add Port Monitor Persistence in Registry",
        "id": "944e8941-f6f6-4ee8-ac05-1c224e923c0e",
        "status": "test",
        "description": "Adversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation.\nA port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup.\n",
        "tags": [
            "attack.persistence",
            "attack.t1547.010"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Control\\\\Print\\\\Monitors\\\\', case=False) & Details.str.contains(r'.dll', case=False) & ~ (Image=='C:\\\\Windows\\\\System32\\\\spoolsv.exe' & TargetObject.str.contains(r'\\\\Control\\\\Print\\\\Monitors\\\\CutePDF Writer Monitor v4.0\\\\Driver', case=False) & Details=='cpwmon64_v40.dll' & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False)) | TargetObject.str.contains(r'\\\\Control\\\\Print\\\\Monitors\\\\MONVNC\\\\Driver', case=False) | TargetObject.str.contains(r'Control\\\\Print\\\\Environments\\\\', case=False) & TargetObject.str.contains(r'\\\\Drivers\\\\', case=False) & TargetObject.str.contains(r'\\\\VNC Printer', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Change the Fax Dll",
        "id": "9e3357ba-09d4-4fbd-a7c5-ad6386314513",
        "status": "test",
        "description": "Detect possible persistence using Fax DLL load when service restart",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Fax\\\\Device Providers\\\\', case=False) & TargetObject.str.contains(r'\\\\ImageName', case=False) & ~ Details=='%systemroot%\\\\system32\\\\fxst30.dll'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Lsass Full Dump Request Via DumpType Registry Settings",
        "id": "33efc23c-6ea2-4503-8cfe-bdf82ce8f719",
        "status": "test",
        "description": "Detects the setting of the \"DumpType\" registry value to \"2\" which stands for a \"Full Dump\". Technique such as LSASS Shtinkering requires this value to be \"2\" in order to dump LSASS.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\LocalDumps\\\\DumpType', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\LocalDumps\\\\lsass.exe\\\\DumpType', case=False)) & Details=='DWORD (0x00000002)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CrashControl CrashDump Disabled",
        "id": "2ff692c2-4594-41ec-8fcb-46587de769e0",
        "status": "test",
        "description": "Detects disabling the CrashDump per registry (as used by HermeticWiper)",
        "tags": [
            "attack.t1564",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'SYSTEM\\\\CurrentControlSet\\\\Control\\\\CrashControl', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CurrentVersion Autorun Keys Modification",
        "id": "20f0ee37-5942-4e45-b7d5-c5b5db9df5cd",
        "status": "test",
        "description": "Detects modification of autostart extensibility point (ASEP) in registry.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion', case=False) & (TargetObject.str.contains(r'\\\\ShellServiceObjectDelayLoad', case=False) | TargetObject.str.contains(r'\\\\Run\\\\', case=False) | TargetObject.str.contains(r'\\\\RunOnce\\\\', case=False) | TargetObject.str.contains(r'\\\\RunOnceEx\\\\', case=False) | TargetObject.str.contains(r'\\\\RunServices\\\\', case=False) | TargetObject.str.contains(r'\\\\RunServicesOnce\\\\', case=False) | TargetObject.str.contains(r'\\\\Policies\\\\System\\\\Shell', case=False) | TargetObject.str.contains(r'\\\\Policies\\\\Explorer\\\\Run', case=False) | TargetObject.str.contains(r'\\\\Group Policy\\\\Scripts\\\\Startup', case=False) | TargetObject.str.contains(r'\\\\Group Policy\\\\Scripts\\\\Shutdown', case=False) | TargetObject.str.contains(r'\\\\Group Policy\\\\Scripts\\\\Logon', case=False) | TargetObject.str.contains(r'\\\\Group Policy\\\\Scripts\\\\Logoff', case=False) | TargetObject.str.contains(r'\\\\Explorer\\\\ShellServiceObjects', case=False) | TargetObject.str.contains(r'\\\\Explorer\\\\ShellIconOverlayIdentifiers', case=False) | TargetObject.str.contains(r'\\\\Explorer\\\\ShellExecuteHooks', case=False) | TargetObject.str.contains(r'\\\\Explorer\\\\SharedTaskScheduler', case=False) | TargetObject.str.contains(r'\\\\Explorer\\\\Browser Helper Objects', case=False) | TargetObject.str.contains(r'\\\\Authentication\\\\PLAP Providers', case=False) | TargetObject.str.contains(r'\\\\Authentication\\\\Credential Providers', case=False) | TargetObject.str.contains(r'\\\\Authentication\\\\Credential Provider Filters', case=False)) & ~ (Details=='(Empty)' | TargetObject.str.contains(r'\\\\NgcFirst\\\\ConsecutiveSwitchCount', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\Update\\\\OneDriveSetup.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Roaming\\\\Spotify\\\\Spotify.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\WebEx\\\\WebexHost.exe', case=False) | Image==['C:\\\\WINDOWS\\\\system32\\\\devicecensus.exe', 'C:\\\\Windows\\\\system32\\\\winsat.exe', 'C:\\\\Program Files\\\\Microsoft OneDrive\\\\StandaloneUpdater\\\\OneDriveSetup.exe', 'C:\\\\Program Files\\\\Microsoft OneDrive\\\\Update\\\\OneDriveSetup.exe', 'C:\\\\Program Files (x86)\\\\Microsoft OneDrive\\\\Update\\\\OneDriveSetup.exe', 'C:\\\\Program Files\\\\KeePass Password Safe 2\\\\ShInstUtil.exe', 'C:\\\\Program Files\\\\Everything\\\\Everything.exe', 'C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe'] | Image=='C:\\\\Windows\\\\system32\\\\LogonUI.exe' & (TargetObject.str.contains(r'\\\\Authentication\\\\Credential Providers\\\\{D6886603-9D2F-4EB2-B667-1971041FA96B}\\\\', case=False) | TargetObject.str.contains(r'\\\\Authentication\\\\Credential Providers\\\\{BEC09223-B018-416D-A0AC-523971B639F5}\\\\', case=False) | TargetObject.str.contains(r'\\\\Authentication\\\\Credential Providers\\\\{8AF662BF-65A0-4D0A-A540-A338A999D36F}\\\\', case=False) | TargetObject.str.contains(r'\\\\Authentication\\\\Credential Providers\\\\{27FBDB57-B613-4AF2-9D7E-4FA7A66C21AD}\\\\', case=False)) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeUpdate\\\\Install\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeWebView\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe', case=False) | Image=='C:\\\\Windows\\\\system32\\\\regsvr32.exe' & TargetObject.str.contains(r'DropboxExt', case=False) & Details.str.contains(r'A251-47B7-93E1-CDD82E34AF8B}', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\Opera Browser Assistant', case=False) & Details=='C:\\\\Program Files\\\\Opera\\\\assistant\\\\browser_assistant.exe' | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\iTunesHelper', case=False) & Details=='\"C:\\\\Program Files\\\\iTunes\\\\iTunesHelper.exe\"' | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\zoommsirepair', case=False) & Details=='\"C:\\\\Program Files\\\\Zoom\\\\bin\\\\installer.exe\" /repair' | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\Greenshot', case=False) & Details=='C:\\\\Program Files\\\\Greenshot\\\\Greenshot.exe' | TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\GoogleDriveFS', case=False) & Details.str.contains(r'C:\\\\Program Files\\\\Google\\\\Drive File Stream\\\\', case=False) & Details.str.contains(r'\\\\GoogleDriveFS.exe', case=False) | TargetObject.str.contains(r'GoogleDrive', case=False) & (Details==['{CFE8B367-77A7-41D7-9C90-75D16D7DC6B6}', '{A8E52322-8734-481D-A7E2-27B309EF8D56}', '{C973DA94-CBDF-4E77-81D1-E5B794FBD146}', '{51EF1569-67EE-4AD6-9646-E726C3FFC8A2}']) | (Details.str.contains(r'C:\\\\Windows\\\\system32\\\\cmd.exe /q /c rmdir /s /q \"C:\\\\Users\\\\', case=False) | Details.str.contains(r'C:\\\\Windows\\\\system32\\\\cmd.exe /q /c del /q \"C:\\\\Users\\\\', case=False)) & Details.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\', case=False) | TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\{', case=False) & Details.str.contains(r'\\\\AppData\\\\Local\\\\Package Cache\\\\{', case=False) & Details.str.contains(r'}\\\\python-', case=False) & Details.str.contains(r'.exe\" /burn.runonce', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\Updates\\\\', case=False)) & Image.str.contains(r'\\\\OfficeClickToRun.exe', case=False) | Image=='C:\\\\Program Files\\\\Windows Defender\\\\MsMpEng.exe' | Image.str.contains(r'\\\\Microsoft\\\\Teams\\\\current\\\\Teams.exe', case=False) & Details.str.contains(r'\\\\Microsoft\\\\Teams\\\\Update.exe --processStart ', case=False) | Image=='C:\\\\Windows\\\\system32\\\\userinit.exe' & Details=='ctfmon.exe /n' | Image.str.contains(r'C:\\\\Program Files\\\\AVG\\\\Antivirus\\\\Setup\\\\', case=False) & (Details==['\"C:\\\\Program Files\\\\AVG\\\\Antivirus\\\\AvLaunch.exe\" /gui', '\"C:\\\\Program Files (x86)\\\\AVG\\\\Antivirus\\\\AvLaunch.exe\" /gui', '{472083B0-C522-11CF-8763-00608CC02F24}']) | (Image.str.contains(r'\\\\aurora-agent-64.exe', case=False) | Image.str.contains(r'\\\\aurora-agent.exe', case=False)) & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\aurora-dashboard', case=False) & Details=='C:\\\\Program Files\\\\Aurora-Agent\\\\tools\\\\aurora-dashboard.exe' | TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\Everything', case=False) & Details.str.contains(r'\\\\Everything\\\\Everything.exe\" -startup', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Powershell In Registry Run Keys",
        "id": "8d85cf08-bf97-4260-ba49-986a2a65129c",
        "status": "test",
        "description": "Detects potential PowerShell commands or code within registry run keys",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run', case=False) & (Details.str.contains(r'powershell', case=False) | Details.str.contains(r'pwsh ', case=False) | Details.str.contains(r'FromBase64String', case=False) | Details.str.contains(r'.DownloadFile(', case=False) | Details.str.contains(r'.DownloadString(', case=False) | Details.str.contains(r' -w hidden ', case=False) | Details.str.contains(r' -w 1 ', case=False) | Details.str.contains(r'-windowstyle hidden', case=False) | Details.str.contains(r'-window hidden', case=False) | Details.str.contains(r' -nop ', case=False) | Details.str.contains(r' -encodedcommand ', case=False) | Details.str.contains(r'-ExecutionPolicy Bypass', case=False) | Details.str.contains(r'Invoke-Expression', case=False) | Details.str.contains(r'IEX (', case=False) | Details.str.contains(r'Invoke-Command', case=False) | Details.str.contains(r'ICM -', case=False) | Details.str.contains(r'Invoke-WebRequest', case=False) | Details.str.contains(r'IWR ', case=False) | Details.str.contains(r' -noni ', case=False) | Details.str.contains(r' -noninteractive ', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Allow RDP Remote Assistance Feature",
        "id": "37b437cf-3fc5-4c8e-9c94-1d7c9aff842b",
        "status": "test",
        "description": "Detect enable rdp feature to allow specific user to rdp connect on the targeted machine",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'System\\\\CurrentControlSet\\\\Control\\\\Terminal Server\\\\fAllowToGetHelp', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Exploit Guard Network Protection on Windows Defender",
        "id": "bf9e1387-b040-4393-9851-1598f8ecfae9",
        "status": "test",
        "description": "Detects disabling Windows Defender Exploit Guard Network Protection",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender Security Center\\\\App and Browser protection\\\\DisallowExploitProtectionOverride', case=False) & Details=='DWORD (00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via CHM Helper DLL",
        "id": "976dd1f2-a484-45ec-aa1d-0e87e882262b",
        "status": "test",
        "description": "Detects when an attacker modifies the registry key \"HtmlHelp Author\" to achieve persistence",
        "tags": [
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\HtmlHelp Author\\\\Location', case=False) | TargetObject.str.contains(r'\\\\Software\\\\WOW6432Node\\\\Microsoft\\\\HtmlHelp Author\\\\Location', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Secure Desktop Prompt Disabled",
        "id": "0d7ceeef-3539-4392-8953-3dc664912714",
        "status": "experimental",
        "description": "Detects when an attacker tries to change User Account Control (UAC) elevation request destination via the \"PromptOnSecureDesktop\" value.\nThe \"PromptOnSecureDesktop\" setting specifically determines whether UAC prompts are displayed on the secure desktop. The secure desktop is a separate desktop environment that's isolated from other processes running on the system. It's designed to prevent malicious software from intercepting or tampering with UAC prompts.\nWhen \"PromptOnSecureDesktop\" is set to 0, UAC prompts are displayed on the user's current desktop instead of the secure desktop. This reduces the level of security because it potentially exposes the prompts to manipulation by malicious software.\n",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1548.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\PromptOnSecureDesktop', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using Windows Media Player - Registry",
        "id": "5f9db380-ea57-4d1e-beab-8a2d33397e93",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AppCompatFlags\\\\Compatibility Assistant\\\\Store\\\\C:\\\\Program Files\\\\Windows Media Player\\\\osk.exe', case=False) & Details=='Binary Data'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via LSA Extensions",
        "id": "41f6531d-af6e-4c6e-918f-b946f2b85a36",
        "status": "test",
        "description": "Detects when an attacker modifies the \"REG_MULTI_SZ\" value named \"Extensions\" to include a custom DLL to achieve persistence via lsass.\nThe \"Extensions\" list contains filenames of DLLs being automatically loaded by lsass.exe. Each DLL has its InitializeLsaExtension() method called after loading.\n",
        "tags": [
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\LsaExtensionConfig\\\\LsaSrv\\\\Extensions', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Printer Driver Empty Manufacturer",
        "id": "e0813366-0407-449a-9869-a2db1119dc41",
        "status": "test",
        "description": "Detects a suspicious printer driver installation with an empty Manufacturer value",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1574",
            "cve.2021-1675"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Control\\\\Print\\\\Environments\\\\Windows x64\\\\Drivers', case=False) & TargetObject.str.contains(r'\\\\Manufacturer', case=False) & Details=='(Empty)' & ~ (TargetObject.str.contains(r'\\\\CutePDF Writer v4.0\\\\', case=False) | TargetObject.str.contains(r'\\\\VNC Printer (PS)\\\\', case=False) | TargetObject.str.contains(r'\\\\VNC Printer (UD)\\\\', case=False) | TargetObject.str.contains(r'\\\\Version-3\\\\PDF24\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Tamper Protection on Windows Defender",
        "id": "93d298a1-d28f-47f1-a468-d971e7796679",
        "status": "test",
        "description": "Detects disabling Windows Defender Tamper Protection",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows Defender\\\\Features\\\\TamperProtection', case=False) & Details=='DWORD (0x00000000)' & ~ (Image.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Platform\\\\', case=False) & Image.str.contains(r'\\\\MsMpEng.exe', case=False) | Image=='C:\\\\Program Files\\\\Windows Defender\\\\MsMpEng.exe')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Persistence Via Hhctrl.ocx",
        "id": "f10ed525-97fe-4fed-be7c-2feecca941b1",
        "status": "test",
        "description": "Detects when an attacker modifies the registry value of the \"hhctrl\" to point to a custom binary",
        "tags": [
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\CLSID\\\\{52A2AAAE-085D-4187-97EA-8C30DB990436}\\\\InprocServer32\\\\(Default)', case=False) & ~ Details=='C:\\\\Windows\\\\System32\\\\hhctrl.ocx'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Scheduled TaskCache Change by Uncommon Program",
        "id": "4720b7df-40c3-48fd-bbdf-fd4b3c464f0d",
        "status": "test",
        "description": "Monitor the creation of a new key under 'TaskCache' when a new scheduled task is registered by a process that is not svchost.exe, which is suspicious",
        "tags": [
            "attack.persistence",
            "attack.t1053",
            "attack.t1053.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\', case=False) & ~ (TargetObject.str.contains(r'Microsoft\\\\Windows\\\\UpdateOrchestrator', case=False) | TargetObject.str.contains(r'Microsoft\\\\Windows\\\\SoftwareProtectionPlatform\\\\SvcRestartTask\\\\Index', case=False) | TargetObject.str.contains(r'Microsoft\\\\Windows\\\\Flighting\\\\OneSettings\\\\RefreshCache\\\\Index', case=False) | Image.str.contains(r'C:\\\\Windows\\\\', case=False) & Image.str.contains(r'\\\\TiWorker.exe', case=False) | Image=='C:\\\\WINDOWS\\\\system32\\\\svchost.exe' | Image.str.contains(r'C:\\\\Windows\\\\Microsoft.NET\\\\Framework', case=False) & Image.str.contains(r'\\\\ngen.exe', case=False) & (TargetObject.str.contains(r'\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tasks\\\\{B66B135D-DA06-4FC4-95F8-7458E1D10129}', case=False) | TargetObject.str.contains(r'\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tree\\\\Microsoft\\\\Windows\\\\.NET Framework\\\\.NET Framework NGEN', case=False)) | Image==['C:\\\\Program Files\\\\Microsoft Office\\\\root\\\\Integration\\\\Integrator.exe', 'C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\Integration\\\\Integrator.exe'] | Image=='C:\\\\Windows\\\\System32\\\\msiexec.exe' | Image==['C:\\\\Program Files (x86)\\\\Dropbox\\\\Update\\\\DropboxUpdate.exe', 'C:\\\\Program Files\\\\Dropbox\\\\Update\\\\DropboxUpdate.exe'] | Image=='C:\\\\Windows\\\\explorer.exe' & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tree\\\\Microsoft\\\\Windows\\\\PLA\\\\Server Manager Performance Monitor\\\\', case=False) | Image=='System')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Service Binary in Suspicious Folder",
        "id": "a07f0359-4c90-4dc4-a681-8ffea40b4f47",
        "status": "test",
        "description": "Detect the creation of a service with a service binary located in a suspicious directory",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\', case=False) & TargetObject.str.contains(r'\\\\Start', case=False) & (Image.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\Perflogs\\\\', case=False) | Image.str.contains(r'\\\\ADMIN$\\\\', case=False) | Image.str.contains(r'\\\\Temp\\\\', case=False)) & (Details==['DWORD (0x00000000)', 'DWORD (0x00000001)', 'DWORD (0x00000002)']) | TargetObject.str.contains(r'HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\', case=False) & TargetObject.str.contains(r'\\\\ImagePath', case=False) & (Details.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | Details.str.contains(r'\\\\Perflogs\\\\', case=False) | Details.str.contains(r'\\\\ADMIN$\\\\', case=False) | Details.str.contains(r'\\\\Temp\\\\', case=False))) & ~ (Image.str.contains(r'\\\\Common Files\\\\', case=False) & Image.str.contains(r'\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Bypass UAC Using SilentCleanup Task",
        "id": "724ea201-6514-4f38-9739-e5973c34f49a",
        "status": "test",
        "description": "Detects the setting of the environement variable \"windir\" to a non default value.\nAttackers often abuse this variable in order to trigger a UAC bypass via the \"SilentCleanup\" task.\nThe SilentCleanup task located in %windir%\\system32\\cleanmgr.exe is an auto-elevated task that can be abused to elevate any file with administrator privileges without prompting UAC.\n",
        "tags": [
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Environment\\\\windir', case=False) & ~ Details=='%SystemRoot%'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Attachment Manager Settings Attachments Tamper",
        "id": "ee77a5db-b0f3-4be2-bfd4-b58be1c6b15a",
        "status": "test",
        "description": "Detects tampering with attachment manager settings policies attachments (See reference for more information)",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Attachments\\\\', case=False) & (TargetObject.str.contains(r'\\\\HideZoneInfoOnProperties', case=False) & Details=='DWORD (0x00000001)' | TargetObject.str.contains(r'\\\\SaveZoneInformation', case=False) & Details=='DWORD (0x00000002)' | TargetObject.str.contains(r'\\\\ScanWithAntiVirus', case=False) & Details=='DWORD (0x00000001)')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential PendingFileRenameOperations Tampering",
        "id": "4eec988f-7bf0-49f1-8675-1e6a510b3a2a",
        "status": "test",
        "description": "Detect changes to the \"PendingFileRenameOperations\" registry key from uncommon or suspicious images locations to stage currently used files for rename or deletion after reboot.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & EventType=='SetValue' & TargetObject.str.contains(r'\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\PendingFileRenameOperations', case=False) & (Image.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\reg.exe', case=False) | Image.str.contains(r'\\\\regedit.exe', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Register New IFiltre For Persistence",
        "id": "b23818c7-e575-4d13-8012-332075ec0a2b",
        "status": "test",
        "description": "Detects when an attacker registers a new IFilter for an extension. Microsoft Windows Search uses filters to extract the content of items for inclusion in a full-text index.\nYou can extend Windows Search to index new or proprietary file types by writing filters to extract the content, and property handlers to extract the properties of files.\n",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Classes\\\\.', case=False) & TargetObject.str.contains(r'\\\\PersistentHandler', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Classes\\\\CLSID', case=False) & TargetObject.str.contains(r'\\\\PersistentAddinsRegistered\\\\{89BCB740-6119-101A-BCB7-00DD010655AF}', case=False)) & ~ (TargetObject.str.contains(r'\\\\CLSID\\\\{4F46F75F-199F-4C63-8B7D-86D48FE7970C}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{4887767F-7ADC-4983-B576-88FB643D6F79}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{D3B41FA1-01E3-49AF-AA25-1D0D824275AE}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{72773E1A-B711-4d8d-81FA-B9A43B0650DD}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{098f2470-bae0-11cd-b579-08002b30bfeb}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{1AA9BF05-9A97-48c1-BA28-D9DCE795E93C}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{2e2294a9-50d7-4fe7-a09f-e6492e185884}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{34CEAC8D-CBC0-4f77-B7B1-8A60CB6DA0F7}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{3B224B11-9363-407e-850F-C9E1FFACD8FB}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{3DDEB7A4-8ABF-4D82-B9EE-E1F4552E95BE}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{5645C8C1-E277-11CF-8FDA-00AA00A14F93}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{5645C8C4-E277-11CF-8FDA-00AA00A14F93}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{58A9EBF6-5755-4554-A67E-A2467AD1447B}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{5e941d80-bf96-11cd-b579-08002b30bfeb}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{698A4FFC-63A3-4E70-8F00-376AD29363FB}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{7E9D8D44-6926-426F-AA2B-217A819A5CCE}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{8CD34779-9F10-4f9b-ADFB-B3FAEABDAB5A}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{9694E38A-E081-46ac-99A0-8743C909ACB6}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{98de59a0-d175-11cd-a7bd-00006b827d94}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{AA10385A-F5AA-4EFF-B3DF-71B701E25E18}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{B4132098-7A03-423D-9463-163CB07C151F}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{d044309b-5da6-4633-b085-4ed02522e5a5}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{D169C14A-5148-4322-92C8-754FC9D018D8}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{DD75716E-B42E-4978-BB60-1497B92E30C4}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{E2F83EED-62DE-4A9F-9CD0-A1D40DCD13B6}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{E772CEB3-E203-4828-ADF1-765713D981B8}\\\\', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{eec97550-47a9-11cf-b952-00aa0051fe20}', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{FB10BD80-A331-4e9e-9EB7-00279903AD99}\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Root or CA or AuthRoot Certificate to Store",
        "id": "d223b46b-5621-4037-88fe-fda32eead684",
        "status": "test",
        "description": "Detects the addition of new root, CA or AuthRoot certificates to the Windows registry",
        "tags": [
            "attack.impact",
            "attack.t1490"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\SystemCertificates\\\\Root\\\\Certificates\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\SystemCertificates\\\\Root\\\\Certificates\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\EnterpriseCertificates\\\\Root\\\\Certificates\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\SystemCertificates\\\\CA\\\\Certificates\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\SystemCertificates\\\\CA\\\\Certificates\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\EnterpriseCertificates\\\\CA\\\\Certificates\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\SystemCertificates\\\\AuthRoot\\\\Certificates\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\SystemCertificates\\\\AuthRoot\\\\Certificates\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\EnterpriseCertificates\\\\AuthRoot\\\\Certificates\\\\', case=False)) & TargetObject.str.contains(r'\\\\Blob', case=False) & Details=='Binary Data'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Microsoft Defender Firewall via Registry",
        "id": "974515da-6cc5-4c95-ae65-f97f9150ec7f",
        "status": "test",
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Services\\\\SharedAccess\\\\Parameters\\\\FirewallPolicy\\\\', case=False) & TargetObject.str.contains(r'\\\\EnableFirewall', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New ODBC Driver Registered",
        "id": "3390fbef-c98d-4bdd-a863-d65ed7c610dd",
        "status": "test",
        "description": "Detects the registration of a new ODBC driver.",
        "tags": [
            "attack.persistence"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\ODBC\\\\ODBCINST.INI\\\\', case=False) & TargetObject.str.contains(r'\\\\Driver', case=False) & ~ (TargetObject.str.contains(r'\\\\SQL Server\\\\', case=False) & Details=='%WINDIR%\\\\System32\\\\SQLSRV32.dll') & ~ (TargetObject.str.contains(r'\\\\Microsoft Access ', case=False) & Details.str.contains(r'C:\\\\Progra', case=False) & Details.str.contains(r'\\\\ACEODBC.DLL', case=False) | TargetObject.str.contains(r'\\\\Microsoft Excel Driver', case=False) & Details.str.contains(r'C:\\\\Progra', case=False) & Details.str.contains(r'\\\\ACEODBC.DLL', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Add Debugger Entry To AeDebug For Persistence",
        "id": "092af964-4233-4373-b4ba-d86ea2890288",
        "status": "test",
        "description": "Detects when an attacker adds a new \"Debugger\" value to the \"AeDebug\" key in order to achieve persistence which will get invoked when an application crashes",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AeDebug\\\\Debugger', case=False) & Details.str.contains(r'.dll', case=False) & ~ Details=='\"C:\\\\WINDOWS\\\\system32\\\\vsjitdebugger.exe\" -p %ld -e %ld -j 0x%p'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Custom File Open Handler Executes PowerShell",
        "id": "7530b96f-ad8e-431d-a04d-ac85cc461fdc",
        "status": "test",
        "description": "Detects the abuse of custom file open handler, executing powershell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'shell\\\\open\\\\command\\\\', case=False) & Details.str.contains(r'powershell', case=False) & Details.str.contains(r'-command', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Macro Runtime Scan Scope",
        "id": "ab871450-37dc-4a3a-997f-6662aa8ae0f1",
        "status": "test",
        "description": "Detects tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\', case=False) & TargetObject.str.contains(r'\\\\Microsoft\\\\Office\\\\', case=False) & TargetObject.str.contains(r'\\\\Common\\\\Security', case=False) & TargetObject.str.contains(r'\\\\MacroRuntimeScanScope', case=False) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DHCP Callout DLL Installation",
        "id": "9d3436ef-9476-4c43-acca-90ce06bdf33a",
        "status": "test",
        "description": "Detects the installation of a Callout DLL via CalloutDlls and CalloutEnabled parameter in Registry, which can be used to execute code in context of the DHCP server (restart required)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Services\\\\DHCPServer\\\\Parameters\\\\CalloutDlls', case=False) | TargetObject.str.contains(r'\\\\Services\\\\DHCPServer\\\\Parameters\\\\CalloutEnabled', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Office Autorun Keys Modification",
        "id": "baecf8fb-edbf-429f-9ade-31fc3f22b970",
        "status": "test",
        "description": "Detects modification of autostart extensibility point (ASEP) in registry.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Office', case=False) | TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Office', case=False)) & (TargetObject.str.contains(r'\\\\Word\\\\Addins', case=False) | TargetObject.str.contains(r'\\\\PowerPoint\\\\Addins', case=False) | TargetObject.str.contains(r'\\\\Outlook\\\\Addins', case=False) | TargetObject.str.contains(r'\\\\Onenote\\\\Addins', case=False) | TargetObject.str.contains(r'\\\\Excel\\\\Addins', case=False) | TargetObject.str.contains(r'\\\\Access\\\\Addins', case=False) | TargetObject.str.contains(r'test\\\\Special\\\\Perf', case=False)) & ~ (Details=='(Empty)' | (Image.str.contains(r'C:\\\\Program Files\\\\Microsoft Office\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft Office\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\msiexec.exe', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\regsvr32.exe', case=False)) & (TargetObject.str.contains(r'\\\\Excel\\\\Addins\\\\AdHocReportingExcelClientLib.AdHocReportingExcelClientAddIn.1\\\\', case=False) | TargetObject.str.contains(r'\\\\Excel\\\\Addins\\\\ExcelPlugInShell.PowerMapConnect\\\\', case=False) | TargetObject.str.contains(r'\\\\Excel\\\\Addins\\\\NativeShim\\\\', case=False) | TargetObject.str.contains(r'\\\\Excel\\\\Addins\\\\NativeShim.InquireConnector.1\\\\', case=False) | TargetObject.str.contains(r'\\\\Excel\\\\Addins\\\\PowerPivotExcelClientAddIn.NativeEntry.1\\\\', case=False) | TargetObject.str.contains(r'\\\\Outlook\\\\AddIns\\\\AccessAddin.DC\\\\', case=False) | TargetObject.str.contains(r'\\\\Outlook\\\\AddIns\\\\ColleagueImport.ColleagueImportAddin\\\\', case=False) | TargetObject.str.contains(r'\\\\Outlook\\\\AddIns\\\\EvernoteCC.EvernoteContactConnector\\\\', case=False) | TargetObject.str.contains(r'\\\\Outlook\\\\AddIns\\\\EvernoteOLRD.Connect\\\\', case=False) | TargetObject.str.contains(r'\\\\Outlook\\\\Addins\\\\Microsoft.VbaAddinForOutlook.1\\\\', case=False) | TargetObject.str.contains(r'\\\\Outlook\\\\Addins\\\\OcOffice.OcForms\\\\', case=False) | TargetObject.str.contains(r'\\\\Outlook\\\\Addins\\\\OneNote.OutlookAddin', case=False) | TargetObject.str.contains(r'\\\\Outlook\\\\Addins\\\\OscAddin.Connect\\\\', case=False) | TargetObject.str.contains(r'\\\\Outlook\\\\Addins\\\\OutlookChangeNotifier.Connect\\\\', case=False) | TargetObject.str.contains(r'\\\\Outlook\\\\Addins\\\\UCAddin.LyncAddin.1', case=False) | TargetObject.str.contains(r'\\\\Outlook\\\\Addins\\\\UCAddin.UCAddin.1', case=False) | TargetObject.str.contains(r'\\\\Outlook\\\\Addins\\\\UmOutlookAddin.FormRegionAddin\\\\', case=False)) | (Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\Updates\\\\', case=False)) & Image.str.contains(r'\\\\OfficeClickToRun.exe', case=False) | Image=='C:\\\\Program Files\\\\AVG\\\\Antivirus\\\\RegSvr.exe' & TargetObject.str.contains(r'\\\\Microsoft\\\\Office\\\\Outlook\\\\Addins\\\\Antivirus.AsOutExt\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential AMSI COM Server Hijacking",
        "id": "160d2780-31f7-4922-8b3a-efce30e63e96",
        "status": "test",
        "description": "Detects changes to the AMSI come server registry key in order disable AMSI scanning functionalities. When AMSI attempts to starts its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\CLSID\\\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\\\InProcServer32\\\\(Default)', case=False) & ~ Details=='%windir%\\\\system32\\\\amsi.dll'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Registry Explorer Policy Modification",
        "id": "1c3121ed-041b-4d97-a075-07f54f20fb4a",
        "status": "test",
        "description": "Detects registry modifications that disable internal tools or functions in explorer (malware like Agent Tesla uses this technique)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoLogOff', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoDesktop', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoRun', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoFind', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoControlPanel', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoFileMenu', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoClose', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoSetTaskbar', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoPropertiesMyDocuments', case=False) | TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoTrayContextMenu', case=False)) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Winlogon AllowMultipleTSSessions Enable",
        "id": "f7997770-92c3-4ec9-b112-774c4ef96f96",
        "status": "test",
        "description": "Detects when the 'AllowMultipleTSSessions' value is enabled.\nWhich allows for multiple Remote Desktop connection sessions to be opened at once.\nThis is often used by attacker as a way to connect to an RDP session without disconnecting the other users\n",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\AllowMultipleTSSessions', case=False) & Details.str.contains(r'DWORD (0x00000001)', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Shim Database Patching Activity",
        "id": "bf344fea-d947-4ef4-9192-34d008315d3a",
        "status": "test",
        "description": "Detects installation of new shim databases that try to patch sections of known processes for potential process injection or persistence.",
        "tags": [
            "attack.persistence",
            "attack.t1546.011"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AppCompatFlags\\\\Custom\\\\', case=False) & (TargetObject.str.contains(r'\\\\csrss.exe', case=False) | TargetObject.str.contains(r'\\\\dllhost.exe', case=False) | TargetObject.str.contains(r'\\\\explorer.exe', case=False) | TargetObject.str.contains(r'\\\\RuntimeBroker.exe', case=False) | TargetObject.str.contains(r'\\\\services.exe', case=False) | TargetObject.str.contains(r'\\\\sihost.exe', case=False) | TargetObject.str.contains(r'\\\\svchost.exe', case=False) | TargetObject.str.contains(r'\\\\taskhostw.exe', case=False) | TargetObject.str.contains(r'\\\\winlogon.exe', case=False) | TargetObject.str.contains(r'\\\\WmiPrvSe.exe', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Wow6432Node Classes Autorun Keys Modification",
        "id": "18f2065c-d36c-464a-a748-bcf909acb2e3",
        "status": "test",
        "description": "Detects modification of autostart extensibility point (ASEP) in registry.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Software\\\\Wow6432Node\\\\Classes', case=False) & (TargetObject.str.contains(r'\\\\Folder\\\\ShellEx\\\\ExtShellFolderViews', case=False) | TargetObject.str.contains(r'\\\\Folder\\\\ShellEx\\\\DragDropHandlers', case=False) | TargetObject.str.contains(r'\\\\Folder\\\\ShellEx\\\\ColumnHandlers', case=False) | TargetObject.str.contains(r'\\\\Directory\\\\Shellex\\\\DragDropHandlers', case=False) | TargetObject.str.contains(r'\\\\Directory\\\\Shellex\\\\CopyHookHandlers', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\\\Instance', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\\\Instance', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\\\Instance', case=False) | TargetObject.str.contains(r'\\\\CLSID\\\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\\\Instance', case=False) | TargetObject.str.contains(r'\\\\AllFileSystemObjects\\\\ShellEx\\\\DragDropHandlers', case=False) | TargetObject.str.contains(r'\\\\ShellEx\\\\PropertySheetHandlers', case=False) | TargetObject.str.contains(r'\\\\ShellEx\\\\ContextMenuHandlers', case=False)) & ~ Details=='(Empty)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Event Viewer Events.asp",
        "id": "a1e11042-a74a-46e6-b07c-c4ce8ecc239b",
        "status": "test",
        "description": "Detects potential registry persistence technique using the Event Viewer \"Events.asp\" technique",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Event Viewer\\\\MicrosoftRedirectionProgram', case=False) | TargetObject.str.contains(r'\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Event Viewer\\\\MicrosoftRedirectionURL', case=False)) & ~ (Image.str.contains(r'C:\\\\WINDOWS\\\\system32\\\\svchost.exe', case=False) & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Event Viewer\\\\MicrosoftRedirectionProgram', case=False) & Details=='%%SystemRoot%%\\\\PCHealth\\\\HelpCtr\\\\Binaries\\\\HelpCtr.exe' | Image.str.contains(r'C:\\\\WINDOWS\\\\system32\\\\svchost.exe', case=False) & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Event Viewer\\\\MicrosoftRedirectionProgramCommandLineParameters', case=False) & Details.str.contains(r'-url hcp://services/centers/support*topic=%%s') | Details=='http://go.microsoft.com/fwlink/events.asp' | Details=='(Empty)')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Abusing Winsat Path Parsing - Registry",
        "id": "6597be7b-ac61-4ac8-bef4-d3ec88174853",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Root\\\\InventoryApplicationFile\\\\winsat.exe|', case=False) & TargetObject.str.contains(r'\\\\LowerCaseLongPath', case=False) & Details.str.contains(r'c:\\\\users\\\\', case=False) & Details.str.contains(r'\\\\appdata\\\\local\\\\temp\\\\system32\\\\winsat.exe', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "System Scripts Autorun Keys Modification",
        "id": "e7a2fd40-3ae1-4a85-bf80-15cf624fb1b1",
        "status": "test",
        "description": "Detects modification of autostart extensibility point (ASEP) in registry.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Software\\\\Policies\\\\Microsoft\\\\Windows\\\\System\\\\Scripts', case=False) & (TargetObject.str.contains(r'\\\\Startup', case=False) | TargetObject.str.contains(r'\\\\Shutdown', case=False) | TargetObject.str.contains(r'\\\\Logon', case=False) | TargetObject.str.contains(r'\\\\Logoff', case=False)) & ~ Details=='(Empty)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Blackbyte Ransomware Registry",
        "id": "83314318-052a-4c90-a1ad-660ece38d276",
        "status": "test",
        "description": "BlackByte set three different registry values to escalate privileges and begin setting the stage for lateral movement and encryption",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject==['HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\LocalAccountTokenFilterPolicy', 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\EnableLinkedConnections', 'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\FileSystem\\\\LongPathsEnabled']) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Outlook LoadMacroProviderOnBoot Setting",
        "id": "396ae3eb-4174-4b9b-880e-dc0364d78a19",
        "status": "test",
        "description": "Detects the modification of Outlook setting \"LoadMacroProviderOnBoot\" which if enabled allows the automatic loading of any configured VBA project/module",
        "tags": [
            "attack.persistence",
            "attack.command-and-control",
            "attack.t1137",
            "attack.t1008",
            "attack.t1546"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Outlook\\\\LoadMacroProviderOnBoot', case=False) & Details.str.contains(r'0x00000001', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Enable Microsoft Dynamic Data Exchange",
        "id": "63647769-326d-4dde-a419-b925cc0caf42",
        "status": "test",
        "description": "Enable Dynamic Data Exchange protocol (DDE) in all supported editions of Microsoft Word or Excel.",
        "tags": [
            "attack.execution",
            "attack.t1559.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Word\\\\Security\\\\AllowDDE', case=False) & (Details==['DWORD (0x00000001)', 'DWORD (0x00000002)']) | (TargetObject.str.contains(r'\\\\Excel\\\\Security\\\\DisableDDEServerLaunch', case=False) | TargetObject.str.contains(r'\\\\Excel\\\\Security\\\\DisableDDEServerLookup', case=False)) & Details=='DWORD (0x00000000)')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ClickOnce Trust Prompt Tampering",
        "id": "ac9159cc-c364-4304-8f0a-d63fc1a0aabb",
        "status": "test",
        "description": "Detects changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\MICROSOFT\\\\.NETFramework\\\\Security\\\\TrustManager\\\\PromptingLevel\\\\', case=False) & (TargetObject.str.contains(r'\\\\Internet', case=False) | TargetObject.str.contains(r'\\\\LocalIntranet', case=False) | TargetObject.str.contains(r'\\\\MyComputer', case=False) | TargetObject.str.contains(r'\\\\TrustedSites', case=False) | TargetObject.str.contains(r'\\\\UntrustedSites', case=False)) & Details=='Enabled'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Displaying Hidden Files Feature Disabled",
        "id": "5a5152f1-463f-436b-b2f5-8eceb3964b42",
        "status": "test",
        "description": "Detects modifications to the \"Hidden\" and \"ShowSuperHidden\" explorer registry values in order to disable showing of hidden files and system files.\nThis technique is abused by several malware families to hide their files from normal users.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\ShowSuperHidden', case=False) | TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\Hidden', case=False)) & Details=='DWORD (0x00000000)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Persistence Via New SIP Provider",
        "id": "5a2b21ee-6aaa-4234-ac9d-59a59edf90a1",
        "status": "test",
        "description": "Detects when an attacker register a new SIP provider for persistence and defense evasion",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.t1553.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Cryptography\\\\Providers\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Cryptography\\\\OID\\\\EncodingType', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Cryptography\\\\Providers\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Cryptography\\\\OID\\\\EncodingType', case=False)) & (TargetObject.str.contains(r'\\\\Dll', case=False) | TargetObject.str.contains(r'\\\\$DLL', case=False)) & ~ (Details==['WINTRUST.DLL', 'mso.dll'] | Image=='C:\\\\Windows\\\\System32\\\\poqexec.exe' & TargetObject.str.contains(r'\\\\CryptSIPDll', case=False) & Details=='C:\\\\Windows\\\\System32\\\\PsfSip.dll')"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Registry Persistence via Service in Safe Mode",
        "id": "1547e27c-3974-43e2-a7d7-7f484fb928ec",
        "status": "test",
        "description": "Detects the modification of the registry to allow a driver or service to persist in Safe Mode.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Control\\\\SafeBoot\\\\Minimal\\\\', case=False) | TargetObject.str.contains(r'\\\\Control\\\\SafeBoot\\\\Network\\\\', case=False)) & TargetObject.str.contains(r'\\\\(Default)', case=False) & Details=='Service' & ~ (Image=='C:\\\\WINDOWS\\\\system32\\\\msiexec.exe' & (TargetObject.str.contains(r'\\\\Control\\\\SafeBoot\\\\Minimal\\\\SAVService\\\\(Default)', case=False) | TargetObject.str.contains(r'\\\\Control\\\\SafeBoot\\\\Network\\\\SAVService\\\\(Default)', case=False)))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Mpnotify",
        "id": "92772523-d9c1-4c93-9547-b0ca500baba3",
        "status": "test",
        "description": "Detects when an attacker register a new SIP provider for persistence and defense evasion",
        "tags": [
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\mpnotify', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "IE Change Domain Zone",
        "id": "45e112d0-7759-4c2a-aa36-9f8fb79d3393",
        "status": "test",
        "description": "Hides the file extension through modification of the registry",
        "tags": [
            "attack.persistence",
            "attack.t1137"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\\\\ZoneMap\\\\Domains\\\\', case=False) & ~ (Details==['DWORD (0x00000000)', 'DWORD (0x00000001)', '(Empty)'])"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass via Sdclt",
        "id": "5b872a46-3b90-45c1-8419-f675db8053aa",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using registry key manipulation of sdclt.exe (e.g. UACMe 53)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002",
            "car.2019-04-001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'Software\\\\Classes\\\\exefile\\\\shell\\\\runas\\\\command\\\\isolatedCommand', case=False) | TargetObject.str.contains(r'Software\\\\Classes\\\\Folder\\\\shell\\\\open\\\\command\\\\SymbolicLinkValue', case=False) & Details.str.contains(r'-1[0-9]{3}\\\\\\\\Software\\\\\\\\Classes\\\\\\\\'))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Defender Exclusions Added - Registry",
        "id": "a982fc9c-6333-4ffb-a51d-addb04e8b529",
        "status": "test",
        "description": "Detects the Setting of Windows Defender Exclusions",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows Defender\\\\Exclusions', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Registry Persistence Attempt Via Windows Telemetry",
        "id": "73a883d0-0348-4be4-a8d8-51031c2564f8",
        "status": "test",
        "description": "Detects potential persistence behavior using the windows telemetry registry key.\nWindows telemetry makes use of the binary CompatTelRunner.exe to run a variety of commands and perform the actual telemetry collections.\nThis binary was created to be easily extensible, and to that end, it relies on the registry to instruct on which commands to run.\nThe problem is, it will run any arbitrary command without restriction of location or type.\n",
        "tags": [
            "attack.persistence",
            "attack.t1053.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AppCompatFlags\\\\TelemetryController\\\\', case=False) & TargetObject.str.contains(r'\\\\Command', case=False) & (Details.str.contains(r'.bat', case=False) | Details.str.contains(r'.bin', case=False) | Details.str.contains(r'.cmd', case=False) | Details.str.contains(r'.dat', case=False) | Details.str.contains(r'.dll', case=False) | Details.str.contains(r'.exe', case=False) | Details.str.contains(r'.hta', case=False) | Details.str.contains(r'.jar', case=False) | Details.str.contains(r'.js', case=False) | Details.str.contains(r'.msi', case=False) | Details.str.contains(r'.ps', case=False) | Details.str.contains(r'.sh', case=False) | Details.str.contains(r'.vb', case=False)) & ~ (Details.str.contains(r'\\\\system32\\\\CompatTelRunner.exe', case=False) | Details.str.contains(r'\\\\system32\\\\DeviceCensus.exe', case=False))"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Registry Persistence Attempt Via DbgManagedDebugger",
        "id": "9827ae57-3802-418f-994b-d5ecf5cd974b",
        "status": "test",
        "description": "Detects the addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence. Which will get invoked when an application crashes",
        "tags": [
            "attack.persistence",
            "attack.t1574"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\.NETFramework\\\\DbgManagedDebugger', case=False) & ~ Details=='\"C:\\\\Windows\\\\system32\\\\vsjitdebugger.exe\" PID %d APPDOM %d EXTEXT \"%s\" EVTHDL %d'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Signing Bypass Via Windows Developer Features - Registry",
        "id": "b110ebaf-697f-4da1-afd5-b536fa27a2c1",
        "status": "test",
        "description": "Detects when the enablement of developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & (TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\AppModelUnlock', case=False) | TargetObject.str.contains(r'\\\\Policies\\\\Microsoft\\\\Windows\\\\Appx\\\\', case=False)) & (TargetObject.str.contains(r'\\\\AllowAllTrustedApps', case=False) | TargetObject.str.contains(r'\\\\AllowDevelopmentWithoutDevLicense', case=False)) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New DNS ServerLevelPluginDll Installed",
        "id": "e61e8a88-59a9-451c-874e-70fcc9740d67",
        "status": "test",
        "description": "Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1574.002",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\services\\\\DNS\\\\Parameters\\\\ServerLevelPluginDll', case=False)"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New File Association Using Exefile",
        "id": "44a22d59-b175-4f13-8c16-cbaef5b581ff",
        "status": "test",
        "description": "Detects the abuse of the exefile handler in new file association. Used for bypass of security products.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'Classes\\\\.', case=False) & Details=='exefile'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Sysinternal Tool Execution - Registry",
        "id": "25ffa65d-76d8-4da5-a832-3f2b0136e133",
        "status": "test",
        "description": "Detects the execution of a Sysinternals Tool via the creation of the \"accepteula\" registry key",
        "tags": [
            "attack.resource-development",
            "attack.t1588.002"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='CreateKey' & TargetObject.str.contains(r'\\\\EulaAccepted', case=False)"
        ],
        "logsource": {
            "category": "registry_add",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential NetWire RAT Activity - Registry",
        "id": "1d218616-71b0-4c40-855b-9dbe75510f7f",
        "status": "test",
        "description": "Detects registry keys related to NetWire RAT",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='CreateKey' & TargetObject.str.contains(r'\\\\software\\\\NetWire', case=False)"
        ],
        "logsource": {
            "category": "registry_add",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential COM Object Hijacking Via TreatAs Subkey - Registry",
        "id": "9b0f8a61-91b2-464f-aceb-0527e0a45020",
        "status": "test",
        "description": "Detects COM object hijacking via TreatAs subkey",
        "tags": [
            "attack.persistence",
            "attack.t1546.015"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='CreateKey' & TargetObject.str.contains(r'HKU\\\\', case=False) & TargetObject.str.contains(r'Classes\\\\CLSID\\\\', case=False) & TargetObject.str.contains(r'\\\\TreatAs', case=False) & ~ Image=='C:\\\\WINDOWS\\\\system32\\\\svchost.exe'"
        ],
        "logsource": {
            "category": "registry_add",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via New AMSI Providers - Registry",
        "id": "33efc23c-6ea2-4503-8cfe-bdf82ce8f705",
        "status": "test",
        "description": "Detects when an attacker registers a new AMSI provider in order to achieve persistence",
        "tags": [
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='CreateKey' & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\AMSI\\\\Providers\\\\', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\AMSI\\\\Providers\\\\', case=False)) & ~ (Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_add",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PUA - Sysinternals Tools Execution - Registry",
        "id": "c7da8edc-49ae-45a2-9e61-9fd860e4e73d",
        "status": "test",
        "description": "Detects the execution of some potentially unwanted tools such as PsExec, Procdump, etc. (part of the Sysinternals suite) via the creation of the \"accepteula\" registry key.",
        "tags": [
            "attack.resource-development",
            "attack.t1588.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='CreateKey' & (TargetObject.str.contains(r'\\\\Active Directory Explorer', case=False) | TargetObject.str.contains(r'\\\\Handle', case=False) | TargetObject.str.contains(r'\\\\LiveKd', case=False) | TargetObject.str.contains(r'\\\\Process Explorer', case=False) | TargetObject.str.contains(r'\\\\ProcDump', case=False) | TargetObject.str.contains(r'\\\\PsExec', case=False) | TargetObject.str.contains(r'\\\\PsLoglist', case=False) | TargetObject.str.contains(r'\\\\PsPasswd', case=False) | TargetObject.str.contains(r'\\\\SDelete', case=False) | TargetObject.str.contains(r'\\\\Sysinternals', case=False)) & TargetObject.str.contains(r'\\\\EulaAccepted', case=False)"
        ],
        "logsource": {
            "category": "registry_add",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Logon Scripts - Registry",
        "id": "9ace0707-b560-49b8-b6ca-5148b42f39fb",
        "status": "test",
        "description": "Detects creation of \"UserInitMprLogonScript\" registry value which can be used as a persistence method by malicious actors",
        "tags": [
            "attack.t1037.001",
            "attack.persistence",
            "attack.lateral-movement"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='CreateKey' & TargetObject.str.contains(r'UserInitMprLogonScript', case=False)"
        ],
        "logsource": {
            "category": "registry_add",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Execution Of Renamed Sysinternals Tools - Registry",
        "id": "f50f3c09-557d-492d-81db-9064a8d4e211",
        "status": "test",
        "description": "Detects the creation of the \"accepteula\" key related to the Sysinternals tools being created from executables with the wrong name (e.g. a renamed Sysinternals tool)",
        "tags": [
            "attack.resource-development",
            "attack.t1588.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='CreateKey' & (TargetObject.str.contains(r'\\\\Active Directory Explorer', case=False) | TargetObject.str.contains(r'\\\\Handle', case=False) | TargetObject.str.contains(r'\\\\LiveKd', case=False) | TargetObject.str.contains(r'\\\\ProcDump', case=False) | TargetObject.str.contains(r'\\\\Process Explorer', case=False) | TargetObject.str.contains(r'\\\\PsExec', case=False) | TargetObject.str.contains(r'\\\\PsLoggedon', case=False) | TargetObject.str.contains(r'\\\\PsLoglist', case=False) | TargetObject.str.contains(r'\\\\PsPasswd', case=False) | TargetObject.str.contains(r'\\\\PsPing', case=False) | TargetObject.str.contains(r'\\\\PsService', case=False) | TargetObject.str.contains(r'\\\\SDelete', case=False)) & TargetObject.str.contains(r'\\\\EulaAccepted', case=False) & ~ (Image.str.contains(r'\\\\ADExplorer.exe', case=False) | Image.str.contains(r'\\\\ADExplorer64.exe', case=False) | Image.str.contains(r'\\\\handle.exe', case=False) | Image.str.contains(r'\\\\handle64.exe', case=False) | Image.str.contains(r'\\\\livekd.exe', case=False) | Image.str.contains(r'\\\\livekd64.exe', case=False) | Image.str.contains(r'\\\\procdump.exe', case=False) | Image.str.contains(r'\\\\procdump64.exe', case=False) | Image.str.contains(r'\\\\procexp.exe', case=False) | Image.str.contains(r'\\\\procexp64.exe', case=False) | Image.str.contains(r'\\\\PsExec.exe', case=False) | Image.str.contains(r'\\\\PsExec64.exe', case=False) | Image.str.contains(r'\\\\PsLoggedon.exe', case=False) | Image.str.contains(r'\\\\PsLoggedon64.exe', case=False) | Image.str.contains(r'\\\\psloglist.exe', case=False) | Image.str.contains(r'\\\\psloglist64.exe', case=False) | Image.str.contains(r'\\\\pspasswd.exe', case=False) | Image.str.contains(r'\\\\pspasswd64.exe', case=False) | Image.str.contains(r'\\\\PsPing.exe', case=False) | Image.str.contains(r'\\\\PsPing64.exe', case=False) | Image.str.contains(r'\\\\PsService.exe', case=False) | Image.str.contains(r'\\\\PsService64.exe', case=False) | Image.str.contains(r'\\\\sdelete.exe', case=False))"
        ],
        "logsource": {
            "category": "registry_add",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Disk Cleanup Handler - Registry",
        "id": "d4f4e0be-cf12-439f-9e25-4e2cdcf7df5a",
        "status": "test",
        "description": "Detects when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence.\nThe disk cleanup manager is part of the operating system. It displays the dialog box [\u2026]\nThe user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='CreateKey' & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\VolumeCaches\\\\', case=False) & ~ (TargetObject.str.contains(r'\\\\Active Setup Temp Folders', case=False) | TargetObject.str.contains(r'\\\\BranchCache', case=False) | TargetObject.str.contains(r'\\\\Content Indexer Cleaner', case=False) | TargetObject.str.contains(r'\\\\D3D Shader Cache', case=False) | TargetObject.str.contains(r'\\\\Delivery Optimization Files', case=False) | TargetObject.str.contains(r'\\\\Device Driver Packages', case=False) | TargetObject.str.contains(r'\\\\Diagnostic Data Viewer database files', case=False) | TargetObject.str.contains(r'\\\\Downloaded Program Files', case=False) | TargetObject.str.contains(r'\\\\DownloadsFolder', case=False) | TargetObject.str.contains(r'\\\\Feedback Hub Archive log files', case=False) | TargetObject.str.contains(r'\\\\Internet Cache Files', case=False) | TargetObject.str.contains(r'\\\\Language Pack', case=False) | TargetObject.str.contains(r'\\\\Microsoft Office Temp Files', case=False) | TargetObject.str.contains(r'\\\\Offline Pages Files', case=False) | TargetObject.str.contains(r'\\\\Old ChkDsk Files', case=False) | TargetObject.str.contains(r'\\\\Previous Installations', case=False) | TargetObject.str.contains(r'\\\\Recycle Bin', case=False) | TargetObject.str.contains(r'\\\\RetailDemo Offline Content', case=False) | TargetObject.str.contains(r'\\\\Setup Log Files', case=False) | TargetObject.str.contains(r'\\\\System error memory dump files', case=False) | TargetObject.str.contains(r'\\\\System error minidump files', case=False) | TargetObject.str.contains(r'\\\\Temporary Files', case=False) | TargetObject.str.contains(r'\\\\Temporary Setup Files', case=False) | TargetObject.str.contains(r'\\\\Temporary Sync Files', case=False) | TargetObject.str.contains(r'\\\\Thumbnail Cache', case=False) | TargetObject.str.contains(r'\\\\Update Cleanup', case=False) | TargetObject.str.contains(r'\\\\Upgrade Discarded Files', case=False) | TargetObject.str.contains(r'\\\\User file versions', case=False) | TargetObject.str.contains(r'\\\\Windows Defender', case=False) | TargetObject.str.contains(r'\\\\Windows Error Reporting Files', case=False) | TargetObject.str.contains(r'\\\\Windows ESD installation files', case=False) | TargetObject.str.contains(r'\\\\Windows Upgrade Log Files', case=False))"
        ],
        "logsource": {
            "category": "registry_add",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Removal Of SD Value to Hide Schedule Task - Registry",
        "id": "acd74772-5f88-45c7-956b-6a7b36c294d2",
        "status": "test",
        "description": "Remove SD (Security Descriptor) value in \\Schedule\\TaskCache\\Tree registry hive to hide schedule task. This technique is used by Tarrask malware",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='DeleteKey' & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tree\\\\', case=False) & TargetObject.str.contains(r'SD', case=False)"
        ],
        "logsource": {
            "category": "registry_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Folder Removed From Exploit Guard ProtectedFolders List - Registry",
        "id": "272e55a4-9e6b-4211-acb6-78f51f0b1b40",
        "status": "test",
        "description": "Detects the removal of folders from the \"ProtectedFolders\" list of of exploit guard. This could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='DeleteValue' & TargetObject.str.contains(r'SOFTWARE\\\\Microsoft\\\\Windows Defender\\\\Windows Defender Exploit Guard\\\\Controlled Folder Access\\\\ProtectedFolders', case=False)"
        ],
        "logsource": {
            "category": "registry_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Recall Feature Enabled - DisableAIDataAnalysis Value Deleted",
        "id": "5dfc1465-8f65-4fde-8eb5-6194380c6a62",
        "status": "experimental",
        "description": "Detects the enabling of the Windows Recall feature via registry manipulation. Windows Recall can be enabled by deleting the existing \"DisableAIDataAnalysis\" registry value.\nAdversaries may enable Windows Recall as part of post-exploitation discovery and collection activities.\nThis rule assumes that Recall is already explicitly disabled on the host, and subsequently enabled by the adversary.\n",
        "tags": [
            "attack.collection",
            "attack.t1113"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='DeleteValue' & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows\\\\WindowsAI\\\\DisableAIDataAnalysis', case=False)"
        ],
        "logsource": {
            "category": "registry_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Removal Of Index Value to Hide Schedule Task - Registry",
        "id": "526cc8bc-1cdc-48ad-8b26-f19bff969cec",
        "status": "test",
        "description": "Detects when the \"index\" value of a scheduled task is removed or deleted from the registry. Which effectively hides it from any tooling such as \"schtasks /query\"",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='DeleteKey' & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tree\\\\', case=False) & TargetObject.str.contains(r'Index', case=False)"
        ],
        "logsource": {
            "category": "registry_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Terminal Server Client Connection History Cleared - Registry",
        "id": "07bdd2f5-9c58-4f38-aec8-e101bb79ef8d",
        "status": "test",
        "description": "Detects the deletion of registry keys containing the MSTSC connection history",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & (EventType=='DeleteValue' & TargetObject.str.contains(r'\\\\Microsoft\\\\Terminal Server Client\\\\Default\\\\MRU', case=False) | EventType=='DeleteKey' & TargetObject.str.contains(r'\\\\Microsoft\\\\Terminal Server Client\\\\Servers\\\\', case=False))"
        ],
        "logsource": {
            "category": "registry_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Removal Of AMSI Provider Registry Keys",
        "id": "41d1058a-aea7-4952-9293-29eaaf516465",
        "status": "test",
        "description": "Detects the deletion of AMSI provider registry key entries in HKLM\\Software\\Microsoft\\AMSI. This technique could be used by an attacker in order to disable AMSI inspection.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='DeleteKey' & (TargetObject.str.contains(r'{2781761E-28E0-4109-99FE-B9D127C57AFE}', case=False) | TargetObject.str.contains(r'{A7C452EF-8E9F-42EB-9F2B-245613CA0DC9}', case=False))"
        ],
        "logsource": {
            "category": "registry_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Removal of Potential COM Hijacking Registry Keys",
        "id": "96f697b0-b499-4e5d-9908-a67bec11cdb6",
        "status": "test",
        "description": "Detects any deletion of entries in \".*\\shell\\open\\command\" registry keys.\nThese registry keys might have been used for COM hijacking activities by a threat actor or an attacker and the deletion could indicate steps to remove its tracks.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==12 & EventType=='DeleteKey' & TargetObject.str.contains(r'\\\\shell\\\\open\\\\command', case=False) & ~ (Image=='C:\\\\Windows\\\\system32\\\\svchost.exe' | (Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\Updates\\\\', case=False)) & Image.str.contains(r'\\\\OfficeClickToRun.exe', case=False) | Image=='C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe' | Image.str.contains(r'\\\\Dropbox.exe', case=False) & TargetObject.str.contains(r'\\\\Dropbox.', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\Wireshark_uninstaller.exe', case=False) & TargetObject.str.contains(r'\\\\wireshark-capture-file\\\\', case=False) | (Image.str.contains(r'C:\\\\Program Files\\\\Opera\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Opera\\\\', case=False)) & Image.str.contains(r'\\\\installer.exe', case=False) | Image.str.contains(r'peazip', case=False) & TargetObject.str.contains(r'\\\\PeaZip.', case=False) | Image.str.contains(r'\\\\Everything.exe', case=False) & TargetObject.str.contains(r'\\\\Everything.', case=False) | Image.str.contains(r'C:\\\\Windows\\\\Installer\\\\MSI', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\Java\\\\', case=False) & Image.str.contains(r'\\\\installer.exe', case=False) & TargetObject.str.contains(r'\\\\Classes\\\\WOW6432Node\\\\CLSID\\\\{4299124F-F2C3-41b4-9C73-9236B2AD0E8F}', case=False))"
        ],
        "logsource": {
            "category": "registry_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New DLL Added to AppCertDlls Registry Key",
        "id": "6aa1d992-5925-4e9f-a49b-845e51d1de01",
        "status": "test",
        "description": "Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key can be abused to obtain persistence and privilege escalation\nby causing a malicious DLL to be loaded and run in the context of separate processes on the computer.\n",
        "tags": [
            "attack.persistence",
            "attack.t1546.009"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (TargetObject=='HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\AppCertDlls' | NewName=='HKLM\\\\SYSTEM\\\\CurentControlSet\\\\Control\\\\Session Manager\\\\AppCertDlls')"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New DLL Added to AppInit_DLLs Registry Key",
        "id": "4f84b697-c9ed-4420-8ab5-e09af5b2345d",
        "status": "test",
        "description": "DLLs that are specified in the AppInit_DLLs value in the Registry key HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll",
        "tags": [
            "attack.persistence",
            "attack.t1546.010"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows\\\\AppInit_Dlls', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows\\\\AppInit_Dlls', case=False) | NewName.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows\\\\AppInit_Dlls', case=False) | NewName.str.contains(r'\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows\\\\AppInit_Dlls', case=False)) & ~ Details=='(Empty)'"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Narrator's Feedback-Hub Persistence",
        "id": "f663a6d9-9d1b-49b8-b2b1-0637914d199a",
        "status": "test",
        "description": "Detects abusing Windows 10 Narrator's Feedback-Hub",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (EventType=='DeleteValue' & TargetObject.str.contains(r'\\\\AppXypsaf9f1qserqevf0sws76dx4k9a5206\\\\Shell\\\\open\\\\command\\\\DelegateExecute', case=False) | TargetObject.str.contains(r'\\\\AppXypsaf9f1qserqevf0sws76dx4k9a5206\\\\Shell\\\\open\\\\command\\\\(Default)', case=False))"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WINEKEY Registry Modification",
        "id": "b98968aa-dbc0-4a9c-ac35-108363cbf8d5",
        "status": "test",
        "description": "Detects potential malicious modification of run keys by winekey or team9 backdoor",
        "tags": [
            "attack.persistence",
            "attack.t1547"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\Backup Mgr', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Office Application Startup - Office Test",
        "id": "3d27f6dd-1c74-4687-b4fa-ca849d128d1c",
        "status": "test",
        "description": "Detects the addition of office test registry that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started",
        "tags": [
            "attack.persistence",
            "attack.t1137.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Office test\\\\Special\\\\Perf', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PrinterNightmare Mimikatz Driver Name",
        "id": "ba6b9e43-1d45-4d3c-a504-1043a64c8469",
        "status": "test",
        "description": "Detects static QMS 810 and mimikatz driver name used by Mimikatz as exploited in CVE-2021-1675 and CVE-2021-34527",
        "tags": [
            "attack.execution",
            "attack.t1204",
            "cve.2021-1675",
            "cve.2021-34527"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (TargetObject.str.contains(r'\\\\Control\\\\Print\\\\Environments\\\\Windows x64\\\\Drivers\\\\Version-3\\\\QMS 810\\\\', case=False) | TargetObject.str.contains(r'\\\\Control\\\\Print\\\\Environments\\\\Windows x64\\\\Drivers\\\\Version-3\\\\mimikatz', case=False) | TargetObject.str.contains(r'legitprinter', case=False) & TargetObject.str.contains(r'\\\\Control\\\\Print\\\\Environments\\\\Windows', case=False) | (TargetObject.str.contains(r'\\\\Control\\\\Print\\\\Environments', case=False) | TargetObject.str.contains(r'\\\\CurrentVersion\\\\Print\\\\Printers', case=False)) & (TargetObject.str.contains(r'Gentil Kiwi', case=False) | TargetObject.str.contains(r'mimikatz printer', case=False) | TargetObject.str.contains(r'Kiwi Legit Printer', case=False)))"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Via Wsreset",
        "id": "6ea3bf32-9680-422d-9f50-e90716b12a66",
        "status": "test",
        "description": "Unfixed method for UAC bypass from Windows 10. WSReset.exe file associated with the Windows Store. It will run a binary file contained in a low-privilege registry.",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'\\\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\\\Shell\\\\open\\\\command', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Sticky Key Like Backdoor Usage - Registry",
        "id": "baca5663-583c-45f9-b5dc-ea96a22ce542",
        "status": "test",
        "description": "Detects the usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen",
        "tags": [
            "attack.privilege-escalation",
            "attack.persistence",
            "attack.t1546.008",
            "car.2014-11-003",
            "car.2014-11-008"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\sethc.exe\\\\Debugger', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\utilman.exe\\\\Debugger', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\osk.exe\\\\Debugger', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\Magnify.exe\\\\Debugger', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\Narrator.exe\\\\Debugger', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\DisplaySwitch.exe\\\\Debugger', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\atbroker.exe\\\\Debugger', case=False) | TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\HelpPane.exe\\\\Debugger', case=False))"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DLL Load via LSASS",
        "id": "b3503044-60ce-4bf4-bbcb-e3db98788823",
        "status": "test",
        "description": "Detects a method to load DLL via LSASS process using an undocumented Registry key",
        "tags": [
            "attack.execution",
            "attack.persistence",
            "attack.t1547.008"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (TargetObject.str.contains(r'\\\\CurrentControlSet\\\\Services\\\\NTDS\\\\DirectoryServiceExtPt', case=False) | TargetObject.str.contains(r'\\\\CurrentControlSet\\\\Services\\\\NTDS\\\\LsaDbExtPt', case=False)) & ~ (Image=='C:\\\\Windows\\\\system32\\\\lsass.exe' & (Details==['%%systemroot%%\\\\system32\\\\ntdsa.dll', '%%systemroot%%\\\\system32\\\\lsadb.dll']))"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Run Key from Download",
        "id": "9c5037d1-c568-49b3-88c7-9846a5bdc2be",
        "status": "test",
        "description": "Detects the suspicious RUN keys created by software located in Download or temporary Outlook/Internet Explorer directories",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (Image.str.contains(r'\\\\Downloads\\\\', case=False) | Image.str.contains(r'\\\\Temporary Internet Files\\\\Content.Outlook\\\\', case=False) | Image.str.contains(r'\\\\Local Settings\\\\Temporary Internet Files\\\\', case=False)) & TargetObject.str.contains(r'\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Disable Security Events Logging Adding Reg Key MiniNt",
        "id": "919f2ef0-be2d-4a7a-b635-eb2b41fde044",
        "status": "test",
        "description": "Detects the addition of a key 'MiniNt' to the registry. Upon a reboot, Windows Event Log service will stopped write events.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (TargetObject=='HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\MiniNt' & EventType=='CreateKey' | NewName=='HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\MiniNt')"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Qakbot Registry Activity",
        "id": "1c8e96cd-2bed-487d-9de0-b46c90cade56",
        "status": "test",
        "description": "Detects a registry key used by IceID in a campaign that distributes malicious OneNote files",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'\\\\Software\\\\firm\\\\soft\\\\Name', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Camera and Microphone Access",
        "id": "62120148-6b7a-42be-8b91-271c04e281a3",
        "status": "test",
        "description": "Detects Processes accessing the camera and microphone from suspicious folder",
        "tags": [
            "attack.collection",
            "attack.t1125",
            "attack.t1123"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\CapabilityAccessManager\\\\ConsentStore\\\\', case=False) & TargetObject.str.contains(r'\\\\NonPackaged', case=False) & (TargetObject.str.contains(r'microphone', case=False) | TargetObject.str.contains(r'webcam', case=False)) & (TargetObject.str.contains(r':#Windows#Temp#', case=False) | TargetObject.str.contains(r':#$Recycle.bin#', case=False) | TargetObject.str.contains(r':#Temp#', case=False) | TargetObject.str.contains(r':#Users#Public#', case=False) | TargetObject.str.contains(r':#Users#Default#', case=False) | TargetObject.str.contains(r':#Users#Desktop#', case=False))"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Security Support Provider (SSP) Added to LSA Configuration",
        "id": "eeb30123-9fbd-4ee8-aaa0-2e545bbed6dc",
        "status": "test",
        "description": "Detects the addition of a SSP to the registry. Upon a reboot or API call, SSP DLLs gain access to encrypted and plaintext passwords stored in Windows.\n",
        "tags": [
            "attack.persistence",
            "attack.t1547.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (TargetObject.str.contains(r'\\\\Control\\\\Lsa\\\\Security Packages', case=False) | TargetObject.str.contains(r'\\\\Control\\\\Lsa\\\\OSConfig\\\\Security Packages', case=False)) & ~ (Image==['C:\\\\Windows\\\\system32\\\\msiexec.exe', 'C:\\\\Windows\\\\syswow64\\\\MsiExec.exe'])"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CMSTP Execution Registry Event",
        "id": "b6d235fc-1d38-4b12-adbe-325f06728f37",
        "status": "stable",
        "description": "Detects various indicators of Microsoft Connection Manager Profile Installer execution",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1218.003",
            "attack.g0069",
            "car.2019-04-001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'\\\\cmmgr32.exe', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Registry Trust Record Modification",
        "id": "295a59c1-7b79-4b47-a930-df12c15fc9c2",
        "status": "test",
        "description": "Alerts on trust record modification within the registry, indicating usage of macros",
        "tags": [
            "attack.initial-access",
            "attack.t1566.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'\\\\Security\\\\Trusted Documents\\\\TrustRecords', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New PortProxy Registry Entry Added",
        "id": "a54f842a-3713-4b45-8c84-5f136fdebd3c",
        "status": "test",
        "description": "Detects the modification of the PortProxy registry key which is used for port forwarding.",
        "tags": [
            "attack.lateral-movement",
            "attack.defense-evasion",
            "attack.command-and-control",
            "attack.t1090"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'\\\\Services\\\\PortProxy\\\\v4tov4\\\\tcp\\\\', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Wdigest CredGuard Registry Modification",
        "id": "1a2d6c47-75b0-45bd-b133-2c0be75349fd",
        "status": "test",
        "description": "Detects potential malicious modification of the property value of IsCredGuardEnabled from\nHKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to disable Cred Guard on a system.\nThis is usually used with UseLogonCredential to manipulate the caching credentials.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'\\\\IsCredGuardEnabled', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Atbroker Registry Change",
        "id": "9577edbb-851f-4243-8c91-1d5b50c1a39b",
        "status": "test",
        "description": "Detects creation/modification of Assistive Technology applications and persistence with usage of 'at'",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218",
            "attack.persistence",
            "attack.t1547"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (TargetObject.str.contains(r'Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Accessibility\\\\ATs', case=False) | TargetObject.str.contains(r'Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Accessibility\\\\Configuration', case=False)) & ~ (Image=='C:\\\\Windows\\\\system32\\\\atbroker.exe' & TargetObject.str.contains(r'\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Accessibility\\\\Configuration', case=False) & Details=='(Empty)' | Image.str.contains(r'C:\\\\Windows\\\\Installer\\\\MSI', case=False) & TargetObject.str.contains(r'Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Accessibility\\\\ATs', case=False))"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "NetNTLM Downgrade Attack - Registry",
        "id": "d67572a0-e2ec-45d6-b8db-c100d14b8ef2",
        "status": "test",
        "description": "Detects NetNTLM downgrade attack",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'SYSTEM\\\\', case=False) & TargetObject.str.contains(r'ControlSet', case=False) & TargetObject.str.contains(r'\\\\Control\\\\Lsa', case=False) & (TargetObject.str.contains(r'\\\\lmcompatibilitylevel', case=False) & (Details==['DWORD (0x00000000)', 'DWORD (0x00000001)', 'DWORD (0x00000002)']) | TargetObject.str.contains(r'\\\\NtlmMinClientSec', case=False) & (Details==['DWORD (0x00000000)', 'DWORD (0x00000010)', 'DWORD (0x00000020)', 'DWORD (0x00000030)']) | TargetObject.str.contains(r'\\\\RestrictSendingNTLMTraffic', case=False))"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Creation of a Local Hidden User Account by Registry",
        "id": "460479f3-80b7-42da-9c43-2cc1d54dbccd",
        "status": "test",
        "description": "Sysmon registry detection of a local hidden user account.",
        "tags": [
            "attack.persistence",
            "attack.t1136.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'\\\\SAM\\\\SAM\\\\Domains\\\\Account\\\\Users\\\\Names\\\\', case=False) & TargetObject.str.contains(r'$', case=False) & Image.str.contains(r'\\\\lsass.exe', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Run Once Task Configuration in Registry",
        "id": "c74d7efc-8826-45d9-b8bb-f04fac9e4eff",
        "status": "test",
        "description": "Rule to detect the configuration of Run Once registry key. Configured payload can be run by runonce.exe /AlternateShellStartup",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'\\\\Microsoft\\\\Active Setup\\\\Installed Components', case=False) & TargetObject.str.contains(r'\\\\StubPath', case=False) & ~ (Details.str.contains(r'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\', case=False) & Details.str.contains(r'\\\\Installer\\\\chrmstp.exe\" --configure-user-settings --verbose-logging --system-level', case=False) | (Details.str.contains(r'C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\', case=False) | Details.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\', case=False)) & Details.str.contains(r'\\\\Installer\\\\setup.exe\" --configure-user-settings --verbose-logging --system-level --msedge --channel=stable', case=False))"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "RedMimicry Winnti Playbook Registry Manipulation",
        "id": "5b175490-b652-4b02-b1de-5b5b4083c5f8",
        "status": "test",
        "description": "Detects actions caused by the RedMimicry Winnti playbook",
        "tags": [
            "attack.defense-evasion",
            "attack.t1112"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'HKLM\\\\SOFTWARE\\\\Microsoft\\\\HTMLHelp\\\\data', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Esentutl Volume Shadow Copy Service Keys",
        "id": "5aad0995-46ab-41bd-a9ff-724f41114971",
        "status": "test",
        "description": "Detects the volume shadow copy service initialization and processing via esentutl. Registry keys such as HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\VSS\\\\Diag\\\\VolSnap\\\\Volume are captured.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'System\\\\CurrentControlSet\\\\Services\\\\VSS', case=False) & Image.str.contains(r'esentutl.exe', case=False) & ~ TargetObject.str.contains(r'System\\\\CurrentControlSet\\\\Services\\\\VSS\\\\Start', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Credential Editor Registry",
        "id": "a6b33c02-8305-488f-8585-03cb2a7763f2",
        "status": "test",
        "description": "Detects the use of Windows Credential Editor (WCE)",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001",
            "attack.s0005"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'Services\\\\WCESERVICE\\\\Start', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Pandemic Registry Key",
        "id": "47e0852a-cf81-4494-a8e6-31864f8c86ed",
        "status": "test",
        "description": "Detects Pandemic Windows Implant",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'\\\\SYSTEM\\\\CurrentControlSet\\\\services\\\\null\\\\Instance', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Path To Screensaver Binary Modified",
        "id": "67a6c006-3fbe-46a7-9074-2ba3b82c3000",
        "status": "test",
        "description": "Detects value modification of registry key containing path to binary used as screensaver.",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1546.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'\\\\Control Panel\\\\Desktop\\\\SCRNSAVE.EXE', case=False) & ~ (Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\explorer.exe', case=False))"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Enable Remote Connection Between Anonymous Computer - AllowAnonymousCallback",
        "id": "4d431012-2ab5-4db7-a84e-b29809da2172",
        "status": "test",
        "description": "Detects enabling of the \"AllowAnonymousCallback\" registry value, which allows a remote connection between computers that do not have a trust relationship.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==13 & TargetObject.str.contains(r'\\\\Microsoft\\\\WBEM\\\\CIMOM\\\\AllowAnonymousCallback', case=False) & Details=='DWORD (0x00000001)'"
        ],
        "logsource": {
            "category": "registry_set",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HybridConnectionManager Service Installation - Registry",
        "id": "ac8866c7-ce44-46fd-8c17-b24acff96ca8",
        "status": "test",
        "description": "Detects the installation of the Azure Hybrid Connection Manager service to allow remote code execution from Azure function.",
        "tags": [
            "attack.resource-development",
            "attack.t1608"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (TargetObject.str.contains(r'\\\\Services\\\\HybridConnectionManager', case=False) | EventType=='SetValue' & Details.str.contains(r'Microsoft.HybridConnectionManager.Listener.exe', case=False))"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Registry Entries For Azorult Malware",
        "id": "f7f9ab88-7557-4a69-b30e-0a8f91b3a0e7",
        "status": "test",
        "description": "Detects the presence of a registry key created during Azorult execution",
        "tags": [
            "attack.execution",
            "attack.t1112"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (EventID==[12, 13]) & TargetObject.str.contains(r'SYSTEM\\\\', case=False) & TargetObject.str.contains(r'\\\\services\\\\localNETService', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Registry Persistence Mechanisms in Recycle Bin",
        "id": "277efb8f-60be-4f10-b4d3-037802f37167",
        "status": "test",
        "description": "Detects persistence registry keys for Recycle Bin",
        "tags": [
            "attack.persistence",
            "attack.t1547"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (EventType=='RenameKey' & NewName.str.contains(r'\\\\CLSID\\\\{645FF040-5081-101B-9F08-00AA002F954E}\\\\shell\\\\open', case=False) | EventType=='SetValue' & TargetObject.str.contains(r'\\\\CLSID\\\\{645FF040-5081-101B-9F08-00AA002F954E}\\\\shell\\\\open\\\\command\\\\(Default)', case=False))"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Shell Open Registry Keys Manipulation",
        "id": "152f3630-77c1-4284-bcc0-4cc68ab2f6e7",
        "status": "test",
        "description": "Detects the shell open key manipulation (exefile and ms-settings) used for persistence and the pattern of UAC Bypass using fodhelper.exe, computerdefaults.exe, slui.exe via registry keys (e.g. UACMe 33 or 62)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002",
            "attack.t1546.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & (EventType=='SetValue' & TargetObject.str.contains(r'Classes\\\\ms-settings\\\\shell\\\\open\\\\command\\\\SymbolicLinkValue', case=False) & Details.str.contains(r'\\\\Software\\\\Classes\\\\{', case=False) | TargetObject.str.contains(r'Classes\\\\ms-settings\\\\shell\\\\open\\\\command\\\\DelegateExecute', case=False) | EventType=='SetValue' & (TargetObject.str.contains(r'Classes\\\\ms-settings\\\\shell\\\\open\\\\command\\\\(Default)', case=False) | TargetObject.str.contains(r'Classes\\\\exefile\\\\shell\\\\open\\\\command\\\\(Default)', case=False)) & ~ Details=='(Empty)')"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Credential Dumping Via LSASS SilentProcessExit Technique",
        "id": "55e29995-75e7-451a-bef0-6225e2f13597",
        "status": "test",
        "description": "Detects changes to the Registry in which a monitor program gets registered to dump the memory of the lsass.exe process",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[12, 13, 14]) & TargetObject.str.contains(r'Microsoft\\\\Windows NT\\\\CurrentVersion\\\\SilentProcessExit\\\\lsass.exe', case=False)"
        ],
        "logsource": {
            "category": "registry_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Tamper Windows Defender - PSClassic",
        "id": "ec19ebab-72dc-40e1-9728-4c0b805d722c",
        "status": "test",
        "description": "Attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Windows PowerShell' & EventID==600 & Data.str.contains(r'Set-MpPreference', case=False) & (Data.str.contains(r'-dbaf $true', case=False) | Data.str.contains(r'-dbaf 1', case=False) | Data.str.contains(r'-dbm $true', case=False) | Data.str.contains(r'-dbm 1', case=False) | Data.str.contains(r'-dips $true', case=False) | Data.str.contains(r'-dips 1', case=False) | Data.str.contains(r'-DisableArchiveScanning $true', case=False) | Data.str.contains(r'-DisableArchiveScanning 1', case=False) | Data.str.contains(r'-DisableBehaviorMonitoring $true', case=False) | Data.str.contains(r'-DisableBehaviorMonitoring 1', case=False) | Data.str.contains(r'-DisableBlockAtFirstSeen $true', case=False) | Data.str.contains(r'-DisableBlockAtFirstSeen 1', case=False) | Data.str.contains(r'-DisableCatchupFullScan $true', case=False) | Data.str.contains(r'-DisableCatchupFullScan 1', case=False) | Data.str.contains(r'-DisableCatchupQuickScan $true', case=False) | Data.str.contains(r'-DisableCatchupQuickScan 1', case=False) | Data.str.contains(r'-DisableIntrusionPreventionSystem $true', case=False) | Data.str.contains(r'-DisableIntrusionPreventionSystem 1', case=False) | Data.str.contains(r'-DisableIOAVProtection $true', case=False) | Data.str.contains(r'-DisableIOAVProtection 1', case=False) | Data.str.contains(r'-DisableRealtimeMonitoring $true', case=False) | Data.str.contains(r'-DisableRealtimeMonitoring 1', case=False) | Data.str.contains(r'-DisableRemovableDriveScanning $true', case=False) | Data.str.contains(r'-DisableRemovableDriveScanning 1', case=False) | Data.str.contains(r'-DisableScanningMappedNetworkDrivesForFullScan $true', case=False) | Data.str.contains(r'-DisableScanningMappedNetworkDrivesForFullScan 1', case=False) | Data.str.contains(r'-DisableScanningNetworkFiles $true', case=False) | Data.str.contains(r'-DisableScanningNetworkFiles 1', case=False) | Data.str.contains(r'-DisableScriptScanning $true', case=False) | Data.str.contains(r'-DisableScriptScanning 1', case=False) | Data.str.contains(r'-MAPSReporting $false', case=False) | Data.str.contains(r'-MAPSReporting 0', case=False) | Data.str.contains(r'-drdsc $true', case=False) | Data.str.contains(r'-drdsc 1', case=False) | Data.str.contains(r'-drtm $true', case=False) | Data.str.contains(r'-drtm 1', case=False) | Data.str.contains(r'-dscrptsc $true', case=False) | Data.str.contains(r'-dscrptsc 1', case=False) | Data.str.contains(r'-dsmndf $true', case=False) | Data.str.contains(r'-dsmndf 1', case=False) | Data.str.contains(r'-dsnf $true', case=False) | Data.str.contains(r'-dsnf 1', case=False) | Data.str.contains(r'-dss $true', case=False) | Data.str.contains(r'-dss 1', case=False) | Data.str.contains(r'HighThreatDefaultAction Allow', case=False) | Data.str.contains(r'htdefac Allow', case=False) | Data.str.contains(r'LowThreatDefaultAction Allow', case=False) | Data.str.contains(r'ltdefac Allow', case=False) | Data.str.contains(r'ModerateThreatDefaultAction Allow', case=False) | Data.str.contains(r'mtdefac Allow', case=False) | Data.str.contains(r'SevereThreatDefaultAction Allow', case=False) | Data.str.contains(r'stdefac Allow', case=False))"
        ],
        "logsource": {
            "category": "ps_classic_provider_start",
            "product": "windows",
            "service": "powershell-classic"
        }
    },
    {
        "title": "Nslookup PowerShell Download Cradle",
        "id": "999bff6d-dc15-44c9-9f5c-e1051bfc86e1",
        "status": "test",
        "description": "Detects a powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records.",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Windows PowerShell' & EventID==400 & Data.str.contains(r'powershell', case=False) & Data.str.contains(r'nslookup', case=False) & Data.str.contains(r'[1]', case=False) & (Data.str.contains(r'-q=txt http', case=False) | Data.str.contains(r'-querytype=txt http', case=False) | Data.str.contains(r'-type=txt http', case=False))"
        ],
        "logsource": {
            "category": "ps_classic_start",
            "product": "windows",
            "service": "powershell-classic"
        }
    },
    {
        "title": "Potential RemoteFXvGPUDisablement.EXE Abuse",
        "id": "f65e22f9-819e-4f96-9c7b-498364ae7a25",
        "status": "test",
        "description": "Detects PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of  the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Windows PowerShell' & Data.str.contains(r'ModuleContents=function Get-VMRemoteFXPhysicalVideoAdapter {', case=False)"
        ],
        "logsource": {
            "product": "windows",
            "service": "powershell-classic",
            "definition": "fields have to be extract from event",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/powershell/powershell_classic/posh_pc_remotefxvgpudisablement_abuse.yml"
        }
    },
    {
        "title": "Delete Volume Shadow Copies Via WMI With PowerShell",
        "id": "87df9ee1-5416-453a-8a08-e8d4a51e9ce1",
        "status": "stable",
        "description": "Shadow Copies deletion using operating systems utilities via PowerShell",
        "tags": [
            "attack.impact",
            "attack.t1490"
        ],
        "level": "high",
        "rule": [
            "Channel=='Windows PowerShell' & EventID==400 & Data.str.contains(r'Get-WmiObject', case=False) & Data.str.contains(r'Win32_ShadowCopy', case=False) & (Data.str.contains(r'Delete()', case=False) | Data.str.contains(r'Remove-WmiObject', case=False))"
        ],
        "logsource": {
            "category": "ps_classic_start",
            "product": "windows",
            "service": "powershell-classic"
        }
    },
    {
        "title": "PowerShell Downgrade Attack - PowerShell",
        "id": "6331d09b-4785-4c13-980f-f96661356249",
        "status": "test",
        "description": "Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Windows PowerShell' & EventID==400 & Data.str.contains(r'EngineVersion=2.', case=False) & ~ Data.str.contains(r'HostVersion=2.', case=False)"
        ],
        "logsource": {
            "category": "ps_classic_start",
            "product": "windows",
            "service": "powershell-classic"
        }
    },
    {
        "title": "Use Get-NetTCPConnection",
        "id": "b366adb4-d63d-422d-8a2c-186463b5ded0",
        "status": "test",
        "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.",
        "tags": [
            "attack.discovery",
            "attack.t1049"
        ],
        "level": "low",
        "rule": [
            "Channel=='Windows PowerShell' & EventID==400 & Data.str.contains(r'Get-NetTCPConnection', case=False)"
        ],
        "logsource": {
            "category": "ps_classic_start",
            "product": "windows",
            "service": "powershell-classic"
        }
    },
    {
        "title": "PowerShell Called from an Executable Version Mismatch",
        "id": "c70e019b-1479-4b65-b0cc-cd0c6093a599",
        "status": "test",
        "description": "Detects PowerShell called from an executable by the version mismatch method",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Windows PowerShell' & EventID==400 & (Data.str.contains(r'EngineVersion=2.', case=False) | Data.str.contains(r'EngineVersion=4.', case=False) | Data.str.contains(r'EngineVersion=5.', case=False)) & Data.str.contains(r'HostVersion=3.', case=False)"
        ],
        "logsource": {
            "category": "ps_classic_start",
            "product": "windows",
            "service": "powershell-classic"
        }
    },
    {
        "title": "Suspicious Non PowerShell WSMAN COM Provider",
        "id": "df9a0e0e-fedb-4d6c-8668-d765dfc92aa7",
        "status": "test",
        "description": "Detects suspicious use of the WSMAN provider without PowerShell.exe as the host application.",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.lateral-movement",
            "attack.t1021.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Windows PowerShell' & Data.str.contains(r'ProviderName=WSMan', case=False) & ~ (Data.str.contains(r'HostApplication=powershell', case=False) | Data.str.contains(r'HostApplication=C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell', case=False) | Data.str.contains(r'HostApplication=C:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell', case=False) | Data.str.contains(r'HostApplication=C:/Windows/System32/WindowsPowerShell/v1.0/powershell', case=False) | Data.str.contains(r'HostApplication=C:/Windows/SysWOW64/WindowsPowerShell/v1.0/powershell', case=False) | Data.str.contains(r'HostId=[a-zA-Z0-9-]{36}\\\\s+EngineVersion='))"
        ],
        "logsource": {
            "product": "windows",
            "service": "powershell-classic",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/powershell/powershell_classic/posh_pc_wsman_com_provider_no_powershell.yml"
        }
    },
    {
        "title": "Suspicious PowerShell Download",
        "id": "3236fcd0-b7e3-4433-b4f8-86ad61a9af2d",
        "status": "test",
        "description": "Detects suspicious PowerShell download command",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Windows PowerShell' & EventID==400 & Data.str.contains(r'Net.WebClient', case=False) & (Data.str.contains(r'.DownloadFile(', case=False) | Data.str.contains(r'.DownloadString(', case=False))"
        ],
        "logsource": {
            "category": "ps_classic_start",
            "product": "windows",
            "service": "powershell-classic"
        }
    },
    {
        "title": "Remote PowerShell Session (PS Classic)",
        "id": "60167e5c-84b2-4c95-a7ac-86281f27c445",
        "status": "test",
        "description": "Detects remote PowerShell sessions",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.lateral-movement",
            "attack.t1021.006"
        ],
        "level": "low",
        "rule": [
            "Channel=='Windows PowerShell' & EventID==400 & Data.str.contains(r'HostName=ServerRemoteHost', case=False) & Data.str.contains(r'wsmprovhost.exe', case=False)"
        ],
        "logsource": {
            "category": "ps_classic_start",
            "product": "windows",
            "service": "powershell-classic"
        }
    },
    {
        "title": "Renamed Powershell Under Powershell Channel",
        "id": "30a8cb77-8eb3-4cfb-8e79-ad457c5a4592",
        "status": "test",
        "description": "Detects a renamed Powershell execution, which is a common technique used to circumvent security controls and bypass detection logic that's dependent on process names and process paths.\n",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.t1036.003"
        ],
        "level": "low",
        "rule": [
            "Channel=='Windows PowerShell' & EventID==400 & Data.str.contains(r'HostName=ConsoleHost', case=False) & ~ (Data.str.contains(r'HostApplication=powershell', case=False) | Data.str.contains(r'HostApplication=C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell', case=False) | Data.str.contains(r'HostApplication=C:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell', case=False) | Data.str.contains(r'HostApplication=C:/Windows/System32/WindowsPowerShell/v1.0/powershell', case=False) | Data.str.contains(r'HostApplication=C:/Windows/SysWOW64/WindowsPowerShell/v1.0/powershell', case=False) | Data.str.contains(r'HostApplication=C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\WindowsPowerShell\\\\\\\\v1.0\\\\\\\\powershell.exe', case=False) | Data.str.contains(r'HostApplication=C:\\\\\\\\WINDOWS\\\\\\\\SysWOW64\\\\\\\\WindowsPowerShell\\\\\\\\v1.0\\\\\\\\powershell.exe', case=False) | Data.str.contains(r'HostId=[a-zA-Z0-9-]{36}\\\\s+EngineVersion='))"
        ],
        "logsource": {
            "category": "ps_classic_start",
            "product": "windows",
            "service": "powershell-classic"
        }
    },
    {
        "title": "Netcat The Powershell Version",
        "id": "c5b20776-639a-49bf-94c7-84f912b91c15",
        "status": "test",
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network",
        "tags": [
            "attack.command-and-control",
            "attack.t1095"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Windows PowerShell' & EventID==400 & (Data.str.contains(r'powercat ', case=False) | Data.str.contains(r'powercat.ps1', case=False))"
        ],
        "logsource": {
            "category": "ps_classic_start",
            "product": "windows",
            "service": "powershell-classic"
        }
    },
    {
        "title": "Zip A Folder With PowerShell For Staging In Temp - PowerShell",
        "id": "71ff406e-b633-4989-96ec-bc49d825a412",
        "status": "test",
        "description": "Detects PowerShell scripts that make use of the \"Compress-Archive\" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.\nAn adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.\n",
        "tags": [
            "attack.collection",
            "attack.t1074.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Windows PowerShell' & (Data.str.contains(r'*Compress-Archive -Path*-DestinationPath $env:TEMP*') | Data.str.contains(r'*Compress-Archive -Path*-DestinationPath*\\\\AppData\\\\Local\\\\Temp\\\\*') | Data.str.contains(r'*Compress-Archive -Path*-DestinationPath*:\\\\Windows\\\\Temp\\\\*'))"
        ],
        "logsource": {
            "product": "windows",
            "service": "powershell-classic",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/powershell/powershell_classic/posh_pc_susp_zip_compress.yml"
        }
    },
    {
        "title": "Suspicious PowerShell Get Current User",
        "id": "4096a49c-7de4-4da0-a230-c66ccd56ea5a",
        "status": "test",
        "description": "Detects the use of PowerShell to identify the current logged user.",
        "tags": [
            "attack.discovery",
            "attack.t1033"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'[System.Environment]::UserName', case=False) | ScriptBlockText.str.contains(r'$env:UserName', case=False) | ScriptBlockText.str.contains(r'[System.Security.Principal.WindowsIdentity]::GetCurrent()', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell XML Execute Command",
        "id": "6c6c6282-7671-4fe9-a0ce-a2dcebdc342b",
        "status": "test",
        "description": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'New-Object', case=False) & ScriptBlockText.str.contains(r'System.Xml.XmlDocument', case=False) & ScriptBlockText.str.contains(r'.Load', case=False) & (ScriptBlockText.str.contains(r'IEX ', case=False) | ScriptBlockText.str.contains(r'Invoke-Expression ', case=False) | ScriptBlockText.str.contains(r'Invoke-Command ', case=False) | ScriptBlockText.str.contains(r'ICM -', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "HackTool - WinPwn Execution - ScriptBlock",
        "id": "851fd622-b675-4d26-b803-14bc7baa517a",
        "status": "test",
        "description": "Detects scriptblock text keywords indicative of potential usge of the tool WinPwn. A tool for Windows and Active Directory reconnaissance and exploitation.\n",
        "tags": [
            "attack.credential-access",
            "attack.defense-evasion",
            "attack.discovery",
            "attack.execution",
            "attack.privilege-escalation",
            "attack.t1046",
            "attack.t1082",
            "attack.t1106",
            "attack.t1518",
            "attack.t1548.002",
            "attack.t1552.001",
            "attack.t1555",
            "attack.t1555.003"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Offline_Winpwn', case=False) | ScriptBlockText.str.contains(r'WinPwn ', case=False) | ScriptBlockText.str.contains(r'WinPwn.exe', case=False) | ScriptBlockText.str.contains(r'WinPwn.ps1', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Testing Usage of Uncommonly Used Port",
        "id": "adf876b3-f1f8-4aa9-a4e4-a64106feec06",
        "status": "test",
        "description": "Adversaries may communicate using a protocol and port paring that are typically not associated.\nFor example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1571"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Test-NetConnection', case=False) & ScriptBlockText.str.contains(r'-ComputerName ', case=False) & ScriptBlockText.str.contains(r'-port ', case=False) & ~ (ScriptBlockText.str.contains(r' 443 ', case=False) | ScriptBlockText.str.contains(r' 80 ', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Windows Screen Capture with CopyFromScreen",
        "id": "d4a11f63-2390-411c-9adf-d791fd152830",
        "status": "test",
        "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation.\nScreen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations\n",
        "tags": [
            "attack.collection",
            "attack.t1113"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'.CopyFromScreen', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Disable Powershell Command History",
        "id": "602f5669-6927-4688-84db-0d4b7afb2150",
        "status": "test",
        "description": "Detects scripts or commands that disabled the Powershell command history by removing psreadline module",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.003"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Remove-Module', case=False) & ScriptBlockText.str.contains(r'psreadline', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious PowerShell Mailbox Export to Share - PS",
        "id": "4a241dea-235b-4a7e-8d76-50d817b146c4",
        "status": "test",
        "description": "Detects usage of the powerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations",
        "tags": [
            "attack.exfiltration"
        ],
        "level": "critical",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'New-MailboxExportRequest', case=False) & ScriptBlockText.str.contains(r' -Mailbox ', case=False) & ScriptBlockText.str.contains(r' -FilePath \\\\\\\\', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Root Certificate Installed - PowerShell",
        "id": "42821614-9264-4761-acfc-5772c3286f76",
        "status": "test",
        "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1553.004"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Move-Item', case=False) & ScriptBlockText.str.contains(r'Cert:\\\\LocalMachine\\\\Root', case=False) | ScriptBlockText.str.contains(r'Import-Certificate', case=False) & ScriptBlockText.str.contains(r'Cert:\\\\LocalMachine\\\\Root', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Service DACL Modification Via Set-Service Cmdlet - PS",
        "id": "22d80745-6f2c-46da-826b-77adaededd74",
        "status": "test",
        "description": "Detects usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.011"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'-SecurityDescriptorSddl ', case=False) | ScriptBlockText.str.contains(r'-sd ', case=False)) & ScriptBlockText.str.contains(r'Set-Service ', case=False) & ScriptBlockText.str.contains(r'D;;', case=False) & (ScriptBlockText.str.contains(r';;;IU', case=False) | ScriptBlockText.str.contains(r';;;SU', case=False) | ScriptBlockText.str.contains(r';;;BA', case=False) | ScriptBlockText.str.contains(r';;;SY', case=False) | ScriptBlockText.str.contains(r';;;WD', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Credential Prompt",
        "id": "ca8b77a9-d499-4095-b793-5d5f330d450e",
        "status": "test",
        "description": "Detects PowerShell calling a credential prompt",
        "tags": [
            "attack.credential-access",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'PromptForCredential', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Active Directory Group Enumeration With Get-AdGroup",
        "id": "8c3a6607-b7dc-4f0d-a646-ef38c00b76ee",
        "status": "test",
        "description": "Detects usage of the \"Get-AdGroup\" cmdlet to enumerate Groups within Active Directory",
        "tags": [
            "attack.discovery",
            "attack.t1069.002"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-AdGroup ', case=False) & ScriptBlockText.str.contains(r'-Filter', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious PowerShell Download - Powershell Script",
        "id": "403c2cc0-7f6b-4925-9423-bfa573bed7eb",
        "status": "test",
        "description": "Detects suspicious PowerShell download command",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'System.Net.WebClient', case=False) & (ScriptBlockText.str.contains(r'.DownloadFile(', case=False) | ScriptBlockText.str.contains(r'.DownloadFileAsync(', case=False) | ScriptBlockText.str.contains(r'.DownloadString(', case=False) | ScriptBlockText.str.contains(r'.DownloadStringAsync(', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "DSInternals Suspicious PowerShell Cmdlets - ScriptBlock",
        "id": "846c7a87-8e14-4569-9d49-ecfd4276a01c",
        "status": "experimental",
        "description": "Detects execution and usage of the DSInternals PowerShell module. Which can be used to perform what might be considered as suspicious activity such as dumping DPAPI backup keys or manipulating NTDS.DIT files.\nThe DSInternals PowerShell Module exposes several internal features of Active Directory and Azure Active Directory. These include FIDO2 and NGC key auditing, offline ntds.dit file manipulation, password auditing, DC recovery from IFM backups and password hash calculation.\n",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Add-ADDBSidHistory', case=False) | ScriptBlockText.str.contains(r'Add-ADNgcKey', case=False) | ScriptBlockText.str.contains(r'Add-ADReplNgcKey', case=False) | ScriptBlockText.str.contains(r'ConvertFrom-ADManagedPasswordBlob', case=False) | ScriptBlockText.str.contains(r'ConvertFrom-GPPrefPassword', case=False) | ScriptBlockText.str.contains(r'ConvertFrom-ManagedPasswordBlob', case=False) | ScriptBlockText.str.contains(r'ConvertFrom-UnattendXmlPassword', case=False) | ScriptBlockText.str.contains(r'ConvertFrom-UnicodePassword', case=False) | ScriptBlockText.str.contains(r'ConvertTo-AADHash', case=False) | ScriptBlockText.str.contains(r'ConvertTo-GPPrefPassword', case=False) | ScriptBlockText.str.contains(r'ConvertTo-KerberosKey', case=False) | ScriptBlockText.str.contains(r'ConvertTo-LMHash', case=False) | ScriptBlockText.str.contains(r'ConvertTo-MsoPasswordHash', case=False) | ScriptBlockText.str.contains(r'ConvertTo-NTHash', case=False) | ScriptBlockText.str.contains(r'ConvertTo-OrgIdHash', case=False) | ScriptBlockText.str.contains(r'ConvertTo-UnicodePassword', case=False) | ScriptBlockText.str.contains(r'Disable-ADDBAccount', case=False) | ScriptBlockText.str.contains(r'Enable-ADDBAccount', case=False) | ScriptBlockText.str.contains(r'Get-ADDBAccount', case=False) | ScriptBlockText.str.contains(r'Get-ADDBBackupKey', case=False) | ScriptBlockText.str.contains(r'Get-ADDBDomainController', case=False) | ScriptBlockText.str.contains(r'Get-ADDBGroupManagedServiceAccount', case=False) | ScriptBlockText.str.contains(r'Get-ADDBKdsRootKey', case=False) | ScriptBlockText.str.contains(r'Get-ADDBSchemaAttribute', case=False) | ScriptBlockText.str.contains(r'Get-ADDBServiceAccount', case=False) | ScriptBlockText.str.contains(r'Get-ADDefaultPasswordPolicy', case=False) | ScriptBlockText.str.contains(r'Get-ADKeyCredential', case=False) | ScriptBlockText.str.contains(r'Get-ADPasswordPolicy', case=False) | ScriptBlockText.str.contains(r'Get-ADReplAccount', case=False) | ScriptBlockText.str.contains(r'Get-ADReplBackupKey', case=False) | ScriptBlockText.str.contains(r'Get-ADReplicationAccount', case=False) | ScriptBlockText.str.contains(r'Get-ADSIAccount', case=False) | ScriptBlockText.str.contains(r'Get-AzureADUserEx', case=False) | ScriptBlockText.str.contains(r'Get-BootKey', case=False) | ScriptBlockText.str.contains(r'Get-KeyCredential', case=False) | ScriptBlockText.str.contains(r'Get-LsaBackupKey', case=False) | ScriptBlockText.str.contains(r'Get-LsaPolicy', case=False) | ScriptBlockText.str.contains(r'Get-SamPasswordPolicy', case=False) | ScriptBlockText.str.contains(r'Get-SysKey', case=False) | ScriptBlockText.str.contains(r'Get-SystemKey', case=False) | ScriptBlockText.str.contains(r'New-ADDBRestoreFromMediaScript', case=False) | ScriptBlockText.str.contains(r'New-ADKeyCredential', case=False) | ScriptBlockText.str.contains(r'New-ADNgcKey', case=False) | ScriptBlockText.str.contains(r'New-NTHashSet', case=False) | ScriptBlockText.str.contains(r'Remove-ADDBObject', case=False) | ScriptBlockText.str.contains(r'Save-DPAPIBlob', case=False) | ScriptBlockText.str.contains(r'Set-ADAccountPasswordHash', case=False) | ScriptBlockText.str.contains(r'Set-ADDBAccountPassword', case=False) | ScriptBlockText.str.contains(r'Set-ADDBBootKey', case=False) | ScriptBlockText.str.contains(r'Set-ADDBDomainController', case=False) | ScriptBlockText.str.contains(r'Set-ADDBPrimaryGroup', case=False) | ScriptBlockText.str.contains(r'Set-ADDBSysKey', case=False) | ScriptBlockText.str.contains(r'Set-AzureADUserEx', case=False) | ScriptBlockText.str.contains(r'Set-LsaPolicy', case=False) | ScriptBlockText.str.contains(r'Set-SamAccountPasswordHash', case=False) | ScriptBlockText.str.contains(r'Set-WinUserPasswordHash', case=False) | ScriptBlockText.str.contains(r'Test-ADDBPasswordQuality', case=False) | ScriptBlockText.str.contains(r'Test-ADPasswordQuality', case=False) | ScriptBlockText.str.contains(r'Test-ADReplPasswordQuality', case=False) | ScriptBlockText.str.contains(r'Test-PasswordQuality', case=False) | ScriptBlockText.str.contains(r'Unlock-ADDBAccount', case=False) | ScriptBlockText.str.contains(r'Write-ADNgcKey', case=False) | ScriptBlockText.str.contains(r'Write-ADReplNgcKey', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Tamper Windows Defender - ScriptBlockLogging",
        "id": "14c71865-6cd3-44ae-adaa-1db923fae5f2",
        "status": "test",
        "description": "Detects PowerShell scripts attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Set-MpPreference', case=False) & (ScriptBlockText.str.contains(r'-dbaf $true', case=False) | ScriptBlockText.str.contains(r'-dbaf 1', case=False) | ScriptBlockText.str.contains(r'-dbm $true', case=False) | ScriptBlockText.str.contains(r'-dbm 1', case=False) | ScriptBlockText.str.contains(r'-dips $true', case=False) | ScriptBlockText.str.contains(r'-dips 1', case=False) | ScriptBlockText.str.contains(r'-DisableArchiveScanning $true', case=False) | ScriptBlockText.str.contains(r'-DisableArchiveScanning 1', case=False) | ScriptBlockText.str.contains(r'-DisableBehaviorMonitoring $true', case=False) | ScriptBlockText.str.contains(r'-DisableBehaviorMonitoring 1', case=False) | ScriptBlockText.str.contains(r'-DisableBlockAtFirstSeen $true', case=False) | ScriptBlockText.str.contains(r'-DisableBlockAtFirstSeen 1', case=False) | ScriptBlockText.str.contains(r'-DisableCatchupFullScan $true', case=False) | ScriptBlockText.str.contains(r'-DisableCatchupFullScan 1', case=False) | ScriptBlockText.str.contains(r'-DisableCatchupQuickScan $true', case=False) | ScriptBlockText.str.contains(r'-DisableCatchupQuickScan 1', case=False) | ScriptBlockText.str.contains(r'-DisableIntrusionPreventionSystem $true', case=False) | ScriptBlockText.str.contains(r'-DisableIntrusionPreventionSystem 1', case=False) | ScriptBlockText.str.contains(r'-DisableIOAVProtection $true', case=False) | ScriptBlockText.str.contains(r'-DisableIOAVProtection 1', case=False) | ScriptBlockText.str.contains(r'-DisableRealtimeMonitoring $true', case=False) | ScriptBlockText.str.contains(r'-DisableRealtimeMonitoring 1', case=False) | ScriptBlockText.str.contains(r'-DisableRemovableDriveScanning $true', case=False) | ScriptBlockText.str.contains(r'-DisableRemovableDriveScanning 1', case=False) | ScriptBlockText.str.contains(r'-DisableScanningMappedNetworkDrivesForFullScan $true', case=False) | ScriptBlockText.str.contains(r'-DisableScanningMappedNetworkDrivesForFullScan 1', case=False) | ScriptBlockText.str.contains(r'-DisableScanningNetworkFiles $true', case=False) | ScriptBlockText.str.contains(r'-DisableScanningNetworkFiles 1', case=False) | ScriptBlockText.str.contains(r'-DisableScriptScanning $true', case=False) | ScriptBlockText.str.contains(r'-DisableScriptScanning 1', case=False) | ScriptBlockText.str.contains(r'-MAPSReporting $false', case=False) | ScriptBlockText.str.contains(r'-MAPSReporting 0', case=False) | ScriptBlockText.str.contains(r'-drdsc $true', case=False) | ScriptBlockText.str.contains(r'-drdsc 1', case=False) | ScriptBlockText.str.contains(r'-drtm $true', case=False) | ScriptBlockText.str.contains(r'-drtm 1', case=False) | ScriptBlockText.str.contains(r'-dscrptsc $true', case=False) | ScriptBlockText.str.contains(r'-dscrptsc 1', case=False) | ScriptBlockText.str.contains(r'-dsmndf $true', case=False) | ScriptBlockText.str.contains(r'-dsmndf 1', case=False) | ScriptBlockText.str.contains(r'-dsnf $true', case=False) | ScriptBlockText.str.contains(r'-dsnf 1', case=False) | ScriptBlockText.str.contains(r'-dss $true', case=False) | ScriptBlockText.str.contains(r'-dss 1', case=False)) | ScriptBlockText.str.contains(r'Set-MpPreference', case=False) & (ScriptBlockText.str.contains(r'HighThreatDefaultAction Allow', case=False) | ScriptBlockText.str.contains(r'htdefac Allow', case=False) | ScriptBlockText.str.contains(r'LowThreatDefaultAction Allow', case=False) | ScriptBlockText.str.contains(r'ltdefac Allow', case=False) | ScriptBlockText.str.contains(r'ModerateThreatDefaultAction Allow', case=False) | ScriptBlockText.str.contains(r'mtdefac Allow', case=False) | ScriptBlockText.str.contains(r'SevereThreatDefaultAction Allow', case=False) | ScriptBlockText.str.contains(r'stdefac Allow', case=False)))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious PowerShell Invocations - Generic",
        "id": "ed965133-513f-41d9-a441-e38076a0798f",
        "status": "test",
        "description": "Detects suspicious PowerShell invocation command parameters",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r' -enc ', case=False) | ScriptBlockText.str.contains(r' -EncodedCommand ', case=False) | ScriptBlockText.str.contains(r' -ec ', case=False)) & (ScriptBlockText.str.contains(r' -w hidden ', case=False) | ScriptBlockText.str.contains(r' -window hidden ', case=False) | ScriptBlockText.str.contains(r' -windowstyle hidden ', case=False) | ScriptBlockText.str.contains(r' -w 1 ', case=False)) & (ScriptBlockText.str.contains(r' -noni ', case=False) | ScriptBlockText.str.contains(r' -noninteractive ', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential Data Exfiltration Via Audio File",
        "id": "e4f93c99-396f-47c8-bb0f-201b1fa69034",
        "status": "test",
        "description": "Detects potential exfiltration attempt via audio file using PowerShell",
        "tags": [
            "attack.exfiltration"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'[System.Math]::', case=False) & ScriptBlockText.str.contains(r'[IO.FileMode]::', case=False) & ScriptBlockText.str.contains(r'BinaryWriter', case=False) & ScriptBlockText.str.contains(r'0x52', case=False) & ScriptBlockText.str.contains(r'0x49', case=False) & ScriptBlockText.str.contains(r'0x46', case=False) & ScriptBlockText.str.contains(r'0x57', case=False) & ScriptBlockText.str.contains(r'0x41', case=False) & ScriptBlockText.str.contains(r'0x56', case=False) & ScriptBlockText.str.contains(r'0x45', case=False) & ScriptBlockText.str.contains(r'0xAC', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation Obfuscated IEX Invocation - PowerShell",
        "id": "1b9dc62e-6e9e-42a3-8990-94d7a10007f7",
        "status": "test",
        "description": "Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \\u2014",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'\\\\$PSHome\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$PSHome\\\\[') | ScriptBlockText.str.contains(r'\\\\$ShellId\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$ShellId\\\\[') | ScriptBlockText.str.contains(r'\\\\$env:Public\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$env:Public\\\\[') | ScriptBlockText.str.contains(r'\\\\$env:ComSpec\\\\[(\\\\s*\\\\d{1,3}\\\\s*,){2}') | ScriptBlockText.str.contains(r'\\\\*mdr\\\\*\\\\W\\\\s*\\\\)\\\\.Name') | ScriptBlockText.str.contains(r'\\\\$VerbosePreference\\\\.ToString\\\\('))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Set-Acl On Windows Folder - PsScript",
        "id": "3bf1d859-3a7e-44cb-8809-a99e066d3478",
        "status": "test",
        "description": "Detects PowerShell scripts to set the ACL to a file in the Windows folder",
        "tags": [
            "attack.defense-evasion",
            "attack.t1222"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Set-Acl ', case=False) & ScriptBlockText.str.contains(r'-AclObject ', case=False) & (ScriptBlockText.str.contains(r'-Path \"C:\\\\Windows', case=False) | ScriptBlockText.str.contains(r'-Path \"C:/Windows', case=False) | ScriptBlockText.str.contains(r'-Path \\'C:\\\\Windows', case=False) | ScriptBlockText.str.contains(r'-Path \\'C:/Windows', case=False) | ScriptBlockText.str.contains(r'-Path C:\\\\Windows', case=False) | ScriptBlockText.str.contains(r'-Path C:/Windows', case=False) | ScriptBlockText.str.contains(r'-Path $env:windir', case=False) | ScriptBlockText.str.contains(r'-Path \"$env:windir', case=False) | ScriptBlockText.str.contains(r'-Path \\'$env:windir', case=False)) & (ScriptBlockText.str.contains(r'FullControl', case=False) | ScriptBlockText.str.contains(r'Allow', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Automated Collection Command PowerShell",
        "id": "c1dda054-d638-4c16-afc8-53e007f3fbc5",
        "status": "test",
        "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data.",
        "tags": [
            "attack.collection",
            "attack.t1119"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'.doc', case=False) | ScriptBlockText.str.contains(r'.docx', case=False) | ScriptBlockText.str.contains(r'.xls', case=False) | ScriptBlockText.str.contains(r'.xlsx', case=False) | ScriptBlockText.str.contains(r'.ppt', case=False) | ScriptBlockText.str.contains(r'.pptx', case=False) | ScriptBlockText.str.contains(r'.rtf', case=False) | ScriptBlockText.str.contains(r'.pdf', case=False) | ScriptBlockText.str.contains(r'.txt', case=False)) & ScriptBlockText.str.contains(r'Get-ChildItem', case=False) & ScriptBlockText.str.contains(r' -Recurse ', case=False) & ScriptBlockText.str.contains(r' -Include ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Modify Group Policy Settings - ScriptBlockLogging",
        "id": "b7216a7d-687e-4c8d-82b1-3080b2ad961f",
        "status": "test",
        "description": "Detect malicious GPO modifications can be used to implement many other malicious behaviors.",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1484.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\System', case=False) & (ScriptBlockText.str.contains(r'GroupPolicyRefreshTimeDC', case=False) | ScriptBlockText.str.contains(r'GroupPolicyRefreshTimeOffsetDC', case=False) | ScriptBlockText.str.contains(r'GroupPolicyRefreshTime', case=False) | ScriptBlockText.str.contains(r'GroupPolicyRefreshTimeOffset', case=False) | ScriptBlockText.str.contains(r'EnableSmartScreen', case=False) | ScriptBlockText.str.contains(r'ShellSmartScreenLevel', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potentially Suspicious Call To Win32_NTEventlogFile Class - PSScript",
        "id": "e2812b49-bae0-4b21-b366-7c142eafcde2",
        "status": "test",
        "description": "Detects usage of the WMI class \"Win32_NTEventlogFile\" in a potentially suspicious way (delete, backup, change permissions, etc.) from a PowerShell script",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Win32_NTEventlogFile', case=False) & (ScriptBlockText.str.contains(r'.BackupEventlog(', case=False) | ScriptBlockText.str.contains(r'.ChangeSecurityPermissions(', case=False) | ScriptBlockText.str.contains(r'.ChangeSecurityPermissionsEx(', case=False) | ScriptBlockText.str.contains(r'.ClearEventLog(', case=False) | ScriptBlockText.str.contains(r'.Delete(', case=False) | ScriptBlockText.str.contains(r'.DeleteEx(', case=False) | ScriptBlockText.str.contains(r'.Rename(', case=False) | ScriptBlockText.str.contains(r'.TakeOwnerShip(', case=False) | ScriptBlockText.str.contains(r'.TakeOwnerShipEx(', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Winlogon Helper DLL",
        "id": "851c506b-6b7c-4ce2-8802-c703009d03c0",
        "status": "test",
        "description": "Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete.\nRegistry entries in HKLM\\Software[Wow6432Node]Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are\nused to manage additional helper programs and functionalities that support Winlogon. Malicious modifications to these Registry keys may cause Winlogon to\nload and execute malicious DLLs and/or executables.\n",
        "tags": [
            "attack.persistence",
            "attack.t1547.004"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'CurrentVersion\\\\Winlogon', case=False) & (ScriptBlockText.str.contains(r'Set-ItemProperty', case=False) | ScriptBlockText.str.contains(r'New-Item', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Access to Browser Login Data",
        "id": "fc028194-969d-4122-8abe-0470d5b8f12f",
        "status": "test",
        "description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.\nWeb browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future.\nWeb browsers typically store the credentials in an encrypted format within a credential store.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1555.003"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Copy-Item', case=False) & ScriptBlockText.str.contains(r'-Destination', case=False) & (ScriptBlockText.str.contains(r'\\\\Opera Software\\\\Opera Stable\\\\Login Data', case=False) | ScriptBlockText.str.contains(r'\\\\Mozilla\\\\Firefox\\\\Profiles', case=False) | ScriptBlockText.str.contains(r'\\\\Microsoft\\\\Edge\\\\User Data\\\\Default', case=False) | ScriptBlockText.str.contains(r'\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Login Data', case=False) | ScriptBlockText.str.contains(r'\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Login Data For Account', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Web Access Installation - PsScript",
        "id": "5f9c7f1a-7c21-4c39-b2f3-8d8006e0e51f",
        "status": "test",
        "description": "Detects the installation and configuration of PowerShell Web Access, which could be used for remote access and potential abuse",
        "tags": [
            "attack.persistence",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Install-WindowsFeature WindowsPowerShellWebAccess', case=False) | ScriptBlockText.str.contains(r'Install-PswaWebApplication', case=False) | ScriptBlockText.str.contains(r'Add-PswaAuthorizationRule', case=False) & ScriptBlockText.str.contains(r'-UserName ', case=False) & ScriptBlockText.str.contains(r'-ComputerName ', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Recon Information for Export with PowerShell",
        "id": "a9723fcc-881c-424c-8709-fd61442ab3c3",
        "status": "test",
        "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data",
        "tags": [
            "attack.collection",
            "attack.t1119"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Get-Service ', case=False) | ScriptBlockText.str.contains(r'Get-ChildItem ', case=False) | ScriptBlockText.str.contains(r'Get-Process ', case=False)) & ScriptBlockText.str.contains(r'> $env:TEMP\\\\', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious SSL Connection",
        "id": "195626f3-5f1b-4403-93b7-e6cfd4d6a078",
        "status": "test",
        "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol.",
        "tags": [
            "attack.command-and-control",
            "attack.t1573"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'System.Net.Security.SslStream', case=False) & ScriptBlockText.str.contains(r'Net.Security.RemoteCertificateValidationCallback', case=False) & ScriptBlockText.str.contains(r'.AuthenticateAsClient', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation CLIP+ Launcher - PowerShell",
        "id": "73e67340-0d25-11eb-adc1-0242ac120002",
        "status": "test",
        "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'cmd.{0,5}(?:/c|/r).+clip(?:\\\\.exe)?.{0,4}&&.+clipboard]::\\\\(\\\\s\\\\\\\\\"\\\\{\\\\d\\\\}.+-f.+\"')"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Abuse of Service Permissions to Hide Services Via Set-Service - PS",
        "id": "953945c5-22fe-4a92-9f8a-a9edc1e522da",
        "status": "test",
        "description": "Detects usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574.011"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Set-Service ', case=False) & ScriptBlockText.str.contains(r'DCLCWPDTSD', case=False) & (ScriptBlockText.str.contains(r'-SecurityDescriptorSddl ', case=False) | ScriptBlockText.str.contains(r'-sd ', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential Suspicious PowerShell Keywords",
        "id": "1f49f2ab-26bc-48b3-96cc-dcffbc93eadf",
        "status": "test",
        "description": "Detects potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'System.Reflection.Assembly.Load($', case=False) | ScriptBlockText.str.contains(r'[System.Reflection.Assembly]::Load($', case=False) | ScriptBlockText.str.contains(r'[Reflection.Assembly]::Load($', case=False) | ScriptBlockText.str.contains(r'System.Reflection.AssemblyName', case=False) | ScriptBlockText.str.contains(r'Reflection.Emit.AssemblyBuilderAccess', case=False) | ScriptBlockText.str.contains(r'Reflection.Emit.CustomAttributeBuilder', case=False) | ScriptBlockText.str.contains(r'Runtime.InteropServices.UnmanagedType', case=False) | ScriptBlockText.str.contains(r'Runtime.InteropServices.DllImportAttribute', case=False) | ScriptBlockText.str.contains(r'SuspendThread', case=False) | ScriptBlockText.str.contains(r'rundll32', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential Keylogger Activity",
        "id": "965e2db9-eddb-4cf6-a986-7a967df651e4",
        "status": "test",
        "description": "Detects PowerShell scripts that contains reference to keystroke capturing functions",
        "tags": [
            "attack.collection",
            "attack.credential-access",
            "attack.t1056.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'[Windows.Input.Keyboard]::IsKeyDown([System.Windows.Input.Key]::', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "WMImplant Hack Tool",
        "id": "8028c2c3-e25a-46e3-827f-bbb5abf181d7",
        "status": "test",
        "description": "Detects parameters used by WMImplant",
        "tags": [
            "attack.execution",
            "attack.t1047",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'WMImplant', case=False) | ScriptBlockText.str.contains(r' change_user ', case=False) | ScriptBlockText.str.contains(r' gen_cli ', case=False) | ScriptBlockText.str.contains(r' command_exec ', case=False) | ScriptBlockText.str.contains(r' disable_wdigest ', case=False) | ScriptBlockText.str.contains(r' disable_winrm ', case=False) | ScriptBlockText.str.contains(r' enable_wdigest ', case=False) | ScriptBlockText.str.contains(r' enable_winrm ', case=False) | ScriptBlockText.str.contains(r' registry_mod ', case=False) | ScriptBlockText.str.contains(r' remote_posh ', case=False) | ScriptBlockText.str.contains(r' sched_job ', case=False) | ScriptBlockText.str.contains(r' service_mod ', case=False) | ScriptBlockText.str.contains(r' process_kill ', case=False) | ScriptBlockText.str.contains(r' active_users ', case=False) | ScriptBlockText.str.contains(r' basic_info ', case=False) | ScriptBlockText.str.contains(r' power_off ', case=False) | ScriptBlockText.str.contains(r' vacant_system ', case=False) | ScriptBlockText.str.contains(r' logon_events ', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use MSHTA - PowerShell",
        "id": "e55a5195-4724-480e-a77e-3ebe64bd3759",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'set', case=False) & ScriptBlockText.str.contains(r'&&', case=False) & ScriptBlockText.str.contains(r'mshta', case=False) & ScriptBlockText.str.contains(r'vbscript:createobject', case=False) & ScriptBlockText.str.contains(r'.run', case=False) & ScriptBlockText.str.contains(r'(window.close)', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Unsigned AppX Installation Attempt Using Add-AppxPackage - PsScript",
        "id": "975b2262-9a49-439d-92a6-0709cccdf0b2",
        "status": "test",
        "description": "Detects usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Add-AppPackage ', case=False) | ScriptBlockText.str.contains(r'Add-AppxPackage ', case=False)) & ScriptBlockText.str.contains(r' -AllowUnsigned', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Get-ADUser Enumeration Using UserAccountControl Flags",
        "id": "96c982fe-3d08-4df4-bed2-eb14e02f21c8",
        "status": "test",
        "description": "Detects AS-REP roasting is an attack that is often-overlooked. It is not very common as you have to explicitly set accounts that do not require pre-authentication.",
        "tags": [
            "attack.discovery",
            "attack.t1033"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-ADUser', case=False) & ScriptBlockText.str.contains(r'-Filter', case=False) & ScriptBlockText.str.contains(r'useraccountcontrol', case=False) & ScriptBlockText.str.contains(r'-band', case=False) & ScriptBlockText.str.contains(r'4194304', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Add Windows Capability Via PowerShell Script",
        "id": "155c7fd5-47b4-49b2-bbeb-eb4fab335429",
        "status": "test",
        "description": "Detects usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities. Notable capabilities could be \"OpenSSH\" and others.",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Add-WindowsCapability ', case=False) & ScriptBlockText.str.contains(r'-Name OpenSSH.', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Stdin - Powershell",
        "id": "86b896ba-ffa1-4fea-83e3-ee28a4c915c7",
        "status": "test",
        "description": "Detects Obfuscated Powershell via Stdin in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'(?i)(set).*&&\\\\s?set.*(environment|invoke|\\\\$\\\\{?input).*&&.*\"')"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Create Volume Shadow Copy with Powershell",
        "id": "afd12fed-b0ec-45c9-a13d-aa86625dac81",
        "status": "test",
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information",
        "tags": [
            "attack.credential-access",
            "attack.t1003.003"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Win32_ShadowCopy', case=False) & ScriptBlockText.str.contains(r').Create(', case=False) & ScriptBlockText.str.contains(r'ClientAccessible', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "HackTool - Rubeus Execution - ScriptBlock",
        "id": "3245cd30-e015-40ff-a31d-5cadd5f377ec",
        "status": "test",
        "description": "Detects the execution of the hacktool Rubeus using specific command line flags",
        "tags": [
            "attack.credential-access",
            "attack.t1003",
            "attack.t1558.003",
            "attack.lateral-movement",
            "attack.t1550.003"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'asreproast ', case=False) | ScriptBlockText.str.contains(r'dump /service:krbtgt ', case=False) | ScriptBlockText.str.contains(r'dump /luid:0x', case=False) | ScriptBlockText.str.contains(r'kerberoast ', case=False) | ScriptBlockText.str.contains(r'createnetonly /program:', case=False) | ScriptBlockText.str.contains(r'ptt /ticket:', case=False) | ScriptBlockText.str.contains(r'/impersonateuser:', case=False) | ScriptBlockText.str.contains(r'renew /ticket:', case=False) | ScriptBlockText.str.contains(r'asktgt /user:', case=False) | ScriptBlockText.str.contains(r'harvest /interval:', case=False) | ScriptBlockText.str.contains(r's4u /user:', case=False) | ScriptBlockText.str.contains(r's4u /ticket:', case=False) | ScriptBlockText.str.contains(r'hash /password:', case=False) | ScriptBlockText.str.contains(r'golden /aes256:', case=False) | ScriptBlockText.str.contains(r'silver /user:', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential AMSI Bypass Script Using NULL Bits",
        "id": "fa2559c8-1197-471d-9cdd-05a0273d4522",
        "status": "test",
        "description": "Detects usage of special strings/null bits in order to potentially bypass AMSI functionalities",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'if(0){{{0}}}\\' -f $(0 -as [char]) +', case=False) | ScriptBlockText.str.contains(r'#<NULL>', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious IO.FileStream",
        "id": "70ad982f-67c8-40e0-a955-b920c2fa05cb",
        "status": "test",
        "description": "Open a handle on the drive volume via the \\\\.\\ DOS device path specifier and perform direct access read of the first few bytes of the volume.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.003"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'New-Object', case=False) & ScriptBlockText.str.contains(r'IO.FileStream', case=False) & ScriptBlockText.str.contains(r'\\\\\\\\.\\\\', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Malicious Nishang PowerShell Commandlets",
        "id": "f772cee9-b7c2-4cb2-8f07-49870adc02e0",
        "status": "test",
        "description": "Detects Commandlet names and arguments from the Nishang exploitation framework",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Add-ConstrainedDelegationBackdoor', case=False) | ScriptBlockText.str.contains(r'Copy-VSS', case=False) | ScriptBlockText.str.contains(r'Create-MultipleSessions', case=False) | ScriptBlockText.str.contains(r'DataToEncode', case=False) | ScriptBlockText.str.contains(r'DNS_TXT_Pwnage', case=False) | ScriptBlockText.str.contains(r'Do-Exfiltration-Dns', case=False) | ScriptBlockText.str.contains(r'Download_Execute', case=False) | ScriptBlockText.str.contains(r'Download-Execute-PS', case=False) | ScriptBlockText.str.contains(r'DownloadAndExtractFromRemoteRegistry', case=False) | ScriptBlockText.str.contains(r'DumpCerts', case=False) | ScriptBlockText.str.contains(r'DumpCreds', case=False) | ScriptBlockText.str.contains(r'DumpHashes', case=False) | ScriptBlockText.str.contains(r'Enable-DuplicateToken', case=False) | ScriptBlockText.str.contains(r'Enable-Duplication', case=False) | ScriptBlockText.str.contains(r'Execute-Command-MSSQL', case=False) | ScriptBlockText.str.contains(r'Execute-DNSTXT-Code', case=False) | ScriptBlockText.str.contains(r'Execute-OnTime', case=False) | ScriptBlockText.str.contains(r'ExetoText', case=False) | ScriptBlockText.str.contains(r'exfill', case=False) | ScriptBlockText.str.contains(r'ExfilOption', case=False) | ScriptBlockText.str.contains(r'FakeDC', case=False) | ScriptBlockText.str.contains(r'FireBuster', case=False) | ScriptBlockText.str.contains(r'FireListener', case=False) | ScriptBlockText.str.contains(r'Get-Information ', case=False) | ScriptBlockText.str.contains(r'Get-PassHints', case=False) | ScriptBlockText.str.contains(r'Get-Web-Credentials', case=False) | ScriptBlockText.str.contains(r'Get-WebCredentials', case=False) | ScriptBlockText.str.contains(r'Get-WLAN-Keys', case=False) | ScriptBlockText.str.contains(r'HTTP-Backdoor', case=False) | ScriptBlockText.str.contains(r'Invoke-AmsiBypass', case=False) | ScriptBlockText.str.contains(r'Invoke-BruteForce', case=False) | ScriptBlockText.str.contains(r'Invoke-CredentialsPhish', case=False) | ScriptBlockText.str.contains(r'Invoke-Decode', case=False) | ScriptBlockText.str.contains(r'Invoke-Encode', case=False) | ScriptBlockText.str.contains(r'Invoke-Interceptor', case=False) | ScriptBlockText.str.contains(r'Invoke-JSRatRegsvr', case=False) | ScriptBlockText.str.contains(r'Invoke-JSRatRundll', case=False) | ScriptBlockText.str.contains(r'Invoke-MimikatzWDigestDowngrade', case=False) | ScriptBlockText.str.contains(r'Invoke-NetworkRelay', case=False) | ScriptBlockText.str.contains(r'Invoke-PowerShellIcmp', case=False) | ScriptBlockText.str.contains(r'Invoke-PowerShellUdp', case=False) | ScriptBlockText.str.contains(r'Invoke-Prasadhak', case=False) | ScriptBlockText.str.contains(r'Invoke-PSGcat', case=False) | ScriptBlockText.str.contains(r'Invoke-PsGcatAgent', case=False) | ScriptBlockText.str.contains(r'Invoke-SessionGopher', case=False) | ScriptBlockText.str.contains(r'Invoke-SSIDExfil', case=False) | ScriptBlockText.str.contains(r'LoggedKeys', case=False) | ScriptBlockText.str.contains(r'Nishang', case=False) | ScriptBlockText.str.contains(r'NotAllNameSpaces', case=False) | ScriptBlockText.str.contains(r'Out-CHM', case=False) | ScriptBlockText.str.contains(r'OUT-DNSTXT', case=False) | ScriptBlockText.str.contains(r'Out-HTA', case=False) | ScriptBlockText.str.contains(r'Out-RundllCommand', case=False) | ScriptBlockText.str.contains(r'Out-SCF', case=False) | ScriptBlockText.str.contains(r'Out-SCT', case=False) | ScriptBlockText.str.contains(r'Out-Shortcut', case=False) | ScriptBlockText.str.contains(r'Out-WebQuery', case=False) | ScriptBlockText.str.contains(r'Out-Word', case=False) | ScriptBlockText.str.contains(r'Parse_Keys', case=False) | ScriptBlockText.str.contains(r'Password-List', case=False) | ScriptBlockText.str.contains(r'Powerpreter', case=False) | ScriptBlockText.str.contains(r'Remove-Persistence', case=False) | ScriptBlockText.str.contains(r'Remove-PoshRat', case=False) | ScriptBlockText.str.contains(r'Remove-Update', case=False) | ScriptBlockText.str.contains(r'Run-EXEonRemote', case=False) | ScriptBlockText.str.contains(r'Set-DCShadowPermissions', case=False) | ScriptBlockText.str.contains(r'Set-RemotePSRemoting', case=False) | ScriptBlockText.str.contains(r'Set-RemoteWMI', case=False) | ScriptBlockText.str.contains(r'Shellcode32', case=False) | ScriptBlockText.str.contains(r'Shellcode64', case=False) | ScriptBlockText.str.contains(r'StringtoBase64', case=False) | ScriptBlockText.str.contains(r'TexttoExe', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell Create Scheduled Task",
        "id": "363eccc0-279a-4ccf-a3ab-24c2e63b11fb",
        "status": "test",
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code",
        "tags": [
            "attack.persistence",
            "attack.t1053.005"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'New-ScheduledTaskAction', case=False) | ScriptBlockText.str.contains(r'New-ScheduledTaskTrigger', case=False) | ScriptBlockText.str.contains(r'New-ScheduledTaskPrincipal', case=False) | ScriptBlockText.str.contains(r'New-ScheduledTaskSettingsSet', case=False) | ScriptBlockText.str.contains(r'New-ScheduledTask', case=False) | ScriptBlockText.str.contains(r'Register-ScheduledTask', case=False) | ScriptBlockText.str.contains(r'Invoke-CimMethod', case=False) & ScriptBlockText.str.contains(r'-ClassName', case=False) & ScriptBlockText.str.contains(r'PS_ScheduledTask', case=False) & ScriptBlockText.str.contains(r'-NameSpace', case=False) & ScriptBlockText.str.contains(r'Root\\\\Microsoft\\\\Windows\\\\TaskScheduler', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "SyncAppvPublishingServer Execution to Bypass Powershell Restriction",
        "id": "dddfebae-c46f-439c-af7a-fdb6bde90218",
        "status": "test",
        "description": "Detects SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'SyncAppvPublishingServer.exe', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Enumerate Credentials from Windows Credential Manager With PowerShell",
        "id": "603c6630-5225-49c1-8047-26c964553e0e",
        "status": "test",
        "description": "Adversaries may search for common password storage locations to obtain user credentials.\nPasswords are stored in several places on a system, depending on the operating system or application holding the credentials.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1555"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'vaultcmd', case=False) & ScriptBlockText.str.contains(r'/listcreds:', case=False) & (ScriptBlockText.str.contains(r'Windows Credentials', case=False) | ScriptBlockText.str.contains(r'Web Credentials', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell DNSExfiltration",
        "id": "d59d7842-9a21-4bc6-ba98-64bfe0091355",
        "status": "test",
        "description": "DNSExfiltrator allows for transferring (exfiltrate) a file over a DNS request covert channel",
        "tags": [
            "attack.exfiltration",
            "attack.t1048"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Invoke-DNSExfiltrator', case=False) | ScriptBlockText.str.contains(r' -i ', case=False) & ScriptBlockText.str.contains(r' -d ', case=False) & ScriptBlockText.str.contains(r' -p ', case=False) & ScriptBlockText.str.contains(r' -doh ', case=False) & ScriptBlockText.str.contains(r' -t ', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "User Discovery And Export Via Get-ADUser Cmdlet - PowerShell",
        "id": "c2993223-6da8-4b1a-88ee-668b8bf315e9",
        "status": "test",
        "description": "Detects usage of the Get-ADUser cmdlet to collect user information and output it to a file",
        "tags": [
            "attack.discovery",
            "attack.t1033"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-ADUser ', case=False) & ScriptBlockText.str.contains(r' -Filter \\*', case=False) & (ScriptBlockText.str.contains(r' > ', case=False) | ScriptBlockText.str.contains(r' | Select ', case=False) | ScriptBlockText.str.contains(r'Out-File', case=False) | ScriptBlockText.str.contains(r'Set-Content', case=False) | ScriptBlockText.str.contains(r'Add-Content', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use Clip - Powershell",
        "id": "db92dd33-a3ad-49cf-8c2c-608c3e30ace0",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'(?i)echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?)')"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell Directory Enumeration",
        "id": "162e69a7-7981-4344-84a9-0f1c9a217a52",
        "status": "test",
        "description": "Detects technique used by MAZE ransomware to enumerate directories using Powershell",
        "tags": [
            "attack.discovery",
            "attack.t1083"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'foreach', case=False) & ScriptBlockText.str.contains(r'Get-ChildItem', case=False) & ScriptBlockText.str.contains(r'-Path ', case=False) & ScriptBlockText.str.contains(r'-ErrorAction ', case=False) & ScriptBlockText.str.contains(r'SilentlyContinue', case=False) & ScriptBlockText.str.contains(r'Out-File ', case=False) & ScriptBlockText.str.contains(r'-append', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Change User Agents with WebRequest",
        "id": "d4488827-73af-4f8d-9244-7b7662ef046e",
        "status": "test",
        "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic.\nCommands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1071.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Invoke-WebRequest', case=False) & ScriptBlockText.str.contains(r'-UserAgent ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Enable Windows Remote Management",
        "id": "991a9744-f2f0-44f2-bd33-9092eba17dc3",
        "status": "test",
        "description": "Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.006"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Enable-PSRemoting ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious GetTypeFromCLSID ShellExecute",
        "id": "8bc063d5-3a3a-4f01-a140-bc15e55e8437",
        "status": "test",
        "description": "Detects suspicious Powershell code that execute COM Objects",
        "tags": [
            "attack.privilege-escalation",
            "attack.persistence",
            "attack.t1546.015"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'::GetTypeFromCLSID(', case=False) & ScriptBlockText.str.contains(r'.ShellExecute(', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Disable-WindowsOptionalFeature Command PowerShell",
        "id": "99c4658d-2c5e-4d87-828d-7c066ca537c3",
        "status": "test",
        "description": "Detect built in PowerShell cmdlet Disable-WindowsOptionalFeature, Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Disable-WindowsOptionalFeature', case=False) & ScriptBlockText.str.contains(r'-Online', case=False) & ScriptBlockText.str.contains(r'-FeatureName', case=False) & (ScriptBlockText.str.contains(r'Windows-Defender-Gui', case=False) | ScriptBlockText.str.contains(r'Windows-Defender-Features', case=False) | ScriptBlockText.str.contains(r'Windows-Defender', case=False) | ScriptBlockText.str.contains(r'Windows-Defender-ApplicationGuard', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Zip A Folder With PowerShell For Staging In Temp - PowerShell Script",
        "id": "b7a3c9a3-09ea-4934-8864-6a32cacd98d9",
        "status": "test",
        "description": "Detects PowerShell scripts that make use of the \"Compress-Archive\" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.\nAn adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.\n",
        "tags": [
            "attack.collection",
            "attack.t1074.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'*Compress-Archive -Path*-DestinationPath $env:TEMP*') | ScriptBlockText.str.contains(r'*Compress-Archive -Path*-DestinationPath*\\\\AppData\\\\Local\\\\Temp\\\\*') | ScriptBlockText.str.contains(r'*Compress-Archive -Path*-DestinationPath*:\\\\Windows\\\\Temp\\\\*'))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Replace Desktop Wallpaper by Powershell",
        "id": "c5ac6a1e-9407-45f5-a0ce-ca9a0806a287",
        "status": "test",
        "description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users.\nThis may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper\n",
        "tags": [
            "attack.impact",
            "attack.t1491.001"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Get-ItemProperty', case=False) & ScriptBlockText.str.contains(r'Registry::', case=False) & ScriptBlockText.str.contains(r'HKEY_CURRENT_USER\\\\Control Panel\\\\Desktop\\\\', case=False) & ScriptBlockText.str.contains(r'WallPaper', case=False) | ScriptBlockText.str.contains(r'*SystemParametersInfo(20,0,*,3)*'))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell WMI Win32_Product Install MSI",
        "id": "91109523-17f0-4248-a800-f81d9e7c081d",
        "status": "test",
        "description": "Detects the execution of an MSI file using PowerShell and the WMI Win32_Product class",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.007"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Invoke-CimMethod ', case=False) & ScriptBlockText.str.contains(r'-ClassName ', case=False) & ScriptBlockText.str.contains(r'Win32_Product ', case=False) & ScriptBlockText.str.contains(r'-MethodName ', case=False) & ScriptBlockText.str.contains(r'.msi', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell Keylogging",
        "id": "34f90d3c-c297-49e9-b26d-911b05a4866c",
        "status": "test",
        "description": "Adversaries may log user keystrokes to intercept credentials as the user types them.",
        "tags": [
            "attack.collection",
            "attack.t1056.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Get-Keystrokes', case=False) | ScriptBlockText.str.contains(r'Get-ProcAddress user32.dll GetAsyncKeyState', case=False) & ScriptBlockText.str.contains(r'Get-ProcAddress user32.dll GetForegroundWindow', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell Local Email Collection",
        "id": "2837e152-93c8-43d2-85ba-c3cd3c2ae614",
        "status": "test",
        "description": "Adversaries may target user email on local systems to collect sensitive information.\nFiles containing email data can be acquired from a users local system, such as Outlook storage or cache files.\n",
        "tags": [
            "attack.collection",
            "attack.t1114.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Get-Inbox.ps1', case=False) | ScriptBlockText.str.contains(r'Microsoft.Office.Interop.Outlook', case=False) | ScriptBlockText.str.contains(r'Microsoft.Office.Interop.Outlook.olDefaultFolders', case=False) | ScriptBlockText.str.contains(r'-comobject outlook.application', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious X509Enrollment - Ps Script",
        "id": "504d63cb-0dba-4d02-8531-e72981aace2c",
        "status": "test",
        "description": "Detect use of X509Enrollment",
        "tags": [
            "attack.defense-evasion",
            "attack.t1553.004"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'X509Enrollment.CBinaryConverter', case=False) | ScriptBlockText.str.contains(r'884e2002-217d-11da-b2a4-000e7bbb2b09', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Import PowerShell Modules From Suspicious Directories",
        "id": "21f9162c-5f5d-4b01-89a8-b705bd7d10ab",
        "status": "test",
        "description": "Detects powershell scripts that import modules from suspicious directories",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Import-Module \"$Env:Temp\\\\', case=False) | ScriptBlockText.str.contains(r'Import-Module \\'$Env:Temp\\\\', case=False) | ScriptBlockText.str.contains(r'Import-Module $Env:Temp\\\\', case=False) | ScriptBlockText.str.contains(r'Import-Module \"$Env:Appdata\\\\', case=False) | ScriptBlockText.str.contains(r'Import-Module \\'$Env:Appdata\\\\', case=False) | ScriptBlockText.str.contains(r'Import-Module $Env:Appdata\\\\', case=False) | ScriptBlockText.str.contains(r'Import-Module C:\\\\Users\\\\Public\\\\', case=False) | ScriptBlockText.str.contains(r'ipmo \"$Env:Temp\\\\', case=False) | ScriptBlockText.str.contains(r'ipmo \\'$Env:Temp\\\\', case=False) | ScriptBlockText.str.contains(r'ipmo $Env:Temp\\\\', case=False) | ScriptBlockText.str.contains(r'ipmo \"$Env:Appdata\\\\', case=False) | ScriptBlockText.str.contains(r'ipmo \\'$Env:Appdata\\\\', case=False) | ScriptBlockText.str.contains(r'ipmo $Env:Appdata\\\\', case=False) | ScriptBlockText.str.contains(r'ipmo C:\\\\Users\\\\Public\\\\', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation STDIN+ Launcher - Powershell",
        "id": "779c8c12-0eb1-11eb-adc1-0242ac120002",
        "status": "test",
        "description": "Detects Obfuscated use of stdin to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'cmd.{0,5}(?:/c|/r).+powershell.+(?:\\\\$?\\\\{?input\\\\}?|noexit).+\"')"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - PowerShell",
        "id": "e54f5149-6ba3-49cf-b153-070d24679126",
        "status": "test",
        "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'(?i)&&set.*(\\\\{\\\\d\\\\}){2,}\\\\\\\\\"\\\\s+?-f.*&&.*cmd.*/c')"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Extracting Information with PowerShell",
        "id": "bd5971a7-626d-46ab-8176-ed643f694f68",
        "status": "test",
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials.\nThese can be files created by users to store their own credentials, shared credential stores for a group of individuals,\nconfiguration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1552.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'ls', case=False) & ScriptBlockText.str.contains(r' -R', case=False) & ScriptBlockText.str.contains(r'select-string ', case=False) & ScriptBlockText.str.contains(r'-Pattern ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Detected Windows Software Discovery - PowerShell",
        "id": "2650dd1a-eb2a-412d-ac36-83f06c4f2282",
        "status": "test",
        "description": "Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable.",
        "tags": [
            "attack.discovery",
            "attack.t1518"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'get-itemProperty', case=False) & ScriptBlockText.str.contains(r'\\\\software\\\\', case=False) & ScriptBlockText.str.contains(r'select-object', case=False) & ScriptBlockText.str.contains(r'format-table', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Start-Process PassThru",
        "id": "0718cd72-f316-4aa2-988f-838ea8533277",
        "status": "test",
        "description": "Powershell use PassThru option to start in background",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.003"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Start-Process', case=False) & ScriptBlockText.str.contains(r'-PassThru ', case=False) & ScriptBlockText.str.contains(r'-FilePath ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Script With File Upload Capabilities",
        "id": "d2e3f2f6-7e09-4bf2-bc5d-90186809e7fb",
        "status": "test",
        "description": "Detects PowerShell scripts leveraging the \"Invoke-WebRequest\" cmdlet to send data via either \"PUT\" or \"POST\" method.",
        "tags": [
            "attack.exfiltration",
            "attack.t1020"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Invoke-WebRequest', case=False) | ScriptBlockText.str.contains(r'iwr ', case=False)) & (ScriptBlockText.str.contains(r'-Method Put', case=False) | ScriptBlockText.str.contains(r'-Method Post', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential Invoke-Mimikatz PowerShell Script",
        "id": "189e3b02-82b2-4b90-9662-411eb64486d4",
        "status": "test",
        "description": "Detects Invoke-Mimikatz PowerShell script and alike. Mimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords.",
        "tags": [
            "attack.credential-access",
            "attack.t1003"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'DumpCreds', case=False) & ScriptBlockText.str.contains(r'DumpCerts', case=False) | ScriptBlockText.str.contains(r'sekurlsa::logonpasswords', case=False) | ScriptBlockText.str.contains(r'crypto::certificates', case=False) & ScriptBlockText.str.contains(r'CERT_SYSTEM_STORE_LOCAL_MACHINE', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Process Discovery With Get-Process",
        "id": "af4c87ce-bdda-4215-b998-15220772e993",
        "status": "test",
        "description": "Get the processes that are running on the local computer.",
        "tags": [
            "attack.discovery",
            "attack.t1057"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-Process', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Malicious PowerShell Commandlets - ScriptBlock",
        "id": "89819aa4-bbd6-46bc-88ec-c7f7fe30efa6",
        "status": "test",
        "description": "Detects Commandlet names from well-known PowerShell exploitation frameworks",
        "tags": [
            "attack.execution",
            "attack.discovery",
            "attack.t1482",
            "attack.t1087",
            "attack.t1087.001",
            "attack.t1087.002",
            "attack.t1069.001",
            "attack.t1069.002",
            "attack.t1069",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Add-Exfiltration', case=False) | ScriptBlockText.str.contains(r'Add-Persistence', case=False) | ScriptBlockText.str.contains(r'Add-RegBackdoor', case=False) | ScriptBlockText.str.contains(r'Add-RemoteRegBackdoor', case=False) | ScriptBlockText.str.contains(r'Add-ScrnSaveBackdoor', case=False) | ScriptBlockText.str.contains(r'ConvertTo-Rc4ByteStream', case=False) | ScriptBlockText.str.contains(r'Decrypt-Hash', case=False) | ScriptBlockText.str.contains(r'Disable-ADIDNSNode', case=False) | ScriptBlockText.str.contains(r'Do-Exfiltration', case=False) | ScriptBlockText.str.contains(r'Enable-ADIDNSNode', case=False) | ScriptBlockText.str.contains(r'Enabled-DuplicateToken', case=False) | ScriptBlockText.str.contains(r'Exploit-Jboss', case=False) | ScriptBlockText.str.contains(r'Export-ADRCSV', case=False) | ScriptBlockText.str.contains(r'Export-ADRExcel', case=False) | ScriptBlockText.str.contains(r'Export-ADRHTML', case=False) | ScriptBlockText.str.contains(r'Export-ADRJSON', case=False) | ScriptBlockText.str.contains(r'Export-ADRXML', case=False) | ScriptBlockText.str.contains(r'Find-Fruit', case=False) | ScriptBlockText.str.contains(r'Find-GPOLocation', case=False) | ScriptBlockText.str.contains(r'Find-TrustedDocuments', case=False) | ScriptBlockText.str.contains(r'Get-ADIDNSNodeAttribute', case=False) | ScriptBlockText.str.contains(r'Get-ADIDNSNodeOwner', case=False) | ScriptBlockText.str.contains(r'Get-ADIDNSNodeTombstoned', case=False) | ScriptBlockText.str.contains(r'Get-ADIDNSPermission', case=False) | ScriptBlockText.str.contains(r'Get-ADIDNSZone', case=False) | ScriptBlockText.str.contains(r'Get-ChromeDump', case=False) | ScriptBlockText.str.contains(r'Get-ClipboardContents', case=False) | ScriptBlockText.str.contains(r'Get-FoxDump', case=False) | ScriptBlockText.str.contains(r'Get-GPPPassword', case=False) | ScriptBlockText.str.contains(r'Get-IndexedItem', case=False) | ScriptBlockText.str.contains(r'Get-KerberosAESKey', case=False) | ScriptBlockText.str.contains(r'Get-Keystrokes', case=False) | ScriptBlockText.str.contains(r'Get-LSASecret', case=False) | ScriptBlockText.str.contains(r'Get-PassHashes', case=False) | ScriptBlockText.str.contains(r'Get-RegAlwaysInstallElevated', case=False) | ScriptBlockText.str.contains(r'Get-RegAutoLogon', case=False) | ScriptBlockText.str.contains(r'Get-RemoteBootKey', case=False) | ScriptBlockText.str.contains(r'Get-RemoteCachedCredential', case=False) | ScriptBlockText.str.contains(r'Get-RemoteLocalAccountHash', case=False) | ScriptBlockText.str.contains(r'Get-RemoteLSAKey', case=False) | ScriptBlockText.str.contains(r'Get-RemoteMachineAccountHash', case=False) | ScriptBlockText.str.contains(r'Get-RemoteNLKMKey', case=False) | ScriptBlockText.str.contains(r'Get-RickAstley', case=False) | ScriptBlockText.str.contains(r'Get-SecurityPackages', case=False) | ScriptBlockText.str.contains(r'Get-ServiceFilePermission', case=False) | ScriptBlockText.str.contains(r'Get-ServicePermission', case=False) | ScriptBlockText.str.contains(r'Get-ServiceUnquoted', case=False) | ScriptBlockText.str.contains(r'Get-SiteListPassword', case=False) | ScriptBlockText.str.contains(r'Get-System', case=False) | ScriptBlockText.str.contains(r'Get-TimedScreenshot', case=False) | ScriptBlockText.str.contains(r'Get-UnattendedInstallFile', case=False) | ScriptBlockText.str.contains(r'Get-Unconstrained', case=False) | ScriptBlockText.str.contains(r'Get-USBKeystrokes', case=False) | ScriptBlockText.str.contains(r'Get-VaultCredential', case=False) | ScriptBlockText.str.contains(r'Get-VulnAutoRun', case=False) | ScriptBlockText.str.contains(r'Get-VulnSchTask', case=False) | ScriptBlockText.str.contains(r'Grant-ADIDNSPermission', case=False) | ScriptBlockText.str.contains(r'Gupt-Backdoor', case=False) | ScriptBlockText.str.contains(r'Invoke-ACLScanner', case=False) | ScriptBlockText.str.contains(r'Invoke-ADRecon', case=False) | ScriptBlockText.str.contains(r'Invoke-ADSBackdoor', case=False) | ScriptBlockText.str.contains(r'Invoke-AgentSmith', case=False) | ScriptBlockText.str.contains(r'Invoke-AllChecks', case=False) | ScriptBlockText.str.contains(r'Invoke-ARPScan', case=False) | ScriptBlockText.str.contains(r'Invoke-AzureHound', case=False) | ScriptBlockText.str.contains(r'Invoke-BackdoorLNK', case=False) | ScriptBlockText.str.contains(r'Invoke-BadPotato', case=False) | ScriptBlockText.str.contains(r'Invoke-BetterSafetyKatz', case=False) | ScriptBlockText.str.contains(r'Invoke-BypassUAC', case=False) | ScriptBlockText.str.contains(r'Invoke-Carbuncle', case=False) | ScriptBlockText.str.contains(r'Invoke-Certify', case=False) | ScriptBlockText.str.contains(r'Invoke-ConPtyShell', case=False) | ScriptBlockText.str.contains(r'Invoke-CredentialInjection', case=False) | ScriptBlockText.str.contains(r'Invoke-DAFT', case=False) | ScriptBlockText.str.contains(r'Invoke-DCSync', case=False) | ScriptBlockText.str.contains(r'Invoke-DinvokeKatz', case=False) | ScriptBlockText.str.contains(r'Invoke-DllInjection', case=False) | ScriptBlockText.str.contains(r'Invoke-DNSUpdate', case=False) | ScriptBlockText.str.contains(r'Invoke-DomainPasswordSpray', case=False) | ScriptBlockText.str.contains(r'Invoke-DowngradeAccount', case=False) | ScriptBlockText.str.contains(r'Invoke-EgressCheck', case=False) | ScriptBlockText.str.contains(r'Invoke-Eyewitness', case=False) | ScriptBlockText.str.contains(r'Invoke-FakeLogonScreen', case=False) | ScriptBlockText.str.contains(r'Invoke-Farmer', case=False) | ScriptBlockText.str.contains(r'Invoke-Get-RBCD-Threaded', case=False) | ScriptBlockText.str.contains(r'Invoke-Gopher', case=False) | ScriptBlockText.str.contains(r'Invoke-Grouper', case=False) | ScriptBlockText.str.contains(r'Invoke-HandleKatz', case=False) | ScriptBlockText.str.contains(r'Invoke-ImpersonatedProcess', case=False) | ScriptBlockText.str.contains(r'Invoke-ImpersonateSystem', case=False) | ScriptBlockText.str.contains(r'Invoke-InteractiveSystemPowerShell', case=False) | ScriptBlockText.str.contains(r'Invoke-Internalmonologue', case=False) | ScriptBlockText.str.contains(r'Invoke-Inveigh', case=False) | ScriptBlockText.str.contains(r'Invoke-InveighRelay', case=False) | ScriptBlockText.str.contains(r'Invoke-KrbRelay', case=False) | ScriptBlockText.str.contains(r'Invoke-LdapSignCheck', case=False) | ScriptBlockText.str.contains(r'Invoke-Lockless', case=False) | ScriptBlockText.str.contains(r'Invoke-MalSCCM', case=False) | ScriptBlockText.str.contains(r'Invoke-Mimikatz', case=False) | ScriptBlockText.str.contains(r'Invoke-Mimikittenz', case=False) | ScriptBlockText.str.contains(r'Invoke-MITM6', case=False) | ScriptBlockText.str.contains(r'Invoke-NanoDump', case=False) | ScriptBlockText.str.contains(r'Invoke-NetRipper', case=False) | ScriptBlockText.str.contains(r'Invoke-Nightmare', case=False) | ScriptBlockText.str.contains(r'Invoke-NinjaCopy', case=False) | ScriptBlockText.str.contains(r'Invoke-OfficeScrape', case=False) | ScriptBlockText.str.contains(r'Invoke-OxidResolver', case=False) | ScriptBlockText.str.contains(r'Invoke-P0wnedshell', case=False) | ScriptBlockText.str.contains(r'Invoke-Paranoia', case=False) | ScriptBlockText.str.contains(r'Invoke-PortScan', case=False) | ScriptBlockText.str.contains(r'Invoke-PoshRatHttp', case=False) | ScriptBlockText.str.contains(r'Invoke-PostExfil', case=False) | ScriptBlockText.str.contains(r'Invoke-PowerDump', case=False) | ScriptBlockText.str.contains(r'Invoke-PowerShellTCP', case=False) | ScriptBlockText.str.contains(r'Invoke-PowerShellWMI', case=False) | ScriptBlockText.str.contains(r'Invoke-PPLDump', case=False) | ScriptBlockText.str.contains(r'Invoke-PsExec', case=False) | ScriptBlockText.str.contains(r'Invoke-PSInject', case=False) | ScriptBlockText.str.contains(r'Invoke-PsUaCme', case=False) | ScriptBlockText.str.contains(r'Invoke-ReflectivePEInjection', case=False) | ScriptBlockText.str.contains(r'Invoke-ReverseDNSLookup', case=False) | ScriptBlockText.str.contains(r'Invoke-Rubeus', case=False) | ScriptBlockText.str.contains(r'Invoke-RunAs', case=False) | ScriptBlockText.str.contains(r'Invoke-SafetyKatz', case=False) | ScriptBlockText.str.contains(r'Invoke-SauronEye', case=False) | ScriptBlockText.str.contains(r'Invoke-SCShell', case=False) | ScriptBlockText.str.contains(r'Invoke-Seatbelt', case=False) | ScriptBlockText.str.contains(r'Invoke-ServiceAbuse', case=False) | ScriptBlockText.str.contains(r'Invoke-ShadowSpray', case=False) | ScriptBlockText.str.contains(r'Invoke-Sharp', case=False) | ScriptBlockText.str.contains(r'Invoke-Shellcode', case=False) | ScriptBlockText.str.contains(r'Invoke-SMBScanner', case=False) | ScriptBlockText.str.contains(r'Invoke-Snaffler', case=False) | ScriptBlockText.str.contains(r'Invoke-Spoolsample', case=False) | ScriptBlockText.str.contains(r'Invoke-SpraySinglePassword', case=False) | ScriptBlockText.str.contains(r'Invoke-SSHCommand', case=False) | ScriptBlockText.str.contains(r'Invoke-StandIn', case=False) | ScriptBlockText.str.contains(r'Invoke-StickyNotesExtract', case=False) | ScriptBlockText.str.contains(r'Invoke-SystemCommand', case=False) | ScriptBlockText.str.contains(r'Invoke-Tasksbackdoor', case=False) | ScriptBlockText.str.contains(r'Invoke-Tater', case=False) | ScriptBlockText.str.contains(r'Invoke-Thunderfox', case=False) | ScriptBlockText.str.contains(r'Invoke-ThunderStruck', case=False) | ScriptBlockText.str.contains(r'Invoke-TokenManipulation', case=False) | ScriptBlockText.str.contains(r'Invoke-Tokenvator', case=False) | ScriptBlockText.str.contains(r'Invoke-TotalExec', case=False) | ScriptBlockText.str.contains(r'Invoke-UrbanBishop', case=False) | ScriptBlockText.str.contains(r'Invoke-UserHunter', case=False) | ScriptBlockText.str.contains(r'Invoke-VoiceTroll', case=False) | ScriptBlockText.str.contains(r'Invoke-Whisker', case=False) | ScriptBlockText.str.contains(r'Invoke-WinEnum', case=False) | ScriptBlockText.str.contains(r'Invoke-winPEAS', case=False) | ScriptBlockText.str.contains(r'Invoke-WireTap', case=False) | ScriptBlockText.str.contains(r'Invoke-WmiCommand', case=False) | ScriptBlockText.str.contains(r'Invoke-WMIExec', case=False) | ScriptBlockText.str.contains(r'Invoke-WScriptBypassUAC', case=False) | ScriptBlockText.str.contains(r'Invoke-Zerologon', case=False) | ScriptBlockText.str.contains(r'MailRaider', case=False) | ScriptBlockText.str.contains(r'New-ADIDNSNode', case=False) | ScriptBlockText.str.contains(r'New-HoneyHash', case=False) | ScriptBlockText.str.contains(r'New-InMemoryModule', case=False) | ScriptBlockText.str.contains(r'New-SOASerialNumberArray', case=False) | ScriptBlockText.str.contains(r'Out-Minidump', case=False) | ScriptBlockText.str.contains(r'PowerBreach', case=False) | ScriptBlockText.str.contains(r'powercat ', case=False) | ScriptBlockText.str.contains(r'PowerUp', case=False) | ScriptBlockText.str.contains(r'PowerView', case=False) | ScriptBlockText.str.contains(r'Remove-ADIDNSNode', case=False) | ScriptBlockText.str.contains(r'Remove-Update', case=False) | ScriptBlockText.str.contains(r'Rename-ADIDNSNode', case=False) | ScriptBlockText.str.contains(r'Revoke-ADIDNSPermission', case=False) | ScriptBlockText.str.contains(r'Set-ADIDNSNode', case=False) | ScriptBlockText.str.contains(r'Show-TargetScreen', case=False) | ScriptBlockText.str.contains(r'Start-CaptureServer', case=False) | ScriptBlockText.str.contains(r'Start-Dnscat2', case=False) | ScriptBlockText.str.contains(r'Start-WebcamRecorder', case=False) | ScriptBlockText.str.contains(r'VolumeShadowCopyTools', case=False)) & ~ (ScriptBlockText.str.contains(r'Get-SystemDriveInfo', case=False) | ScriptBlockText.str.contains(r'C:\\\\ProgramData\\\\Amazon\\\\EC2-Windows\\\\Launch\\\\Module\\\\', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential COM Objects Download Cradles Usage - PS Script",
        "id": "3c7d1587-3b13-439f-9941-7d14313dbdfe",
        "status": "test",
        "description": "Detects usage of COM objects that can be abused to download files in PowerShell by CLSID",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'[Type]::GetTypeFromCLSID(', case=False) & (ScriptBlockText.str.contains(r'0002DF01-0000-0000-C000-000000000046', case=False) | ScriptBlockText.str.contains(r'F6D90F16-9C73-11D3-B32E-00C04F990BB4', case=False) | ScriptBlockText.str.contains(r'F5078F35-C551-11D3-89B9-0000F81FE221', case=False) | ScriptBlockText.str.contains(r'88d96a0a-f192-11d4-a65f-0040963251e5', case=False) | ScriptBlockText.str.contains(r'AFBA6B42-5692-48EA-8141-DC517DCF0EF1', case=False) | ScriptBlockText.str.contains(r'AFB40FFD-B609-40A3-9828-F88BBE11E4E3', case=False) | ScriptBlockText.str.contains(r'88d96a0b-f192-11d4-a65f-0040963251e5', case=False) | ScriptBlockText.str.contains(r'2087c2f4-2cef-4953-a8ab-66779b670495', case=False) | ScriptBlockText.str.contains(r'000209FF-0000-0000-C000-000000000046', case=False) | ScriptBlockText.str.contains(r'00024500-0000-0000-C000-000000000046', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Invoke-Item From Mount-DiskImage",
        "id": "902cedee-0398-4e3a-8183-6f3a89773a96",
        "status": "test",
        "description": "Adversaries may abuse container files such as disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1553.005"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Mount-DiskImage ', case=False) & ScriptBlockText.str.contains(r'-ImagePath ', case=False) & ScriptBlockText.str.contains(r'Get-Volume', case=False) & ScriptBlockText.str.contains(r'.DriveLetter', case=False) & ScriptBlockText.str.contains(r'invoke-item ', case=False) & ScriptBlockText.str.contains(r'):\\\\', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Request A Single Ticket via PowerShell",
        "id": "a861d835-af37-4930-bcd6-5b178bfb54df",
        "status": "test",
        "description": "utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer.\nThis behavior is typically used during a kerberos or silver ticket attack.\nA successful execution will output the SPNs for the endpoint in question.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1558.003"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'System.IdentityModel.Tokens.KerberosRequestorSecurityToken', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Veeam Backup Servers Credential Dumping Script Execution",
        "id": "976d6e6f-a04b-4900-9713-0134a353e38b",
        "status": "test",
        "description": "Detects execution of a PowerShell script that contains calls to the \"Veeam.Backup\" class, in order to dump stored credentials.",
        "tags": [
            "attack.credential-access"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'[Credentials]', case=False) & ScriptBlockText.str.contains(r'[Veeam.Backup.Common.ProtectedStorage]::GetLocalString', case=False) & ScriptBlockText.str.contains(r'Invoke-Sqlcmd', case=False) & ScriptBlockText.str.contains(r'Veeam Backup and Replication', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential Suspicious Windows Feature Enabled",
        "id": "55c925c1-7195-426b-a136-a9396800e29b",
        "status": "test",
        "description": "Detects usage of the built-in PowerShell cmdlet \"Enable-WindowsOptionalFeature\" used as a Deployment Image Servicing and Management tool.\nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images\n",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Enable-WindowsOptionalFeature', case=False) & ScriptBlockText.str.contains(r'-Online', case=False) & ScriptBlockText.str.contains(r'-FeatureName', case=False) & (ScriptBlockText.str.contains(r'TelnetServer', case=False) | ScriptBlockText.str.contains(r'Internet-Explorer-Optional-amd64', case=False) | ScriptBlockText.str.contains(r'TFTP', case=False) | ScriptBlockText.str.contains(r'SMB1Protocol', case=False) | ScriptBlockText.str.contains(r'Client-ProjFS', case=False) | ScriptBlockText.str.contains(r'Microsoft-Windows-Subsystem-Linux', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerView PowerShell Cmdlets - ScriptBlock",
        "id": "dcd74b95-3f36-4ed9-9598-0490951643aa",
        "status": "test",
        "description": "Detects Cmdlet names from PowerView of the PowerSploit exploitation framework.",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Export-PowerViewCSV', case=False) | ScriptBlockText.str.contains(r'Find-DomainLocalGroupMember', case=False) | ScriptBlockText.str.contains(r'Find-DomainObjectPropertyOutlier', case=False) | ScriptBlockText.str.contains(r'Find-DomainProcess', case=False) | ScriptBlockText.str.contains(r'Find-DomainShare', case=False) | ScriptBlockText.str.contains(r'Find-DomainUserEvent', case=False) | ScriptBlockText.str.contains(r'Find-DomainUserLocation', case=False) | ScriptBlockText.str.contains(r'Find-ForeignGroup', case=False) | ScriptBlockText.str.contains(r'Find-ForeignUser', case=False) | ScriptBlockText.str.contains(r'Find-GPOComputerAdmin', case=False) | ScriptBlockText.str.contains(r'Find-GPOLocation', case=False) | ScriptBlockText.str.contains(r'Find-InterestingDomain', case=False) | ScriptBlockText.str.contains(r'Find-InterestingFile', case=False) | ScriptBlockText.str.contains(r'Find-LocalAdminAccess', case=False) | ScriptBlockText.str.contains(r'Find-ManagedSecurityGroups', case=False) | ScriptBlockText.str.contains(r'Get-CachedRDPConnection', case=False) | ScriptBlockText.str.contains(r'Get-DFSshare', case=False) | ScriptBlockText.str.contains(r'Get-DomainDFSShare', case=False) | ScriptBlockText.str.contains(r'Get-DomainDNSRecord', case=False) | ScriptBlockText.str.contains(r'Get-DomainDNSZone', case=False) | ScriptBlockText.str.contains(r'Get-DomainFileServer', case=False) | ScriptBlockText.str.contains(r'Get-DomainGPOComputerLocalGroupMapping', case=False) | ScriptBlockText.str.contains(r'Get-DomainGPOLocalGroup', case=False) | ScriptBlockText.str.contains(r'Get-DomainGPOUserLocalGroupMapping', case=False) | ScriptBlockText.str.contains(r'Get-LastLoggedOn', case=False) | ScriptBlockText.str.contains(r'Get-LoggedOnLocal', case=False) | ScriptBlockText.str.contains(r'Get-NetFileServer', case=False) | ScriptBlockText.str.contains(r'Get-NetForest', case=False) | ScriptBlockText.str.contains(r'Get-NetGPOGroup', case=False) | ScriptBlockText.str.contains(r'Get-NetProcess', case=False) | ScriptBlockText.str.contains(r'Get-NetRDPSession', case=False) | ScriptBlockText.str.contains(r'Get-RegistryMountedDrive', case=False) | ScriptBlockText.str.contains(r'Get-RegLoggedOn', case=False) | ScriptBlockText.str.contains(r'Get-WMIRegCachedRDPConnection', case=False) | ScriptBlockText.str.contains(r'Get-WMIRegLastLoggedOn', case=False) | ScriptBlockText.str.contains(r'Get-WMIRegMountedDrive', case=False) | ScriptBlockText.str.contains(r'Get-WMIRegProxy', case=False) | ScriptBlockText.str.contains(r'Invoke-ACLScanner', case=False) | ScriptBlockText.str.contains(r'Invoke-CheckLocalAdminAccess', case=False) | ScriptBlockText.str.contains(r'Invoke-EnumerateLocalAdmin', case=False) | ScriptBlockText.str.contains(r'Invoke-EventHunter', case=False) | ScriptBlockText.str.contains(r'Invoke-FileFinder', case=False) | ScriptBlockText.str.contains(r'Invoke-Kerberoast', case=False) | ScriptBlockText.str.contains(r'Invoke-MapDomainTrust', case=False) | ScriptBlockText.str.contains(r'Invoke-ProcessHunter', case=False) | ScriptBlockText.str.contains(r'Invoke-RevertToSelf', case=False) | ScriptBlockText.str.contains(r'Invoke-ShareFinder', case=False) | ScriptBlockText.str.contains(r'Invoke-UserHunter', case=False) | ScriptBlockText.str.contains(r'Invoke-UserImpersonation', case=False) | ScriptBlockText.str.contains(r'Remove-RemoteConnection', case=False) | ScriptBlockText.str.contains(r'Request-SPNTicket', case=False) | ScriptBlockText.str.contains(r'Resolve-IPAddress', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Malicious ShellIntel PowerShell Commandlets",
        "id": "402e1e1d-ad59-47b6-bf80-1ee44985b3a7",
        "status": "test",
        "description": "Detects Commandlet names from ShellIntel exploitation scripts.",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Invoke-SMBAutoBrute', case=False) | ScriptBlockText.str.contains(r'Invoke-GPOLinks', case=False) | ScriptBlockText.str.contains(r'Invoke-Potato', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Computer Discovery And Export Via Get-ADComputer Cmdlet - PowerShell",
        "id": "db885529-903f-4c5d-9864-28fe199e6370",
        "status": "test",
        "description": "Detects usage of the Get-ADComputer cmdlet to collect computer information and output it to a file",
        "tags": [
            "attack.discovery",
            "attack.t1033"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-ADComputer ', case=False) & ScriptBlockText.str.contains(r' -Filter \\*', case=False) & (ScriptBlockText.str.contains(r' | Select ', case=False) | ScriptBlockText.str.contains(r'Out-File', case=False) | ScriptBlockText.str.contains(r'Set-Content', case=False) | ScriptBlockText.str.contains(r'Add-Content', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential RemoteFXvGPUDisablement.EXE Abuse - PowerShell ScriptBlock",
        "id": "cacef8fc-9d3d-41f7-956d-455c6e881bc5",
        "status": "test",
        "description": "Detects PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'function Get-VMRemoteFXPhysicalVideoAdapter {', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Remote Session Creation",
        "id": "a0edd39f-a0c6-4c17-8141-261f958e8d8f",
        "status": "test",
        "description": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system\n",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'New-PSSession', case=False) & ScriptBlockText.str.contains(r'-ComputerName ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Get Information for SMB Share",
        "id": "95f0643a-ed40-467c-806b-aac9542ec5ab",
        "status": "test",
        "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as\na precursor for Collection and to identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n",
        "tags": [
            "attack.discovery",
            "attack.t1069.001"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'get-smbshare', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "DirectorySearcher Powershell Exploitation",
        "id": "1f6399cf-2c80-4924-ace1-6fcff3393480",
        "status": "test",
        "description": "Enumerates Active Directory to determine computers that are joined to the domain",
        "tags": [
            "attack.discovery",
            "attack.t1018"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'New-Object ', case=False) & ScriptBlockText.str.contains(r'System.DirectoryServices.DirectorySearcher', case=False) & ScriptBlockText.str.contains(r'.PropertiesToLoad.Add', case=False) & ScriptBlockText.str.contains(r'.findall()', case=False) & ScriptBlockText.str.contains(r'Properties.name', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell ADRecon Execution",
        "id": "bf72941a-cba0-41ea-b18c-9aca3925690d",
        "status": "test",
        "description": "Detects execution of ADRecon.ps1 for AD reconnaissance which has been reported to be actively used by FIN7",
        "tags": [
            "attack.discovery",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Function Get-ADRExcelComOb', case=False) | ScriptBlockText.str.contains(r'Get-ADRGPO', case=False) | ScriptBlockText.str.contains(r'Get-ADRDomainController', case=False) | ScriptBlockText.str.contains(r'ADRecon-Report.xlsx', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Get Local Groups Information - PowerShell",
        "id": "fa6a5a45-3ee2-4529-aa14-ee5edc9e29cb",
        "status": "test",
        "description": "Adversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n",
        "tags": [
            "attack.discovery",
            "attack.t1069.001"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'get-localgroup', case=False) | ScriptBlockText.str.contains(r'Get-LocalGroupMember', case=False) | ScriptBlockText.str.contains(r'Get-WMIObject', case=False) & ScriptBlockText.str.contains(r'Win32_Group', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Password Policy Discovery With Get-AdDefaultDomainPasswordPolicy",
        "id": "bbb9495b-58fc-4016-b9df-9a3a1b67ca82",
        "status": "test",
        "description": "Detetcts PowerShell activity in which Get-Addefaultdomainpasswordpolicy is used to get the default password policy for an Active Directory domain.",
        "tags": [
            "attack.discovery",
            "attack.t1201"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-AdDefaultDomainPasswordPolicy', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Eventlog Clear",
        "id": "0f017df3-8f5a-414f-ad6b-24aff1128278",
        "status": "test",
        "description": "Detects usage of known powershell cmdlets such as \"Clear-EventLog\" to clear the Windows event logs",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Clear-EventLog ', case=False) | ScriptBlockText.str.contains(r'Remove-EventLog ', case=False) | ScriptBlockText.str.contains(r'Limit-EventLog ', case=False) | ScriptBlockText.str.contains(r'Clear-WinEvent ', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PSAsyncShell - Asynchronous TCP Reverse Shell",
        "id": "afd3df04-948d-46f6-ae44-25966c44b97f",
        "status": "test",
        "description": "Detects the use of PSAsyncShell an Asynchronous TCP Reverse Shell written in powershell",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'PSAsyncShell', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Silence.EDA Detection",
        "id": "3ceb2083-a27f-449a-be33-14ec1b7cc973",
        "status": "test",
        "description": "Detects Silence EmpireDNSAgent as described in the Group-IP report",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.command-and-control",
            "attack.t1071.004",
            "attack.t1572",
            "attack.impact",
            "attack.t1529",
            "attack.g0091",
            "attack.s0363"
        ],
        "level": "critical",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'System.Diagnostics.Process', case=False) & ScriptBlockText.str.contains(r'Stop-Computer', case=False) & ScriptBlockText.str.contains(r'Restart-Computer', case=False) & ScriptBlockText.str.contains(r'Exception in execution', case=False) & ScriptBlockText.str.contains(r'$cmdargs', case=False) & ScriptBlockText.str.contains(r'Close-Dnscat2Tunnel', case=False) & ScriptBlockText.str.contains(r'set type=$LookupType`nserver', case=False) & ScriptBlockText.str.contains(r'$Command | nslookup 2>&1 | Out-String', case=False) & ScriptBlockText.str.contains(r'New-RandomDNSField', case=False) & ScriptBlockText.str.contains(r'[Convert]::ToString($SYNOptions, 16)', case=False) & ScriptBlockText.str.contains(r'$Session.Dead = $True', case=False) & ScriptBlockText.str.contains(r'$Session[\"Driver\"] -eq', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell Token Obfuscation - Powershell",
        "id": "f3a98ce4-6164-4dd4-867c-4d83de7eca51",
        "status": "test",
        "description": "Detects TOKEN OBFUSCATION technique from Invoke-Obfuscation",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027.009"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'\\\\w+`(\\\\w+|-|.)`[\\\\w+|\\\\s]') | ScriptBlockText.str.contains(r'\"(\\\\{\\\\d\\\\}){2,}\"\\\\s*-f') | ScriptBlockText.str.contains(r'(?i)\\\\$\\\\{`?e`?n`?v`?:`?p`?a`?t`?h`?\\\\}')) & ~ (ScriptBlockText.str.contains(r'${env:path}', case=False) | ScriptBlockText.str.contains(r'it will return true or false instead', case=False) | ScriptBlockText.str.contains(r'The function also prevents `Get-ItemProperty` from failing', case=False) | Path.str.contains(r'C:\\\\Program Files\\\\Microsoft\\\\Exchange Server\\\\', case=False) & Path.str.contains(r'\\\\bin\\\\servicecontrol.ps1', case=False) & ScriptBlockText.str.contains(r'`r`n', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Code Executed Via Office Add-in XLL File",
        "id": "36fbec91-fa1b-4d5d-8df1-8d8edcb632ad",
        "status": "test",
        "description": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system.\nOffice add-ins can be used to add functionality to Office programs\n",
        "tags": [
            "attack.persistence",
            "attack.t1137.006"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'new-object ', case=False) & ScriptBlockText.str.contains(r'-ComObject ', case=False) & ScriptBlockText.str.contains(r'.application', case=False) & ScriptBlockText.str.contains(r'.RegisterXLL', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential WinAPI Calls Via PowerShell Scripts",
        "id": "03d83090-8cba-44a0-b02f-0b756a050306",
        "status": "test",
        "description": "Detects use of WinAPI functions in PowerShell scripts",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.t1106"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'VirtualAlloc', case=False) & ScriptBlockText.str.contains(r'OpenProcess', case=False) & ScriptBlockText.str.contains(r'WriteProcessMemory', case=False) & ScriptBlockText.str.contains(r'CreateRemoteThread', case=False) | ScriptBlockText.str.contains(r'OpenProcessToken', case=False) & ScriptBlockText.str.contains(r'LookupPrivilegeValue', case=False) & ScriptBlockText.str.contains(r'AdjustTokenPrivileges', case=False) | ScriptBlockText.str.contains(r'OpenProcessToken', case=False) & ScriptBlockText.str.contains(r'DuplicateTokenEx', case=False) & ScriptBlockText.str.contains(r'CloseHandle', case=False) | ScriptBlockText.str.contains(r'WriteProcessMemory', case=False) & ScriptBlockText.str.contains(r'VirtualAlloc', case=False) & ScriptBlockText.str.contains(r'ReadProcessMemory', case=False) & ScriptBlockText.str.contains(r'VirtualFree', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Tamper Windows Defender Remove-MpPreference - ScriptBlockLogging",
        "id": "ae2bdd58-0681-48ac-be7f-58ab4e593458",
        "status": "test",
        "description": "Detects attempts to remove Windows Defender configuration using the 'MpPreference' cmdlet",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Remove-MpPreference', case=False) & (ScriptBlockText.str.contains(r'-ControlledFolderAccessProtectedFolders ', case=False) | ScriptBlockText.str.contains(r'-AttackSurfaceReductionRules_Ids ', case=False) | ScriptBlockText.str.contains(r'-AttackSurfaceReductionRules_Actions ', case=False) | ScriptBlockText.str.contains(r'-CheckForSignaturesBeforeRunningScan ', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell Add Name Resolution Policy Table Rule",
        "id": "4368354e-1797-463c-bc39-a309effbe8d7",
        "status": "test",
        "description": "Detects powershell scripts that adds a Name Resolution Policy Table (NRPT) rule for the specified namespace.\nThis will bypass the default DNS server and uses a specified server for answering the query.\n",
        "tags": [
            "attack.impact",
            "attack.t1565"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Add-DnsClientNrptRule', case=False) & ScriptBlockText.str.contains(r'-Namesp', case=False) & ScriptBlockText.str.contains(r'-NameSe', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Deletion of Volume Shadow Copies via WMI with PowerShell - PS Script",
        "id": "c1337eb8-921a-4b59-855b-4ba188ddcc42",
        "status": "test",
        "description": "Detects deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil",
        "tags": [
            "attack.impact",
            "attack.t1490"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Get-WmiObject', case=False) | ScriptBlockText.str.contains(r'gwmi', case=False) | ScriptBlockText.str.contains(r'Get-CimInstance', case=False) | ScriptBlockText.str.contains(r'gcim', case=False)) & ScriptBlockText.str.contains(r'Win32_ShadowCopy', case=False) & (ScriptBlockText.str.contains(r'.Delete()', case=False) | ScriptBlockText.str.contains(r'Remove-WmiObject', case=False) | ScriptBlockText.str.contains(r'rwmi', case=False) | ScriptBlockText.str.contains(r'Remove-CimInstance', case=False) | ScriptBlockText.str.contains(r'rcim', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Delete Volume Shadow Copies via WMI with PowerShell - PS Script",
        "id": "e17121b4-ef2a-4418-8a59-12fb1631fa9e",
        "status": "test",
        "description": "Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil",
        "tags": [
            "attack.impact",
            "attack.t1490"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-WmiObject', case=False) & ScriptBlockText.str.contains(r'Win32_ShadowCopy', case=False) & ScriptBlockText.str.contains(r'.Delete()', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Disable of ETW Trace - Powershell",
        "id": "115fdba9-f017-42e6-84cf-d5573bf2ddf8",
        "status": "test",
        "description": "Detects usage of powershell cmdlets to disable or remove ETW trace sessions",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070",
            "attack.t1562.006",
            "car.2016-04-002"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Remove-EtwTraceProvider ', case=False) | ScriptBlockText.str.contains(r'Set-EtwTraceProvider ', case=False) & ScriptBlockText.str.contains(r'0x11', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious PowerShell Mailbox SMTP Forward Rule",
        "id": "15b7abbb-8b40-4d01-9ee2-b51994b1d474",
        "status": "test",
        "description": "Detects usage of the powerShell Set-Mailbox Cmdlet to set-up an SMTP forwarding rule.",
        "tags": [
            "attack.exfiltration"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Set-Mailbox ', case=False) & ScriptBlockText.str.contains(r' -DeliverToMailboxAndForward ', case=False) & ScriptBlockText.str.contains(r' -ForwardingSmtpAddress ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Automated Collection Bookmarks Using Get-ChildItem PowerShell",
        "id": "e0565f5d-d420-4e02-8a68-ac00d864f9cf",
        "status": "test",
        "description": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n",
        "tags": [
            "attack.discovery",
            "attack.t1217"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-ChildItem', case=False) & ScriptBlockText.str.contains(r' -Recurse ', case=False) & ScriptBlockText.str.contains(r' -Path ', case=False) & ScriptBlockText.str.contains(r' -Filter Bookmarks', case=False) & ScriptBlockText.str.contains(r' -ErrorAction SilentlyContinue', case=False) & ScriptBlockText.str.contains(r' -Force', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious New-PSDrive to Admin Share",
        "id": "1c563233-030e-4a07-af8c-ee0490a66d3a",
        "status": "test",
        "description": "Adversaries may use to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'New-PSDrive', case=False) & ScriptBlockText.str.contains(r'-psprovider ', case=False) & ScriptBlockText.str.contains(r'filesystem', case=False) & ScriptBlockText.str.contains(r'-root ', case=False) & ScriptBlockText.str.contains(r'\\\\\\\\', case=False) & ScriptBlockText.str.contains(r'$', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "AADInternals PowerShell Cmdlets Execution - PsScript",
        "id": "91e69562-2426-42ce-a647-711b8152ced6",
        "status": "test",
        "description": "Detects ADDInternals Cmdlet execution. A tool for administering Azure AD and Office 365. Which can be abused by threat actors to attack Azure AD or Office 365.",
        "tags": [
            "attack.execution",
            "attack.reconnaissance",
            "attack.discovery",
            "attack.credential-access",
            "attack.impact"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Add-AADInt', case=False) | ScriptBlockText.str.contains(r'ConvertTo-AADInt', case=False) | ScriptBlockText.str.contains(r'Disable-AADInt', case=False) | ScriptBlockText.str.contains(r'Enable-AADInt', case=False) | ScriptBlockText.str.contains(r'Export-AADInt', case=False) | ScriptBlockText.str.contains(r'Find-AADInt', case=False) | ScriptBlockText.str.contains(r'Get-AADInt', case=False) | ScriptBlockText.str.contains(r'Grant-AADInt', case=False) | ScriptBlockText.str.contains(r'Initialize-AADInt', case=False) | ScriptBlockText.str.contains(r'Install-AADInt', case=False) | ScriptBlockText.str.contains(r'Invoke-AADInt', case=False) | ScriptBlockText.str.contains(r'Join-AADInt', case=False) | ScriptBlockText.str.contains(r'New-AADInt', case=False) | ScriptBlockText.str.contains(r'Open-AADInt', case=False) | ScriptBlockText.str.contains(r'Read-AADInt', case=False) | ScriptBlockText.str.contains(r'Register-AADInt', case=False) | ScriptBlockText.str.contains(r'Remove-AADInt', case=False) | ScriptBlockText.str.contains(r'Reset-AADInt', case=False) | ScriptBlockText.str.contains(r'Resolve-AADInt', case=False) | ScriptBlockText.str.contains(r'Restore-AADInt', case=False) | ScriptBlockText.str.contains(r'Save-AADInt', case=False) | ScriptBlockText.str.contains(r'Search-AADInt', case=False) | ScriptBlockText.str.contains(r'Send-AADInt', case=False) | ScriptBlockText.str.contains(r'Set-AADInt', case=False) | ScriptBlockText.str.contains(r'Start-AADInt', case=False) | ScriptBlockText.str.contains(r'Unprotect-AADInt', case=False) | ScriptBlockText.str.contains(r'Update-AADInt', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious PowerShell WindowStyle Option",
        "id": "313fbb0a-a341-4682-848d-6d6f8c4fab7c",
        "status": "test",
        "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users.\nIn some cases, windows that would typically be displayed when an application carries out an operation can be hidden\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.003"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'powershell', case=False) & ScriptBlockText.str.contains(r'WindowStyle', case=False) & ScriptBlockText.str.contains(r'Hidden', case=False) & ~ (ScriptBlockText.str.contains(r':\\\\Program Files\\\\Amazon\\\\WorkSpacesConfig\\\\Scripts\\\\', case=False) & ScriptBlockText.str.contains(r'$PSScriptRoot\\\\Module\\\\WorkspaceScriptModule\\\\WorkspaceScriptModule', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Clear PowerShell History - PowerShell",
        "id": "26b692dc-1722-49b2-b496-a8258aa6371d",
        "status": "test",
        "description": "Detects keywords that could indicate clearing PowerShell history",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.003"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Set-PSReadlineOption', case=False) & ScriptBlockText.str.contains(r'\u2013HistorySaveStyle', case=False) & ScriptBlockText.str.contains(r'SaveNothing', case=False) | ScriptBlockText.str.contains(r'Set-PSReadlineOption', case=False) & ScriptBlockText.str.contains(r'-HistorySaveStyle', case=False) & ScriptBlockText.str.contains(r'SaveNothing', case=False) | (ScriptBlockText.str.contains(r'del', case=False) | ScriptBlockText.str.contains(r'Remove-Item', case=False) | ScriptBlockText.str.contains(r'rm', case=False)) & ScriptBlockText.str.contains(r'(Get-PSReadlineOption).HistorySavePath', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Hotfix Enumeration",
        "id": "f5d1def8-1de0-4a0e-9794-1f6f27dd605c",
        "status": "test",
        "description": "Detects call to \"Win32_QuickFixEngineering\" in order to enumerate installed hotfixes often used in \"enum\" scripts by attackers",
        "tags": [
            "attack.discovery"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Win32_QuickFixEngineering', case=False) & ScriptBlockText.str.contains(r'HotFixID', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Hyper-V Cmdlets",
        "id": "42d36aa1-3240-4db0-8257-e0118dcdd9cd",
        "status": "test",
        "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.006"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'New-VM', case=False) | ScriptBlockText.str.contains(r'Set-VMFirmware', case=False) | ScriptBlockText.str.contains(r'Start-VM', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Remove Account From Domain Admin Group",
        "id": "48a45d45-8112-416b-8a67-46e03a4b2107",
        "status": "test",
        "description": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users.\nAccounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.\n",
        "tags": [
            "attack.impact",
            "attack.t1531"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Remove-ADGroupMember', case=False) & ScriptBlockText.str.contains(r'-Identity ', case=False) & ScriptBlockText.str.contains(r'-Members ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell Timestomp",
        "id": "c6438007-e081-42ce-9483-b067fbef33c3",
        "status": "test",
        "description": "Adversaries may modify file time attributes to hide new or changes to existing files.\nTimestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.006"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'.CreationTime =', case=False) | ScriptBlockText.str.contains(r'.LastWriteTime =', case=False) | ScriptBlockText.str.contains(r'.LastAccessTime =', case=False) | ScriptBlockText.str.contains(r'[IO.File]::SetCreationTime', case=False) | ScriptBlockText.str.contains(r'[IO.File]::SetLastAccessTime', case=False) | ScriptBlockText.str.contains(r'[IO.File]::SetLastWriteTime', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious GPO Discovery With Get-GPO",
        "id": "eb2fd349-ec67-4caa-9143-d79c7fb34441",
        "status": "test",
        "description": "Detect use of Get-GPO to get one GPO or all the GPOs in a domain.",
        "tags": [
            "attack.discovery",
            "attack.t1615"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-GPO', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential PowerShell Obfuscation Using Character Join",
        "id": "e8314f79-564d-4f79-bc13-fbc0bf2660d8",
        "status": "test",
        "description": "Detects specific techniques often seen used inside of PowerShell scripts to obfscuate Alias creation",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1027",
            "attack.t1059.001"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'-Alias', case=False) & ScriptBlockText.str.contains(r' -Value (-join(', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation COMPRESS OBFUSCATION - PowerShell",
        "id": "20e5497e-331c-4cd5-8d36-935f6e2a9a07",
        "status": "test",
        "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'new-object', case=False) & ScriptBlockText.str.contains(r'text.encoding]::ascii', case=False) & (ScriptBlockText.str.contains(r'system.io.compression.deflatestream', case=False) | ScriptBlockText.str.contains(r'system.io.streamreader', case=False)) & ScriptBlockText.str.contains(r'readtoend', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Get-Process LSASS in ScriptBlock",
        "id": "84c174ab-d3ef-481f-9c86-a50d0b8e3edb",
        "status": "test",
        "description": "Detects a Get-Process command on lsass process, which is in almost all cases a sign of malicious activity",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-Process lsass', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Security Software Discovery Via Powershell Script",
        "id": "904e8e61-8edf-4350-b59c-b905fc8e810c",
        "status": "test",
        "description": "Detects calls to \"get-process\" where the output is piped to a \"where-object\" filter to search for security solution processes.\nAdversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus\n",
        "tags": [
            "attack.discovery",
            "attack.t1518.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'get-process | ?', case=False) | ScriptBlockText.str.contains(r'get-process | where', case=False) | ScriptBlockText.str.contains(r'gps | ?', case=False) | ScriptBlockText.str.contains(r'gps | where', case=False)) & (ScriptBlockText.str.contains(r'Company -like', case=False) | ScriptBlockText.str.contains(r'Description -like', case=False) | ScriptBlockText.str.contains(r'Name -like', case=False) | ScriptBlockText.str.contains(r'Path -like', case=False) | ScriptBlockText.str.contains(r'Product -like', case=False)) & (ScriptBlockText.str.contains(r'\\*avira\\*', case=False) | ScriptBlockText.str.contains(r'\\*carbonblack\\*', case=False) | ScriptBlockText.str.contains(r'\\*cylance\\*', case=False) | ScriptBlockText.str.contains(r'\\*defender\\*', case=False) | ScriptBlockText.str.contains(r'\\*kaspersky\\*', case=False) | ScriptBlockText.str.contains(r'\\*malware\\*', case=False) | ScriptBlockText.str.contains(r'\\*sentinel\\*', case=False) | ScriptBlockText.str.contains(r'\\*symantec\\*', case=False) | ScriptBlockText.str.contains(r'\\*virus\\*', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential Packet Capture Activity Via Start-NetEventSession - ScriptBlock",
        "id": "da34e323-1e65-42db-83be-a6725ac2caa3",
        "status": "experimental",
        "description": "Detects the execution of powershell scripts with calls to the \"Start-NetEventSession\" cmdlet. Which allows an attacker to start event and packet capture for a network event session.\nAdversaries may attempt to capture network to gather information over the course of an operation.\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol.\n",
        "tags": [
            "attack.credential-access",
            "attack.discovery",
            "attack.t1040"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Start-NetEventSession', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Live Memory Dump Using Powershell",
        "id": "cd185561-4760-45d6-a63e-a51325112cae",
        "status": "test",
        "description": "Detects usage of a PowerShell command to dump the live memory of a Windows machine",
        "tags": [
            "attack.t1003"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-StorageDiagnosticInfo', case=False) & ScriptBlockText.str.contains(r'-IncludeLiveDump', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell LocalAccount Manipulation",
        "id": "4fdc44df-bfe9-4fcc-b041-68f5a2d3031c",
        "status": "test",
        "description": "Adversaries may manipulate accounts to maintain access to victim systems.\nAccount manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups\n",
        "tags": [
            "attack.persistence",
            "attack.t1098"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Disable-LocalUser', case=False) | ScriptBlockText.str.contains(r'Enable-LocalUser', case=False) | ScriptBlockText.str.contains(r'Get-LocalUser', case=False) | ScriptBlockText.str.contains(r'Set-LocalUser', case=False) | ScriptBlockText.str.contains(r'New-LocalUser', case=False) | ScriptBlockText.str.contains(r'Rename-LocalUser', case=False) | ScriptBlockText.str.contains(r'Remove-LocalUser', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential Persistence Via PowerShell User Profile Using Add-Content",
        "id": "05b3e303-faf0-4f4a-9b30-46cc13e69152",
        "status": "test",
        "description": "Detects calls to \"Add-Content\" cmdlet in order to modify the content of the user profile and potentially adding suspicious commands for persistence",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1546.013"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Add-Content $profile', case=False) & (ScriptBlockText.str.contains(r'-Value \"IEX ', case=False) | ScriptBlockText.str.contains(r'-Value \"Invoke-Expression', case=False) | ScriptBlockText.str.contains(r'-Value \"Invoke-WebRequest', case=False) | ScriptBlockText.str.contains(r'-Value \"Start-Process', case=False) | ScriptBlockText.str.contains(r'-Value \\'IEX ', case=False) | ScriptBlockText.str.contains(r'-Value \\'Invoke-Expression', case=False) | ScriptBlockText.str.contains(r'-Value \\'Invoke-WebRequest', case=False) | ScriptBlockText.str.contains(r'-Value \\'Start-Process', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential PowerShell Obfuscation Using Alias Cmdlets",
        "id": "96cd126d-f970-49c4-848a-da3a09f55c55",
        "status": "test",
        "description": "Detects Set-Alias or New-Alias cmdlet usage. Which can be use as a mean to obfuscate PowerShell scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.execution",
            "attack.t1027",
            "attack.t1059.001"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Set-Alias ', case=False) | ScriptBlockText.str.contains(r'New-Alias ', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Manipulation of User Computer or Group Security Principals Across AD",
        "id": "b29a93fb-087c-4b5b-a84d-ee3309e69d08",
        "status": "test",
        "description": "Adversaries may create a domain account to maintain access to victim systems.\nDomain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain..\n",
        "tags": [
            "attack.persistence",
            "attack.t1136.002"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'System.DirectoryServices.AccountManagement', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Deleted Mounted Share",
        "id": "66a4d409-451b-4151-94f4-a55d559c49b0",
        "status": "test",
        "description": "Detects when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.005"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Remove-SmbShare', case=False) | ScriptBlockText.str.contains(r'Remove-FileShare', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious TCP Tunnel Via PowerShell Script",
        "id": "bd33d2aa-497e-4651-9893-5c5364646595",
        "status": "test",
        "description": "Detects powershell scripts that creates sockets/listeners which could be indicative of tunneling activity",
        "tags": [
            "attack.command-and-control",
            "attack.t1090"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'[System.Net.HttpWebRequest]', case=False) & ScriptBlockText.str.contains(r'System.Net.Sockets.TcpListener', case=False) & ScriptBlockText.str.contains(r'AcceptTcpClient', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use Rundll32 - PowerShell",
        "id": "a5a30a6e-75ca-4233-8b8c-42e0f2037d3b",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use Rundll32 in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'&&', case=False) & ScriptBlockText.str.contains(r'rundll32', case=False) & ScriptBlockText.str.contains(r'shell32.dll', case=False) & ScriptBlockText.str.contains(r'shellexec_rundll', case=False) & (ScriptBlockText.str.contains(r'value', case=False) | ScriptBlockText.str.contains(r'invoke', case=False) | ScriptBlockText.str.contains(r'comspec', case=False) | ScriptBlockText.str.contains(r'iex', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Mount-DiskImage",
        "id": "29e1c216-6408-489d-8a06-ee9d151ef819",
        "status": "test",
        "description": "Adversaries may abuse container files such as disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1553.005"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Mount-DiskImage ', case=False) & ScriptBlockText.str.contains(r'-ImagePath ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Windows Firewall Profile Disabled",
        "id": "488b44e7-3781-4a71-888d-c95abfacf44d",
        "status": "test",
        "description": "Detects when a user disables the Windows Firewall via a Profile to help evade defense.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.004"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Set-NetFirewallProfile ', case=False) & ScriptBlockText.str.contains(r' -Enabled ', case=False) & ScriptBlockText.str.contains(r' False', case=False) & (ScriptBlockText.str.contains(r' -All ', case=False) | ScriptBlockText.str.contains(r'Public', case=False) | ScriptBlockText.str.contains(r'Domain', case=False) | ScriptBlockText.str.contains(r'Private', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Script With File Hostname Resolving Capabilities",
        "id": "fbc5e92f-3044-4e73-a5c6-1c4359b539de",
        "status": "test",
        "description": "Detects PowerShell scripts that have capabilities to read files, loop through them and resolve DNS host entries.",
        "tags": [
            "attack.exfiltration",
            "attack.t1020"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-content ', case=False) & ScriptBlockText.str.contains(r'foreach', case=False) & ScriptBlockText.str.contains(r'[System.Net.Dns]::GetHostEntry', case=False) & ScriptBlockText.str.contains(r'Out-File', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Registry-Free Process Scope COR_PROFILER",
        "id": "23590215-4702-4a70-8805-8dc9e58314a2",
        "status": "test",
        "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR.\nThe COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR).\nThese profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.\n(Citation: Microsoft Profiling Mar 2017)\n(Citation: Microsoft COR_PROFILER Feb 2013)\n",
        "tags": [
            "attack.persistence",
            "attack.t1574.012"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'$env:COR_ENABLE_PROFILING', case=False) & ScriptBlockText.str.contains(r'$env:COR_PROFILER', case=False) & ScriptBlockText.str.contains(r'$env:COR_PROFILER_PATH', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Windows Defender Exclusions Added - PowerShell",
        "id": "c1344fa2-323b-4d2e-9176-84b4d4821c88",
        "status": "test",
        "description": "Detects modifications to the Windows Defender configuration settings using PowerShell to add exclusions",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562",
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r' -ExclusionPath ', case=False) | ScriptBlockText.str.contains(r' -ExclusionExtension ', case=False) | ScriptBlockText.str.contains(r' -ExclusionProcess ', case=False) | ScriptBlockText.str.contains(r' -ExclusionIpAddress ', case=False)) & (ScriptBlockText.str.contains(r'Add-MpPreference ', case=False) | ScriptBlockText.str.contains(r'Set-MpPreference ', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell WMI Persistence",
        "id": "9e07f6e7-83aa-45c6-998e-0af26efd0a85",
        "status": "test",
        "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription.",
        "tags": [
            "attack.privilege-escalation",
            "attack.t1546.003"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'New-CimInstance ', case=False) & ScriptBlockText.str.contains(r'-Namespace root/subscription ', case=False) & ScriptBlockText.str.contains(r'-ClassName __EventFilter ', case=False) & ScriptBlockText.str.contains(r'-Property ', case=False) | ScriptBlockText.str.contains(r'New-CimInstance ', case=False) & ScriptBlockText.str.contains(r'-Namespace root/subscription ', case=False) & ScriptBlockText.str.contains(r'-ClassName CommandLineEventConsumer ', case=False) & ScriptBlockText.str.contains(r'-Property ', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell ShellCode",
        "id": "16b37b70-6fcf-4814-a092-c36bd3aafcbd",
        "status": "test",
        "description": "Detects Base64 encoded Shellcode",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1055",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'OiCAAAAYInlM', case=False) | ScriptBlockText.str.contains(r'OiJAAAAYInlM', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Script Change Permission Via Set-Acl - PsScript",
        "id": "cae80281-ef23-44c5-873b-fd48d2666f49",
        "status": "test",
        "description": "Detects PowerShell scripts set ACL to of a file or a folder",
        "tags": [
            "attack.defense-evasion",
            "attack.t1222"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Set-Acl ', case=False) & ScriptBlockText.str.contains(r'-AclObject ', case=False) & ScriptBlockText.str.contains(r'-Path ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Write-EventLog Usage",
        "id": "35f41cd7-c98e-469f-8a02-ec4ba0cc7a7e",
        "status": "test",
        "description": "Detects usage of the \"Write-EventLog\" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Write-EventLog', case=False) & ScriptBlockText.str.contains(r'-RawData ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Change PowerShell Policies to an Insecure Level - PowerShell",
        "id": "61d0475c-173f-4844-86f7-f3eebae1c66b",
        "status": "test",
        "description": "Detects changing the PowerShell script execution policy to a potentially insecure level using the \"Set-ExecutionPolicy\" cmdlet.",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Set-ExecutionPolicy', case=False) & (ScriptBlockText.str.contains(r'Unrestricted', case=False) | ScriptBlockText.str.contains(r'bypass', case=False)) & ~ (ScriptBlockText.str.contains(r'(New-Object System.Net.WebClient).DownloadString(\\'https://community.chocolatey.org/install.ps1\\')', case=False) | ScriptBlockText.str.contains(r'(New-Object System.Net.WebClient).DownloadString(\\'https://chocolatey.org/install.ps1\\')', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell MsXml COM Object",
        "id": "78aa1347-1517-4454-9982-b338d6df8343",
        "status": "test",
        "description": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'New-Object', case=False) & ScriptBlockText.str.contains(r'-ComObject', case=False) & ScriptBlockText.str.contains(r'MsXml2.', case=False) & ScriptBlockText.str.contains(r'XmlHttp', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious PowerShell Invocations - Specific",
        "id": "ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71",
        "status": "test",
        "description": "Detects suspicious PowerShell invocation command parameters",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'-nop', case=False) & ScriptBlockText.str.contains(r' -w ', case=False) & ScriptBlockText.str.contains(r'hidden', case=False) & ScriptBlockText.str.contains(r' -c ', case=False) & ScriptBlockText.str.contains(r'[Convert]::FromBase64String', case=False) | ScriptBlockText.str.contains(r' -w ', case=False) & ScriptBlockText.str.contains(r'hidden', case=False) & ScriptBlockText.str.contains(r'-noni', case=False) & ScriptBlockText.str.contains(r'-nop', case=False) & ScriptBlockText.str.contains(r' -c ', case=False) & ScriptBlockText.str.contains(r'iex', case=False) & ScriptBlockText.str.contains(r'New-Object', case=False) | ScriptBlockText.str.contains(r' -w ', case=False) & ScriptBlockText.str.contains(r'hidden', case=False) & ScriptBlockText.str.contains(r'-ep', case=False) & ScriptBlockText.str.contains(r'bypass', case=False) & ScriptBlockText.str.contains(r'-Enc', case=False) | ScriptBlockText.str.contains(r'powershell', case=False) & ScriptBlockText.str.contains(r'reg', case=False) & ScriptBlockText.str.contains(r'add', case=False) & ScriptBlockText.str.contains(r'HKCU\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run', case=False) | ScriptBlockText.str.contains(r'bypass', case=False) & ScriptBlockText.str.contains(r'-noprofile', case=False) & ScriptBlockText.str.contains(r'-windowstyle', case=False) & ScriptBlockText.str.contains(r'hidden', case=False) & ScriptBlockText.str.contains(r'new-object', case=False) & ScriptBlockText.str.contains(r'system.net.webclient', case=False) & ScriptBlockText.str.contains(r'.download', case=False) | ScriptBlockText.str.contains(r'iex', case=False) & ScriptBlockText.str.contains(r'New-Object', case=False) & ScriptBlockText.str.contains(r'Net.WebClient', case=False) & ScriptBlockText.str.contains(r'.Download', case=False)) & ~ (ScriptBlockText.str.contains(r'(New-Object System.Net.WebClient).DownloadString(\\'https://community.chocolatey.org/install.ps1', case=False) | ScriptBlockText.str.contains(r'(New-Object System.Net.WebClient).DownloadString(\\'https://chocolatey.org/install.ps1\\')', case=False) | ScriptBlockText.str.contains(r'Write-ChocolateyWarning', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell Install a DLL in System Directory",
        "id": "63bf8794-9917-45bc-88dd-e1b5abc0ecfd",
        "status": "test",
        "description": "Uses PowerShell to install/copy a file into a system directory such as \"System32\" or \"SysWOW64\"",
        "tags": [
            "attack.credential-access",
            "attack.t1556.002"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'(Copy-Item|cpi) .{2,128} -Destination .{1,32}\\\\\\\\Windows\\\\\\\\(System32|SysWOW64)')"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell Store File In Alternate Data Stream",
        "id": "a699b30e-d010-46c8-bbd1-ee2e26765fe9",
        "status": "test",
        "description": "Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Start-Process', case=False) & ScriptBlockText.str.contains(r'-FilePath \"$env:comspec\" ', case=False) & ScriptBlockText.str.contains(r'-ArgumentList ', case=False) & ScriptBlockText.str.contains(r'>', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell ICMP Exfiltration",
        "id": "4c4af3cd-2115-479c-8193-6b8bfce9001c",
        "status": "test",
        "description": "Detects Exfiltration Over Alternative Protocol - ICMP. Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.",
        "tags": [
            "attack.exfiltration",
            "attack.t1048.003"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'New-Object', case=False) & ScriptBlockText.str.contains(r'System.Net.NetworkInformation.Ping', case=False) & ScriptBlockText.str.contains(r'.Send(', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell PSAttack",
        "id": "b7ec41a4-042c-4f31-a5db-d0fcde9fa5c5",
        "status": "test",
        "description": "Detects the use of PSAttack PowerShell hack tool",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'PS ATTACK!!!', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Troubleshooting Pack Cmdlet Execution",
        "id": "03409c93-a7c7-49ba-9a4c-a00badf2a153",
        "status": "test",
        "description": "Detects execution of \"TroubleshootingPack\" cmdlets to leverage CVE-2022-30190 or action similar to \"msdt\" lolbin (as described in LOLBAS)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1202"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Invoke-TroubleshootingPack', case=False) & ScriptBlockText.str.contains(r'C:\\\\Windows\\\\Diagnostics\\\\System\\\\PCW', case=False) & ScriptBlockText.str.contains(r'-AnswerFile', case=False) & ScriptBlockText.str.contains(r'-Unattended', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "NTFS Alternate Data Stream",
        "id": "8c521530-5169-495d-a199-0a3a881ad24e",
        "status": "test",
        "description": "Detects writing data into NTFS alternate data streams from powershell. Needs Script Block Logging.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'set-content', case=False) | ScriptBlockText.str.contains(r'add-content', case=False)) & ScriptBlockText.str.contains(r'-stream', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential Active Directory Enumeration Using AD Module - PsScript",
        "id": "9e620995-f2d8-4630-8430-4afd89f77604",
        "status": "test",
        "description": "Detects usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dl\" DLL. Which is often used by attackers to perform AD enumeration.",
        "tags": [
            "attack.reconnaissance",
            "attack.discovery",
            "attack.impact"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Import-Module ', case=False) & ScriptBlockText.str.contains(r'Microsoft.ActiveDirectory.Management.dll', case=False) | ScriptBlockText.str.contains(r'ipmo Microsoft.ActiveDirectory.Management.dll', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Certificate Exported Via PowerShell - ScriptBlock",
        "id": "aa7a3fce-bef5-4311-9cc1-5f04bb8c308c",
        "status": "test",
        "description": "Detects calls to cmdlets inside of PowerShell scripts that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.",
        "tags": [
            "attack.credential-access",
            "attack.t1552.004"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Export-PfxCertificate', case=False) | ScriptBlockText.str.contains(r'Export-Certificate', case=False)) & ~ ScriptBlockText.str.contains(r'CmdletsToExport = @(', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell Sensitive File Discovery",
        "id": "7d416556-6502-45b2-9bad-9d2f05f38997",
        "status": "test",
        "description": "Detect adversaries enumerate sensitive files",
        "tags": [
            "attack.discovery",
            "attack.t1083"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'ls', case=False) | ScriptBlockText.str.contains(r'get-childitem', case=False) | ScriptBlockText.str.contains(r'gci', case=False)) & ScriptBlockText.str.contains(r'-recurse', case=False) & (ScriptBlockText.str.contains(r'.pass', case=False) | ScriptBlockText.str.contains(r'.kdbx', case=False) | ScriptBlockText.str.contains(r'.kdb', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell Detect Virtualization Environment",
        "id": "d93129cd-1ee0-479f-bc03-ca6f129882e3",
        "status": "test",
        "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments.\nThis may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1497.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Get-WmiObject', case=False) | ScriptBlockText.str.contains(r'gwmi', case=False)) & (ScriptBlockText.str.contains(r'MSAcpi_ThermalZoneTemperature', case=False) | ScriptBlockText.str.contains(r'Win32_ComputerSystem', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "AD Groups Or Users Enumeration Using PowerShell - ScriptBlock",
        "id": "88f0884b-331d-403d-a3a1-b668cf035603",
        "status": "test",
        "description": "Adversaries may attempt to find domain-level groups and permission settings.\nThe knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n",
        "tags": [
            "attack.discovery",
            "attack.t1069.001"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'get-ADPrincipalGroupMembership', case=False) | ScriptBlockText.str.contains(r'get-aduser', case=False) & ScriptBlockText.str.contains(r'-f ', case=False) & ScriptBlockText.str.contains(r'-pr ', case=False) & ScriptBlockText.str.contains(r'DoesNotRequirePreAuth', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Connection to Remote Account",
        "id": "1883444f-084b-419b-ac62-e0d0c5b3693f",
        "status": "test",
        "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts.\nWithout knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism\n",
        "tags": [
            "attack.credential-access",
            "attack.t1110.001"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'System.DirectoryServices.Protocols.LdapDirectoryIdentifier', case=False) | ScriptBlockText.str.contains(r'System.Net.NetworkCredential', case=False) | ScriptBlockText.str.contains(r'System.DirectoryServices.Protocols.LdapConnection', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation RUNDLL LAUNCHER - PowerShell",
        "id": "e6cb92b4-b470-4eb8-8a9d-d63e8583aae0",
        "status": "test",
        "description": "Detects Obfuscated Powershell via RUNDLL LAUNCHER",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'rundll32.exe', case=False) & ScriptBlockText.str.contains(r'shell32.dll', case=False) & ScriptBlockText.str.contains(r'shellexec_rundll', case=False) & ScriptBlockText.str.contains(r'powershell', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Unblock-File",
        "id": "5947497f-1aa4-41dd-9693-c9848d58727d",
        "status": "test",
        "description": "Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1553.005"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Unblock-File ', case=False) & ScriptBlockText.str.contains(r'-Path ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Create Local User",
        "id": "243de76f-4725-4f2e-8225-a8a69b15ad61",
        "status": "test",
        "description": "Detects creation of a local user via PowerShell",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.persistence",
            "attack.t1136.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'New-LocalUser', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell Execute Batch Script",
        "id": "b5522a23-82da-44e5-9c8b-e10ed8955f88",
        "status": "test",
        "description": "Adversaries may abuse the Windows command shell for execution.\nThe Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems.\nThe Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands.\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops.\nCommon uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple system\n",
        "tags": [
            "attack.execution",
            "attack.t1059.003"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Start-Process', case=False) & (ScriptBlockText.str.contains(r'.cmd', case=False) | ScriptBlockText.str.contains(r'.bat', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential In-Memory Execution Using Reflection.Assembly",
        "id": "ddcd88cb-7f62-4ce5-86f9-1704190feb0a",
        "status": "test",
        "description": "Detects usage of \"Reflection.Assembly\" load functions to dynamically load assemblies in memory",
        "tags": [
            "attack.defense-evasion",
            "attack.t1620"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'[Reflection.Assembly]::load', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Execute Invoke-command on Remote Host",
        "id": "7b836d7f-179c-4ba4-90a7-a7e60afb48e6",
        "status": "test",
        "description": "Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.006"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'invoke-command ', case=False) & ScriptBlockText.str.contains(r' -ComputerName ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation VAR+ Launcher - PowerShell",
        "id": "0adfbc14-0ed1-11eb-adc1-0242ac120002",
        "status": "test",
        "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'cmd.{0,5}(?:/c|/r)(?:\\\\s|)\"set\\\\s[a-zA-Z]{3,6}.*(?:\\\\{\\\\d\\\\}){1,}\\\\\\\\\"\\\\s+?-f(?:.*\\\\)){1,}.*\"')"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious FromBase64String Usage On Gzip Archive - Ps Script",
        "id": "df69cb1d-b891-4cd9-90c7-d617d90100ce",
        "status": "test",
        "description": "Detects attempts of decoding a base64 Gzip archive in a PowerShell script. This technique is often used as a method to load malicious content into memory afterward.",
        "tags": [
            "attack.command-and-control",
            "attack.t1132.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'FromBase64String', case=False) & ScriptBlockText.str.contains(r'MemoryStream', case=False) & ScriptBlockText.str.contains(r'H4sI', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Get-ADReplAccount",
        "id": "060c3ef1-fd0a-4091-bf46-e7d625f60b73",
        "status": "test",
        "description": "The DSInternals PowerShell Module exposes several internal features of Active Directory and Azure Active Directory.\nThese include FIDO2 and NGC key auditing, offline ntds.dit file manipulation, password auditing, DC recovery from IFM backups and password hash calculation.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1003.006"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-ADReplAccount', case=False) & ScriptBlockText.str.contains(r'-All ', case=False) & ScriptBlockText.str.contains(r'-Server ', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Powershell Suspicious Win32_PnPEntity",
        "id": "b26647de-4feb-4283-af6b-6117661283c5",
        "status": "test",
        "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.",
        "tags": [
            "attack.discovery",
            "attack.t1120"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Win32_PnPEntity', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "WMIC Unquoted Services Path Lookup - PowerShell",
        "id": "09658312-bc27-4a3b-91c5-e49ab9046d1b",
        "status": "test",
        "description": "Detects known WMI recon method to look for unquoted service paths, often used by pentest inside of powershell scripts attackers enum scripts",
        "tags": [
            "attack.execution",
            "attack.t1047"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Get-WmiObject ', case=False) | ScriptBlockText.str.contains(r'gwmi ', case=False)) & ScriptBlockText.str.contains(r' Win32_Service ', case=False) & ScriptBlockText.str.contains(r'Name', case=False) & ScriptBlockText.str.contains(r'DisplayName', case=False) & ScriptBlockText.str.contains(r'PathName', case=False) & ScriptBlockText.str.contains(r'StartMode', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Active Directory Computers Enumeration With Get-AdComputer",
        "id": "36bed6b2-e9a0-4fff-beeb-413a92b86138",
        "status": "test",
        "description": "Detects usage of the \"Get-AdComputer\" to enumerate Computers or properties within Active Directory.",
        "tags": [
            "attack.discovery",
            "attack.t1018",
            "attack.t1087.002"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'Get-AdComputer ', case=False) & (ScriptBlockText.str.contains(r'-Filter ', case=False) | ScriptBlockText.str.contains(r'-LDAPFilter ', case=False) | ScriptBlockText.str.contains(r'-Properties ', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Malicious PowerShell Keywords",
        "id": "f62176f3-8128-4faa-bf6c-83261322e5eb",
        "status": "test",
        "description": "Detects keywords from well-known PowerShell exploitation frameworks",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'AdjustTokenPrivileges', case=False) | ScriptBlockText.str.contains(r'IMAGE_NT_OPTIONAL_HDR64_MAGIC', case=False) | ScriptBlockText.str.contains(r'Metasploit', case=False) | ScriptBlockText.str.contains(r'Microsoft.Win32.UnsafeNativeMethods', case=False) | ScriptBlockText.str.contains(r'Mimikatz', case=False) | ScriptBlockText.str.contains(r'MiniDumpWriteDump', case=False) | ScriptBlockText.str.contains(r'PAGE_EXECUTE_READ', case=False) | ScriptBlockText.str.contains(r'ReadProcessMemory.Invoke', case=False) | ScriptBlockText.str.contains(r'SE_PRIVILEGE_ENABLED', case=False) | ScriptBlockText.str.contains(r'SECURITY_DELEGATION', case=False) | ScriptBlockText.str.contains(r'TOKEN_ADJUST_PRIVILEGES', case=False) | ScriptBlockText.str.contains(r'TOKEN_ALL_ACCESS', case=False) | ScriptBlockText.str.contains(r'TOKEN_ASSIGN_PRIMARY', case=False) | ScriptBlockText.str.contains(r'TOKEN_DUPLICATE', case=False) | ScriptBlockText.str.contains(r'TOKEN_ELEVATION', case=False) | ScriptBlockText.str.contains(r'TOKEN_IMPERSONATE', case=False) | ScriptBlockText.str.contains(r'TOKEN_INFORMATION_CLASS', case=False) | ScriptBlockText.str.contains(r'TOKEN_PRIVILEGES', case=False) | ScriptBlockText.str.contains(r'TOKEN_QUERY', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Usage Of Web Request Commands And Cmdlets - ScriptBlock",
        "id": "1139d2e2-84b1-4226-b445-354492eba8ba",
        "status": "test",
        "description": "Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'[System.Net.WebRequest]::create', case=False) | ScriptBlockText.str.contains(r'curl ', case=False) | ScriptBlockText.str.contains(r'Invoke-RestMethod', case=False) | ScriptBlockText.str.contains(r'Invoke-WebRequest', case=False) | ScriptBlockText.str.contains(r'iwr ', case=False) | ScriptBlockText.str.contains(r'Net.WebClient', case=False) | ScriptBlockText.str.contains(r'Resume-BitsTransfer', case=False) | ScriptBlockText.str.contains(r'Start-BitsTransfer', case=False) | ScriptBlockText.str.contains(r'wget ', case=False) | ScriptBlockText.str.contains(r'WinHttp.WinHttpRequest', case=False)) & ~ Path.str.contains(r'C:\\\\Packages\\\\Plugins\\\\Microsoft.GuestConfiguration.ConfigurationforWindows\\\\', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Dump Credentials from Windows Credential Manager With PowerShell",
        "id": "99c49d9c-34ea-45f7-84a7-4751ae6b2cbc",
        "status": "test",
        "description": "Adversaries may search for common password storage locations to obtain user credentials.\nPasswords are stored in several places on a system, depending on the operating system or application holding the credentials.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1555"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Get-PasswordVaultCredentials', case=False) | ScriptBlockText.str.contains(r'Get-CredManCreds', case=False) | ScriptBlockText.str.contains(r'New-Object', case=False) & ScriptBlockText.str.contains(r'Windows.Security.Credentials.PasswordVault', case=False) | ScriptBlockText.str.contains(r'New-Object', case=False) & ScriptBlockText.str.contains(r'Microsoft.CSharp.CSharpCodeProvider', case=False) & ScriptBlockText.str.contains(r'[System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())', case=False) & ScriptBlockText.str.contains(r'Collections.ArrayList', case=False) & ScriptBlockText.str.contains(r'System.CodeDom.Compiler.CompilerParameters', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Service Registry Permissions Weakness Check",
        "id": "95afc12e-3cbb-40c3-9340-84a032e596a3",
        "status": "test",
        "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.\nAdversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.\nWindows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services\n",
        "tags": [
            "attack.persistence",
            "attack.t1574.011",
            "stp.2a"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'get-acl', case=False) & ScriptBlockText.str.contains(r'REGISTRY::HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\', case=False)"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential Persistence Via Security Descriptors - ScriptBlock",
        "id": "2f77047c-e6e9-4c11-b088-a3de399524cd",
        "status": "test",
        "description": "Detects usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor. As seen used in the DAMP project.",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & ScriptBlockText.str.contains(r'win32_Trustee', case=False) & ScriptBlockText.str.contains(r'win32_Ace', case=False) & ScriptBlockText.str.contains(r'.AccessMask', case=False) & ScriptBlockText.str.contains(r'.AceType', case=False) & ScriptBlockText.str.contains(r'.SetSecurityDescriptor', case=False) & (ScriptBlockText.str.contains(r'\\\\Lsa\\\\JD', case=False) | ScriptBlockText.str.contains(r'\\\\Lsa\\\\Skew1', case=False) | ScriptBlockText.str.contains(r'\\\\Lsa\\\\Data', case=False) | ScriptBlockText.str.contains(r'\\\\Lsa\\\\GBG', case=False))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Clearing Windows Console History",
        "id": "bde47d4b-9987-405c-94c7-b080410e8ea7",
        "status": "test",
        "description": "Identifies when a user attempts to clear console history. An adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070",
            "attack.t1070.003"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4104 & (ScriptBlockText.str.contains(r'Clear-History', case=False) | (ScriptBlockText.str.contains(r'Remove-Item', case=False) | ScriptBlockText.str.contains(r'rm', case=False)) & (ScriptBlockText.str.contains(r'ConsoleHost_history.txt', case=False) | ScriptBlockText.str.contains(r'(Get-PSReadlineOption).HistorySavePath', case=False)))"
        ],
        "logsource": {
            "category": "ps_script",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation VAR+ Launcher - PowerShell Module",
        "id": "6bfb8fa7-b2e7-4f6c-8d9d-824e5d06ea9e",
        "status": "test",
        "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'cmd.{0,5}(?:/c|/r)(?:\\\\s|)\"set\\\\s[a-zA-Z]{3,6}.*(?:\\\\{\\\\d\\\\}){1,}\\\\\\\\\"\\\\s+?-f(?:.*\\\\)){1,}.*\"')"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation Obfuscated IEX Invocation - PowerShell Module",
        "id": "2f211361-7dce-442d-b78a-c04039677378",
        "status": "test",
        "description": "Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block cited in the reference section below",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & (Payload.str.contains(r'\\\\$PSHome\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$PSHome\\\\[') | Payload.str.contains(r'\\\\$ShellId\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$ShellId\\\\[') | Payload.str.contains(r'\\\\$env:Public\\\\[\\\\s*\\\\d{1,3}\\\\s*\\\\]\\\\s*\\\\+\\\\s*\\\\$env:Public\\\\[') | Payload.str.contains(r'\\\\$env:ComSpec\\\\[(\\\\s*\\\\d{1,3}\\\\s*,){2}') | Payload.str.contains(r'\\\\*mdr\\\\*\\\\W\\\\s*\\\\)\\\\.Name') | Payload.str.contains(r'\\\\$VerbosePreference\\\\.ToString\\\\(') | Payload.str.contains(r'\\\\[String\\\\]\\\\s*\\\\$VerbosePreference'))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Computer Machine Password by PowerShell",
        "id": "e3818659-5016-4811-a73c-dde4679169d2",
        "status": "test",
        "description": "The Reset-ComputerMachinePassword cmdlet changes the computer account password that the computers use to authenticate to the domain controllers in the domain.\nYou can use it to reset the password of the local computer.\n",
        "tags": [
            "attack.initial-access",
            "attack.t1078"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & ContextInfo.str.contains(r'Reset-ComputerMachinePassword', case=False)"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious PowerShell Download - PoshModule",
        "id": "de41232e-12e8-49fa-86bc-c05c7e722df9",
        "status": "test",
        "description": "Detects suspicious PowerShell download command",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & ContextInfo.str.contains(r'System.Net.WebClient', case=False) & (ContextInfo.str.contains(r'.DownloadFile(', case=False) | ContextInfo.str.contains(r'.DownloadString(', case=False))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Malicious PowerShell Commandlets - PoshModule",
        "id": "7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c",
        "status": "test",
        "description": "Detects Commandlet names from well-known PowerShell exploitation frameworks",
        "tags": [
            "attack.execution",
            "attack.discovery",
            "attack.t1482",
            "attack.t1087",
            "attack.t1087.001",
            "attack.t1087.002",
            "attack.t1069.001",
            "attack.t1069.002",
            "attack.t1069",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & (Payload.str.contains(r'Add-Exfiltration', case=False) | Payload.str.contains(r'Add-Persistence', case=False) | Payload.str.contains(r'Add-RegBackdoor', case=False) | Payload.str.contains(r'Add-RemoteRegBackdoor', case=False) | Payload.str.contains(r'Add-ScrnSaveBackdoor', case=False) | Payload.str.contains(r'Check-VM', case=False) | Payload.str.contains(r'ConvertTo-Rc4ByteStream', case=False) | Payload.str.contains(r'Decrypt-Hash', case=False) | Payload.str.contains(r'Disable-ADIDNSNode', case=False) | Payload.str.contains(r'Disable-MachineAccount', case=False) | Payload.str.contains(r'Do-Exfiltration', case=False) | Payload.str.contains(r'Enable-ADIDNSNode', case=False) | Payload.str.contains(r'Enable-MachineAccount', case=False) | Payload.str.contains(r'Enabled-DuplicateToken', case=False) | Payload.str.contains(r'Exploit-Jboss', case=False) | Payload.str.contains(r'Export-ADR', case=False) | Payload.str.contains(r'Export-ADRCSV', case=False) | Payload.str.contains(r'Export-ADRExcel', case=False) | Payload.str.contains(r'Export-ADRHTML', case=False) | Payload.str.contains(r'Export-ADRJSON', case=False) | Payload.str.contains(r'Export-ADRXML', case=False) | Payload.str.contains(r'Find-Fruit', case=False) | Payload.str.contains(r'Find-GPOLocation', case=False) | Payload.str.contains(r'Find-TrustedDocuments', case=False) | Payload.str.contains(r'Get-ADIDNS', case=False) | Payload.str.contains(r'Get-ApplicationHost', case=False) | Payload.str.contains(r'Get-ChromeDump', case=False) | Payload.str.contains(r'Get-ClipboardContents', case=False) | Payload.str.contains(r'Get-FoxDump', case=False) | Payload.str.contains(r'Get-GPPPassword', case=False) | Payload.str.contains(r'Get-IndexedItem', case=False) | Payload.str.contains(r'Get-KerberosAESKey', case=False) | Payload.str.contains(r'Get-Keystrokes', case=False) | Payload.str.contains(r'Get-LSASecret', case=False) | Payload.str.contains(r'Get-MachineAccountAttribute', case=False) | Payload.str.contains(r'Get-MachineAccountCreator', case=False) | Payload.str.contains(r'Get-PassHashes', case=False) | Payload.str.contains(r'Get-RegAlwaysInstallElevated', case=False) | Payload.str.contains(r'Get-RegAutoLogon', case=False) | Payload.str.contains(r'Get-RemoteBootKey', case=False) | Payload.str.contains(r'Get-RemoteCachedCredential', case=False) | Payload.str.contains(r'Get-RemoteLocalAccountHash', case=False) | Payload.str.contains(r'Get-RemoteLSAKey', case=False) | Payload.str.contains(r'Get-RemoteMachineAccountHash', case=False) | Payload.str.contains(r'Get-RemoteNLKMKey', case=False) | Payload.str.contains(r'Get-RickAstley', case=False) | Payload.str.contains(r'Get-Screenshot', case=False) | Payload.str.contains(r'Get-SecurityPackages', case=False) | Payload.str.contains(r'Get-ServiceFilePermission', case=False) | Payload.str.contains(r'Get-ServicePermission', case=False) | Payload.str.contains(r'Get-ServiceUnquoted', case=False) | Payload.str.contains(r'Get-SiteListPassword', case=False) | Payload.str.contains(r'Get-System', case=False) | Payload.str.contains(r'Get-TimedScreenshot', case=False) | Payload.str.contains(r'Get-UnattendedInstallFile', case=False) | Payload.str.contains(r'Get-Unconstrained', case=False) | Payload.str.contains(r'Get-USBKeystrokes', case=False) | Payload.str.contains(r'Get-VaultCredential', case=False) | Payload.str.contains(r'Get-VulnAutoRun', case=False) | Payload.str.contains(r'Get-VulnSchTask', case=False) | Payload.str.contains(r'Grant-ADIDNSPermission', case=False) | Payload.str.contains(r'Gupt-Backdoor', case=False) | Payload.str.contains(r'HTTP-Login', case=False) | Payload.str.contains(r'Install-ServiceBinary', case=False) | Payload.str.contains(r'Install-SSP', case=False) | Payload.str.contains(r'Invoke-ACLScanner', case=False) | Payload.str.contains(r'Invoke-ADRecon', case=False) | Payload.str.contains(r'Invoke-ADSBackdoor', case=False) | Payload.str.contains(r'Invoke-AgentSmith', case=False) | Payload.str.contains(r'Invoke-AllChecks', case=False) | Payload.str.contains(r'Invoke-ARPScan', case=False) | Payload.str.contains(r'Invoke-AzureHound', case=False) | Payload.str.contains(r'Invoke-BackdoorLNK', case=False) | Payload.str.contains(r'Invoke-BadPotato', case=False) | Payload.str.contains(r'Invoke-BetterSafetyKatz', case=False) | Payload.str.contains(r'Invoke-BypassUAC', case=False) | Payload.str.contains(r'Invoke-Carbuncle', case=False) | Payload.str.contains(r'Invoke-Certify', case=False) | Payload.str.contains(r'Invoke-ConPtyShell', case=False) | Payload.str.contains(r'Invoke-CredentialInjection', case=False) | Payload.str.contains(r'Invoke-DAFT', case=False) | Payload.str.contains(r'Invoke-DCSync', case=False) | Payload.str.contains(r'Invoke-DinvokeKatz', case=False) | Payload.str.contains(r'Invoke-DllInjection', case=False) | Payload.str.contains(r'Invoke-DNSUpdate', case=False) | Payload.str.contains(r'Invoke-DomainPasswordSpray', case=False) | Payload.str.contains(r'Invoke-DowngradeAccount', case=False) | Payload.str.contains(r'Invoke-EgressCheck', case=False) | Payload.str.contains(r'Invoke-Eyewitness', case=False) | Payload.str.contains(r'Invoke-FakeLogonScreen', case=False) | Payload.str.contains(r'Invoke-Farmer', case=False) | Payload.str.contains(r'Invoke-Get-RBCD-Threaded', case=False) | Payload.str.contains(r'Invoke-Gopher', case=False) | Payload.str.contains(r'Invoke-Grouper', case=False) | Payload.str.contains(r'Invoke-HandleKatz', case=False) | Payload.str.contains(r'Invoke-ImpersonatedProcess', case=False) | Payload.str.contains(r'Invoke-ImpersonateSystem', case=False) | Payload.str.contains(r'Invoke-InteractiveSystemPowerShell', case=False) | Payload.str.contains(r'Invoke-Internalmonologue', case=False) | Payload.str.contains(r'Invoke-Inveigh', case=False) | Payload.str.contains(r'Invoke-InveighRelay', case=False) | Payload.str.contains(r'Invoke-KrbRelay', case=False) | Payload.str.contains(r'Invoke-LdapSignCheck', case=False) | Payload.str.contains(r'Invoke-Lockless', case=False) | Payload.str.contains(r'Invoke-MalSCCM', case=False) | Payload.str.contains(r'Invoke-Mimikatz', case=False) | Payload.str.contains(r'Invoke-Mimikittenz', case=False) | Payload.str.contains(r'Invoke-MITM6', case=False) | Payload.str.contains(r'Invoke-NanoDump', case=False) | Payload.str.contains(r'Invoke-NetRipper', case=False) | Payload.str.contains(r'Invoke-Nightmare', case=False) | Payload.str.contains(r'Invoke-NinjaCopy', case=False) | Payload.str.contains(r'Invoke-OfficeScrape', case=False) | Payload.str.contains(r'Invoke-OxidResolver', case=False) | Payload.str.contains(r'Invoke-P0wnedshell', case=False) | Payload.str.contains(r'Invoke-Paranoia', case=False) | Payload.str.contains(r'Invoke-PortScan', case=False) | Payload.str.contains(r'Invoke-PoshRatHttp', case=False) | Payload.str.contains(r'Invoke-PostExfil', case=False) | Payload.str.contains(r'Invoke-PowerDump', case=False) | Payload.str.contains(r'Invoke-PowerShellTCP', case=False) | Payload.str.contains(r'Invoke-PowerShellWMI', case=False) | Payload.str.contains(r'Invoke-PPLDump', case=False) | Payload.str.contains(r'Invoke-PsExec', case=False) | Payload.str.contains(r'Invoke-PSInject', case=False) | Payload.str.contains(r'Invoke-PsUaCme', case=False) | Payload.str.contains(r'Invoke-ReflectivePEInjection', case=False) | Payload.str.contains(r'Invoke-ReverseDNSLookup', case=False) | Payload.str.contains(r'Invoke-Rubeus', case=False) | Payload.str.contains(r'Invoke-RunAs', case=False) | Payload.str.contains(r'Invoke-SafetyKatz', case=False) | Payload.str.contains(r'Invoke-SauronEye', case=False) | Payload.str.contains(r'Invoke-SCShell', case=False) | Payload.str.contains(r'Invoke-Seatbelt', case=False) | Payload.str.contains(r'Invoke-ServiceAbuse', case=False) | Payload.str.contains(r'Invoke-ShadowSpray', case=False) | Payload.str.contains(r'Invoke-Sharp', case=False) | Payload.str.contains(r'Invoke-Shellcode', case=False) | Payload.str.contains(r'Invoke-SMBScanner', case=False) | Payload.str.contains(r'Invoke-Snaffler', case=False) | Payload.str.contains(r'Invoke-Spoolsample', case=False) | Payload.str.contains(r'Invoke-SpraySinglePassword', case=False) | Payload.str.contains(r'Invoke-SSHCommand', case=False) | Payload.str.contains(r'Invoke-StandIn', case=False) | Payload.str.contains(r'Invoke-StickyNotesExtract', case=False) | Payload.str.contains(r'Invoke-SystemCommand', case=False) | Payload.str.contains(r'Invoke-Tasksbackdoor', case=False) | Payload.str.contains(r'Invoke-Tater', case=False) | Payload.str.contains(r'Invoke-Thunderfox', case=False) | Payload.str.contains(r'Invoke-ThunderStruck', case=False) | Payload.str.contains(r'Invoke-TokenManipulation', case=False) | Payload.str.contains(r'Invoke-Tokenvator', case=False) | Payload.str.contains(r'Invoke-TotalExec', case=False) | Payload.str.contains(r'Invoke-UrbanBishop', case=False) | Payload.str.contains(r'Invoke-UserHunter', case=False) | Payload.str.contains(r'Invoke-VoiceTroll', case=False) | Payload.str.contains(r'Invoke-Whisker', case=False) | Payload.str.contains(r'Invoke-WinEnum', case=False) | Payload.str.contains(r'Invoke-winPEAS', case=False) | Payload.str.contains(r'Invoke-WireTap', case=False) | Payload.str.contains(r'Invoke-WmiCommand', case=False) | Payload.str.contains(r'Invoke-WMIExec', case=False) | Payload.str.contains(r'Invoke-WScriptBypassUAC', case=False) | Payload.str.contains(r'Invoke-Zerologon', case=False) | Payload.str.contains(r'MailRaider', case=False) | Payload.str.contains(r'New-ADIDNSNode', case=False) | Payload.str.contains(r'New-DNSRecordArray', case=False) | Payload.str.contains(r'New-HoneyHash', case=False) | Payload.str.contains(r'New-InMemoryModule', case=False) | Payload.str.contains(r'New-MachineAccount', case=False) | Payload.str.contains(r'New-SOASerialNumberArray', case=False) | Payload.str.contains(r'Out-Minidump', case=False) | Payload.str.contains(r'Port-Scan', case=False) | Payload.str.contains(r'PowerBreach', case=False) | Payload.str.contains(r'powercat ', case=False) | Payload.str.contains(r'PowerUp', case=False) | Payload.str.contains(r'PowerView', case=False) | Payload.str.contains(r'Remove-ADIDNSNode', case=False) | Payload.str.contains(r'Remove-MachineAccount', case=False) | Payload.str.contains(r'Remove-Update', case=False) | Payload.str.contains(r'Rename-ADIDNSNode', case=False) | Payload.str.contains(r'Revoke-ADIDNSPermission', case=False) | Payload.str.contains(r'Set-ADIDNSNode', case=False) | Payload.str.contains(r'Set-MacAttribute', case=False) | Payload.str.contains(r'Set-MachineAccountAttribute', case=False) | Payload.str.contains(r'Set-Wallpaper', case=False) | Payload.str.contains(r'Show-TargetScreen', case=False) | Payload.str.contains(r'Start-CaptureServer', case=False) | Payload.str.contains(r'Start-Dnscat2', case=False) | Payload.str.contains(r'Start-WebcamRecorder', case=False) | Payload.str.contains(r'Veeam-Get-Creds', case=False) | Payload.str.contains(r'VolumeShadowCopyTools', case=False))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious PowerShell Invocations - Specific - PowerShell Module",
        "id": "8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090",
        "status": "test",
        "description": "Detects suspicious PowerShell invocation command parameters",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & (ContextInfo.str.contains(r'-nop', case=False) & ContextInfo.str.contains(r' -w ', case=False) & ContextInfo.str.contains(r'hidden', case=False) & ContextInfo.str.contains(r' -c ', case=False) & ContextInfo.str.contains(r'[Convert]::FromBase64String', case=False) | ContextInfo.str.contains(r' -w ', case=False) & ContextInfo.str.contains(r'hidden', case=False) & ContextInfo.str.contains(r'-noni', case=False) & ContextInfo.str.contains(r'-nop', case=False) & ContextInfo.str.contains(r' -c ', case=False) & ContextInfo.str.contains(r'iex', case=False) & ContextInfo.str.contains(r'New-Object', case=False) | ContextInfo.str.contains(r' -w ', case=False) & ContextInfo.str.contains(r'hidden', case=False) & ContextInfo.str.contains(r'-ep', case=False) & ContextInfo.str.contains(r'bypass', case=False) & ContextInfo.str.contains(r'-Enc', case=False) | ContextInfo.str.contains(r'powershell', case=False) & ContextInfo.str.contains(r'reg', case=False) & ContextInfo.str.contains(r'add', case=False) & ContextInfo.str.contains(r'HKCU\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run', case=False) | ContextInfo.str.contains(r'bypass', case=False) & ContextInfo.str.contains(r'-noprofile', case=False) & ContextInfo.str.contains(r'-windowstyle', case=False) & ContextInfo.str.contains(r'hidden', case=False) & ContextInfo.str.contains(r'new-object', case=False) & ContextInfo.str.contains(r'system.net.webclient', case=False) & ContextInfo.str.contains(r'.download', case=False) | ContextInfo.str.contains(r'iex', case=False) & ContextInfo.str.contains(r'New-Object', case=False) & ContextInfo.str.contains(r'Net.WebClient', case=False) & ContextInfo.str.contains(r'.Download', case=False)) & ~ (ContextInfo.str.contains(r'(New-Object System.Net.WebClient).DownloadString(\\'https://community.chocolatey.org/install.ps1', case=False) | ContextInfo.str.contains(r'Write-ChocolateyWarning', case=False))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Use Get-NetTCPConnection - PowerShell Module",
        "id": "aff815cc-e400-4bf0-a47a-5d8a2407d4e1",
        "status": "test",
        "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.",
        "tags": [
            "attack.discovery",
            "attack.t1049"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & ContextInfo.str.contains(r'Get-NetTCPConnection', case=False)"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Decompress Commands",
        "id": "1ddc1472-8e52-4f7d-9f11-eab14fc171f5",
        "status": "test",
        "description": "A General detection for specific decompress commands in PowerShell logs. This could be an adversary decompressing files.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1140"
        ],
        "level": "informational",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'Expand-Archive', case=False)"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential RemoteFXvGPUDisablement.EXE Abuse - PowerShell Module",
        "id": "38a7625e-b2cb-485d-b83d-aff137d859f4",
        "status": "test",
        "description": "Detects PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'ModuleContents=function Get-VMRemoteFXPhysicalVideoAdapter {', case=False)"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Bad Opsec Powershell Code Artifacts",
        "id": "8d31a8ce-46b5-4dd6-bdc3-680931f1db86",
        "status": "test",
        "description": "focuses on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including\nCobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads\nthat often undergo minimal changes by attackers due to bad opsec.\n",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "critical",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & (Payload.str.contains(r'$DoIt', case=False) | Payload.str.contains(r'harmj0y', case=False) | Payload.str.contains(r'mattifestation', case=False) | Payload.str.contains(r'_RastaMouse', case=False) | Payload.str.contains(r'tifkin_', case=False) | Payload.str.contains(r'0xdeadbeef', case=False))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "AD Groups Or Users Enumeration Using PowerShell - PoshModule",
        "id": "815bfc17-7fc6-4908-a55e-2f37b98cedb4",
        "status": "test",
        "description": "Adversaries may attempt to find domain-level groups and permission settings.\nThe knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n",
        "tags": [
            "attack.discovery",
            "attack.t1069.001"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & (Payload.str.contains(r'get-ADPrincipalGroupMembership', case=False) | ContextInfo.str.contains(r'get-ADPrincipalGroupMembership', case=False) | Payload.str.contains(r'get-aduser', case=False) & Payload.str.contains(r'-f ', case=False) & Payload.str.contains(r'-pr ', case=False) & Payload.str.contains(r'DoesNotRequirePreAuth', case=False) | ContextInfo.str.contains(r'get-aduser', case=False) & ContextInfo.str.contains(r'-f ', case=False) & ContextInfo.str.contains(r'-pr ', case=False) & ContextInfo.str.contains(r'DoesNotRequirePreAuth', case=False))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use Clip - PowerShell Module",
        "id": "ebdf49d8-b89c-46c9-8fdf-2c308406f6bd",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'(?i)echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?)')"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Clear PowerShell History - PowerShell Module",
        "id": "f99276ad-d122-4989-a09a-d00904a5f9d2",
        "status": "test",
        "description": "Detects keywords that could indicate clearing PowerShell history",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.003"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & (Payload.str.contains(r'Set-PSReadlineOption', case=False) & Payload.str.contains(r'\u2013HistorySaveStyle', case=False) & Payload.str.contains(r'SaveNothing', case=False) | Payload.str.contains(r'Set-PSReadlineOption', case=False) & Payload.str.contains(r'-HistorySaveStyle', case=False) & Payload.str.contains(r'SaveNothing', case=False) | (Payload.str.contains(r'del', case=False) | Payload.str.contains(r'Remove-Item', case=False) | Payload.str.contains(r'rm', case=False)) & Payload.str.contains(r'(Get-PSReadlineOption).HistorySavePath', case=False))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use Rundll32 - PowerShell Module",
        "id": "88a22f69-62f9-4b8a-aa00-6b0212f2f05a",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use Rundll32 in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'&&', case=False) & Payload.str.contains(r'rundll32', case=False) & Payload.str.contains(r'shell32.dll', case=False) & Payload.str.contains(r'shellexec_rundll', case=False) & (Payload.str.contains(r'value', case=False) | Payload.str.contains(r'invoke', case=False) | Payload.str.contains(r'comspec', case=False) | Payload.str.contains(r'iex', case=False))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "HackTool - Evil-WinRm Execution - PowerShell Module",
        "id": "9fe55ea2-4cd6-4491-8a54-dd6871651b51",
        "status": "test",
        "description": "Detects the execution of Evil-WinRM via PowerShell Module logs by leveraging the hardcoded strings inside the utility.\n",
        "tags": [
            "attack.lateral-movement"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & (ContextInfo.str.contains(r':\\\\Windows\\\\System32\\\\wsmprovhost.exe', case=False) | ContextInfo.str.contains(r':\\\\Windows\\\\SysWOW64\\\\wsmprovhost.exe', case=False)) & (Payload.str.contains(r'value=\"(get-location).path', case=False) | Payload.str.contains(r'*value=\"(get-item*).length*') | Payload.str.contains(r'Invoke-Binary ', case=False) | Payload.str.contains(r'*Donut-Loader -process_id*-donutfile*') | Payload.str.contains(r'Bypass-4MSI', case=False) | Payload.str.contains(r'*IEX ([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($a))).replace(\\'***\\',\\'\\')*') | Payload.str.contains(r'$servicios = Get-ItemProperty \"registry::HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\\"', case=False) & Payload.str.contains(r'Where-Object {$_.imagepath -notmatch \"system\" -and $_.imagepath -ne $null } | Select-Object pschildname,imagepath', case=False) | Payload.str.contains(r'$a +=  \\\\\"$($_.FullName.Replace(\\'\\\\\\',\\'/\\'))/\\\\\"}else{  $a += \\\\\"$($_.FullName.Replace(\\'\\\\\\', \\'/\\'))\\\\\" }', case=False) & Payload.str.contains(r'$a=@();$', case=False))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Zip A Folder With PowerShell For Staging In Temp  - PowerShell Module",
        "id": "daf7eb81-35fd-410d-9d7a-657837e602bb",
        "status": "test",
        "description": "Detects PowerShell scripts that make use of the \"Compress-Archive\" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.\nAn adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.\n",
        "tags": [
            "attack.collection",
            "attack.t1074.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & ContextInfo.str.contains(r'*Compress-Archive -Path*-DestinationPath $env:TEMP*') & ContextInfo.str.contains(r'*Compress-Archive -Path*-DestinationPath*\\\\AppData\\\\Local\\\\Temp\\\\*') & ContextInfo.str.contains(r'*Compress-Archive -Path*-DestinationPath*:\\\\Windows\\\\Temp\\\\*')"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation RUNDLL LAUNCHER - PowerShell Module",
        "id": "a23791fe-8846-485a-b16b-ca691e1b03d4",
        "status": "test",
        "description": "Detects Obfuscated Powershell via RUNDLL LAUNCHER",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'rundll32.exe', case=False) & Payload.str.contains(r'shell32.dll', case=False) & Payload.str.contains(r'shellexec_rundll', case=False) & Payload.str.contains(r'powershell', case=False)"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "PowerShell Get Clipboard",
        "id": "4cbd4f12-2e22-43e3-882f-bff3247ffb78",
        "status": "test",
        "description": "A General detection for the Get-Clipboard commands in PowerShell logs. This could be an adversary capturing clipboard contents.",
        "tags": [
            "attack.collection",
            "attack.t1115"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'Get-Clipboard', case=False)"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation COMPRESS OBFUSCATION - PowerShell Module",
        "id": "7034cbbb-cc55-4dc2-8dad-36c0b942e8f1",
        "status": "test",
        "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'new-object', case=False) & Payload.str.contains(r'text.encoding]::ascii', case=False) & (Payload.str.contains(r'system.io.compression.deflatestream', case=False) | Payload.str.contains(r'system.io.streamreader', case=False)) & Payload.str.contains(r'readtoend', case=False)"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Potential Active Directory Enumeration Using AD Module - PsModule",
        "id": "74176142-4684-4d8a-8b0a-713257e7df8e",
        "status": "test",
        "description": "Detects usage of the \"Import-Module\" cmdlet to load the \"Microsoft.ActiveDirectory.Management.dl\" DLL. Which is often used by attackers to perform AD enumeration.",
        "tags": [
            "attack.reconnaissance",
            "attack.discovery",
            "attack.impact"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & (Payload.str.contains(r'Import-Module ', case=False) | Payload.str.contains(r'ipmo ', case=False)) & Payload.str.contains(r'Microsoft.ActiveDirectory.Management.dll', case=False)"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Get Information for SMB Share - PowerShell Module",
        "id": "6942bd25-5970-40ab-af49-944247103358",
        "status": "test",
        "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and\nto identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n",
        "tags": [
            "attack.discovery",
            "attack.t1069.001"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & (Payload.str.contains(r'get-smbshare', case=False) | ContextInfo.str.contains(r'get-smbshare', case=False))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Remote PowerShell Session (PS Module)",
        "id": "96b9f619-aa91-478f-bacb-c3e50f8df575",
        "status": "test",
        "description": "Detects remote PowerShell sessions",
        "tags": [
            "attack.execution",
            "attack.t1059.001",
            "attack.lateral-movement",
            "attack.t1021.006"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & ContextInfo.str.contains(r' = ServerRemoteHost ', case=False) & ContextInfo.str.contains(r'wsmprovhost.exe', case=False) & ~ ContextInfo.str.contains(r'\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\Modules\\\\Microsoft.PowerShell.Archive\\\\Microsoft.PowerShell.Archive.psm1', case=False)"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Use MSHTA - PowerShell Module",
        "id": "07ad2ea8-6a55-4ac6-bf3e-91b8e59676eb",
        "status": "test",
        "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'set', case=False) & Payload.str.contains(r'&&', case=False) & Payload.str.contains(r'mshta', case=False) & Payload.str.contains(r'vbscript:createobject', case=False) & Payload.str.contains(r'.run', case=False) & Payload.str.contains(r'(window.close)', case=False)"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Get-ADDBAccount Usage",
        "id": "b140afd9-474b-4072-958e-2ebb435abd68",
        "status": "test",
        "description": "Detects suspicious invocation of the Get-ADDBAccount script that reads from a ntds.dit file and may be used to get access to credentials without using any credential dumpers",
        "tags": [
            "attack.credential-access",
            "attack.t1003.003"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'Get-ADDBAccount', case=False) & Payload.str.contains(r'BootKey ', case=False) & Payload.str.contains(r'DatabasePath ', case=False)"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Alternate PowerShell Hosts - PowerShell Module",
        "id": "64e8e417-c19a-475a-8d19-98ea705394cc",
        "status": "test",
        "description": "Detects alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & ContextInfo.str.contains(r'', case=False) & ~ (ContextInfo.str.contains(r'= powershell', case=False) | ContextInfo.str.contains(r'= C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell', case=False) | ContextInfo.str.contains(r'= C:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell', case=False) | ContextInfo.str.contains(r'= C:/Windows/System32/WindowsPowerShell/v1.0/powershell', case=False) | ContextInfo.str.contains(r'= C:/Windows/SysWOW64/WindowsPowerShell/v1.0/powershell', case=False) | ContextInfo.str.contains(r'= C:\\\\WINDOWS\\\\System32\\\\sdiagnhost.exe -Embedding', case=False) | ContextInfo.str.contains(r'ConfigSyncRun.exe', case=False) | ContextInfo.str.contains(r'C:\\\\Windows\\\\system32\\\\dsac.exe', case=False) | ContextInfo.str.contains(r'C:\\\\Windows\\\\system32\\\\wsmprovhost.exe -Embedding', case=False) | Payload.str.contains(r'Update-Help', case=False) | Payload.str.contains(r'Failed to update Help for the module', case=False))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation STDIN+ Launcher - PowerShell Module",
        "id": "9ac8b09b-45de-4a07-9da1-0de8c09304a3",
        "status": "test",
        "description": "Detects Obfuscated use of stdin to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'cmd.{0,5}(?:/c|/r).+powershell.+(?:\\\\$\\\\{?input\\\\}?|noexit).+\"')"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation Via Stdin - PowerShell Module",
        "id": "c72aca44-8d52-45ad-8f81-f96c4d3c755e",
        "status": "test",
        "description": "Detects Obfuscated Powershell via Stdin in Scripts",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'(?i)(set).*&&\\\\s?set.*(environment|invoke|\\\\$?\\\\{?input).*&&.*\"')"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "SyncAppvPublishingServer Bypass Powershell Restriction - PS Module",
        "id": "fe5ce7eb-dad8-467c-84a9-31ec23bd644a",
        "status": "test",
        "description": "Detects SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & ContextInfo.str.contains(r'SyncAppvPublishingServer.exe', case=False)"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious PowerShell Invocations - Generic - PowerShell Module",
        "id": "bbb80e91-5746-4fbe-8898-122e2cafdbf4",
        "status": "test",
        "description": "Detects suspicious PowerShell invocation command parameters",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & (ContextInfo.str.contains(r' -enc ', case=False) | ContextInfo.str.contains(r' -EncodedCommand ', case=False) | ContextInfo.str.contains(r' -ec ', case=False)) & (ContextInfo.str.contains(r' -w hidden ', case=False) | ContextInfo.str.contains(r' -window hidden ', case=False) | ContextInfo.str.contains(r' -windowstyle hidden ', case=False) | ContextInfo.str.contains(r' -w 1 ', case=False)) & (ContextInfo.str.contains(r' -noni ', case=False) | ContextInfo.str.contains(r' -noninteractive ', case=False))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation CLIP+ Launcher - PowerShell Module",
        "id": "a136cde0-61ad-4a61-9b82-8dc490e60dd2",
        "status": "test",
        "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'cmd.{0,5}(?:/c|/r).+clip(?:\\\\.exe)?.{0,4}&&.+clipboard]::\\\\(\\\\s\\\\\\\\\"\\\\{\\\\d\\\\}.+-f.+\"')"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Get Local Groups Information",
        "id": "cef24b90-dddc-4ae1-a09a-8764872f69fc",
        "status": "test",
        "description": "Adversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n",
        "tags": [
            "attack.discovery",
            "attack.t1069.001"
        ],
        "level": "low",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & (Payload.str.contains(r'get-localgroup', case=False) | Payload.str.contains(r'Get-LocalGroupMember', case=False) | ContextInfo.str.contains(r'get-localgroup', case=False) | ContextInfo.str.contains(r'Get-LocalGroupMember', case=False) | Payload.str.contains(r'Get-WMIObject', case=False) & Payload.str.contains(r'Win32_Group', case=False) | ContextInfo.str.contains(r'Get-WMIObject', case=False) & ContextInfo.str.contains(r'Win32_Group', case=False))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Malicious PowerShell Scripts - PoshModule",
        "id": "41025fd7-0466-4650-a813-574aaacbe7f4",
        "status": "test",
        "description": "Detects the execution of known offensive powershell scripts used for exploitation or reconnaissance",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & (ContextInfo.str.contains(r'Add-ConstrainedDelegationBackdoor.ps1', case=False) | ContextInfo.str.contains(r'Add-Exfiltration.ps1', case=False) | ContextInfo.str.contains(r'Add-Persistence.ps1', case=False) | ContextInfo.str.contains(r'Add-RegBackdoor.ps1', case=False) | ContextInfo.str.contains(r'Add-RemoteRegBackdoor.ps1', case=False) | ContextInfo.str.contains(r'Add-ScrnSaveBackdoor.ps1', case=False) | ContextInfo.str.contains(r'Check-VM.ps1', case=False) | ContextInfo.str.contains(r'ConvertTo-ROT13.ps1', case=False) | ContextInfo.str.contains(r'Copy-VSS.ps1', case=False) | ContextInfo.str.contains(r'Create-MultipleSessions.ps1', case=False) | ContextInfo.str.contains(r'DNS_TXT_Pwnage.ps1', case=False) | ContextInfo.str.contains(r'dnscat2.ps1', case=False) | ContextInfo.str.contains(r'Do-Exfiltration.ps1', case=False) | ContextInfo.str.contains(r'DomainPasswordSpray.ps1', case=False) | ContextInfo.str.contains(r'Download_Execute.ps1', case=False) | ContextInfo.str.contains(r'Download-Execute-PS.ps1', case=False) | ContextInfo.str.contains(r'Enabled-DuplicateToken.ps1', case=False) | ContextInfo.str.contains(r'Enable-DuplicateToken.ps1', case=False) | ContextInfo.str.contains(r'Execute-Command-MSSQL.ps1', case=False) | ContextInfo.str.contains(r'Execute-DNSTXT-Code.ps1', case=False) | ContextInfo.str.contains(r'Execute-OnTime.ps1', case=False) | ContextInfo.str.contains(r'ExetoText.ps1', case=False) | ContextInfo.str.contains(r'Exploit-Jboss.ps1', case=False) | ContextInfo.str.contains(r'Find-AVSignature.ps1', case=False) | ContextInfo.str.contains(r'Find-Fruit.ps1', case=False) | ContextInfo.str.contains(r'Find-GPOLocation.ps1', case=False) | ContextInfo.str.contains(r'Find-TrustedDocuments.ps1', case=False) | ContextInfo.str.contains(r'FireBuster.ps1', case=False) | ContextInfo.str.contains(r'FireListener.ps1', case=False) | ContextInfo.str.contains(r'Get-ApplicationHost.ps1', case=False) | ContextInfo.str.contains(r'Get-ChromeDump.ps1', case=False) | ContextInfo.str.contains(r'Get-ClipboardContents.ps1', case=False) | ContextInfo.str.contains(r'Get-ComputerDetail.ps1', case=False) | ContextInfo.str.contains(r'Get-FoxDump.ps1', case=False) | ContextInfo.str.contains(r'Get-GPPAutologon.ps1', case=False) | ContextInfo.str.contains(r'Get-GPPPassword.ps1', case=False) | ContextInfo.str.contains(r'Get-IndexedItem.ps1', case=False) | ContextInfo.str.contains(r'Get-Keystrokes.ps1', case=False) | ContextInfo.str.contains(r'Get-LSASecret.ps1', case=False) | ContextInfo.str.contains(r'Get-MicrophoneAudio.ps1', case=False) | ContextInfo.str.contains(r'Get-PassHashes.ps1', case=False) | ContextInfo.str.contains(r'Get-PassHints.ps1', case=False) | ContextInfo.str.contains(r'Get-RegAlwaysInstallElevated.ps1', case=False) | ContextInfo.str.contains(r'Get-RegAutoLogon.ps1', case=False) | ContextInfo.str.contains(r'Get-RickAstley.ps1', case=False) | ContextInfo.str.contains(r'Get-Screenshot.ps1', case=False) | ContextInfo.str.contains(r'Get-SecurityPackages.ps1', case=False) | ContextInfo.str.contains(r'Get-ServiceFilePermission.ps1', case=False) | ContextInfo.str.contains(r'Get-ServicePermission.ps1', case=False) | ContextInfo.str.contains(r'Get-ServiceUnquoted.ps1', case=False) | ContextInfo.str.contains(r'Get-SiteListPassword.ps1', case=False) | ContextInfo.str.contains(r'Get-System.ps1', case=False) | ContextInfo.str.contains(r'Get-TimedScreenshot.ps1', case=False) | ContextInfo.str.contains(r'Get-UnattendedInstallFile.ps1', case=False) | ContextInfo.str.contains(r'Get-Unconstrained.ps1', case=False) | ContextInfo.str.contains(r'Get-USBKeystrokes.ps1', case=False) | ContextInfo.str.contains(r'Get-VaultCredential.ps1', case=False) | ContextInfo.str.contains(r'Get-VulnAutoRun.ps1', case=False) | ContextInfo.str.contains(r'Get-VulnSchTask.ps1', case=False) | ContextInfo.str.contains(r'Get-WebConfig.ps1', case=False) | ContextInfo.str.contains(r'Get-WebCredentials.ps1', case=False) | ContextInfo.str.contains(r'Get-WLAN-Keys.ps1', case=False) | ContextInfo.str.contains(r'Gupt-Backdoor.ps1', case=False) | ContextInfo.str.contains(r'HTTP-Backdoor.ps1', case=False) | ContextInfo.str.contains(r'HTTP-Login.ps1', case=False) | ContextInfo.str.contains(r'Install-ServiceBinary.ps1', case=False) | ContextInfo.str.contains(r'Install-SSP.ps1', case=False) | ContextInfo.str.contains(r'Invoke-ACLScanner.ps1', case=False) | ContextInfo.str.contains(r'Invoke-ADSBackdoor.ps1', case=False) | ContextInfo.str.contains(r'Invoke-AmsiBypass.ps1', case=False) | ContextInfo.str.contains(r'Invoke-ARPScan.ps1', case=False) | ContextInfo.str.contains(r'Invoke-BackdoorLNK.ps1', case=False) | ContextInfo.str.contains(r'Invoke-BadPotato.ps1', case=False) | ContextInfo.str.contains(r'Invoke-BetterSafetyKatz.ps1', case=False) | ContextInfo.str.contains(r'Invoke-BruteForce.ps1', case=False) | ContextInfo.str.contains(r'Invoke-BypassUAC.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Carbuncle.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Certify.ps1', case=False) | ContextInfo.str.contains(r'Invoke-ConPtyShell.ps1', case=False) | ContextInfo.str.contains(r'Invoke-CredentialInjection.ps1', case=False) | ContextInfo.str.contains(r'Invoke-CredentialsPhish.ps1', case=False) | ContextInfo.str.contains(r'Invoke-DAFT.ps1', case=False) | ContextInfo.str.contains(r'Invoke-DCSync.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Decode.ps1', case=False) | ContextInfo.str.contains(r'Invoke-DinvokeKatz.ps1', case=False) | ContextInfo.str.contains(r'Invoke-DllInjection.ps1', case=False) | ContextInfo.str.contains(r'Invoke-DowngradeAccount.ps1', case=False) | ContextInfo.str.contains(r'Invoke-EgressCheck.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Encode.ps1', case=False) | ContextInfo.str.contains(r'Invoke-EventViewer.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Eyewitness.ps1', case=False) | ContextInfo.str.contains(r'Invoke-FakeLogonScreen.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Farmer.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Get-RBCD-Threaded.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Gopher.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Grouper2.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Grouper3.ps1', case=False) | ContextInfo.str.contains(r'Invoke-HandleKatz.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Interceptor.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Internalmonologue.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Inveigh.ps1', case=False) | ContextInfo.str.contains(r'Invoke-InveighRelay.ps1', case=False) | ContextInfo.str.contains(r'Invoke-JSRatRegsvr.ps1', case=False) | ContextInfo.str.contains(r'Invoke-JSRatRundll.ps1', case=False) | ContextInfo.str.contains(r'Invoke-KrbRelay.ps1', case=False) | ContextInfo.str.contains(r'Invoke-KrbRelayUp.ps1', case=False) | ContextInfo.str.contains(r'Invoke-LdapSignCheck.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Lockless.ps1', case=False) | ContextInfo.str.contains(r'Invoke-MalSCCM.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Mimikatz.ps1', case=False) | ContextInfo.str.contains(r'Invoke-MimikatzWDigestDowngrade.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Mimikittenz.ps1', case=False) | ContextInfo.str.contains(r'Invoke-MITM6.ps1', case=False) | ContextInfo.str.contains(r'Invoke-NanoDump.ps1', case=False) | ContextInfo.str.contains(r'Invoke-NetRipper.ps1', case=False) | ContextInfo.str.contains(r'Invoke-NetworkRelay.ps1', case=False) | ContextInfo.str.contains(r'Invoke-NinjaCopy.ps1', case=False) | ContextInfo.str.contains(r'Invoke-OxidResolver.ps1', case=False) | ContextInfo.str.contains(r'Invoke-P0wnedshell.ps1', case=False) | ContextInfo.str.contains(r'Invoke-P0wnedshellx86.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Paranoia.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PortScan.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PoshRatHttp.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PoshRatHttps.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PostExfil.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PowerDump.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PowerShellIcmp.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PowerShellTCP.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PowerShellTcpOneLine.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PowerShellTcpOneLineBind.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PowerShellUdp.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PowerShellUdpOneLine.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PowerShellWMI.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PowerThIEf.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PPLDump.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Prasadhak.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PsExec.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PsGcat.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PsGcatAgent.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PSInject.ps1', case=False) | ContextInfo.str.contains(r'Invoke-PsUaCme.ps1', case=False) | ContextInfo.str.contains(r'Invoke-ReflectivePEInjection.ps1', case=False) | ContextInfo.str.contains(r'Invoke-ReverseDNSLookup.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Rubeus.ps1', case=False) | ContextInfo.str.contains(r'Invoke-RunAs.ps1', case=False) | ContextInfo.str.contains(r'Invoke-SafetyKatz.ps1', case=False) | ContextInfo.str.contains(r'Invoke-SauronEye.ps1', case=False) | ContextInfo.str.contains(r'Invoke-SCShell.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Seatbelt.ps1', case=False) | ContextInfo.str.contains(r'Invoke-ServiceAbuse.ps1', case=False) | ContextInfo.str.contains(r'Invoke-SessionGopher.ps1', case=False) | ContextInfo.str.contains(r'Invoke-ShellCode.ps1', case=False) | ContextInfo.str.contains(r'Invoke-SMBScanner.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Snaffler.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Spoolsample.ps1', case=False) | ContextInfo.str.contains(r'Invoke-SSHCommand.ps1', case=False) | ContextInfo.str.contains(r'Invoke-SSIDExfil.ps1', case=False) | ContextInfo.str.contains(r'Invoke-StandIn.ps1', case=False) | ContextInfo.str.contains(r'Invoke-StickyNotesExtract.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Tater.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Thunderfox.ps1', case=False) | ContextInfo.str.contains(r'Invoke-ThunderStruck.ps1', case=False) | ContextInfo.str.contains(r'Invoke-TokenManipulation.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Tokenvator.ps1', case=False) | ContextInfo.str.contains(r'Invoke-TotalExec.ps1', case=False) | ContextInfo.str.contains(r'Invoke-UrbanBishop.ps1', case=False) | ContextInfo.str.contains(r'Invoke-UserHunter.ps1', case=False) | ContextInfo.str.contains(r'Invoke-VoiceTroll.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Whisker.ps1', case=False) | ContextInfo.str.contains(r'Invoke-WinEnum.ps1', case=False) | ContextInfo.str.contains(r'Invoke-winPEAS.ps1', case=False) | ContextInfo.str.contains(r'Invoke-WireTap.ps1', case=False) | ContextInfo.str.contains(r'Invoke-WmiCommand.ps1', case=False) | ContextInfo.str.contains(r'Invoke-WScriptBypassUAC.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Zerologon.ps1', case=False) | ContextInfo.str.contains(r'Keylogger.ps1', case=False) | ContextInfo.str.contains(r'MailRaider.ps1', case=False) | ContextInfo.str.contains(r'New-HoneyHash.ps1', case=False) | ContextInfo.str.contains(r'OfficeMemScraper.ps1', case=False) | ContextInfo.str.contains(r'Offline_Winpwn.ps1', case=False) | ContextInfo.str.contains(r'Out-CHM.ps1', case=False) | ContextInfo.str.contains(r'Out-DnsTxt.ps1', case=False) | ContextInfo.str.contains(r'Out-Excel.ps1', case=False) | ContextInfo.str.contains(r'Out-HTA.ps1', case=False) | ContextInfo.str.contains(r'Out-Java.ps1', case=False) | ContextInfo.str.contains(r'Out-JS.ps1', case=False) | ContextInfo.str.contains(r'Out-Minidump.ps1', case=False) | ContextInfo.str.contains(r'Out-RundllCommand.ps1', case=False) | ContextInfo.str.contains(r'Out-SCF.ps1', case=False) | ContextInfo.str.contains(r'Out-SCT.ps1', case=False) | ContextInfo.str.contains(r'Out-Shortcut.ps1', case=False) | ContextInfo.str.contains(r'Out-WebQuery.ps1', case=False) | ContextInfo.str.contains(r'Out-Word.ps1', case=False) | ContextInfo.str.contains(r'Parse_Keys.ps1', case=False) | ContextInfo.str.contains(r'Port-Scan.ps1', case=False) | ContextInfo.str.contains(r'PowerBreach.ps1', case=False) | ContextInfo.str.contains(r'powercat.ps1', case=False) | ContextInfo.str.contains(r'PowerRunAsSystem.psm1', case=False) | ContextInfo.str.contains(r'PowerSharpPack.ps1', case=False) | ContextInfo.str.contains(r'PowerUp.ps1', case=False) | ContextInfo.str.contains(r'PowerUpSQL.ps1', case=False) | ContextInfo.str.contains(r'PowerView.ps1', case=False) | ContextInfo.str.contains(r'PSAsyncShell.ps1', case=False) | ContextInfo.str.contains(r'RemoteHashRetrieval.ps1', case=False) | ContextInfo.str.contains(r'Remove-Persistence.ps1', case=False) | ContextInfo.str.contains(r'Remove-PoshRat.ps1', case=False) | ContextInfo.str.contains(r'Remove-Update.ps1', case=False) | ContextInfo.str.contains(r'Run-EXEonRemote.ps1', case=False) | ContextInfo.str.contains(r'Schtasks-Backdoor.ps1', case=False) | ContextInfo.str.contains(r'Set-DCShadowPermissions.ps1', case=False) | ContextInfo.str.contains(r'Set-MacAttribute.ps1', case=False) | ContextInfo.str.contains(r'Set-RemotePSRemoting.ps1', case=False) | ContextInfo.str.contains(r'Set-RemoteWMI.ps1', case=False) | ContextInfo.str.contains(r'Set-Wallpaper.ps1', case=False) | ContextInfo.str.contains(r'Show-TargetScreen.ps1', case=False) | ContextInfo.str.contains(r'Speak.ps1', case=False) | ContextInfo.str.contains(r'Start-CaptureServer.ps1', case=False) | ContextInfo.str.contains(r'Start-WebcamRecorder.ps1', case=False) | ContextInfo.str.contains(r'StringToBase64.ps1', case=False) | ContextInfo.str.contains(r'TexttoExe.ps1', case=False) | ContextInfo.str.contains(r'Veeam-Get-Creds.ps1', case=False) | ContextInfo.str.contains(r'VolumeShadowCopyTools.ps1', case=False) | ContextInfo.str.contains(r'WinPwn.ps1', case=False) | ContextInfo.str.contains(r'WSUSpendu.ps1', case=False) | ContextInfo.str.contains(r'Invoke-Sharp', case=False) & ContextInfo.str.contains(r'.ps1', case=False))"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - PowerShell Module",
        "id": "f3c89218-8c3d-4ba9-9974-f1d8e6a1b4a6",
        "status": "test",
        "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "(Channel==['Microsoft-Windows-PowerShell/Operational', 'PowerShellCore/Operational']) & EventID==4103 & Payload.str.contains(r'(?i)&&set.*(\\\\{\\\\d\\\\}){2,}\\\\\\\\\"\\\\s+?-f.*&&.*cmd.*/c')"
        ],
        "logsource": {
            "category": "ps_module",
            "product": "windows",
            "service": "powershell"
        }
    },
    {
        "title": "Suspicious Appended Extension",
        "id": "e3f673b3-65d1-4d80-9146-466f8b63fa99",
        "status": "test",
        "description": "Detects file renames where the target filename uses an uncommon double extension. Could indicate potential ransomware activity renaming files and adding a custom extension to the encrypted files, such as \".jpg.crypted\", \".docx.locky\", etc.",
        "tags": [
            "attack.impact",
            "attack.t1486"
        ],
        "level": "medium",
        "rule": [
            "(SourceFilename.str.contains(r'.doc', case=False) | SourceFilename.str.contains(r'.docx', case=False) | SourceFilename.str.contains(r'.jpeg', case=False) | SourceFilename.str.contains(r'.jpg', case=False) | SourceFilename.str.contains(r'.lnk', case=False) | SourceFilename.str.contains(r'.pdf', case=False) | SourceFilename.str.contains(r'.png', case=False) | SourceFilename.str.contains(r'.pst', case=False) | SourceFilename.str.contains(r'.rtf', case=False) | SourceFilename.str.contains(r'.xls', case=False) | SourceFilename.str.contains(r'.xlsx', case=False)) & (TargetFilename.str.contains(r'.doc.', case=False) | TargetFilename.str.contains(r'.docx.', case=False) | TargetFilename.str.contains(r'.jpeg.', case=False) | TargetFilename.str.contains(r'.jpg.', case=False) | TargetFilename.str.contains(r'.lnk.', case=False) | TargetFilename.str.contains(r'.pdf.', case=False) | TargetFilename.str.contains(r'.png.', case=False) | TargetFilename.str.contains(r'.pst.', case=False) | TargetFilename.str.contains(r'.rtf.', case=False) | TargetFilename.str.contains(r'.xls.', case=False) | TargetFilename.str.contains(r'.xlsx.', case=False)) & ~ (TargetFilename.str.contains(r'.backup', case=False) | TargetFilename.str.contains(r'.bak', case=False) | TargetFilename.str.contains(r'.old', case=False) | TargetFilename.str.contains(r'.orig', case=False) | TargetFilename.str.contains(r'.temp', case=False) | TargetFilename.str.contains(r'.tmp', case=False)) & ~ (TargetFilename.str.contains(r':\\\\ProgramData\\\\Anaconda3\\\\', case=False) & TargetFilename.str.contains(r'.c~', case=False))"
        ],
        "logsource": {
            "category": "file_rename",
            "product": "windows",
            "definition": "Requirements: Microsoft-Windows-Kernel-File Provider with at least the KERNEL_FILE_KEYWORD_RENAME_SETLINK_PATH keyword",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/file/file_rename/file_rename_win_ransomware.yml"
        }
    },
    {
        "title": "Potentially Suspicious Self Extraction Directive File Created",
        "id": "ab90dab8-c7da-4010-9193-563528cfa347",
        "status": "test",
        "description": "Detects the creation of a binary file with the \".sed\" extension. The \".sed\" extension stand for Self Extraction Directive files.\nThese files are used by the \"iexpress.exe\" utility in order to create self extracting packages.\nAttackers were seen abusing this utility and creating PE files with embedded \".sed\" entries.\nUsually \".sed\" files are simple ini files and not PE binaries.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "TargetFilename.str.contains(r'.sed', case=False)"
        ],
        "logsource": {
            "category": "file_executable_detected",
            "product": "windows",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/file/file_executable_detected/file_executable_detected_win_susp_embeded_sed_file.yml"
        }
    },
    {
        "title": "Suspicious File Created Via OneNote Application",
        "id": "fcc6d700-68d9-4241-9a1a-06874d621b06",
        "status": "test",
        "description": "Detects suspicious files created via the OneNote application. This could indicate a potential malicious \".one\"/\".onepkg\" file was executed as seen being used in malware activity in the wild",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\onenote.exe', case=False) | Image.str.contains(r'\\\\onenotem.exe', case=False) | Image.str.contains(r'\\\\onenoteim.exe', case=False)) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\OneNote\\\\', case=False) & (TargetFilename.str.contains(r'.bat', case=False) | TargetFilename.str.contains(r'.chm', case=False) | TargetFilename.str.contains(r'.cmd', case=False) | TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'.hta', case=False) | TargetFilename.str.contains(r'.htm', case=False) | TargetFilename.str.contains(r'.html', case=False) | TargetFilename.str.contains(r'.js', case=False) | TargetFilename.str.contains(r'.lnk', case=False) | TargetFilename.str.contains(r'.ps1', case=False) | TargetFilename.str.contains(r'.vbe', case=False) | TargetFilename.str.contains(r'.vbs', case=False) | TargetFilename.str.contains(r'.wsf', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Created Files by Microsoft Sync Center",
        "id": "409f8a98-4496-4aaa-818a-c931c0a8b832",
        "status": "test",
        "description": "This rule detects suspicious files created by Microsoft Sync Center (mobsync)",
        "tags": [
            "attack.t1055",
            "attack.t1218",
            "attack.execution",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\mobsync.exe', case=False) & (TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Visual Studio Code Tunnel Remote File Creation",
        "id": "56e05d41-ce99-4ecd-912d-93f019ee0b71",
        "status": "test",
        "description": "Detects the creation of file by the \"node.exe\" process in the \".vscode-server\" directory. Could be a sign of remote file creation via VsCode tunnel feature\n",
        "tags": [
            "attack.command-and-control"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\servers\\\\Stable-', case=False) & Image.str.contains(r'\\\\server\\\\node.exe', case=False) & TargetFilename.str.contains(r'\\\\.vscode-server\\\\data\\\\User\\\\History\\\\', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Writing Local Admin Share",
        "id": "4aafb0fa-bff5-4b9d-b99e-8093e659c65f",
        "status": "test",
        "description": "Aversaries may use to interact with a remote network share using Server Message Block (SMB).\nThis technique is used by post-exploitation frameworks.\n",
        "tags": [
            "attack.lateral-movement",
            "attack.t1546.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\\\\\127.0.0', case=False) & TargetFilename.str.contains(r'\\\\ADMIN$\\\\', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious MSExchangeMailboxReplication ASPX Write",
        "id": "7280c9f3-a5af-45d0-916a-bc01cb4151c9",
        "status": "test",
        "description": "Detects suspicious activity in which the MSExchangeMailboxReplication process writes .asp and .apsx files to disk, which could be a sign of ProxyShell exploitation",
        "tags": [
            "attack.initial-access",
            "attack.t1190",
            "attack.persistence",
            "attack.t1505.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\MSExchangeMailboxReplication.exe', case=False) & (TargetFilename.str.contains(r'.aspx', case=False) | TargetFilename.str.contains(r'.asp', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Creation Activity From Fake Recycle.Bin Folder",
        "id": "cd8b36ac-8e4a-4c2f-a402-a29b8fbd5bca",
        "status": "test",
        "description": "Detects file write event from/to a fake recycle bin folder that is often used as a staging directory for malware",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'RECYCLERS.BIN\\\\', case=False) | Image.str.contains(r'RECYCLER.BIN\\\\', case=False) | TargetFilename.str.contains(r'RECYCLERS.BIN\\\\', case=False) | TargetFilename.str.contains(r'RECYCLER.BIN\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using Windows Media Player - File",
        "id": "68578b43-65df-4f81-9a9b-92f32711a951",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'C:\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\OskSupport.dll', case=False) | Image=='C:\\\\Windows\\\\system32\\\\DllHost.exe' & TargetFilename=='C:\\\\Program Files\\\\Windows Media Player\\\\osk.exe')"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Attempt Via ErrorHandler.Cmd",
        "id": "15904280-565c-4b73-9303-3291f964e7f9",
        "status": "test",
        "description": "Detects creation of a file named \"ErrorHandler.cmd\" in the \"C:\\WINDOWS\\Setup\\Scripts\\\" directory which could be used as a method of persistence\nThe content of C:\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd is read whenever some tools under C:\\WINDOWS\\System32\\oobe\\ (e.g. Setup.exe) fail to run for any reason.\n",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\WINDOWS\\\\Setup\\\\Scripts\\\\ErrorHandler.cmd', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Desktopimgdownldr Target File",
        "id": "fc4f4817-0c53-4683-a4ee-b17a64bc1039",
        "status": "test",
        "description": "Detects a suspicious Microsoft desktopimgdownldr file creation that stores a file to a suspicious location or contains a file with a suspicious extension",
        "tags": [
            "attack.command-and-control",
            "attack.t1105"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\svchost.exe', case=False) & TargetFilename.str.contains(r'\\\\Personalization\\\\LockScreenImage\\\\', case=False) & ~ TargetFilename.str.contains(r'C:\\\\Windows\\\\', case=False) & ~ (TargetFilename.str.contains(r'.jpg', case=False) | TargetFilename.str.contains(r'.jpeg', case=False) | TargetFilename.str.contains(r'.png', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Scheduled Task Write to System32 Tasks",
        "id": "80e1f67a-4596-4351-98f5-a9c3efabac95",
        "status": "test",
        "description": "Detects the creation of tasks from processes executed from suspicious locations",
        "tags": [
            "attack.persistence",
            "attack.execution",
            "attack.t1053"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\Windows\\\\System32\\\\Tasks', case=False) & (Image.str.contains(r'\\\\AppData\\\\', case=False) | Image.str.contains(r'C:\\\\PerfLogs', case=False) | Image.str.contains(r'\\\\Windows\\\\System32\\\\config\\\\systemprofile', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Process Monitor Driver Creation By Non-Sysinternals Binary",
        "id": "a05baa88-e922-4001-bc4d-8738135f27de",
        "status": "test",
        "description": "Detects creation of the Process Monitor driver by processes other than Process Monitor (procmon) itself.",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1068"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\procmon', case=False) & TargetFilename.str.contains(r'.sys', case=False) & ~ (Image.str.contains(r'\\\\procmon.exe', case=False) | Image.str.contains(r'\\\\procmon64.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential RipZip Attack on Startup Folder",
        "id": "a6976974-ea6f-4e97-818e-ea08625c52cb",
        "status": "test",
        "description": "Detects a phishing attack which expands a ZIP file containing a malicious shortcut.\nIf the victim expands the ZIP file via the explorer process, then the explorer process expands the malicious ZIP file and drops a malicious shortcut redirected to a backdoor into the Startup folder.\nAdditionally, the file name of the malicious shortcut in Startup folder contains {0AFACED1-E828-11D1-9187-B532F1E9575D} meaning the folder shortcut operation.\n",
        "tags": [
            "attack.persistence",
            "attack.t1547"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup', case=False) & TargetFilename.str.contains(r'.lnk.{0AFACED1-E828-11D1-9187-B532F1E9575D}', case=False) & Image.str.contains(r'\\\\explorer.exe', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using IEInstal - File",
        "id": "bdd8157d-8e85-4397-bb82-f06cc9c71dbb",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using IEInstal.exe (UACMe 64)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image=='C:\\\\Program Files\\\\Internet Explorer\\\\IEInstal.exe' & TargetFilename.str.contains(r'C:\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) & TargetFilename.str.contains(r'consent.exe', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PSEXEC Remote Execution File Artefact",
        "id": "304afd73-55a5-4bb9-8c21-0b1fc84ea9e4",
        "status": "test",
        "description": "Detects creation of the PSEXEC key file. Which is created anytime a PsExec command is executed. It gets written to the file system and will be recorded in the USN Journal on the target system",
        "tags": [
            "attack.lateral-movement",
            "attack.privilege-escalation",
            "attack.execution",
            "attack.persistence",
            "attack.t1136.002",
            "attack.t1543.003",
            "attack.t1570",
            "attack.s0029"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'C:\\\\Windows\\\\PSEXEC-', case=False) & TargetFilename.str.contains(r'.key', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LiveKD Kernel Memory Dump File Created",
        "id": "814ddeca-3d31-4265-8e07-8cc54fb44903",
        "status": "test",
        "description": "Detects the creation of a file that has the same name as the default LiveKD kernel memory dump.",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename=='C:\\\\Windows\\\\livekd.dmp'"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Files With System DLL Name In Unsuspected Locations",
        "id": "13c02350-4177-4e45-ac17-cf7ca628ff5e",
        "status": "test",
        "description": "Detects the creation of a file with the \".dll\" extension that has the name of a System DLL in uncommon or unsuspected locations. (Outisde of \"System32\", \"SysWOW64\", etc.).\nIt is highly recommended to perform an initial baseline before using this rule in production.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\secur32.dll', case=False) | TargetFilename.str.contains(r'\\\\tdh.dll', case=False)) & ~ (TargetFilename.str.contains(r'C:\\\\$WINDOWS.~BT\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\$WinREAgent\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\SoftwareDistribution\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\uus\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using EventVwr",
        "id": "63e4f530-65dc-49cc-8f80-ccfa95c69d43",
        "status": "test",
        "description": "Detects the pattern of a UAC bypass using Windows Event Viewer",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\Microsoft\\\\Event Viewer\\\\RecentViews', case=False) | TargetFilename.str.contains(r'\\\\Microsoft\\\\EventV~1\\\\RecentViews', case=False)) & ~ (Image.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious PFX File Creation",
        "id": "dca1b3e8-e043-4ec8-85d7-867f334b5724",
        "status": "test",
        "description": "A general detection for processes creating PFX files. This could be an indicator of an adversary exporting a local certificate to a PFX file.",
        "tags": [
            "attack.credential-access",
            "attack.t1552.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'.pfx', case=False) & ~ (TargetFilename.str.contains(r'\\\\Templates\\\\Windows\\\\Windows_TemporaryKey.pfx', case=False) & TargetFilename.str.contains(r'\\\\CMake\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "EVTX Created In Uncommon Location",
        "id": "65236ec7-ace0-4f0c-82fd-737b04fd4dcb",
        "status": "test",
        "description": "Detects the creation of new files with the \".evtx\" extension in non-common or non-standard location.\nThis could indicate tampering with default EVTX locations in order to evade security controls or simply exfiltration of event log to search for sensitive information within.\nNote that backup software and legitimate administrator might perform similar actions during troubleshooting.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1562.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'.evtx', case=False) & ~ (TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\winevt\\\\Logs\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Containers\\\\BaseImages\\\\', case=False) & TargetFilename.str.contains(r'\\\\Windows\\\\System32\\\\winevt\\\\Logs\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LSASS Process Dump Artefact In CrashDumps Folder",
        "id": "6902955a-01b7-432c-b32a-6f5f81d8f625",
        "status": "test",
        "description": "Detects the presence of an LSASS dump file in the \"CrashDumps\" folder. This could be a sign of LSASS credential dumping. Techniques such as the LSASS Shtinkering have been seen abusing the Windows Error Reporting to dump said process.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\config\\\\systemprofile\\\\AppData\\\\Local\\\\CrashDumps\\\\', case=False) & TargetFilename.str.contains(r'lsass.exe.', case=False) & TargetFilename.str.contains(r'.dmp', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Terminal Profile Settings Modification By Uncommon Process",
        "id": "9b64de98-9db3-4033-bd7a-f51430105f00",
        "status": "test",
        "description": "Detects the creation or modification of the Windows Terminal Profile settings file \"settings.json\" by an uncommon process.",
        "tags": [
            "attack.persistence",
            "attack.t1547.015"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False)) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Packages\\\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\\\LocalState\\\\settings.json', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Homoglyph Attack Using Lookalike Characters in Filename",
        "id": "4f1707b1-b50b-45b4-b5a2-3978b5a5d0d6",
        "status": "test",
        "description": "Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.\nThis is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that\nare indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036",
            "attack.t1036.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\u0410', case=False) | TargetFilename.str.contains(r'\u0412', case=False) | TargetFilename.str.contains(r'\u0415', case=False) | TargetFilename.str.contains(r'\u041a', case=False) | TargetFilename.str.contains(r'\u041c', case=False) | TargetFilename.str.contains(r'\u041d', case=False) | TargetFilename.str.contains(r'\u041e', case=False) | TargetFilename.str.contains(r'\u0420', case=False) | TargetFilename.str.contains(r'\u0421', case=False) | TargetFilename.str.contains(r'\u0422', case=False) | TargetFilename.str.contains(r'\u0425', case=False) | TargetFilename.str.contains(r'\u0405', case=False) | TargetFilename.str.contains(r'\u0406', case=False) | TargetFilename.str.contains(r'\u0408', case=False) | TargetFilename.str.contains(r'\u04ae', case=False) | TargetFilename.str.contains(r'\u04c0', case=False) | TargetFilename.str.contains(r'\u050c', case=False) | TargetFilename.str.contains(r'\u051a', case=False) | TargetFilename.str.contains(r'\u051c', case=False) | TargetFilename.str.contains(r'\u0391', case=False) | TargetFilename.str.contains(r'\u0392', case=False) | TargetFilename.str.contains(r'\u0395', case=False) | TargetFilename.str.contains(r'\u0396', case=False) | TargetFilename.str.contains(r'\u0397', case=False) | TargetFilename.str.contains(r'\u0399', case=False) | TargetFilename.str.contains(r'\u039a', case=False) | TargetFilename.str.contains(r'\u039c', case=False) | TargetFilename.str.contains(r'\u039d', case=False) | TargetFilename.str.contains(r'\u039f', case=False) | TargetFilename.str.contains(r'\u03a1', case=False) | TargetFilename.str.contains(r'\u03a4', case=False) | TargetFilename.str.contains(r'\u03a5', case=False) | TargetFilename.str.contains(r'\u03a7', case=False) | TargetFilename.str.contains(r'\u0430', case=False) | TargetFilename.str.contains(r'\u0435', case=False) | TargetFilename.str.contains(r'\u043e', case=False) | TargetFilename.str.contains(r'\u0440', case=False) | TargetFilename.str.contains(r'\u0441', case=False) | TargetFilename.str.contains(r'\u0445', case=False) | TargetFilename.str.contains(r'\u0455', case=False) | TargetFilename.str.contains(r'\u0456', case=False) | TargetFilename.str.contains(r'\u04cf', case=False) | TargetFilename.str.contains(r'\u0458', case=False) | TargetFilename.str.contains(r'\u04bb', case=False) | TargetFilename.str.contains(r'\u0501', case=False) | TargetFilename.str.contains(r'\u051b', case=False) | TargetFilename.str.contains(r'\u051d', case=False) | TargetFilename.str.contains(r'\u03bf', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Webshell Creation On Static Website",
        "id": "39f1f9f2-9636-45de-98f6-a4046aa8e4b9",
        "status": "test",
        "description": "Detects the creation of files with certain extensions on a static web site. This can be indicative of potential uploads of a web shell.",
        "tags": [
            "attack.persistence",
            "attack.t1505.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\inetpub\\\\wwwroot\\\\', case=False) & (TargetFilename.str.contains(r'.ashx', case=False) | TargetFilename.str.contains(r'.asp', case=False) | TargetFilename.str.contains(r'.ph', case=False) | TargetFilename.str.contains(r'.soap', case=False)) | (TargetFilename.str.contains(r'\\\\www\\\\', case=False) | TargetFilename.str.contains(r'\\\\htdocs\\\\', case=False) | TargetFilename.str.contains(r'\\\\html\\\\', case=False)) & TargetFilename.str.contains(r'.ph', case=False)) & ~ (TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | TargetFilename.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | Image=='System' | TargetFilename.str.contains(r'\\\\xampp', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Notepad++ Plugins",
        "id": "54127bd4-f541-4ac3-afdb-ea073f63f692",
        "status": "test",
        "description": "Detects creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\". Which could indicates possible persistence",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\Notepad++\\\\plugins\\\\', case=False) & TargetFilename.str.contains(r'.dll', case=False) & ~ (Image.str.contains(r'\\\\Notepad++\\\\updater\\\\gup.exe', case=False) | Image.str.contains(r'C:\\\\Users\\\\', case=False) & Image.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) & (Image.str.contains(r'\\\\target.exe', case=False) | Image.str.contains(r'Installer.x64.exe', case=False)))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Legitimate Application Dropped Executable",
        "id": "f0540f7e-2db3-4432-b9e0-3965486744bc",
        "status": "test",
        "description": "Detects programs on a Windows system that should not write executables to disk",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\eqnedt32.exe', case=False) | Image.str.contains(r'\\\\wordpad.exe', case=False) | Image.str.contains(r'\\\\wordview.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\certoc.exe', case=False) | Image.str.contains(r'\\\\CertReq.exe', case=False) | Image.str.contains(r'\\\\Desktopimgdownldr.exe', case=False) | Image.str.contains(r'\\\\esentutl.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\AcroRd32.exe', case=False) | Image.str.contains(r'\\\\RdrCEF.exe', case=False) | Image.str.contains(r'\\\\hh.exe', case=False) | Image.str.contains(r'\\\\finger.exe', case=False)) & (TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.ocx', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Binaries and Scripts in Public Folder",
        "id": "b447f7de-1e53-4cbf-bfb4-f1f6d0b04e4e",
        "status": "experimental",
        "description": "Detects the creation of a file with a suspicious extension in the public folder, which could indicate potential malicious activity.",
        "tags": [
            "attack.execution",
            "attack.t1204"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r':\\\\Users\\\\Public\\\\', case=False) & (TargetFilename.str.contains(r'.bat', case=False) | TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'.hta', case=False) | TargetFilename.str.contains(r'.js', case=False) | TargetFilename.str.contains(r'.ps1', case=False) | TargetFilename.str.contains(r'.vbe', case=False) | TargetFilename.str.contains(r'.vbs', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious PROCEXP152.sys File Created In TMP",
        "id": "3da70954-0f2c-4103-adff-b7440368f50e",
        "status": "test",
        "description": "Detects the creation of the PROCEXP152.sys file in the application-data local temporary folder.\nThis driver is used by Sysinternals Process Explorer but also by KDU (https://github.com/hfiref0x/KDU) or Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU.\n",
        "tags": [
            "attack.t1562.001",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) & TargetFilename.str.contains(r'PROCEXP152.sys', case=False) & ~ (Image.str.contains(r'\\\\procexp64.exe', case=False) | Image.str.contains(r'\\\\procexp.exe', case=False) | Image.str.contains(r'\\\\procmon64.exe', case=False) | Image.str.contains(r'\\\\procmon.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Rclone Config File Creation",
        "id": "34986307-b7f4-49be-92f3-e7a4d01ac5db",
        "status": "test",
        "description": "Detects Rclone config files being created",
        "tags": [
            "attack.exfiltration",
            "attack.t1567.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r':\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\.config\\\\rclone\\\\', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Startup Folder Persistence",
        "id": "28208707-fe31-437f-9a7f-4b1108b94d2e",
        "status": "test",
        "description": "Detects when a file with a suspicious extension is created in the startup folder",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\', case=False) & (TargetFilename.str.contains(r'.vbs', case=False) | TargetFilename.str.contains(r'.vbe', case=False) | TargetFilename.str.contains(r'.bat', case=False) | TargetFilename.str.contains(r'.ps1', case=False) | TargetFilename.str.contains(r'.hta', case=False) | TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.jar', case=False) | TargetFilename.str.contains(r'.msi', case=False) | TargetFilename.str.contains(r'.scr', case=False) | TargetFilename.str.contains(r'.cmd', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon File Created In Office Startup Folder",
        "id": "a10a2c40-2c4d-49f8-b557-1a946bc55d9d",
        "status": "test",
        "description": "Detects the creation of a file with an uncommon extension in an Office application startup folder",
        "tags": [
            "attack.resource-development",
            "attack.t1587.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & ((TargetFilename.str.contains(r'\\\\Microsoft\\\\Word\\\\STARTUP', case=False) | TargetFilename.str.contains(r'\\\\Office', case=False) & TargetFilename.str.contains(r'\\\\Program Files', case=False) & TargetFilename.str.contains(r'\\\\STARTUP', case=False)) & ~ (TargetFilename.str.contains(r'.docb', case=False) | TargetFilename.str.contains(r'.docm', case=False) | TargetFilename.str.contains(r'.docx', case=False) | TargetFilename.str.contains(r'.dotm', case=False) | TargetFilename.str.contains(r'.mdb', case=False) | TargetFilename.str.contains(r'.mdw', case=False) | TargetFilename.str.contains(r'.pdf', case=False) | TargetFilename.str.contains(r'.wll', case=False) | TargetFilename.str.contains(r'.wwl', case=False)) | (TargetFilename.str.contains(r'\\\\Microsoft\\\\Excel\\\\XLSTART', case=False) | TargetFilename.str.contains(r'\\\\Office', case=False) & TargetFilename.str.contains(r'\\\\Program Files', case=False) & TargetFilename.str.contains(r'\\\\XLSTART', case=False)) & ~ (TargetFilename.str.contains(r'.xll', case=False) | TargetFilename.str.contains(r'.xls', case=False) | TargetFilename.str.contains(r'.xlsm', case=False) | TargetFilename.str.contains(r'.xlsx', case=False) | TargetFilename.str.contains(r'.xlt', case=False) | TargetFilename.str.contains(r'.xltm', case=False) | TargetFilename.str.contains(r'.xlw', case=False))) & ~ (Image.str.contains(r':\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\', case=False) & Image.str.contains(r'\\\\OfficeClickToRun.exe', case=False) | (Image.str.contains(r':\\\\Program Files\\\\Microsoft Office\\\\', case=False) | Image.str.contains(r':\\\\Program Files (x86)\\\\Microsoft Office\\\\', case=False)) & (Image.str.contains(r'\\\\winword.exe', case=False) | Image.str.contains(r'\\\\excel.exe', case=False)))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Powerup Write Hijack DLL",
        "id": "602a1f13-c640-4d73-b053-be9a2fa58b96",
        "status": "test",
        "description": "Powerup tool's Write Hijack DLL exploits DLL hijacking for privilege escalation.\nIn it's default mode, it builds a self deleting .bat file which executes malicious command.\nThe detection rule relies on creation of the malicious bat file (debug.bat by default).\n",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1574.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & TargetFilename.str.contains(r'.bat', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File With Uncommon Extension Created By An Office Application",
        "id": "c7a74c80-ba5a-486e-9974-ab9e682bc5e4",
        "status": "test",
        "description": "Detects the creation of files with an executable or script extension by an Office application.",
        "tags": [
            "attack.t1204.002",
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\msaccess.exe', case=False) | Image.str.contains(r'\\\\mspub.exe', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) | Image.str.contains(r'\\\\visio.exe', case=False) | Image.str.contains(r'\\\\winword.exe', case=False)) & (TargetFilename.str.contains(r'.bat', case=False) | TargetFilename.str.contains(r'.cmd', case=False) | TargetFilename.str.contains(r'.com', case=False) | TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'.hta', case=False) | TargetFilename.str.contains(r'.ocx', case=False) | TargetFilename.str.contains(r'.proj', case=False) | TargetFilename.str.contains(r'.ps1', case=False) | TargetFilename.str.contains(r'.scf', case=False) | TargetFilename.str.contains(r'.scr', case=False) | TargetFilename.str.contains(r'.sys', case=False) | TargetFilename.str.contains(r'.vbe', case=False) | TargetFilename.str.contains(r'.vbs', case=False) | TargetFilename.str.contains(r'.wsf', case=False) | TargetFilename.str.contains(r'.wsh', case=False)) & ~ (TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\assembly\\\\tmp\\\\', case=False) & TargetFilename.str.contains(r'.dll', case=False)) & ~ (TargetFilename.str.contains(r'C:\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\Office\\\\', case=False) & TargetFilename.str.contains(r'\\\\WebServiceCache\\\\AllUsers', case=False) & TargetFilename.str.contains(r'.com', case=False) | Image.str.contains(r'\\\\winword.exe', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\webexdelta\\\\', case=False) & (TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False)))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LSASS Process Memory Dump Creation Via Taskmgr.EXE",
        "id": "69ca12af-119d-44ed-b50f-a47af0ebc364",
        "status": "test",
        "description": "Detects the creation of an \"lsass.dmp\" file by the taskmgr process. This indicates a manual dumping of the LSASS.exe process memory using Windows Task Manager.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r':\\\\Windows\\\\system32\\\\taskmgr.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\taskmgr.exe', case=False)) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) & TargetFilename.str.contains(r'\\\\lsass', case=False) & TargetFilename.str.contains(r'.DMP', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential DCOM InternetExplorer.Application DLL Hijack",
        "id": "2f7979ae-f82b-45af-ac1d-2b10e93b0baa",
        "status": "test",
        "description": "Detects potential DLL hijack of \"iertutil.dll\" found in the DCOM InternetExplorer.Application Class over the network",
        "tags": [
            "attack.lateral-movement",
            "attack.t1021.002",
            "attack.t1021.003"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image=='System' & TargetFilename.str.contains(r'\\\\Internet Explorer\\\\iertutil.dll', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Binary Or Script Dropper Via PowerShell",
        "id": "7047d730-036f-4f40-b9d8-1c63e36d5e62",
        "status": "test",
        "description": "Detects PowerShell creating a binary executable or a script file.",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & (TargetFilename.str.contains(r'.bat', case=False) | TargetFilename.str.contains(r'.chm', case=False) | TargetFilename.str.contains(r'.cmd', case=False) | TargetFilename.str.contains(r'.com', case=False) | TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'.hta', case=False) | TargetFilename.str.contains(r'.jar', case=False) | TargetFilename.str.contains(r'.js', case=False) | TargetFilename.str.contains(r'.ocx', case=False) | TargetFilename.str.contains(r'.scr', case=False) | TargetFilename.str.contains(r'.sys', case=False) | TargetFilename.str.contains(r'.vbe', case=False) | TargetFilename.str.contains(r'.vbs', case=False) | TargetFilename.str.contains(r'.wsf', case=False)) & ~ (TargetFilename.str.contains(r'C:\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) & (TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False)) | TargetFilename.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False) & (TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False)))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WinSxS Executable File Creation By Non-System Process",
        "id": "34746e8c-5fb8-415a-b135-0abc167e912a",
        "status": "test",
        "description": "Detects the creation of binaries in the WinSxS folder by non-system processes",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False) & TargetFilename.str.contains(r'.exe', case=False) & ~ (Image.str.contains(r'C:\\\\Windows\\\\Systems32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Cred Dump Tools Dropped Files",
        "id": "8fbf3271-1ef6-4e94-8210-03c2317947f6",
        "status": "test",
        "description": "Files with well-known filenames (parts of credential dump software or files produced by them) creation",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001",
            "attack.t1003.002",
            "attack.t1003.003",
            "attack.t1003.004",
            "attack.t1003.005"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\fgdump-log', case=False) | TargetFilename.str.contains(r'\\\\kirbi', case=False) | TargetFilename.str.contains(r'\\\\pwdump', case=False) | TargetFilename.str.contains(r'\\\\pwhashes', case=False) | TargetFilename.str.contains(r'\\\\wce_ccache', case=False) | TargetFilename.str.contains(r'\\\\wce_krbtkts', case=False) | TargetFilename.str.contains(r'\\\\cachedump.exe', case=False) | TargetFilename.str.contains(r'\\\\cachedump64.exe', case=False) | TargetFilename.str.contains(r'\\\\DumpExt.dll', case=False) | TargetFilename.str.contains(r'\\\\DumpSvc.exe', case=False) | TargetFilename.str.contains(r'\\\\Dumpy.exe', case=False) | TargetFilename.str.contains(r'\\\\fgexec.exe', case=False) | TargetFilename.str.contains(r'\\\\lsremora.dll', case=False) | TargetFilename.str.contains(r'\\\\lsremora64.dll', case=False) | TargetFilename.str.contains(r'\\\\NTDS.out', case=False) | TargetFilename.str.contains(r'\\\\procdump64.exe', case=False) | TargetFilename.str.contains(r'\\\\pstgdump.exe', case=False) | TargetFilename.str.contains(r'\\\\pwdump.exe', case=False) | TargetFilename.str.contains(r'\\\\SAM.out', case=False) | TargetFilename.str.contains(r'\\\\SECURITY.out', case=False) | TargetFilename.str.contains(r'\\\\servpw.exe', case=False) | TargetFilename.str.contains(r'\\\\servpw64.exe', case=False) | TargetFilename.str.contains(r'\\\\SYSTEM.out', case=False) | TargetFilename.str.contains(r'\\\\test.pwd', case=False) | TargetFilename.str.contains(r'\\\\wceaux.dll', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Legitimate Application Dropped Archive",
        "id": "654fcc6d-840d-4844-9b07-2c3300e54a26",
        "status": "test",
        "description": "Detects programs on a Windows system that should not write an archive to disk",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\winword.exe', case=False) | Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) | Image.str.contains(r'\\\\msaccess.exe', case=False) | Image.str.contains(r'\\\\mspub.exe', case=False) | Image.str.contains(r'\\\\eqnedt32.exe', case=False) | Image.str.contains(r'\\\\visio.exe', case=False) | Image.str.contains(r'\\\\wordpad.exe', case=False) | Image.str.contains(r'\\\\wordview.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\certoc.exe', case=False) | Image.str.contains(r'\\\\CertReq.exe', case=False) | Image.str.contains(r'\\\\Desktopimgdownldr.exe', case=False) | Image.str.contains(r'\\\\esentutl.exe', case=False) | Image.str.contains(r'\\\\finger.exe', case=False) | Image.str.contains(r'\\\\notepad.exe', case=False) | Image.str.contains(r'\\\\AcroRd32.exe', case=False) | Image.str.contains(r'\\\\RdrCEF.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\hh.exe', case=False)) & (TargetFilename.str.contains(r'.zip', case=False) | TargetFilename.str.contains(r'.rar', case=False) | TargetFilename.str.contains(r'.7z', case=False) | TargetFilename.str.contains(r'.diagcab', case=False) | TargetFilename.str.contains(r'.appx', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Binary Writes Via AnyDesk",
        "id": "2d367498-5112-4ae5-a06a-96e7bc33a211",
        "status": "test",
        "description": "Detects AnyDesk writing binary files to disk other than \"gcapi.dll\".\nAccording to RedCanary research it is highly abnormal for AnyDesk to write executable files to disk besides gcapi.dll,\nwhich is a legitimate DLL that is part of the Google Chrome web browser used to interact with the Google Cloud API. (See reference section for more details)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\AnyDesk.exe', case=False) | Image.str.contains(r'\\\\AnyDeskMSI.exe', case=False)) & (TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False)) & ~ TargetFilename.str.contains(r'\\\\gcapi.dll', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Executable File Creation",
        "id": "74babdd6-a758-4549-9632-26535279e654",
        "status": "test",
        "description": "Detect creation of suspicious executable file names.\nSome strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r':\\\\$Recycle.Bin.exe', case=False) | TargetFilename.str.contains(r':\\\\Documents and Settings.exe', case=False) | TargetFilename.str.contains(r':\\\\MSOCache.exe', case=False) | TargetFilename.str.contains(r':\\\\PerfLogs.exe', case=False) | TargetFilename.str.contains(r':\\\\Recovery.exe', case=False) | TargetFilename.str.contains(r'.bat.exe', case=False) | TargetFilename.str.contains(r'.sys.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Creation of a Diagcab",
        "id": "3d0ed417-3d94-4963-a562-4a92c940656a",
        "status": "test",
        "description": "Detects the creation of diagcab file, which could be caused by some legitimate installer or is a sign of exploitation (review the filename and its location)",
        "tags": [
            "attack.resource-development"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'.diagcab', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using .NET Code Profiler on MMC",
        "id": "93a19907-d4f9-4deb-9f91-aac4692776a6",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using .NET Code Profiler and mmc.exe DLL hijacking (UACMe 39)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'C:\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\pe386.dll', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Creation In Uncommon AppData Folder",
        "id": "d7b50671-d1ad-4871-aa60-5aa5b331fe04",
        "status": "test",
        "description": "Detects the creation of suspicious files and folders inside the user's AppData folder but not inside any of the common and well known directories (Local, Romaing, LocalLow). This method could be used as a method to bypass detection who exclude the AppData folder in fear of FPs",
        "tags": [
            "attack.defense-evasion",
            "attack.execution"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'C:\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\', case=False) & (TargetFilename.str.contains(r'.bat', case=False) | TargetFilename.str.contains(r'.cmd', case=False) | TargetFilename.str.contains(r'.cpl', case=False) | TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'.hta', case=False) | TargetFilename.str.contains(r'.iso', case=False) | TargetFilename.str.contains(r'.lnk', case=False) | TargetFilename.str.contains(r'.msi', case=False) | TargetFilename.str.contains(r'.ps1', case=False) | TargetFilename.str.contains(r'.psm1', case=False) | TargetFilename.str.contains(r'.scr', case=False) | TargetFilename.str.contains(r'.vbe', case=False) | TargetFilename.str.contains(r'.vbs', case=False)) & ~ (TargetFilename.str.contains(r'C:\\\\Users\\\\', case=False) & (TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\', case=False) | TargetFilename.str.contains(r'\\\\AppData\\\\LocalLow\\\\', case=False) | TargetFilename.str.contains(r'\\\\AppData\\\\Roaming\\\\', case=False)))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "NTDS Exfiltration Filename Patterns",
        "id": "3a8da4e0-36c1-40d2-8b29-b3e890d5172a",
        "status": "test",
        "description": "Detects creation of files with specific name patterns seen used in various tools that export the NTDS.DIT for exfiltration.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\All.cab', case=False) | TargetFilename.str.contains(r'.ntds.cleartext', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Dynamic CSharp Compile Artefact",
        "id": "e4a74e34-ecde-4aab-b2fb-9112dd01aed0",
        "status": "test",
        "description": "When C# is compiled dynamically, a .cmdline file will be created as a part of the process.\nCertain processes are not typically observed compiling C# code, but can do so without touching disk.\nThis can be used to unpack a payload for execution\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027.004"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'.cmdline', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WMI Persistence - Script Event Consumer File Write",
        "id": "33f41cdd-35ac-4ba8-814b-c6a4244a1ad4",
        "status": "test",
        "description": "Detects file writes of WMI script event consumer",
        "tags": [
            "attack.t1546.003",
            "attack.persistence"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image=='C:\\\\WINDOWS\\\\system32\\\\wbem\\\\scrcons.exe'"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious DMP/HDMP File Creation",
        "id": "aba15bdd-657f-422a-bab3-ac2d2a0d6f1c",
        "status": "test",
        "description": "Detects the creation of a file with the \".dmp\"/\".hdmp\" extension by a shell or scripting application such as \"cmd\", \"powershell\", etc. Often created by software during a crash. Memory dumps can sometimes contain sensitive information such as credentials. It's best to determine the source of the crash.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False)) & (TargetFilename.str.contains(r'.dmp', case=False) | TargetFilename.str.contains(r'.dump', case=False) | TargetFilename.str.contains(r'.hdmp', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - NPPSpy Hacktool Usage",
        "id": "cad1fe90-2406-44dc-bd03-59d0b58fe722",
        "status": "test",
        "description": "Detects the use of NPPSpy hacktool that stores cleartext passwords of users that logged in to a local file",
        "tags": [
            "attack.credential-access"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\NPPSpy.txt', case=False) | TargetFilename.str.contains(r'\\\\NPPSpy.dll', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ADSI-Cache File Creation By Uncommon Tool",
        "id": "75bf09fa-1dd7-4d18-9af9-dd9e492562eb",
        "status": "test",
        "description": "Detects the creation of an \"Active Directory Schema Cache File\" (.sch) file by an uncommon tool.",
        "tags": [
            "attack.t1001.003",
            "attack.command-and-control"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\Local\\\\Microsoft\\\\Windows\\\\SchCache\\\\', case=False) & TargetFilename.str.contains(r'.sch', case=False) & ~ (Image.str.contains(r':\\\\Program Files\\\\Cylance\\\\Desktop\\\\CylanceSvc.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\CCM\\\\CcmExec.exe', case=False) | Image.str.contains(r':\\\\windows\\\\system32\\\\dllhost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\system32\\\\dsac.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\system32\\\\efsui.exe', case=False) | Image.str.contains(r':\\\\windows\\\\system32\\\\mmc.exe', case=False) | Image.str.contains(r':\\\\windows\\\\system32\\\\svchost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE.exe', case=False) | Image.str.contains(r':\\\\windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\ccmsetup\\\\autoupgrade\\\\ccmsetup', case=False) | Image.str.contains(r':\\\\Program Files\\\\SentinelOne\\\\Sentinel Agent', case=False) | Image.str.contains(r':\\\\Program Files\\\\', case=False) & Image.str.contains(r'\\\\Microsoft Office', case=False) & Image.str.contains(r'\\\\OUTLOOK.EXE', case=False)) & ~ (Image.str.contains(r'\\\\LANDesk\\\\LDCLient\\\\ldapwhoami.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\Citrix\\\\Receiver StoreFront\\\\Services\\\\DefaultDomainServices\\\\Citrix.DeliveryServices.DomainServices.ServiceHost.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Malicious PowerShell Scripts - FileCreation",
        "id": "f331aa1f-8c53-4fc3-b083-cc159bc971cb",
        "status": "test",
        "description": "Detects the creation of known offensive powershell scripts used for exploitation",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\Add-ConstrainedDelegationBackdoor.ps1', case=False) | TargetFilename.str.contains(r'\\\\Add-Exfiltration.ps1', case=False) | TargetFilename.str.contains(r'\\\\Add-Persistence.ps1', case=False) | TargetFilename.str.contains(r'\\\\Add-RegBackdoor.ps1', case=False) | TargetFilename.str.contains(r'\\\\Add-RemoteRegBackdoor.ps1', case=False) | TargetFilename.str.contains(r'\\\\Add-ScrnSaveBackdoor.ps1', case=False) | TargetFilename.str.contains(r'\\\\ADRecon.ps1', case=False) | TargetFilename.str.contains(r'\\\\AzureADRecon.ps1', case=False) | TargetFilename.str.contains(r'\\\\Check-VM.ps1', case=False) | TargetFilename.str.contains(r'\\\\ConvertTo-ROT13.ps1', case=False) | TargetFilename.str.contains(r'\\\\Copy-VSS.ps1', case=False) | TargetFilename.str.contains(r'\\\\Create-MultipleSessions.ps1', case=False) | TargetFilename.str.contains(r'\\\\DNS_TXT_Pwnage.ps1', case=False) | TargetFilename.str.contains(r'\\\\dnscat2.ps1', case=False) | TargetFilename.str.contains(r'\\\\Do-Exfiltration.ps1', case=False) | TargetFilename.str.contains(r'\\\\DomainPasswordSpray.ps1', case=False) | TargetFilename.str.contains(r'\\\\Download_Execute.ps1', case=False) | TargetFilename.str.contains(r'\\\\Download-Execute-PS.ps1', case=False) | TargetFilename.str.contains(r'\\\\Enable-DuplicateToken.ps1', case=False) | TargetFilename.str.contains(r'\\\\Enabled-DuplicateToken.ps1', case=False) | TargetFilename.str.contains(r'\\\\Execute-Command-MSSQL.ps1', case=False) | TargetFilename.str.contains(r'\\\\Execute-DNSTXT-Code.ps1', case=False) | TargetFilename.str.contains(r'\\\\Execute-OnTime.ps1', case=False) | TargetFilename.str.contains(r'\\\\ExetoText.ps1', case=False) | TargetFilename.str.contains(r'\\\\Exploit-Jboss.ps1', case=False) | TargetFilename.str.contains(r'\\\\Find-AVSignature.ps1', case=False) | TargetFilename.str.contains(r'\\\\Find-Fruit.ps1', case=False) | TargetFilename.str.contains(r'\\\\Find-GPOLocation.ps1', case=False) | TargetFilename.str.contains(r'\\\\Find-TrustedDocuments.ps1', case=False) | TargetFilename.str.contains(r'\\\\FireBuster.ps1', case=False) | TargetFilename.str.contains(r'\\\\FireListener.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-ApplicationHost.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-ChromeDump.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-ClipboardContents.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-ComputerDetail.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-FoxDump.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-GPPAutologon.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-GPPPassword.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-IndexedItem.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-Keystrokes.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-LSASecret.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-MicrophoneAudio.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-PassHashes.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-PassHints.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-RegAlwaysInstallElevated.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-RegAutoLogon.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-RickAstley.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-Screenshot.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-SecurityPackages.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-ServiceFilePermission.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-ServicePermission.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-ServiceUnquoted.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-SiteListPassword.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-System.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-TimedScreenshot.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-UnattendedInstallFile.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-Unconstrained.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-USBKeystrokes.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-VaultCredential.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-VulnAutoRun.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-VulnSchTask.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-WebConfig.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-WebCredentials.ps1', case=False) | TargetFilename.str.contains(r'\\\\Get-WLAN-Keys.ps1', case=False) | TargetFilename.str.contains(r'\\\\Gupt-Backdoor.ps1', case=False) | TargetFilename.str.contains(r'\\\\HTTP-Backdoor.ps1', case=False) | TargetFilename.str.contains(r'\\\\HTTP-Login.ps1', case=False) | TargetFilename.str.contains(r'\\\\Install-ServiceBinary.ps1', case=False) | TargetFilename.str.contains(r'\\\\Install-SSP.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-ACLScanner.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-ADSBackdoor.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-AmsiBypass.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-ARPScan.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-BackdoorLNK.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-BadPotato.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-BetterSafetyKatz.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-BruteForce.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-BypassUAC.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Carbuncle.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Certify.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-ConPtyShell.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-CredentialInjection.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-CredentialsPhish.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-DAFT.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-DCSync.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Decode.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-DinvokeKatz.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-DllInjection.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-DNSUpdate.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-DowngradeAccount.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-EgressCheck.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Encode.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-EventViewer.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Eyewitness.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-FakeLogonScreen.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Farmer.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Get-RBCD-Threaded.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Gopher.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Grouper2.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Grouper3.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-HandleKatz.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Interceptor.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Internalmonologue.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Inveigh.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-InveighRelay.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-JSRatRegsvr.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-JSRatRundll.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-KrbRelay.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-KrbRelayUp.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-LdapSignCheck.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Lockless.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-MalSCCM.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Mimikatz.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-MimikatzWDigestDowngrade.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Mimikittenz.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-MITM6.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-NanoDump.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-NetRipper.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-NetworkRelay.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-NinjaCopy.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-OxidResolver.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-P0wnedshell.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-P0wnedshellx86.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Paranoia.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PortScan.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PoshRatHttp.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PoshRatHttps.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PostExfil.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PowerDump.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PowerShellIcmp.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PowerShellTCP.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PowerShellTcpOneLine.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PowerShellTcpOneLineBind.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PowerShellUdp.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PowerShellUdpOneLine.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PowerShellWMI.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PowerThIEf.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PPLDump.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Prasadhak.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PsExec.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PsGcat.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PsGcatAgent.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PSInject.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-PsUaCme.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-ReflectivePEInjection.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-ReverseDNSLookup.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Rubeus.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-RunAs.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-SafetyKatz.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-SauronEye.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-SCShell.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Seatbelt.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-ServiceAbuse.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-SessionGopher.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-ShellCode.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-SMBScanner.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Snaffler.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Spoolsample.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-SSHCommand.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-SSIDExfil.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-StandIn.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-StickyNotesExtract.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Tater.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Thunderfox.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-ThunderStruck.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-TokenManipulation.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Tokenvator.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-TotalExec.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-UrbanBishop.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-UserHunter.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-VoiceTroll.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Whisker.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-WinEnum.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-winPEAS.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-WireTap.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-WmiCommand.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-WScriptBypassUAC.ps1', case=False) | TargetFilename.str.contains(r'\\\\Invoke-Zerologon.ps1', case=False) | TargetFilename.str.contains(r'\\\\Keylogger.ps1', case=False) | TargetFilename.str.contains(r'\\\\MailRaider.ps1', case=False) | TargetFilename.str.contains(r'\\\\New-HoneyHash.ps1', case=False) | TargetFilename.str.contains(r'\\\\OfficeMemScraper.ps1', case=False) | TargetFilename.str.contains(r'\\\\Offline_Winpwn.ps1', case=False) | TargetFilename.str.contains(r'\\\\Out-CHM.ps1', case=False) | TargetFilename.str.contains(r'\\\\Out-DnsTxt.ps1', case=False) | TargetFilename.str.contains(r'\\\\Out-Excel.ps1', case=False) | TargetFilename.str.contains(r'\\\\Out-HTA.ps1', case=False) | TargetFilename.str.contains(r'\\\\Out-Java.ps1', case=False) | TargetFilename.str.contains(r'\\\\Out-JS.ps1', case=False) | TargetFilename.str.contains(r'\\\\Out-Minidump.ps1', case=False) | TargetFilename.str.contains(r'\\\\Out-RundllCommand.ps1', case=False) | TargetFilename.str.contains(r'\\\\Out-SCF.ps1', case=False) | TargetFilename.str.contains(r'\\\\Out-SCT.ps1', case=False) | TargetFilename.str.contains(r'\\\\Out-Shortcut.ps1', case=False) | TargetFilename.str.contains(r'\\\\Out-WebQuery.ps1', case=False) | TargetFilename.str.contains(r'\\\\Out-Word.ps1', case=False) | TargetFilename.str.contains(r'\\\\Parse_Keys.ps1', case=False) | TargetFilename.str.contains(r'\\\\Port-Scan.ps1', case=False) | TargetFilename.str.contains(r'\\\\PowerBreach.ps1', case=False) | TargetFilename.str.contains(r'\\\\powercat.ps1', case=False) | TargetFilename.str.contains(r'\\\\Powermad.ps1', case=False) | TargetFilename.str.contains(r'\\\\PowerRunAsSystem.psm1', case=False) | TargetFilename.str.contains(r'\\\\PowerSharpPack.ps1', case=False) | TargetFilename.str.contains(r'\\\\PowerUp.ps1', case=False) | TargetFilename.str.contains(r'\\\\PowerUpSQL.ps1', case=False) | TargetFilename.str.contains(r'\\\\PowerView.ps1', case=False) | TargetFilename.str.contains(r'\\\\PSAsyncShell.ps1', case=False) | TargetFilename.str.contains(r'\\\\RemoteHashRetrieval.ps1', case=False) | TargetFilename.str.contains(r'\\\\Remove-Persistence.ps1', case=False) | TargetFilename.str.contains(r'\\\\Remove-PoshRat.ps1', case=False) | TargetFilename.str.contains(r'\\\\Remove-Update.ps1', case=False) | TargetFilename.str.contains(r'\\\\Run-EXEonRemote.ps1', case=False) | TargetFilename.str.contains(r'\\\\Schtasks-Backdoor.ps1', case=False) | TargetFilename.str.contains(r'\\\\Set-DCShadowPermissions.ps1', case=False) | TargetFilename.str.contains(r'\\\\Set-MacAttribute.ps1', case=False) | TargetFilename.str.contains(r'\\\\Set-RemotePSRemoting.ps1', case=False) | TargetFilename.str.contains(r'\\\\Set-RemoteWMI.ps1', case=False) | TargetFilename.str.contains(r'\\\\Set-Wallpaper.ps1', case=False) | TargetFilename.str.contains(r'\\\\Show-TargetScreen.ps1', case=False) | TargetFilename.str.contains(r'\\\\Speak.ps1', case=False) | TargetFilename.str.contains(r'\\\\Start-CaptureServer.ps1', case=False) | TargetFilename.str.contains(r'\\\\Start-WebcamRecorder.ps1', case=False) | TargetFilename.str.contains(r'\\\\StringToBase64.ps1', case=False) | TargetFilename.str.contains(r'\\\\TexttoExe.ps1', case=False) | TargetFilename.str.contains(r'\\\\Veeam-Get-Creds.ps1', case=False) | TargetFilename.str.contains(r'\\\\VolumeShadowCopyTools.ps1', case=False) | TargetFilename.str.contains(r'\\\\WinPwn.ps1', case=False) | TargetFilename.str.contains(r'\\\\WSUSpendu.ps1', case=False) | TargetFilename.str.contains(r'Invoke-Sharp', case=False) & TargetFilename.str.contains(r'.ps1', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Office Macro File Download",
        "id": "0e29e3a7-1ad8-40aa-b691-9f82ecd33d66",
        "status": "test",
        "description": "Detects the creation of a new office macro files on the systems via an application (browser, mail client).",
        "tags": [
            "attack.initial-access",
            "attack.t1566.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\RuntimeBroker.exe', case=False) | Image.str.contains(r'\\\\outlook.exe', case=False) | Image.str.contains(r'\\\\thunderbird.exe', case=False) | Image.str.contains(r'\\\\brave.exe', case=False) | Image.str.contains(r'\\\\chrome.exe', case=False) | Image.str.contains(r'\\\\firefox.exe', case=False) | Image.str.contains(r'\\\\iexplore.exe', case=False) | Image.str.contains(r'\\\\maxthon.exe', case=False) | Image.str.contains(r'\\\\MicrosoftEdge.exe', case=False) | Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\safari.exe', case=False) | Image.str.contains(r'\\\\seamonkey.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False) | Image.str.contains(r'\\\\whale.exe', case=False)) & (TargetFilename.str.contains(r'.docm', case=False) | TargetFilename.str.contains(r'.dotm', case=False) | TargetFilename.str.contains(r'.xlsm', case=False) | TargetFilename.str.contains(r'.xltm', case=False) | TargetFilename.str.contains(r'.potm', case=False) | TargetFilename.str.contains(r'.pptm', case=False) | TargetFilename.str.contains(r'.docm:Zone', case=False) | TargetFilename.str.contains(r'.dotm:Zone', case=False) | TargetFilename.str.contains(r'.xlsm:Zone', case=False) | TargetFilename.str.contains(r'.xltm:Zone', case=False) | TargetFilename.str.contains(r'.potm:Zone', case=False) | TargetFilename.str.contains(r'.pptm:Zone', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ISO File Created Within Temp Folders",
        "id": "2f9356ae-bf43-41b8-b858-4496d83b2acb",
        "status": "test",
        "description": "Detects the creation of a ISO file in the Outlook temp folder or in the Appdata temp folder. Typical of Qakbot TTP from end-July 2022.",
        "tags": [
            "attack.initial-access",
            "attack.t1566.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) & TargetFilename.str.contains(r'.zip\\\\', case=False) & TargetFilename.str.contains(r'.iso', case=False) | TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\INetCache\\\\Content.Outlook\\\\', case=False) & TargetFilename.str.contains(r'.iso', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ScreenConnect Temporary Installation Artefact",
        "id": "fec96f39-988b-4586-b746-b93d59fd1922",
        "status": "test",
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\Bin\\\\ScreenConnect.', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Legitimate Application Dropped Script",
        "id": "7d604714-e071-49ff-8726-edeb95a70679",
        "status": "test",
        "description": "Detects programs on a Windows system that should not write scripts to disk",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\eqnedt32.exe', case=False) | Image.str.contains(r'\\\\wordpad.exe', case=False) | Image.str.contains(r'\\\\wordview.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\certoc.exe', case=False) | Image.str.contains(r'\\\\CertReq.exe', case=False) | Image.str.contains(r'\\\\Desktopimgdownldr.exe', case=False) | Image.str.contains(r'\\\\esentutl.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\AcroRd32.exe', case=False) | Image.str.contains(r'\\\\RdrCEF.exe', case=False) | Image.str.contains(r'\\\\hh.exe', case=False) | Image.str.contains(r'\\\\finger.exe', case=False)) & (TargetFilename.str.contains(r'.ps1', case=False) | TargetFilename.str.contains(r'.bat', case=False) | TargetFilename.str.contains(r'.vbs', case=False) | TargetFilename.str.contains(r'.scf', case=False) | TargetFilename.str.contains(r'.wsf', case=False) | TargetFilename.str.contains(r'.wsh', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Microsoft Office Add-In",
        "id": "8e1cb247-6cf6-42fa-b440-3f27d57e9936",
        "status": "test",
        "description": "Detects potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).",
        "tags": [
            "attack.persistence",
            "attack.t1137.006"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\Microsoft\\\\Word\\\\Startup\\\\', case=False) & TargetFilename.str.contains(r'.wll', case=False) | TargetFilename.str.contains(r'\\\\Microsoft\\\\Excel\\\\Startup\\\\', case=False) & TargetFilename.str.contains(r'.xll', case=False) | TargetFilename.str.contains(r'Microsoft\\\\Excel\\\\XLSTART\\\\', case=False) & TargetFilename.str.contains(r'.xlam', case=False) | TargetFilename.str.contains(r'\\\\Microsoft\\\\Addins\\\\', case=False) & (TargetFilename.str.contains(r'.xlam', case=False) | TargetFilename.str.contains(r'.xla', case=False) | TargetFilename.str.contains(r'.ppam', case=False)))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Malicious DLL File Dropped in the Teams or OneDrive Folder",
        "id": "1908fcc1-1b92-4272-8214-0fbaf2fa5163",
        "status": "test",
        "description": "Detects creation of a malicious DLL file in the location where the OneDrive or Team applications\nUpon execution of the Teams or OneDrive application, the dropped malicious DLL file (\"iphlpapi.dll\") is sideloaded\n",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'iphlpapi.dll', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Custom Shim Database Created",
        "id": "ee63c85c-6d51-4d12-ad09-04e25877a947",
        "status": "test",
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.\nThe Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time.\n",
        "tags": [
            "attack.persistence",
            "attack.t1547.009"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r':\\\\Windows\\\\apppatch\\\\Custom\\\\', case=False) | TargetFilename.str.contains(r':\\\\Windows\\\\apppatch\\\\CustomSDB\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PDF File Created By RegEdit.EXE",
        "id": "145095eb-e273-443b-83d0-f9b519b7867b",
        "status": "experimental",
        "description": "Detects the creation of a file with the \".pdf\" extension by the \"RegEdit.exe\" process.\nThis indicates that a user is trying to print/save a registry key as a PDF in order to potentially extract sensitive information and bypass defenses.\n",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\regedit.exe', case=False) & TargetFilename.str.contains(r'.pdf', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Creation Exe for Service with Unquoted Path",
        "id": "8c3c76ca-8f8b-4b1d-aaf3-81aebcd367c9",
        "status": "test",
        "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references.\nAdversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.\n",
        "tags": [
            "attack.persistence",
            "attack.t1547.009"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename=='C:\\\\program.exe'"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - QuarksPwDump Dump File",
        "id": "847def9e-924d-4e90-b7c4-5f581395a2b4",
        "status": "test",
        "description": "Detects a dump file written by QuarksPwDump password dumper",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\SAM-', case=False) & TargetFilename.str.contains(r'.dmp', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Privilege Escalation Attempt Via .Exe.Local Technique",
        "id": "07a99744-56ac-40d2-97b7-2095967b0e03",
        "status": "test",
        "description": "Detects potential privilege escalation attempt via the creation of the \"*.Exe.Local\" folder inside the \"System32\" directory in order to sideload \"comctl32.dll\"",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\logonUI.exe.local', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\werFault.exe.local', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\consent.exe.local', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\narrator.exe.local', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\wermgr.exe.local', case=False)) & TargetFilename.str.contains(r'\\\\comctl32.dll', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Module File Created By Non-PowerShell Process",
        "id": "e3845023-ca9a-4024-b2b2-5422156d5527",
        "status": "test",
        "description": "Detects the creation of a new PowerShell module \".psm1\", \".psd1\", \".dll\", \".ps1\", etc. by a non-PowerShell process",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\WindowsPowerShell\\\\Modules\\\\', case=False) | TargetFilename.str.contains(r'\\\\PowerShell\\\\7\\\\Modules\\\\', case=False)) & ~ (Image.str.contains(r':\\\\Program Files\\\\PowerShell\\\\7-preview\\\\pwsh.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\poqexec.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\poqexec.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ISO or Image Mount Indicator in Recent Files",
        "id": "4358e5a5-7542-4dcb-b9f3-87667371839b",
        "status": "test",
        "description": "Detects the creation of recent element file that points to an .ISO, .IMG, .VHD or .VHDX file as often used in phishing attacks.\nThis can be a false positive on server systems but on workstations users should rarely mount .iso or .img files.\n",
        "tags": [
            "attack.initial-access",
            "attack.t1566.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'.iso.lnk', case=False) | TargetFilename.str.contains(r'.img.lnk', case=False) | TargetFilename.str.contains(r'.vhd.lnk', case=False) | TargetFilename.str.contains(r'.vhdx.lnk', case=False)) & TargetFilename.str.contains(r'\\\\Microsoft\\\\Windows\\\\Recent\\\\', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Double Extension Files",
        "id": "b4926b47-a9d7-434c-b3a0-adc3fa0bd13e",
        "status": "test",
        "description": "Detects dropped files with double extensions, which is often used by malware as a method to abuse the fact that Windows hide default extensions by default.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.007"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & ((TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'.iso', case=False) | TargetFilename.str.contains(r'.rar', case=False) | TargetFilename.str.contains(r'.zip', case=False)) & (TargetFilename.str.contains(r'.doc.', case=False) | TargetFilename.str.contains(r'.docx.', case=False) | TargetFilename.str.contains(r'.jpg.', case=False) | TargetFilename.str.contains(r'.pdf.', case=False) | TargetFilename.str.contains(r'.ppt.', case=False) | TargetFilename.str.contains(r'.pptx.', case=False) | TargetFilename.str.contains(r'.xls.', case=False) | TargetFilename.str.contains(r'.xlsx.', case=False)) | TargetFilename.str.contains(r'.rar.exe', case=False) | TargetFilename.str.contains(r'.zip.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Script Dropped Via PowerShell.EXE",
        "id": "576426ad-0131-4001-ae01-be175da0c108",
        "status": "test",
        "description": "Detects PowerShell creating a PowerShell file (.ps1). While often times this behavior is benign, sometimes it can be a sign of a dropper script trying to achieve persistence.",
        "tags": [
            "attack.persistence"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & TargetFilename.str.contains(r'.ps1', case=False) & ~ (TargetFilename.str.contains(r'__PSScriptPolicyTest_', case=False) | TargetFilename.str.contains(r'C:\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Microsoft Office Startup Folder",
        "id": "0e20c89d-2264-44ae-8238-aeeaba609ece",
        "status": "test",
        "description": "Detects creation of Microsoft Office files inside of one of the default startup folders in order to achieve persistence.",
        "tags": [
            "attack.persistence",
            "attack.t1137"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & ((TargetFilename.str.contains(r'\\\\Microsoft\\\\Word\\\\STARTUP', case=False) | TargetFilename.str.contains(r'\\\\Office', case=False) & TargetFilename.str.contains(r'\\\\Program Files', case=False) & TargetFilename.str.contains(r'\\\\STARTUP', case=False)) & (TargetFilename.str.contains(r'.doc', case=False) | TargetFilename.str.contains(r'.docm', case=False) | TargetFilename.str.contains(r'.docx', case=False) | TargetFilename.str.contains(r'.dot', case=False) | TargetFilename.str.contains(r'.dotm', case=False) | TargetFilename.str.contains(r'.rtf', case=False)) | (TargetFilename.str.contains(r'\\\\Microsoft\\\\Excel\\\\XLSTART', case=False) | TargetFilename.str.contains(r'\\\\Office', case=False) & TargetFilename.str.contains(r'\\\\Program Files', case=False) & TargetFilename.str.contains(r'\\\\XLSTART', case=False)) & (TargetFilename.str.contains(r'.xls', case=False) | TargetFilename.str.contains(r'.xlsm', case=False) | TargetFilename.str.contains(r'.xlsx', case=False) | TargetFilename.str.contains(r'.xlt', case=False) | TargetFilename.str.contains(r'.xltm', case=False))) & ~ (Image.str.contains(r'\\\\WINWORD.exe', case=False) | Image.str.contains(r'\\\\EXCEL.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious LNK Double Extension File Created",
        "id": "3215aa19-f060-4332-86d5-5602511f3ca8",
        "status": "test",
        "description": "Detects the creation of files with an \"LNK\" as a second extension. This is sometimes used by malware as a method to abuse the fact that Windows hides the \"LNK\" extension by default.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.007"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'.lnk', case=False) & (TargetFilename.str.contains(r'.doc.', case=False) | TargetFilename.str.contains(r'.docx.', case=False) | TargetFilename.str.contains(r'.jpg.', case=False) | TargetFilename.str.contains(r'.pdf.', case=False) | TargetFilename.str.contains(r'.ppt.', case=False) | TargetFilename.str.contains(r'.pptx.', case=False) | TargetFilename.str.contains(r'.xls.', case=False) | TargetFilename.str.contains(r'.xlsx.', case=False)) & ~ TargetFilename.str.contains(r'\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Recent\\\\', case=False) & ~ ((Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) | Image.str.contains(r'\\\\winword.exe', case=False)) & TargetFilename.str.contains(r'\\\\AppData\\\\Roaming\\\\Microsoft\\\\Office\\\\Recent\\\\', case=False) | Image.str.contains(r'\\\\excel.exe', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Roaming\\\\Microsoft\\\\Excel', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Roaming\\\\Microsoft\\\\PowerPoint', case=False) | Image.str.contains(r'\\\\winword.exe', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Roaming\\\\Microsoft\\\\Word', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "TeamViewer Remote Session",
        "id": "162ab1e4-6874-4564-853c-53ec3ab8be01",
        "status": "test",
        "description": "Detects the creation of log files during a TeamViewer remote session",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\TeamViewer\\\\RemotePrinting\\\\tvprint.db', case=False) | TargetFilename.str.contains(r'\\\\TeamViewer\\\\TVNetwork.log', case=False) | TargetFilename.str.contains(r'\\\\TeamViewer', case=False) & TargetFilename.str.contains(r'_Logfile.log', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using Consent and Comctl32 - File",
        "id": "62ed5b55-f991-406a-85d9-e8e8fdf18789",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\consent.exe.@', case=False) & TargetFilename.str.contains(r'\\\\comctl32.dll', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious ASPX File Drop by Exchange",
        "id": "bd1212e5-78da-431e-95fa-c58e3237a8e6",
        "status": "test",
        "description": "Detects suspicious file type dropped by an Exchange component in IIS into a suspicious folder",
        "tags": [
            "attack.persistence",
            "attack.t1505.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\w3wp.exe', case=False) & CommandLine.str.contains(r'MSExchange', case=False) & (TargetFilename.str.contains(r'FrontEnd\\\\HttpProxy\\\\', case=False) | TargetFilename.str.contains(r'\\\\inetpub\\\\wwwroot\\\\aspnet_client\\\\', case=False)) & (TargetFilename.str.contains(r'.aspx', case=False) | TargetFilename.str.contains(r'.asp', case=False) | TargetFilename.str.contains(r'.ashx', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using NTFS Reparse Point - File",
        "id": "7fff6773-2baa-46de-a24a-b6eec1aba2d1",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'C:\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\api-ms-win-core-kernel32-legacy-l1.DLL', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Typical HiveNightmare SAM File Export",
        "id": "6ea858a8-ba71-4a12-b2cc-5d83312404c7",
        "status": "test",
        "description": "Detects files written by the different tools that exploit HiveNightmare",
        "tags": [
            "attack.credential-access",
            "attack.t1552.001",
            "cve.2021-36934"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\hive_sam_', case=False) | TargetFilename.str.contains(r'\\\\SAM-2021-', case=False) | TargetFilename.str.contains(r'\\\\SAM-2022-', case=False) | TargetFilename.str.contains(r'\\\\SAM-2023-', case=False) | TargetFilename.str.contains(r'\\\\SAM-haxx', case=False) | TargetFilename.str.contains(r'\\\\Sam.save', case=False) | TargetFilename=='C:\\\\windows\\\\temp\\\\sam')"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Hidden Directory Creation Via NTFS INDEX_ALLOCATION Stream",
        "id": "a8f866e1-bdd4-425e-a27a-37619238d9c7",
        "status": "test",
        "description": "Detects the creation of hidden file/folder with the \"::$index_allocation\" stream. Which can be used as a technique to prevent access to folder and files from tooling such as \"explorer.exe\" and \"powershell.exe\"\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'::$index_allocation', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Files in Default GPO Folder",
        "id": "5f87308a-0a5b-4623-ae15-d8fa1809bc60",
        "status": "test",
        "description": "Detects the creation of copy of suspicious files (EXE/DLL) to the default GPO storage folder",
        "tags": [
            "attack.t1036.005",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\\\', case=False) & (TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Self Extraction Directive File Created In Potentially Suspicious Location",
        "id": "760e75d8-c3b5-409b-a9bf-6130b4c4603f",
        "status": "test",
        "description": "Detects the creation of Self Extraction Directive files (.sed) in a potentially suspicious location.\nThese files are used by the \"iexpress.exe\" utility in order to create self extracting packages.\nAttackers were seen abusing this utility and creating PE files with embedded \".sed\" entries.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r':\\\\ProgramData\\\\', case=False) | TargetFilename.str.contains(r':\\\\Temp\\\\', case=False) | TargetFilename.str.contains(r':\\\\Windows\\\\System32\\\\Tasks\\\\', case=False) | TargetFilename.str.contains(r':\\\\Windows\\\\Tasks\\\\', case=False) | TargetFilename.str.contains(r':\\\\Windows\\\\Temp\\\\', case=False) | TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False)) & TargetFilename.str.contains(r'.sed', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "NTDS.DIT Creation By Uncommon Process",
        "id": "11b1ed55-154d-4e82-8ad7-83739298f720",
        "status": "test",
        "description": "Detects creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon process or a process located in a suspicious directory",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002",
            "attack.t1003.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\ntds.dit', case=False) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\wsl.exe', case=False) | Image.str.contains(r'\\\\wt.exe', case=False) | Image.str.contains(r'\\\\AppData\\\\', case=False) | Image.str.contains(r'\\\\Temp\\\\', case=False) | Image.str.contains(r'\\\\Public\\\\', case=False) | Image.str.contains(r'\\\\PerfLogs\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential SAM Database Dump",
        "id": "4e87b8e2-2ee9-4b2a-a715-4727d297ece0",
        "status": "test",
        "description": "Detects the creation of files that look like exports of the local SAM (Security Account Manager)",
        "tags": [
            "attack.credential-access",
            "attack.t1003.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\Temp\\\\sam', case=False) | TargetFilename.str.contains(r'\\\\sam.sav', case=False) | TargetFilename.str.contains(r'\\\\Intel\\\\sam', case=False) | TargetFilename.str.contains(r'\\\\sam.hive', case=False) | TargetFilename.str.contains(r'\\\\Perflogs\\\\sam', case=False) | TargetFilename.str.contains(r'\\\\ProgramData\\\\sam', case=False) | TargetFilename.str.contains(r'\\\\Users\\\\Public\\\\sam', case=False) | TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\sam', case=False) | TargetFilename.str.contains(r'\\\\AppData\\\\Roaming\\\\sam', case=False) | TargetFilename.str.contains(r'_ShadowSteal.zip', case=False) | TargetFilename.str.contains(r'\\\\Documents\\\\SAM.export', case=False) | TargetFilename.str.contains(r':\\\\sam', case=False) | TargetFilename.str.contains(r'\\\\hive_sam_', case=False) | TargetFilename.str.contains(r'\\\\sam.save', case=False) | TargetFilename.str.contains(r'\\\\sam.export', case=False) | TargetFilename.str.contains(r'\\\\~reg_sam.save', case=False) | TargetFilename.str.contains(r'\\\\sam_backup', case=False) | TargetFilename.str.contains(r'\\\\sam.bck', case=False) | TargetFilename.str.contains(r'\\\\sam.backup', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "VsCode Powershell Profile Modification",
        "id": "3a9fa2ec-30bc-4ebd-b49e-7c9cff225502",
        "status": "test",
        "description": "Detects the creation or modification of a vscode related powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1546.013"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\Microsoft.VSCode_profile.ps1', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Office Macro File Creation From Suspicious Process",
        "id": "b1c50487-1967-4315-a026-6491686d860e",
        "status": "test",
        "description": "Detects the creation of a office macro file from a a suspicious process",
        "tags": [
            "attack.initial-access",
            "attack.t1566.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | ParentImage.str.contains(r'\\\\cscript.exe', case=False) | ParentImage.str.contains(r'\\\\mshta.exe', case=False) | ParentImage.str.contains(r'\\\\regsvr32.exe', case=False) | ParentImage.str.contains(r'\\\\rundll32.exe', case=False) | ParentImage.str.contains(r'\\\\wscript.exe', case=False)) & (TargetFilename.str.contains(r'.docm', case=False) | TargetFilename.str.contains(r'.dotm', case=False) | TargetFilename.str.contains(r'.xlsm', case=False) | TargetFilename.str.contains(r'.xltm', case=False) | TargetFilename.str.contains(r'.potm', case=False) | TargetFilename.str.contains(r'.pptm', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Startup Folder File Write",
        "id": "2aa0a6b4-a865-495b-ab51-c28249537b75",
        "status": "test",
        "description": "A General detection for files being created in the Windows startup directory. This could be an indicator of persistence.",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\StartUp', case=False) & ~ (Image=='C:\\\\Windows\\\\System32\\\\wuauclt.exe' | TargetFilename.str.contains(r'C:\\\\$WINDOWS.~BT\\\\NewOS\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LSASS Process Memory Dump Files",
        "id": "a5a2d357-1ab8-4675-a967-ef9990a59391",
        "status": "test",
        "description": "Detects creation of files with names used by different memory dumping tools to create a memory dump of the LSASS process memory, which contains user credentials.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\Andrew.dmp', case=False) | TargetFilename.str.contains(r'\\\\Coredump.dmp', case=False) | TargetFilename.str.contains(r'\\\\lsass.dmp', case=False) | TargetFilename.str.contains(r'\\\\lsass.rar', case=False) | TargetFilename.str.contains(r'\\\\lsass.zip', case=False) | TargetFilename.str.contains(r'\\\\NotLSASS.zip', case=False) | TargetFilename.str.contains(r'\\\\PPLBlade.dmp', case=False) | TargetFilename.str.contains(r'\\\\rustive.dmp', case=False) | TargetFilename.str.contains(r'\\\\lsass_2', case=False) | TargetFilename.str.contains(r'\\\\lsassdmp', case=False) | TargetFilename.str.contains(r'\\\\lsassdump', case=False) | TargetFilename.str.contains(r'\\\\lsass', case=False) & TargetFilename.str.contains(r'.dmp', case=False) | TargetFilename.str.contains(r'SQLDmpr', case=False) & TargetFilename.str.contains(r'.mdmp', case=False) | (TargetFilename.str.contains(r'\\\\nanodump', case=False) | TargetFilename.str.contains(r'\\\\proc_', case=False)) & TargetFilename.str.contains(r'.dmp', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Winnti Dropper Activity",
        "id": "130c9e58-28ac-4f83-8574-0a4cc913b97e",
        "status": "test",
        "description": "Detects files dropped by Winnti as described in RedMimicry Winnti playbook",
        "tags": [
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\gthread-3.6.dll', case=False) | TargetFilename.str.contains(r'\\\\sigcmm-2.4.dll', case=False) | TargetFilename.str.contains(r'\\\\Windows\\\\Temp\\\\tmp.bat', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Abusing Winsat Path Parsing - File",
        "id": "155dbf56-e0a4-4dd0-8905-8a98705045e8",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'C:\\\\Users\\\\', case=False) & (TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\system32\\\\winsat.exe', case=False) | TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\system32\\\\winmm.dll', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Inveigh Execution Artefacts",
        "id": "bb09dd3e-2b78-4819-8e35-a7c1b874e449",
        "status": "test",
        "description": "Detects the presence and execution of Inveigh via dropped artefacts",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\Inveigh-Log.txt', case=False) | TargetFilename.str.contains(r'\\\\Inveigh-Cleartext.txt', case=False) | TargetFilename.str.contains(r'\\\\Inveigh-NTLMv1Users.txt', case=False) | TargetFilename.str.contains(r'\\\\Inveigh-NTLMv2Users.txt', case=False) | TargetFilename.str.contains(r'\\\\Inveigh-NTLMv1.txt', case=False) | TargetFilename.str.contains(r'\\\\Inveigh-NTLMv2.txt', case=False) | TargetFilename.str.contains(r'\\\\Inveigh-FormInput.txt', case=False) | TargetFilename.str.contains(r'\\\\Inveigh.dll', case=False) | TargetFilename.str.contains(r'\\\\Inveigh.exe', case=False) | TargetFilename.str.contains(r'\\\\Inveigh.ps1', case=False) | TargetFilename.str.contains(r'\\\\Inveigh-Relay.ps1', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Assembly DLL Creation Via AspNetCompiler",
        "id": "4c7f49ee-2638-43bb-b85b-ce676c30b260",
        "status": "test",
        "description": "Detects the creation of new DLL assembly files by \"aspnet_compiler.exe\", which could be a sign of \"aspnet_compiler\" abuse to proxy execution through a build provider.\n",
        "tags": [
            "attack.execution"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\aspnet_compiler.exe', case=False) & TargetFilename.str.contains(r'\\\\Temporary ASP.NET Files\\\\', case=False) & TargetFilename.str.contains(r'\\\\assembly\\\\tmp\\\\', case=False) & TargetFilename.str.contains(r'.dll', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - RemoteKrbRelay SMB Relay Secrets Dump Module Indicators",
        "id": "3ab79e90-9fab-4cdf-a7b2-6522bc742adb",
        "status": "experimental",
        "description": "Detects the creation of file with specific names used by RemoteKrbRelay SMB Relay attack module.",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r':\\\\windows\\\\temp\\\\sam.tmp', case=False) | TargetFilename.str.contains(r':\\\\windows\\\\temp\\\\sec.tmp', case=False) | TargetFilename.str.contains(r':\\\\windows\\\\temp\\\\sys.tmp', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Files With System Process Name In Unsuspected Locations",
        "id": "d5866ddf-ce8f-4aea-b28e-d96485a20d3d",
        "status": "test",
        "description": "Detects the creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64, etc.).\nIt is highly recommended to perform an initial baseline before using this rule in production.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036.005"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\AtBroker.exe', case=False) | TargetFilename.str.contains(r'\\\\audiodg.exe', case=False) | TargetFilename.str.contains(r'\\\\backgroundTaskHost.exe', case=False) | TargetFilename.str.contains(r'\\\\bcdedit.exe', case=False) | TargetFilename.str.contains(r'\\\\bitsadmin.exe', case=False) | TargetFilename.str.contains(r'\\\\cmdl32.exe', case=False) | TargetFilename.str.contains(r'\\\\cmstp.exe', case=False) | TargetFilename.str.contains(r'\\\\conhost.exe', case=False) | TargetFilename.str.contains(r'\\\\csrss.exe', case=False) | TargetFilename.str.contains(r'\\\\dasHost.exe', case=False) | TargetFilename.str.contains(r'\\\\dfrgui.exe', case=False) | TargetFilename.str.contains(r'\\\\dllhost.exe', case=False) | TargetFilename.str.contains(r'\\\\dwm.exe', case=False) | TargetFilename.str.contains(r'\\\\eventcreate.exe', case=False) | TargetFilename.str.contains(r'\\\\eventvwr.exe', case=False) | TargetFilename.str.contains(r'\\\\explorer.exe', case=False) | TargetFilename.str.contains(r'\\\\extrac32.exe', case=False) | TargetFilename.str.contains(r'\\\\fontdrvhost.exe', case=False) | TargetFilename.str.contains(r'\\\\ipconfig.exe', case=False) | TargetFilename.str.contains(r'\\\\iscsicli.exe', case=False) | TargetFilename.str.contains(r'\\\\iscsicpl.exe', case=False) | TargetFilename.str.contains(r'\\\\logman.exe', case=False) | TargetFilename.str.contains(r'\\\\LogonUI.exe', case=False) | TargetFilename.str.contains(r'\\\\LsaIso.exe', case=False) | TargetFilename.str.contains(r'\\\\lsass.exe', case=False) | TargetFilename.str.contains(r'\\\\lsm.exe', case=False) | TargetFilename.str.contains(r'\\\\msiexec.exe', case=False) | TargetFilename.str.contains(r'\\\\msinfo32.exe', case=False) | TargetFilename.str.contains(r'\\\\mstsc.exe', case=False) | TargetFilename.str.contains(r'\\\\nbtstat.exe', case=False) | TargetFilename.str.contains(r'\\\\odbcconf.exe', case=False) | TargetFilename.str.contains(r'\\\\powershell.exe', case=False) | TargetFilename.str.contains(r'\\\\pwsh.exe', case=False) | TargetFilename.str.contains(r'\\\\regini.exe', case=False) | TargetFilename.str.contains(r'\\\\regsvr32.exe', case=False) | TargetFilename.str.contains(r'\\\\rundll32.exe', case=False) | TargetFilename.str.contains(r'\\\\RuntimeBroker.exe', case=False) | TargetFilename.str.contains(r'\\\\schtasks.exe', case=False) | TargetFilename.str.contains(r'\\\\SearchFilterHost.exe', case=False) | TargetFilename.str.contains(r'\\\\SearchIndexer.exe', case=False) | TargetFilename.str.contains(r'\\\\SearchProtocolHost.exe', case=False) | TargetFilename.str.contains(r'\\\\SecurityHealthService.exe', case=False) | TargetFilename.str.contains(r'\\\\SecurityHealthSystray.exe', case=False) | TargetFilename.str.contains(r'\\\\services.exe', case=False) | TargetFilename.str.contains(r'\\\\ShellAppRuntime.exe', case=False) | TargetFilename.str.contains(r'\\\\sihost.exe', case=False) | TargetFilename.str.contains(r'\\\\smartscreen.exe', case=False) | TargetFilename.str.contains(r'\\\\smss.exe', case=False) | TargetFilename.str.contains(r'\\\\spoolsv.exe', case=False) | TargetFilename.str.contains(r'\\\\svchost.exe', case=False) | TargetFilename.str.contains(r'\\\\SystemSettingsBroker.exe', case=False) | TargetFilename.str.contains(r'\\\\taskhost.exe', case=False) | TargetFilename.str.contains(r'\\\\taskhostw.exe', case=False) | TargetFilename.str.contains(r'\\\\Taskmgr.exe', case=False) | TargetFilename.str.contains(r'\\\\TiWorker.exe', case=False) | TargetFilename.str.contains(r'\\\\vssadmin.exe', case=False) | TargetFilename.str.contains(r'\\\\w32tm.exe', case=False) | TargetFilename.str.contains(r'\\\\WerFault.exe', case=False) | TargetFilename.str.contains(r'\\\\WerFaultSecure.exe', case=False) | TargetFilename.str.contains(r'\\\\wermgr.exe', case=False) | TargetFilename.str.contains(r'\\\\wevtutil.exe', case=False) | TargetFilename.str.contains(r'\\\\wininit.exe', case=False) | TargetFilename.str.contains(r'\\\\winlogon.exe', case=False) | TargetFilename.str.contains(r'\\\\winrshost.exe', case=False) | TargetFilename.str.contains(r'\\\\WinRTNetMUAHostServer.exe', case=False) | TargetFilename.str.contains(r'\\\\wlanext.exe', case=False) | TargetFilename.str.contains(r'\\\\wlrmdr.exe', case=False) | TargetFilename.str.contains(r'\\\\WmiPrvSE.exe', case=False) | TargetFilename.str.contains(r'\\\\wslhost.exe', case=False) | TargetFilename.str.contains(r'\\\\WSReset.exe', case=False) | TargetFilename.str.contains(r'\\\\WUDFHost.exe', case=False) | TargetFilename.str.contains(r'\\\\WWAHost.exe', case=False)) & ~ (TargetFilename.str.contains(r'C:\\\\$WINDOWS.~BT\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\$WinREAgent\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\SoftwareDistribution\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\uus\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\system32\\\\svchost.exe', case=False) & TargetFilename.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\wuauclt.exe', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\explorer.exe', case=False) | Image.str.contains(r'C:\\\\WINDOWS\\\\system32\\\\msiexec.exe', case=False) & (TargetFilename.str.contains(r'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', case=False) | TargetFilename.str.contains(r'C:\\\\Program Files\\\\PowerShell\\\\7-preview\\\\pwsh.exe', case=False)) | TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\SecurityHealth\\\\', case=False) & TargetFilename.str.contains(r'\\\\SecurityHealthSystray.exe', case=False) & Image.str.contains(r'\\\\SecurityHealthSetup.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Advanced IP Scanner - File Event",
        "id": "fed85bf9-e075-4280-9159-fbe8a023d6fa",
        "status": "test",
        "description": "Detects the use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.",
        "tags": [
            "attack.discovery",
            "attack.t1046"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\Advanced IP Scanner 2', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Octopus Scanner Malware",
        "id": "805c55d9-31e6-4846-9878-c34c75054fe9",
        "status": "test",
        "description": "Detects Octopus Scanner Malware.",
        "tags": [
            "attack.t1195",
            "attack.t1195.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\Cache134.dat', case=False) | TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\ExplorerSync.db', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LiveKD Driver Creation By Uncommon Process",
        "id": "059c5af9-5131-4d8d-92b2-de4ad6146712",
        "status": "test",
        "description": "Detects the creation of the LiveKD driver by a process image other than \"livekd.exe\".",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename=='C:\\\\Windows\\\\System32\\\\drivers\\\\LiveKdD.SYS' & ~ (Image.str.contains(r'\\\\livekd.exe', case=False) | Image.str.contains(r'\\\\livek64.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Creation Of Non-Existent System DLL",
        "id": "df6ecb8b-7822-4f4b-b412-08f524b4576c",
        "status": "test",
        "description": "Detects the creation of system DLLs that are usually not present on the system (or at least not in system directories).\nUsually this technique is used to achieve DLL hijacking.\n",
        "tags": [
            "attack.defense-evasion",
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1574.001",
            "attack.t1574.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r':\\\\Windows\\\\System32\\\\TSMSISrv.dll', case=False) | TargetFilename.str.contains(r':\\\\Windows\\\\System32\\\\TSVIPSrv.dll', case=False) | TargetFilename.str.contains(r':\\\\Windows\\\\System32\\\\wbem\\\\wbemcomn.dll', case=False) | TargetFilename.str.contains(r':\\\\Windows\\\\System32\\\\WLBSCTRL.dll', case=False) | TargetFilename.str.contains(r':\\\\Windows\\\\System32\\\\wow64log.dll', case=False) | TargetFilename.str.contains(r':\\\\Windows\\\\System32\\\\WptsExtensions.dll', case=False) | TargetFilename.str.contains(r'\\\\SprintCSP.dll', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UEFI Persistence Via Wpbbin - FileCreation",
        "id": "e94b9ddc-eec5-4bb8-8a58-b9dc5f4e185f",
        "status": "test",
        "description": "Detects creation of a file named \"wpbbin\" in the \"%systemroot%\\system32\\\" directory. Which could be indicative of UEFI based persistence method",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.t1542.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename=='C:\\\\Windows\\\\System32\\\\wpbbin.exe'"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "OneNote Attachment File Dropped In Suspicious Location",
        "id": "7fd164ba-126a-4d9c-9392-0d4f7c243df0",
        "status": "test",
        "description": "Detects creation of files with the \".one\"/\".onepkg\" extension in suspicious or uncommon locations. This could be a sign of attackers abusing OneNote attachments",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | TargetFilename.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | TargetFilename.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | TargetFilename.str.contains(r':\\\\Temp\\\\', case=False)) & (TargetFilename.str.contains(r'.one', case=False) | TargetFilename.str.contains(r'.onepkg', case=False)) & ~ (Image.str.contains(r':\\\\Program Files\\\\Microsoft Office\\\\', case=False) & Image.str.contains(r'\\\\ONENOTE.EXE', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Suspicious PowerShell Module File Created",
        "id": "e8a52bbd-bced-459f-bd93-64db45ce7657",
        "status": "test",
        "description": "Detects the creation of a new PowerShell module in the first folder of the module directory structure \"\\WindowsPowerShell\\Modules\\malware\\malware.psm1\". This is somewhat an uncommon practice as legitimate modules often includes a version folder.",
        "tags": [
            "attack.persistence"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'*\\\\WindowsPowerShell\\\\Modules\\\\*\\\\.ps') | TargetFilename.str.contains(r'*\\\\WindowsPowerShell\\\\Modules\\\\*\\\\.dll'))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "NTDS.DIT Created",
        "id": "0b8baa3f-575c-46ee-8715-d6f28cc7d33c",
        "status": "test",
        "description": "Detects creation of a file named \"ntds.dit\" (Active Directory Database)",
        "tags": [
            "attack.credential-access",
            "attack.t1003.003"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'ntds.dit', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Remote Access Tool - ScreenConnect Temporary File",
        "id": "0afecb6e-6223-4a82-99fb-bf5b981e92a5",
        "status": "test",
        "description": "Detects the creation of files in a specific location by ScreenConnect RMM.\nScreenConnect has feature to remotely execute binaries on a target machine. These binaries will be dropped to \":\\Users\\<username>\\Documents\\ConnectWiseControl\\Temp\\\" before execution.\n",
        "tags": [
            "attack.execution",
            "attack.t1059.003"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\ScreenConnect.WindowsClient.exe', case=False) & TargetFilename.str.contains(r'\\\\Documents\\\\ConnectWiseControl\\\\Temp\\\\', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Creation with Colorcpl",
        "id": "e15b518d-b4ce-4410-a9cd-501f23ce4a18",
        "status": "test",
        "description": "Once executed, colorcpl.exe will copy the arbitrary file to c:\\windows\\system32\\spool\\drivers\\color\\",
        "tags": [
            "attack.defense-evasion",
            "attack.t1564"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\colorcpl.exe', case=False) & ~ (TargetFilename.str.contains(r'.icm', case=False) | TargetFilename.str.contains(r'.gmmp', case=False) | TargetFilename.str.contains(r'.cdmp', case=False) | TargetFilename.str.contains(r'.camp', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "CSExec Service File Creation",
        "id": "f0e2b768-5220-47dd-b891-d57b96fc0ec1",
        "status": "test",
        "description": "Detects default CSExec service filename which indicates CSExec service installation and execution",
        "tags": [
            "attack.execution",
            "attack.t1569.002",
            "attack.s0029"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\csexecsvc.exe', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Interactive PowerShell as SYSTEM",
        "id": "5b40a734-99b6-4b98-a1d0-1cea51a08ab2",
        "status": "test",
        "description": "Detects the creation of files that indicator an interactive use of PowerShell in the SYSTEM user context",
        "tags": [
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename==['C:\\\\Windows\\\\System32\\\\config\\\\systemprofile\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine\\\\ConsoleHost_history.txt', 'C:\\\\Windows\\\\System32\\\\config\\\\systemprofile\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\PowerShell\\\\StartupProfileData-Interactive'])"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "GoToAssist Temporary Installation Artefact",
        "id": "5d756aee-ad3e-4306-ad95-cb1abec48de2",
        "status": "test",
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\LogMeInInc\\\\GoToAssist Remote Support Expert\\\\', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using IDiagnostic Profile - File",
        "id": "48ea844d-19b1-4642-944e-fe39c2cc1fec",
        "status": "test",
        "description": "Detects the creation of a file by \"dllhost.exe\" in System32 directory part of \"IDiagnosticProfileUAC\" UAC bypass technique",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\DllHost.exe', case=False) & TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) & TargetFilename.str.contains(r'.dll', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Hijack Legit RDP Session to Move Laterally",
        "id": "52753ea4-b3a0-4365-910d-36cff487b789",
        "status": "test",
        "description": "Detects the usage of tsclient share to place a backdoor on the RDP source machine's startup folder",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\mstsc.exe', case=False) & TargetFilename.str.contains(r'\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PCRE.NET Package Temp Files",
        "id": "6e90ae7a-7cd3-473f-a035-4ebb72d961da",
        "status": "test",
        "description": "Detects processes creating temp files related to PCRE.NET package",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\ba9ea7344a4a5f591d6e5dc32a13494b\\\\', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl - File",
        "id": "d353dac0-1b41-46c2-820c-d7d2561fc6ed",
        "status": "test",
        "description": "Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)",
        "tags": [
            "attack.defense-evasion",
            "attack.t1216"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'WsmPty.xsl', case=False) | TargetFilename.str.contains(r'WsmTxt.xsl', case=False)) & ~ (TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Creation of WerFault.exe/Wer.dll in Unusual Folder",
        "id": "28a452f3-786c-4fd8-b8f2-bddbe9d616d1",
        "status": "test",
        "description": "Detects the creation of a file named \"WerFault.exe\" or \"wer.dll\" in an uncommon folder, which could be a sign of WerFault DLL hijacking.",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.t1574.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\WerFault.exe', case=False) | TargetFilename.str.contains(r'\\\\wer.dll', case=False)) & ~ (TargetFilename.str.contains(r'C:\\\\Windows\\\\SoftwareDistribution\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\WinSxS\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WScript or CScript Dropper - File",
        "id": "002bdb95-0cf1-46a6-9e08-d38c128a6127",
        "status": "test",
        "description": "Detects a file ending in jse, vbe, js, vba, vbs written by cscript.exe or wscript.exe",
        "tags": [
            "attack.execution",
            "attack.t1059.005",
            "attack.t1059.007"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False)) & (TargetFilename.str.contains(r'C:\\\\Users\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\ProgramData', case=False)) & (TargetFilename.str.contains(r'.jse', case=False) | TargetFilename.str.contains(r'.vbe', case=False) | TargetFilename.str.contains(r'.js', case=False) | TargetFilename.str.contains(r'.vba', case=False) | TargetFilename.str.contains(r'.vbs', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DPAPI Backup Keys And Certificate Export Activity IOC",
        "id": "7892ec59-c5bb-496d-8968-e5d210ca3ac4",
        "status": "experimental",
        "description": "Detects file names with specific patterns seen generated and used by tools such as Mimikatz and DSInternals related to exported or stolen DPAPI backup keys and certificates.\n",
        "tags": [
            "attack.t1555",
            "attack.t1552.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'ntds_capi_', case=False) | TargetFilename.str.contains(r'ntds_legacy_', case=False) | TargetFilename.str.contains(r'ntds_unknown_', case=False)) & (TargetFilename.str.contains(r'.cer', case=False) | TargetFilename.str.contains(r'.key', case=False) | TargetFilename.str.contains(r'.pfx', case=False) | TargetFilename.str.contains(r'.pvk', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "UAC Bypass Using MSConfig Token Modification - File",
        "id": "41bb431f-56d8-4691-bb56-ed34e390906f",
        "status": "test",
        "description": "Detects the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1548.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'C:\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\pkgmgr.exe', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Get-Variable.exe Creation",
        "id": "0c3fac91-5627-46e8-a6a8-a0d7b9b8ae1b",
        "status": "test",
        "description": "Get-Variable is a valid PowerShell cmdlet\nWindowsApps is by default in the path where PowerShell is executed.\nSo when the Get-Variable command is issued on PowerShell execution, the system first looks for the Get-Variable executable in the path and executes the malicious binary instead of looking for the PowerShell cmdlet.\n",
        "tags": [
            "attack.persistence",
            "attack.t1546",
            "attack.defense-evasion",
            "attack.t1027"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'Local\\\\Microsoft\\\\WindowsApps\\\\Get-Variable.exe', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Wmiexec Default Output File",
        "id": "8d5aca11-22b3-4f22-b7ba-90e60533e1fb",
        "status": "test",
        "description": "Detects the creation of the default output filename used by the wmiexec tool",
        "tags": [
            "attack.lateral-movement",
            "attack.t1047"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\\\\\Windows\\\\\\\\__1\\\\d{9}\\\\.\\\\d{1,7}$') | TargetFilename.str.contains(r'C:\\\\\\\\__1\\\\d{9}\\\\.\\\\d{1,7}$') | TargetFilename.str.contains(r'D:\\\\\\\\__1\\\\d{9}\\\\.\\\\d{1,7}$'))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Anydesk Temporary Artefact",
        "id": "0b9ad457-2554-44c1-82c2-d56a99c42377",
        "status": "test",
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\AppData\\\\Roaming\\\\AnyDesk\\\\user.conf', case=False) | TargetFilename.str.contains(r'\\\\AppData\\\\Roaming\\\\AnyDesk\\\\system.conf', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Initial Access via DLL Search Order Hijacking",
        "id": "dbbd9f66-2ed3-4ca2-98a4-6ea985dd1a1c",
        "status": "test",
        "description": "Detects attempts to create a DLL file to a known desktop application dependencies folder such as Slack, Teams or OneDrive and by an unusual process. This may indicate an attempt to load a malicious module via DLL search order hijacking.",
        "tags": [
            "attack.t1566",
            "attack.t1566.001",
            "attack.initial-access",
            "attack.t1574",
            "attack.t1574.001",
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\winword.exe', case=False) | Image.str.contains(r'\\\\excel.exe', case=False) | Image.str.contains(r'\\\\powerpnt.exe', case=False) | Image.str.contains(r'\\\\MSACCESS.EXE', case=False) | Image.str.contains(r'\\\\MSPUB.EXE', case=False) | Image.str.contains(r'\\\\fltldr.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False) | Image.str.contains(r'\\\\curl.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & TargetFilename.str.contains(r'.dll', case=False) & TargetFilename.str.contains(r'\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\', case=False) & (TargetFilename.str.contains(r'\\\\Microsoft\\\\OneDrive\\\\', case=False) | TargetFilename.str.contains(r'\\\\Microsoft OneDrive\\\\', case=False) | TargetFilename.str.contains(r'\\\\Microsoft\\\\Teams\\\\', case=False) | TargetFilename.str.contains(r'\\\\Local\\\\slack\\\\app-', case=False) | TargetFilename.str.contains(r'\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\', case=False)) & ~ (Image.str.contains(r'\\\\cmd.exe', case=False) & TargetFilename.str.contains(r'\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\', case=False) & TargetFilename.str.contains(r'\\\\Microsoft\\\\OneDrive\\\\', case=False) & TargetFilename.str.contains(r'\\\\api-ms-win-core-', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Wmiprvse Wbemcomn DLL Hijack - File",
        "id": "614a7e17-5643-4d89-b6fe-f9df1a79641c",
        "status": "test",
        "description": "Detects a threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario.",
        "tags": [
            "attack.execution",
            "attack.t1047",
            "attack.lateral-movement",
            "attack.t1021.002"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image=='System' & TargetFilename.str.contains(r'\\\\wbem\\\\wbemcomn.dll', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Drop Binaries Into Spool Drivers Color Folder",
        "id": "ce7066a6-508a-42d3-995b-2952c65dc2ce",
        "status": "test",
        "description": "Detects the creation of suspcious binary files inside the \"\\windows\\system32\\spool\\drivers\\color\\\" as seen in the blog referenced below",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color\\\\', case=False) & (TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'.sys', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential File Extension Spoofing Using Right-to-Left Override",
        "id": "979baf41-ca44-4540-9d0c-4fcef3b5a3a4",
        "status": "experimental",
        "description": "Detects suspicious filenames that contain a right-to-left override character and a potentially spoofed file extensions.\n",
        "tags": [
            "attack.execution",
            "attack.defense-evasion",
            "attack.t1036.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\u202e', case=False) & (TargetFilename.str.contains(r'fpd..', case=False) | TargetFilename.str.contains(r'nls..', case=False) | TargetFilename.str.contains(r'vsc..', case=False) | TargetFilename.str.contains(r'xcod.', case=False) | TargetFilename.str.contains(r'xslx.', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "GatherNetworkInfo.VBS Reconnaissance Script Output",
        "id": "f92a6f1e-a512-4a15-9735-da09e78d7273",
        "status": "test",
        "description": "Detects creation of files which are the results of executing the built-in reconnaissance script \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\".",
        "tags": [
            "attack.discovery"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\config', case=False) & (TargetFilename.str.contains(r'\\\\Hotfixinfo.txt', case=False) | TargetFilename.str.contains(r'\\\\netiostate.txt', case=False) | TargetFilename.str.contains(r'\\\\sysportslog.txt', case=False) | TargetFilename.str.contains(r'\\\\VmSwitchLog.evtx', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "RemCom Service File Creation",
        "id": "7eff1a7f-dd45-4c20-877a-f21e342a7611",
        "status": "test",
        "description": "Detects default RemCom service filename which indicates RemCom service installation and execution",
        "tags": [
            "attack.execution",
            "attack.t1569.002",
            "attack.s0029"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\RemComSvc.exe', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - CrackMapExec File Indicators",
        "id": "736ffa74-5f6f-44ca-94ef-1c0df4f51d2a",
        "status": "experimental",
        "description": "Detects file creation events with filename patterns used by CrackMapExec.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False) & (TargetFilename.str.contains(r'\\\\temp.ps1', case=False) | TargetFilename.str.contains(r'\\\\msol.ps1', case=False) | TargetFilename.str.contains(r'\\\\\\\\[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\\\.txt$') | TargetFilename.str.contains(r'\\\\\\\\[a-zA-Z]{8}\\\\.tmp$'))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Potential Remote Credential Dumping Activity Via CrackMapExec Or Impacket-Secretsdump",
        "id": "6e2a900a-ced9-4e4a-a9c2-13e706f9518a",
        "status": "test",
        "description": "Detects default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint.",
        "tags": [
            "attack.credential-access",
            "attack.t1003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\svchost.exe', case=False) & TargetFilename.str.contains(r'\\\\\\\\Windows\\\\\\\\System32\\\\\\\\[a-zA-Z0-9]{8}\\\\.tmp$')"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Shell/Scripting Application File Write to Suspicious Folder",
        "id": "1277f594-a7d1-4f28-a2d3-73af5cbeab43",
        "status": "test",
        "description": "Detects Windows shells and scripting applications that write files to suspicious folders",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & ((Image.str.contains(r'\\\\bash.exe', case=False) | Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\cscript.exe', case=False) | Image.str.contains(r'\\\\msbuild.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\sh.exe', case=False) | Image.str.contains(r'\\\\wscript.exe', case=False)) & (TargetFilename.str.contains(r'C:\\\\PerfLogs\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Users\\\\Public\\\\', case=False)) | (Image.str.contains(r'\\\\certutil.exe', case=False) | Image.str.contains(r'\\\\forfiles.exe', case=False) | Image.str.contains(r'\\\\mshta.exe', case=False) | Image.str.contains(r'\\\\schtasks.exe', case=False) | Image.str.contains(r'\\\\scriptrunner.exe', case=False) | Image.str.contains(r'\\\\wmic.exe', case=False)) & (TargetFilename.str.contains(r'C:\\\\PerfLogs\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Users\\\\Public\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Windows\\\\Temp\\\\', case=False)))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": ".RDP File Created By Uncommon Application",
        "id": "fccfb43e-09a7-4bd2-8b37-a5a7df33386d",
        "status": "test",
        "description": "Detects creation of a file with an \".rdp\" extension by an application that doesn't commonly create such files.\n",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'.rdp', case=False) & (Image.str.contains(r'\\\\brave.exe', case=False) | Image.str.contains(r'\\\\CCleaner Browser\\\\Application\\\\CCleanerBrowser.exe', case=False) | Image.str.contains(r'\\\\chromium.exe', case=False) | Image.str.contains(r'\\\\firefox.exe', case=False) | Image.str.contains(r'\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', case=False) | Image.str.contains(r'\\\\iexplore.exe', case=False) | Image.str.contains(r'\\\\microsoftedge.exe', case=False) | Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\Opera.exe', case=False) | Image.str.contains(r'\\\\Vivaldi.exe', case=False) | Image.str.contains(r'\\\\Whale.exe', case=False) | Image.str.contains(r'\\\\olk.exe', case=False) | Image.str.contains(r'\\\\Outlook.exe', case=False) | Image.str.contains(r'\\\\RuntimeBroker.exe', case=False) | Image.str.contains(r'\\\\Thunderbird.exe', case=False) | Image.str.contains(r'\\\\Discord.exe', case=False) | Image.str.contains(r'\\\\Keybase.exe', case=False) | Image.str.contains(r'\\\\msteams.exe', case=False) | Image.str.contains(r'\\\\Slack.exe', case=False) | Image.str.contains(r'\\\\teams.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Profile Modification",
        "id": "b5b78988-486d-4a80-b991-930eff3ff8bf",
        "status": "test",
        "description": "Detects the creation or modification of a powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1546.013"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\Microsoft.PowerShell_profile.ps1', case=False) | TargetFilename.str.contains(r'\\\\PowerShell\\\\profile.ps1', case=False) | TargetFilename.str.contains(r'\\\\Program Files\\\\PowerShell\\\\7-preview\\\\profile.ps1', case=False) | TargetFilename.str.contains(r'\\\\Program Files\\\\PowerShell\\\\7\\\\profile.ps1', case=False) | TargetFilename.str.contains(r'\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\profile.ps1', case=False) | TargetFilename.str.contains(r'\\\\WindowsPowerShell\\\\profile.ps1', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Creation TXT File in User Desktop",
        "id": "caf02a0a-1e1c-4552-9b48-5e070bd88d11",
        "status": "test",
        "description": "Ransomware create txt file in the user Desktop",
        "tags": [
            "attack.impact",
            "attack.t1486"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\cmd.exe', case=False) & TargetFilename.str.contains(r'\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\Desktop\\\\', case=False) & TargetFilename.str.contains(r'.txt', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "New Outlook Macro Created",
        "id": "8c31f563-f9a7-450c-bfa8-35f8f32f1f61",
        "status": "test",
        "description": "Detects the creation of a macro file for Outlook.",
        "tags": [
            "attack.persistence",
            "attack.command-and-control",
            "attack.t1137",
            "attack.t1008",
            "attack.t1546"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\outlook.exe', case=False) & TargetFilename.str.contains(r'\\\\Microsoft\\\\Outlook\\\\VbaProject.OTM', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Created In PerfLogs",
        "id": "bbb7e38c-0b41-4a11-b306-d2a457b7ac2b",
        "status": "test",
        "description": "Detects suspicious file based on their extension being created in \"C:\\PerfLogs\\\". Note that this directory mostly contains \".etl\" files",
        "tags": [
            "attack.execution",
            "attack.t1059"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'C:\\\\PerfLogs\\\\', case=False) & (TargetFilename.str.contains(r'.7z', case=False) | TargetFilename.str.contains(r'.bat', case=False) | TargetFilename.str.contains(r'.bin', case=False) | TargetFilename.str.contains(r'.chm', case=False) | TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'.hta', case=False) | TargetFilename.str.contains(r'.lnk', case=False) | TargetFilename.str.contains(r'.ps1', case=False) | TargetFilename.str.contains(r'.psm1', case=False) | TargetFilename.str.contains(r'.py', case=False) | TargetFilename.str.contains(r'.scr', case=False) | TargetFilename.str.contains(r'.sys', case=False) | TargetFilename.str.contains(r'.vbe', case=False) | TargetFilename.str.contains(r'.vbs', case=False) | TargetFilename.str.contains(r'.zip', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "BloodHound Collection Files",
        "id": "02773bed-83bf-469f-b7ff-e676e7d78bab",
        "status": "test",
        "description": "Detects default file names outputted by the BloodHound collection tool SharpHound",
        "tags": [
            "attack.discovery",
            "attack.t1087.001",
            "attack.t1087.002",
            "attack.t1482",
            "attack.t1069.001",
            "attack.t1069.002",
            "attack.execution",
            "attack.t1059.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'BloodHound.zip', case=False) | TargetFilename.str.contains(r'_computers.json', case=False) | TargetFilename.str.contains(r'_containers.json', case=False) | TargetFilename.str.contains(r'_domains.json', case=False) | TargetFilename.str.contains(r'_gpos.json', case=False) | TargetFilename.str.contains(r'_groups.json', case=False) | TargetFilename.str.contains(r'_ous.json', case=False) | TargetFilename.str.contains(r'_users.json', case=False)) & ~ (Image.str.contains(r'\\\\svchost.exe', case=False) & TargetFilename.str.contains(r'C:\\\\Program Files\\\\WindowsApps\\\\Microsoft.', case=False) & TargetFilename.str.contains(r'\\\\pocket_containers.json', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Module File Created",
        "id": "e36941d0-c0f0-443f-bc6f-cb2952eb69ea",
        "status": "test",
        "description": "Detects the creation of a new PowerShell module \".psm1\", \".psd1\", \".dll\", \".ps1\", etc.",
        "tags": [
            "attack.persistence"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & (TargetFilename.str.contains(r'\\\\WindowsPowerShell\\\\Modules\\\\', case=False) | TargetFilename.str.contains(r'\\\\PowerShell\\\\7\\\\Modules\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Installation of TeamViewer Desktop",
        "id": "9711de76-5d4f-4c50-a94f-21e4e8f8384d",
        "status": "test",
        "description": "TeamViewer_Desktop.exe is create during install",
        "tags": [
            "attack.command-and-control",
            "attack.t1219"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\TeamViewer_Desktop.exe', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious desktop.ini Action",
        "id": "81315b50-6b60-4d8f-9928-3466e1022515",
        "status": "test",
        "description": "Detects unusual processes accessing desktop.ini, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk.",
        "tags": [
            "attack.persistence",
            "attack.t1547.009"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\desktop.ini', case=False) & ~ (Image.str.contains(r'C:\\\\Windows\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r'\\\\AppData\\\\Local\\\\JetBrains\\\\Toolbox\\\\bin\\\\7z.exe', case=False) & TargetFilename.str.contains(r'\\\\JetBrains\\\\apps\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\$WINDOWS.~BT\\\\NewOS\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Publisher Attachment File Dropped In Suspicious Location",
        "id": "3d2a2d59-929c-4b78-8c1a-145dfe9e07b1",
        "status": "test",
        "description": "Detects creation of files with the \".pub\" extension in suspicious or uncommon locations. This could be a sign of attackers abusing Publisher documents",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\', case=False) | TargetFilename.str.contains(r'\\\\Users\\\\Public\\\\', case=False) | TargetFilename.str.contains(r'\\\\Windows\\\\Temp\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Temp\\\\', case=False)) & TargetFilename.str.contains(r'.pub', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PSScriptPolicyTest Creation By Uncommon Process",
        "id": "1027d292-dd87-4a1a-8701-2abe04d7783c",
        "status": "test",
        "description": "Detects the creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process. This file is usually generated by Microsoft Powershell to test against Applocker.",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'__PSScriptPolicyTest_', case=False) & ~ (Image.str.contains(r':\\\\Program Files\\\\PowerShell\\\\7-preview\\\\pwsh.exe', case=False) | Image.str.contains(r':\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\dsac.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\sdiagnhost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\ServerManager.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\System32\\\\wsmprovhost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\sdiagnhost.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe', case=False) | Image.str.contains(r':\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "LiveKD Driver Creation",
        "id": "16fe46bb-4f64-46aa-817d-ff7bec4a2352",
        "status": "test",
        "description": "Detects the creation of the LiveKD driver, which is used for live kernel debugging",
        "tags": [
            "attack.defense-evasion",
            "attack.privilege-escalation"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename=='C:\\\\Windows\\\\System32\\\\drivers\\\\LiveKdD.SYS' & (Image.str.contains(r'\\\\livekd.exe', case=False) | Image.str.contains(r'\\\\livek64.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Creation In Suspicious Directory By Msdt.EXE",
        "id": "318557a5-150c-4c8d-b70e-a9910e199857",
        "status": "test",
        "description": "Detects msdt.exe creating files in suspicious directories which could be a sign of exploitation of either Follina or Dogwalk vulnerabilities",
        "tags": [
            "attack.persistence",
            "attack.t1547.001",
            "cve.2022-30190"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\msdt.exe', case=False) & (TargetFilename.str.contains(r'\\\\Desktop\\\\', case=False) | TargetFilename.str.contains(r'\\\\Start Menu\\\\Programs\\\\Startup\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\PerfLogs\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\ProgramData\\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Users\\\\Public\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "WerFault LSASS Process Memory Dump",
        "id": "c3e76af5-4ce0-4a14-9c9a-25ceb8fda182",
        "status": "test",
        "description": "Detects WerFault creating a dump file with a name that indicates that the dump file could be an LSASS process memory, which contains user credentials",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image=='C:\\\\WINDOWS\\\\system32\\\\WerFault.exe' & (TargetFilename.str.contains(r'\\\\lsass', case=False) | TargetFilename.str.contains(r'lsass.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "DLL Search Order Hijackig Via Additional Space in Path",
        "id": "b6f91281-20aa-446a-b986-38a92813a18f",
        "status": "test",
        "description": "Detects when an attacker create a similar folder structure to windows system folders such as (Windows, Program Files...)\nbut with a space in order to trick DLL load search order and perform a \"DLL Search Order Hijacking\" attack\n",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.defense-evasion",
            "attack.t1574.002"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'C:\\\\Windows \\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Program Files \\\\', case=False) | TargetFilename.str.contains(r'C:\\\\Program Files (x86) \\\\', case=False)) & TargetFilename.str.contains(r'.dll', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious File Drop by Exchange",
        "id": "6b269392-9eba-40b5-acb6-55c882b20ba6",
        "status": "test",
        "description": "Detects suspicious file type dropped by an Exchange component in IIS",
        "tags": [
            "attack.persistence",
            "attack.t1190",
            "attack.initial-access",
            "attack.t1505.003"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\w3wp.exe', case=False) & CommandLine.str.contains(r'MSExchange', case=False) & (TargetFilename.str.contains(r'.aspx', case=False) | TargetFilename.str.contains(r'.asp', case=False) | TargetFilename.str.contains(r'.ashx', case=False) | TargetFilename.str.contains(r'.ps1', case=False) | TargetFilename.str.contains(r'.bat', case=False) | TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.vbs', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Office Macro File Creation",
        "id": "91174a41-dc8f-401b-be89-7bfc140612a0",
        "status": "test",
        "description": "Detects the creation of a new office macro files on the systems",
        "tags": [
            "attack.initial-access",
            "attack.t1566.001"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'.docm', case=False) | TargetFilename.str.contains(r'.dotm', case=False) | TargetFilename.str.contains(r'.xlsm', case=False) | TargetFilename.str.contains(r'.xltm', case=False) | TargetFilename.str.contains(r'.potm', case=False) | TargetFilename.str.contains(r'.pptm', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - SafetyKatz Dump Indicator",
        "id": "e074832a-eada-4fd7-94a1-10642b130e16",
        "status": "test",
        "description": "Detects default lsass dump filename generated by SafetyKatz.",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\Temp\\\\debug.bin', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Persistence Via Outlook Form",
        "id": "c3edc6a5-d9d4-48d8-930e-aab518390917",
        "status": "test",
        "description": "Detects the creation of a new Outlook form which can contain malicious code",
        "tags": [
            "attack.persistence",
            "attack.t1137.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & Image.str.contains(r'\\\\outlook.exe', case=False) & (TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\FORMS\\\\IPM', case=False) | TargetFilename.str.contains(r'\\\\Local Settings\\\\Application Data\\\\Microsoft\\\\Forms', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential Startup Shortcut Persistence Via PowerShell.EXE",
        "id": "92fa78e7-4d39-45f1-91a3-8b23f3f1088d",
        "status": "test",
        "description": "Detects PowerShell writing startup shortcuts.\nThis procedure was highlighted in Red Canary Intel Insights Oct. 2021, \"We frequently observe adversaries using PowerShell to write malicious .lnk files into the startup directory to establish persistence.\nAccordingly, this detection opportunity is likely to identify persistence mechanisms in multiple threats.\nIn the context of Yellow Cockatoo, this persistence mechanism eventually launches the command-line script that leads to the installation of a malicious DLL\"\n",
        "tags": [
            "attack.persistence",
            "attack.t1547.001"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False)) & TargetFilename.str.contains(r'\\\\start menu\\\\programs\\\\startup\\\\', case=False) & TargetFilename.str.contains(r'.lnk', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": ".RDP File Created by Outlook Process",
        "id": "f748c45a-f8d3-4e6f-b617-fe176f695b8f",
        "status": "experimental",
        "description": "Detects the creation of files with the \".rdp\" extensions in the temporary directory that Outlook uses when opening attachments.\nThis can be used to detect spear-phishing campaigns that use RDP files as attachments.\n",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'.rdp', case=False) & (TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Packages\\\\Microsoft.Outlook_', case=False) | TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\Olk\\\\Attachments\\\\', case=False) | TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\', case=False) & TargetFilename.str.contains(r'\\\\Content.Outlook\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Dumpert Process Dumper Default File",
        "id": "93d94efc-d7ad-4161-ad7d-1638c4f908d8",
        "status": "test",
        "description": "Detects the creation of the default dump file used by Outflank Dumpert tool. A process dumper, which dumps the lsass process memory",
        "tags": [
            "attack.credential-access",
            "attack.t1003.001"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'dumpert.dmp', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Process Explorer Driver Creation By Non-Sysinternals Binary",
        "id": "de46c52b-0bf8-4936-a327-aace94f94ac6",
        "status": "test",
        "description": "Detects creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself.\nHack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver and removes it afterwards.\n",
        "tags": [
            "attack.persistence",
            "attack.privilege-escalation",
            "attack.t1068"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\PROCEXP', case=False) & TargetFilename.str.contains(r'.sys', case=False) & ~ (Image.str.contains(r'\\\\procexp.exe', case=False) | Image.str.contains(r'\\\\procexp64.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Screensaver Binary File Creation",
        "id": "97aa2e88-555c-450d-85a6-229bcd87efb8",
        "status": "test",
        "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity.\nScreensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension\n",
        "tags": [
            "attack.persistence",
            "attack.t1546.002"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'.scr', case=False) & ~ (Image.str.contains(r'\\\\Kindle.exe', case=False) | Image.str.contains(r'\\\\Bin\\\\ccSvcHst.exe', case=False) | Image.str.contains(r'\\\\TiWorker.exe', case=False) & TargetFilename.str.contains(r'\\\\uwfservicingscr.scr', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious DotNET CLR Usage Log Artifact",
        "id": "e0b06658-7d1d-4cd3-bf15-03467507ff7c",
        "status": "test",
        "description": "Detects the creation of Usage Log files by the CLR (clr.dll). These files are named after the executing process once the assembly is finished executing for the first time in the (user) session context.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\UsageLogs\\\\cmstp.exe.log', case=False) | TargetFilename.str.contains(r'\\\\UsageLogs\\\\cscript.exe.log', case=False) | TargetFilename.str.contains(r'\\\\UsageLogs\\\\mshta.exe.log', case=False) | TargetFilename.str.contains(r'\\\\UsageLogs\\\\msxsl.exe.log', case=False) | TargetFilename.str.contains(r'\\\\UsageLogs\\\\regsvr32.exe.log', case=False) | TargetFilename.str.contains(r'\\\\UsageLogs\\\\rundll32.exe.log', case=False) | TargetFilename.str.contains(r'\\\\UsageLogs\\\\svchost.exe.log', case=False) | TargetFilename.str.contains(r'\\\\UsageLogs\\\\wscript.exe.log', case=False) | TargetFilename.str.contains(r'\\\\UsageLogs\\\\wmic.exe.log', case=False)) & ~ (ParentImage.str.contains(r'\\\\MsiExec.exe', case=False) & ParentCommandLine.str.contains(r' -Embedding', case=False) & Image.str.contains(r'\\\\rundll32.exe', case=False) & CommandLine.str.contains(r'Temp', case=False) & CommandLine.str.contains(r'zzzzInvokeManagedCustomActionOutOfProc', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Adwind RAT / JRAT File Artifact",
        "id": "0bcfabcb-7929-47f4-93d6-b33fb67d34d1",
        "status": "test",
        "description": "Detects javaw.exe in AppData folder as used by Adwind / JRAT",
        "tags": [
            "attack.execution",
            "attack.t1059.005",
            "attack.t1059.007"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'\\\\AppData\\\\Roaming\\\\Oracle\\\\bin\\\\java', case=False) & TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'\\\\Retrive', case=False) & TargetFilename.str.contains(r'.vbs', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "SCR File Write Event",
        "id": "c048f047-7e2a-4888-b302-55f509d4a91d",
        "status": "test",
        "description": "Detects the creation of screensaver files (.scr) outside of system folders. Attackers may execute an application as an \".SCR\" file using \"rundll32.exe desk.cpl,InstallScreenSaver\" for example.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1218.011"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'.scr', case=False) & ~ (TargetFilename.str.contains(r':\\\\$WINDOWS.~BT\\\\NewOS\\\\', case=False) | TargetFilename.str.contains(r':\\\\Windows\\\\System32\\\\', case=False) | TargetFilename.str.contains(r':\\\\Windows\\\\SysWOW64\\\\', case=False) | TargetFilename.str.contains(r':\\\\Windows\\\\WinSxS\\\\', case=False) | TargetFilename.str.contains(r':\\\\WUDownloadCache\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Windows Binaries Write Suspicious Extensions",
        "id": "b8fd0e93-ff58-4cbd-8f48-1c114e342e62",
        "status": "test",
        "description": "Detects Windows executables that write files with suspicious extensions",
        "tags": [
            "attack.defense-evasion",
            "attack.t1036"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & ((Image.str.contains(r'\\\\csrss.exe', case=False) | Image.str.contains(r'\\\\lsass.exe', case=False) | Image.str.contains(r'\\\\RuntimeBroker.exe', case=False) | Image.str.contains(r'\\\\sihost.exe', case=False) | Image.str.contains(r'\\\\smss.exe', case=False) | Image.str.contains(r'\\\\wininit.exe', case=False) | Image.str.contains(r'\\\\winlogon.exe', case=False)) & (TargetFilename.str.contains(r'.bat', case=False) | TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'.hta', case=False) | TargetFilename.str.contains(r'.iso', case=False) | TargetFilename.str.contains(r'.ps1', case=False) | TargetFilename.str.contains(r'.txt', case=False) | TargetFilename.str.contains(r'.vbe', case=False) | TargetFilename.str.contains(r'.vbs', case=False)) | (Image.str.contains(r'\\\\dllhost.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\svchost.exe', case=False)) & (TargetFilename.str.contains(r'.bat', case=False) | TargetFilename.str.contains(r'.hta', case=False) | TargetFilename.str.contains(r'.iso', case=False) | TargetFilename.str.contains(r'.ps1', case=False) | TargetFilename.str.contains(r'.vbe', case=False) | TargetFilename.str.contains(r'.vbs', case=False))) & ~ (Image=='C:\\\\Windows\\\\System32\\\\dllhost.exe' & TargetFilename.str.contains(r':\\\\Users\\\\', case=False) & TargetFilename.str.contains(r'\\\\AppData\\\\Local\\\\Temp\\\\__PSScriptPolicyTest_', case=False) & TargetFilename.str.contains(r'.ps1', case=False) | Image=='C:\\\\Windows\\\\system32\\\\svchost.exe' & TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\DataStore\\\\', case=False) & TargetFilename.str.contains(r'\\\\sysvol\\\\', case=False) & TargetFilename.str.contains(r'\\\\Policies\\\\', case=False) & TargetFilename.str.contains(r'\\\\Machine\\\\Scripts\\\\Startup\\\\', case=False) & (TargetFilename.str.contains(r'.ps1', case=False) | TargetFilename.str.contains(r'.bat', case=False)))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "VHD Image Download Via Browser",
        "id": "8468111a-ef07-4654-903b-b863a80bbc95",
        "status": "test",
        "description": "Detects creation of \".vhd\"/\".vhdx\" files by browser processes.\nMalware can use mountable Virtual Hard Disk \".vhd\" files to encapsulate payloads and evade security controls.\n",
        "tags": [
            "attack.resource-development",
            "attack.t1587.001"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\brave.exe', case=False) | Image.str.contains(r'\\\\chrome.exe', case=False) | Image.str.contains(r'\\\\firefox.exe', case=False) | Image.str.contains(r'\\\\iexplore.exe', case=False) | Image.str.contains(r'\\\\maxthon.exe', case=False) | Image.str.contains(r'\\\\MicrosoftEdge.exe', case=False) | Image.str.contains(r'\\\\msedge.exe', case=False) | Image.str.contains(r'\\\\msedgewebview2.exe', case=False) | Image.str.contains(r'\\\\opera.exe', case=False) | Image.str.contains(r'\\\\safari.exe', case=False) | Image.str.contains(r'\\\\seamonkey.exe', case=False) | Image.str.contains(r'\\\\vivaldi.exe', case=False) | Image.str.contains(r'\\\\whale.exe', case=False)) & TargetFilename.str.contains(r'.vhd', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Renamed VsCode Code Tunnel Execution - File Indicator",
        "id": "d102b8f5-61dc-4e68-bd83-9a3187c67377",
        "status": "test",
        "description": "Detects the creation of a file with the name \"code_tunnel.json\" which indicate execution and usage of VsCode tunneling utility by an \"Image\" or \"Process\" other than VsCode.\n",
        "tags": [
            "attack.command-and-control"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\code_tunnel.json', case=False) & ~ (Image.str.contains(r'\\\\code-tunnel.exe', case=False) | Image.str.contains(r'\\\\code.exe', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Suspicious Outlook Macro Created",
        "id": "117d3d3a-755c-4a61-b23e-9171146d094c",
        "status": "test",
        "description": "Detects the creation of a macro file for Outlook.",
        "tags": [
            "attack.persistence",
            "attack.command-and-control",
            "attack.t1137",
            "attack.t1008",
            "attack.t1546"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\Microsoft\\\\Outlook\\\\VbaProject.OTM', case=False) & ~ Image.str.contains(r'\\\\outlook.exe', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PsExec Service File Creation",
        "id": "259e5a6a-b8d2-4c38-86e2-26c5e651361d",
        "status": "test",
        "description": "Detects default PsExec service filename which indicates PsExec service installation and execution",
        "tags": [
            "attack.execution",
            "attack.t1569.002",
            "attack.s0029"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\PSEXESVC.exe', case=False)"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "HackTool - Mimikatz Kirbi File Creation",
        "id": "9e099d99-44c2-42b6-a6d8-54c3545cab29",
        "status": "test",
        "description": "Detects the creation of files created by mimikatz such as \".kirbi\", \"mimilsa.log\", etc.",
        "tags": [
            "attack.credential-access",
            "attack.t1558"
        ],
        "level": "critical",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (TargetFilename.str.contains(r'.kirbi', case=False) | TargetFilename.str.contains(r'mimilsa.log', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potentially Suspicious WDAC Policy File Creation",
        "id": "1d2de8a6-4803-4fde-b85b-f58f3aa7a705",
        "status": "experimental",
        "description": "Detects suspicious Windows Defender Application Control (WDAC) policy file creation from abnormal processes that could be abused by attacker to block EDR/AV components while allowing their own malicious code to run on the system.\n",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\Windows\\\\System32\\\\CodeIntegrity\\\\', case=False) & ~ (Image.str.contains(r'\\\\Microsoft.ConfigurationManagement.exe', case=False) | Image.str.contains(r'\\\\WDAC Wizard.exe', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\PowerShell\\\\7-preview\\\\pwsh.exe', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\dllhost.exe', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe', case=False) | Image.str.contains(r'C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\dllhost.exe', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe', case=False) | CommandLine.str.contains(r'ConvertFrom-CIPolicy -XmlFilePath', case=False) & CommandLine.str.contains(r'-BinaryFilePath ', case=False) | CommandLine.str.contains(r'CiTool --update-policy', case=False) | CommandLine.str.contains(r'Copy-Item -Path', case=False) & CommandLine.str.contains(r'-Destination', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "NTDS.DIT Creation By Uncommon Parent Process",
        "id": "4e7050dd-e548-483f-b7d6-527ab4fa784d",
        "status": "test",
        "description": "Detects creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon parent process or directory",
        "tags": [
            "attack.credential-access",
            "attack.t1003.003"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & TargetFilename.str.contains(r'\\\\ntds.dit', case=False) & (ParentImage.str.contains(r'\\\\cscript.exe', case=False) | ParentImage.str.contains(r'\\\\httpd.exe', case=False) | ParentImage.str.contains(r'\\\\nginx.exe', case=False) | ParentImage.str.contains(r'\\\\php-cgi.exe', case=False) | ParentImage.str.contains(r'\\\\powershell.exe', case=False) | ParentImage.str.contains(r'\\\\pwsh.exe', case=False) | ParentImage.str.contains(r'\\\\w3wp.exe', case=False) | ParentImage.str.contains(r'\\\\wscript.exe', case=False) | ParentImage.str.contains(r'\\\\apache', case=False) | ParentImage.str.contains(r'\\\\tomcat', case=False) | ParentImage.str.contains(r'\\\\AppData\\\\', case=False) | ParentImage.str.contains(r'\\\\Temp\\\\', case=False) | ParentImage.str.contains(r'\\\\Public\\\\', case=False) | ParentImage.str.contains(r'\\\\PerfLogs\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Uncommon File Creation By Mysql Daemon Process",
        "id": "c61daa90-3c1e-4f18-af62-8f288b5c9aaf",
        "status": "experimental",
        "description": "Detects the creation of files with scripting or executable extensions by Mysql daemon.\nWhich could be an indicator of \"User Defined Functions\" abuse to download malware.\n",
        "tags": [
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==11 & (Image.str.contains(r'\\\\mysqld.exe', case=False) | Image.str.contains(r'\\\\mysqld-nt.exe', case=False)) & (TargetFilename.str.contains(r'.bat', case=False) | TargetFilename.str.contains(r'.dat', case=False) | TargetFilename.str.contains(r'.dll', case=False) | TargetFilename.str.contains(r'.exe', case=False) | TargetFilename.str.contains(r'.ps1', case=False) | TargetFilename.str.contains(r'.psm1', case=False) | TargetFilename.str.contains(r'.vbe', case=False) | TargetFilename.str.contains(r'.vbs', case=False))"
        ],
        "logsource": {
            "category": "file_event",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "IIS WebServer Access Logs Deleted",
        "id": "3eb8c339-a765-48cc-a150-4364c04652bf",
        "status": "test",
        "description": "Detects the deletion of IIS WebServer access logs which may indicate an attempt to destroy forensic evidence",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[23, 26]) & TargetFilename.str.contains(r'\\\\inetpub\\\\logs\\\\LogFiles\\\\', case=False) & TargetFilename.str.contains(r'.log', case=False)"
        ],
        "logsource": {
            "category": "file_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "ADS Zone.Identifier Deleted By Uncommon Application",
        "id": "3109530e-ab47-4cc6-a953-cac5ebcc93ae",
        "status": "test",
        "description": "Detects the deletion of the \"Zone.Identifier\" ADS by an uncommon process. Attackers can leverage this in order to bypass security restrictions that make use of the ADS such as Microsoft Office apps.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[23, 26]) & TargetFilename.str.contains(r':Zone.Identifier', case=False) & ~ (Image==['C:\\\\Program Files\\\\PowerShell\\\\7-preview\\\\pwsh.exe', 'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', 'C:\\\\Windows\\\\explorer.exe', 'C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe', 'C:\\\\Windows\\\\SysWOW64\\\\explorer.exe', 'C:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe']) & ~ (Image==['C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe', 'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'] | Image==['C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe', 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe'])"
        ],
        "logsource": {
            "category": "file_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Tomcat WebServer Logs Deleted",
        "id": "270185ff-5f50-4d6d-a27f-24c3b8c9fef8",
        "status": "test",
        "description": "Detects the deletion of tomcat WebServer logs which may indicate an attempt to destroy forensic evidence",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[23, 26]) & TargetFilename.str.contains(r'\\\\Tomcat', case=False) & TargetFilename.str.contains(r'\\\\logs\\\\', case=False) & (TargetFilename.str.contains(r'catalina.', case=False) | TargetFilename.str.contains(r'_access_log.', case=False) | TargetFilename.str.contains(r'localhost.', case=False))"
        ],
        "logsource": {
            "category": "file_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Unusual File Deletion by Dns.exe",
        "id": "8f0b1fb1-9bd4-4e74-8cdf-a8de4d2adfd0",
        "status": "test",
        "description": "Detects an unexpected file being deleted by dns.exe which my indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)",
        "tags": [
            "attack.initial-access",
            "attack.t1133"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[23, 26]) & Image.str.contains(r'\\\\dns.exe', case=False) & ~ TargetFilename.str.contains(r'\\\\dns.log', case=False)"
        ],
        "logsource": {
            "category": "file_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Backup Files Deleted",
        "id": "06125661-3814-4e03-bfa2-1e4411c60ac3",
        "status": "test",
        "description": "Detects deletion of files with extensions often used for backup files. Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.",
        "tags": [
            "attack.impact",
            "attack.t1490"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[23, 26]) & (Image.str.contains(r'\\\\cmd.exe', case=False) | Image.str.contains(r'\\\\powershell.exe', case=False) | Image.str.contains(r'\\\\pwsh.exe', case=False) | Image.str.contains(r'\\\\wt.exe', case=False) | Image.str.contains(r'\\\\rundll32.exe', case=False) | Image.str.contains(r'\\\\regsvr32.exe', case=False)) & (TargetFilename.str.contains(r'.VHD', case=False) | TargetFilename.str.contains(r'.bac', case=False) | TargetFilename.str.contains(r'.bak', case=False) | TargetFilename.str.contains(r'.wbcat', case=False) | TargetFilename.str.contains(r'.bkf', case=False) | TargetFilename.str.contains(r'.set', case=False) | TargetFilename.str.contains(r'.win', case=False) | TargetFilename.str.contains(r'.dsk', case=False))"
        ],
        "logsource": {
            "category": "file_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "File Deleted Via Sysinternals SDelete",
        "id": "6ddab845-b1b8-49c2-bbf7-1a11967f64bc",
        "status": "test",
        "description": "Detects the deletion of files by the Sysinternals SDelete utility. It looks for the common name pattern used to rename files.",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.004"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[23, 26]) & (TargetFilename.str.contains(r'.AAA', case=False) | TargetFilename.str.contains(r'.ZZZ', case=False)) & ~ TargetFilename.str.contains(r'\\\\Wireshark\\\\radius\\\\dictionary.alcatel-lucent.aaa', case=False)"
        ],
        "logsource": {
            "category": "file_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "TeamViewer Log File Deleted",
        "id": "b1decb61-ed83-4339-8e95-53ea51901720",
        "status": "test",
        "description": "Detects the deletion of the TeamViewer log files which may indicate an attempt to destroy forensic evidence",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.004"
        ],
        "level": "low",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[23, 26]) & TargetFilename.str.contains(r'\\\\TeamViewer_', case=False) & TargetFilename.str.contains(r'.log', case=False) & ~ Image=='C:\\\\Windows\\\\system32\\\\svchost.exe'"
        ],
        "logsource": {
            "category": "file_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Exchange PowerShell Cmdlet History Deleted",
        "id": "a55349d8-9588-4c5a-8e3b-1925fe2a4ffe",
        "status": "test",
        "description": "Detects the deletion of the Exchange PowerShell cmdlet History logs which may indicate an attempt to destroy forensic evidence",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[23, 26]) & TargetFilename.str.contains(r'\\\\Logging\\\\CmdletInfra\\\\LocalPowerShell\\\\Cmdlet\\\\', case=False) & TargetFilename.str.contains(r'_Cmdlet_', case=False)"
        ],
        "logsource": {
            "category": "file_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Prefetch File Deleted",
        "id": "0a1f9d29-6465-4776-b091-7f43b26e4c89",
        "status": "test",
        "description": "Detects the deletion of a prefetch file which may indicate an attempt to destroy forensic evidence",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070.004"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[23, 26]) & TargetFilename.str.contains(r':\\\\Windows\\\\Prefetch\\\\', case=False) & TargetFilename.str.contains(r'.pf', case=False) & ~ (Image.str.contains(r':\\\\windows\\\\system32\\\\svchost.exe', case=False) & (User.str.contains(r'AUTHORI', case=False) | User.str.contains(r'AUTORI', case=False)))"
        ],
        "logsource": {
            "category": "file_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Potential PrintNightmare Exploitation Attempt",
        "id": "5b2bbc47-dead-4ef7-8908-0cf73fcbecbf",
        "status": "test",
        "description": "Detect DLL deletions from Spooler Service driver folder. This might be a potential exploitation attempt of CVE-2021-1675",
        "tags": [
            "attack.persistence",
            "attack.defense-evasion",
            "attack.privilege-escalation",
            "attack.t1574",
            "cve.2021-1675"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[23, 26]) & Image.str.contains(r'\\\\spoolsv.exe', case=False) & TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\x64\\\\3\\\\', case=False)"
        ],
        "logsource": {
            "category": "file_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "EventLog EVTX File Deleted",
        "id": "63c779ba-f638-40a0-a593-ddd45e8b1ddc",
        "status": "test",
        "description": "Detects the deletion of the event log files which may indicate an attempt to destroy forensic evidence",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[23, 26]) & TargetFilename.str.contains(r'C:\\\\Windows\\\\System32\\\\winevt\\\\Logs\\\\', case=False) & TargetFilename.str.contains(r'.evtx', case=False)"
        ],
        "logsource": {
            "category": "file_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "PowerShell Console History Logs Deleted",
        "id": "ff301988-c231-4bd0-834c-ac9d73b86586",
        "status": "test",
        "description": "Detects the deletion of the PowerShell console History logs which may indicate an attempt to destroy forensic evidence",
        "tags": [
            "attack.defense-evasion",
            "attack.t1070"
        ],
        "level": "medium",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & (EventID==[23, 26]) & TargetFilename.str.contains(r'\\\\PSReadLine\\\\ConsoleHost_history.txt', case=False)"
        ],
        "logsource": {
            "category": "file_delete",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Access To Crypto Currency Wallets By Uncommon Applications",
        "id": "f41b0311-44f9-44f0-816d-dd45e39d4bc8",
        "status": "experimental",
        "description": "Detects file access requests to crypto currency files by uncommon processes.\nCould indicate potential attempt of crypto currency wallet stealing.\n",
        "tags": [
            "attack.t1003",
            "attack.credential-access"
        ],
        "level": "medium",
        "rule": [
            "(FileName.str.contains(r'\\\\AppData\\\\Roaming\\\\Ethereum\\\\keystore\\\\', case=False) | FileName.str.contains(r'\\\\AppData\\\\Roaming\\\\EthereumClassic\\\\keystore\\\\', case=False) | FileName.str.contains(r'\\\\AppData\\\\Roaming\\\\monero\\\\wallets\\\\', case=False) | FileName.str.contains(r'\\\\AppData\\\\Roaming\\\\Bitcoin\\\\wallet.dat', case=False) | FileName.str.contains(r'\\\\AppData\\\\Roaming\\\\BitcoinABC\\\\wallet.dat', case=False) | FileName.str.contains(r'\\\\AppData\\\\Roaming\\\\BitcoinSV\\\\wallet.dat', case=False) | FileName.str.contains(r'\\\\AppData\\\\Roaming\\\\DashCore\\\\wallet.dat', case=False) | FileName.str.contains(r'\\\\AppData\\\\Roaming\\\\DogeCoin\\\\wallet.dat', case=False) | FileName.str.contains(r'\\\\AppData\\\\Roaming\\\\Litecoin\\\\wallet.dat', case=False) | FileName.str.contains(r'\\\\AppData\\\\Roaming\\\\Ripple\\\\wallet.dat', case=False) | FileName.str.contains(r'\\\\AppData\\\\Roaming\\\\Zcash\\\\wallet.dat', case=False)) & ~ (Image=='System' | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\system32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False)) & ~ (Image.str.contains(r'C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\', case=False) & (Image.str.contains(r'\\\\MpCopyAccelerator.exe', case=False) | Image.str.contains(r'\\\\MsMpEng.exe', case=False)))"
        ],
        "logsource": {
            "category": "file_access",
            "product": "windows",
            "definition": "Requirements: Microsoft-Windows-Kernel-File ETW provider",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/file/file_access/file_access_win_susp_crypto_currency_wallets.yml"
        }
    },
    {
        "title": "Credential Manager Access By Uncommon Applications",
        "id": "407aecb1-e762-4acf-8c7b-d087bcff3bb6",
        "status": "experimental",
        "description": "Detects suspicious processes based on name and location that access the windows credential manager and vault.\nWhich can be a sign of credential stealing. Example case would be usage of mimikatz \"dpapi::cred\" function\n",
        "tags": [
            "attack.t1003",
            "attack.credential-access"
        ],
        "level": "medium",
        "rule": [
            "(FileName.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\Credentials\\\\', case=False) | FileName.str.contains(r'\\\\AppData\\\\Roaming\\\\Microsoft\\\\Credentials\\\\', case=False) | FileName.str.contains(r'\\\\AppData\\\\Local\\\\Microsoft\\\\Vault\\\\', case=False) | FileName.str.contains(r'\\\\ProgramData\\\\Microsoft\\\\Vault\\\\', case=False)) & ~ (Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\system32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_access",
            "product": "windows",
            "definition": "Requirements: Microsoft-Windows-Kernel-File ETW provider",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/file/file_access/file_access_win_susp_credential_manager_access.yml"
        }
    },
    {
        "title": "Access To Potentially Sensitive Sysvol Files By Uncommon Applications",
        "id": "d51694fe-484a-46ac-92d6-969e76d60d10",
        "status": "experimental",
        "description": "Detects file access requests to potentially sensitive files hosted on the Windows Sysvol share.",
        "tags": [
            "attack.credential-access",
            "attack.t1552.006"
        ],
        "level": "medium",
        "rule": [
            "FileName.str.contains(r'\\\\', case=False) & FileName.str.contains(r'\\\\sysvol\\\\', case=False) & FileName.str.contains(r'\\\\Policies\\\\', case=False) & (FileName.str.contains(r'audit.csv', case=False) | FileName.str.contains(r'Files.xml', case=False) | FileName.str.contains(r'GptTmpl.inf', case=False) | FileName.str.contains(r'groups.xml', case=False) | FileName.str.contains(r'Registry.pol', case=False) | FileName.str.contains(r'Registry.xml', case=False) | FileName.str.contains(r'scheduledtasks.xml', case=False) | FileName.str.contains(r'scripts.ini', case=False) | FileName.str.contains(r'services.xml', case=False)) & ~ (Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\system32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | Image=='C:\\\\Windows\\\\explorer.exe')"
        ],
        "logsource": {
            "category": "file_access",
            "product": "windows",
            "definition": "Requirements: Microsoft-Windows-Kernel-File ETW provider",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/file/file_access/file_access_win_susp_gpo_files.yml"
        }
    },
    {
        "title": "Access To Windows DPAPI Master Keys By Uncommon Applications",
        "id": "46612ae6-86be-4802-bc07-39b59feb1309",
        "status": "experimental",
        "description": "Detects file access requests to the the Windows Data Protection API Master keys by an uncommon application.\nThis can be a sign of credential stealing. Example case would be usage of mimikatz \"dpapi::masterkey\" function\n",
        "tags": [
            "attack.credential-access",
            "attack.t1555.004"
        ],
        "level": "medium",
        "rule": [
            "(FileName.str.contains(r'\\\\Microsoft\\\\Protect\\\\S-1-5-18\\\\', case=False) | FileName.str.contains(r'\\\\Microsoft\\\\Protect\\\\S-1-5-21-', case=False)) & ~ (Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\system32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False))"
        ],
        "logsource": {
            "category": "file_access",
            "product": "windows",
            "definition": "Requirements: Microsoft-Windows-Kernel-File ETW provider",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/file/file_access/file_access_win_susp_dpapi_master_key_access.yml"
        }
    },
    {
        "title": "Access To Windows Credential History File By Uncommon Applications",
        "id": "7a2a22ea-a203-4cd3-9abf-20eb1c5c6cd2",
        "status": "experimental",
        "description": "Detects file access requests to the Windows Credential History File by an uncommon application.\nThis can be a sign of credential stealing. Example case would be usage of mimikatz \"dpapi::credhist\" function\n",
        "tags": [
            "attack.credential-access",
            "attack.t1555.004"
        ],
        "level": "medium",
        "rule": [
            "FileName.str.contains(r'\\\\Microsoft\\\\Protect\\\\CREDHIST', case=False) & ~ (Image.str.contains(r'C:\\\\Program Files\\\\', case=False) | Image.str.contains(r'C:\\\\Program Files (x86)\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\system32\\\\', case=False) | Image.str.contains(r'C:\\\\Windows\\\\SysWOW64\\\\', case=False) | Image=='C:\\\\Windows\\\\explorer.exe')"
        ],
        "logsource": {
            "category": "file_access",
            "product": "windows",
            "definition": "Requirements: Microsoft-Windows-Kernel-File ETW provider",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/file/file_access/file_access_win_susp_credhist.yml"
        }
    },
    {
        "title": "Microsoft Teams Sensitive File Access By Uncommon Applications",
        "id": "65744385-8541-44a6-8630-ffc824d7d4cc",
        "status": "experimental",
        "description": "Detects file access attempts to sensitive Microsoft teams files (leveldb, cookies) by an uncommon process.\n",
        "tags": [
            "attack.credential-access",
            "attack.t1528"
        ],
        "level": "medium",
        "rule": [
            "(FileName.str.contains(r'\\\\Microsoft\\\\Teams\\\\Cookies', case=False) | FileName.str.contains(r'\\\\Microsoft\\\\Teams\\\\Local Storage\\\\leveldb', case=False)) & ~ Image.str.contains(r'\\\\Microsoft\\\\Teams\\\\current\\\\Teams.exe', case=False)"
        ],
        "logsource": {
            "category": "file_access",
            "product": "windows",
            "definition": "Requirements: Microsoft-Windows-Kernel-File ETW provider",
            "source": "/Users/i0001207/Documents/projects/pdninja/sigma/rules/windows/file/file_access/file_access_win_teams_sensitive_files.yml"
        }
    },
    {
        "title": "File Creation Date Changed to Another Year",
        "id": "558eebe5-f2ba-4104-b339-36f7902bcc1a",
        "status": "test",
        "description": "Attackers may change the file creation time of a backdoor to make it look like it was installed with the operating system.\nNote that many processes legitimately change the creation time of a file; it does not necessarily indicate malicious activity.\n",
        "tags": [
            "attack.t1070.006",
            "attack.defense-evasion"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==2 & (PreviousCreationUtcTime.str.contains(r'2022', case=False) & ~ CreationUtcTime.str.contains(r'2022', case=False) | PreviousCreationUtcTime.str.contains(r'202', case=False) & ~ CreationUtcTime.str.contains(r'202', case=False)) & ~ (Image==['C:\\\\Windows\\\\system32\\\\ProvTool.exe', 'C:\\\\Windows\\\\System32\\\\usocoreworker.exe', 'C:\\\\Windows\\\\ImmersiveControlPanel\\\\SystemSettings.exe'] | TargetFilename.str.contains(r'C:\\\\ProgramData\\\\USOPrivate\\\\UpdateStore\\\\', case=False) | TargetFilename.str.contains(r'.tmp', case=False) | TargetFilename.str.contains(r'.temp', case=False) | Image.str.contains(r'C:\\\\WINDOWS\\\\', case=False) & Image.str.contains(r'\\\\TiWorker.exe', case=False) & TargetFilename.str.contains(r'.cab', case=False))"
        ],
        "logsource": {
            "category": "file_change",
            "product": "windows",
            "service": "sysmon"
        }
    },
    {
        "title": "Unusual File Modification by dns.exe",
        "id": "9f383dc0-fdeb-4d56-acbc-9f9f4f8f20f3",
        "status": "test",
        "description": "Detects an unexpected file being modified by dns.exe which my indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)",
        "tags": [
            "attack.initial-access",
            "attack.t1133"
        ],
        "level": "high",
        "rule": [
            "Channel=='Microsoft-Windows-Sysmon/Operational' & EventID==2 & Image.str.contains(r'\\\\dns.exe', case=False) & ~ TargetFilename.str.contains(r'\\\\dns.log', case=False)"
        ],
        "logsource": {
            "category": "file_change",
            "product": "windows",
            "service": "sysmon"
        }
    }
]